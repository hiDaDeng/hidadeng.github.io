<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>编程 on 大邓和他的PYTHON</title>
    <link>/categories/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 25 Apr 2023 11:43:10 +0600</lastBuildDate><atom:link href="/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>tomotopy | 速度最快的LDA主题模型</title>
      <link>https://textdata.cn/blog/2023-04-25-tomotopy_is_the_fastest_topic_model/</link>
      <pubDate>Tue, 25 Apr 2023 11:43:10 +0600</pubDate>
      
      <guid>/blog/2023-04-25-tomotopy_is_the_fastest_topic_model/</guid>
      <description>接近C的速度，比市面的sklearn、gensim快十几倍</description>
      <content:encoded><![CDATA[<h2 id="代码下载tomotopy_codezip"><a href="tomotopy_code.zip">代码下载</a></h2>
<br>
<h2 id="tomotopy简介">tomotopy简介？</h2>
<p>tomotopy 是 tomoto（主题建模工具）的 Python 扩展，它是用 C++ 编写的基于 Gibbs 采样的主题模型库。支持的主题模型包括 LDA、DMR、HDP、MG-LDA、PA 和 HPA， 利用现代 CPU 的矢量化来最大化速度。</p>
<p><a href="https://github.com/bab2min/tomotopy">https://github.com/bab2min/tomotopy</a></p>
<p><strong>下图中同样的数据集， tomotopy迭代200次，gensim迭代10次的情况下， tomotopy与gensim耗时对比图，由此可见tomotopy训练主题模型速度之快。</strong>
<img loading="lazy" src="img/TomotopyVsGensim.png" alt=""  />
</p>
<p>当前版本的 tomotopy 支持的主题模型包括</p>
<ul>
<li>潜在狄利克雷分配（LDAModel）</li>
<li>标记的 LDA（LLDA 模型）</li>
<li>部分标记的 LDA（PLDA 模型）</li>
<li>监督LDA（SLDA模型）</li>
<li>Dirichlet 多项回归 (DMRModel)</li>
<li>广义狄利克雷多项回归 (GDMRModel)</li>
<li>分层狄利克雷过程 (HDPModel)</li>
<li>分层LDA（HLDA模型）</li>
<li>多粒 LDA（MGLDA 模型）</li>
<li>弹珠盘分配（PAModel）</li>
<li>分层 PA (HPAModel)</li>
<li>相关主题模型（CTModel）</li>
<li>动态主题模型 (DTModel)</li>
<li>基于伪文档的主题模型（PTModel）。</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">tomotopy</span><span class="o">==</span><span class="mf">0.12.2</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyLDAvis</span><span class="o">==</span><span class="mf">3.3.1</span>  
</code></pre></div><p>目前，tomotopy 可以利用 AVX2、AVX 或 SSE2 SIMD 指令集来最大程度利用PC的性能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">tomotopy</span> <span class="k">as</span> <span class="nn">tp</span>

<span class="n">tp</span><span class="o">.</span><span class="n">isa</span>
</code></pre></div><p>Run</p>
<pre><code>'avx2'
</code></pre>
<p>如果 tp.isa 返回 None，则训练过程可能需要很长时间。</p>
<br>
<h2 id="1-导入数据">1. 导入数据</h2>
<p>准备一个自己很熟悉的数据disaster_news.csv，一共有332条，话题数K=5，（正常情况下K是需要探索的）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;disaster_news.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<br>
<h2 id="2-整理数据">2. 整理数据</h2>
<p>分词、去除停用词,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">jieba</span>

<span class="n">stopwords</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;stopwords.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">segment</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">words</span>

<span class="n">test</span> <span class="o">=</span> <span class="s2">&#34;云南永善县级地震已致人伤间民房受损中新网月日电据云南昭通市防震减灾局官方网站消息截至日时云南昭通永善县级地震已造成人受伤其中重伤人轻伤人已全部送医院救治民房受损户间倒塌户间个乡镇所学校不同程度受损目前被损毁电力交通通讯设施已全部抢通修复当地已调拨帐篷顶紧急转移万人月日时分云南昭通永善县发生里氏级地震震源深度公里当地震感强烈此外成都等四川多地也有明显震感&#34;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">segment</span><span class="p">(</span><span class="n">test</span><span class="p">))</span>
</code></pre></div><pre><code>['云南', '永善县', '级', '地震', '已致', '伤间', '民房', '受损', '中新网', '日电', '云南', '昭通市', '防震', '减灾', '局', '官方网站', '消息', '日时', '云南', '昭通', '永善县', '级', '地震', '造成', '受伤', '重伤', '轻伤', '送', '医院', '救治', '民房', '受损', '户间', '倒塌', '户间', '乡镇', '学校', '不同', '程度', '受损', '目前', '损毁', '电力', '交通', '通讯', '设施', '抢通', '修复', '调拨', '帐篷', '顶', '紧急', '转移', '万人', '时分', '云南', '昭通', '永善县', '发生', '里氏', '级', '地震', '震源', '深度', '公里', '震感', '强烈', '成都', '四川', '多地', '明显', '震感']
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<h2 id="3-找到最佳k">3. 找到最佳K</h2>
<p>绘制Coherence曲线是一种常见的方法，用于选择主题数（k）的最佳值。这可以帮助您确定在哪个主题数下主题模型的性能最佳。以下是一般步骤以及如何解释Coherence曲线来找出最佳的k：</p>
<ol>
<li>创建主题模型：首先，您需要使用不同的k值来创建一系列主题模型，每个模型都有不同数量的主题（k）。这可以通过循环遍历k值并训练主题模型来完成。</li>
<li>计算Coherence：对于每个k值，使用tomotopy.coherence.Coherence类计算主题模型的一致性度量（比如C_V、UMass等）。这将为每个k值生成一个一致性得分。</li>
<li>绘制Coherence曲线：将k值（主题数）作为x轴，一致性得分作为y轴，绘制Coherence曲线。得到一个k和一致性得分之间的关系图。</li>
<li>寻找拐点：观察Coherence曲线，通常会看到一条曲线在某个k值附近达到峰值，然后开始下降。这个峰值对应的k值通常被认为是最佳的主题数。这是因为在这个k值下，主题模型的主题在文本中的一致性较高。</li>
<li>选择最佳k：根据Coherence曲线上的峰值，选择最佳的k值作为主题模型的最终主题数。</li>
<li>模型评估：一旦选择了最佳k值，您可以使用该值来训练最终的主题模型，并在任务中进行评估。</li>
</ol>
<p>Coherence曲线上的峰值通常对应于最佳的主题数，因为在这个点上主题之间的关联度较高。然而，需要谨慎选择，因为有时候峰值可能不明显，或者可能有多个相似的峰值。您可以使用这个方法来帮助确定最佳的主题数，但最终的决策可能还需要结合领域知识和任务需求来做出。</p>
<p>tomotopy每次运行得到的图形状不一样，为了保证运行结果具有可比性，设置了随机种子seed为1，你也可以根据需要改为自己需要的随机状态(这里有点像炼丹)。经过运行发现k=5比较合适（跑出了我的预判）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">find_k</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">min_k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_k</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="c1">#min_df 词语最少出现在2个文档中</span>
    <span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">min_k</span><span class="p">,</span> <span class="n">max_k</span><span class="p">):</span>
        <span class="c1">#seed随机种子，保证在大邓这里运行结果与你运行的结果一样</span>
        <span class="n">mdl</span> <span class="o">=</span> <span class="n">tp</span><span class="o">.</span><span class="n">LDAModel</span><span class="p">(</span><span class="n">min_df</span><span class="o">=</span><span class="n">min_df</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">words</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">words</span><span class="p">:</span>
                <span class="n">mdl</span><span class="o">.</span><span class="n">add_doc</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
        <span class="n">mdl</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
        <span class="n">coh</span> <span class="o">=</span> <span class="n">tp</span><span class="o">.</span><span class="n">coherence</span><span class="o">.</span><span class="n">Coherence</span><span class="p">(</span><span class="n">mdl</span><span class="p">)</span>
        <span class="n">scores</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">coh</span><span class="o">.</span><span class="n">get_score</span><span class="p">())</span>

    <span class="c1">#x = list(range(min_k, max_k - 1))  # 区间最右侧的值。注意：不能大于max_k</span>
    <span class="c1">#print(x)</span>
    <span class="c1">#print()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">min_k</span><span class="p">,</span> <span class="n">max_k</span><span class="p">),</span> <span class="n">scores</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s2">&#34;number of topics&#34;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s2">&#34;coherence&#34;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
    
<span class="n">find_k</span><span class="p">(</span><span class="n">docs</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">],</span> <span class="n">min_k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_k</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/output_11_0.png" alt="png"  />
</p>
<br>
<h2 id="4-训练lda">4. 训练lda</h2>
<p>使用tomotopy的LDA模型， 话题数K=5</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">tomotopy</span> <span class="k">as</span> <span class="nn">tp</span>

<span class="c1">#初始化LDA</span>
<span class="n">mdl</span> <span class="o">=</span> <span class="n">tp</span><span class="o">.</span><span class="n">LDAModel</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="mi">555</span><span class="p">)</span>
<span class="k">for</span> <span class="n">words</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">]:</span>
    <span class="c1">#确认words 是 非空词语列表</span>
    <span class="k">if</span> <span class="n">words</span><span class="p">:</span>
        <span class="n">mdl</span><span class="o">.</span><span class="n">add_doc</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">words</span><span class="p">)</span>

<span class="c1">#训练</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>

<span class="c1">#查看每个topic feature words</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mdl</span><span class="o">.</span><span class="n">k</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Top 10 words of topic #</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">))</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">mdl</span><span class="o">.</span><span class="n">get_topic_words</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Top 10 words of topic #0
    [(&#39;一辆&#39;, 0.02751251682639122), (&#39;事故&#39;, 0.021704642102122307), (&#39;记者&#39;, 0.018342189490795135), (&#39;死亡&#39;, 0.01650812290608883), (&#39;造成&#39;, 0.014062701724469662), (&#39;人员&#39;, 0.013909862376749516), (&#39;现场&#39;, 0.013451346196234226), (&#39;受伤&#39;, 0.012687151320278645), (&#39;相撞&#39;, 0.011922957375645638), (&#39;货车&#39;, 0.011922957375645638)]


​    
​    Top 10 words of topic #1
​    [(&#39;学生&#39;, 0.02709135226905346), (&#39;食物中毒&#39;, 0.02498047426342964), (&#39;出现&#39;, 0.019175563007593155), (&#39;医院&#39;, 0.016185153275728226), (&#39;事件&#39;, 0.013546556234359741), (&#39;调查&#39;, 0.013194743543863297), (&#39;年月日&#39;, 0.012842929922044277), (&#39;治疗&#39;, 0.012667023576796055), (&#39;症状&#39;, 0.011787491850554943), (&#39;名&#39;, 0.011259771883487701)]


​    
​    Top 10 words of topic #2
​    [(&#39;现场&#39;, 0.018848909065127373), (&#39;发生&#39;, 0.01677251048386097), (&#39;医院&#39;, 0.015015557408332825), (&#39;起火&#39;, 0.014216942712664604), (&#39;原因&#39;, 0.012140544131398201), (&#39;目前&#39;, 0.012140544131398201), (&#39;救治&#39;, 0.01150165218859911), (&#39;进行&#39;, 0.011022482998669147), (&#39;名&#39;, 0.009425252676010132), (&#39;火势&#39;, 0.009265529923141003)]


​    
​    Top 10 words of topic #3
​    [(&#39;发生&#39;, 0.03348556533455849), (&#39;爆炸&#39;, 0.022389251738786697), (&#39;造成&#39;, 0.019663840532302856), (&#39;死亡&#39;, 0.01713310182094574), (&#39;受伤&#39;, 0.016938429325819016), (&#39;年月日&#39;, 0.016354413703083992), (&#39;轿车&#39;, 0.012655640952289104), (&#39;警方&#39;, 0.012460969388484955), (&#39;袭击&#39;, 0.012266295962035656), (&#39;事件&#39;, 0.011487606912851334)]


​    
​    Top 10 words of topic #4
​    [(&#39;地震&#39;, 0.047826822847127914), (&#39;发生&#39;, 0.03555167838931084), (&#39;火灾&#39;, 0.03140682727098465), (&#39;时分&#39;, 0.020885275676846504), (&#39;级&#39;, 0.015783920884132385), (&#39;时间&#39;, 0.013870910741388798), (&#39;公里&#39;, 0.013711493462324142), (&#39;人员伤亡&#39;, 0.013073823414742947), (&#39;记者&#39;, 0.013073823414742947), (&#39;震感&#39;, 0.012276736088097095)]
</code></pre></div><br>
<p>查看话题模型信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">mdl</span><span class="o">.</span><span class="n">summary</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Basic</span><span class="w"> </span><span class="n">Info</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="nf">LDAModel</span><span class="w"> </span><span class="p">(</span><span class="n">current</span><span class="w"> </span><span class="n">version</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">12</span><span class="p">.</span><span class="mi">2</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">332</span><span class="w"> </span><span class="n">docs</span><span class="p">,</span><span class="w"> </span><span class="mi">29749</span><span class="w"> </span><span class="n">words</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Total</span><span class="w"> </span><span class="n">Vocabs</span><span class="p">:</span><span class="w"> </span><span class="mi">8428</span><span class="p">,</span><span class="w"> </span><span class="n">Used</span><span class="w"> </span><span class="n">Vocabs</span><span class="p">:</span><span class="w"> </span><span class="mi">2984</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Entropy</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">words</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">.</span><span class="mi">10665</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Entropy</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">term</span><span class="o">-</span><span class="n">weighted</span><span class="w"> </span><span class="n">words</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">.</span><span class="mi">10665</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Removed</span><span class="w"> </span><span class="n">Vocabs</span><span class="p">:</span><span class="w"> </span><span class="o">&lt;</span><span class="n">NA</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Training</span><span class="w"> </span><span class="n">Info</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Iterations</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="n">Burn</span><span class="o">-</span><span class="k">in</span><span class="w"> </span><span class="n">steps</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Optimization</span><span class="w"> </span><span class="k">Interval</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Log</span><span class="o">-</span><span class="n">likelihood</span><span class="w"> </span><span class="n">per</span><span class="w"> </span><span class="n">word</span><span class="p">:</span><span class="w"> </span><span class="o">-</span><span class="mi">7</span><span class="p">.</span><span class="mi">79934</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Initial</span><span class="w"> </span><span class="n">Parameters</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">tw</span><span class="p">:</span><span class="w"> </span><span class="n">TermWeight</span><span class="p">.</span><span class="n">ONE</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">min_cf</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">(</span><span class="n">minimum</span><span class="w"> </span><span class="n">collection</span><span class="w"> </span><span class="n">frequency</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">words</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">min_df</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">(</span><span class="n">minimum</span><span class="w"> </span><span class="n">document</span><span class="w"> </span><span class="n">frequency</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">words</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">rm_top</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">(</span><span class="n">the</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">top</span><span class="w"> </span><span class="n">words</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">removed</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">k</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">(</span><span class="n">the</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">topics</span><span class="w"> </span><span class="k">between</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="mi">32767</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">alpha</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="p">(</span><span class="n">hyperparameter</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">Dirichlet</span><span class="w"> </span><span class="n">distribution</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">document</span><span class="o">-</span><span class="n">topic</span><span class="p">,</span><span class="w"> </span><span class="n">given</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">single</span><span class="w"> </span><span class="o">`</span><span class="kt">float</span><span class="o">`</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">symmetric</span><span class="w"> </span><span class="n">prior</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="k">with</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">`</span><span class="n">k</span><span class="o">`</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="o">`</span><span class="kt">float</span><span class="o">`</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">asymmetric</span><span class="w"> </span><span class="n">prior</span><span class="p">.)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">eta</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="w"> </span><span class="p">(</span><span class="n">hyperparameter</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">Dirichlet</span><span class="w"> </span><span class="n">distribution</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">topic</span><span class="o">-</span><span class="n">word</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">seed</span><span class="p">:</span><span class="w"> </span><span class="mi">555</span><span class="w"> </span><span class="p">(</span><span class="n">random</span><span class="w"> </span><span class="n">seed</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">trained</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">version</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">12</span><span class="p">.</span><span class="mi">2</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Parameters</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="nf">alpha</span><span class="w"> </span><span class="p">(</span><span class="n">Dirichlet</span><span class="w"> </span><span class="n">prior</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">per</span><span class="o">-</span><span class="n">document</span><span class="w"> </span><span class="n">topic</span><span class="w"> </span><span class="n">distributions</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">  </span><span class="p">[</span><span class="mi">0</span><span class="p">.</span><span class="mi">7143365</span><span class="w">  </span><span class="mi">0</span><span class="p">.</span><span class="mi">6852513</span><span class="w">  </span><span class="mi">0</span><span class="p">.</span><span class="mi">75089616</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6204677</span><span class="w">  </span><span class="mi">0</span><span class="p">.</span><span class="mi">7040125</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="nf">eta</span><span class="w"> </span><span class="p">(</span><span class="n">Dirichlet</span><span class="w"> </span><span class="n">prior</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">per</span><span class="o">-</span><span class="n">topic</span><span class="w"> </span><span class="n">word</span><span class="w"> </span><span class="n">distribution</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">  </span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Topics</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#0 (6513) : 一辆 事故 记者 死亡 造成
</span><span class="c1"></span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#1 (5655) : 学生 食物中毒 出现 医院 事件
</span><span class="c1"></span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#2 (6231) : 现场 发生 医院 起火 原因
</span><span class="c1"></span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#3 (5107) : 发生 爆炸 造成 死亡 受伤
</span><span class="c1"></span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#4 (6243) : 地震 发生 火灾 时分 级
</span></code></pre></div><h3 id="topic解读">topic解读</h3>
<p>根据每个话题top10的特征词，5个话题解读为</p>
<ul>
<li>交通事故| #0 (6513) : 一辆 事故 记者 死亡 造成</li>
<li>食品安全| #1 (5655) : 学生 食物中毒 出现 医院 事件</li>
<li>火灾新闻| #2 (6231) : 现场 发生 医院 起火 原因</li>
<li>恐怖袭击| #3 (5107) : 发生 爆炸 造成 死亡 受伤</li>
<li>地震灾害| #4 (6243) : 地震 发生 火灾 时分 级</li>
</ul>
<br>
<h2 id="5-可视化">5. 可视化</h2>
<p>使用pyLDAvis</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyLDAvis</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">,</span> <span class="n">category</span><span class="o">=</span><span class="ne">Warning</span><span class="p">)</span>

<span class="c1">#在notebook显示</span>
<span class="n">pyLDAvis</span><span class="o">.</span><span class="n">enable_notebook</span><span class="p">()</span>

<span class="c1">#获取pyldavis需要的参数</span>
<span class="n">topic_term_dists</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">stack</span><span class="p">([</span><span class="n">mdl</span><span class="o">.</span><span class="n">get_topic_word_dist</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mdl</span><span class="o">.</span><span class="n">k</span><span class="p">)])</span>
<span class="n">doc_topic_dists</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">stack</span><span class="p">([</span><span class="n">doc</span><span class="o">.</span><span class="n">get_topic_dist</span><span class="p">()</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">mdl</span><span class="o">.</span><span class="n">docs</span><span class="p">])</span>
<span class="n">doc_topic_dists</span> <span class="o">/=</span> <span class="n">doc_topic_dists</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">doc_lengths</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">words</span><span class="p">)</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">mdl</span><span class="o">.</span><span class="n">docs</span><span class="p">])</span>
<span class="n">vocab</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">mdl</span><span class="o">.</span><span class="n">used_vocabs</span><span class="p">)</span>
<span class="n">term_frequency</span> <span class="o">=</span> <span class="n">mdl</span><span class="o">.</span><span class="n">used_vocab_freq</span>


<span class="n">prepared_data</span> <span class="o">=</span> <span class="n">pyLDAvis</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span>
    <span class="n">topic_term_dists</span><span class="p">,</span> 
    <span class="n">doc_topic_dists</span><span class="p">,</span> 
    <span class="n">doc_lengths</span><span class="p">,</span> 
    <span class="n">vocab</span><span class="p">,</span> 
    <span class="n">term_frequency</span><span class="p">,</span>
    <span class="n">start_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="c1"># tomotopy话题id从0开始，pyLDAvis话题id从1开始</span>
    <span class="n">sort_topics</span><span class="o">=</span><span class="kc">False</span> <span class="c1">#注意：否则pyLDAvis与tomotopy内的话题无法一一对应。 </span>
<span class="p">)</span>


<span class="c1">#可视化结果存到html文件中</span>
<span class="c1">#pyLDAvis.save_html(prepared_data, &#39;ldavis.html&#39;)</span>

<span class="c1">#notebook中显示</span>
<span class="n">pyLDAvis</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">prepared_data</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/ldavis.png" alt=""  />
</p>
<br>
<h2 id="6-预测">6. 预测</h2>
<p>预测某文档的话题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jieba</span>
<span class="n">stopwords</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;stopwords.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="c1">#预测</span>
<span class="n">doc</span> <span class="o">=</span> <span class="s1">&#39;云南永善县级地震已致伤间民房受损中新网日电云南昭通市防震减灾局官方网站消息日时云南昭通永善县级地震造成受伤重伤轻伤送医院救治民房受损户间倒塌户间乡镇学校不同程度受损目前损毁电力交通通讯设施抢通修复调拨帐篷顶紧急转移万人时分云南昭通永善县发生里氏级地震震源深度公里震感强烈成都四川多地明显震感&#39;</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">]</span>

<span class="c1">#构造tomotopy需要的数据</span>
<span class="n">doc_inst</span> <span class="o">=</span> <span class="n">mdl</span><span class="o">.</span><span class="n">make_doc</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">words</span><span class="p">)</span>
<span class="n">topic_dist</span><span class="p">,</span> <span class="n">ll</span> <span class="o">=</span> <span class="n">mdl</span><span class="o">.</span><span class="n">infer</span><span class="p">(</span><span class="n">doc_inst</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Topic Distribution for Unseen Docs: &#34;</span><span class="p">,</span> <span class="n">topic_dist</span><span class="p">)</span>

</code></pre></div><pre><code>Topic Distribution for Unseen Docs:  [0.11645161 0.10240361 0.5342029  0.03622254 0.21071935]
</code></pre>
<p>列表长度为5， 列表第三个数值(topic #2)数值最大，该文本最大的可能性是topic #2</p>
<br>
<h2 id="补充-指定主题特征词">补充: 指定主题特征词</h2>
<p>如果对数据比较了解，已经知道有一些主题，可以把比较明显的词语分配给指定的topic_id。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">mdl</span> <span class="o">=</span> <span class="n">tp</span><span class="o">.</span><span class="n">LDAModel</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="mi">555</span><span class="p">)</span>

<span class="k">for</span> <span class="n">words</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">words</span><span class="p">:</span>
        <span class="n">mdl</span><span class="o">.</span><span class="n">add_doc</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>

<span class="c1">#把word相撞 分配给topic_0, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="c1">#注意这里的range(5) 5是对应的k值</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;相撞&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>
<span class="c1">#把word地震 分配给topic_1, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;地震&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>
<span class="c1">#把word火灾 分配给topic_2, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;火灾&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">2</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>
<span class="c1">#把word中毒 分配给topic_3, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;中毒&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>
<span class="c1">#把word袭击 分配给topic_4, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;袭击&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">4</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>

<span class="n">mdl</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">summary</span><span class="p">()</span>  
</code></pre></div><pre><code>&lt;Basic Info&gt;
| LDAModel (current version: 0.12.2)
| 332 docs, 29749 words
| Total Vocabs: 8428, Used Vocabs: 2984
| Entropy of words: 7.10665
| Entropy of term-weighted words: 7.10665
| Removed Vocabs: &lt;NA&gt;
|
&lt;Training Info&gt;
| Iterations: 10, Burn-in steps: 0
| Optimization Interval: 10
| Log-likelihood per word: -7.72251
|
&lt;Initial Parameters&gt;
| tw: TermWeight.ONE
| min_cf: 0 (minimum collection frequency of words)
| min_df: 2 (minimum document frequency of words)
| rm_top: 0 (the number of top words to be removed)
| k: 5 (the number of topics between 1 ~ 32767)
| alpha: [0.1] (hyperparameter of Dirichlet distribution for document-topic, given as a single `float` in case of symmetric prior and as a list with length `k` of `float` in case of asymmetric prior.)
| eta: 0.01 (hyperparameter of Dirichlet distribution for topic-word)
| seed: 555 (random seed)
| trained in version 0.12.2
|
&lt;Parameters&gt;
| alpha (Dirichlet prior on the per-document topic distributions)
|  [0.7106193  0.60264444 0.5734784  0.71375024 0.6234263 ]
| eta (Dirichlet prior on the per-topic word distribution)
|  0.01
|
&lt;Topics&gt;
| #0 (6599) : 一辆 事故 死亡 发生 造成
| #1 (6087) : 地震 发生 级 公里 年月日
| #2 (5892) : 火灾 发生 现场 大火 起火
| #3 (6402) : 医院 学生 食物中毒 出现 名
| #4 (4769) : 事件 发生 袭击 人员 工作
|
</code></pre>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>EmoBank | 中文维度情感词典</title>
      <link>https://textdata.cn/blog/chinese_emobank/</link>
      <pubDate>Sat, 16 Jul 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/chinese_emobank/</guid>
      <description>中文情绪银行 (Chinese EmoBank)是由人工标注产生的 中文维度情感词典，含效价valence和唤醒度arousal两个维度。</description>
      <content:encoded><![CDATA[<h2 id="引言">引言</h2>
<p><strong>『中文情绪银行』</strong> (Chinese EmoBank)是由人工标注产生的 <strong>中文维度情感词典</strong>  ，含效价valence和唤醒度arousal两个维度。</p>
<ul>
<li>效价valence，可测量出文本中的积极/消极情感程度。</li>
<li>唤醒度arousal，可测量文本中平静/兴奋状态的程度。</li>
</ul>
<p>该词典包括</p>
<ul>
<li>CVAW(Chinese valence-arousal words)， 5512词</li>
<li>CVAP(Chinese valence-arousal phrases)， 含2998词组</li>
<li>语料CVAS(Chinese valence-arousal sentences) 含2582个单句</li>
<li>语料CVAT(Chinese valence-arousal texts）  2969个句子</li>
</ul>
<p>需要注意该词典是繁体中文词典，经过繁体转简体，已将CVAW嵌入到最新的cntext包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install --upgrade cntext 
</code></pre></div><br>
<blockquote>
<p>本文图片来源于</p>
<p><a href="http://nlp.innobic.yzu.edu.tw/resources/ChineseEmoBank.html">http://nlp.innobic.yzu.edu.tw/resources/ChineseEmoBank.html</a></p>
</blockquote>
<br>
<h2 id="cvawchinese-valence-arousal-words">CVAW(Chinese valence-arousal words)</h2>
<p><img loading="lazy" src="img/cvaw.png" alt=""  />
</p>
<table>
<thead>
<tr>
<th style="text-align:left">Word</th>
<th style="text-align:left">Valence_Mean</th>
<th style="text-align:left">Arousal_Mean</th>
<th style="text-align:left">Valence_SD</th>
<th style="text-align:left">Arousal_SD</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">乏味</td>
<td style="text-align:left">3.4</td>
<td style="text-align:left">3.0</td>
<td style="text-align:left">0.800</td>
<td style="text-align:left">1.414</td>
</tr>
<tr>
<td style="text-align:left">放鬆</td>
<td style="text-align:left">6.2</td>
<td style="text-align:left">2.0</td>
<td style="text-align:left">0.748</td>
<td style="text-align:left">0.894</td>
</tr>
<tr>
<td style="text-align:left">勝利</td>
<td style="text-align:left">7.8</td>
<td style="text-align:left">7.2</td>
<td style="text-align:left">0.748</td>
<td style="text-align:left">1.166</td>
</tr>
<tr>
<td style="text-align:left">痛苦</td>
<td style="text-align:left">2.4</td>
<td style="text-align:left">6.8</td>
<td style="text-align:left">0.490</td>
<td style="text-align:left">0.748</td>
</tr>
</tbody>
</table>
<br>
<h2 id="cvapchinese-valence-arousal-phrases-">CVAP(Chinese valence-arousal phrases )</h2>
<p><img loading="lazy" src="img/cvap.png" alt=""  />
</p>
<table>
<thead>
<tr>
<th style="text-align:left">Modifier Type</th>
<th style="text-align:left">Phrase</th>
<th style="text-align:left">Valence_Mean</th>
<th style="text-align:left">Arousal_Mean</th>
<th style="text-align:left">Valence_SD</th>
<th style="text-align:left">Arousal_SD</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">deg</td>
<td style="text-align:left">十分有趣</td>
<td style="text-align:left">8.222</td>
<td style="text-align:left">7.063</td>
<td style="text-align:left">0.533</td>
<td style="text-align:left">0.390</td>
</tr>
<tr>
<td style="text-align:left">mod</td>
<td style="text-align:left">應該開心</td>
<td style="text-align:left">5.986</td>
<td style="text-align:left">5.350</td>
<td style="text-align:left">0.242</td>
<td style="text-align:left">0.456</td>
</tr>
<tr>
<td style="text-align:left">neg</td>
<td style="text-align:left">不喜歡</td>
<td style="text-align:left">3.033</td>
<td style="text-align:left">5.788</td>
<td style="text-align:left">0.481</td>
<td style="text-align:left">0.605</td>
</tr>
<tr>
<td style="text-align:left">neg_deg</td>
<td style="text-align:left">沒有太難過</td>
<td style="text-align:left">4.478</td>
<td style="text-align:left">4.675</td>
<td style="text-align:left">0.413</td>
<td style="text-align:left">0.538</td>
</tr>
</tbody>
</table>
<br>
<h2 id="cvaschinese-valence-arousal-sentences">CVAS(Chinese valence-arousal sentences)</h2>
<p><img loading="lazy" src="img/cvas.png" alt=""  />
</p>
<table>
<thead>
<tr>
<th style="text-align:left">Text</th>
<th style="text-align:left">Valence_Mean</th>
<th style="text-align:left">Arousal_Mean</th>
<th style="text-align:left">Valence_SD</th>
<th style="text-align:left">Arousal_SD</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">這是我觀賞過的最令人驚歎的演出。</td>
<td style="text-align:left">7.000</td>
<td style="text-align:left">7.750</td>
<td style="text-align:left">0.000</td>
<td style="text-align:left">0.433</td>
</tr>
<tr>
<td style="text-align:left">簡直是人生惡夢的開端。</td>
<td style="text-align:left">2.600</td>
<td style="text-align:left">6.750</td>
<td style="text-align:left">0.490</td>
<td style="text-align:left">0.829</td>
</tr>
<tr>
<td style="text-align:left">從小我經常覺得現實很無聊。</td>
<td style="text-align:left">3.667</td>
<td style="text-align:left">4.333</td>
<td style="text-align:left">0.471</td>
<td style="text-align:left">0.471</td>
</tr>
<tr>
<td style="text-align:left">過去他們很輕鬆地賺錢。</td>
<td style="text-align:left">5.667</td>
<td style="text-align:left">4.000</td>
<td style="text-align:left">1.247</td>
<td style="text-align:left">0.816</td>
</tr>
</tbody>
</table>
<br>
<h2 id="cvatchinese-valence-arousal-texts">CVAT(Chinese valence-arousal texts)</h2>
<p><img loading="lazy" src="img/cvat.png" alt=""  />
</p>
<table>
<thead>
<tr>
<th style="text-align:left">Text</th>
<th style="text-align:left">Valence_Mean</th>
<th style="text-align:left">Arousal_Mean</th>
<th style="text-align:left">Valence_SD</th>
<th style="text-align:left">Arousal_SD</th>
<th style="text-align:left">Category</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">很多車主抱怨新車怠速抖動嚴重&mdash;-冷車時更嚴重。</td>
<td style="text-align:left">3.250</td>
<td style="text-align:left">5.667</td>
<td style="text-align:left">1.090</td>
<td style="text-align:left">1.054</td>
<td style="text-align:left">Car</td>
</tr>
<tr>
<td style="text-align:left">房間裏黴味，煙味撲鼻，沒有窗戶通風，骯髒的地毯上的斑斑點點的污蹟，令人觸目驚心。</td>
<td style="text-align:left">1.889</td>
<td style="text-align:left">6.875</td>
<td style="text-align:left">0.737</td>
<td style="text-align:left">0.927</td>
<td style="text-align:left">Hotel</td>
</tr>
<tr>
<td style="text-align:left">CPU顯卡也完全夠用，接口也非常齊全，總體來說很滿意！</td>
<td style="text-align:left">7.143</td>
<td style="text-align:left">5.000</td>
<td style="text-align:left">0.350</td>
<td style="text-align:left">0.816</td>
<td style="text-align:left">Laptop</td>
</tr>
<tr>
<td style="text-align:left">飛安帶來更多保障，也提供旅客更安心的服務品質。</td>
<td style="text-align:left">7.000</td>
<td style="text-align:left">4.222</td>
<td style="text-align:left">0.535</td>
<td style="text-align:left">1.133</td>
<td style="text-align:left">News</td>
</tr>
</tbody>
</table>
<br>
<h2 id="文献">文献</h2>
<p>如果用到Chinese EmoBank词典，请注明出处。</p>
<p>Lung-Hao Lee, Jian-Hong Li and Liang-Chih Yu, &ldquo;<a href="https://dl.acm.org/doi/pdf/10.1145/3489141">Chinese EmoBank: Building Valence-Arousal Resources for Dimensional Sentiment Analysis,</a>&rdquo; <em>ACM Trans. Asian and Low-Resource Language Information Processing</em>, vol. 21, no. 4, article 65, 2022.</p>
<p>Liang-Chih Yu, Lung-Hao Lee, Shuai Hao, Jin Wang, Yunchao He, Jun Hu, K. Robert Lai, and Xuejie Zhang. 2016. &ldquo;<a href="http://www.aclweb.org/anthology/N16-1066.pdf">Building Chinese affective resources in valence-arousal dimensions.</a> In <em>Proceedings of NAACL/HLT-16</em>, pages 540-545.</p>
<br>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;ChineseEmoBank.pkl&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;Referer-1&#39;: &#39;Lee, Lung-Hao, Jian-Hong Li, and Liang-Chih Yu. &#34;Chinese EmoBank: Building Valence-Arousal Resources for Dimensional Sentiment Analysis.&#34; Transactions on Asian and Low-Resource Language Information Processing 21, no. 4 (2022): 1-18.&#39;,
 
 &#39;Referer-2&#39;: &#39;Liang-Chih Yu, Lung-Hao Lee, Shuai Hao, Jin Wang, Yunchao He, Jun Hu, K. Robert Lai, and Xuejie Zhang. 2016. &#34;Building Chinese affective resources in valence-arousal dimensions. In Proceedings of NAACL/HLT-16, pages 540-545.&#39;,
 
 &#39;Desc&#39;: &#39;Chinese Sentiment Dictionary, includes 「valence」「arousal」. In cntext, we only take single word into account, ignore phrase.&#39;,
 
 &#39;ChineseEmoBank&#39;:       word  valence  arousal
 0     不可思议      5.4      7.2
 1       不平      3.6      5.8
 2       不甘      3.2      6.4
 3       不安      3.8      5.4
 4       不利      3.6      5.6
 ...    ...      ...      ...
 5505    黏闷      2.8      5.6
 5506    黏腻      2.7      5.8
 5507    艳丽      5.8      4.5
 5508    苗条      6.7      3.8
 5509    修长      7.0      4.5
</code></pre></div><br>
<p>ChineseEmoBank的CVAW词典(Chinese valence-arousal words)原有 5512词，经过繁体转简体处理，得到5510个词。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">diction_df</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;ChineseEmoBank.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;ChineseEmoBank&#39;</span><span class="p">]</span>
<span class="n">diction_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<p>测量一段文本的valence和arousal，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;很多车主抱怨新车怠速抖动严重---冷车时更严重。&#39;</span>

<span class="n">help</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_weight</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Help on function sentiment_by_weight in module cntext.stats:

sentiment_by_weight(text, diction, params, lang=&#39;english&#39;)
    calculate the occurrences of each sentiment category words in text;
    the complex influence of intensity adverbs and negative words on emotion is not considered.
    :param text:  text sring
    :param diction:  sentiment dictionary dataframe with weight.；
    :param params:  set sentiment category weight, such as params=[&#39;valence&#39;, &#39;arousal&#39;]
    :param lang: &#34;chinese&#34; or &#34;english&#34;; default lang=&#34;english&#34;
    
    :return:
</code></pre></div><br>
<p>计算文本text中chinese_emobank词两维度的汇总得分，得到valence、arousal、word_num</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;很多车主抱怨新车怠速抖动严重---冷车时更严重。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_weight</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">,</span> 
                       <span class="n">diction</span> <span class="o">=</span> <span class="n">diction_df</span><span class="p">,</span>
                       <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;valence&#39;</span><span class="p">,</span> <span class="s1">&#39;arousal&#39;</span><span class="p">],</span>
                       <span class="n">lang</span> <span class="o">=</span> <span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;valence&#39;: 14.8, 
&#39;arousal&#39;: 24.8, 
&#39;word_num&#39;: 13}
</code></pre></div><ul>
<li>valence是句子中各个chinese_emobank词valence得分的加总。</li>
<li>arousal是句子中各个chinese_emobank词arousal得分的加总。</li>
<li>word_num是句子中的词语数(含标点符号)，短文本的情况下，word_num会不太准确，长文本情况下无限接近真实词语数。</li>
</ul>
<p>需要注意，文本越长，valence和arousal指标应该会越大。使用这两个指标时，需要结合word_num进行均值处理，即</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Valence = valence/word_num

Arousal = arousal/word_num
</code></pre></div><p>这里未做均值处理，尽量保留文本的原始信息。</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>chinese-converter | 中文繁简互换Python库</title>
      <link>https://textdata.cn/blog/chinese_converter/</link>
      <pubDate>Mon, 11 Jul 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/chinese_converter/</guid>
      <description>中文繁简互换</description>
      <content:encoded><![CDATA[<p>网上有一些繁体中文资源不能直接利用，通过chinese-convertor库，我们可以进行中文繁简互换。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install chinese-converter
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">chinese_converter</span>

<span class="n">chinese_converter</span><span class="o">.</span><span class="n">to_traditional</span><span class="p">(</span><span class="s2">&#34;中国&#34;</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">中國
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">chinese_converter</span><span class="o">.</span><span class="n">to_simplified</span><span class="p">(</span><span class="s2">&#34;中國&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">中国
</code></pre></div><br>
<br>
<h2 id="长期征稿">长期征稿</h2>
<div style="text-align: center;">
<figure >
    <a href="https://textdata.cn/blog/call_for_paper/">
        <img src="/images/blog/call_for_paper.png" width="100%" />
    </a>
    <figcaption><small><i>点击了解投稿</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="招募小伙伴">招募小伙伴</h2>
<div style="text-align: center;">
<figure >
    <a href="https://textdata.cn/blog/we_need_you/">
        <img src="/images/blog/we_need_you.png" width="100%" />
    </a>
    <figcaption><small><i>点击加入我们</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>2022暑期工作坊 | Python实证指标构建与文本分析</title>
      <link>https://textdata.cn/blog/2022_summer_workshop/</link>
      <pubDate>Sun, 10 Jul 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/2022_summer_workshop/</guid>
      <description>在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题：网络爬虫技术 解决如何从网络世界中高效地采集数据？文本分析技术 解决如何从杂乱的文本数据中抽取实证指标(情绪、不确定、态度、认知等变量)</description>
      <content:encoded><![CDATA[<h2 id="课程介绍">课程介绍</h2>
<p>在科学研究中，数据的获取及分析是最重要的也是最棘手的两个环节！</p>
<p>在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题：</p>
<ul>
<li>网络爬虫技术 解决如何从网络世界中高效地采集数据？</li>
<li>文本分析技术 解决如何从杂乱的文本数据中抽取实证指标(情绪、不确定、态度、认知等变量)？</li>
</ul>
<br>
<h3 id="授课方式">授课方式</h3>
<ul>
<li>线上直播（电脑端与手机端皆可播放，回放十天）。</li>
<li>开课前会建立讲师微信群并发布最新学习资料，群聊长期有效，助教全程跟随。</li>
<li>第一时段-在线讲座 2022.8.16~17  上午&amp;下午</li>
<li>第二时段-论文指导 2022.8.24 下午
<ul>
<li>Python实证指标构建与文本分析课程结束一周后</li>
<li>半天时间</li>
<li>学员利用一周的时间用Python收集、整理数据、文本分析，撰写一个初步的论文与老师交流，老师一对一地指导如何修改文本数据挖掘的实证论文。</li>
</ul>
</li>
</ul>
<h3 id="费用与优惠">费用与优惠</h3>
<ul>
<li>报名总费用2500元（包含在线讲座费用2000元、论文指导费用500元、课后长期答疑以及全部讲义以及代码等资料）</li>
<li>个人报名优惠：报名两科9折；三科8折；四科及以上7.5折；老朋友9折；凭本人学生证报名可再减200元/人。</li>
<li>团队报名优惠：三人成团及以上9折；五人成团及以上8折。</li>
<li>7月10日之前报名可享每人优惠100元。</li>
<li>各项优惠叠加不超过总价的7.5折。</li>
</ul>
<h3 id="报名方式">报名方式</h3>
<ul>
<li>从即日起可加老师微信咨询与报名。</li>
<li>17816181460（同微信）（汪老师）</li>
</ul>
<p><img loading="lazy" src="img/wechat.png" alt=""  />
</p>
<h3 id="缴费方式">缴费方式</h3>
<ul>
<li>扫码付款</li>
<li>添加汪老师微信获取,支持公务卡支付</li>
</ul>
<h3 id="对公转账">对公转账</h3>
<ul>
<li>单位：杭州国商智库信息技术服务有限公司</li>
<li>开户银行：中国银行杭州大学城支行</li>
<li>银行账户：6232636200100260588</li>
</ul>
<p><br><br></p>
<h2 id="内容安排">内容安排</h2>
<h3 id="一python语法入门">一、Python语法入门</h3>
<ul>
<li>Python跟英语一样是一门语言</li>
<li>数据类型之字符串</li>
<li>数据类型之列表元组集合</li>
<li>数据类型之字典</li>
<li>数据类型之布尔值、None</li>
<li>逻辑语句(if&amp;for&amp;tryexcept)</li>
<li>列表推导式</li>
<li>理解函数</li>
<li>常用的内置函数</li>
<li>os路径库</li>
<li>内置库csv文件库</li>
<li>常见错误汇总</li>
</ul>
<br>
<h3 id="二数据采集">二、数据采集</h3>
<ul>
<li>网络爬虫原理</li>
<li>寻找网址规律</li>
<li>获取网页-requests库</li>
<li>pyquery库解析html网页</li>
<li>案例 1：豆瓣小说</li>
<li>json库解析json网页</li>
<li>案例 2：豆瓣电影</li>
<li>案例 3：微博</li>
<li>案例 4： 批量下载文档、多媒体文件</li>
<li>案例 5：上市公司定期报告pdf批量下载</li>
<li>区分动态网站与静态网站</li>
</ul>
<br>
<h3 id="三文本分析入门">三、文本分析入门</h3>
<ul>
<li>文本分析在经管领域中的应用</li>
<li>读取文件中的数据(txt、pdf、docx、xlsx、csv)</li>
<li>数据清洗re库-从文本中抽取姓名、年龄、电话、数字等各种信息</li>
<li>案例 6：如何将多个文件中的数据整理到一个excel中</li>
<li>中文jieba分词</li>
<li>案例 7：词频统计、制作词云图</li>
<li>案例 8：共现法扩展情感词典</li>
<li>案例 9：词向量word2vec扩展情感词典</li>
<li>案例 10：中文情感分析(无权重词典法)</li>
<li>数据分析pandas库快速入门</li>
<li>案例 11：使用pandas对excel中的文本进行情感分析</li>
<li>案例 12: 计算地图中两点(经纬度)距离及方位角</li>
</ul>
<br>
<h3 id="四机器学习">四、机器学习</h3>
<ul>
<li>了解机器学习</li>
<li>理解特征工程</li>
<li>文本特征工程-将文本转化为机器可处理的数字向量</li>
<li>认识词袋法、one-hot、Tf-Idf、word2vec</li>
<li>案例 13：使用tf-idf进行情感分析（有权重词典法）</li>
<li>案例 14： 使用标注工具对文本数据进行标注</li>
<li>案例 15：在线评论文本分类</li>
<li>文本相似性计算</li>
<li>案例 16：使用文本相似性识别变化(政策连续性)</li>
<li>案例 17：Kmeans聚类算法</li>
<li>案例 18：LDA话题模型</li>
<li>案例 19: 识别图片中的文本</li>
<li>python爬虫、文本分析、机器学习等技术在论文中的应用赏析</li>
</ul>
<br>
<h3 id="五词嵌入与认知">五、词嵌入与认知</h3>
<ul>
<li>词嵌入</li>
<li>豆瓣影评-gensim导入词向量模型</li>
<li>认知偏见(刻板印象)</li>
<li>总结: 文本分析在经管领域中的应用概述</li>
</ul>
<p><br><br></p>
<h2 id="文本分析应用案例">文本分析应用案例</h2>
<p>参照两篇论文的摘要，可以通过场景化等的方式帮助我们迅速理解上面两个问题。摘要部分的加粗内容是论文用到的分析技术，在我们的课程中均有与之对应的知识点和代码。</p>
<p><strong>王伟,陈伟,祝效国,王洪伟.众筹融资成功率与语言风格的说服性——基于Kickstarter的实证研究[J].管理世界,2016(05):81-98.</strong></p>
<blockquote>
<p>摘要：众筹融资效果决定着众筹平台的兴衰。众筹行为很大程度上是由投资者的主观因素决定的，而影响主观判断的一个重要因素就是语言的说服性。而这又是一种典型的用 户产生内容（UGC），项目发起者可以采用任意类型的语言风格对项目进行描述。不同的语 言风格会改变投资者对项目前景的感知，进而影响他们的投资意愿。首先，依据 Aristotle 修 辞三元组以及 Hovland 说服模型，采用扎根理论，将众筹项目的语言说服风格分为 5 类：诉诸可信、诉诸情感、诉诸逻辑、诉诸回报和诉诸夸张。</p>
<p>然后，借助文本挖掘方法，构建说服风格语料库，并对项目摘要进行分类。</p>
<p>最后，建立语言说服风格对项目筹资影响的计量模型，并对 Kickstarter 平台上的 128345 个项目进行实证分析。总体来说，由于项目性质的差异，不同 的项目类别对应于不同的最佳说服风格。</p>
</blockquote>
<br>
<p><a href="https://textdata.cn/blog/text_mining_in_2021_management_world/">胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.</a></p>
<blockquote>
<p>在可持续发展战略导向下，秉持长远理念是企业抵御外部环境威胁和拥有可持续经营能力的基 石。然而，作为企业掌舵人的管理者并非都具有长远的目光。本文基于高层梯队理论和社会心理学中的时间 导向理论，提出了管理者内在的短视主义特质与企业资本支出和研发支出的关系，并采用文本分析和机器学习技术构建出管理者短视主义指标从而对其进行实证检验。研究结果发现，年报 MD&amp;A 中披露的“短期视域” 语言 能够反映管理者内在的短视主义特质，管理者短视会导致企业减少资本支出和研发支出。当公司治理水平、监督型机构投资者的持股比例以及分析师关注度越高时，管理者短视主义对这些长期投资的负向影响越易受到抑制。最终，管理者短视主义导致的研发支出减少和资本投资效率降低会损害企业的未来绩效。本文拓宽了管理者短视主义的行为后果分析，对企业高层次管理人才的聘任以及企业和政府的监管具有重要的实践启示。同时，本文将文本分析和机器学习方法引入管理者短视主义的研究，为未来该领域的研究提供了参考和借鉴。</p>
</blockquote>
<br>
<p><strong>Wang, Quan, Beibei Li, and Param Vir Singh. &ldquo;Copycats vs. original mobile apps: A machine learning copycat-detection method and empirical analysis.&rdquo; Information Systems Research 29, no. 2 (2018): 273-291.</strong></p>
<blockquote>
<p>摘要：尽管移动应用程序市场的增长为移动应用程序开发人员创新提供了巨大的市场机会和经济诱因，但它也不可避免地刺激了模仿者开发盗版软件。原始应用的从业人员和开发人员声称，模仿者窃取了原始应用的想法和潜在需求，并呼吁应用平台对此类模仿者采取行动。令人惊讶的是，很少有严格的研究来分析模仿者是否以及如何影响原始应用的需求。</p>
<p>进行此类研究的主要威慑因素是缺乏一种客观的方法来识别应用程序是模仿者还是原创者。通过结合自然语言处理，潜在语义分析，基于网络的聚类和图像分析等机器学习技术，我们提出了一种将应用识别为原始或模仿者并检测两种模仿者的方法：欺骗性和非欺骗性。</p>
<p>根据检测结果，我们进行了经济计量分析，以确定五年间在iOS App Store中发布的5,141个开发人员的10,100个动作游戏应用程序样本中，模仿应用程序对原始应用程序需求的影响。我们的结果表明，特定模仿者对原始应用需求的影响取决于模仿者的质量和欺骗程度。高质量的非欺骗性复制品会对原件产生负面影响。相比之下，低质量，欺骗性的模仿者正面影响了对原件的需求。</p>
<p>结果表明，从总体上讲，模仿者对原始移动应用程序需求的影响在统计上是微不足道的。我们的研究通过提供一种识别模仿者的方法，并提供模仿者对原始应用需求的影响的证据，为越来越多的移动应用消费文献做出了贡献。</p>
</blockquote>
<br>
<p><strong>Markowitz, D. M., &amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).</strong></p>
<blockquote>
<p>处理流畅性等元认知框架通常表明人们对简单和通用的语言的反应比复杂和技术性语言更有利。与复杂的信息相比，人们更容易处理简单和非技术性的信息，因此会更多地与目标进行互动。在涵盖 12 个现场样本（总 n = 1,064,533）的两项研究中，我们通过展示人们在付出时间和注意力时更多地使用非技术语言（例如，简单的在线语言往往会获得更多社交信息）来建立并复制这种越简单越好的现象订婚）。然而，人们在捐款时会对复杂的语言做出反应（例如，慈善捐赠活动和赠款摘要中的复杂语言往往会收到更多的钱）。这一证据表明，人们根据时间或金钱目标以不同的方式使用复杂语言的启发式方法。这些结果强调语言是社会和心理过程的镜头，以及大规模测量文本模式的计算方法。</p>
</blockquote>
<br>
<h2 id="文献汇总">文献汇总</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[1]冉雅璇,李志强,刘佳妮,张逸石.大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用[J/OL].南开管理评论:1-27[2022-04-08].http://kns.cnki.net/kcms/detail/12.1288.F.20210905.1337.002.html
[2]沈艳,陈赟,黄卓．文本大数据分析在经济学和金融学中的应用：一个文献综述[EB/OL].http://www.ccer.pku.edu.cn/yjcg/tlg/242968.htm,2018-11-19
[3]王伟,陈伟,祝效国,王洪伟. 众筹融资成功率与语言风格的说服性-基于Kickstarter的实证研究.*管理世界*.2016;5:81-98.
[4]胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.
[5]Kai Li, Feng Mai, Rui Shen, Xinyan Yan, Measuring Corporate Culture Using Machine Learning, *The Review of Financial Studies*,2020
[6]Kenneth Benoit. July 16, 2019. “Text as Data: An Overview.” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. Handbook of Research Methods in Political Science and International Relations. Thousand Oaks: Sage.
[7]Loughran T, McDonald B. Textual analysis in accounting and finance: A survey[J]. *Journal of Accounting Research*, 2016, 54(4): 1187-1230. Author links open overlay panelComputational socioeconomics
[8]Berger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. &#34;Uniting the tribes: Using text for marketing insight.&#34; *Journal of Marketing* 84, no. 1 (2020): 1-25.
[9]Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. &#34;A review of best practice recommendations for text analysis in R (and a user-friendly app).&#34; *Journal of Business and Psychology* 33, no. 4 (2018): 445-459.
[10]Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. &#34;Lazy prices.&#34; *The Journal of Finance* 75, no. 3 (2020): 1371-1415.
[11]孟庆斌, 杨俊华, 鲁冰. 管理层讨论与分析披露的信息含量与股价崩盘风险——基于文本向量化方法的研究[J]. *中国工业经济*, 2017 (12): 132-150.
[12]Wang, Quan, Beibei Li, and Param Vir Singh. &#34;Copycats vs. Original Mobile Apps: A Machine Learning Copycat-Detection Method and Empirical Analysis.&#34; *Information Systems Research* 29.2 (2018): 273-291.
[13]Hoberg, Gerard, and Gordon Phillips. 2016, Text-based network industries and endogenous product differentiation,?*Journal of Political Economy* 124, 1423-1465
[14]Loughran, Tim, and Bill McDonald. &#34;When is a liability not a liability? Textual analysis, dictionaries, and 10‐Ks.&#34; *The Journal of Finance* 66, no. 1 (2011): 35-65.
[15]Fairclough, Norman. 2003. Analysing discourse: Textual analysis for social research (Psychology Press)
[16]Grimmer, Justin, and Brandon M Stewart. 2013, Text as data: The promise and pitfalls of automatic content analysis methods for political texts, *Political analysis*21, 267-297.
[17]Markowitz, D. M., &amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).
[18]Packard, Grant, and Jonah Berger. “How concrete language shapes customer satisfaction.” Journal of Consumer Research 47, no. 5 (2021): 787-806.
[19]Chen, H., Yang, C., Zhang, X., Liu, Z., Sun, M. and Jin, J., 2021. From Symbols to Embeddings: A Tale of Two Representations in Computational Social Science. Journal of Social Computing, 2(2), pp.103-156.
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Asent库 | 英文文本数据情感分析</title>
      <link>https://textdata.cn/blog/asent_sentiment_analysis/</link>
      <pubDate>Sun, 10 Jul 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/asent_sentiment_analysis/</guid>
      <description>使用Python做英文情感分析，考虑否定词、程度副词对情感词的修饰作用。</description>
      <content:encoded><![CDATA[<p>Asent 是一个新的Python情感分析库， 依据情感词典，按照一定的规则，可用于评判词语、句子、文档的情感信息(正、负)。</p>
<p>目前与情感有关的规则有</p>
<ul>
<li>否定（即“不高兴”）</li>
<li>加强词（“非常高兴”）</li>
<li>对比共轭（即“但是”）</li>
<li>其他强调标记，如感叹号、大小写和问号。</li>
</ul>
<p>Asent目前仅支持<code>英语、丹麦、挪威、瑞典4种语言</code>。</p>
<br>
<h2 id="安装配置">安装配置</h2>
<p>学习课程之前，需要先下载并配置spacy模型， <a href="https://github.com/explosion/spacy-models/releases">https://github.com/explosion/spacy-models/releases</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">spacy</span><span class="o">==</span><span class="mf">3.2.0</span>
<span class="n">pip3</span> <span class="n">install</span> <span class="n">asent</span><span class="o">==</span><span class="mf">0.4.2</span>

<span class="c1">#下载en_core_web_lg-3.3.0-py3-none-any.whl到桌面</span>
<span class="c1">#下载链接: https://pan.baidu.com/s/13hFWFjy9uRxzC-9lqrp7SQ 提取码: em8l </span>

<span class="c1">#然后使用如下安装命令</span>
<span class="n">pip3</span> <span class="n">install</span> <span class="n">Desktop</span><span class="o">/</span><span class="n">en_core_web_lg</span><span class="o">-</span><span class="mf">3.2.0</span><span class="o">-</span><span class="n">py3</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>以下将带您逐步了解情绪是如何计算的。</p>
<p>首先，我们需要一个 spaCy 管道，并且我们需要向其中添加 asent 管道。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">asent</span>
<span class="kn">import</span> <span class="nn">spacy</span>

<span class="c1"># load spacy pipeline</span>
<span class="n">nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;en_core_web_lg&#34;</span><span class="p">)</span>

<span class="c1"># add the rule-based sentiment model</span>
<span class="n">nlp</span><span class="o">.</span><span class="n">add_pipe</span><span class="p">(</span><span class="s2">&#34;asent_en_v1&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>&lt;asent.component.Asent at 0x7fd6b3243130&gt;
</code></pre>
<br>
<h2 id="效价和极性">效价和极性</h2>
<p>如下所示， token的效价信息来自于人工标注的词典。例如<code>I am not very happy</code>中词语<code>happy</code>的人类情感评分是2.7。</p>
<p><img loading="lazy" src="img/token_polarity.png" alt=""  />
</p>
<p>首先我们查看每个词语对应的效价。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="s2">&#34;I am not very happy.&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">token</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">valence</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>I 	 0.0
am 	 0.0
not 	 0.0
very 	 0.0
happy 	 2.7
. 	 0.0
</code></pre>
<p>在该语境中， <code>happy</code>前面有否定词not修饰，所以情感极性方面应该被看做消极的。一般否定词和副词可以将形容词的情感进行反转和放大(缩小)。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>polarity=0.0 token=I span=I
polarity=0.0 token=am span=am
polarity=0.0 token=not span=not
polarity=0.0 token=very span=very
polarity=-2.215 token=happy span=not very happy
polarity=0.0 token=. span=.
</code></pre>
<p>注意到， 词语在<code>happy</code>拥有-2.215的极性分，该分是由<code>not very happy</code>确定的。</p>
<br>
<h2 id="可视化">可视化</h2>
<p>asent拥有多种情感极性可视化的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">asent</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s2">&#34;prediction&#34;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/fig1.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">asent</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s2">&#34;analysis&#34;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/fig2.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">doc</span><span class="o">.</span><span class="n">sents</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">sentence</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="p">)</span>
</code></pre></div><pre><code>neg=0.391 neu=0.609 pos=0.0 compound=-0.4964 span=I am not very happy.
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span>
</code></pre></div><pre><code>DocPolarityOutput(neg=0.391, neu=0.609, pos=0.0, compound=-0.4964)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc2</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="s2">&#34;I am not very happy.I am very very happy.It is awesome!!&#34;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;doc2情感极性信息: &#39;</span><span class="p">,</span> <span class="n">doc2</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="p">)</span>
<span class="nb">print</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;doc2情感得分:&#39;</span><span class="p">,</span> <span class="n">doc2</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="o">.</span><span class="n">compound</span><span class="p">)</span>
</code></pre></div><pre><code>doc2情感极性信息:  neg=0.13 neu=0.536 pos=0.333 compound=0.2794

doc2情感得分: 0.279353567721562
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#每个句子的情感极性信息</span>
<span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">doc2</span><span class="o">.</span><span class="n">sents</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">sentence</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="p">)</span>
</code></pre></div><pre><code>neg=0.391 neu=0.609 pos=0.0 compound=-0.4964 span=I am not very happy.
neg=0.0 neu=0.539 pos=0.461 compound=0.6453 span=I am very very happy.
neg=0.0 neu=0.461 pos=0.539 compound=0.6892 span=It is awesome!!
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#每个句子的情感得分</span>
<span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">doc2</span><span class="o">.</span><span class="n">sents</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">sentence</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="o">.</span><span class="n">compound</span><span class="p">)</span>
</code></pre></div><pre><code>-0.4964238981617178
0.6452764659402158
0.689208135386188
</code></pre>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext库 | 关于DUTIR被污染解决办法</title>
      <link>https://textdata.cn/blog/fixed_dutir_bug/</link>
      <pubDate>Mon, 20 Jun 2022 12:40:10 +0600</pubDate>
      
      <guid>/blog/fixed_dutir_bug/</guid>
      <description>实在抱歉，大邓的粗心导致词典DUTIR被污染。大家如果使用cntext中的DUTIR，麻烦更新至1.7.2版本。</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="img/dutir%e9%97%ae%e9%a2%98.png" alt=""  />
</p>
<h2 id="本文资料">本文资料</h2>
<p><a href="DUTIR%E9%97%AE%E9%A2%98.zip">点击下载本文资料</a></p>
<br>
<h2 id="词典污染了">词典污染了</h2>
<p>实在抱歉，大邓的粗心导致词典DUTIR被污染。大家如果使用cntext中的DUTIR，麻烦更新至1.7.2版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="n">dutir</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">)</span>
<span class="n">dutir</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1.7.1

{&#39;DUTIR&#39;: {&#39;哀&#39;: [&#39;怀想&#39;, &#39;治丝而棼&#39;, &#39;伤害&#39;,...],
           &#39;好&#39;: [&#39;进贤黜奸&#39;, &#39;清醇&#39;, &#39;放达&#39;, ...],
           &#39;惊&#39;: [&#39;惊奇不已&#39;, &#39;魂惊魄惕&#39;, &#39;海外奇谈&#39;,...],
           &#39;惧&#39;: [&#39;忸忸怩怩&#39;, &#39;谈虎色变&#39;, &#39;手忙脚乱&#39;,...],
           &#39;乐&#39;: [&#39;百龄眉寿&#39;, &#39;娱心&#39;, &#39;如意&#39;,...],
           &#39;怒&#39;: [&#39;饮恨吞声&#39;, &#39;扬眉瞬目&#39;,...],   
           &#39;恶&#39;: [&#39;出逃&#39;, &#39;鱼肉百姓&#39;, &#39;移天易日&#39;,...]},

 &#39;Desc&#39;: &#39;大连理工大学情感本体库，细粒度情感词典。含七大类情绪，依次是哀, 好, 惊, 惧, 乐, 怒, 恶&#39;,

 &#39;Referer&#39;: &#39;徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.&#39;}
</code></pre></div><p>七大类情绪有:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    dict_keys([&#39;哀&#39;, &#39;好&#39;, &#39;惊&#39;, &#39;惧&#39;, &#39;乐&#39;, &#39;怒&#39;, &#39;恶&#39;])
</code></pre></div><p>下面是Bug!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
    <span class="k">if</span> <span class="s1">&#39;开心&#39;</span> <span class="ow">in</span> <span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">][</span><span class="n">key</span><span class="p">]:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;「开心」出现在情绪【</span><span class="si">{}</span><span class="s1">】词表中&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    「开心」出现在情绪【乐】词表中
    「开心」出现在情绪【恶】词表中
</code></pre></div><p>词语「开心」同时出现在情绪【乐】和【恶】</p>
<br>
<h2 id="dutir词典">DUTIR词典</h2>
<p>在网上找到大连理工大学情感本体文献、词典xlsx文件。</p>
<p><img loading="lazy" src="img/dutir%e8%b5%84%e6%96%99.png" alt=""  />
</p>
<p>制作方法，把 21 种小情绪汇总到喜怒哀乐等七大类情绪中。词典被污染，很可能是我汇总过程中出的问题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;大连理工大学中文情感词汇本体.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>词语</th>
      <th>词性种类</th>
      <th>词义数</th>
      <th>词义序号</th>
      <th>情感分类</th>
      <th>强度</th>
      <th>极性</th>
      <th>辅助情感分类</th>
      <th>强度.1</th>
      <th>极性.1</th>
      <th>Unnamed: 10</th>
      <th>Unnamed: 11</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>脏乱</td>
      <td>adj</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NN</td>
      <td>7</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>糟报</td>
      <td>adj</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NN</td>
      <td>5</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>早衰</td>
      <td>adj</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NE</td>
      <td>5</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>责备</td>
      <td>verb</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NN</td>
      <td>5</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>贼眼</td>
      <td>noun</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NN</td>
      <td>5</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h2 id="汇总七类情绪">汇总七类情绪</h2>
<p><img loading="lazy" src="img/dutir%e4%b8%83%e5%a4%a7%e7%b1%bb.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#乐</span>
<span class="n">le_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PA&#39;</span><span class="p">,</span> <span class="s1">&#39;PE&#39;</span><span class="p">]</span>
<span class="c1">#好</span>
<span class="n">hao_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PD&#39;</span><span class="p">,</span> <span class="s1">&#39;PH&#39;</span><span class="p">,</span> <span class="s1">&#39;PG&#39;</span><span class="p">,</span> <span class="s1">&#39;PB&#39;</span><span class="p">,</span> <span class="s1">&#39;PK&#39;</span><span class="p">]</span>
<span class="c1"># 怒</span>
<span class="n">nu_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">]</span>
<span class="c1">#哀</span>
<span class="n">ai_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NB&#39;</span><span class="p">,</span> <span class="s1">&#39;NJ&#39;</span><span class="p">,</span> <span class="s1">&#39;NH&#39;</span><span class="p">,</span> <span class="s1">&#39;PF&#39;</span><span class="p">]</span>
<span class="c1"># 惧</span>
<span class="n">ju_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NI&#39;</span><span class="p">,</span> <span class="s1">&#39;NC&#39;</span><span class="p">,</span> <span class="s1">&#39;NG&#39;</span><span class="p">]</span>
<span class="c1"># 恶</span>
<span class="n">wu_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NE&#39;</span><span class="p">,</span> <span class="s1">&#39;ND&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">,</span> <span class="s1">&#39;NK&#39;</span><span class="p">,</span> <span class="s1">&#39;NL&#39;</span><span class="p">]</span>
<span class="c1"># 惊</span>
<span class="n">jing_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PC&#39;</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">emotion</span><span class="p">(</span><span class="n">cates</span><span class="p">):</span>
    <span class="n">dfs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">cate</span> <span class="ow">in</span> <span class="n">cates</span><span class="p">:</span>
        <span class="n">sdf</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;情感分类&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">cate</span><span class="p">]</span>
        <span class="n">dfs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sdf</span><span class="p">)</span>
    <span class="n">res_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">dfs</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;词语&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>

<span class="c1"># 情绪【乐】的词语有：</span>
<span class="n">le_words</span> <span class="o">=</span> <span class="n">emotion</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">le_cates</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">le_words</span><span class="p">[:</span><span class="mi">10</span><span class="p">])</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [&#39;瑞雪&#39;, &#39;神采&#39;, &#39;喜人&#39;, &#39;怡悦&#39;, &#39;进益&#39;, &#39;奏凯&#39;, &#39;鸾凤和鸣&#39;, &#39;特等&#39;, &#39;欢快&#39;, &#39;如意&#39;]
</code></pre></div><br>
<h2 id="制作dutirpkl">制作DUTIR.pkl</h2>
<p>将DUTIR介绍、文献出处、对应的词典汇总到字典，并制作生成DUTIR.pkl文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dutir</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>

<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;乐&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">ju_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;好&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">hao_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;怒&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">nu_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;哀&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">ai_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;惧&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">ju_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;恶&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">e_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;惊&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">jing_cates</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">:</span> <span class="n">dutir</span><span class="p">,</span>
        <span class="s1">&#39;Desc&#39;</span><span class="p">:</span> <span class="s1">&#39;大连理工大学情感本体库，细粒度情感词典。含七大类情绪，依次是哀, 好, 惊, 惧, 乐, 怒, 恶&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.&#39;</span><span class="p">}</span>


<span class="kn">import</span> <span class="nn">pickle</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="更新cntext">更新cntext</h2>
<p>解决DUTIR词典问题， 需更新至1.7.9版本。</p>
<p><strong>pip3 install cntext==1.7.9</strong></p>
<p>现在我们检查下刚刚的问题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>

<span class="n">dutir</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
    <span class="k">if</span> <span class="s1">&#39;开心&#39;</span> <span class="ow">in</span> <span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">][</span><span class="n">key</span><span class="p">]:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;「开心」只出现在情绪【</span><span class="si">{}</span><span class="s1">】词表中&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    1.7.9
    「开心」只出现在情绪【恶】词表中
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>sklearnex库 | 让你的scikit-learn代码加速百倍</title>
      <link>https://textdata.cn/blog/speed_up_sklearn_code_with_sklearnex/</link>
      <pubDate>Sat, 18 Jun 2022 16:40:10 +0600</pubDate>
      
      <guid>/blog/speed_up_sklearn_code_with_sklearnex/</guid>
      <description>「scikit-learn」作为经典的机器学习框架，其运算速度一直广受用户的诟病。今天分享一个新包 「sklearnex」，可以在不改变原有代码的基础上，获得数十倍甚至上千倍的效率提升。</description>
      <content:encoded><![CDATA[<p>「scikit-learn」作为经典的机器学习框架，其运算速度一直广受用户的诟病。今天分享一个新包 「sklearnex」，可以在不改变原有代码的基础上，获得数十倍甚至上千倍的效率提升。</p>
<br>
<h2 id="sklearnex简介">sklearnex简介</h2>
<p>借助英特尔® Extension for Scikit-learn，您可以加速您的 Scikit-learn 应用程序，并且不需修改 Scikit-Learn原有代码结构。 英特尔® Extension for Scikit-learn是一款免费软件 AI 加速器，可带来超过 10-100 倍的加速。</p>
<br>
<h2 id="安装sklearnex">安装sklearnex</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install notebook scikit-learn-intelex
</code></pre></div><p><br><br></p>
<h2 id="快速上手">快速上手</h2>
<h3 id="scikit-learn原代码">scikit-learn原代码</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>

<span class="n">kmeans</span> <span class="o">=</span> <span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;kmeans.labels_ = </span><span class="si">{</span><span class="n">kmeans</span><span class="o">.</span><span class="n">labels_</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">kmeans.labels_ = [1 1 1 0 0 0]
</code></pre></div><br>
<h3 id="加速代码">加速代码</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">sklearnex</span> <span class="kn">import</span> <span class="n">patch_sklearn</span>
<span class="n">patch_sklearn</span><span class="p">()</span> <span class="c1">#启动加速补丁</span>

<span class="c1"># 加速补丁放置于sklearn之前</span>
<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>
<span class="n">kmeans</span> <span class="o">=</span> <span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;kmeans.labels_ = </span><span class="si">{</span><span class="n">kmeans</span><span class="o">.</span><span class="n">labels_</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">kmeans.labels_ = [1 1 1 0 0 0]
</code></pre></div><br>
<h3 id="去掉加速">去掉加速</h3>
<p>一般使用sklearn的环境是jupyter内，如果使用了sklearnex的加速功能，那么整个jupyter文件都是加速环境。如果想回到常规速度，可以在机器学习算法之前使用unpatch_sklearn()回到sklearn正常速度</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearnex</span> <span class="kn">import</span> <span class="n">unpatch_sklearn</span>

<span class="n">unpatch_sklearn</span><span class="p">()</span>

<span class="c1"># Re-import scikit-learn algorithms after the unpatch:</span>
<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>
</code></pre></div><p><br><br></p>
<h2 id="效率对比">效率对比</h2>
<p>按照官方说法，越强劲的CPU可以获得的性能提升比例也会更高，下图是官方在<code>Intel Xeon Platinum 8275CL</code>处理器下测试了一系列算法后得出的性能提升结果，不仅可以提升训练速度，还可以提升模型推理预测速度，在某些场景下甚至达到数千倍的性能提升。</p>
<p><img loading="lazy" src="scikit-learn-acceleration-compare.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在jupyter内运行R代码</title>
      <link>https://textdata.cn/blog/run_r_in_jupyter/</link>
      <pubDate>Sun, 29 May 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/run_r_in_jupyter/</guid>
      <description>在Jupyter中，通常是默认支持Python的，如何配置才能让R也能运行呢？</description>
      <content:encoded><![CDATA[<p>R和Python都是数据分析利器，最好能一起使用，发挥各自的优势。</p>
<p>在Jupyter中，通常是默认支持Python的，如何配置才能让R也能运行呢？</p>
<br>
<h2 id="配置步骤">配置步骤</h2>
<h3 id="step-1">step 1</h3>
<p>安装好R软件，打开命令行，输入R回车，调出R环境</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">R
</code></pre></div><p>在R环境中运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s">&#39;repr&#39;</span><span class="p">,</span> <span class="s">&#39;IRdisplay&#39;</span><span class="p">,</span> <span class="s">&#39;evaluate&#39;</span><span class="p">,</span> <span class="s">&#39;crayon&#39;</span><span class="p">,</span> <span class="s">&#39;pbdZMQ&#39;</span><span class="p">,</span> <span class="s">&#39;devtools&#39;</span><span class="p">,</span> <span class="s">&#39;uuid&#39;</span><span class="p">,</span> <span class="s">&#39;digest&#39;</span><span class="p">))</span>
</code></pre></div><br>
<h3 id="step-2">step 2</h3>
<p>继续在在R环境中运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="n">devtools</span><span class="o">::</span><span class="nf">install_github</span><span class="p">(</span><span class="s">&#39;IRkernel/IRkernel&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h3 id="step-3">step 3</h3>
<p>继续在R环境中运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="n">IRkernel</span><span class="o">::</span><span class="nf">installspec</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span>
</code></pre></div><br>
<br>
<h2 id="调用jupyter">调用Jupyter</h2>
<p>重新打开命令行，执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">jupyter notebook
</code></pre></div><p>弹出的界面中拥有了R的kernel</p>
<p><img loading="lazy" src="r_kernel.png" alt=""  />
</p>
<br>
<p>新建一个R的jupyter文件，运行下方代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">library</span><span class="p">(</span><span class="s">&#34;ggsci&#34;</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="s">&#34;ggplot2&#34;</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="s">&#34;gridExtra&#34;</span><span class="p">)</span>

<span class="nf">data</span><span class="p">(</span><span class="s">&#34;diamonds&#34;</span><span class="p">)</span>

<span class="n">p1</span> <span class="o">&lt;-</span> <span class="nf">ggplot</span><span class="p">(</span>
  <span class="nf">subset</span><span class="p">(</span><span class="n">diamonds</span><span class="p">,</span> <span class="n">carat</span> <span class="o">&gt;=</span> <span class="m">2.2</span><span class="p">),</span>
  <span class="nf">aes</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">table</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">price</span><span class="p">,</span> <span class="n">colour</span> <span class="o">=</span> <span class="n">cut</span><span class="p">)</span>
<span class="p">)</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">(</span><span class="n">alpha</span> <span class="o">=</span> <span class="m">0.7</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">geom_smooth</span><span class="p">(</span><span class="n">method</span> <span class="o">=</span> <span class="s">&#34;loess&#34;</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="m">0.05</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">span</span> <span class="o">=</span> <span class="m">1</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">theme_bw</span><span class="p">()</span>

<span class="n">p2</span> <span class="o">&lt;-</span> <span class="nf">ggplot</span><span class="p">(</span>
  <span class="nf">subset</span><span class="p">(</span><span class="n">diamonds</span><span class="p">,</span> <span class="n">carat</span> <span class="o">&gt;</span> <span class="m">2.2</span> <span class="o">&amp;</span> <span class="n">depth</span> <span class="o">&gt;</span> <span class="m">55</span> <span class="o">&amp;</span> <span class="n">depth</span> <span class="o">&lt;</span> <span class="m">70</span><span class="p">),</span>
  <span class="nf">aes</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">depth</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="n">cut</span><span class="p">)</span>
<span class="p">)</span> <span class="o">+</span>
  <span class="nf">geom_histogram</span><span class="p">(</span><span class="n">colour</span> <span class="o">=</span> <span class="s">&#34;black&#34;</span><span class="p">,</span> <span class="n">binwidth</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">position</span> <span class="o">=</span> <span class="s">&#34;dodge&#34;</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">theme_bw</span><span class="p">()</span>


<span class="n">p1_npg</span> <span class="o">&lt;-</span> <span class="n">p1</span> <span class="o">+</span> <span class="nf">scale_color_npg</span><span class="p">()</span>
<span class="n">p2_npg</span> <span class="o">&lt;-</span> <span class="n">p2</span> <span class="o">+</span> <span class="nf">scale_fill_npg</span><span class="p">()</span>
<span class="nf">grid.arrange</span><span class="p">(</span><span class="n">p1_npg</span><span class="p">,</span> <span class="n">p2_npg</span><span class="p">,</span> <span class="n">ncol</span> <span class="o">=</span> <span class="m">2</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="ggsci_plot.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>NLP资源 | 汽车、金融等9大领域预训练词向量模型下载资源</title>
      <link>https://textdata.cn/blog/pretained_nlp_models/</link>
      <pubDate>Wed, 25 May 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/pretained_nlp_models/</guid>
      <description>本文主要开放汽车、房产、教育、社会、娱乐、体育、金融、科技、游戏等9大领域预训练词向量，以及字符、依存、拼音与词性4类预训练向量地址，供大家一起使用</description>
      <content:encoded><![CDATA[<p>在前面的文章中，我们介绍了关于词向量的一些基础理论和训练方法，<strong>本文主要开放汽车、房产、教育、社会、娱乐、体育、金融、科技、游戏等9大领域预训练词向量，以及字符、依存、拼音与词性4类预训练向量地址，供大家一起使用</strong>。</p>
<h2 id="一汽车房产等9大领域预训练词向量">一、汽车、房产等9大领域预训练词向量</h2>
<p>通过收集多文本分类语料库，对汽车、房产、教育、社会、娱乐、体育、金融、科技、游戏等多个领域文本进行词向量训练，得到了如下预训练词向量的结果：</p>
<table>
<thead>
<tr>
<th>领域类型</th>
<th>模型类型</th>
<th>关键词集合</th>
<th>维度数</th>
</tr>
</thead>
<tbody>
<tr>
<td>汽车</td>
<td>word_vector_auto.model.bin</td>
<td>117,510</td>
<td>200</td>
</tr>
<tr>
<td>房产</td>
<td>word_vector_house.model.bin</td>
<td>145,287</td>
<td>200</td>
</tr>
<tr>
<td>教育</td>
<td>word_vector_edu.model.bin</td>
<td>242,874</td>
<td>200</td>
</tr>
<tr>
<td>社会</td>
<td>word_vector_society.model.bin</td>
<td>221,395</td>
<td>200</td>
</tr>
<tr>
<td>娱乐</td>
<td>word_vector_ent.model.bin</td>
<td>230,665</td>
<td>200</td>
</tr>
<tr>
<td>体育</td>
<td>word_vector_sports.model.bin</td>
<td>95724</td>
<td>200</td>
</tr>
<tr>
<td>金融</td>
<td>word_vector_finance.model.bin</td>
<td>284035</td>
<td>200</td>
</tr>
<tr>
<td>科技</td>
<td>word_vector_tech.model.bin</td>
<td>108188</td>
<td>200</td>
</tr>
<tr>
<td>游戏</td>
<td>word_vector_games.model.bin</td>
<td>100821</td>
<td>200</td>
</tr>
</tbody>
</table>
<p><strong>开放地址：</strong></p>
<p><a href="https://pan.baidu.com/s/1jEHFoAmVXlB67Q28-CeTvw">https://pan.baidu.com/s/1jEHFoAmVXlB67Q28-CeTvw</a> 密码: 1pa6</p>
<h2 id="二预训练字符依存拼音与词性向量">二、预训练字符、依存、拼音与词性向量</h2>
<p>通过对字符、依存、拼音与词性进行切分，使用同样的方式，可以得到相应的预训练词向量。</p>
<table>
<thead>
<tr>
<th>向量名称</th>
<th style="text-align:center">向量含义</th>
<th style="text-align:center">词数</th>
<th style="text-align:center">维度</th>
<th style="text-align:center">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>de_vec_10</td>
<td style="text-align:center">依存关系向量</td>
<td style="text-align:center">13</td>
<td style="text-align:center">10</td>
<td style="text-align:center">SBV, ATT</td>
</tr>
<tr>
<td>pinyin_vec_300</td>
<td style="text-align:center">汉语拼音向量</td>
<td style="text-align:center">146242</td>
<td style="text-align:center">300</td>
<td style="text-align:center">ni, hao</td>
</tr>
<tr>
<td>postag_vec_30</td>
<td style="text-align:center">汉语词性向量</td>
<td style="text-align:center">59</td>
<td style="text-align:center">300</td>
<td style="text-align:center">n,v,a,d</td>
</tr>
<tr>
<td>token_vec_300</td>
<td style="text-align:center">汉语字向量</td>
<td style="text-align:center">20029</td>
<td style="text-align:center">300</td>
<td style="text-align:center">刘,焕,勇</td>
</tr>
<tr>
<td>word_vec_300</td>
<td style="text-align:center">汉语词向量</td>
<td style="text-align:center">673266</td>
<td style="text-align:center">300</td>
<td style="text-align:center">刘焕勇</td>
</tr>
</tbody>
</table>
<p><strong>开放地址：</strong></p>
<p><a href="https://github.com/liuhuanyong/ChineseEmbedding">https://github.com/liuhuanyong/ChineseEmbedding</a></p>
<p><strong>向量效果：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"> 
 ***********************字符向量************************
    token:刘
    (&#39;李&#39;, 0.7306396961212158),(&#39;陈&#39;, 0.7201231122016907)
    (&#39;赵&#39;, 0.6974461674690247),(&#39;杨&#39;, 0.6972213983535767)
    (&#39;吴&#39;, 0.6851627230644226),(&#39;徐&#39;, 0.6516467332839966)
    (&#39;郭&#39;, 0.6499480605125427),(&#39;蔡&#39;, 0.6175302267074585)
    (&#39;郑&#39;, 0.6092196106910706),(&#39;孙&#39;, 0.5950524210929871)
    token:丑
    (&#39;卯&#39;, 0.6074919700622559),(&#39;酉&#39;, 0.5910211801528931)
    (&#39;巳&#39;, 0.5581363439559937),(&#39;戌&#39;, 0.43932047486305237)
    (&#39;戊&#39;, 0.41449615359306335),(&#39;壬&#39;, 0.40456631779670715)
    (&#39;謤&#39;, 0.367109090089798),(&#39;绯&#39;, 0.3643313944339752),
    (&#39;寅&#39;, 0.36351141333580017),(&#39;旽&#39;, 0.3549465537071228)


***********************依存向量************************
    dependency rel:ATT
    (&#39;COO&#39;, 0.14239487051963806),(&#39;ADV&#39;, -0.16987691819667816)
    (&#39;RAD&#39;, -0.2357601821422577),(&#39;HED&#39;, -0.2401314228773117)
    (&#39;SBV&#39;, -0.25625932216644287),(&#39;WP&#39;, -0.27165737748146057)
    (&#39;LAD&#39;, -0.2902592420578003),(&#39;POB&#39;, -0.2990782558917999)
    (&#39;VOB&#39;, -0.37553706765174866),(&#39;IOB&#39;, -0.6669262647628784)
    dependency rel:POB
    (&#39;IOB&#39;, 0.16698899865150452),(&#39;DBL&#39;, 0.16678886115550995)
    (&#39;FOB&#39;, 0.1657436639070511),(&#39;CMP&#39;, 0.14784857630729675)
    (&#39;VOB&#39;, 0.1461176574230194),(&#39;SBV&#39;, 0.08011472970247269)
    (&#39;LAD&#39;, -0.022307466715574265),(&#39;WP&#39;, -0.022942926734685898)
    (&#39;HED&#39;, -0.037264980375766754),(&#39;RAD&#39;, -0.042251598089933395)

  
  ***********************拼音向量************************
    pinyin:wo
    (&#39;shei&#39;, 0.6129732131958008)(&#39;ta&#39;, 0.6081706285476685)
    (&#39;nin&#39;, 0.5819231867790222),(&#39;！&#39;, 0.5435523986816406)
    (&#39;……&#39;, 0.48428624868392944),(&#39;ai&#39;, 0.47832390666007996)
    (&#39;o&#39;, 0.4761071801185608),(&#39;。』&#39;, 0.4598163366317749)
    (&#39;...&#39;, 0.45207729935646057),(&#39;ni&#39;, 0.44975683093070984)
    pinyin:guo
    (&#39;dang&#39;, 0.3908974528312683),(&#39;yuan&#39;, 0.378823846578598)
    (&#39;zu&#39;, 0.35387369990348816),(&#39;hua&#39;, 0.3405681848526001)
    (&#39;zheng&#39;, 0.3355437219142914),(&#39;yi&#39;, 0.3333034813404083)
    (&#39;ren&#39;, 0.3194104731082916),(&#39;jun&#39;, 0.3187354505062103)
    (&#39;hui&#39;, 0.31342023611068726),(&#39;xin&#39;, 0.3096797466278076)

   
   ***********************词性向量************************
    word postag:a
    (&#39;d&#39;, 0.7203904986381531),(&#39;c&#39;, 0.6124969720840454)
    (&#39;v&#39;, 0.4963228106498718),(&#39;an&#39;, 0.4531499147415161)
    (&#39;uz&#39;, 0.4459834396839142),(&#39;ud&#39;, 0.42059916257858276)
    (&#39;r&#39;, 0.4090540111064911),(&#39;uj&#39;, 0.4061364233493805)
    (&#39;i&#39;, 0.38707998394966125),(&#39;l&#39;, 0.3551557660102844)
    word postag:n
    (&#39;b&#39;, 0.7030695676803589),(&#39;vn&#39;, 0.490166038274765)
    (&#39;p&#39;, 0.4858315885066986),(&#39;v&#39;, 0.4499088227748871)
    (&#39;nt&#39;, 0.44155171513557434),(&#39;f&#39;, 0.26609259843826294)
    (&#39;s&#39;, 0.2639649212360382),(&#39;l&#39;, 0.24365971982479095)
    (&#39;ns&#39;, 0.2278469204902649),(&#39;m&#39;, 0.202927365899086)
    
    ***********************词向量************************
    word:爱情
    (&#39;爱恋&#39;, 0.6931096315383911),(&#39;真爱&#39;, 0.6897798776626587)
    (&#39;婚姻&#39;, 0.6540514826774597),(&#39;浪漫爱情&#39;, 0.6535360813140869)
    (&#39;情感&#39;, 0.6501022577285767),(&#39;感情&#39;, 0.6403399705886841)
    (&#39;纯爱&#39;, 0.6394841074943542),(&#39;爱情故事&#39;, 0.6282097101211548)
    (&#39;校园爱情&#39;, 0.6078493595123291),(&#39;情爱&#39;, 0.5976818799972534)
    word:创新
    (&#39;技术创新&#39;, 0.7648976445198059),(&#39;不断创新&#39;, 0.7172579765319824)
    (&#39;创新型&#39;, 0.6573833227157593),(&#39;创新能力&#39;, 0.6533682942390442)
    (&#39;创新性&#39;, 0.6160774827003479),(&#39;革新&#39;, 0.6159394383430481)
    (&#39;人才培养&#39;, 0.6093565821647644),(&#39;开拓创新&#39;, 0.6015594601631165)
    (&#39;探索&#39;, 0.5987343788146973),(&#39;技术革新&#39;, 0.5949685573577881)
</code></pre></div><h2 id="关于作者">关于作者</h2>
<p>老刘，刘焕勇，NLP开源爱好者与践行者，主页：https://liuhuanyong.github.io。</p>
<p>就职于360人工智能研究院、曾就职于中国科学院软件研究所。</p>
<p><strong>老刘说NLP</strong>，将定期发布语言资源、工程实践、技术总结等内容，欢迎关注。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Wordify | 发现和区分消费者词汇的工具</title>
      <link>https://textdata.cn/blog/jcr_wordify/</link>
      <pubDate>Sun, 15 May 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/jcr_wordify/</guid>
      <description>工具介绍； 在不同上下文中，消费者的单词使用如何变化</description>
      <content:encoded><![CDATA[<p>JCR2021一篇软件介绍，支持中英文在内的多种语言。</p>
<blockquote>
<p>Hovy, D., Melumad, S. and Inman, J.J., 2021. Wordify: a tool for discovering and differentiating consumer vocabularies. <em>Journal of Consumer Research</em>, <em>48</em>(3), pp.394-414.</p>
</blockquote>
<br>
<h2 id="摘要">摘要:</h2>
<p>这项工作介绍了一个免费易用的在线文本分析工具<strong>Wordify</strong>，用于了解 <strong>“在不同上下文中，消费者的单词使用如何变化”</strong>。Wordify 使用  <strong>随机逻辑回归</strong>  (RLR) 来识别最能区分来自不同预分类文本的用词差异，例如男性与女性撰写的帖子用词差异，或好评与差评的用词差异。我们提供了说明性示例，以展示该工具如何用于多种用途，例如 (1) 揭示消费者在智能手机和 PC 上撰写评论时使用的独特词汇，(2) 发现推文中使用的词语在假定的支持者和反对有争议的广告，以及 (3) 扩展基于字典的情绪测量工具的字典。我们凭经验表明，Wordify 的 RLR 算法在区分词汇方面比支持向量机和卡方选择器表现更好，同时在计算时间上具有显着优势。还讨论了 Wordify 与其他文本分析工具的结合使用，例如概率主题建模和情感分析，以更深入地了解语言在消费者行为中的作用。</p>
<p><strong>关键词</strong>：文本分析，自然语言处理，语言，情感分析</p>
<br>
<h2 id="本地wordify配置">本地wordify配置</h2>
<p>作者在github公开了wordify的代码，仓库地址 <a href="https://github.com/MilaNLProc/wordify-webapp-streamlit">https://github.com/MilaNLProc/wordify-webapp-streamlit</a></p>
<p>大致的使用步骤</p>
<ol>
<li>wordify要配置spacy语言模型，配置方法参照以前分享的<a href="https://textdata.cn/blog/spacy_industry_application/">spacy产业级自然语言处理包</a></li>
<li>到github仓库下载代码，解压至桌面</li>
<li>打开命令行, 执行命令<code>cd desktop/wordify-webapp-streamlit-main</code></li>
<li>命令行执行<code>pip3 install -r requirements.txt</code></li>
<li>命令行执行<code>streamlit run app.py</code>， 此时命令行中出现本地服务地址(类似于网站)，浏览器打开这个地址即可</li>
</ol>
<p><strong>本地配置比较有难度，建议使用在线版https://wordify.unibocconi.it/</strong></p>
<br>
<h2 id="在线展示网站">在线展示网站</h2>
<h3 id="网址">网址</h3>
<p><a href="https://wordify.unibocconi.it/">https://wordify.unibocconi.it/</a></p>
<p><img loading="lazy" src="img/wordify_streamilit_website.png" alt=""  />
</p>
<h3 id="使用方法">使用方法</h3>
<ul>
<li>
<p>表格文件需含两个字段名，分别为<strong>text</strong>和<strong>label</strong>, 中文数据需要先为用空格间隔词语的文本样式。<a href="test_chinese.xlsx">中文样例文件</a></p>
</li>
<li>
<p>表格文件支持csv、xlsx、tsv、parquet，10M以内。数据上传成功后，页面会发生变化</p>
</li>
<li>
<p>在线页面在运行时一定不要刷新，这样会中断数据分析的过程</p>
</li>
<li>
<p>Wordify 的性能取决于文件中各个文本的长度。</p>
</li>
</ul>
<p><img loading="lazy" src="img/wordify_chinese_process.png" alt=""  />
</p>
<br>
<h2 id="点评">点评</h2>
<p>以往的文本分析思路，大多无视<strong>混杂效应Confound</strong>，主要从文本中抽取一些变量，如情感值，用于后期计量建模，试图挖掘<strong>文本指标(如情感值)<strong>与</strong>Outcome</strong>之间的因果关系。</p>
<blockquote>
<p>混杂效应，例如研究推文正负面情感对网友点击行为的影响。</p>
<p>研究的机制可以简化为<strong>不同的文本情感&ndash;&gt;产生不同的网友点击</strong></p>
<p>但是有可能不全是情感影响了网友的点击，作者存在性别差异，女性比男性更容易表达积极文本信息，而且在互联网世界女性比男性可能更有吸引力。</p>
</blockquote>
<p>论文中没提及Confound效应，但粗略浏览下，wordify创新地考虑了confound场景，通过文本分析，看看不同群体用词的差异。</p>
<p>wordify的缺点本地版配置太难，网页版运行太慢。0.6M的中文数据，我等了20min，还是没有跑出结果，果断关闭在线网页。总之感觉没有文中说的那么易用，门槛还是太高了。有耐心的朋友，如果感兴趣，可以去试试。</p>
<p>如果研究考虑文本的confound效应，可以参考<strong>causalnlp包</strong>，虽然配置难，但是运行速度还是有保证。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>karateclub库 | 计算社交网络中节点的向量</title>
      <link>https://textdata.cn/blog/karateclub_tutorial/</link>
      <pubDate>Tue, 10 May 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/karateclub_tutorial/</guid>
      <description>使用karateclub计算社交网络中节点的向量，有了节点的向量，就可以基于向量思维比较节点异同</description>
      <content:encoded><![CDATA[<p><a href="https://karateclub.readthedocs.io/en/latest">karateclub</a>是小规模图挖掘研究的一把瑞士军刀， 可以对图形结构化数据进行无监督学习。</p>
<ul>
<li>首先，可以计算出节点、图的特征向量</li>
<li>其次，它包括多种重叠和非重叠的社区发现方法。</li>
</ul>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="karateclub_example_code.zip">click to download</a></p>
<br>
<h2 id="数据格式">数据格式</h2>
<p>karateclub假设用户提供的用于<strong>节点嵌入</strong>和<strong>社区检测</strong>的 NetworkX 图具有以下重要属性：</p>
<ul>
<li>节点用整数索引</li>
<li>节点索引从零开始，索引是连续的</li>
</ul>
<p><strong>节点的属性矩阵</strong>可以提供为 scipy sparse 和 numpy 数组。返回的社区成员字典和嵌入矩阵使用相同的数字连续索引。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">karateclub</span>
</code></pre></div><br>
<h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;karate_club_graph.csv&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>

<span class="nb">print</span><span class="p">()</span>

<span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span><span class="o">.</span><span class="n">to_markdown</span><span class="p">())</span>

<span class="nb">print</span><span class="p">()</span>

<span class="n">edges</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">],</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;tgt&#39;</span><span class="p">]))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">edges</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<pre><code>Index(['src', 'tgt'], dtype='object')

|    |   src |   tgt |
|---:|------:|------:|
|  0 |     0 |     1 |
|  1 |     0 |     2 |
|  2 |     0 |     3 |
|  3 |     0 |     4 |
|  4 |     0 |     5 |

[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="nn">nx</span>

<span class="n">graph</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">Graph</span><span class="p">()</span>
<span class="n">graph</span><span class="o">.</span><span class="n">add_edges_from</span><span class="p">(</span><span class="n">edges</span><span class="p">)</span>
<span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p>​ <br>
<img loading="lazy" src="output_4_0.png" alt="png"  />

​</p>
<br>
<h2 id="社区发现">社区发现</h2>
<p>现在让我们使用LabelPropagation算法来发现网络中的社区结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">karateclub</span> <span class="kn">import</span> <span class="n">LabelPropagation</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">LabelPropagation</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
<span class="n">cluster_membership</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">get_memberships</span><span class="p">()</span>
<span class="n">cluster_membership</span>
</code></pre></div><p>Run</p>
<pre><code>{23: 8,
 33: 8,
 5: 10,
 7: 1,
 28: 31,
 4: 10,
 3: 1,
 31: 31,
 20: 8,
 19: 1,
 6: 10,
 32: 8,
 29: 8,
 9: 1,
 14: 8,
 2: 1,
 0: 1,
 17: 1,
 25: 31,
 22: 8,
 11: 1,
 13: 1,
 1: 1,
 24: 31,
 15: 8,
 18: 8,
 26: 8,
 27: 8,
 16: 10,
 12: 1,
 30: 8,
 21: 1,
 8: 8,
 10: 10}
</code></pre>
<p>在有34个节点的图中，发现了4个社区，分别是1、8、10、31。</p>
<br>
<h2 id="node-embeddings">Node embeddings</h2>
<p>计算节点的向量。​使用 Diff2vec 拟合数据的节点嵌入(向量)，具有少量维度、每个源节点的扩散和短欧拉游走。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">karateclub</span> <span class="kn">import</span> <span class="n">Diff2Vec</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">Diff2Vec</span><span class="p">(</span><span class="n">diffusion_number</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                 <span class="n">diffusion_cover</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> 
                 <span class="n">dimensions</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>

<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">get_embedding</span><span class="p">()</span>
<span class="n">X</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div><p>Run</p>
<pre><code>(34, 5)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">X</span>
</code></pre></div><p>Run</p>
<pre><code>array([[ 1.3687179 , -0.33502993, -0.3294797 ,  0.40154558,  1.0270709 ],
       [ 0.88167036, -0.3201618 , -0.34293872,  0.41519755,  0.71964073],
       [ 0.8756805 , -0.21934716, -0.33261183,  0.33785722,  0.51631075],
       [ 0.9768452 , -0.39260587, -0.39460638,  0.28851682,  0.8665034 ],
       [ 0.4809215 , -0.28729865, -0.19276802,  0.22588767,  0.07305563],
       [ 0.5580538 , -0.28137547, -0.1947159 ,  0.23712516,  0.49257705],
       [ 0.23477663,  0.04262228,  0.07154325,  0.02909669,  0.33999097],
       [ 1.1882199 , -0.21742308, -0.26985615,  0.44171503,  0.6679048 ],
       [ 1.0287609 , -0.27409104, -0.04119629,  0.30143994,  0.704676  ],
       [ 0.5700088 , -0.26341844,  0.01560158, -0.08039217,  0.41796318],
       [ 0.5753763 , -0.2242508 , -0.1795436 ,  0.0705331 ,  0.46571913],
       [ 0.46763912, -0.17108741, -0.22459361,  0.03058788,  0.05998428],
       [ 0.5500626 , -0.12745889, -0.28661036,  0.16889155,  0.48200938],
       [ 0.6217582 , -0.10251168, -0.0713837 ,  0.13550574,  0.60422456],
       [ 0.9797377 , -0.46282482, -0.09380057,  0.2749968 ,  0.7020155 ],
       [ 0.38830167, -0.30841848, -0.20950563, -0.02130592,  0.0836651 ],
       [ 0.57225037, -0.04150235, -0.1246101 ,  0.06918757,  0.23083903],
       [ 0.6431406 , -0.04898892, -0.05708801,  0.1311793 ,  0.46377632],
       [ 0.541667  , -0.16031542, -0.33119023,  0.10385639,  0.39525154],
       [ 0.65543544, -0.27534947, -0.28757   ,  0.2080029 ,  0.5288213 ],
       [ 0.46381798, -0.07729273, -0.09209982,  0.11292508,  0.36836028],
       [ 0.53826964, -0.09915172, -0.09243581,  0.15036733,  0.5449071 ],
       [ 0.31599265, -0.22078821, -0.02872767,  0.07436654,  0.28573534],
       [ 1.0706906 , -0.27783617, -0.16653039,  0.2631594 ,  0.6408689 ],
       [ 0.67875004, -0.34441757, -0.10262538,  0.2588695 ,  0.38405937],
       [ 0.41786563, -0.10344986, -0.19508548,  0.19657765,  0.22006002],
       [ 0.7855942 , -0.27200857,  0.02204541,  0.09168041,  0.42220354],
       [ 0.7773458 , -0.11727296, -0.24145149,  0.04537854,  0.5737133 ],
       [ 0.75732976, -0.314953  , -0.15383345,  0.02065313,  0.51843405],
       [ 0.7226543 , -0.31919608, -0.18878649,  0.15413427,  0.42012522],
       [ 0.43411565, -0.17342259, -0.28042233,  0.26853496,  0.49947587],
       [ 1.1565564 , -0.36802933, -0.12613232,  0.32381424,  0.75113887],
       [ 1.1192797 , -0.162529  , -0.17195942,  0.39265418,  0.83656436],
       [ 1.2231556 , -0.5336606 , -0.14015286,  0.14054438,  0.5695296 ]],
      dtype=float32)
</code></pre>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext库 |  Python文本分析包更新</title>
      <link>https://textdata.cn/blog/cntext_tutorial/</link>
      <pubDate>Mon, 09 May 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/cntext_tutorial/</guid>
      <description>扩展词典、情感分析、可阅读性，内置9种情感词典，涵盖中英文</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/hidadeng/cntext"><img loading="lazy" src="https://img.shields.io/badge/cntext-%e4%b8%ad%e6%96%87%e6%96%87%e6%9c%ac%e5%88%86%e6%9e%90%e5%ba%93-orange?style=for-the-badge&amp;logo=appveyor" alt=""  />
</a></p>
<p><a href="version1.2.md">旧版cntext入口</a></p>
<p>中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等</p>
<ul>
<li><a href="https://github.com/hidadeng/cntext">github地址</a> <code>https://github.com/hidadeng/cntext</code></li>
<li><a href="https://pypi.org/project/cntext/">pypi地址</a>  <code>https://pypi.org/project/cntext/</code></li>
<li><a href="https://ke.qq.com/course/482241?tuin=163164df">视频课-<strong>Python网络爬虫与文本数据分析</strong></a></li>
</ul>
<p>功能模块含</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>stats</strong>  文本统计指标
<ul>
<li><input checked="" disabled="" type="checkbox"> 词频统计</li>
<li><input checked="" disabled="" type="checkbox"> 可读性</li>
<li><input checked="" disabled="" type="checkbox"> 内置pkl词典</li>
<li><input checked="" disabled="" type="checkbox"> <strong>情感分析</strong></li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>dictionary</strong> 构建词表(典)
<ul>
<li><input checked="" disabled="" type="checkbox"> Sopmi 互信息扩充词典法</li>
<li><input checked="" disabled="" type="checkbox"> W2Vmodels 词向量扩充词典法</li>
<li><input checked="" disabled="" type="checkbox"> Glove Glove词嵌入模型</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>similarity</strong>   文本相似度
<ul>
<li><input checked="" disabled="" type="checkbox"> cos相似度</li>
<li><input checked="" disabled="" type="checkbox"> jaccard相似度</li>
<li><input checked="" disabled="" type="checkbox"> 编辑距离相似度</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>mind.py</strong> 计算文本中的认知方向（态度、偏见）</li>
</ul>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="cntext_examples.zip">click to download</a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install cntext
</code></pre></div><br>
<h2 id="quickstart">QuickStart</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">help</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">Help</span> <span class="nx">on</span> <span class="kn">package</span> <span class="nx">cntext</span><span class="p">:</span>

<span class="nx">NAME</span>
    <span class="nx">cntext</span>

<span class="nx">PACKAGE</span> <span class="nx">CONTENTS</span>
    <span class="nx">mind</span>
    <span class="nx">dictionary</span>
    <span class="nx">similarity</span>
    <span class="nx">stats</span>
</code></pre></div><br>
<h2 id="一stats">一、stats</h2>
<p>目前stats内置的函数有</p>
<ul>
<li><strong>readability</strong>  文本可读性</li>
<li><strong>term_freq</strong> 词频统计函数</li>
<li><strong>dict_pkl_list</strong>  获取cntext内置词典列表(pkl格式)</li>
<li><strong>load_pkl_dict</strong> 导入pkl词典文件</li>
<li><strong>sentiment</strong> 情感分析</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<h3 id="11--readability">1.1  readability</h3>
<p>文本可读性，指标越大，文章复杂度越高，可读性越差。</p>
<p>readability(text, lang=&lsquo;chinese&rsquo;)</p>
<ul>
<li>text: 文本字符串数据</li>
<li>lang: 语言类型，&ldquo;chinese&quot;或&quot;english&rdquo;，默认&quot;chinese&quot;</li>
</ul>
<p><strong>中文可读性</strong> 算法参考自</p>
<blockquote>
<p>徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.</p>
<ul>
<li>readability1 &mdash;每个分句中的平均字数</li>
<li>readability2  &mdash;每个句子中副词和连词所占的比例</li>
<li>readability3  &mdash;参考Fog Index， readability3=(readability1+readability2)×0.5</li>
</ul>
</blockquote>
<p>​</p>
<p>以上三个指标越大，都说明文本的复杂程度越高，可读性越差。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>


<span class="n">ct</span><span class="o">.</span><span class="n">readability</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 28.0,
 &#39;readability2&#39;: 0.15789473684210525,
 &#39;readability3&#39;: 14.078947368421053}
</code></pre></div><br>
<p>句子中的符号变更会影响结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>
<span class="n">ct</span><span class="o">.</span><span class="n">readability</span><span class="p">(</span><span class="n">text2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 27.0,
 &#39;readability2&#39;: 0.16666666666666666,
 &#39;readability3&#39;: 13.583333333333334}
</code></pre></div><p><br><br></p>
<h3 id="12--term_freq">1.2  term_freq</h3>
<p>词频统计函数，返回Counter类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span> 

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<h3 id="13-dict_pkl_list">1.3 dict_pkl_list</h3>
<p>获取cntext内置词典列表(pkl格式)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># 获取cntext内置词典列表(pkl格式)</span>
<span class="n">ct</span><span class="o">.</span><span class="n">dict_pkl_list</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;DUTIR.pkl&#39;,
 &#39;HOWNET.pkl&#39;,
 &#39;sentiws.pkl&#39;,
 &#39;ChineseFinancialFormalUnformalSentiment.pkl&#39;,
 &#39;ANEW.pkl&#39;,
 &#39;LSD2015.pkl&#39;,
 &#39;NRC.pkl&#39;,
 &#39;geninqposneg.pkl&#39;,
 &#39;HuLiu.pkl&#39;,
 &#39;AFINN.pkl&#39;,
 &#39;ADV_CONJ.pkl&#39;,
 &#39;LoughranMcDonald.pkl&#39;,
 &#39;STOPWORDS.pkl&#39;, 
 &#39;concreteness.pkl&#39;]
</code></pre></div><p>词典对应关系, 部分情感词典资料整理自 <a href="https://github.com/quanteda/quanteda.sentiment">quanteda.sentiment</a></p>
<table>
<thead>
<tr>
<th>pkl文件</th>
<th>词典</th>
<th>语言</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>DUTIR.pkl</td>
<td>大连理工大学情感本体库</td>
<td>中文</td>
<td>七大类情绪，<code>哀, 好, 惊, 惧, 乐, 怒, 恶</code></td>
</tr>
<tr>
<td>HOWNET.pkl</td>
<td>知网Hownet词典</td>
<td>中文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>sentiws.pkl</td>
<td>SentimentWortschatz (SentiWS)</td>
<td>英文</td>
<td>正面词、负面词；<br>效价</td>
</tr>
<tr>
<td>ChineseFinancialFormalUnformalSentiment.pkl</td>
<td>金融领域正式、非正式；积极消极</td>
<td>中文</td>
<td>formal-pos、<br>formal-neg；<br>unformal-pos、<br>unformal-neg</td>
</tr>
<tr>
<td>ANEW.pkl</td>
<td>英语单词的情感规范Affective Norms for English Words (ANEW)</td>
<td>英文</td>
<td>词语效价信息</td>
</tr>
<tr>
<td>LSD2015.pkl</td>
<td>Lexicoder Sentiment Dictionary (2015)</td>
<td>英文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>NRC.pkl</td>
<td>NRC Word-Emotion Association Lexicon</td>
<td>英文</td>
<td>细粒度情绪词；</td>
</tr>
<tr>
<td>geninqposneg.pkl</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>HuLiu.pkl</td>
<td>Hu&amp;Liu (2004)正、负情感词典</td>
<td>英文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>AFINN.pkl</td>
<td>尼尔森 (2011) 的“新 ANEW”效价词表</td>
<td>英文</td>
<td>情感效价信息valence</td>
</tr>
<tr>
<td>LoughranMcDonald.pkl</td>
<td>会计金融LM词典</td>
<td>英文</td>
<td>金融领域正、负面情感词</td>
</tr>
<tr>
<td>ADV_CONJ.pkl</td>
<td>副词连词</td>
<td>中文</td>
<td></td>
</tr>
<tr>
<td>STOPWORDS.pkl</td>
<td></td>
<td>中、英</td>
<td>停用词</td>
</tr>
<tr>
<td>concreteness.pkl</td>
<td>Brysbaert, M., Warriner, A. B., &amp; Kuperman, V. (2014). Concreteness ratings for 40 thousand generally known English word lemmas. Behavior Research Methods, 46, 904–911</td>
<td>English</td>
<td>word &amp; concreateness score</td>
</tr>
</tbody>
</table>
<h3 id="注意">注意:</h3>
<ul>
<li>
<p>如果用户情绪分析时使用DUTIR词典发表论文，请在论文中添加诸如“使用了大连理工大学信息检索研究室的情感词汇本体” 字样加以声明。参考文献中加入引文“徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.”</p>
</li>
<li>
<p>如果大家有制作的词典，可以上传至百度网盘，并在issue中留下词典的网盘链接。如词典需要使用声明，可连同文献出处一起issue</p>
</li>
</ul>
<br>
<h3 id="14-load_pkl_dict">1.4 load_pkl_dict</h3>
<p>导入pkl词典文件，返回字典样式数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># 导入pkl词典文件,</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;DUTIR&#39;: {&#39;哀&#39;: [&#39;怀想&#39;, &#39;治丝而棼&#39;, ...],
           &#39;好&#39;: [&#39;进贤黜奸&#39;, &#39;清醇&#39;, &#39;放达&#39;, ...], 
           &#39;惊&#39;: [&#39;惊奇不已&#39;, &#39;魂惊魄惕&#39;, &#39;海外奇谈&#39;,...],
           &#39;惧&#39;: [&#39;忸忸怩怩&#39;, &#39;谈虎色变&#39;, &#39;手忙脚乱&#39;, &#39;刿目怵心&#39;,...],
           &#39;乐&#39;: [&#39;百龄眉寿&#39;, &#39;娱心&#39;, &#39;如意&#39;, &#39;喜糖&#39;,...],
           &#39;怒&#39;: [&#39;饮恨吞声&#39;, &#39;扬眉瞬目&#39;,...],
           &#39;恶&#39;: [&#39;出逃&#39;, &#39;鱼肉百姓&#39;, &#39;移天易日&#39;,]
           }
</code></pre></div><br>
<h3 id="15-sentiment">1.5 sentiment</h3>
<p>sentiment(text, diction, lang=&lsquo;chinese&rsquo;)
使用diy词典进行情感分析，计算各个情绪词出现次数; 未考虑强度副词、否定词对情感的复杂影响，</p>
<ul>
<li>text:  待分析中文文本</li>
<li>diction:  情感词字典；</li>
<li>lang: 语言类型，&ldquo;chinese&quot;或&quot;english&rdquo;，默认&quot;chinese&quot;</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;我今天得奖了，很高兴，我要将快乐分享大家。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>
             <span class="n">diction</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">],</span>
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;哀_num&#39;: 0,
 &#39;好_num&#39;: 0,
 &#39;惊_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;乐_num&#39;: 2,
 &#39;怒_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;stopword_num&#39;: 8,
 &#39;word_num&#39;: 14,
 &#39;sentence_num&#39;: 1}
</code></pre></div><p>如果不适用pkl词典，可以自定义自己的词典，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">diction</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;高兴&#39;</span><span class="p">,</span> <span class="s1">&#39;快乐&#39;</span><span class="p">,</span> <span class="s1">&#39;分享&#39;</span><span class="p">],</span>
           <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;难过&#39;</span><span class="p">,</span> <span class="s1">&#39;悲伤&#39;</span><span class="p">],</span>
           <span class="s1">&#39;adv&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;很&#39;</span><span class="p">,</span> <span class="s1">&#39;特别&#39;</span><span class="p">]}</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;我今天得奖了，很高兴，我要将快乐分享大家。&#39;</span>
<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> 
             <span class="n">diction</span><span class="o">=</span><span class="n">diction</span><span class="p">,</span> 
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;pos_num&#39;: 3,
 &#39;neg_num&#39;: 0,
 &#39;adv_num&#39;: 1,
 &#39;stopword_num&#39;: 8,
 &#39;word_num&#39;: 14,
 &#39;sentence_num&#39;: 1}
</code></pre></div><br>
<h3 id="16-sentiment_by_valence">1.6 sentiment_by_valence</h3>
<p>sentiment函数默认所有情感词权重均为1，只需要统计文本中情感词的个数，即可得到文本情感得分。</p>
<p>sentiment_by_valence(text, diction, lang=&lsquo;english&rsquo;)函数考虑了词语的效价(valence)</p>
<ul>
<li>text 待输入文本</li>
<li>diction 带效价的词典，DataFrame格式。</li>
<li>lang 语言类型&rsquo;chinese' 或 &lsquo;english&rsquo;，默认&rsquo;english'</li>
</ul>
<p>这里我们以文本具体性度量为例， <strong>concreteness.pkl</strong> 整理自 Brysbaert2014的文章。</p>
<blockquote>
<p>Brysbaert, M., Warriner, A. B., &amp; Kuperman, V. (2014). Concreteness ratings for 40 thousand generally known English word lemmas. Behavior Research Methods, 46, 904–911</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># load the concreteness.pkl dictionary file</span>
<span class="n">concreteness_df</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;concreteness.pkl&#39;</span><span class="p">)</span>
<span class="n">concreteness_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">word</th>
<th style="text-align:right">valence</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">roadsweeper</td>
<td style="text-align:right">4.85</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">traindriver</td>
<td style="text-align:right">4.54</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">tush</td>
<td style="text-align:right">4.45</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">hairdress</td>
<td style="text-align:right">3.93</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">pharmaceutics</td>
<td style="text-align:right">3.77</td>
</tr>
</tbody>
</table>
<br>
<p>先看一条文本的具体性度量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">reply</span> <span class="o">=</span> <span class="s2">&#34;I&#39;ll go look for that&#34;</span>

<span class="n">score</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">reply</span><span class="p">,</span> 
                              <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> 
                              <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
<span class="n">score</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1.85
</code></pre></div><br>
<p>很多条文本的具体性度量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">employee_replys</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I&#39;ll go look for that&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that top&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that t-shirt&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go look for that t-shirt in grey&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that t-shirt in grey&#34;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">reply</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">employee_replys</span><span class="p">):</span>
    <span class="n">score</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">reply</span><span class="p">,</span> 
                                  <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> 
                                  <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
    
    <span class="n">template</span> <span class="o">=</span> <span class="s2">&#34;Concreteness Score: </span><span class="si">{score:.2f}</span><span class="s2"> | Example-</span><span class="si">{idx}</span><span class="s2">: </span><span class="si">{exmaple}</span><span class="s2">&#34;</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">template</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">score</span><span class="o">=</span><span class="n">score</span><span class="p">,</span> 
                          <span class="n">idx</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> 
                          <span class="n">exmaple</span><span class="o">=</span><span class="n">reply</span><span class="p">))</span>
    
<span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Concreteness Score: 1.55 | Example-0: I&#39;ll go look for that
Concreteness Score: 1.55 | Example-1: I&#39;ll go search for that
Concreteness Score: 1.89 | Example-2: I&#39;ll go search for that top
Concreteness Score: 2.04 | Example-3: I&#39;ll go search for that t-shirt
Concreteness Score: 2.37 | Example-4: I&#39;ll go look for that t-shirt in grey
Concreteness Score: 2.37 | Example-5: I&#39;ll go search for that t-shirt in grey
</code></pre></div><br>
<p><br><br></p>
<h2 id="二dictionary">二、dictionary</h2>
<p>本模块用于构建词表(典),含</p>
<ul>
<li>SoPmi 共现法扩充词表(典)</li>
<li>W2VModels 词向量word2vec扩充词表(典)</li>
</ul>
<h3 id="21-sopmi">2.1 SoPmi</h3>
<p>SoPmi 共现法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">sopmier</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">SoPmi</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span>
                   <span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_corpus.txt&#39;</span><span class="p">,</span>  <span class="c1">#原始数据，您的语料</span>
                   <span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_seed_words.txt&#39;</span><span class="p">,</span> <span class="c1">#人工标注的初始种子词</span>
                   <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span>
                   <span class="p">)</span>   

<span class="n">sopmier</span><span class="o">.</span><span class="n">sopmi</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...Preprocess   Corpus ...
Step 2/4:...Collect co-occurrency information ...
Step 3/4:...Calculate   mutual information ...
Step 4/4:...Save    candidate words ...
Finish! used 44.49 s
</code></pre></div><br>
<h3 id="22-w2vmodels">2.2 W2VModels</h3>
<p>W2VModels 词向量</p>
<p><strong>特别要注意代码需要设定lang语言参数</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#初始化模型,需要设置lang参数。</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> 
                     <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>  <span class="c1">#语料数据 w2v_corpus.txt</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_corpus.txt&#39;</span><span class="p">)</span>


<span class="c1">#根据种子词，筛选出没类词最相近的前100个词</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/integrity.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/innovation.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/quality.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/respect.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/teamwork.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...Preprocess   corpus ...
Step 2/4:...Train  word2vec model
            used   174 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s

</code></pre></div><br>
<h3 id="需要注意">需要注意</h3>
<p>训练出的w2v模型可以后续中使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">w2v</span><span class="o">.</span><span class="n">model路径</span><span class="p">)</span>
<span class="c1">#找出word的词向量</span>
<span class="c1">#w2v_model.get_vector(word)</span>
<span class="c1">#更多w2_model方法查看</span>
<span class="c1">#help(w2_model)</span>
</code></pre></div><p>例如本代码，运行生成的结果路径<code>output/w2v_candi_words/w2v.model</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;output/w2v_candi_words/w2v.model&#39;</span><span class="p">)</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="s1">&#39;innovation&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;technology&#39;, 0.689210832118988),
 (&#39;infrastructure&#39;, 0.669672966003418),
 (&#39;resources&#39;, 0.6695448160171509),
 (&#39;talent&#39;, 0.6627111434936523),
 (&#39;execution&#39;, 0.6549549102783203),
 (&#39;marketing&#39;, 0.6533523797988892),
 (&#39;merchandising&#39;, 0.6504817008972168),
 (&#39;diversification&#39;, 0.6479553580284119),
 (&#39;expertise&#39;, 0.6446896195411682),
 (&#39;digital&#39;, 0.6326863765716553)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#获取词向量</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;innovation&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-0.45616838, -0.7799563 ,  0.56367606, -0.8570078 ,  0.600359  ,
       -0.6588043 ,  0.31116748, -0.11956959, -0.47599426,  0.21840936,
       -0.02268819,  0.1832016 ,  0.24452794,  0.01084935, -1.4213187 ,
        0.22840202,  0.46387577,  1.198386  , -0.621511  , -0.51598716,
        0.13352732,  0.04140598, -0.23470387,  0.6402956 ,  0.20394802,
        0.10799981,  0.24908689, -1.0117126 , -2.3168423 , -0.0402851 ,
        1.6886286 ,  0.5357047 ,  0.22932841, -0.6094084 ,  0.4515793 ,
       -0.5900931 ,  1.8684244 , -0.21056202,  0.29313338, -0.221067  ,
       -0.9535679 ,  0.07325   , -0.15823542,  1.1477109 ,  0.6716076 ,
       -1.0096023 ,  0.10605699,  1.4148282 ,  0.24576302,  0.5740349 ,
        0.19984631,  0.53964925,  0.41962907,  0.41497853, -1.0322098 ,
        0.01090925,  0.54345983,  0.806317  ,  0.31737605, -0.7965337 ,
        0.9282971 , -0.8775608 , -0.26852605, -0.06743863,  0.42815775,
       -0.11774074, -0.17956367,  0.88813037, -0.46279573, -1.0841943 ,
       -0.06798118,  0.4493006 ,  0.71962464, -0.02876493,  1.0282255 ,
       -1.1993176 , -0.38734904, -0.15875885, -0.81085825, -0.07678922,
       -0.16753489,  0.14065655, -1.8609751 ,  0.03587054,  1.2792674 ,
        1.2732009 , -0.74120265, -0.98000383,  0.4521185 , -0.26387128,
        0.37045383,  0.3680011 ,  0.7197629 , -0.3570571 ,  0.8016917 ,
        0.39243212, -0.5027844 , -1.2106236 ,  0.6412354 , -0.878307  ],
      dtype=float32)
</code></pre></div><p><br><br></p>
<h3 id="23-co_occurrence_matrix">2.3 co_occurrence_matrix</h3>
<p>词共现矩阵</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I go to school every day by bus .&#34;</span><span class="p">,</span>
         <span class="s2">&#34;i go to theatre every night by bus&#34;</span><span class="p">]</span>

<span class="n">ct</span><span class="o">.</span><span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> 
                        <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="/Users/thunderhit/Desktop/Coding/Python/diyPython/cntext/img/co_occurrence1.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">documents2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;编程很好玩&#34;</span><span class="p">,</span>
             <span class="s2">&#34;Python是最好学的编程&#34;</span><span class="p">]</span>

<span class="n">ct</span><span class="o">.</span><span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents2</span><span class="p">,</span> 
                        <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="/Users/thunderhit/Desktop/Coding/Python/diyPython/cntext/img/co_occurrence2.png" alt=""  />
</p>
<p><br><br></p>
<h3 id="24--glove">2.4  Glove</h3>
<p>构建Glove词嵌入模型，使用英文数据<code>data/brown_corpus.txt</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">Glove</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">create_vocab</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="s1">&#39;data/brown_corpus.txt&#39;</span><span class="p">,</span> <span class="n">min_count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">cooccurrence_matrix</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">train_embeddings</span><span class="p">(</span><span class="n">vector_size</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4: ...Create vocabulary for Glove.
Step 2/4: ...Create cooccurrence matrix.
Step 3/4: ...Train glove embeddings. 
             Note, this part takes a long time to run
Step 3/4: ... Finish! Use 175.98 s
</code></pre></div><p>生成的Glove词嵌入文件位于<code>output/Glove</code> 。</p>
<p><br><br></p>
<h2 id="三similarity">三、similarity</h2>
<p>四种相似度计算函数</p>
<ul>
<li>cosine_sim(text1, text2)  cos余弦相似</li>
<li>jaccard_sim(text1, text2)     jaccard相似</li>
<li>minedit_sim(text1, text2)  最小编辑距离相似度；</li>
<li>simple_sim(text1, text2) 更改变动算法</li>
</ul>
<p>算法实现参考自 <code>Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.</code></p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span> 


<span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;编程真好玩编程真好玩&#39;</span>
<span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;游戏真好玩编程真好玩啊&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">cosine_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">jaccard_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">minedit_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">simple_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0.82
0.67
2.00
0.87
</code></pre></div><p><br><br></p>
<h2 id="四text2mind">四、Text2Mind</h2>
<p>词嵌入中蕴含着人类的认知信息，以往的词嵌入大多是比较一个概念中两组反义词与某对象的距离计算认知信息。</p>
<p>- <strong>多个对象在某概念的远近</strong>，职业与性别，某个职业是否存在亲近男性，而排斥女性</p>
<p>- 多个对象在某<strong>概念的分量(fen，一声)的多少</strong>， 人类语言中留存着对不同动物体积的认知记忆，如小鼠大象。动物词在词向量空间中是否能留存着这种大小的记忆</p>
<p>这两种认知分别可以用向量距离、向量语义投影计算得来。</p>
<ul>
<li>tm.sematic_distance(words, c_words1, c_words2)  向量距离</li>
<li>tm.sematic_projection(words, c_words1, c_words2)  向量语义投影</li>
</ul>
<h3 id="41-tmsematic_distancewords-c_words1-c_words2">4.1 tm.sematic_distance(words, c_words1, c_words2)</h3>
<p>分别计算words与c_words1、c_words2语义距离，返回距离差值。</p>
<p>例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">male_concept = [&#39;male&#39;, &#39;man&#39;, &#39;he&#39;, &#39;him&#39;]
female_concept = [&#39;female&#39;, &#39;woman&#39;, &#39;she&#39;, &#39;her&#39;]
software_engineer_concept  = [&#39;engineer&#39;,  &#39;programming&#39;,  &#39;software&#39;]
d1 = distance(male_concept,  software_engineer_concept)
d2 = distance(female_concept,  software_engineer_concept)
</code></pre></div><p>如果d1-d2&lt;0，说明在语义空间中，software_engineer_concept更接近male_concept，更远离female_concept。</p>
<p>换言之，在该语料中，人们对软件工程师这一类工作，对女性存在刻板印象(偏见)。</p>
<p><strong>下载glove_w2v.6B.100d.txt</strong>链接: <a href="https://pan.baidu.com/s/1MMfQ7M0YCzL9Klp4zrlHBw">https://pan.baidu.com/s/1MMfQ7M0YCzL9Klp4zrlHBw</a> 提取码: 72l0</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1">#Note: this is a word2vec format model</span>
<span class="n">tm</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">Text2Mind</span><span class="p">(</span><span class="n">w2v_model_path</span><span class="o">=</span><span class="s1">&#39;glove_w2v.6B.100d.txt&#39;</span><span class="p">)</span>

<span class="n">engineers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;program&#39;</span><span class="p">,</span> <span class="s1">&#39;software&#39;</span><span class="p">,</span> <span class="s1">&#39;computer&#39;</span><span class="p">]</span>
<span class="n">mans</span> <span class="o">=</span>  <span class="p">[</span><span class="s2">&#34;man&#34;</span><span class="p">,</span> <span class="s2">&#34;he&#34;</span><span class="p">,</span> <span class="s2">&#34;him&#34;</span><span class="p">]</span>
<span class="n">womans</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;woman&#34;</span><span class="p">,</span> <span class="s2">&#34;she&#34;</span><span class="p">,</span> <span class="s2">&#34;her&#34;</span><span class="p">]</span>

<span class="c1">#在语义空间中，工程师更接近于男人，而不是女人。</span>
<span class="c1">#in semantic space, engineer is closer to man, other than woman.</span>
<span class="n">tm</span><span class="o">.</span><span class="n">sematic_distance</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">engineers</span><span class="p">,</span> 
                    <span class="n">c_words1</span><span class="o">=</span><span class="n">mans</span><span class="p">,</span> 
                    <span class="n">c_words2</span><span class="o">=</span><span class="n">womans</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">-0.38
</code></pre></div><p>-0.38 意味着工程师更接近于男人，而不是女人。</p>
<br>
<h3 id="42-tmsematic_projectionwords-c_words1-c_words2">4.2 tm.sematic_projection(words, c_words1, c_words2)</h3>
<p><strong>语义投影</strong>，根据两组反义词c_words1, c_words2构建一个概念(认知)向量, words中的每个词向量在概念向量中投影，即可得到认知信息。</p>
<p>分值越大，word越位于c_words2一侧。</p>
<p>下图是语义投影示例图，本文算法和图片均来自 &ldquo;Grand, G., Blank, I.A., Pereira, F. and Fedorenko, E., 2022. Semantic projection recovers rich human knowledge of multiple object features from word embeddings. <em>Nature Human Behaviour</em>, pp.1-13.&rdquo;</p>
<p><img loading="lazy" src="img/Nature_Semantic_projection_recovering_human_knowledge_of.png" alt=""  />
</p>
<p>例如，人类的语言中，存在尺寸、性别、年龄、政治、速度、财富等不同的概念。每个概念可以由两组反义词确定概念的向量方向。</p>
<p>以尺寸为例，动物在人类认知中可能存在体积尺寸大小差异。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">animals</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;mouse&#39;</span><span class="p">,</span> <span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="s1">&#39;horse&#39;</span><span class="p">,</span>  <span class="s1">&#39;pig&#39;</span><span class="p">,</span> <span class="s1">&#39;whale&#39;</span><span class="p">]</span>
<span class="n">smalls</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;small&#34;</span><span class="p">,</span> <span class="s2">&#34;little&#34;</span><span class="p">,</span> <span class="s2">&#34;tiny&#34;</span><span class="p">]</span>
<span class="n">bigs</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;large&#34;</span><span class="p">,</span> <span class="s2">&#34;big&#34;</span><span class="p">,</span> <span class="s2">&#34;huge&#34;</span><span class="p">]</span>

<span class="c1"># In size conception, mouse is smallest, horse is biggest.</span>
<span class="c1"># 在大小概念上，老鼠最小，马是最大的。</span>
<span class="n">tm</span><span class="o">.</span><span class="n">sematic_projection</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">animals</span><span class="p">,</span> 
                      <span class="n">c_words1</span><span class="o">=</span><span class="n">smalls</span><span class="p">,</span> 
                      <span class="n">c_words2</span><span class="o">=</span><span class="n">bigs</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;mouse&#39;, -1.68),
 (&#39;cat&#39;, -0.92),
 (&#39;pig&#39;, -0.46),
 (&#39;whale&#39;, -0.24),
 (&#39;horse&#39;, 0.4)]
</code></pre></div><p>在这几个动物尺寸的感知上，人类觉得老鼠体型是最小，马的体型是最大。</p>
<p><br><br></p>
<h2 id="引用说明">引用说明</h2>
<p>如果研究中使用cntext，请使用以下格式进行引用</p>
<h3 id="apalike">apalike</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Deng X., Nan P. (2022). cntext: a Python tool for text mining (version 1.7.9). DOI: 10.5281/zenodo.7063523 URL: https://github.com/hiDaDeng/cntext
</code></pre></div><h3 id="bibtex">bibtex</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">@misc{YourReferenceHere,
author = {Deng, Xudong and Nan, Peng},
doi = {10.5281/zenodo.7063523},
month = {9},
title = {cntext: a Python tool for text mining},
url = {https://github.com/hiDaDeng/cntext},
year = {2022}
}
</code></pre></div><h3 id="endnote">endnote</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">%0 Generic
%A Deng, Xudong
%A Nan, Peng
%D 2022
%K text mining
%K text analysi
%K social science
%K management science
%K semantic analysis
%R 10.5281/zenodo.7063523
%T cntext: a Python tool for text mining
%U https://github.com/hiDaDeng/cntext
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>sentence-transformer库 | 句子语义向量化</title>
      <link>https://textdata.cn/blog/sentence-transformer-tutorial/</link>
      <pubDate>Mon, 09 May 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/sentence-transformer-tutorial/</guid>
      <description>使用sentence-transformer库BERT技术，将句子语义向量化</description>
      <content:encoded><![CDATA[<blockquote>
<p>内容摘自</p>
<p>刘焕勇博客: <a href="https://liuhuanyong.github.io/">https://liuhuanyong.github.io/</a></p>
<p>原文地址: <a href="https://mp.weixin.qq.com/s/fkgk8l_Vd4YDU_K6G54F4Q">https://mp.weixin.qq.com/s/fkgk8l_Vd4YDU_K6G54F4Q</a></p>
<p>公众号: 老刘说NLP</p>
</blockquote>
<p>word2vec、glove是两种静态的词向量模型，即每个词语只有一个固定的向量表示。但在不同语境中，词语的语义会发生变化，按道理词向量也应该动态调整。相比word2vec、glove生成的静态词向量， BERT是一种动态的技术，可以根据上下文情景，得到语义变化的词向量。</p>
<p>HuggingFace网站提供了简易可用的数据集、丰富的预训练语言模型， 通过sentence-transformer库，我们可以使用HuggingFace内的预训练模型，得到不同情景的文本的语义向量。</p>
<p>HuggingFace网站  <a href="https://huggingface.co/">https://huggingface.co/</a></p>
<p><img loading="lazy" src="img/HuggingFace.png" alt=""  />
</p>
<br>
<h2 id="动态句向量">动态句向量</h2>
<p>sentence-transformer框架提供了一种简便的方法来计算句子和段落的向量表示（也称为句子嵌入）</p>
<p><img loading="lazy" src="img/sentence-transformer.png" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">sentence</span><span class="o">-</span><span class="n">transformers</span>
</code></pre></div><br>
<h2 id="代码">代码</h2>
<p><a href="sentence-transformer-tutorial.zip">click to download the code</a></p>
<p>使用huggingface中的distiluse-base-multilingual-cased与训练模型，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span><span class="p">,</span> <span class="n">util</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">SentenceTransformer</span><span class="p">(</span><span class="s1">&#39;distiluse-base-multilingual-cased&#39;</span><span class="p">)</span>
</code></pre></div><p>第一次运行上方的代码，需要运行一定的时间用于下载。下载完成后，我们使用同种语义的中英文句子，分别计算得到emb1和emb2两个句向量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">emb1 = model.encode(&#39;Natural language processing is a hard task for human&#39;)

emb2 = model.encode(&#39;自然语言处理对于人类来说是个困难的任务&#39;)
emb1
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([ 2.58186590e-02,  4.65703346e-02,  4.25276496e-02, -1.67875513e-02,
        5.56012690e-02, -3.44308838e-02, -6.53978735e-02,  1.77450478e-02,
       -3.47155109e-02,  2.86140274e-02,  2.48657260e-02,  7.94188876e-04,
        5.09755425e-02, -1.76107027e-02, -1.04308855e-02,  7.61642214e-03,
        ...
        4.28482369e-02,  1.76657233e-02, -5.83355911e-02,  1.92921527e-03,
        2.81221420e-02,  5.24400780e-03,  2.10703332e-02,  7.96715263e-03,
       -6.80630878e-02, -2.05304120e-02, -2.43293475e-02, -1.87458862e-02],
      dtype=float32)
</code></pre></div><p>在distiluse-base-multilingual-cased这种模型中， 不同语言的同义句应该具有类似的语义，那么cos相似度应该是很大的。越接近于1越相似；越接近于0，越不相似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cos_sim</span> <span class="o">=</span> <span class="n">util</span><span class="o">.</span><span class="n">pytorch_cos_sim</span><span class="p">(</span><span class="n">emb1</span><span class="p">,</span> <span class="n">emb2</span><span class="p">)</span>
<span class="n">cos_sim</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">tensor([[0.8960]])
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SimpleTransformers库 | 使用BERT实现文本向量化</title>
      <link>https://textdata.cn/blog/simple_transformer/</link>
      <pubDate>Thu, 05 May 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/simple_transformer/</guid>
      <description>基于BERT预训练模型，对文本进行向量化</description>
      <content:encoded><![CDATA[<p><code>Simple Transformers</code> 库基于 HuggingFace 的 <a href="https://github.com/huggingface/transformers">Transformers</a> 库，可让您快速训练和评估 Transformer 模型， <strong>初始化</strong>、<strong>训练</strong>和<strong>评估</strong>模型只需要 3 行代码。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install simpletransformers
</code></pre></div><p><strong>Simple Transformer</strong> 模型在构建时考虑了特定的自然语言处理 (NLP) 任务。 每个这样的模型都配备了旨在最适合它们打算执行的任务的特性和功能。 使用 Simple Transformers 模型的高级过程遵循相同的模式。</p>
<ol>
<li>初始化一个特定于任务的模型
2.用<code>train_model()</code>训练模型</li>
<li>使用 <code>eval_model()</code> 评估模型</li>
<li>使用 <code>predict()</code> 对（未标记的）数据进行预测</li>
</ol>
<p>但是，不同模型之间存在必要的差异，以确保它们非常适合其预期任务。 关键差异通常是输入/输出数据格式和任何任务特定功能/配置选项的差异。 这些都可以在每个任务的文档部分中找到。</p>
<p>当前实现的特定于任务的“Simple Transformer”模型及其任务如下所示。</p>
<table>
<thead>
<tr>
<th>Task</th>
<th>Model</th>
</tr>
</thead>
<tbody>
<tr>
<td>Binary and multi-class text classification文本二分类、多分类</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td>Conversational AI (chatbot training)对话机器人训练</td>
<td><code>ConvAIModel</code></td>
</tr>
<tr>
<td>Language generation语言生成</td>
<td><code>LanguageGenerationModel</code></td>
</tr>
<tr>
<td>Language model training/fine-tuning语言模型训练、微调</td>
<td><code>LanguageModelingModel</code></td>
</tr>
<tr>
<td>Multi-label text classification多类别文本分类</td>
<td><code>MultiLabelClassificationModel</code></td>
</tr>
<tr>
<td>Multi-modal classification (text and image data combined)多模态分类</td>
<td><code>MultiModalClassificationModel</code></td>
</tr>
<tr>
<td>Named entity recognition命名实体识别</td>
<td><code>NERModel</code></td>
</tr>
<tr>
<td>Question answering问答</td>
<td><code>QuestionAnsweringModel</code></td>
</tr>
<tr>
<td>Regression回归</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td>Sentence-pair classification句对分类</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td><strong>Text Representation Generation文本表征生成</strong></td>
<td><strong>RepresentationModel</strong></td>
</tr>
<tr>
<td>Document Retrieval文档抽取</td>
<td><code>RetrievalModel</code></td>
</tr>
</tbody>
</table>
<ul>
<li><strong>有关如何使用这些模型的更多信息，请参阅 <a href="https://simpletransformers.ai/">docs</a> 中的相关部分。</strong></li>
<li>示例脚本可以在 <a href="https://github.com/ThilinaRajapakse/simpletransformers/tree/master/examples">examples</a> 目录中找到。</li>
<li>有关项目的最新更改，请参阅 <a href="https://github.com/ThilinaRajapakse/simpletransformers/blob/master/CHANGELOG.md">Changelog</a>。</li>
</ul>
<h2 id="生成句子嵌入">生成句子嵌入</h2>
<p>使用huggingface网站https://huggingface.co/ 提供的模型</p>
<ul>
<li>英文模型 bert-base-uncased</li>
<li>中文模型 bert-base-chinese</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">simpletransformers.language_representation</span> <span class="kn">import</span> <span class="n">RepresentationModel</span>
<span class="n">sentences</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Machine Learning and Deep Learning are part of AI&#34;</span><span class="p">,</span> 
             <span class="s2">&#34;Data Science will excel in future&#34;</span><span class="p">]</span> <span class="c1">#it should always be a list</span>


<span class="n">model</span> <span class="o">=</span> <span class="n">RepresentationModel</span><span class="p">(</span>
        <span class="n">model_type</span><span class="o">=</span><span class="s2">&#34;bert&#34;</span><span class="p">,</span>
        <span class="n">model_name</span><span class="o">=</span><span class="s2">&#34;bert-base-uncased&#34;</span><span class="p">,</span> <span class="c1">#英文模型</span>
        <span class="n">use_cuda</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="n">sentence_vectors</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">encode_sentences</span><span class="p">(</span><span class="n">sentences</span><span class="p">,</span> <span class="n">combine_strategy</span><span class="o">=</span><span class="s2">&#34;mean&#34;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">sentence_vectors</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sentence_vectors</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(2, 768)

array([[-0.10800573,  0.19615649, -0.10756102, ..., -0.26362818,
         0.56403756, -0.30985302],
       [ 0.0201617 , -0.19381572,  0.4360792 , ..., -0.2979438 ,
         0.04984972, -0.702381  ]], dtype=float32)
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>geopy库 | 地理编码计算距离</title>
      <link>https://textdata.cn/blog/geopy_distance_calculate/</link>
      <pubDate>Thu, 28 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/geopy_distance_calculate/</guid>
      <description>地理信息数据分析，经纬度距离计算</description>
      <content:encoded><![CDATA[<h1 id="geopy">geopy</h1>
<p>geopy 是几个流行的地理编码网络服务的 Python 客户端。</p>
<p>geopy 使 Python 开发人员可以使用第三方地理编码器和其他数据源轻松定位全球地址、城市、国家和地标的坐标。</p>
<p>geopy 包括用于 <a href="https://nominatim.org/">OpenStreetMap Nominatim</a>、<a href="https://developers.google.com/maps/documentation/geocoding/">Google Geocoding API (V3)</a> 的地理编码器类和许多 其他地理编码服务。 完整列表可在 <a href="https://geopy.readthedocs.io/en/latest/#geocoders">Geocoders 文档部分</a> 上找到。 地理编码器类位于 <a href="https://github.com/geopy/geopy/tree/master/geopy/geocoders">geopy.geocoders</a>。</p>
<p>geopy 针对 CPython（版本 3.5、3.6、3.7、3.8、3.9）和 PyPy3 进行了测试。 geopy 1.x 系列还支持 CPython 2.7、3.4 和 PyPy2。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install geopy
</code></pre></div><h2 id="geocoding">Geocoding</h2>
<p>要将查询地理定位到地址和坐标：</p>
<p>首先需要在https://www.openstreetmap.org/注册账号，注册一个app名。注册好的app名用于填充user_agent</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">geopy.geocoders</span> <span class="kn">import</span> <span class="n">Nominatim</span>

<span class="n">geolocator</span> <span class="o">=</span> <span class="n">Nominatim</span><span class="p">(</span><span class="n">user_agent</span><span class="o">=</span><span class="s2">&#34;specify_your_app_name_here&#34;</span><span class="p">)</span>
<span class="n">location</span> <span class="o">=</span> <span class="n">geolocator</span><span class="o">.</span><span class="n">geocode</span><span class="p">(</span><span class="s2">&#34;175 5th Avenue NYC&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">address</span><span class="p">)</span>
<span class="nb">print</span><span class="p">((</span><span class="n">location</span><span class="o">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">location</span><span class="o">.</span><span class="n">longitude</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Flatiron Building, 175, 5th Avenue, Flatiron, New York, NYC, New York, ...
(40.7410861, -73.9896297241625)
{&#39;place_id&#39;: &#39;9167009604&#39;, &#39;type&#39;: &#39;attraction&#39;, ...}
</code></pre></div><p><br><br></p>
<p>为了找到地址对应的经纬度</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">geopy.geocoders</span> <span class="kn">import</span> <span class="n">Nominatim</span>

<span class="n">geolocator</span> <span class="o">=</span> <span class="n">Nominatim</span><span class="p">(</span><span class="n">user_agent</span><span class="o">=</span><span class="s2">&#34;specify_your_app_name_here&#34;</span><span class="p">)</span>
<span class="n">location</span> <span class="o">=</span> <span class="n">geolocator</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="s2">&#34;52.509669, 13.376294&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">address</span><span class="p">)</span>
<span class="nb">print</span><span class="p">((</span><span class="n">location</span><span class="o">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">location</span><span class="o">.</span><span class="n">longitude</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Potsdamer Platz, Mitte, Berlin, 10117, Deutschland, European Union
(52.5094982, 13.3765983)
{&#39;place_id&#39;: &#39;654513&#39;, &#39;osm_type&#39;: &#39;node&#39;, ...}
</code></pre></div><p><br><br></p>
<h2 id="测量距离">测量距离</h2>
<p>Geopy 可以使用 <a href="https://en.wikipedia.org/wiki/Geodesics_on_an_ellipsoid">geodesic distance</a> 或 <a href="https://en.wikipedia.org/wiki/">great-circle distance</a> 计算两点之间的测地线距离 Great-circle_distance），默认的测地线距离可用作函数 geopy.distance.distance。</p>
<p>这是测地线距离的示例用法，采用一对 <code>(lat, lon)</code> 元组：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">geodesic</span>
<span class="n">newport_ri</span> <span class="o">=</span> <span class="p">(</span><span class="mf">41.49008</span><span class="p">,</span> <span class="o">-</span><span class="mf">71.312796</span><span class="p">)</span>
<span class="n">cleveland_oh</span> <span class="o">=</span> <span class="p">(</span><span class="mf">41.499498</span><span class="p">,</span> <span class="o">-</span><span class="mf">81.695391</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">geodesic</span><span class="p">(</span><span class="n">newport_ri</span><span class="p">,</span> <span class="n">cleveland_oh</span><span class="p">)</span><span class="o">.</span><span class="n">miles</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">538.390445368
</code></pre></div><br>
<p>使用great-cricle距离算法，同时采用一对 <code>(lat, lon)</code> 元组：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">great_circle</span>
<span class="n">newport_ri</span> <span class="o">=</span> <span class="p">(</span><span class="mf">41.49008</span><span class="p">,</span> <span class="o">-</span><span class="mf">71.312796</span><span class="p">)</span>
<span class="n">cleveland_oh</span> <span class="o">=</span> <span class="p">(</span><span class="mf">41.499498</span><span class="p">,</span> <span class="o">-</span><span class="mf">81.695391</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">great_circle</span><span class="p">(</span><span class="n">newport_ri</span><span class="p">,</span> <span class="n">cleveland_oh</span><span class="p">)</span><span class="o">.</span><span class="n">miles</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">536.997990696
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TransBigData库 | 出租车GPS数据处理</title>
      <link>https://textdata.cn/blog/trans_big_data_examples_taxi_data/</link>
      <pubDate>Thu, 28 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/trans_big_data_examples_taxi_data/</guid>
      <description>地理信息数据处理包TransBigData</description>
      <content:encoded><![CDATA[<h2 id="taxi-gps数据处理">Taxi GPS数据处理</h2>
<p>B站-同济小旭学长</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1na411i7sd&page=3"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="taxi_code_trans_big_data.zip">download the code</a></p>
<br>
<p>在这个例子中，我们将介绍如何使用 TransBigData 包来高效处理 Taxi GPS 数据。首先，导入 TransBigData 并使用 pandas 读取数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">mapclassify</span><span class="o">==</span><span class="mf">2.4.3</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">transbigdata</span><span class="o">==</span><span class="mf">0.4.7</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">keplergl</span><span class="o">==</span><span class="mf">0.3.2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">transbigdata</span> <span class="k">as</span> <span class="nn">tbd</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="c1"># Read data</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/TaxiData-Sample.csv&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
<span class="n">data</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">,</span> <span class="s1">&#39;Speed&#39;</span><span class="p">]</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Read the GeoDataFrame of the study area</span>
<span class="n">sz</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;data/sz.json&#39;</span><span class="p">)</span>
<span class="n">sz</span><span class="o">.</span><span class="n">crs</span> <span class="o">=</span> <span class="kc">None</span>
<span class="n">sz</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> 
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">sz</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">);</span>
</code></pre></div><p><img loading="lazy" src="img/output_4_0.png" alt="png"  />
</p>
<br>
<h2 id="数据预处理">数据预处理</h2>
<p>TransBigData 集成了几种常用的数据预处理方法。 使用<code>tbd.clean_outofshape</code>方法，给定研究区域的数据和GeoDataFrame，可以删除研究区域外的数据。 <code>tbd.clean_taxi_status</code> 方法可以过滤掉乘客状态（OpenStatus）瞬时变化的数据。 使用预处理方式时，需要将对应的列名作为参数传入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Data Preprocessing</span>
<span class="c1"># Delete the data outside of the study area</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">clean_outofshape</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">sz</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">],</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>

<span class="c1"># Delete the data with instantaneous changes in passenger status</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">clean_taxi_status</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
</code></pre></div><br>
<h2 id="数据网格化">数据网格化</h2>
<p>数据分布最基本的表达方式是地理网格的形式；</p>
<p>数据网格化后，每个 GPS 数据点映射到相应的网格。 对于数据网格化，首先需要确定网格化参数（可以理解为定义一个网格坐标系）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 数据网格化</span>
<span class="c1"># 定义边界并生成网格参数（经纬度）</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">[</span><span class="mf">113.6</span><span class="p">,</span> <span class="mf">22.4</span><span class="p">,</span> <span class="mf">114.8</span><span class="p">,</span> <span class="mf">22.9</span><span class="p">]</span>
<span class="n">params</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">area_to_params</span><span class="p">(</span><span class="n">bounds</span><span class="p">,</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</code></pre></div><pre><code>{'slon': 113.6, 'slat': 22.4, 'deltalon': 0.004872390756896538, 'deltalat': 0.004496605206422906, 'theta': 0, 'method': 'rect', 'gridsize': 500}
</code></pre>
<p>获得网格化参数后，下一步就是将 GPS 映射到其对应的网格上。</p>
<p>使用 <code>tbd.GPS_to_grids</code>，它将生成 <code>LONCOL</code> 列和 <code>LATCOL</code> 列。 两列一起可以指定一个网格：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Mapping GPS data to grids</span>
<span class="n">data</span><span class="p">[</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;LATCOL&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">GPS_to_grid</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Lng&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Lat&#39;</span><span class="p">],</span> <span class="n">params</span><span class="p">)</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df3.png" alt="png"  />
</p>
<p>计算每个网格中的数据量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Aggregate data into grids</span>
<span class="n">datatest</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">,</span> <span class="s1">&#39;LATCOL&#39;</span><span class="p">])[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df4.png" alt="png"  />
</p>
<p>将生成网格的geometry并将其转换为 GeoDataFrame</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Generate the geometry for grids</span>
<span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">grid_to_polygon</span><span class="p">([</span><span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">],</span> <span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;LATCOL&#39;</span><span class="p">]],</span> <span class="n">params</span><span class="p">)</span>

<span class="c1"># Change it into GeoDataFrame</span>
<span class="c1"># import geopandas as gpd</span>
<span class="n">datatest</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">GeoDataFrame</span><span class="p">(</span><span class="n">datatest</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df5.png" alt="png"  />
</p>
<p>绘制生成的网格：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span> 
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>

<span class="c1"># tbd.plot_map(plt, bounds, zoom=10, style=4)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_16_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="c1"># plt.legend(fontsize=10)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_17_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;OrRd&#39;</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="c1"># plt.legend(fontsize=10)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_18_0.png" alt="png"  />

​</p>
<br>
<h2 id="origin-destinationod-提取和汇总出租车行程">Origin-destination(OD) 提取和汇总出租车行程</h2>
<p>使用 <code>tbd.taxigps_to_od</code> 方法并传入对应的列名来提取出租车行程 OD：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Extract taxi OD from GPS data</span>
<span class="n">oddata</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">taxigps_to_od</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">col</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
<span class="n">oddata</span>
</code></pre></div><p><img loading="lazy" src="img/df6.png" alt="png"  />
</p>
<p>聚合提取的 OD 并生成 LineString GeoDataFrame</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Gridding and aggragate data</span>
<span class="n">od_gdf</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">odagg_grid</span><span class="p">(</span><span class="n">oddata</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df7.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="c1"># data_grid_count.plot(ax=ax1, column=&#39;VehicleNum&#39;, legend=True, cmap=&#39;OrRd&#39;, scheme=&#39;quantiles&#39;)</span>

<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD Trips&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_23_0.png" alt="png"  />

​</p>
<br>
<h2 id="将-od-聚合成多边形">将 OD 聚合成多边形</h2>
<p><code>TransBigData</code> 还提供了将 OD 聚合成多边形的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Aggragate OD data to polygons </span>
<span class="c1"># without passing gridding parameters, the algorithm will map the data </span>
<span class="c1"># to polygons directly using their coordinates</span>
<span class="n">od_gdf</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">odagg_shape</span><span class="p">(</span><span class="n">oddata</span><span class="p">,</span> <span class="n">sz</span><span class="p">,</span> <span class="n">round_accuracy</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD Trips&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p><img loading="lazy" src="img/output_25_0.png" alt="png"  />
</p>
<br>
<h2 id="基于-matplotlib-的地图绘制">基于 Matplotlib 的地图绘制</h2>
<p><code>TransBigData</code> 还在 matplotlib 中提供底图加载。 在使用此方法之前，您需要设置您的 mapboxtoken 和底图的存储位置，请参见：<a href="https://transbigdata.readthedocs.io/en/latest/plot_map.html">此链接</a>。<code>tbd.plot_map</code> 添加底图和 tbd.plotscale 以添加比例和指南针：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Create figure</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">sca</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span>

<span class="c1"># Load basemap</span>
<span class="n">tbd</span><span class="o">.</span><span class="n">plot_map</span><span class="p">(</span><span class="n">plt</span><span class="p">,</span> <span class="n">bounds</span><span class="p">,</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

<span class="c1"># Define an ax for colorbar</span>
<span class="n">cax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">axes</span><span class="p">([</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.33</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD</span><span class="se">\n</span><span class="s1">Matrix&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">sca</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span>

<span class="c1"># Plot the OD</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span> <span class="n">cax</span><span class="o">=</span><span class="n">cax</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># Plot the polygons</span>
<span class="n">sz</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">facecolor</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">),</span> <span class="n">linewidths</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># Add compass and scale</span>
<span class="n">tbd</span><span class="o">.</span><span class="n">plotscale</span><span class="p">(</span><span class="n">ax</span><span class="p">,</span> <span class="n">bounds</span><span class="o">=</span><span class="n">bounds</span><span class="p">,</span> <span class="n">textsize</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">compasssize</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">2000</span><span class="p">,</span> <span class="n">rect</span><span class="o">=</span><span class="p">[</span><span class="mf">0.06</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">bounds</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">bounds</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_27_0.png" alt="png"  />

​</p>
<br>
## 提取出租车轨迹
使用`the.taxigps_traj_point`方法，输入GPS数据和OD数据，可以提取轨迹点
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data_deliver</span><span class="p">,</span> <span class="n">data_idle</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">taxigps_traj_point</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">oddata</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Time&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
<span class="n">data_deliver</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df8.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data_idle</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df9.png" alt="png"  />
</p>
<p>生成轨迹图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">traj_deliver</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">points_to_traj</span><span class="p">(</span><span class="n">data_deliver</span><span class="p">)</span>
<span class="n">traj_deliver</span><span class="o">.</span><span class="n">plot</span><span class="p">();</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_33_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">traj_idle</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">points_to_traj</span><span class="p">(</span><span class="n">data_idle</span><span class="p">[</span><span class="n">data_idle</span><span class="p">[</span><span class="s1">&#39;OpenStatus&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">])</span>
<span class="n">traj_idle</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_34_1.png" alt="png"  />

​</p>
<br>
<h2 id="轨迹可视化trajectories-visualization">轨迹可视化Trajectories visualization</h2>
<p><code>TransBigData</code> 的内置可视化功能利用了可视化包 <code>keplergl</code> ，使用简单代码即可在 Jupyter notebook 上交互式地显示轨迹数据。</p>
<p>要使用此方法，请为 python 安装 <code>keplergl</code> 包：</p>
<blockquote>
<p>pip3 install keplergl</p>
</blockquote>
<p>安装后，需要按照 <a href="https://transbigdata.readthedocs.io/en/latest/visualization.html">link</a> 配置jupyter notebook</p>
<p>Visualization of trajectory data:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">tbd</span><span class="o">.</span><span class="n">visualization_trip</span><span class="p">(</span><span class="n">data_deliver</span><span class="p">)</span>
</code></pre></div><pre><code>Processing trajectory data...
Generate visualization...
User Guide: https://docs.kepler.gl/docs/keplergl-jupyter
</code></pre>
<p><img loading="lazy" src="img/trajec.png" alt=""  />
</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>转载 | 从符号到嵌入：计算社会科学的两种文本表示</title>
      <link>https://textdata.cn/blog/from_sysbol_to_embeddings_in_computational_social_science/</link>
      <pubDate>Mon, 25 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/from_sysbol_to_embeddings_in_computational_social_science/</guid>
      <description>如何有效地表示数据以挖掘我们想要的计算社会科学的含义？为了探索答案，我们对 CSS 中文本和网络的数据表示进行了彻底的回顾，我们将现有的表示总结为两个方案，即基于符号的表示和基于嵌入的表示。How to efficiently represent data to mine the implications we want for computational social science? To explore the answer, we conduct a thorough review of data representations for text and the web in CSS, and we summarize existing representations into two schemes, symbol-based and embedding-based</description>
      <content:encoded><![CDATA[<p>B站看到大牛刘知远关于文本分析在计算社会科学领域应用的分享，解答了我对文本表示的疑惑，看完了能对文本的特征工程加深理解，同时也能更清晰未来如何借助计算机科学技术开展社会科学研究。</p>
<blockquote>
<p><strong>全文摘抄自</strong></p>
<p>Chen, H., Yang, C., Zhang, X., Liu, Z., Sun, M. and Jin, J., 2021. From Symbols to Embeddings: A Tale of Two Representations in Computational Social Science. Journal of Social Computing, 2(2), pp.103-156.</p>
</blockquote>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1qi4y1Q7qj&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="摘要">摘要</h2>
<p><strong>计算社会科学</strong>（CSS），旨在利用计算方法来解决社会科学问题，是一个新兴和快速发展的领域。 CSS 的研究是数据驱动的，并且显着受益于在线用户生成内容和社交网络的可用性，其中包含用于调查的富文本和网络数据。然而，这些大规模、多模态的数据也给研究人员带来了很大的挑战：<strong>如何有效地表示数据以挖掘我们想要的 CSS 含义</strong>？为了探索答案，<strong>我们对 CSS 中文本和网络的数据表示进行了彻底的回顾，我们将现有的表示总结为两个方案，即基于符号的表示和基于嵌入的表示</strong>，并为每个方案介绍了一系列典型的方法。随后，我们基于对来自 6 个涉及 CSS 的顶级场所的 400 多篇研究文章的调查，展示了上述表示的应用。从这些应用程序的统计数据中，<strong>我们挖掘出每种表示的强度，并发现基于嵌入的表示在过去十年中出现并获得越来越多的关注的趋势</strong>。最后，我们讨论了几个关键挑战和未来方向的开放性问题。本调查旨在为 CSS 研究人员提供对数据表示的更深入理解和更明智的应用。</p>
<p><strong>关键词</strong>：计算社会科学；基于符号的表示；基于嵌入的表示；社交网络</p>
<br>
<h2 id="一计算社会学数据分析流程">一、计算社会学数据分析流程</h2>
<p>其中第二步，数据表示目前有两大类表示(特征工程)方法</p>
<ul>
<li><strong>基于符号的文本表示</strong>；符号可以是单词(或词组)，也可以是概念(如正面情感、负面情感)</li>
<li><strong>基于嵌入(分布式)的文本表示</strong>；相比于符号法，将词(词组)看做一个点。嵌入表示认为词是存在更多浅藏含义，存在亲疏远近，是可以比较的词向量。词向量可以有v(king)-v(queen)约等于v(man)-v(woman)</li>
</ul>
<p><img loading="lazy" src="img/fig1.png" alt=""  />
</p>
<br>
<h2 id="二基于符号的文本表示">二、基于符号的文本表示</h2>
<p>基于符号的文本表示一般来说默认词语是不可分的符号，每个词能根据词频统计出现次数的多与少，或是否存在。</p>
<h3 id="21-词语层面">2.1 词语层面</h3>
<ul>
<li>
<p>基于词频表示</p>
<ul>
<li>是否出现，出现标位1，反之标位0。</li>
<li>出现多少，词语出现几次，标为几个。</li>
</ul>
</li>
<li>
<p>基于特征表示，如每个词带有权重(得分)</p>
</li>
<li>
<p>基于网络表示，如词语共现网络(矩阵)</p>
</li>
</ul>
<h3 id="22-句子层面">2.2 句子层面</h3>
<ul>
<li>
<p>基于词频的表示</p>
<ul>
<li>one-hot 将文本转为向量，向量中每个数，词语出现标位1，反之标位0</li>
<li>bag-of-words，将文本转为向量，向量中每个数，词语出现n次标记为n</li>
<li>n-grams，对词组的处理，将词组看做一个单词(整体)。</li>
<li>Tf-Idf ,该算法分为tf和idf两部分。其中tf与bag-of-words类似，考虑词语出现次数。而idf还考虑词语在语料中出现场景的稀缺性程度。</li>
</ul>
</li>
<li>
<p>基于语法特征，如句法依存关系，类似于英语语法，将句子分为主谓宾、动词、名词等。</p>
</li>
<li>
<p>词典法，如使用正、负情感词典，对文本数据进行情感分析，可以得到pos和neg的各自得分</p>
</li>
</ul>
<p><img loading="lazy" src="img/fig2.png" alt=""  />
</p>
<br>
<h2 id="三基于嵌入的文本表示">三、基于嵌入的文本表示</h2>
<h3 id="31词语层面">3.1词语层面</h3>
<p>嵌入表示认为词是存在更多浅藏含义，存在亲疏远近，是可以比较的词向量。词向量可以有v(best)-v(good)约等于v(worst)-v(bad)</p>
<h3 id="32-句子层面">3.2 句子层面</h3>
<p>词语是向量，那么由词语组成的句子也会加权得到一个向量。含有相似话题或含义相近的句子在多维向量空间中会比较接近。</p>
<p><img loading="lazy" src="img/fig7.png" alt=""  />
</p>
<br>
<h2 id="四任务分类文本的用法">四、任务分类：文本的用法</h2>
<p><img loading="lazy" src="img/fig16.png" alt=""  />
</p>
<p>有了文本数据，刚刚解决了如何表示文本。接下来，需要明确，我们使用文本目的是为了做哪类分析，得到哪些信息。有8种常见的文本分析图式</p>
<ul>
<li>描述性。如随时间推移，词频的发展趋势是变大的</li>
<li>相关性。</li>
<li>聚类。如lda话题分析、k-means聚类</li>
<li>相似度。两个文档转为向量后，可以通过cosine计算相似度</li>
<li>分类。机器学习分类，判断某文本隶属于哪个类别</li>
<li>回归。例如根据文本，判断某件事发生的概率</li>
<li>语言模型。</li>
<li>排序。</li>
</ul>
<br>
<h2 id="五发文趋势-符号vs嵌入">五、发文趋势-符号vs嵌入</h2>
<p>基于上一节中对应用程序的介绍，可以观察到基于符号和基于嵌入的表示在 <strong>计算社会科学</strong>中都得到了相当大的采用。为了明确研究它们的覆盖范围，我们计算了每年使用两种表示中的一种或两种的作品数量，如图 17 所示。通过比较nature、science、pnas三大顶级期刊，我们可以发现使用<strong>基于嵌入表示</strong>的文章比例在过去几年中逐渐。这表明越来越多的 计算社会科学文章 已经考虑并受益于基于嵌入表示。</p>
<p>图 18 显示了在 计算机领域ACL、WWW 和 KDD 的会议上中，发现使用基于嵌入的表示的文章数量已大大超过使用基于符号的表示的文章数量。然而，与图 17 相比，计算机科学会议中基于嵌入的表示的数量与三个多学科期刊之间存在很大差距。</p>
<p><img loading="lazy" src="img/3_top_journals.png" alt=""  />
</p>
<p><img loading="lazy" src="img/nlp.png" alt=""  />
</p>
<p>总而言之，在过去十年中，基于嵌入的表示已经出现并在 计算社会科学 中发挥着越来越重要的作用。</p>
<br>
<h2 id="六趋势解读">六、趋势解读</h2>
<p>基于它们的内部机制和现有应用，对趋势解读，我们总结出以下三个关键点。</p>
<p>基于符号的表示因其明确性和可解释性而擅长描述和关系的任务。</p>
<p>基于符号的表示中的每个值都表示一定的人类可读的含义，因此我们可以直接使用它来观察数据的分布，以及提取对象之间的关系。例如，基于频率的词表示用于观察文化变化并捕捉新闻中提及次数与公司股票交易量之间的关系。虽然基于主题模型的表示和一些基于神经的表示在一定程度上具有实际意义，但它们对于社会科学研究人员来说仍然是模糊的并且不那么引人注目。</p>
<p>由于神经网络具有强大的拟合数据和提取深度语义的能力，基于嵌入的表示在预测（例如分类和回归）和相似性任务中表现更好。一方面，神经网络通过大规模神经元的连接实现高效的输入输出映射功能。另一方面，通过多层网络的构建，实现深层语义和抽象概念的提取。现有研究表明，深层捕获相对于浅层更抽象的特征。诸如社会偏见和道德化之类的抽象概念都可以通过基于嵌入的表示来很好地衡量。虽然我们提到基于符号的表示可以通过一些定义的符号来代表抽象概念，但这种表示仍然是部分和肤浅的，很难捕捉到它们的全貌。</p>
<p>基于嵌入的表示需要更少的人力。基于符号的表示通常需要大量的专家知识来定义研究对象的特征，这是劳动密集型的。此外，对于一些没有充分特征的抽象概念或对象，它们的表现将受到限制。与它们不同的是，基于嵌入的表示是从数据中自动提取的，几乎不需要人工干预，甚至可以补充人类知识。例如，可以使用神经网络来自动恢复丢失的巴比伦文本，这即使对专家来说也是具有挑战性的。此外，基于嵌入的表示可以在没有手动定义的情况下描述语言的复杂性和歧义性。</p>
<br> 
<h2 id="七未来展望">七、未来展望</h2>
<p>尽管在过去十年中出现了从符号到嵌入的趋势，但仍有许多挑战和悬而未决的问题有待探索。展望未来，我们列出了一些与计算社会科学 中的数据表示相关的基本和潜在的未来方向。</p>
<p>预训练的语言模型。近年来，预训练的语言模型受到了相当大的关注，并在处理文本数据方面取得了巨大的成功 [100, 240]。这些模型从百科全书和书籍等海量文本数据中学习丰富的语义信息，仅在下游任务中进行微调以实现有效的基于嵌入的表示。因此，对于 计算社会科学，我们可以借助预训练的语言模型获得更通用、更健壮的文本表示。与从传统神经网络模型中学习的表示相比，这些表示不仅可以更广泛、更准确地从文本中分析社会现象，而且还可以减少那些需要大量标记数据的任务的人工注释。</p>
<p>图神经网络。通过消息传递机制，图神经网络 [461] 可以同时有效地对网络拓扑和节点/边缘特征（例如文本信息）进行建模，从而提供一个统一的框架来利用来自异构来源的信息。 计算社会科学 中的许多场景需要处理社交网络以及个人特征。因此，图神经网络技术在 计算社会科学 研究中具有很大的应用潜力，可以学习融合文本和网络信息的表示。事实上，计算机科学中的各种应用，例如自然语言处理 [418] 和推荐系统 [439]，已经采用图神经网络进行建模。</p>
<p>设计为预测和相似性。基于嵌入的表示以丰富和深层次的语义而闻名，而基于符号的表示通常保留在部分和浅层语义中。同时，基于嵌入的表示擅长预测和相似性的任务。因此，为了充分利用嵌入中的强语义，鼓励 计算社会科学 研究人员尽可能将研究问题设计为预测或相似性任务。例如，我们可以将社会偏见问题设计为性别词和中性词嵌入之间的相似性度量 [59, 133]。此外，人类语言的复杂性可以设计为一项预测任务，它以语言模型为指标查看单词或句子的预测概率[155]。</p>
<p>可解释性。诚然，基于嵌入的方法的一个缺点是缺乏可解释性。这个问题会损害与道德、安全或隐私相关的决策关键系统的应用。尽管嵌入模型，尤其是神经网络模型的可解释性尚未完全解决，但计算机科学领域的研究人员已经做出了一些努力，以提高基于神经模型的可解释性 [16]。因此，利用基于嵌入的模型和可解释性分析方法进行有效和（部分）可解释的预测将是一个有趣的方向。</p>
<br>
<h2 id="结论">结论</h2>
<p>计算社会科学作为一个新兴且有前途的跨学科领域，近年来吸引了相当多的研究兴趣。 计算社会科学 研究中广泛使用两种主要类型的数据，即文本数据和网络数据。在本次调查中，我们首先将数据表示总结为基于符号和基于嵌入的表示，并在构建这些表示时进一步介绍典型的方法。之后，我们基于来自 6 个经典期刊和会议的 400 多篇高被引文献，对这两类表示的应用进行了全面回顾。根据对这些应用的统计，发现了 计算社会科学 中基于嵌入的文本和网络表示正在出现和增长的趋势，我们进一步讨论了其中的原因。最后，我们提出了 计算社会科学 中的四个挑战和未解决的问题，它们是需要探索的基本和潜在方向。</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>中文词向量资源汇总 &amp; 使用方法</title>
      <link>https://textdata.cn/blog/embeddings_resource_usage_method/</link>
      <pubDate>Thu, 21 Apr 2022 15:40:10 +0600</pubDate>
      
      <guid>/blog/embeddings_resource_usage_method/</guid>
      <description>数十种中文词向量模型资源下载&amp;amp;使用方法。Dozens of Chinese word vector model resource downloads &amp;amp; usage methods</description>
      <content:encoded><![CDATA[<br>
<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/Embedding/Chinese-Word-Vectors">https://github.com/Embedding/Chinese-Word-Vectors</a></p>
<p>Chinese-Word-Vectors项目提供超过100种中文词向量，其中包括不同的表示方式（稠密SGNS和稀疏PPMI）、不同的上下文特征（词、N元组、字等等）、以及不同的训练语料。获取预训练词向量非常方便，下载后即可用于下游任务。</p>
<br>
<h2 id="参考文献">参考文献</h2>
<p>如果使用了本项目的词向量和CA8数据集请进行如下引用：</p>
<p>Shen Li, Zhe Zhao, Renfen Hu, Wensi Li, Tao Liu, Xiaoyong Du, <a href="http://aclweb.org/anthology/P18-2023"><em>Analogical Reasoning on Chinese Morphological and Semantic Relations</em></a>, ACL 2018.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">@InProceedings{P18-2023,
  author =  &#34;Li, Shen
    and Zhao, Zhe
    and Hu, Renfen
    and Li, Wensi
    and Liu, Tao
    and Du, Xiaoyong&#34;,
  title =   &#34;Analogical Reasoning on Chinese Morphological and Semantic Relations&#34;,
  booktitle =   &#34;Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers)&#34;,
  year =  &#34;2018&#34;,
  publisher =   &#34;Association for Computational Linguistics&#34;,
  pages =   &#34;138--143&#34;,
  location =  &#34;Melbourne, Australia&#34;,
  url =   &#34;http://aclweb.org/anthology/P18-2023&#34;
}
</code></pre></div><br>
<h3 id="不同领域">不同领域</h3>
<p>下列词向量基于不同的表示方式、不同的上下文特征以及不同领域的语料训练而成。</p>
<table align="center">
    <tr align="center">
        <td colspan="5"><b>Word2vec / Skip-Gram with Negative Sampling (SGNS)</b></td>
    </tr>
    <tr align="center">
        <td rowspan="2">语料</td>
        <td colspan="4">上下文特征</td>
    </tr>
    <tr  align="center">
      <td>词</td>
      <td>词 + N元组</td>
      <td>词 + 字</td>
      <td>词 + 字 + N元组</td>
    </tr>
    <tr  align="center">
      <td>Baidu Encyclopedia 百度百科</td>
      <td><a href="https://pan.baidu.com/s/1Rn7LtTH0n7SHyHPfjRHbkg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1XEmP_0FkQwOjipCjI2OPEw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1eeCS7uD3e_qVN8rPwmXhAw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1IiIbQGJ_AooTj5s8aZYcvA">300d</a> / PWD: 5555</td>
    </tr>
    <tr  align="center">
      <td>Wikipedia_zh 中文维基百科</td>
      <td><a href="https://pan.baidu.com/s/1AmXYWVgkxrG4GokevPtNgA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1ZKePwxwsDdzNrfkc6WKdGQ">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1ZBVVD4mUSUuXOxlZ3V71ZA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/19wQrclyynOnco3JBvnI5pA">300d</td>
    </tr>
    <tr  align="center">
      <td>People's Daily News 人民日报</td>
      <td><a href="https://pan.baidu.com/s/19sqMz-JAhhxh3o6ecvQxQw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1upPkA8KJnxTZBfjuNDtaeQ">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1BvKk2QjbtQMch7EISppW2A">300d</a></td>
      <td><a href="https://pan.baidu.com/s/19Vso_k79FZb5OZCWQPAnFQ">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Sogou News 搜狗新闻</td>
      <td><a href="https://pan.baidu.com/s/1tUghuTno5yOvOx4LXA9-wg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/13yVrXeGYkxdGW3P6juiQmA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1pUqyn7mnPcUmzxT64gGpSw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1svFOwFBKnnlsqrF1t99Lnw">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Financial News 金融新闻</td>
      <td><a href="https://pan.baidu.com/s/1EhtsbDa3ekzZPODWNLHcXA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1FcPHv7S4vUgnL7WeWf4_PA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/13CAxY5ffRFuOcHZu8VmArw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1sqvrUtGBAZ7YWEsGz41DRQ">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Zhihu_QA 知乎问答 </td>
      <td><a href="https://pan.baidu.com/s/1VGOs0RH7DXE5vRrtw6boQA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1OQ6fQLCgqT43WTwh5fh_lg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1_xogqF9kJT6tmQHSAYrYeg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1Fo27Lv_0nz8FXg-xbOz14Q">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Weibo 微博</td>
      <td><a href="https://pan.baidu.com/s/1zbuUJEEEpZRNHxZ7Gezzmw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/11PWBcvruXEDvKf2TiIXntg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/10bhJpaXMCUK02nHvRAttqA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1FHl_bQkYucvVk-j2KG4dxA">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Literature 文学作品</td>
      <td><a href="https://pan.baidu.com/s/1ciq8iXtcrHpu3ir_VhK0zg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1Oa4CkPd8o2xd6LEAaa4gmg">300d</a> / PWD: z5b4</td>
      <td><a href="https://pan.baidu.com/s/1IG8IxNp2s7vVklz-vyZR9A">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1SEOKrJYS14HpqIaQT462kA">300d</a> / PWD: yenb</td>
    </tr>
    <tr  align="center">
      <td>Complete Library in Four Sections<br />四库全书<sup>*</sup></td>
      <td><a href="https://pan.baidu.com/s/1vPSeUsSiWYXEWAuokLR0qQ">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1sS9E7sclvS_UZcBgHN7xLQ">300d</a></td>
      <td>NAN</td>
      <td>NAN</td>
    </tr>
    <tr  align="center">
      <td>Mixed-large 综合<br>Baidu Netdisk / Google Drive</td>
      <td>
        <a href="https://pan.baidu.com/s/1luy-GlTdqqvJ3j-A4FcIOw">300d</a><br>
        <a href="https://drive.google.com/open?id=1Zh9ZCEu8_eSQ-qkYVQufQDNKPC4mtEKR">300d</a>
      </td>
      <td>
        <a href="https://pan.baidu.com/s/1oJol-GaRMk4-8Ejpzxo6Gw">300d</a><br>
        <a href="https://drive.google.com/open?id=1WUU9LnoAjs--1E_WqcghLJ-Pp8bb38oS">300d</a>
      </td>
      <td>
        <a href="https://pan.baidu.com/s/1DjIGENlhRbsVyHW-caRePg">300d</a><br>
        <a href="https://drive.google.com/open?id=1aVAK0Z2E5DkdIH6-JHbiWSL5dbAcz6c3">300d</a>
      </td>
      <td>
        <a href="https://pan.baidu.com/s/14JP1gD7hcmsWdSpTvA3vKA">300d</a><br>
        <a href="https://drive.google.com/open?id=1kSAl4_AOg3_6ayU7KRM0Nk66uGdSZdnk">300d</a>
      </td>
    </tr>
</table>
<table align="center">
    <tr align="center">
        <td colspan="5"><b>Positive Pointwise Mutual Information (PPMI)</b></td>
    </tr>
    <tr align="center">
        <td rowspan="2">语料</td>
        <td colspan="4">上下文特征</td>
    </tr>
    <tr  align="center">
      <td>词</td>
      <td>词 + N元组</td>
      <td>词 + 字</td>
      <td>词 + 字 + N元组</td>
    </tr>
    <tr  align="center">
      <td>Baidu Encyclopedia 百度百科</td>
      <td><a href="https://pan.baidu.com/s/1_itcjrQawCwcURa7WZLPOA">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1cEZzN1S2senwWSyHOnL7YQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1KcfFdyO0-kE9S9CwzIisfw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1FXYM3CY161_4QMgiH8vasQ">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Wikipedia_zh 中文维基百科</td>
      <td><a href="https://pan.baidu.com/s/1MGXRrc54nITPzQ7sfEUjMA">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1mtxZna8UJ7xBIxhBFntumQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1dDImpAx41V73Byl2julOGA">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1bsBQHXFpxMHGBexYof1_rw">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>People's Daily News 人民日报</td>
      <td><a href="https://pan.baidu.com/s/1NLr1K7aapU2sYBvzbVny5g">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1LJl3Br0ccGDHP0XX2k3pVw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1GQQXGMn1AHh-BlifT0JD2g">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1Xm9Ec3O3rJ6ayrwVwonC7g">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Sogou News 搜狗新闻</td>
      <td><a href="https://pan.baidu.com/s/1ECA51CZLp9_JB_me7YZ9-Q">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1FO39ZYy1mStERf_b53Y_yQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1lLBFBk8nn3spFAvKY9IJ6A">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1f-dLQZlZo_-B5ZKcPIc6rw">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Financial News 金融新闻</td>
      <td><a href="https://pan.baidu.com/s/10wtgdmrTsTrjpSDvI0KzOw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1b6zjvhOIqTdACSSbriisVw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1w24vCfgqcoJvPxsB5VrRvw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1b9BPiDRhiEZ-6ybTcovrqQ">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Zhihu_QA 知乎问答 </td>
      <td><a href="https://pan.baidu.com/s/1VaUP3YJC0IZKTbJ-1_8HZg">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1g39PKwT0kSmpneKOgXR5YQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1d8Bsuak0fyXxQOVUiNr-2w">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1D5fteBX0Vy4czEqpxXjlrQ">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Weibo 微博</td>
      <td><a href="https://pan.baidu.com/s/15O2EbToOzjNSkzJwAOk_Ug">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/11Dqywn0hfMhysto7bZS1Dw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1wY-7mfV6nwDj_tru6W9h4Q">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1DMW-MgLApbQnWwDd-pT_qw">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Literature 文学作品</td>
      <td><a href="https://pan.baidu.com/s/1HTHhlr8zvzhTwed7dO0sDg">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1jAuGJBxKqgapt__urGsBOQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/173AJfCoAV0ZA8Z31tKBdTA">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1dFCxke_Su3lLsuwZr7co3A">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Complete Library in Four Sections<br />四库全书<sup>*</sup></td>
      <td><a href="https://pan.baidu.com/s/1NJ1Gc99oE0-GV0QxBqy-qw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1YGEgyXIbw0O4NtoM1ohjdA">Sparse</a></td>
      <td>NAN</td>
      <td>NAN</td>
    </tr>
    </tr>
    <tr  align="center">
      <td>Mixed-large 综合</td>
      <td>Sparse</td>
      <td>Sparse</td>
      <td>Sparse</td>
      <td>Sparse</td>
    </tr>
</table>
<p><sup>*</sup>由于古汉语中绝大部份词均为单字词，因此只需字向量。</p>
<br>
<h2 id="语料">语料</h2>
<p>项目花费了大量精力来收集了来自多个领域的语料。所有的文本数据均移除了html和xml标记，仅保留了纯文本。之后采用了<a href="https://github.com/hankcs/HanLP">HanLP(v_1.5.3)</a>对文本进行了分词。此外，我们将繁体中文用<a href="https://github.com/BYVoid/OpenCC">Open Chinese Convert (OpenCC)</a>转换为了简体中文。更详细的语料信息如下所示：</p>
<table align="center">
	<tr align="center">
		<td><b>语料</b></td>
		<td><b>大小</b></td>
		<td><b>词数量</b></td>
		<td><b>词汇量</b></td>
		<td><b>详情</b></td>
	</tr>
	<tr align="center">
		<td>Baidu Encyclopedia<br />百度百科</td>
		<td>4.1G</td>
		<td>745M</td>
		<td>5422K</td>
		<td>中文百科<br />https://baike.baidu.com/</td>
	</tr>
	<tr align="center">
		<td>Wikipedia_zh<br />中文维基百科</td>
		<td>1.3G</td>
		<td>223M</td>
		<td>2129K</td>
		<td>中文维基百科<br />https://dumps.wikimedia.org/</td>
	</tr>
	<tr align="center">
		<td>People's Daily News<br />人民日报</td>
		<td>3.9G</td>
		<td>668M</td>
		<td>1664K</td>
		<td>人民日报新闻数据(1946-2017)<br />http://data.people.com.cn/</td>
	</tr>
	<tr align="center">
		<td>Sogou News<br />搜狗新闻</td>
		<td>3.7G</td>
		<td>649M</td>
		<td>1226K</td>
		<td>Sogou labs的新闻数据<br />http://www.sogou.com/labs/</td>
	</tr>
  <tr align="center">
    <td>Financial News<br />金融新闻</td>
    <td>6.2G</td>
    <td>1055M</td>
    <td>2785K</td>
    <td>从多个网站收集到的金融新闻</td>
  </tr>
	<tr align="center">
		<td>Zhihu_QA<br />知乎问答</td>
		<td>2.1G</td>
		<td>384M</td>
		<td>1117K</td>
		<td>中文问答数据<br />https://www.zhihu.com/</td>
	</tr>
	<tr align="center">
		<td>Weibo<br />微博</td>
		<td>0.73G</td>
		<td>136M</td>
		<td>850K</td>
		<td>NLPIR Lab提供的微博数据<br />http://www.nlpir.org/wordpress/download/weibo.7z</td>
	</tr>
	<tr align="center">
		<td>Literature<br />文学作品</td>
		<td>0.93G</td>
		<td>177M</td>
		<td>702K</td>
		<td>8599篇现代文学作品</td>
	</tr>
	<tr align="center">
		<td>Mixed-large<br />综合</td>
		<td>22.6G</td>
    <td>4037M</td>
    <td>10653K</td>
		<td>上述所有数据的汇总</td>
	</tr>
  <tr align="center">
    <td>Complete Library in Four Sections<br />四库全书</td>
    <td>1.5G</td>
    <td>714M</td>
    <td>21.8K</td>
    <td>目前最大的古代文献汇总</td>
  </tr>
</table>
上述统计结果中，所有词都被计算在内，包括低频词。
<br>
<h2 id="导入模型代码">导入模型(代码)</h2>
<p>例如我下载了多个词模型，下载得到bz2结尾的文件名，例如<code>sgns.financial.bigram.bz2</code>。</p>
<p><img loading="lazy" src="models.png" alt=""  />
</p>
<p>使用方式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models.keyedvectors</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="c1">#以金融sgns.financial.bigram.bz2为例</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;embeddings/sgns.financial.bigram.bz2&#39;</span><span class="p">,</span> 
                                          <span class="n">binary</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> 
                                          <span class="n">unicode_errors</span><span class="o">=</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>


<span class="n">model</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;gensim.models.keyedvectors.KeyedVectors at 0x7fe7fad79d60&gt;
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;投资&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-0.084635,  0.890228, -0.23223 , -0.308985,  0.058241,  0.458777,
       -0.152547, -0.413471,  0.269701, -0.078043, -0.4155  ,  0.074735,
        0.35714 ,  0.103431,  0.601784, -0.390854,  0.814801, -0.122664,
       -1.076744,  0.516941, -0.293319, -0.310251, -0.407794,  0.003898,
       -0.210962,  0.378095, -0.345955, -0.223848,  0.700162,  0.207644,
        0.426249, -0.272832, -0.110305, -0.701062, -0.173407, -0.172121,
       -0.682592,  0.593414,  0.279591, -0.408284, -0.166693,  0.753402,
        0.037375,  0.141865, -0.246024, -0.108663, -0.225255, -0.856601,
        0.381026,  0.401248,  0.012108, -0.126305, -0.374255,  0.728795,
        0.219549, -0.354029, -0.353131,  0.064867,  0.49565 , -0.503267,
       -0.304075,  0.145036,  0.688948,  0.063382, -0.223243,  0.474251,
        0.80543 ,  0.683178,  0.118159,  0.408411, -0.020066,  0.009045,
       -0.135446, -0.069633,  0.206357,  0.482845, -0.075307,  0.06433 ,
       -0.112367,  0.011816,  0.87427 , -0.120287, -0.31036 ,  0.369985,
        0.560386, -0.215248,  0.389631,  0.042943, -0.319149,  0.951551,
       -0.335188,  0.642246, -0.55546 ,  0.322397,  0.659618, -0.213124,
        0.346696, -0.342239,  0.31479 ,  0.078533, -0.345148,  0.815577,
       -0.530134,  0.303419, -0.158916, -0.190564,  0.436046, -0.112251,
       -0.339966,  0.253645,  0.181076,  0.122875, -0.310951, -0.126253,
        1.641405,  0.357906,  0.165796,  0.398656, -0.330591,  0.20328 ,
       -0.077191, -0.421248, -0.078504, -0.734519,  0.146212,  0.535727,
        0.014134,  0.040322, -0.44809 , -0.758205, -0.151237,  0.248258,
       -0.319704,  0.656033, -0.518857,  0.932356, -1.01786 , -0.46354 ,
        0.160921, -0.243597,  0.106666, -0.03404 ,  0.010672,  0.260243,
        0.899813,  0.171735, -0.108209, -0.009843, -0.18113 ,  0.302494,
        0.187285,  0.064669, -0.502041, -0.724377, -0.294312, -0.522256,
        0.334543,  0.740455, -0.357653,  0.540747,  0.256146,  0.513839,
        1.116628, -0.626111,  0.505574,  0.089774, -0.381137, -0.282352,
       -0.457542,  0.198909,  0.313638,  0.560809,  0.25295 ,  0.878158,
       -0.289311, -0.629047,  0.011103,  0.041058, -0.291302, -0.014001,
       -0.027697, -0.445817, -0.070086,  0.159816, -0.120071,  1.280489,
       -0.108866,  0.01586 , -0.505574, -0.679772, -0.343165,  0.595633,
        0.438108, -0.364066, -0.393667,  0.442285,  0.24979 , -0.191607,
        0.425692,  0.535577, -0.480332, -0.737461,  0.588498, -0.380264,
        0.151292,  0.077519, -0.221384,  0.699436,  0.401642,  0.509026,
       -0.411141,  0.206719, -0.097051, -0.451834, -0.825617,  0.602984,
        0.2853  ,  0.46055 ,  0.96472 ,  0.322712, -0.373446,  0.207944,
        0.236688,  0.566523,  0.037644,  1.241091,  0.025682,  0.373211,
        0.097712, -0.195355,  0.264579, -0.072992, -0.121629,  0.041688,
        0.213666,  0.329652, -0.015182,  0.396307,  0.117955,  0.119577,
       -0.334761, -0.135917,  0.409983,  0.512367, -0.292204,  0.302897,
       -0.325733,  0.383173, -0.92419 , -0.377535, -0.059801, -0.606275,
       -0.240482,  0.054021, -0.581386, -0.555691,  0.158354,  0.103765,
        0.107681,  0.248877, -0.597925,  0.193332,  0.844085,  0.00584 ,
        0.041622, -0.111235,  0.617778,  0.234883, -0.09562 ,  0.408324,
       -0.107121,  0.717875,  0.674794,  0.127214, -0.178357,  0.331436,
        0.417898, -0.650833, -0.428309, -0.576132,  0.210533, -0.057879,
       -0.578397,  0.468586,  0.103365, -0.403216, -0.398776,  0.094514,
       -0.130387,  0.628187, -0.463082, -0.951649,  0.561544,  0.118903,
        0.448327, -0.171685, -0.672348,  0.069471,  0.556452, -0.335425],
      dtype=float32)
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">model.similar_by_key(&#39;投资&#39;)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;长期投资&#39;, 0.5135656595230103),
 (&#39;投资规模&#39;, 0.5089880228042603),
 (&#39;智百扬&#39;, 0.49565914273262024),
 (&#39;投资总额&#39;, 0.4955061078071594),
 (&#39;洛辉&#39;, 0.489188551902771),
 (&#39;337409&#39;, 0.48917514085769653),
 (&#39;洛盛&#39;, 0.4819018244743347),
 (&#39;洛腾&#39;, 0.4728960692882538),
 (&#39;394150&#39;, 0.4704836308956146),
 (&#39;投资额&#39;, 0.4685181975364685)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">similar_by_key</span><span class="p">(</span><span class="s1">&#39;风险&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;提示&#39;, 0.6549968123435974),
 (&#39;经营风险&#39;, 0.6316577792167664),
 (&#39;景气衰退&#39;, 0.544153094291687),
 (&#39;风险分析&#39;, 0.5439289212226868),
 (&#39;遇宏观&#39;, 0.5435716509819031),
 (&#39;信用风险&#39;, 0.5345730185508728),
 (&#39;承受能力&#39;, 0.5291797518730164),
 (&#39;防范&#39;, 0.5271924138069153),
 (&#39;系统性&#39;, 0.5178108811378479),
 (&#39;不确定性&#39;, 0.5173759460449219)]
</code></pre></div><p>向量运行效果还行，感兴趣的同学也可以根据自己的数据训练word2vec模型，训练及使用的办法参照文章</p>
<p><a href="https://textdata.cn/blog/douban_w2v/">豆瓣影评 | 探索词向量妙处</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>将年报数据汇总至xlsx文件中</title>
      <link>https://textdata.cn/blog/sh_market/</link>
      <pubDate>Thu, 21 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/sh_market/</guid>
      <description>分散在各处的pdf很难分析，如何将pdf汇总至excel。本文将pdf汇总与excel分析结合。</description>
      <content:encoded><![CDATA[<h2 id="整理到csv中">整理到csv中</h2>
<p>将70G定期报告披露数据集下载</p>
<p>链接: <a href="https://pan.baidu.com/s/1oboFUswiAMdA_Wn3xCh6YQ">https://pan.baidu.com/s/1oboFUswiAMdA_Wn3xCh6YQ</a> 提取码: g7bd</p>
<p><img loading="lazy" src="img/sh_marketing.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">pdfdocx</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">re</span>

<span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;\s&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>

<span class="c1">#文件夹列表</span>
<span class="n">dirs</span> <span class="o">=</span> <span class="p">[</span><span class="n">d</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;reports&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="s1">&#39;DS&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">d</span><span class="p">]</span>
<span class="k">for</span> <span class="n">di</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
    <span class="n">datas</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;reports/</span><span class="si">{d}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">d</span><span class="o">=</span><span class="n">di</span><span class="p">))</span> <span class="k">if</span> <span class="s1">&#39;z&#39;</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">file</span> <span class="o">=</span> <span class="s1">&#39;reports/</span><span class="si">{di}</span><span class="s1">/</span><span class="si">{f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">di</span><span class="o">=</span><span class="n">di</span><span class="p">,</span> <span class="n">f</span><span class="o">=</span><span class="n">file</span><span class="p">)</span>
            <span class="n">code</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">year</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;_(\d</span><span class="si">{4}</span><span class="s1">)_&#39;</span><span class="p">,</span> <span class="n">file</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">clean</span><span class="p">(</span><span class="n">pdfdocx</span><span class="o">.</span><span class="n">read_pdf</span><span class="p">(</span><span class="n">file</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;code&#39;</span><span class="p">:</span> <span class="n">code</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="n">text</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">:</span><span class="n">year</span><span class="p">}</span>
            <span class="n">datas</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">pass</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">datas</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">])</span>
    <span class="c1">#将每家公司的年报导出到csv中</span>
    <span class="n">df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s1">&#39;data.csv&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
    
    
<span class="c1">#读取</span>
<span class="n">ndf</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data.csv&#39;</span><span class="p">)</span>
<span class="c1">#去重</span>
<span class="n">ndf</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="c1">#清洗</span>
<span class="n">ndf</span> <span class="o">=</span> <span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="o">.</span><span class="n">code</span><span class="o">=!=</span><span class="s1">&#39;code&#39;</span><span class="p">]</span>
<span class="c1">#导出到xlsx</span>
<span class="n">ndf</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="s1">&#39;data.xlsx&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="导入数据">导入数据</h2>
<p>excel数据下载链接: <a href="https://pan.baidu.com/s/1r4YRyxb7bTsx-_ayT4GDKQ">https://pan.baidu.com/s/1r4YRyxb7bTsx-_ayT4GDKQ</a> 提取码: ew4v</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>code</th>
      <th>year</th>
      <th>text</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>603859</td>
      <td>2017</td>
      <td>2017年半年度报告1/116公司代码：603859公司简称：能科股份能科节能技术股份有限公...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>603859</td>
      <td>2019</td>
      <td>2019年半年度报告1/141公司代码：603859公司简称：能科股份能科科技股份有限公司2...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>603859</td>
      <td>2018</td>
      <td>2018年半年度报告1/120公司代码：603859公司简称：能科股份能科科技股份有限公司2...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>601500</td>
      <td>2017</td>
      <td>2017年半年度报告1/114公司代码：601500公司简称：通用股份江苏通用科技股份有限公...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>601500</td>
      <td>2019</td>
      <td>2019年半年度报告1/140公司代码：601500公司简称：通用股份江苏通用科技股份有限公...</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h3 id="查看数据量">查看数据量</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></div><pre><code>16984
</code></pre>
<br>
<h3 id="公司数">公司数</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">nunique</span><span class="p">()</span>
</code></pre></div><pre><code>1476
</code></pre>
<br>
<h3 id="含有的年份">含有的年份</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">sorted</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">year</span><span class="o">.</span><span class="n">unique</span><span class="p">())</span>
</code></pre></div><pre><code>[2002,
 2003,
 2004,
 2005,
 2006,
 2007,
 2008,
 2009,
 2010,
 2011,
 2012,
 2013,
 2014,
 2015,
 2016,
 2017,
 2018,
 2019]
</code></pre>
<br>
<h3 id="每家公司年报数">每家公司年报数</h3>
<p>数据集中，平均每家公司的年报数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">avg</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="o">/</span><span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">nunique</span><span class="p">()</span>
<span class="nb">round</span><span class="p">(</span><span class="n">avg</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div><pre><code>11.51
</code></pre>
<br>
<h2 id="说明">说明</h2>
<p>数据是19年获取的，数据不全，下载过程中有部分pdf是破损的文件。</p>
<p>大家可以尝试该数据集训练会计年报词向量，看看有没有有趣的应用。</p>
<p>本数据可作探索实验性质，如果想在会计领域深入挖掘，建议找更全更精准的数据集。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>豆瓣影评 | 探索词向量妙处</title>
      <link>https://textdata.cn/blog/douban_w2v/</link>
      <pubDate>Thu, 21 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/douban_w2v/</guid>
      <description>使用cntext训练、使用词向量。</description>
      <content:encoded><![CDATA[<p>本文要点</p>
<ul>
<li>读取csv</li>
<li>cntext训练词向量模型</li>
<li>cntext扩展pos、neg词典</li>
<li>导入词向量模型</li>
<li>运用词向量模型</li>
</ul>
<br>
<h2 id="代码下载">代码下载</h2>
<p>链接: <a href="https://pan.baidu.com/s/1BFUb7myg6svTUZJfnvZfAg">https://pan.baidu.com/s/1BFUb7myg6svTUZJfnvZfAg</a> 提取码: og9t</p>
<p><br><br></p>
<h2 id="一读取数据">一、读取数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;douban.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="df.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;电影  : </span><span class="si">{}</span><span class="s2"> 部&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Movie_Name_CN</span><span class="o">.</span><span class="n">nunique</span><span class="p">()))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;评论  : </span><span class="si">{}</span><span class="s2"> 条&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)))</span>
</code></pre></div><pre><code>电影  : 28 部
评论  : 2125056 条
</code></pre>
<br>
<h2 id="二训练模型">二、训练模型</h2>
<p>使用<a href="https://textdata.cn/blog/cntext_simplification/">cntext库</a>训练词向量word2vec模型,这里我把csv数据整理为txt</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext</span> <span class="kn">import</span> <span class="n">W2VModels</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#训练word2vec模型</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>  <span class="c1">#语料数据</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;douban.txt&#39;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...预处理    语料 ...
Step 2/4:...训练   word2vec模型
            耗时   2001 s
        
</code></pre></div><p>cntext可以用于扩展词典</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;pos.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;neg.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 3/4:...准备 每个seed在word2vec模型中的相似候选词...
Step 4/4 完成! 耗时 2302 s
Step 3/4:...准备 每个seed在word2vec模型中的相似候选词...
Step 4/4 完成! 耗时 2303 s
</code></pre></div><p>在代码所在文件夹内可以找到</p>
<ul>
<li>output/w2v_candi_words/w2v.model</li>
<li>新的  pos.txt</li>
<li>新的  neg.txt</li>
</ul>
<p>新的pos.txt是对pos.txt词典的扩展。</p>
<br>
<br>
<h2 id="三导入w2v模型">三、导入w2v模型</h2>
<p>有的时候数据量特别大，模型训练十分不易。</p>
<p>这时，保存已训练好的模型，不止下次不用再同样的数据再次训练，也可分享给其他人使用。</p>
<p>训练结束后，在代码所在文件夹内可以找到 <code>output/w2v_candi_words/w2v.model</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;output/w2v_candi_words/w2v.model&#39;</span><span class="p">)</span>
<span class="n">w2v_model</span>
</code></pre></div><pre><code>&lt;gensim.models.keyedvectors.KeyedVectors at 0x7face0574880&gt;
</code></pre>
<p>w2v_models数据类型为KeyedVectors， 在本文中使用w2v_models代指KeyedVectors</p>
<br>
<h2 id="四玩转词向量">四、玩转词向量</h2>
<p>用户级的数据(如在线评论)感觉生成的向量会准一些，<strong>词向量的方向，近义反义在向量中都有体现</strong>。</p>
<p><img loading="lazy" src="man-woman.png" alt=""  />
</p>
<p>例如本文使用的是28部电影的2125056条影评， 一般评论内容包含电影相关信息，如电影题材、是否值的观影等。</p>
<p>而在我们训练出模型w2v_models存在一些常用的方法</p>
<ul>
<li><strong>w2v_model.get_vector(key)</strong> 获取key的词向量</li>
<li><strong>w2v_model.most_similar_to_given(key1, keys_list)</strong>  从 keys_list 中获取与 key1 最相似的词</li>
<li><strong>w2v_model.n_similarity(ws1, ws2)</strong> 两组词ws1, ws2 的相似度</li>
<li><strong>w2v_model.closer_than(key1, key2)</strong> 更接近于key1的词向量(相比于key2)</li>
<li><strong>w2v_model.most_similar(positive, negative)</strong> 找出与positive同方向，与negative反向相反的词。</li>
</ul>
<h3 id="41-get_vectorkey">4.1 get_vector(key)</h3>
<p>w2v_model.get_vector(key) 获取key的词向量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#获取某词语的向量</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;给力&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>array([ 0.06488553,  0.74188954,  0.25468495,  0.89755714,  1.8139195 ,
       -0.6950082 ,  0.24339403, -1.2188634 ,  0.543618  , -0.9988698 ,
        0.27471313,  0.9325699 , -0.5860608 , -0.5081917 ,  1.6423215 ,
       -0.0490295 , -0.3927043 ,  0.659067  ,  0.03185922, -1.021391  ,
       -1.3214804 , -0.28208104, -0.7819419 , -0.30637202, -1.5944146 ,
       -0.12383854, -0.70463836,  0.45689437,  1.223081  , -1.9453759 ,
       -0.5538997 , -0.9750523 , -0.10031194, -0.9568689 ,  0.30341247,
        1.1102395 ,  0.667315  , -1.1600997 , -0.26674765, -0.55144155,
       -0.3246094 ,  0.82902473, -0.47339582, -0.9009957 ,  1.7722464 ,
        0.28959563, -0.03453476,  0.4786787 , -0.48074463, -0.23090109,
       -0.49390873,  0.71246386,  2.1557336 ,  2.4899387 , -0.51481706,
        0.5579966 , -0.6973235 , -1.1408254 ,  0.72495663, -1.0326954 ,
       -0.5455598 ,  0.98941576, -1.2155218 , -0.9088408 ,  1.9184568 ,
       -0.21800426, -1.2009395 ,  0.29684314,  1.3672423 , -2.269391  ,
        0.6188098 , -0.02714545, -0.44811317,  1.4397241 , -1.0594722 ,
       -0.08088647, -0.13015983, -0.99255013,  0.62044877,  2.5046496 ,
        0.4054545 , -0.38767585, -0.6956541 ,  0.22991426,  0.5928579 ,
       -0.12684819, -0.17408212,  0.25033692, -1.4419957 , -0.27390227,
        1.166638  , -0.00624323, -1.6046506 ,  2.1633575 , -0.395548  ,
       -1.1297956 , -3.1474566 ,  0.38729438, -2.0434535 , -1.5511289 ],
      dtype=float32)
</code></pre>
<br>
<h3 id="42-most_similar_to_givenkey1-keys_list">4.2 most_similar_to_given(key1, keys_list)</h3>
<p>从 keys_list 中获取与 key1 最相似的词。例如在212w影评中，从<code>'爱情', '悬疑', '飞船', '历史', '战争'</code>找出最接近<code>'太空'</code>，最后返回<code>'飞船'</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#从 `keys_list` 中获取与 `key1` 最相似的 `key`。</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">most_similar_to_given</span><span class="p">(</span><span class="n">key1</span><span class="o">=</span><span class="s1">&#39;太空&#39;</span><span class="p">,</span> 
                                <span class="n">keys_list</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;爱情&#39;</span><span class="p">,</span> <span class="s1">&#39;悬疑&#39;</span><span class="p">,</span> <span class="s1">&#39;飞船&#39;</span><span class="p">,</span> <span class="s1">&#39;历史&#39;</span><span class="p">,</span> <span class="s1">&#39;战争&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>'飞船'
</code></pre>
<br> 
<h3 id="43-w2v_modeln_similarityws1-ws2">4.3 w2v_model.n_similarity(ws1, ws2)</h3>
<p>两组词ws1, ws2 的相似度。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.metrics.pairwise</span> <span class="kn">import</span> <span class="n">cosine_similarity</span>

<span class="n">cosine_similarity</span><span class="p">([</span><span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;理想&#39;</span><span class="p">)],</span>  
                  <span class="p">[</span><span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;现实&#39;</span><span class="p">)])[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><pre><code>0.5371934
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#cosine算法</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">n_similarity</span><span class="p">([</span><span class="s1">&#39;理想&#39;</span><span class="p">],</span> 
                       <span class="p">[</span><span class="s1">&#39;现实&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>0.5371934
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#计算两组键之间的余弦相似度。</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">n_similarity</span><span class="p">([</span><span class="s1">&#39;给力&#39;</span><span class="p">,</span> <span class="s1">&#39;精彩&#39;</span><span class="p">,</span> <span class="s1">&#39;赞&#39;</span><span class="p">,</span> <span class="s1">&#39;推荐&#39;</span><span class="p">],</span> 
                       <span class="p">[</span><span class="s1">&#39;无聊&#39;</span><span class="p">,</span> <span class="s1">&#39;尴尬&#39;</span><span class="p">,</span> <span class="s1">&#39;垃圾&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>0.35008422
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v_model</span><span class="o">.</span><span class="n">n_similarity</span><span class="p">([</span><span class="s1">&#39;理想&#39;</span><span class="p">,</span> <span class="s1">&#39;梦想&#39;</span><span class="p">],</span> 
                       <span class="p">[</span><span class="s1">&#39;现实&#39;</span><span class="p">,</span> <span class="s1">&#39;生活&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>0.48020104
</code></pre>
<br>
<h3 id="44-w2v_modelcloser_thankey1-key2">4.4 w2v_model.closer_than(key1, key2)</h3>
<p>更接近于key1的词向量(相比于key2)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#获取所有更接近 `key1` 的键，而不是 `key2` 。</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">closer_than</span><span class="p">(</span><span class="n">key1</span><span class="o">=</span><span class="s1">&#39;理想&#39;</span><span class="p">,</span> 
                      <span class="n">key2</span><span class="o">=</span><span class="s1">&#39;现实&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>['梦想', '妥协', '追梦', '愿望', '骨感']
</code></pre>
<br>
<h3 id="45-w2v_modelmost_similarpositive-negative">4.5 w2v_model.most_similar(positive, negative)</h3>
<p>找出与positive同方向，与negative反向相反的词。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v_model</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="n">positive</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;给力&#39;</span><span class="p">,</span> <span class="s1">&#39;精彩&#39;</span><span class="p">,</span> <span class="s1">&#39;过瘾&#39;</span><span class="p">],</span>
                       <span class="n">negative</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;垃圾&#39;</span><span class="p">],</span>
                       <span class="n">topn</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><pre><code>[('激动人心', 0.6859163045883179),
 ('惊心动魄', 0.6767394542694092),
 ('带感', 0.6723690032958984),
 ('惊险刺激', 0.667783796787262),
 ('刺激', 0.6445038318634033),
 ('燃', 0.6429688930511475),
 ('爽快', 0.6287934184074402),
 ('带劲', 0.6254130005836487),
 ('爽', 0.624543309211731),
 ('酣畅淋漓', 0.6140543818473816)]
</code></pre>
<br>
<h3 id="46-类比king-manwomanqueen">4.6 类比king-man+woman~queen</h3>
<p><img loading="lazy" src="kingqueenformular.png" alt=""  />
</p>
<p>每个词是高维向量空间中的一个点， 两个点可以组成有方向的向量，而向量可以比较方向。</p>
<p>这里是推理过程，受限于数据，公式不一定完全成立， 但是思维可以类比。</p>
<p>这两个词相减，按感觉应该得到的是性别方向，雄性-&gt;雌性。</p>
<p>gender_direction_1 = vector(man)-vector(woman)</p>
<p>gender_direction_2 = vector(king)-vector(queen)</p>
<p>那两个性别方向应该近似，假设这里将其gender_direction_1=gender_direction_2，则对于公式中任意一个词，都可以由等式中的其他三个词经过运算得到。例如</p>
<p>vector(queen) =  vector(king)-vector(man)+vector(woman)</p>
<p>这里构造了一个情绪的公式，计算如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 开心 - 难过 ~=  享受 - d</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;开心&#39;</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;难过&#39;</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;享受&#39;</span><span class="p">)</span>

<span class="c1">#d = a-b+c</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">similar_by_vector</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="p">)</span>
</code></pre></div><pre><code>[('享受', 0.7833479046821594),
 ('开心', 0.6825607419013977),
 ('愉快', 0.6298696994781494),
 ('娱乐', 0.6215130090713501),
 ('感官', 0.6085000038146973),
 ('图个', 0.6052624583244324),
 ('图一乐', 0.6039161682128906),
 ('休闲', 0.60273677110672),
 ('视觉享受', 0.6006160378456116),
 ('轻松愉快', 0.5961319804191589)]
</code></pre>
<p>很遗憾，d没有运算出煎熬之类的词语，但好在都是形容词，而且是快乐居多的形容词，类别是对的，就是方向是反的。</p>
<br>
<h3 id="词向量总结">词向量总结</h3>
<p>需要注意的是经典的运算king-man+woman~queen来自glove模型，而不是本文使用的word2vec模型。两者相同点，glove与word2vec均为词嵌入embeddings技术。区别在于glove获取的词的全局语义空间，而word2vec一般是某个词前后n个词(例如前后5个词)范围内的语义。做概念四则运算，以后如可能，建议用glove。</p>
<p>此外，即时使用glove，尽量使用概念的词组均值向量。首先要训练数据要存在这些人类认知的线索。其次，认知概念往往不是由一个词决定的，可能需要相关的很多词。例如人类社会中的<code>雄雌(没有贬义，包含了男女在内的概念)</code>，</p>
<ul>
<li>雄性概念词有<code>他、男人、男孩、父亲、爷爷、爸爸、姥爷...</code></li>
<li>雌性概念词有<code>她、女人、女孩、母亲、奶奶、妈妈、姥姥...</code></li>
<li>国王概念词有<code>查理n世、乔治、路易...</code></li>
<li>女王概念词有<code>伊丽莎白n世、维多利亚女王、叶卡捷琳娜二世...</code></li>
</ul>
<p>或许改成概念向量四则运算，公式可能更容易成立。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐 | Python文本分析与会计(视频) </title>
      <link>https://textdata.cn/blog/accountingtext/</link>
      <pubDate>Sat, 16 Apr 2022 15:40:10 +0600</pubDate>
      
      <guid>/blog/accountingtext/</guid>
      <description>会计Python文本分析, 文本是如何产生，信息的发布者与接收者如何相互影响，分析师为了预测还是解释现象。为了开展研究，如何获取数据，如何测量文本中的态度、偏见、情感分析。。Accounting Python text analysis, how the text is generated, how the publisher and receiver of the information interact, and whether the analyst predicts or explains the phenomenon. How to get data, how to measure attitudes, biases, sentiment analysis in texts in order to conduct research. .</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1vA4y197YR&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h1 id="文本分析与会计">文本分析与会计</h1>
<h2 id="资料下载accountingtextzip"><a href="accountingtext.zip">资料下载</a></h2>
<ol>
<li>
<p>数据挖掘一般会遇到两个难题</p>
<ol>
<li>
<p>如何从网络中高效地 <strong>采集数据</strong>？</p>
<p>批量下载、汇总、清洗、整理</p>
</li>
<li>
<p>如何从文本数据中<strong>抽取文本信息(变量)</strong>？</p>
<p>情感、客观性、主观性、偏见</p>
</li>
</ol>
</li>
</ol>
<p><img loading="lazy" src="img/unstructrueddata.png" alt=""  />
</p>
<h2 id="目录">目录</h2>
<h3 id="1-认识python">1. 认识Python</h3>
<ul>
<li>学Python的n理由</li>
<li>Python是一门语言</li>
<li>数据类型与语法</li>
<li>如何写Python代码</li>
</ul>
<p>​</p>
<h3 id="2-text-as-data">2. Text as Data</h3>
<ul>
<li>
<p>角色-Producer/Receiver</p>
</li>
<li>
<p>机制-Reflects/Impacts</p>
</li>
<li>
<p>目的-Predict/Understanding</p>
</li>
<li>
<p>方法-定性vs定量</p>
</li>
<li>
<p>文本分析的常用指标</p>
</li>
</ul>
<h3 id="3-文本特征工程">3. 文本特征工程</h3>
<ul>
<li>词袋法(文档向量)</li>
<li>词向量</li>
<li>文档向量化</li>
<li>词向量</li>
</ul>
<h3 id="4-文本分析指标">4. 文本分析指标</h3>
<h3 id="5-文本分析应用案例会计">5. 文本分析应用案例(会计)</h3>
<p><br><br></p>
<h1 id="一认识python">一、认识Python</h1>
<p><img loading="lazy" src="img/whatcandowithpython.png" alt=""  />
</p>
<h2 id="11-学python的n理由">1.1 学Python的n理由</h2>
<ul>
<li>
<p><strong>简单</strong></p>
</li>
<li>
<p><strong>用户多</strong></p>
</li>
<li>
<p><strong>能做很多有意思的事</strong></p>
<ul>
<li>自动化办公
<ul>
<li>群发邮件</li>
<li>自动生成报表</li>
</ul>
</li>
<li>网络爬虫
<ul>
<li>在线秒杀</li>
<li>下载音频、视频pdf报告</li>
<li>明星的微博有新消息后邮箱提醒你</li>
</ul>
</li>
<li>数据分析</li>
<li>可视化</li>
<li>机器学习</li>
<li>物联网</li>
<li>制作网站</li>
</ul>
</li>
</ul>
<br>
<h2 id="12-python是一门语言">1.2 Python是一门语言</h2>
<p><img loading="lazy" src="img/simplecode.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">There is such a number a, if a is greater than or equal to 0, we will print a; if a is less than 0, we will print -a.
</code></pre></div><br>
<h2 id="13-数据类型与语法">1.3 数据类型与语法</h2>
<table>
<thead>
<tr>
<th style="text-align:left">英语</th>
<th style="text-align:left">Python</th>
<th style="text-align:left">例如</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>单词</strong></td>
<td style="text-align:left">数据类型</td>
<td style="text-align:left">数字、列表、字符串、字典等</td>
</tr>
<tr>
<td style="text-align:left"><strong>语法</strong></td>
<td style="text-align:left">逻辑语句</td>
<td style="text-align:left">if条件判断语句、for循环语句等</td>
</tr>
</tbody>
</table>
<br>
<table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">数字</td>
<td><code>age = 25</code></td>
</tr>
<tr>
<td style="text-align:left">字符串</td>
<td><code>intro = &quot;Hello, my name is ...&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">列表</td>
<td><code>my_list = [1, 2, 3]</code></td>
</tr>
<tr>
<td style="text-align:left">字典</td>
<td><code>ages = {'David': 25, 'Mark':30}</code></td>
</tr>
<tr>
<td style="text-align:left">空值</td>
<td><code>None</code></td>
</tr>
<tr>
<td style="text-align:left">布尔值</td>
<td><code>True, False</code></td>
</tr>
</tbody>
</table>
<br>
<h2 id="14-如何写python代码">1.4 如何写Python代码</h2>
<p>实现一定功能, 代码一般由三部分组成</p>
<ol>
<li>数据类型</li>
<li>逻辑语句</li>
<li>相应功能Python包(库)</li>
</ol>
<p><img loading="lazy" src="img/bebetter.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#数据类型</span>
<span class="n">ability</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">scale</span> <span class="o">=</span> <span class="mf">1.01</span>
<span class="n">records</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1">#逻辑语句</span>
<span class="n">days</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">365</span><span class="p">)</span>
<span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="n">days</span><span class="p">:</span>
    <span class="n">ability</span> <span class="o">=</span> <span class="n">ability</span><span class="o">*</span><span class="n">scale</span>
    <span class="n">records</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ability</span><span class="p">)</span>
    
<span class="c1">#相应的库  </span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">days</span><span class="p">,</span> <span class="n">records</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Day day Up in one field!&#39;</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h1 id="二text-as-data">二、Text as Data</h1>
<h2 id="heading"></h2>
<h2 id="21--producerreceiver">2.1  Producer/Receiver</h2>
<p>本节讨论的是涉及到文本的形形色色的角色</p>
<p><img loading="lazy" src="img/SenderReceiver.png" alt=""  />
</p>
<p>文本信息的==producer== 与 ==receiver==，涵盖 ==个人、公司(组织)、国家(社会)==三个层面。</p>
<p><img loading="lazy" src="img/consumer_org_society.png" alt=""  />
</p>
<p><img loading="lazy" src="img/%e7%94%9f%e4%ba%a7%e4%b8%8e%e6%b6%88%e8%b4%b9.png" alt=""  />
</p>
<br>
<h2 id="22-reflectsimpacts">2.2 Reflects/Impacts</h2>
<blockquote>
<p><strong>编码解码理论</strong></p>
<p>文化研究之父斯图亚特·霍尔（Stuart Hall）在《电视话语中的编码和解码》（<em>Encoding and decoding inthe television discourse</em>）一文中提出了“编码解码”理论。</p>
<ul>
<li><strong>编码（encoding）</strong>，信息传播者将所传递的讯息、意图或观点，转化为具有特定规则的代码。</li>
<li><strong>解码（decoding）</strong>，信息接受者，将上述代码按特定规则进行解读。</li>
</ul>
</blockquote>
<p>需要注意的是文本的 ==反映Reflects== 和==影响Impacts==并不是非此即彼，往往会同时起作用。</p>
<table>
<thead>
<tr>
<th>&mdash;</th>
<th>研究目的</th>
<th>自变量</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Reflects</strong></td>
<td>文本可以反映<strong>producer</strong>的一些特质，帮助研究者理解producer。<br>例如试图挖掘producer的个性personality或隶属于什么社会团体。</td>
<td>了解公司的品牌个性；<br>年报含有未来业绩表现的线索；<br>消费者们在品牌社区的言语能更深的投射出消费者对品牌的态度；<br>而更宏大的层面，文本也能反映出文化差异。<br>了解消费者是否喜欢新产品，消费者如何看待品牌，消费者最看重什么</td>
</tr>
<tr>
<td><strong>Affects</strong></td>
<td>知道文本如何影响<strong>receiver</strong>，receiver会有什么样的行为和选择。</td>
<td>检验文本是否以及如何导致消费者诸如购买、分享和卷入行为。<br>广告会塑造消费者的消费行为<br>消费者杂志会扭曲消费者产品分类感知<br>电影剧本会影响观众的反应</td>
</tr>
</tbody>
</table>
<br>
<h2 id="23-predictunderstanding">2.3 Predict/Understanding</h2>
<p>使用文本数据的目的是</p>
<table>
<thead>
<tr>
<th>&mdash;</th>
<th>Reflects</th>
<th>Affects</th>
<th>目的</th>
<th>应用</th>
<th>难点</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Predict</strong></td>
<td>预测 <strong>producer</strong>的状态、特性、性格等</td>
<td>预测 <strong>receiver</strong>阅读、分享和购买行为</td>
<td>相比搞清楚作用机制(因果关系)，更关心预测的准确性。</td>
<td>什么消费者最喜欢贷款;<br>什么电影会大火;<br>未来股市走向;<br></td>
<td>文本数据可以生成成千上万的特征(相当于变量x1，x2&hellip;xn)，而文本数据记录数甚至可能少于特征数。<br>为了解决这个为题，使用新的特征分类方法，减少特征数量，又有可能存在拟合问题。</td>
</tr>
<tr>
<td><strong>Understanding</strong></td>
<td>为什么当人们压抑的时候会使用特殊人称。</td>
<td>来理解为何带有情绪的文本会更容易被阅读和分享</td>
<td>理解为什么事情发生以及如何发生的<br/>这类研究往往会用到心理学、社会学的<strong>实证方法</strong>，旨在<strong>理解某个文本特征会导致什么后续结果，以及为什么产生这样的后果</strong>。</td>
<td>消费者怎样表达会如何影响口碑;<br>为何某些推文会被挑中分享？<br> 歌曲为何变火？<br> 品牌如何让消费者忠诚？</td>
<td>找出观测数据背后的因果关系。相应的，该领域的工作可能会强调实验数据，以允许对关键的独立变量进行操作。<br>另一个挑战是解释文本特征之间的关系。</td>
</tr>
</tbody>
</table>
<br>
<h2 id="24--定性定量">2.4  定性/定量</h2>
<p>经过刚刚定量技术的介绍，现在对定性与定量粗略做个对比。</p>
<table>
<thead>
<tr>
<th style="text-align:left">定性/量</th>
<th>分析方法</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>定性</strong>（text as text）</td>
<td>质性（扎根）</td>
<td>依靠研究者领域知识，可以对少量的数据做出深刻洞见。</td>
<td>难以应对大规模数据；<br>编码过程并不能保证唯一；</td>
</tr>
<tr>
<td style="text-align:left"><strong>定量</strong> textual data(text as data)</td>
<td>明显的文本特征，如词频、可阅读性</td>
<td>标准如一;<br>适合大规模文本挖掘；<br>纷繁复杂中涌现出潜在规律</td>
<td><strong>需要破坏文本的结构，丧失了部分信息量</strong></td>
</tr>
</tbody>
</table>
<br>
<h2 id="25-文本指标">2.5 文本指标</h2>
<p><strong>词典法，对某个词、某类词(词典)的统计个数多少</strong>，。特点容易理解，简单，实施性强。</p>
<ul>
<li><strong>数量</strong>； 如文本长度(e.g., Godes and Mayzlin 2004; Moe and Trusov2011)</li>
<li><strong>主观性</strong>； 情感得分，情感词词典(e.g., Godes and Silva 2012; Moe and Schweidel 2012; Ying, Feinberg and Wedel 2006)·</li>
<li><strong>客观性</strong>，如方差、信息墒(e.g., Godes and Mayzlin 2004).
<ul>
<li>A  <code>产品不错， 包装破损， 态度很好， 综合还是推荐大家购买!</code>  [5,1,5,4]</li>
<li>B<code>产品垃圾，使用垃圾， 包装破损， 差评!! </code>    [1,  1,  1,  1]</li>
<li>A的方差更大，信息量更客观公正。</li>
</ul>
</li>
<li><strong>实体词词频</strong>； 例如“电脑”商品的在线评论中“电脑”出现次数会远多于其他词。</li>
<li><strong>可读性</strong>；阅读难易程度，根据词典或词的字母数测量</li>
<li><strong>不确定性</strong>；经济政策不确定性词典</li>
<li><strong>偏见，态度</strong>；将每个词看做向量，对向量进行计算</li>
</ul>
<p><br><br></p>
<h1 id="三文本特征工程">三、文本特征工程</h1>
<h2 id="31-文档向量化">3.1 文档向量化</h2>
<h3 id="311-词袋法">3.1.1 词袋法</h3>
<p>以**词典法(语料中所有词均列入词典)**为基础，文档向量化</p>
<p><img loading="lazy" src="img/05-bagofwords.png" alt=""  />
</p>
<h3 id="312-one-hot">3.1.2 one-hot</h3>
<p>与词袋非常类似的算法还有one-hot</p>
<p><img loading="lazy" src="img/03-one-hot.png" alt=""  />
</p>
<h3 id="313-tf-idf">3.1.3 tf-idf</h3>
<p>不止考虑出现次数，还要考虑词语出现场景的可诊断性</p>
<p><img loading="lazy" src="img/tf.png" alt=""  />

<img loading="lazy" src="img/idf.png" alt=""  />

<img loading="lazy" src="img/tfidf.png" alt=""  />

<img loading="lazy" src="img/TFIDFExample.png" alt=""  />
</p>
<h2 id="32-词向量">3.2 词向量</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Docs</span> <span class="o">=</span><span class="p">[</span><span class="s2">&#34;Mom is a happy woman&#34;</span><span class="p">,</span>
       <span class="s2">&#34;Dad is happy.!&#34;</span><span class="p">]</span>
</code></pre></div><p>词典中带顺序<code>[Mom, is a happy woman dad]</code></p>
<table>
<thead>
<tr>
<th>技术</th>
<th>技术</th>
<th>维度类比</th>
<th>任务</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>字典法</strong>（词频）</td>
<td>数个数</td>
<td>原子</td>
<td>统计每句话里的名词个数</td>
<td>sent_num1 = 2<br>sent_num2 = 1</td>
</tr>
<tr>
<td><strong>词袋法</strong></td>
<td>bag of words<br>one-hot<br>Tf-idf</td>
<td>分子</td>
<td>转化为词向量, 计算两个句子相似度。</td>
<td>vec1 = [1, 1, 1, 1, 1, 0]<br>vec2 = [0, 1, 0, 1, 0, 1]<br>similarity = cosine(vec1, vec2)</td>
</tr>
<tr>
<td><strong>词嵌入</strong></td>
<td>word2vec、<br>glove等</td>
<td>中子、质子、电子</td>
<td>词语相似度。(语义上大小相近，方向相反)</td>
<td>mom = [0.2, 0.7, 0.1]<br/>dad   = [0.3, 0.5, -0.2]</td>
</tr>
</tbody>
</table>
<p>有意思的是，词嵌入Embeddings，尤其是glove，通过一定的向量化运算，可以挖掘出人类留下的认知信息，如态度、偏见等。词嵌入模型训练的方式不同，能做不同的计算。</p>
<p><img loading="lazy" src="img/word2vec.png" alt=""  />
</p>
<h3 id="321-按群体">3.2.1 按群体</h3>
<p>将数据按照producer划分，对每类producer的文本数据分别训练<strong>词嵌入模型</strong></p>
<p><img loading="lazy" src="img/musicSuccessGenderbias.png" alt=""  />
</p>
<p><img loading="lazy" src="img/americanClass.jpeg" alt=""  />
</p>
<h3 id="322-按时间">3.2.2 按时间</h3>
<p>将时间分为不同时间段，对每个时间段内的文本数据分别训练<strong>词嵌入模型</strong></p>
<p><img loading="lazy" src="img/DiachronicWordEmbeddings.png" alt=""  />
</p>
<p><br><br></p>
<h1 id="四技术对比">四、技术对比</h1>
<p><img loading="lazy" src="img/%e5%88%86%e6%9e%90%e6%96%b9%e6%b3%95.png" alt=""  />
</p>
<p>从左向右，自动化程度越来越高； 相对而言， 后期人工介入的越来越少。</p>
<table>
<thead>
<tr>
<th>技术</th>
<th>描述</th>
<th>优点</th>
<th>缺点</th>
<th>应用领域</th>
<th>Python包</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>主题分析</strong></td>
<td>人工编码</td>
<td>使用参与者自己的话语或者构念来挖掘数据，对少量文本理解的更深入</td>
<td>属于时间、劳动密集型任务，不适合大规模数据。<br>由于不同的编码人员有不同的经历和偏好，编码过程的标准不可靠</td>
<td>社会学、管理学</td>
<td></td>
</tr>
<tr>
<td><strong>字典法</strong></td>
<td>统计文本中词语的出现个数(占比)</td>
<td>允许对研究的数据进行定量分析，有标准，规格唯一</td>
<td>采用的词典应尽量与研究问题适应，词典适配性问题突出。情感分析，形容词词典。</td>
<td>管理学</td>
<td>jieba</td>
</tr>
<tr>
<td><strong>词袋法</strong></td>
<td>文本向量化</td>
<td>编码标准稳定简单，扩展性强</td>
<td>编码过程忽略词语的先后顺序；舍弃了一些信息量</td>
<td>管理学</td>
<td>jieba<br>scikit-learn</td>
</tr>
<tr>
<td><strong>监督学习</strong></td>
<td><strong>文本分类</strong></td>
<td>允许事先定义编码规则；逻辑简单</td>
<td>需要高质量的标注数据(工作量大)；特征词太多，训练的模型很容易过拟合。</td>
<td>计算机学、政治学、管理学</td>
<td>scikit-learn</td>
</tr>
<tr>
<td><strong>无监督学习</strong></td>
<td>主题建模<br>LDA话题模型</td>
<td>在没有人工标注的情况下，加速了数据的“标注”或“分类”</td>
<td>“标注”是机器按照数字特征进行的分组，需要研究者解读才可以赋予“标准“意义；训练过程需要大量的调参</td>
<td>计算机学、政治学、管留学</td>
<td>scikit-learn<br/></td>
</tr>
<tr>
<td><strong>自然语言处理</strong></td>
<td>考虑词语上下文语境顺序，word2vec、glove等</td>
<td>计算机自动化；可分析语义</td>
<td>大多数模型是人类无法解读的黑箱；<br>虽然代码编程量小，但训练代码耗时巨大</td>
<td>计算科学；市场营销；心理学</td>
<td>gensim<br>等</td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h1 id="五文本分析论文解读">五、文本分析论文解读</h1>
<h2 id="51-应用">5.1 应用</h2>
<table>
<thead>
<tr>
<th>论文</th>
<th>定性</th>
<th>词典</th>
<th>向量</th>
</tr>
</thead>
<tbody>
<tr>
<td>胡楠, 薛付婧 and 王昊楠, 2021. 管理者短视主义影响企业长期投资吗———基于文本分析和机器学习. <em>管理世界</em>, <em>37</em>(5), pp.139-156.</td>
<td></td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Cohen, L., Malloy, C. and Nguyen, Q., 2020. Lazy prices. <em>The Journal of Finance</em>, <em>75</em>(3), pp.1371-1415.</td>
<td></td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>王伟, 陈伟, 祝效国 and 王洪伟, 2016. 众筹融资成功率与语言风格的说服性&ndash;基于 Kickstarter 的实证研究. <em>管理世界</em>, (5), pp.81-98.</td>
<td>Y</td>
<td>Y</td>
<td></td>
</tr>
</tbody>
</table>
<br>
<p><img loading="lazy" src="img/%e7%9f%ad%e8%a7%86%e4%b8%bb%e4%b9%89.png" alt=""  />
</p>
<h2 id="52-分析步骤">5.2 分析步骤</h2>
<table>
<thead>
<tr>
<th>步骤</th>
<th>任务</th>
<th>Python</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 研究问题</td>
<td><strong>Produce/Receive</strong> 、 <strong>Reflects/Impact</strong><br><strong>管理层短视特质x -&gt; 企业资本支出和研发支出y</strong></td>
<td></td>
</tr>
<tr>
<td>2. 数据收集</td>
<td>巨潮资讯网； <br>所有 A 股；<br>2007~2018 年年度财务报告文件</td>
<td>Python网络爬虫</td>
</tr>
<tr>
<td>3. 设计构念</td>
<td>短视主义词有哪些<br>训练word2vec模型，找到”尽快“近义词，<br>如、”尽早“、”抓紧“、”力争“、”加紧“</td>
<td>word2vec</td>
</tr>
<tr>
<td>4. 测量构念</td>
<td>统计不同年报中MD&amp;A中的短视主义词出现占比</td>
<td>词典法</td>
</tr>
<tr>
<td>5. 计量建模</td>
<td>计算 x 与y之间的关系</td>
<td></td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h2 id="相关文献">相关文献</h2>
<p>冉雅璇,李志强,刘佳妮,张逸石.<strong>大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用</strong>.南开管理评论1-27</p>
<p>沈艳, 陈赟, &amp; 黄卓. (2019). <strong>文本大数据分析在经济学和金融学中的应用: 一个文献综述</strong>. <em>经济学 (季刊)</em>, <em>18</em>(4), 1153-1186.</p>
<p>Berger, J., Humphreys, A., Ludwig, S., Moe, W.W., Netzer, O. and Schweidel, D.A., 2020. <strong>Uniting the tribes: Using text for marketing insight</strong>. <em>Journal of Marketing</em>, <em>84</em>(1), pp.1-25.</p>
<p>Kenneth Benoit. July 16, 2019. “Text as Data: An Overview” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. <em>Handbook of Research Methods in Political Science and International Relations</em>. Thousand Oaks: Sage.</p>
<p>Anand, V., Bochkay, K., Chychyla, R. and Leone, A.J., 2020. <strong>Using Python for text analysis in accounting research</strong>. <em>Vic Anand, Khrystyna Bochkay, Roman Chychyla and Andrew Leone (2020),&quot; Using Python for Text Analysis in Accounting Research&quot;, Foundations and Trends® in Accounting</em>, <em>14</em>(3-4), pp.128-359.</p>
<p>Cohen, L., Malloy, C. and Nguyen, Q., 2020. <strong>Lazy prices</strong>. <em>The Journal of Finance</em>, <em>75</em>(3), pp.1371-1415.</p>
<p>胡楠, 薛付婧 and 王昊楠, 2021. 管理者短视主义影响企业长期投资吗———基于文本分析和机器学习. <em>管理世界</em>, <em>37</em>(5), pp.139-156.</p>
<p>王伟, 陈伟, 祝效国 and 王洪伟, 2016. 众筹融资成功率与语言风格的说服性&ndash;基于 Kickstarter 的实证研究. <em>管理世界</em>, (5), pp.81-98.</p>
<p>Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. “A review of best practice recommendations for text analysis in R (and a user-friendly app).” <em>Journal of Business and Psychology</em> 33, no. 4 (2018): 445-459.</p>
<p>Cohen, L., Malloy, C. and Nguyen, Q., 2020. Lazy prices. <em>The Journal of Finance</em>, <em>75</em>(3), pp.1371-1415.</p>
<p>徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>计算文本的语言具体性 | 以JCR2021论文为例</title>
      <link>https://textdata.cn/blog/jcr_concreteness_computation/</link>
      <pubDate>Thu, 07 Apr 2022 18:43:10 +0600</pubDate>
      
      <guid>/blog/jcr_concreteness_computation/</guid>
      <description>语言具体性描述了一个词在多大程度上是指一个实际的、有形的或“真实的”实体，以一种更具体、更熟悉、更容易被眼睛或心灵感知的方式描述对象和行为（即，可想象或生动；Brysbaert, Warriner, and Kuperman 2014; Semin and Fiedler 1988). 我找了三篇论文，简单分享一下。</description>
      <content:encoded><![CDATA[<p>前不久分享了一篇JCR2018的综述 <a href="https://textdata.cn/blog/automatetextanalysisinmarket/">营销研究中文本分析应用概述(含案例及代码) </a></p>
<p>最近看到一篇JCR2021的实证 <strong>语言具体性如何影响消费者态度</strong> ，研究者从一个现象, 即消费者可以通过感知店员的表达具体(例如，更多的名词而非代词)，判断店员是否用心倾听自己的需求。这有点像三十年前， 在服务态度不好的百货商场，店员往往爱答不理。</p>
<p><img loading="lazy" src="img/Concreteness_JCR_computation.png" alt=""  />
</p>
<p>大邓作为消费者，相比1、2、3三种表达方式，我会更喜欢会觉得4、5、6句子中使用**较多细节、具体词的店员。**而简短表达，代词过多，表明店员连嘴都懒得张口服务我，似乎对我们的切身需求关注不足，态度好不端正的感觉。文中对店员言语具体性表达给出了建议及原因，例子如下图。</p>
<p><img loading="lazy" src="img/Concreteness_JCR_Explaination.png" alt=""  />
</p>
<ul>
<li><a href="https://textdata.cn/blog/2022-05-workshop/">结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘|2022五一工作坊</a></li>
<li>想随时随地系统学习Python文本分析，可以选择
<ul>
<li><a href="https://textdata.cn/blog/management_python_course/"><strong>Python网络爬虫与文本分析 | 2021录播课(虽是录播，但章节更多一些)</strong></a>。</li>
</ul>
</li>
<li>更喜欢有互动感通过直播学习，可以考虑
<ul>
<li><a href="https://textdata.cn/blog/2022-05-workshop/7-Python.html"><strong>Python网络爬虫与文本分析 | 2022五一直播</strong></a></li>
</ul>
</li>
</ul>
<p>我找了三篇文本具体性的论文，<strong>文章结尾附有具体性的Python案例代码</strong>，希望能对大家有帮助。</p>
<h2 id="语言具体性">语言具体性</h2>
<p><strong>语言具体性Concreteness</strong>描述了一个词在多大程度上是指一个实际的、有形的或“真实的”实体，以一种更具体、更熟悉、更容易被眼睛或心灵感知的方式描述对象和行为（即，可想象或生动；Brysbaert, Warriner, and Kuperman 2014; Semin and Fiedler 1988). 我找了三篇文本具体性的论文，文章结尾附有具体性的Python案例代码，希望能对大家有帮助。</p>
<br>
<h2 id="具体性词典">具体性词典</h2>
<p>Brysbaert, Warriner, A. B., &amp; Kuperman, V. (2014) 找4000人，网络众包标注，开发了英文40000词的<strong>具体性词典</strong>。下图是对应的词典excel文件，字段Conc.M就是对应词语的具体性得分。</p>
<blockquote>
<p>中文具体性词典目前可以考虑用这个资源，含1600中文词词典，指标包括具体性、可成象性。</p>
<p>Wang, Ruiming, Shuting Huang, Yacong Zhou, and Zhenguang G. Cai. &ldquo;Chinese character handwriting: A large-scale behavioral study and a database.&rdquo; Behavior Research Methods 52 (2020): 82-96.</p>
</blockquote>
<p><img loading="lazy" src="img/Concreteness_Wordlist.png" alt=""  />
</p>
<br>
<h2 id="心理距离与语言具体性">心理距离与语言具体性</h2>
<p>Snefjella, Bryor, and Victor Kuperman(2015)挖掘了<strong>心理距离</strong>与<strong>语言具体性</strong>之间的<strong>数学关系</strong>， 第一次将心理距离看做连续性变量进行度量(而之前的研究几乎只把心理距离设置为高、低二分类变量)，计算过程使用了Brysbaert2014的语言具体性词典度量。</p>
<p>实验结果与我们认知相吻合，基本上心理距离越大， 具体性得分越小；反之，也成立。下面我列出在地理、时间、社会三个维度的量化可视化结果。</p>
<h3 id="地理维度">地理维度</h3>
<p><img loading="lazy" src="img/Concreteness_psychological_distance1.png" alt=""  />
</p>
<h3 id="时间维度">时间维度</h3>
<p><img loading="lazy" src="img/Concreteness_psychological_distance2.png" alt=""  />
</p>
<h3 id="社会维度">社会维度</h3>
<p><img loading="lazy" src="img/Social-Distance-Groups.png" alt=""  />
</p>
<p><img loading="lazy" src="img/Concreteness_psychological_distance3.png" alt=""  />
</p>
<br>
<h2 id="代码实现-以jcr为例">代码实现-以JCR为例</h2>
<p><img loading="lazy" src="img/Concreteness_JCR.png" alt=""  />
</p>
<p>消费者经常对客户服务感到沮丧。 但是语言的简单转变是否有助于提高客户满意度？ 我们认为，<strong>语言具体性linguistic concreteness</strong>——员工在与客户交谈时使用的词语的<strong>有形性tangibility、具体性speciﬁcity或可想象性imaginability</strong>——可以塑造消费者的态度和行为。 五项研究，包括对两个不同领域环境中超过 1,000 次真实消费者-员工互动的文本分析，表明当员工与他们具体交谈时，客户会更满意、更愿意购买和购买。 这是因为客户推断使用更具体语言的员工正在倾听（即关注并理解他们的需求)。 这些发现加深了对语言如何塑造消费者行为的理解，揭示了具体性影响人们感知的心理机制，并为管理者帮助提高客户满意度提供了一种直接的方法。</p>
<p>假设我们作为消费者，看到员工对同一个意思使用如下不同表达，</p>
<p><img loading="lazy" src="img/jcr_attitude.png" alt=""  />
</p>
<p>相比4、5、6这三种表达方式，会觉得句子中使用**较多代词的店员懒得说话(态度不端正)。**而使用较多名词和形容词，会表明店员关注我们的切身需求。这篇JCR就是从这个角度切入的研究。</p>
<br>
<p>JCR文中具体性计算说明</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">We computed a concreteness score for each conversational turn (averaging across all words in that turn) and for each conversational participant (averaging across all words over all their turns). Results were the same whether or not stop words commonly excluded from linguistics analyses (e.g., but, and) were included. We report results excluding stop words.
</code></pre></div><p>按照我的理解， 设计如下算法</p>
<ol>
<li>对文本(会话)使用nltk分词，得到词语列表</li>
<li>在具体性词典中查询对应的具体性得分</li>
<li>得到文本的具体性得分(句子所有词的具体性得分加总除以词数)</li>
</ol>
<h3 id="方法一">方法一</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">nltk.tokenize</span> <span class="kn">import</span> <span class="n">word_tokenize</span>

<span class="c1">#JCR文中使用的Paetzold2016的词典</span>
<span class="c1"># Paetzold2016文中的词典下载链接失效。这里使用Brysbaert2014的词典</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s2">&#34;Concreteness_ratings_Brysbaert_et_al_BRM.xlsx&#34;</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">nltk.tokenize</span> <span class="kn">import</span> <span class="n">word_tokenize</span>

<span class="k">def</span> <span class="nf">query_concreteness</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    查询word的具体性得分
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;Word&#34;</span><span class="p">]</span><span class="o">==</span><span class="n">word</span><span class="p">][</span><span class="s1">&#39;Conc.M&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    
 

<span class="k">def</span> <span class="nf">concreteness_score</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    计算文本的具体性得分
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
    
    <span class="k">try</span><span class="p">:</span>
        <span class="n">words</span> <span class="o">=</span> <span class="n">word_tokenize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;你的电脑nltk没配置好，请观看视频https://www.bilibili.com/video/BV14A411i7DB&#39;</span><span class="p">)</span>
        <span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
        
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">score</span> <span class="o">+=</span> <span class="n">query_concreteness</span><span class="p">(</span><span class="n">word</span><span class="o">=</span><span class="n">word</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">score</span> <span class="o">+=</span> <span class="mi">0</span>
            
    <span class="k">return</span> <span class="n">score</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
    
  
<span class="c1"># 案例</span>
<span class="n">employee_replys</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I&#39;ll go look for that&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that top&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that t-shirt&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go look for that t-shirt in grey&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that t-shirt in grey&#34;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">reply</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">employee_replys</span><span class="p">):</span>
    <span class="n">score</span><span class="o">=</span><span class="n">concreteness_score</span><span class="p">(</span><span class="n">reply</span><span class="p">)</span>
    <span class="n">template</span> <span class="o">=</span> <span class="s2">&#34;Concreteness Score: </span><span class="si">{score:.2f}</span><span class="s2"> | Example-</span><span class="si">{idx}</span><span class="s2">: </span><span class="si">{exmaple}</span><span class="s2">&#34;</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">template</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">score</span><span class="o">=</span><span class="n">score</span><span class="p">,</span> 
                          <span class="n">idx</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> 
                          <span class="n">exmaple</span><span class="o">=</span><span class="n">reply</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Concreteness Score: 1.55 | Example-0: I&#39;ll go look for that
Concreteness Score: 1.55 | Example-1: I&#39;ll go search for that
Concreteness Score: 1.89 | Example-2: I&#39;ll go search for that top
Concreteness Score: 2.04 | Example-3: I&#39;ll go search for that t-shirt
Concreteness Score: 2.37 | Example-4: I&#39;ll go look for that t-shirt in grey
Concreteness Score: 2.37 | Example-5: I&#39;ll go search for that t-shirt in grey
</code></pre></div><p>员工的表达越具体，具体性得分越高。</p>
<p>跟JCR中的得分不一样，但是案例的得分趋势是一致的。基本上从上至下，每个员工回复对应的具体性得分越来越高。</p>
<p><img loading="lazy" src="img/Concreteness_JCR_computation.png" alt=""  />
</p>
<br>
<h3 id="方法二">方法二</h3>
<p>cntext内置了效价情感分析函数和Concreteness词典，因此本任务实际上可以用cntext完成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext==1.7.7
</code></pre></div><p>代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># load the concreteness.pkl dictionary file</span>
<span class="n">concreteness_df</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;Concreteness.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;Concreteness&#39;</span><span class="p">]</span>
<span class="n">concreteness_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">word</th>
<th style="text-align:right">valence</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">roadsweeper</td>
<td style="text-align:right">4.85</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">traindriver</td>
<td style="text-align:right">4.54</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">tush</td>
<td style="text-align:right">4.45</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">hairdress</td>
<td style="text-align:right">3.93</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">pharmaceutics</td>
<td style="text-align:right">3.77</td>
</tr>
</tbody>
</table>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">reply</span> <span class="o">=</span> <span class="s2">&#34;I&#39;ll go look for that&#34;</span>

<span class="n">score</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">reply</span><span class="p">,</span> 
                              <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> 
                              <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
<span class="n">score</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1.85
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">employee_replys</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I&#39;ll go look for that&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that top&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that t-shirt&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go look for that t-shirt in grey&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that t-shirt in grey&#34;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">reply</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">employee_replys</span><span class="p">):</span>
    <span class="n">score</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">reply</span><span class="p">,</span> 
                                  <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> 
                                  <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
    
    <span class="n">template</span> <span class="o">=</span> <span class="s2">&#34;Concreteness Score: </span><span class="si">{score:.2f}</span><span class="s2"> | Example-</span><span class="si">{idx}</span><span class="s2">: </span><span class="si">{exmaple}</span><span class="s2">&#34;</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">template</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">score</span><span class="o">=</span><span class="n">score</span><span class="p">,</span> 
                          <span class="n">idx</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> 
                          <span class="n">exmaple</span><span class="o">=</span><span class="n">reply</span><span class="p">))</span>
    
<span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Concreteness Score: 1.55 | Example-0: I&#39;ll go look for that
Concreteness Score: 1.55 | Example-1: I&#39;ll go search for that
Concreteness Score: 1.89 | Example-2: I&#39;ll go search for that top
Concreteness Score: 2.04 | Example-3: I&#39;ll go search for that t-shirt
Concreteness Score: 2.37 | Example-4: I&#39;ll go look for that t-shirt in grey
Concreteness Score: 2.37 | Example-5: I&#39;ll go search for that t-shirt in grey
</code></pre></div><p><br><br></p>
<h2 id="代码获取">代码获取</h2>
<p><font color=blue><a href="JCR_Concreteness_Computation.zip">点击下载本文代码</a></font></p>
<ul>
<li>
<p><a href="https://textdata.cn/blog/2022-05-workshop/">结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘|2022五一工作坊</a></p>
</li>
<li>
<p>想随时随地系统学习Python文本分析，可以选择</p>
<ul>
<li><a href="https://textdata.cn/blog/management_python_course/"><strong>Python网络爬虫与文本分析 | 2021录播课(虽是录播，但章节更多一些)</strong></a>。</li>
</ul>
</li>
<li>
<p>更喜欢有互动感通过直播学习，可以考虑</p>
<ul>
<li><a href="https://textdata.cn/blog/2022-05-workshop/7-Python.html"><strong>Python网络爬虫与文本分析 | 2022五一直播</strong></a></li>
</ul>
</li>
</ul>
<br>
<h2 id="相关文献">相关文献</h2>
<p>Brysbaert, M., Warriner, A. B., &amp; Kuperman, V. (2014). Concreteness ratings for 40 thousand generally known English word lemmas. Behavior Research Methods, 46, 904–911</p>
<p>Snefjella, Bryor, and Victor Kuperman. &ldquo;Concreteness and psychological distance in natural language use.&rdquo; <em>Psychological science</em> 26, no. 9 (2015): 1449-1460.</p>
<p>Paetzold, G. H., and L. Specia (2016), “Inferring Psycholinguistic Properties of Words,” in Proceedings of the North American Association for Computational Linguistics-Human Language Technologies 2016, 435–40.</p>
<p>Packard, Grant, and Jonah Berger. &ldquo;How concrete language shapes customer satisfaction.&rdquo; <em>Journal of Consumer Research</em> 47, no. 5 (2021): 787-806.</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>转载|大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用</title>
      <link>https://textdata.cn/blog/2022-04-07-word-embeddings-in-social-science/</link>
      <pubDate>Thu, 07 Apr 2022 18:43:10 +0600</pubDate>
      
      <guid>/blog/2022-04-07-word-embeddings-in-social-science/</guid>
      <description>在大数据时代的背景下，基于大数据的分析处理技术为以“数据驱动”的社会科学研究创造了新的发 展契机。其中，词嵌入(Word Embeddings)技术借势大数据浪潮，以其高效的词表征能力和强大的迁移学习 能力在文本分析领域受到越来越多的关注。不同于传统的文本分析路径，词嵌入技术不仅实现了对非结构 化文本数据的表征，还保留了丰富的语义信息，可以实现对跨时间、跨文化文本中深层次文化信息的挖掘， 极大丰富了传统的社会科学实证的研究方法。文章总结了词嵌入技术的基本原理及特点，系统地梳理了词 嵌入技术的六大应用主题：社会偏见、概念联想、语义演变、组织关系、文本情感和个体决策机制。随后， 文章归纳了词嵌入技术的基本应用流程。词嵌入技术还面临文本数据的选择、中文文本的分词处理、单词 语义信息的表征层次三种挑战，文章归纳了相应的应对思路与方法。最后，基于词嵌入技术的强大适应能 力，未来研究可以进一步关注该技术在管理领域的应用前景，包括政策效应评估、用户推荐系统、品牌管 理、企业关系管理、组织内部管理、中国传统智慧与管理问题六个方面。In the context of the era of big data, the analysis and processing technology based on big data has created new development opportunities for data-driven social science research. Among them, word embedding (Word Embeddings) technology takes advantage of the wave of big data, and has received more and more attention in the field of text analysis with its efficient word representation ability and powerful transfer learning ability. Different from the traditional text analysis path, the word embedding technology not only realizes the representation of unstructured text data, but also retains rich semantic information, which can realize the mining of deep cultural information in cross-time and cross-cultural texts, which greatly It enriches the traditional social science empirical research methods. This article summarizes the basic principles and characteristics of word embedding technology, and systematically sorts out six application themes of word embedding technology: social bias, concept association, semantic evolution, organizational relationship, text emotion, and individual decision-making mechanism. Subsequently, the article summarizes the basic application process of word embedding technology. Word embedding technology also faces three challenges: the selection of text data, the word segmentation processing of Chinese text, and the representation level of word semantic information. The article summarizes the corresponding countermeasures and methods. Finally, based on the strong adaptability of word embedding technology, future research can further focus on the application prospects of this technology in the field of management, including policy effect evaluation, user recommendation system, brand management, enterprise relationship management, organization internal management, traditional Chinese wisdom and management There are six aspects to the problem.</description>
      <content:encoded><![CDATA[<p>词嵌入技术是文本分析中技术含量较高，可从文本中测量出人类认知信息。而即时是有一定学习能力的人，当阅读大量文本很难察觉文中是否有内置(预置)的信息，如作者的偏见、态度、刻板印象，等人类复杂认知。词嵌入技术可以将这类难以察觉的线索挖掘、测量。</p>
<br>
<br>
<h2 id="文献">文献</h2>
<p>本文全文摘自</p>
<p>冉雅璇,李志强,刘佳妮,张逸石.大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用[J/OL].南开管理评论:1-27[2022-04-08].http://kns.cnki.net/kcms/detail/12.1288.F.20210905.1337.002.html</p>
<br>
<h3 id="摘要">摘要</h3>
<p>在大数据时代的背景下，基于大数据的分析处理技术为以“数据驱动”的社会科学研究创造了新的发 展契机。其中，词嵌入(Word Embeddings)技术借势大数据浪潮，以其高效的词表征能力和强大的迁移学习能力在文本分析领域受到越来越多的关注。不同于传统的文本分析路径，词嵌入技术不仅实现了对非结构化文本数据的表征，还保留了丰富的语义信息，可以实现对跨时间、跨文化文本中深层次文化信息的挖掘， 极大丰富了传统的社会科学实证的研究方法。文章总结了词嵌入技术的基本原理及特点，系统地梳理了词 嵌入技术的六大应用主题：社会偏见、概念联想、语义演变、组织关系、文本情感和个体决策机制。随后， 文章归纳了词嵌入技术的基本应用流程。词嵌入技术还面临文本数据的选择、中文文本的分词处理、单词 语义信息的表征层次三种挑战，文章归纳了相应的应对思路与方法。最后，基于词嵌入技术的强大适应能 力，未来研究可以进一步关注该技术在管理领域的应用前景，包括政策效应评估、用户推荐系统、品牌管 理、企业关系管理、组织内部管理、中国传统智慧与管理问题六个方面。</p>
<br>
<p><strong>关键词</strong>: 词嵌入；自然语言处理；文本分析；社会科学；管理领域应用</p>
<p><br><br></p>
<h2 id="引言">引言</h2>
<p>作为人类开展文化交流和情感沟通的基本载体，语言承担了重要的信息交换功能。借助 于各类语言表达形式，人们将诸如知觉、思维、态度和情感等复杂的心理活动转化成特定的 语言。 而作为语言的典型载体之一，文本既能够在个体层面上反映人们的内心活动，也能 够在组织和社会层面上反映集体文化。 因此，从文本内容挖掘个体深层次的心理活动和 人类社会的文化沿革是社会科学的基本研究路径。</p>
<p>长期以来，<strong>在社会科学尤其是管理学和心理学等领域，实证研究多以针对实验、问卷和结构化的二手数据的量化分析为主导，而对于非结构化的文本材料(如访谈记录)仍以质性分析为主</strong>。[5] 在大数据时代，“数据+行为+交叉学科”已成为社会科学发展的必然方向。而<strong>计算社会科学</strong>的兴起则为我们理解人类行为、探讨社会现象提供了新的研究素材、视角和手段[6] 。随着互联网技术的飞速发展，人们在网络上发表<strong>大量包含思维、情感、观点的文本信息，这些井喷式爆发的文本为“以数据驱动”的社会科学研究提供了可及的信息来源</strong>。若能对之加以利用，无疑将拓宽社会科学研究的方法。[7 - 9] 然而，社会科学领域的<strong>传统文本研究方法以人工编码为主，其时间投入过大、成本较高、客观性相对较弱等不足极大地限制了文本数据 [10] 在实证研究中的应用</strong>。 所幸的是，以自然语言处理(Natural Language Processing; NLP)为核心的计算机文本分析技术(Computerized Text Analysis)的发展为大数据文本在社会科学领域 中的应用带来了契机。 “词”作为文本的最小单元，是计算机进行文本分析的基础。在自然语言处理领域，“词” 主要以向量(vector)的形式表示。而<strong>词嵌入(Word Embeddings)技术，即是一种可以把高维词 向量映射进低维向量空间，以此来实现词义理解的计算机文本分析技术</strong>。相较于其他自然语 言技术，词嵌入技术不仅展现出了高效的学习能力，而且<strong>允许计算机从更高的意义单元(即 目标词的上下文)出发理解词义、刻画“词”之间的相对关系</strong>，因此逐渐成为了自然语言处理的重要工具，<strong>在管理学、心理学等社会科学领域取得了丰富的研究进展</strong>。相比于传统的、以人工编码和词频统计为主导的文本分析方式，词嵌入的独特优势在于：</p>
<ul>
<li>借助计算机分析技术，可以在短时间内、以较低成本，实现对大规模文本数据的高效处理；</li>
<li>在挖掘文本特征和理解文本内容时，更多地依赖文本自身的分布规律，具有较强的客观性，其背后“数据驱动”的分析逻辑也使这一技术在探索性研究中具有较大的应用优势；</li>
<li>面对<strong>跨时间、跨文化比较</strong>的研究话题、以及在<strong>挖掘社会学、行为学变量</strong>及变量关系等领域展现出广阔的应用前景。</li>
</ul>
<p>词嵌入技术已在社会科学领域得到了广泛的应用，主要包括：<strong>社会偏见 、概念联想[14] 、关系网络和判断机制</strong>[16] 等六大主题，大量研究见诸 Nature、Science、PNAS、Academy Management Journal、American Sociological Review、Management Science 等国际期刊。反观国内的社会科学领域，词嵌入方法的应用价值还未得到足够重视和讨论。据此，本文通过介绍词嵌入技术的基本原理、梳理国外社会科学领域对词嵌入的应用情况，以期帮助国内社会科学研究者了解该技术独特的应用价值，推动词嵌入技术在大数据时代背景下对我国社会科学研究方法的丰富和推动。具体而言，本文：</p>
<ul>
<li>梳理了词嵌入技术原理，以帮助学者深入了解词嵌入在文本分析方面的技术优势；</li>
<li>梳理了现有文献中社会科学研究者们利用这一技术的相关应用研究，展现了在面对实际问题时可以如何利用词嵌入技术进行实证分析，以帮助学者了解该技术的适用领域；</li>
<li>总结词嵌入技术的基本应用流程，提供方法指引；</li>
<li>归纳了词嵌入技术面临的三方面挑战 ——文本数据的选择、中文文本的分词处理、语义信息表征，并提出了相应的应对思路；</li>
<li>从政策效应 评估、用户推荐系统、品牌管理、企业关系管理、组织管理与中国传统智慧和管理问题这六个方面出发，探讨词嵌入技术在以管理为代表的社会科学研究中的应用潜力和价值，以期丰富大数据时代背景下我国的管理科学研究方法。</li>
</ul>
<p><br><br></p>
<h2 id="一词嵌入技术的基本原理">一、词嵌入技术的基本原理</h2>
<p>不同于基于词频统计的文本分析方法，词嵌入技术的核心特征在于从文本的全局语义信息出发对“词”进行表征学习， 即<strong>大规模利用文本中“词”的上下文信息，将文本词汇映射至高维向量空间以实现词的向量化表示，使得词向量之间既保留着“词”在语义层面的关联，又满足向量所适用的代数运算性质</strong>。 在此基础上，通过度量词向量之间的几何关系(即“距 离”)便能够刻画“词”在现实语义中的关系。 进一步地，我们利用词与词之间这种可被量化的语义关系来探讨社会科学领域下的概念之间的相似性或相关性，并由此反映特定的社会文化和认知现象，乃至刻画社会、心理变量与其它行为变量间的相关关系。因此，<strong>词嵌入技术的应用主要包含两大步骤，即首先利用词嵌入模型从文本数据中获得对“词”的向量表征，再计算词向量距离进行相关性分析。</strong></p>
<br>
<h3 id="1-1-词的向量表征">1. 1 “词”的向量表征</h3>
<p>“词”的向量化表征是计算机进行文本分析的基础，也是词嵌入技术的本质属性。纵观计算机文本分析的历史，词向量的表征方法主要经历了以下两个发展阶段：</p>
<h4 id="第一个阶段-假设词语之间相互独立br"><strong>第一个阶段： 假设词语之间相互独立</strong><br></h4>
<p>第一个阶段是从词典出发、基于词频统计规则对“词”的离散型表征。例如，热向量编码(one-hot vector)通过</p>
<p>建立基于目标文本(“猫很可爱，狗也很可爱”)的分词词典({“猫”: 0，“狗”: 1，“也”: 2，“很”: 3，“可爱”: 4})，将每个“词”都表示为一个向量，使其维度与词典长度相当，且每个元素取值为0 或 1。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">“猫”   = (1, 0, 0, 0, 0)
“狗”   = (0, 1, 0, 0, 0)
“也”   = (0, 0, 1, 0, 0)
“很”   = (0, 0, 0, 1, 0)
“可爱” = (0, 0, 0, 0, 1))
</code></pre></div><p>这一类词表征方法虽然简单直观，但是在面对大规模文本时，词典长度的激增易造成参数空间的“<strong>维度灾难</strong>”问题(Curse of Dimension)① 。并且，粗糙的信息表征思路<strong>忽视了“词”的频率、上下文以及“词”之间的关联，使得这一类词向量无法反映“词”的语义信息</strong>。</p>
<br>
<h4 id="第二阶段-认为词语之间有千丝万缕的联系br">第二阶段: 认为词语之间有千丝万缕的联系<br></h4>
<p>为了提升词向量的表征质量，Deerwester 等[20] 主张从更高的文本意义单元理解文本词汇的含义。由此，分布式表征(distributional representation)[18] 成为了第二阶段的词表征方法。<strong>分布式假设(distributional hypothesis)是分布式表征方法的理论支撑，也是词嵌入技术背后的核心逻辑基础——即上下文相似的“词”拥有相似的或相关的语义，它能够反映了人类的语言使用习惯，也符合人的现实认知逻辑。[16,18,21] 人们倾向于对具有相似或者相关特征的对象产生认知关联，体现在文本层面则是相近的语言表达或高度的共现频率，即相似的上下文语境</strong>。基于此，通过分析目标词与其上下文词汇之间的统计分布规律可以学习到目标词的众多文本信息，使得词表征结果囊括文本语境的特征。因此，分布式表征的思想被广泛应用于后续的语义学习中，成为了词嵌入技术的基本逻辑。</p>
<p>其中，较为出色且经典的是 Mikolov 等人在 2013 年提出的 <strong>Word2Vec 模型</strong>，[18] 它标志 着 词嵌入模型 的 正 式 诞 生 。除了 Word2Vec 词嵌入模型外， Pennington 等 [23] 提出了同样具有高效学习能力的 <strong>GloVe</strong>(Global Vectors for Word Representation)学习框架，通过对词共现矩阵的矩阵分解，实 现对“词”的表征。此外，为了提升训练速度、适应海量文本学习，后 多对于词的分布式表征的改进算法，包括：<strong>fastText 算法</strong>、 谷歌的 <strong>ELMo</strong>(Embedding from Language Models)语言模型[25] 和 <strong>BERT</strong>(Bidirectional Encoder Representation from Transform) 语言模型[26]等。</p>
<p>在将文本信息嵌入进每一个“词”之后，我们<strong>获得了“词”的向量表示，即在词向量空间中的位置，而词与词之间的语义关联可以通过向量空间中点与点的位置距离来反映</strong>。词嵌入技 [27,28] 术下的向量具有两项重要的几何性质——<strong>“聚类”(clustering)和“并行”(parallel)</strong>。 其中，</p>
<ul>
<li>“聚类”性质是指，现实语义相近的“词”在向量空间中的位置也相近。 例如， “挪威”与“瑞 典”的词向量更接近，而“意大利”和“德国”的词向量更接近。</li>
<li>而“并行”性质是指，向量空 间中的词向量之间满足基本的代数运算性质，且这种运算逻辑基本符合“词”的现实语义逻辑。</li>
</ul>
<p>[18] 例如，从语义逻辑来看，“国王(King)”和“王后(Queen)”的区别平行于“男人(Man)”和“女人 (Woman)”的区别，反映到对应词向量上即可以得到“King−Man+Woman=Queen”的代数形式。</p>
<p><img loading="lazy" src="img/kingqueen.png" alt=""  />
</p>
<p>综合以上内容可知，词嵌入虽然聚焦在“词”这一最小的文本单位上，但是看到的是丰富的全局文本语义信在“词”上的投射和体现。这不仅与传统的、基于词频的文本分析方法在逻辑上有着本质的区别，更能够为文本分析提供更深刻、更生动的洞察，构成了词嵌入文本分析技术在大数据时代的社会科学领域相关研究中的独特应用优势。</p>
<p><br><br></p>
<h3 id="12-词向量的距离计算">1.2 词向量的距离计算</h3>
<p>在词嵌入领域，词向量间的“距离”是词与词之间相关程度的度量指标，是分析概念之间的相关性的基础。词嵌入技术将文本中的“词”映射为 N 维欧式空间中的“点”，“词”在空间中 的位置坐标即用其对应的 N 维向量来标识。由于点的位置反映了词语的语义，因而点与点之间的空间距离即反映了词与词之间的语义相似性，对词向量进行特定的代数运算(如加减、 内积等)<strong>能够用以度量词与词之间、概念与概念之间乃至文档与文档之间的相关性</strong>。</p>
<h4 id="121-词与词之间的距离">1.2.1 词与词之间的距离</h4>
<p>设在 n 维语义空间中，单词 A 和 B 分别对应词向量 vA=vA1,&hellip;, vAn 和 vB=vB1,&hellip;, vBn， vA 与 vB 之间的距离计算方式主要有以下两种：</p>
<ul>
<li>余弦相似度(cosine similarity)：。余弦相似度衡量词向量 vA 和 vB 之间的向量夹角的余弦值，其取值范围为[-1,1]。余弦相似度取值为 0，则代表单词 A 和 B 之间不存在语义关系；而取值越靠近 1，表明单词 A 和 B 之间具有正相关性；反之，取值越 靠近-1，则表明单词 A 和 B 之间具有负相关性</li>
<li>欧式距离(euclidean distance)：欧式距离越小表明单词 A 和单词 B 在词向量空间中的位置越近，之间的语义关系越强；反之，欧式距离越大表明单 词 A 和 B 语义关系越弱。</li>
</ul>
<br>
<h4 id="122-概念与概念之间的距离">1.2.2 概念与概念之间的距离</h4>
<p>在词嵌入分析领域，一个概念是由一系列“相关词”组合而成，例如，“<strong>女性</strong>”概念可以通过“<strong>女人</strong>”、“女生”、“<strong>母亲</strong>”等名词来表达。<code>而在对比不同属性概念(如“女性”vs.“男性”与“智慧”)之间的相关性时，需要逐个计算概念间的相对距离(“女性”与“智慧”的距离 vs.“男性”与“智慧”的距离)</code>。Garg 等[13] 、Caliskan 等[17] 分别构建了以下两种相对距离的计算方法，并为众多后续研究所采用：</p>
<ul>
<li>
<p><strong>相对范数差函数</strong>(relative norm distance)：</p>
<ul>
<li>$$vm∈Mvm−vA−vm−vB $$</li>
</ul>
</li>
<li>
<p>该函数用于衡量两项目标词概念与某一项特征概念的相对距离。其中，M 代表特征概念(如“智慧”)，vm 为所属概念的相关词向量(如“聪明”)；vA 和 vB 分别代表两类目标词向量(如“男性”vs.“女性”)。该函数的含义为：在“男性”和“女性”两类群体中，哪一类群体与“智慧”这一概念更相关。若函数值为正，则代表“女性”与“智慧”更相近；若函数值为负，则代表“男性”与“智慧”更相近；若函数值靠近 0，则表明“智慧”不存在明显的性别偏向。</p>
</li>
<li>
<p><strong>词嵌入相关性检验</strong> (Word Embeddings Association Test; WEAT)：</p>
<ul>
<li>$$s(X,Y,A,B)=vx∈Xs(vx,A,B)−vy∈Ys(vy,A,B)$$</li>
<li>$$s(vw,A,B)=meanva∈Acos(vw,va)−meanvb∈Bcos(vw,vb)$$</li>
<li>该框架用于衡量两组目标词 X,Y(Target Words，如“男性”vs.“女性”)与两组属性词 A,B(Attribute Words，如“事业”vs.“家庭”)在语义上的相对距离差异，其中 vw 为所属概念的相关词向量(如在描述“男性”概念时，人们往往会使用“男生”、“父亲”、“男人”等词语)。s(vw,A,B)表示单词 vw 与两类属性词 A 和 B 的相对距离，正值代表其与 A 属性距离更近、语义更相关，反之则反；而 s(X,Y,A,B)则衡量了两项目标词 X,Y 和两项属性词 A,B 相对距离的差异，即在 “ 男性 ” 和 “ 女性 ” 两类群体中， 哪一类群体与 “ 事业 ” 或 “ 家庭 ” 的文化概念更相关。 若s(X,Y,A,B)为正值，则表明相比于“女性”，“男性”与“事业”的语义相关性更高，反之则表明“女性”与“事业”的语义相关性更高。此外，WEAT 框架还提供了相应结果的显著性检验方式以及效应量指标。</li>
</ul>
</li>
<li>
<p><strong>文档与文档之间的距离—词移距离</strong>(Word Mover’s Distance) minT≥0i,j=1nTij∙ci,j, s.t. jnTij=di , ∀iϵ1,&hellip;,n</p>
</li>
<li>
<p>除了概念间的相关性分析，我们可以通过文档间的相似性来探讨如文本主题、个体及组织之间的相关性问题，Kusner 等[31] 提出“词移距离”这一计算方法能够实现文档间的相似 性度量。词移距离即一个向量空间移动到另一向量空间所需的最小距离，通过对两个向量语 义空间中所有词向量间的欧式距离进行加权求和，以此来衡量两个文本间的相似性，如上式 所示。其中，c(i, j)为词向量间的欧式距离；Tij 为词向量之间的权重(由 TF-IDF② 计算加权值)。 函数值越大代表两个文本的相关程度越低，反之越高。</p>
</li>
</ul>
<p><br><br></p>
<h2 id="二词嵌入技术的优势">二、词嵌入技术的优势</h2>
<p>传统的社会科学研究通常需要借助科学实验、社会调查和人工编码等方法，依赖于专家学者的领域知识和实践直觉，存在主观性较强、耗时、耗资源的缺点。 另外，传统的社会科学研究局限于小样本数据和历史数据的不足，通常关注当下的、有限范围的社会情景， 难以进行跨时间、跨文化的分析。 反观，以词嵌入为代表的计算机化的文本分析：</p>
<ul>
<li>可处理大文本数据，不仅极大地节省人力和时间投入，而且可以拓宽现有社会科学研究的素材；</li>
<li>能够利用现有数据和先验知识改进学习算法，可拓展性和重复性强；</li>
<li>能依据文本内在的分布规律和领域知识，<strong>挖掘人们内隐层面的认知信息，结果更加客观真实</strong>；</li>
<li>能够从大规模文本中挖掘代表整体社会的认知，<strong>尤其擅长进行跨时间、跨文化的文本研究</strong>，结论不仅具有广泛的样本代表性，而且<strong>可以展示相关文化概念、思想观念等研究对象的纵向历时演化</strong>。 这些优点极大地丰富了社会科学的研究方法，拓展了社会科学的研究视野。传统的社会科学 研究方法与词嵌入技术的具体区别见表 1。</li>
</ul>
<br>
<p><strong>表 1 传统的社会科学研究与词嵌入技术的区别</strong></p>
<table>
<thead>
<tr>
<th>对比维度</th>
<th>传统的社会科学研究路径</th>
<th>基于词嵌入技术的社会科学研究路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>研究工具</td>
<td>问卷、访谈、实验、案例分析等</td>
<td>Word2Vec、GloVe 等词嵌入模型，以及词向量、概念及文本的相关性计算</td>
</tr>
<tr>
<td>方法依据</td>
<td>基于实践经验和严格的理论推断，依赖于特定学科内专家学者的领域知识和实践直觉，是以人为中心的研究方法；围绕研究假设进行数据检验的分析路径</td>
<td>基于语言文本来理解文化概念和思想观念，综合利用社会科学理论、计算机科学等探讨社会、心理和行为层面的问题，是人智与计算机相结合的分析方法 ；不依赖严格的假设，利用数据挖掘展开探索性的研究</td>
</tr>
<tr>
<td>检验标准</td>
<td>大部分研究结论缺少严格客观的评断标准，主观性较强</td>
<td>有多项较为成熟的指标及评价流程，具体包括：检验词嵌入模型的训练效度 ( 模型在特定的测试任务集上的表现 ) 和检验研究结论的外部效度(将结论与其他社会调查数据、其他研究方法的结果展开对比)</td>
</tr>
<tr>
<td>数据来源</td>
<td>调研记录、实验数据、二手数据、文献等；受限于成本投入，数据来源较为单一且体量较小</td>
<td>数据来源广泛，能够熟练处理包括会议记录、网络文本、新闻书籍等非结构化的文本数据；在处理大规模、跨文化、跨时间的文本数据时有极大的优势</td>
</tr>
<tr>
<td>信息层次</td>
<td>以基于自我报告的外显认知为主，在获取被访者内隐认知时依赖于间接的方法设计；研究较大地依赖于样本选择，结论在跨时间、跨文化上的代表性有限</td>
<td>允许研究者直接挖掘文本所反映的内隐社会认知；研究较多从社会、集体层面的文本范围着手，结论具有较强的代表性和普适性</td>
</tr>
<tr>
<td>其他特点</td>
<td>应用过程中耗时长、成本较高；主观性较强；结论的可复现性较弱</td>
<td>针对大数据文本的无监督训练、时间人力投入小；客观性较强；结论的可复现性较强</td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h2 id="三词嵌入技术在社会科学领域的应用话题">三、词嵌入技术在社会科学领域的应用话题</h2>
<h3 id="31-社会偏见刻板印象">3.1 社会偏见/刻板印象</h3>
<p><strong>文本语言能够反映人类对世界的认知和态度，基于词嵌入的文本分析方法可以有效地挖掘社会偏见和刻板印象</strong>。Garg 等[13] 采用词嵌入技术分析了来自纽约时报、谷歌新闻、谷歌图书及美国历史文本库(Corpus of Historical American English; COHA③ )的文本数据，揭示了 1900～1990 年间美国社会在性别和种族两大议题上的刻板印象及其历史变化。Garg 等[13] 首先以十年为单位将文本数据分为 9 份，并针对每一份文本数据使用词嵌入技术，以获得“词” 的向量表征。然后，他们整理了相应概念的单词列表，其中包括：与“性别”维度相关的“男性”词汇[如 he]和“女性”词汇[如 she]；“白人”词汇[如 Harris]、“亚裔”词汇[如 Huang]和“拉丁 裔”词汇[如 Ruiz]。进一步，他们构建了相对范数差(relative norm difference)函数，用以计算 一组词向量(如“男性”vs.“女性”)与目标词(如专业工作)的相对距离，以此度量社会刻板印象 的程度。Garg 等[13] 发现近百年间在美国社会的认知中始终存在着较为明显的性别偏见和种 族偏见。例如，“女性”往往和护士、保洁、舞者、秘书等职业联系更为紧密，而与工程师、 木匠、技术人员等职业更为疏远。此外，亚裔姓名和教授、科学家、化学家和工程师等学术职位联系更紧密，白人姓名往往与警察、统计学家、摄影家等职位联系更紧密。通过纵向分析概念间距离随时间推移的动态演化，Garg 等[13] 发现，这两类刻板印象随着时间呈减弱势 态，结合相关社会科学理论和历史事件，他们进一步提出 60、70 年代的美国民权运动是改善刻板印象的关键事件，而基于词嵌入的概念间相对距离也如实地反映了美国民权运动对于 国民性别、种族认知的深刻影响。 <br></p>
<p>作为文化的产物之一，歌曲也能反映社会认知中的偏见/刻板印象。Boghrati 和 Berger[12]  利用 Word2Vec 词嵌入技术，挖掘了自 1965 年至 2018 年的近 60 年间美国公告榜(Billboard) 上流行歌曲歌词文本中所隐含的性别偏见。一方面，他们在流行音乐中发现了显著的“<strong>厌女症(misogyny)”刻板印象(如图 2)，相比“男性”词汇，人们更少将“女性”词汇和“能力/ 成功/热情”等具有积极属性的词汇相关联</strong>。但另一方面，歌曲中所反映的性别偏见随时间的推移呈现逐渐减弱的趋势。进一步地，Boghrati 和 Berger[12] 通过控制歌曲创作者的性别因素，发现男性作词人是影响歌曲“厌女症”现象变化的关键因素。<br></p>
<p><img loading="lazy" src="img/musicSuccessGenderbias.png" alt=""  />
</p>
<p>为了检测词嵌入技术是否能够有效挖掘文本中的社会偏见，Caliskan 等[17] 对比了词嵌入模型和<strong>内隐联想测试</strong>(Implicit Association Test; IAT)④ ——<strong>一种社会科学领域中最常用的社会 偏见/刻板印象等内隐认知的测量方法</strong>—的差异。虽然 IAT 能够有效捕捉个体的社会偏见的内隐认知，但是该方法需要严格的实验环境、耗时较长且测量样本往往受到时间和空间的局限。Caliskan 等[17] 利用 GloVe 词嵌入模型构建了 <strong>WEAT(Word Embedding Association Test) 分析框架</strong>，并利用这一框架研究了 8 项内隐认知，如“科学-男性”和“艺术-女性”，并将其与 基于 IAT 的研究结果进行了对比。[17] 他们的研究表明，基于词嵌入技术的结论与基于 IAT 的结论具有高度且稳定的一致性。Caliskan 等[17] 进一步指出，在未来的内隐态度研究中，词嵌入技术不仅能够作为 IAT 测量方法的补充，更能够在样本代表性、研究成本和研究视野等方面展现出 IAT 所不具备的独特优势。<br></p>
<p>除了探讨<strong>社会偏见</strong>与刻板印象的跨时特征之外，词嵌入技术还适用于<strong>跨文化</strong>的对比分析。 Defranza 等 [33] 利用词嵌入技术探讨了不同地域在性别偏见方面的程度差异。 他们利用 fastText 模型和 WEAT 分析框架， 从 49 类不同语种的文本中分别挖掘不同社会文化下的性别偏见现象。 结果显示，当一个地区的性别语言(Gendered language)——即语言中更加区分词汇的性别属性和使用者的性别身份(如泰语、芬兰语)更强时，该地区的性别偏见更加明显(图 3)，具体表现为男性与积极属性词汇的关联性更强，而女性与积极属性的联系更弱。 这一结果在一定程度上验证了萨皮尔-沃夫假说(Sapir-Whorf hypothesis)，即<strong>语言能够塑造的思维和认知</strong>。<br></p>
<p><img loading="lazy" src="img/languageBiasGender.png" alt=""  />
</p>
<p><br><br></p>
<h3 id="32-文化认知">3.2 文化认知</h3>
<p><strong>历史无法复刻，但承载历史痕迹的文本资料能够帮助人们窥探特定时代背景下的文化内涵</strong>。Kozlowski 等[28] 利用词嵌入技术分析了自 1900～1999 年来 100 余年间公开发表的书籍， <strong>探讨了 20 世纪美国社会对七大等级文化(财富、道德、职业、性别、教育、品味、身份地位) 的共识和演变规律</strong>。首先，作者利用 Word2Vec 模型，构建了一系列标度等级文化维度(如“贫 穷-富有”、“道德-不道德”、“男性-女性”等)的词向量空间(如“性别-财富”、“职业-道德”、“品 味-职业”、“教育-地位”等)。进一步，作者将一系列目标词分别映射进相应的等级维度空间， 以此标度这些目标词的多元等级属性。例如，在被映射进如图 4 所展示的“性别—财富”等级 维度空间后，“volleyball(排球运动)”一词表现出更靠近“feminine(女性气质)”和“rich(富有)”的 等级特征。此外，标度不同等级维度的向量之间的夹角也具有一定的社会文化含义。例如， <strong>“教育”与“道德”和“品味”的相关性较强且保持历时的稳定性，但与“职业”这一维度的相关性 相对较弱，这说明教育水平的提升能够提升人的修养和品味，但对职位状态和等级(如“失业” 和“就业”)的影响较小</strong>。Kozlowski 等[28] 的研究结果表明，词向量不仅可以反映特定概念间的语义关联和相互作用，还能够用于探讨多元文化维度之间的语义结构，从而推动实现更高层次构念的表征。</p>
<p><img loading="lazy" src="img/americanClass.jpeg" alt=""  />
</p>
<p><strong>作为文化概念的关键形式，社会认知(social cognition)是人们对各种社会刺激的综合加工过程， 是人们的社会动机系统和社会情感系统形成变化的基础</strong> 。</p>
<p><strong>社会认知包括社会信念 (social belief)和社会态度(social attitude)</strong>。而根据内隐—外显双系统理论， 社会认知可进一步分为外显社会认知(explicit social cognition)和内隐社会认知(implicit social cognition) 两类</p>
<ul>
<li><strong>外显社会认知</strong>强调个体可以通过自省的方式(如问卷法)报告的社会认知</li>
<li><strong>内隐社会认知</strong>描述个体无法内省的、潜意识层面的社会认知。</li>
</ul>
<p>然而，受限于现有对<strong>内隐认知</strong>的挖掘手段，有关内隐信念 (Implicit belief，如“亚洲人很聪明”)和内隐态度(Implicit attitude，如“我喜欢亚洲人”)的关系，已有研究要么将其混为一谈，要么将其作为互不干涉的独立构念。为了厘清该问题，Kurdi 等[14] 利用基于预训练的 fastText 词嵌入技术，分析了内隐态度和内隐信念的关联，并对比其与外显态度和外显信念的差异。具体而言，基于被试自我报告的实验结果显示，个体的外显态度与外显信念存在方向上的不一致性，例如，亚裔群体常被白人给予负面的评价(外显态 度)，但在智商、能力方面被认为有突出优势(外显信念)；而基于词嵌入技术的分析结果则表 明内隐态度与内隐信念具有一致性，内隐态度驱使内隐信念的产生。[14 ] 例如，白人群体有 较高的自我评价(内隐态度)，也认为本群体的智商高于亚裔群体(内隐信念)。另外，Kurdi 等[14] 发现人们对同一类属性词的认知也存在差异，例如，人们倾向于认为“book-smart(有学 问的)”优于“street-smart(生存力强的)”。综合可知，词嵌入技术可以作为挖掘文化概念认知以及社会认知的有效工具。</p>
<br>
<br>
<h3 id="33-语义内涵演变">3.3 语义内涵演变</h3>
<p><strong>语言的涵义会随着时代发生改变，而词嵌入技术的一大突出优势即表现为处理跨时段的大文本数据。文本语言的运用具有系统规律性，[35] 词嵌入模型训练生成的词向量能够有效 表征词的语义信息，通过针对来自不同历史时段的文本训练词嵌入模，有助于学者在时间维度上分析词义演变</strong>。Hamilton 等[36] 通过测量目标词的向量表示的时间位移值，来描述历史文本中高频词汇与多义词汇的词义历时变化。例如，如图 5 所示，“gay”作为一个多义词，在 1900 年代的文本中和“cheerful(开心)”和“frolicsome(玩闹)”词义更接近，而到 1990 年代则与“homosexual(同性恋)”、“lesbian(女性同性恋)”等更接近。进一步，Hamilton 等[36] 依据词嵌入技术的分析结果，提出了两条语义演化法则：(1)一致性，高频词汇会保持词义相对一致的历时演化规律；(2)新颖性，多义词汇的语义演化会更加快速。</p>
<p><img loading="lazy" src="img/DiachronicWordEmbeddings.png" alt=""  />
</p>
<p><strong>除了对普遍意义上的词汇含义的演变规律进行探讨，某些具体词汇的演化情况同样引起了学者们的关注，尤其是那些能反映特定文化背景或时代发展的词汇</strong>。 Rodman 等[11] 基于1855～2016 年间的纽约时报、路透社报道、美联社报道三大新闻文本集，挖掘并追踪了美国一个多世纪以来围绕“平等”一词的词义演变，其中包含了使用环境、指代对象等。他们发现，在上世纪 50 年代之前，即美国民权运动前，“平等”的词义与“社会”话题相关的词汇的关联度整体较高，但随着历史发展呈现减弱趋势，这一结果与美国民权运动前普遍存在的社会不公平现象相符合(如种族歧视)。而自上世纪 70 年代，即民权运动基本结束以来，“社会”与“经济”、“教育”等概念下的词汇的关联程度不断增强，反映了本世纪以来美国社会对“教育公平”，“经济公平”等热门话题的高度关注。可见，基于词嵌入的文本分析能够敏锐地捕捉到社会文化演变的信息线索，并能为社会、文化等领域的运动发展提供预示。</p>
<p><br><br></p>
<h3 id="34-文本情感分析">3.4 文本情感分析</h3>
<p>文本信息不仅包含词义，还表达情感。现有部分词嵌入模型在关注语义语法层面的表征 的同时，还进一步关注了词的情感信息，尤其是某些单词具有相似的上下文环境但所含的情 感态度截然相反 ( 如 “good” 和 “bad”) 。 例如， Tang 等 [37] 提出了 情感嵌入模型 (Sentiment Embeddings)，该模型不仅可以如词嵌入模型一样反映词义信息，还能识别词所包含的情感 信息，进而可以对文本(如在线评论)中的情感信息做出推断。</p>
<p><strong>情感的丰富性和语言的灵活性使得单词在不同文本环境下会呈现出差异化的情感特征</strong>。 例如，“I’m gonna put something offensive to some people.”中的“offensive(冒犯)”一词在该句话 中带有消极负面的情绪；而“#FSU offensive coordinator Sanders coached for Tennessee 1st  [37] #BCS title game.”中的“offensive(矛盾)”一词则不含明显的情感信息。 Xiang 和 Zhou[38] 藉此 指出，在推断词的情感信息时加入对文本 主题(topic)的考量将有效提高情感推断的准确性。 Ren 等[39] 基于 Word2Vec 词嵌入模型，结合主题模型(Latent Dirichlet Allocation; LDA)的方法， 提出了主题增强的词嵌入模型(Topic-Enhanced Word Embeddings; TEWE)。作者使用支持向 量机(Support Vector Machine; SVM)作为文本情感分类器，发现 TEWE 模型在文本情感分类 任务有突出表现。 例如，该模型能更有效地区分含有负面情感态度的词汇(如 insane)与正 面情感词汇(如 sane)的差异。在此基础上，Xiong 等[40] 进一步考虑了文本情感信息的多元化 特征 ， 构建了多元层次情感词嵌入模型 (Multi-level Sentiment-enriched Word Embeddings; MSWE)。他们发现，在标注“积极[#happy; :-)]—消极[#angry; :-(]”的情感标签任务中，MSWE 情感嵌入模型能够实现 85.75%的分类水平，表明基于词的情感表征能够更有效地挖掘文本 背后的情感。</p>
<p><br><br></p>
<h3 id="35-组织关系分析">3.5 组织关系分析</h3>
<p><strong>词嵌入技术在挖掘社会内隐认知方面展现出强大的效力，因而词嵌入技术可用于挖掘不 同组织在价值观和意识形态层面的关联，以此作为组织关系的推断依据</strong>。在此思路基础上， Spirling 和 Rodriguez[41] 采用 GloVe 和 Word2Vec 的词嵌入模型，分析了美国共和党和民主党两大政党在其各自的公开发言稿中对部分政治议题的所表达的态度。例如，对于“堕胎”议题， 两政党的理解存在较大争议：民主党认为“堕胎”是一种自愿选择，而共和党认为“堕胎”与“绝 育”、“公平”的话题相关；对于“税收”议题，两政党的理解则存在更多共识。由此可见，词嵌入技术不仅可以帮助我们了解政党组织在哪些政治议题上存在冲突，还可进一步衡量不同党派的政治关系。</p>
<p>Rheault 和 Cochrane[42] 分析了英国、加拿大和美国 20 世纪以来的议会记录文本，并依 据政党派别关系构建了“党派嵌入”(Party Embeddings)模型。学者利用词嵌入模型量化了不同党派在不同年代的议会观点中与特定“意识形态”维度(如自由 vs.保守、北部 vs.南部)的相关性，从而对比不同党派组织的意识形态差异。从整体上看，美国民主党的意识形态更靠近自 由派思想(如“民权”、“种族”、“枪支管控”)，而美国共和党的意识形态更具保守派和南部 [42] 州色彩(如“官僚”、“果农”、“烟草”)，且两党的意识形态差异随着时间不断扩大。 同样地， 对于加拿大，新民主党派与联盟党在意识形态上的政治冲突最为严重，魁北克政团与联邦主 [42] 义政团在事关“联盟”的政治议题上观点不同。 Pomeroy 等[15] 利用 GloVe 词嵌入模型分析了各个国家在联合国论坛的公开演讲文本，并使用词移距离(Word Mover’s Distance)来量化国 家讲演文本间的总体相似性，以此来反映国家立场及偏好的相似性。 作者发现，基于词嵌入技术的分析结果能够很好地反映国家间的政治关系。例如，虽然土耳其和希腊两国在投 票议程中表现出态度相似性(即一致的国家关系)，但实则两国在当年发生了边境军事冲突， 而这一冲突能从两国的联合国讲演文本中捕捉到线索。本研究指出，有关词嵌入在主体网络 关系的应用集中于党派关系和国际关系的研究，未来研究还可以考虑分析其他情景下的主体关系，如社交网络关系、品牌竞争关系、组织内部关系等。</p>
<p><br><br></p>
<h3 id="36-个体的判断与决策心理">3.6 个体的判断与决策心理</h3>
<p><strong>决策结果和决策信息线索之间具有表征关系，因而词嵌入技术能够通过挖掘概念间的内在关联，在一定程度上揭示个体在决策任务中的思维过程和决策依据</strong>。Bhatia[16] 在自然语言处理的框架下，验证了以往决策研究中的相关性判断机制，即人们在进行判断性任务(如：“A 多大可能属于 B?”)时，会出于直觉性心理去思考问题与选项间的相关性或相似性，并以 作为判断依据。具体而言，作者综合 Word2Vec、CCA、GloVe 几项词嵌入技术，基于谷歌 新闻和 GigaWord 文本库⑤ 训练生成词向量。进一步，作者通过对句子中每个“词”的向量求 取平均值，分别对判断问题(如“在以下的两座德国城市中，哪一个人口最多？”)与选项(如“汉堡”和“科隆”)实现表征。作者依据两者间的语义相关性来预测答案选项的概率分布，并据此模拟一般决策者的选择。例如，针对上述问题，基于词嵌入模型的预测结果为“汉堡”，与被试的选择高度相似。此外，词嵌入模型在其它测试任务(如经典的“Linda 问题”⑥ )下也预测了 [16] 决策者的选择倾向， 这一现象与代表性启发理论(representativeness heuristic)——一种依赖人的相关性感知进行识别和判断的心理决策过程——相符。这说明词嵌入模型在很大程度上 能够解释人的相关性判断机制， 甚至对其中常见的认知偏差 ， 如 <strong>合取谬误</strong> (conjunction fallacy)⑦ 、<strong>基础概率忽略</strong>(base rate neglect)⑧ 也能够予以反映。[16] 实证结果表明，词嵌入技术为我们理解人的直觉性判断心理提供了信息参考，能够帮助实现相对精准的决策预测。</p>
<p>另外，个体的风险感知和风险判断也是个体决策研究中的重要组成部分。Bhatia[43] 利用词嵌入技术探讨了人们面对各类风险源时的风险评估机制。作者通过基于谷歌新闻文本的预 训练 Word2Vec 模型，量化了不同风险源(技术性风险源：“新兴技术”、“能源”等；活动性风 险源：“运动”、“职业”等)与相关概念的语义联系，进一步 揭示了人们进行风险评估时的知 识表征内容(即内隐联想)。例如，当评估药物风险时，人们在潜意识里会联想到“毒品(drug)”、 “无序(disorder)”等具有高风险含义的概念(如图 6a 的词云图)；而评估运动风险时，人们容易 联想到“碰撞(crash)”、“斗争(combat)”等风险事件(如图 6b)。作者弥补了以往有关风险评估 的研究方法中难以预测样本外数据(如新型风险源)的缺陷，展现了词嵌入技术在理解和预测个体判断决策机制中的应用优势。</p>
<blockquote>
<p>⑥ “Linda 问题”是指“琳达，31 岁，单身，一位直率又聪明的女士，主修哲学。在学生时代，它就对歧视 问题和社会公正问题较为关心，还参加了反核示威游行。请问琳达更有可能是下面哪种情况？”有两个选 项：“A.琳达是银行出纳；B.琳达是银行出纳，同时她还积极参与女权运动”。相比于 A 选项，B 选项所 塑造的女性形象更贴近问题所提供的信息，因而人们会倾向于选择 B 选项。</p>
<p>⑦合取谬误是指人们总是认为两个事件的联合出现比只出现其中一件事的可能性要大。以“Linda 问题”为例， 人们会更多地选择 B，虽然从实际概率角度来讲，B 选项的概率应低于 A 选项。</p>
<p>⑧基础概率忽略是人们在进行主观概率判断时倾向于使用当下的具体信息而忽略掉一般常识的现象。</p>
</blockquote>
<p><img loading="lazy" src="img/EmbeddingsThemes1.png" alt=""  />
<img loading="lazy" src="img/EmbeddingsThemes2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="四词嵌入分析的基本流程">四、词嵌入分析的基本流程</h2>
<p>词向量的表征学习存在两条路径：一是采用本地化的训练模型(local-trained model)。二是使用预训练的词嵌入模型(pre-trained model)。针对第一条路径，通常需要经历如下预处理和模型训练步骤(见图 7)：</p>
<h3 id="41-选择合适的语料库corpus">4.1 选择合适的语料库(corpus)</h3>
<p>语料库是用于训练词嵌入模型的文本集，“词”的表征效果以及后续的相关性分析依赖于训练文本的规模、质量及其所处的语言环境。对文本语料的选择需严格依研究者的具体问题而定，使研究主题/情景与文本主题/情景相对应，[41] 进而推动单词间的语义关系聚焦于特定的领域和视角上。例如，<strong>以探讨社会文化现象的研究可以选择新闻时报、社交媒体动态等社会文本作为主要语料；探讨消费者心理及行为的研究则可以将线上评论等商业沟通文本作为语料；关注组织行为的研究则以会议 记录、公司年报等组织内部的官方文本为主</strong>。</p>
<p>文本数据的获取主要有以下三种途径：</p>
<ul>
<li>第一， 国内外由政府、企业及其他组织或个人提供的公开的、已初步整理规范的文本数据库。如， 人民日报文本集(1946 年至今) ⑬ 、谷歌图书(包含 1500 年～2012 年期间公开出版的书籍，约占人类历史所有出版书目总数的 6%) ⑭ 、亚马逊评论集(包含 1996 年～2018 年亚马逊平台用 户对近 30 个产品品类的超过 2 亿条评论) ⑮ 、维基百科数据库(包含来自 400 多万篇文章的近 19 亿个单词的维基百科全文) ⑯ 等。</li>
<li>第二，借助“爬虫”程序收集文本数据。根据研究需要， 研究者可以在特定的网站上爬取一定的文本。例如，众筹平台的项目申报文本材料、微博平台的历时推文、论坛用户间的互动文本、企业员工在 Glassdoor ⑰ 等职业资讯网的日志评论等文本。</li>
<li>第三，纸质版文本转换成电子文本。必要时，研究者还可以将纸质文本录入为电子文 本形式，如员工日记、会议记录、线下心理咨询文稿等。</li>
</ul>
<h3 id="42-语料预处理pre-processing">4.2 语料预处理(pre-processing)</h3>
<p>常规的预处理流程包括：</p>
<ul>
<li>删除与文本内容无关的标点符号、特殊字符(如：数字，空格符，分行符，“©”)和其它停用词(如：代词、连词)。</li>
<li>此外，中文文本的预处理中还需要对文本分词 (segmentation)，从而将语料处理成由“词”这一最小的文本分析单位所构成的列表(如将语 句“我很开心”分词为“我”/“很”/“开心”)。现今常用的中文分词工具有“Jieba”、“HanLP”、 “THULAC”、“TopWORDS”等。</li>
</ul>
<h3 id="43-模型训练">4.3 模型训练</h3>
<p>在预处理后的语料文本中训练词嵌入模型，最终实现文本词的向量表征。当前主流的词嵌入模型有 Word2Vec、GloVe、fastText 等， 而在 Python 环境下，大量与自然语言处理相关的成熟的开源工具包(如，Gensim)中提供了相关的算法模块，并允许研究者对相关参数(词向量的维度、单词上下文的观测窗口的大小 等)进行调整。</p>
<p>此外，基于词嵌入模型的迁移学习能力，也可直接使用预训练的词嵌入模型(如，谷歌 的 GloVe 和 BERT )，从而获得基于其它大型语料库充分训练得到的词向量表示，并根据自身的文本特征对模型或表征结果进行微调(finetune)。但无论采用何种词向量表征路径， 在正式的词向量相关性分析之前，都<strong>有必要对词嵌入模型的训练结果，即词向量的表征效度进行评估</strong>。<strong>常见的评估方式是通过与人工标注的词相关性评分进行对比，检验二者是否一致， 以此判断词嵌入模型是否能够捕捉一般化的语义关系</strong>。目前，已有大量成熟的针对“词对” (word pairs)相似性的人工标注的测试集，如 MEN-3000(英文)[47] 、Wordsim240/297(中文)[48 ] [12,41]。</p>
<p><strong>词嵌入模型训练完成后，可以进一步依据研究目的进行词向量间的“距离”的几何计算， 主要包括词列表构建、相关性计算、有效性检验和稳健性检验四个步骤</strong> 。</p>
<ul>
<li>(1)<strong>构建词列表</strong>。 在词嵌入的文本分析中，特定概念通常由一系列近义词或同属性词列表构成。例如，在 Garg 等[13] 的研究中，他们构建的“男性”概念词列表包括“male”、“men”、“father”、“brother”等 20 个单词。</li>
<li>(2)计算词向量的相关性。针对具体研究问题，衡量“词”或者概念之间的语义关联(即 词向量间的“距离”)，主要包括余弦相似度(cosine similarity)、欧式距离(euclidean distance)两 种基本的计算方法(详见上文第一部分内容)。</li>
<li>(3)<strong>有效性检验</strong>。针对词嵌入的分析结果，我们 有必要进行进一步的检验，以保证结论的可靠性以及方法的有效性。具体包括两类检验方法： ①与对应年代的相关社会调查数据 (如，社会职业性别占比调查、社会偏见大调查 ) [13,49-51] 进行比对，以检验词与词的相关程度、变化是否与相应的指标数据、社会事件相吻合； ②与其它研究方法进行对比，如内隐联想测试(IAT)、主题模型(LDA)，以检验词嵌入模型能 否重复已有研究结果。[11,14]</li>
<li>(4)稳健性检验。作为一种无监督的探索性分析方法，词嵌入的 分析结果会因文本、模型等因素的不同而产生差异。通过变换词嵌入模型、参数、文本语料 或相关性计算方法，以检验研究结果的一致性。稳健性程度越高则代表基于词嵌入分析方法 的结论可靠性越高。</li>
</ul>
<p><img loading="lazy" src="img/EmbeddingApplicationProcess.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="五词嵌入分析方法的挑战与应对">五、词嵌入分析方法的挑战与应对</h2>
<p>作为一种计算机化的文本分析方法，词嵌入技术在文本数据的预处理、文本表征效果等方面有一定的条件限制，因而该技术面临着以下几个方面的挑战。学界一直致力于词嵌入分析方法的完善，并就下述问题提出了针对性的应对方案和解决思路，详见表 3。</p>
<p><strong>(1)词嵌入技术的分析效果依赖于文本数据的体量、质量和语言环境</strong>。 <br></p>
<p>①通常来说，文本数据规模越大越有利于词嵌入学习和提取更充分的语义信息，[11] 而体量较小的文本，可能会限制词嵌入模型的训练效果，难以将文本的全局语义信息嵌入到单词上。[11,18] 对此，Rodman[11] 提出了两种解决思路：一是采用预训练的词嵌入模型。预训练词向量通常基于超大型文本数据训练而来， 使模型具备较好且广泛的语义表征能力。 二是采取“自举法”(Bootstrapping)⑱ 。通过该方法生成规模更大的文本数据集，并针对不同的抽样过程生成不同的词向量结果，随后求取其平均值以增强词向量的稳定性和有效性。<br></p>
<p>②除此以外，文本语料的选择应考虑到其依存的文本情景、社会文化环境等背景信息。文本所依存的语言环境、文化观念和观点立场在很大程度上影响着文本词汇的分布方式(即单词上下文)，因此利用不同文化背景的文本训练词嵌入模型，可能会产生不同的研究结论。Spirling 和 Rodriguez[41] 对美国国会议事文本的分析所示，不同的党派组织对同一政治 议题的理解存在“冲突”(如，“堕胎(abortion)” &amp; “福利(welfare)”)。再如，在研究组织员工的 幸福观时，企业的官方书面文本(更具指导性和应然性)以及员工的口述文本(更具真实性)可 能潜藏不同的结论。然而，如何权衡和选择合适的语料、如何处理不同文本下的结论不一致 等问题仍缺乏统一的解决标准。就学者的普遍实践来看，文本选择需要“有的放矢”，即依据 研究问题对文本的背景信息(如，表达视角、代表阶层、文本性质 )进行必要地分析和筛选， 在扩大语料库规模和类型的同时也要尽可能使之聚焦在同一视角和语境上。[11,28,41] <br><br></p>
<p><strong>(2)“词”是词嵌入分析的基本单位，中文文本的分析需要预先进行“分词”处理</strong>。<br>对于某些特定领域的文本而言，如专业学术文章、古代汉语文本等，由于其文本内容及结构与标准的训练语料存在较大差异，[46] 使得文本分词的过程存在一定困难。近年来，大量学者就优化文本预处理技术展开了探讨，例如，Deng 等[46] 开发了“TopWORDS”分词软件，在小型训练文本中实现了部分低频词的精确识别，亦能处理含有大量未知专业语汇的文本，该方法的有效性在古汉语文本的分词任务上得到了进一步验证。在突破文本预处理中的困难后，可以应用词嵌入的实践流程对文言文展开分析，探讨古代社会文背景下的社会科学课题，如围绕权力、阶层、性别、宗教等的社会规范以及其它社会价值观念的演变。</p>
<br>
<p><strong>(3)在由“词”构成的文本结构中，词与词之间的组合搭配能够创造出更加丰富且抽象的语义信息，这一类信息难以通过词向量间简单的结构化公式运算来体现。</strong> <br>词嵌入技术对文本中的“词”展开语义分析，所建构的是词与词之间的关联，侧重于表达“单词级别”的语义信息。因此，基于词向量的简单几何计算难以直接反映 “单词级别”以外的语义信息，[18,5 2 ] 如词组概念、段落含义、文本主题等。学界也在积极探索“组合式分布语义”的实现方法，即如何利用词表征的组合实现对短语、段落和文档的有效表示。[18,53 ] 在自然语言处理领域，以LDA 为代表的主题模型从整个语言系统分布中学习“词”的含义，侧重于建模词与文档的关系，体现的是词的主题信息。相比于词嵌入模型下的单词之间的关联，包含主题特征的词向量之间能够反映相对丰富的语义关联。鉴于词嵌入模型具有较强的扩展能力，大量学者针对词嵌入模型的算法和训练过程进行优化，即将有关文本整体特征的信息或其他的领域知识融入词嵌入的学习过程。例如，Liu 等[54] 基于 Word2Vec 词嵌入模型，并结合 LDA 算法，使词向量包含更多的主题特征，如 “apple(苹果)”在电子产品的背景信息下表示“苹果公司”，而在食品背景信息下表示“苹果”这 类水果。此外，词嵌入技术的基本原理在文本表征领域也得到了长足发展。例如， Le 和 Mikolov[55] 将 Word2Vec(skip-gram)的算法运用至句子和短文本的表征学习；词嵌入模型界的 新秀——BERT 模型，能够有效表征句子等“单词级别”以上的文本语义概念，推动了对更 高文本单位的关系层面的理解。<br></p>
<br>
<p><strong>(4)传统的社会科学研究方法具备词嵌入技术所无法提供的分析视角，尤其是相对于“文本细读法(close reading)”，词嵌入这一计算机化的分析方法难以捕捉更加细微的语义差别</strong>。<br></p>
<p>基于上下文分布来表示单词的方法也难以学习单词的细粒度语义， 例如，同义词、反义词、多义词、上下位词等词义的区分和表征还有待优化。据此，相关学者提出利用有监督的学习过程，在词嵌入的算法层面引入某些先验知识库(如，描述词义关联信息的“WordNet”语义网[5 7 ] )，帮助模型更好地捕捉单词多元的属性信息，从而有助于避免词嵌入表征词义的逻辑偏离实践认知。[19]</p>
<p><img loading="lazy" src="img/ChallengeEmbeddings.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="六词嵌入技术在管理学领域的应用展望">六、词嵌入技术在管理学领域的应用展望</h2>
<h3 id="61-政策效应评估">6.1 政策效应评估</h3>
<p>已有政策效应评估主要采用定量分析工具(如，双差分法)分析显性的数据指标(如，人均收入)，而对于政策的隐式效应(如，社会心理、文化认知)的判断还较为局限。本研究提出， 词嵌入技术可以结合因果推断，[5 8 ] 分析公共政策的有效性。具体而言，词嵌入技术可以研 究：①政策对社会文化认知的影响，如“2020 年禁塑令”实施对公民“环保”、“健康”等概念的 认知的影响；“2021 年惠游湖北”政策对武汉城市污名化的缓释作用等。②衡量政策创新性， 探讨政策带来的创新性影响。例如，Perren 和 Sapsed[5 9 ] 分析了英国在过去近 50 年间的议会 记录，发现在其实施“国家创新计划”之后，“创新”这一概念在社会文本的出现频率显著上升， 有关科技领域的词汇与“创新”一词的共现频率显著增加。未来研究可以利用词嵌入技术来挖 掘“创新”与具体领域，例如，“知识”、“科技”、“法律”的相关度，并比对其在政策实施节点 前后的变化。</p>
<br>
<h3 id="62-用户推荐系统">6.2 用户推荐系统</h3>
<p>以往的线上推荐系统多基于用户行为数据来判断个体偏好， 以矩阵分解 (Matrix Factorization)和协同过滤(Collaborative Filtering)为代表的技术被广泛应用于线上推荐场景。 然而相比上述几项技术，词嵌入能实现更高水平的用户偏好预测， [ 60 , 6 1 ] 这意味着文本数据 将是我们了解用户的重要渠道。现如今，电商评论和社交媒体的动态文本记录了大量消费者 认知、态度及其它表现个人特征的信息。利用词嵌入技术，平台能够挖掘用户对特定领域话 题的偏好、对产品的偏好和评价，以及用户之间的相似特征等。例如，通过计算“产品/品牌” 与积极、消极属性词汇的相对“距离”，[13] 来衡量个体用户的内隐偏好和真实的消费感受，并 据此展开产品推荐和广告投放。</p>
<br>
<h3 id="63-数智品牌管理">6.3 数“智”品牌管理</h3>
<p>鉴于词嵌入技术在挖掘社会内隐认知上的突出表现，因而能用于刻画企业—消费者关系， 辅助企业的品牌管理战略。 借助词嵌入的分析方法， 企业可以透过用户生成文本 (user-generated content)(如，社交媒体、网络论坛和线上评论)纵观消费者对企业品牌形象的 态度、评价，也可以用于挖掘影响消费者满意度的关键因素和市场潜在需求。[8, 6 2 ] 作为品牌 形象的内核，企业品牌个性(brand personality)及其历时演变同样也可以使用词嵌入的分析方 法对其进行挖掘，[12] 从不同时期的社会文本中测量相应的语义关系，即品牌与个性维度间 的相关性(如，品牌与“真诚型”vs.“粗犷型”)。在跨文化视角下，词嵌入技术能够帮助企业考 察不同文化背景下的市场对其品牌的认知差异，并据此助推企业品牌的形象定位与国际化进 程。[6 3 ] 再如，利用词嵌入技术能够帮助企业动态追踪新产品的市场评价，为企业评估产品 的市场表现提供新的分析工具。其它的相关话题，诸如品牌依恋(brand attachment)、品牌文 化(brand culture)和品牌联想(brand association)等研究也将受益于词嵌入的分析方法。</p>
<br>
<h3 id="64-企业关系管理">6.4 企业关系管理</h3>
<p>文本作为企业对外传达信息、价值观，以及企业间进行交流的重要载体之一，蕴含了大量的、足以表征企业特征的信息。以往从文本层面探讨企业关系的研究相对较少，而利用词嵌入的基本原理，未来研究可以考虑利用文本来刻画企业间的关系(如竞争、合作、信任等)， 进而更有效地描绘企业在网络中的嵌入式角色(embedded role)。例如，学界一直致力于研究 企业间关系网络的结构特点及其对企业绩效、企业间联合研发效率的潜在影响，探讨了社会 网络嵌入视角下的企业组织的合作范式。例如，基于知识理论视角，企业合作网络的形成及 演变动机在很大程度上取决于知识的互补性与相似性特征。[64 ] 未来研究可以利用文本刻画 企业的关系网络及其节点特征，探索企业的合作策略和市场战略。尤其在信息不对称的商业环境下，基于文本的社会关系分析能够为企业的战略伙伴选择、市场表现等提供新的分析路 径和信息参考。</p>
<br>
<h3 id="65-组织内部管理">6.5 组织内部管理</h3>
<p>在管理学领域，有关组织行为的研究大多依赖于问卷访谈和自然观察等形式的调查方法， 以及基于组织管理目标开展特定的田野实验。这些研究路径在理解和预测个体行为的过程中 存在较强的主观性和外显性，难以挖掘组织成员真实的内隐认知。此外，以往对组织场景内 的文本分析在很大程度上受限于专家学者的领域知识和实践经验，耗时、低效且准确率低。 本研究提出，词嵌入技术可以用于分析组织内成员的心理及行为规律，通过挖掘组织内的文本(如会议记录、员工评述、领导讲演文本)，揭示员工的内隐认知信息(如动机、信念、情绪)， 甚至包括领导力(leadership)、员工创新力、员工的组织支持感(organizational support)和企业文化等主题。</p>
<br>
<h3 id="66-中国传统智慧与管理问题">6.6 中国传统智慧与管理问题</h3>
<p>社会科学研究者不仅需要关注当下的社会情景，也需要从历史中洞察现象、以史为鉴。 中国社会文化背景下的众多管理问题、思想乃至组织行为领域的话题，均能够从历史事件中窥知和借鉴。例如，Huang 等[6 5 ] 基于《资治通鉴》这一古籍中的记载，探讨了中国家族式企 业内的领导—员工关系。他们以古代的皇帝与太子间的关继承案例作为样本，并在长时间的 人工阅读和变量编码后发现，家庭组织在权力转移的过程中，子女继任的可能性与其父母在 位者对其的压制行为存在“U 型”关系。同样地，词嵌入技术可以挖掘在位者对继任者的评价， 以此判断与继任可能性之间的关系。此外，通过对《二十四史》展开词嵌入分析，也能帮助学者了解中国各个朝代的管理层在应对人事、外部环境、组织治理等方面的管理思想与策略。 对此，本文展望利用词嵌入方法对中华古籍文本展开必要的分析，挖掘诸如组织领导风格、 组织文化、组织竞争力、管理者与下属间关系、人员激励政策等研究话题，进而探索中国本土的管理智慧和组织话题。[65]</p>
<p><br><br></p>
<h2 id="七相关内容">七、相关内容</h2>
<ul>
<li><a href="https://textdata.cn/blog/2022-04-09-literature-about-embeddings/">文献汇总 | 词嵌入 与 社会科学中的偏见(态度)</a></li>
<li><a href="https://textdata.cn/blog/2023-03-15-39faq-about-word-embeddings-for-social-science/">词嵌入技术在社会科学领域进行数据挖掘常见39个FAQ汇总</a></li>
<li><a href="https://textdata.cn/blog/2023-11-03-organization-science-with-word-embeddings/">OS2022 | 概念空间 | 词嵌入模型如何为组织科学中的测量和理论提供信息</a></li>
<li><a href="https://textdata.cn/blog/2023-12-28-visualize-the-culture-change-using-people-daily-dataset/">可视化 | 人民日报语料反映七十年文化演变</a></li>
<li><a href="https://textdata.cn/blog/2023-12-28-train-word2vec-using-renmin-gov-leader-board-dataset/">词向量  | 使用<strong>人民网领导留言板</strong>语料训练Word2Vec模型</a></li>
</ul>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyPlutchik库 | 可视化文本的情绪轮(情绪指纹)</title>
      <link>https://textdata.cn/blog/pyplutchik_emotion_circle/</link>
      <pubDate>Sun, 03 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/pyplutchik_emotion_circle/</guid>
      <description>越来越多的社交网络学者， 为测量情绪， 基于**心理学家 Robert Plutchik** 提出的模型（通常简称为“**Plutchik轮**”，人类的情绪一共有8大类）制作了大量的情绪可视化作品。在某种程度上，Plutchik轮可以看做情绪指纹，例如不同的电影题材在8类情绪的分布是不一样的。</description>
      <content:encoded><![CDATA[<p>越来越多的社交网络学者， 为测量情绪， 基于<strong>心理学家 Robert Plutchik</strong> 提出的模型（通常简称为“<strong>Plutchik轮</strong>”，人类的情绪一共有8大类）制作了大量的情绪可视化作品。在某种程度上，Plutchik轮可以看做情绪指纹，例如不同的电影题材在8类情绪的分布是不一样的。</p>
<p><img loading="lazy" src="img/imdb_full.png" alt=""  />
</p>
<p>今天介绍 <strong>PyPlutchik</strong>，这是一个 Python 库，专门用于在文本或语料库中可视化 Plutchik 的情绪。 PyPlutchik 绘制 Plutchik 的花朵，每个情感花瓣的大小取决于语料库中检测到或注释了多少情感，也代表每个情感花瓣的三个强度程度。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install pyplutchik
</code></pre></div><br>
<h2 id="usage">Usage</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pyplutchik</span> <span class="kn">import</span> <span class="n">plutchik</span>

<span class="n">emotions</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;joy&#39;</span><span class="p">:</span> <span class="mf">0.6</span><span class="p">,</span>
            <span class="s1">&#39;trust&#39;</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
            <span class="s1">&#39;fear&#39;</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span>
            <span class="s1">&#39;surprise&#39;</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span>
            <span class="s1">&#39;sadness&#39;</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span>
            <span class="s1">&#39;disgust&#39;</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span>
            <span class="s1">&#39;anger&#39;</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
            <span class="s1">&#39;anticipation&#39;</span><span class="p">:</span> <span class="mf">0.6</span><span class="p">}</span>
            
<span class="n">plutchik</span><span class="p">(</span><span class="n">emotions</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="功能特性">功能特性</h2>
<p>PyPlutchik 提供了一个即插即用的工具，用于在文本或语料库中定量表示 Plutchik 的情绪。 它尊重 Plutchik 轮中每个花瓣的原始颜色和空间位移。</p>
<p>在 Pyplutchik 中，用户可以只传递一个字典作为唯一参数，其中字典的键必须是 8 种基本情绪。 每个值必须是 ∈ [0, 1]。</p>
<p><img loading="lazy" src="img/example01.png" alt=""  />
</p>
<br>
<p>每类情绪存在三种强度，下表是Pyplutchik的8大类情绪三种强度汇总。</p>
<p>用户还可以给每个情绪传入一个长度是3的列表，依次表示情绪在低、中、高三种强度的程度，数值0 和 1 之间。</p>
<table>
<thead>
<tr>
<th>Lower intensity</th>
<th>Emotion</th>
<th>Higher intensity</th>
</tr>
</thead>
<tbody>
<tr>
<td>Annoyance</td>
<td>Anger</td>
<td>Rage</td>
</tr>
<tr>
<td>Interest</td>
<td>Anticipation</td>
<td>Vigilance</td>
</tr>
<tr>
<td>Serenity</td>
<td>Joy</td>
<td>Ecstasy</td>
</tr>
<tr>
<td>Acceptance</td>
<td>Trust</td>
<td>Admiration</td>
</tr>
<tr>
<td>Apprehension</td>
<td>Fear</td>
<td>Terror</td>
</tr>
<tr>
<td>Distraction</td>
<td>Surprise</td>
<td>Amazement</td>
</tr>
<tr>
<td>Pensiveness</td>
<td>Sadness</td>
<td>Grief</td>
</tr>
<tr>
<td>Boredom</td>
<td>Disgust</td>
<td>Loathing</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="img/example02.png" alt=""  />
</p>
<br>
<p>PyPlutchik 也可表征用户数据中的主要二元、次要二元、二元和相反的情绪。 它会自动从字典的关键字中了解用户想要显示什么样的二元组。</p>
<p><img loading="lazy" src="img/example03.png" alt=""  />
</p>
<br>
<h2 id="绘图技巧">绘图技巧</h2>
<p>可以专注于情绪子集，不会忽视其他情绪，将情绪列表作为参数“<strong>highlight_emotions</strong>”的值传递：</p>
<p><img loading="lazy" src="img/highlight_emotions.png" alt=""  />
</p>
<p>我们可以比较同一亚马逊语料库的不同子组，将我们的可视化并排放置，并仅突出显示愤怒、厌恶和恐惧的花瓣，以轻松发现这些负面情绪在 5 星评论中的表现如何低于 1 星评论 .</p>
<p><img loading="lazy" src="img/amazon.png" alt=""  />
</p>
<br>
<p>或者可以隐藏坐标、刻度和标签，只绘制花瓣，使用参数 <code>show_coordinates = False</code> 和 <code>show_ticklabels = False</code>。下图是imdb不同电影的情绪轮</p>
<p><img loading="lazy" src="img/imdb_full.png" alt=""  />
</p>
<br>
<h2 id="查看文档">查看文档</h2>
<p>有关所有参数的文档和示例库，请参见<a href="Documentation.html">文档</a></p>
<p><a href="PyPlutchik.zip"><strong>文档下载</strong></a></p>
<p>🔥 PyPlutchik 2.0 即将推出！ 新功能包括从文本中提取情感并检查非主题词典。 敬请期待……🔥</p>
<br>
<h2 id="说明">说明</h2>
<p>如果使用PyPlutchik，请在文献中说明，格式如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Semeraro A, Vilella S, Ruffo G (2021) PyPlutchik: Visualising and comparing emotion-annotated corpora PLOS ONE 16(9):e0256503.https://doi.org/10.1371/journal.pone.0256503
</code></pre></div><br>
<h2 id="semeraro的研究">Semeraro的研究</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Semeraro, Alfonso, Salvatore Vilella, Giancarlo Ruffo, and Massimo Stella. &#34;Writing about COVID-19 vaccines: Emotional profiling unravels how mainstream and alternative press framed AstraZeneca, Pfizer and vaccination campaigns.&#34; *arXiv preprint arXiv:2201.07538* (2022).
</code></pre></div><ul>
<li><strong>摘要</strong>: 自 2020 年 11 月宣布 COVID-19 疫苗以来，媒体和社交媒体对 COVID-19 疫苗进行了大量辩论。由于大多数研究都集中在社交媒体中的 COVID-19 虚假信息上，与其他来源相比，主流新闻媒体如何构建 COVID-19 叙述很少受到关注。为了填补这一空白，我们使用认知网络科学和自然语言处理来重建 5745 条关于 COVID-19 疫苗的新闻的随时间变化的语义和情感框架。我们的数据集涵盖了 8 个月内的 17 个网点，其中包括在 Facebook（500 万总股数）和 Twitter（20 万股总股数）上大量转发的意大利新闻文章。我们发现主流消息来源构建“疫苗/疫苗”的总体概念的方式始终具有高度的信任/预期和较少的厌恶。在替代来源构建 COVID-19 疫苗的方式中，这些情绪严重缺失。在疫苗的特定实例中发现了更多差异。另类新闻包括以强烈的悲伤来描述阿斯利康疫苗的标题，而主流标题中没有。与“阿斯利康”相比，主流新闻最初将“辉瑞”与副作用（例如“过敏”、“反应”、“发烧”）相关联更多。随着后一种疫苗的暂停，在 2021 年 3 月 15 日，我们发现了一种语义/情感转变：即使是主流文章标题都将“阿斯利康”框定为在语义上更丰富与副作用的负面关联，而“辉瑞”则经历了积极的效价转变，主要与其更高的效率有关。血栓形成与可怕的概念联想一起进入了疫苗的框架，而死亡这个词经历了情感转变，在替代标题中转向恐惧，在主流标题中失去了希望的内涵，缺乏预期。我们的发现揭示了媒体采用的围绕 COVID-19 疫苗的情感叙述的关键方面，强调了了解替代媒体和主流媒体如何报道疫苗接种新闻的必要性。</li>
<li><strong>Keywords</strong>: natural language processing, text analysis, complex networks, cognitive network science, COVID-19, COVID-19 vaccines
<img loading="lazy" src="img/figure2.png" alt=""  />

<img loading="lazy" src="img/figure3.png" alt=""  />

<img loading="lazy" src="img/figure4.png" alt=""  />
</li>
</ul>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>whatlies库 | 可视化词向量</title>
      <link>https://textdata.cn/blog/whatlies_word2vec/</link>
      <pubDate>Sat, 02 Apr 2022 16:40:10 +0600</pubDate>
      
      <guid>/blog/whatlies_word2vec/</guid>
      <description>词语之间可以比较亲疏远近</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<blockquote>
<p>链接:https://pan.baidu.com/s/1vJohEJ0pc6t4PBK04PiZbg  密码:t7a6</p>
</blockquote>
<br>
<h2 id="whatlies">whatlies</h2>
<p>可以与spacy语言模型结合，可视化词向量。安装zh_core_web_md、en_core_web_md和whatlies。具体文档可以查看https://github.com/RasaHQ/whatlies</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">zh_core_web_md</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">-</span><span class="n">py3</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">en_core_web_md</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">-</span><span class="n">py3</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">whatlies</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>spacy模型中的词向量均为几十上百维度的词向量，通过压缩映射至二维空间后，横坐标man，纵坐标woman，就可以将词语的性别倾向可视化出来。</p>
<p>词向量语言模型会学习到人类的<strong>刻板印象</strong>，</p>
<p><a href="https://textdata.cn/blog/wordembeddingsinsocialscience/">大数据时代下社会科学研究方法的拓展—基于词嵌入技术的文本分析的应用</a></p>
<p><a href="https://textdata.cn/blog/embeddingsandattitude/">词嵌入测量不同群体对某概念的态度(偏见)</a></p>
<p>例如nurse是女性，doctor是男性。</p>
<p>制作两维度画轴，其中以woman作纵轴，man作横轴。 nurse、queen一般更多的是女性从业者，因此更接近y轴。 king国王多为男性，所以更接近x轴。</p>
<p>至于动物，女性喜欢养猫，男性喜欢养狗，所以也能体现出词语的性别倾向。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">whatlies</span> <span class="kn">import</span> <span class="n">EmbeddingSet</span>
<span class="kn">from</span> <span class="nn">whatlies.language</span> <span class="kn">import</span> <span class="n">SpacyLanguage</span>

<span class="n">lang</span> <span class="o">=</span> <span class="n">SpacyLanguage</span><span class="p">(</span><span class="s2">&#34;en_core_web_md&#34;</span><span class="p">)</span>

<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">,</span> <span class="s2">&#34;fish&#34;</span><span class="p">,</span> <span class="s2">&#34;kitten&#34;</span><span class="p">,</span> <span class="s2">&#34;man&#34;</span><span class="p">,</span> <span class="s2">&#34;woman&#34;</span><span class="p">,</span>
         <span class="s2">&#34;king&#34;</span><span class="p">,</span> <span class="s2">&#34;queen&#34;</span><span class="p">,</span> <span class="s2">&#34;doctor&#34;</span><span class="p">,</span> <span class="s2">&#34;nurse&#34;</span><span class="p">]</span>

<span class="n">emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">lang</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">])</span>
<span class="n">emb</span><span class="o">.</span><span class="n">plot_interactive</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span><span class="n">emb</span><span class="p">[</span><span class="s2">&#34;man&#34;</span><span class="p">],</span> <span class="n">y_axis</span><span class="o">=</span><span class="n">emb</span><span class="p">[</span><span class="s2">&#34;woman&#34;</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/gif-zero.gif" width="100%" />
    
    
</figure>

<p>whatlies也可以对中文进行操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">whatlies</span> <span class="kn">import</span> <span class="n">EmbeddingSet</span>
<span class="kn">from</span> <span class="nn">whatlies.language</span> <span class="kn">import</span> <span class="n">SpacyLanguage</span>

<span class="n">zh_lang</span> <span class="o">=</span> <span class="n">SpacyLanguage</span><span class="p">(</span><span class="s2">&#34;zh_core_web_md&#34;</span><span class="p">)</span>

<span class="n">zh_words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;猫&#34;</span><span class="p">,</span> <span class="s2">&#34;狗&#34;</span><span class="p">,</span> <span class="s2">&#34;鱼&#34;</span><span class="p">,</span> <span class="s2">&#34;鲤鱼&#34;</span><span class="p">,</span> <span class="s2">&#34;男人&#34;</span><span class="p">,</span> <span class="s2">&#34;女人&#34;</span><span class="p">,</span>
         <span class="s2">&#34;国王&#34;</span><span class="p">,</span> <span class="s2">&#34;王后&#34;</span><span class="p">,</span> <span class="s2">&#34;医生&#34;</span><span class="p">,</span> <span class="s2">&#34;护士&#34;</span><span class="p">]</span>

<span class="n">zh_emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">zh_lang</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">zh_words</span><span class="p">])</span>
<span class="n">zh_emb</span><span class="o">.</span><span class="n">plot_interactive</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span><span class="n">zh_emb</span><span class="p">[</span><span class="s2">&#34;男人&#34;</span><span class="p">],</span> <span class="n">y_axis</span><span class="o">=</span><span class="n">zh_emb</span><span class="p">[</span><span class="s2">&#34;女人&#34;</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/chinese.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bloxs包 | 可在notebook中使用的交互可视化包</title>
      <link>https://textdata.cn/blog/bloxs_interactive_visualization/</link>
      <pubDate>Fri, 01 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/bloxs_interactive_visualization/</guid>
      <description>Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。</description>
      <content:encoded><![CDATA[<p>Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。</p>
<p>它适用于：Jupyter Notebook、Google Colab、Deepnote、Kaggle Notebook、<a href="https://github.com/mljar/mercury">Mercury</a>。</p>
<p><img loading="lazy" src="img/bloxs_demo.gif" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install bloxs
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">from bloxs import B
B(1234, &#34;Bloxs in notebook!&#34;)
</code></pre></div><p><img loading="lazy" src="img/test_bloxs.png" alt=""  />
</p>
<br>
<h2 id="案例">案例</h2>
<table>
<thead>
<tr>
<th>Bloxs</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td><img loading="lazy" src="img/number.png" alt=""  />
</td>
<td><code>B(1234, &quot;Bloxs in notebook!&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/percent.png" alt=""  />
</td>
<td><code>B(1999, &quot;Percent change!&quot;, percent_change=10)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/emojis.png" alt=""  />
</td>
<td><code>B(&quot;🎉🎉🎉&quot;, &quot;Works with emojis&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/progress.png" alt=""  />
</td>
<td><code>B(&quot;68%&quot;, &quot;Loading progress&quot;, progress=68)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/progress_color.png" alt=""  />
</td>
<td><code>B(&quot;68%&quot;, &quot;Loading progress&quot;, progress=68, color=&quot;green&quot;)</code> 颜色color参数可以设为&quot;blue&quot;, &ldquo;red&rdquo;, &ldquo;green&rdquo; 或十六进制表示 (例如&quot;#fa33fa&quot;)</td>
</tr>
<tr>
<td><img loading="lazy" src="img/line_chart.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display line chart&quot;, points=[1,4,2,3,5,6])</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/line_chart_color.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display line chart&quot;, points=[1,4,2,3,5,6], color=&quot;red&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/stepped.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display stepped chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;stepped&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/bar_chart.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display bar chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;bar&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/bar_chart_color.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display bar chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;bar&quot;, color=&quot;green&quot;)</code></td>
</tr>
</tbody>
</table>
<br>
<p>可以在一行内整合多个图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">B([
    B(1999, &#34;Percent change!&#34;, percent_change=10),
    B(&#34;🎉🎉🎉&#34;, &#34;Works with emojis&#34;),
    B(&#34;68%&#34;, &#34;Loading progress&#34;, progress=68),
    B(1234, &#34;Bloxs in notebook!&#34;)
])
</code></pre></div><p><img loading="lazy" src="img/several_bloxs_2.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">B([
    B(&#34;786&#34;, &#34;Display bar chart&#34;, points=[1,4,2,3,5,6], chart_type=&#34;bar&#34;, color=&#34;green&#34;),
    B(&#34;123&#34;, &#34;Display line chart&#34;, points=[1,4,2,3,5,6], color=&#34;red&#34;),
    B(&#34;123&#34;, &#34;Display stepped chart&#34;, points=[1,4,2,3,5,6], chart_type=&#34;stepped&#34;)
])
</code></pre></div><p><img loading="lazy" src="img/several_bloxs.png" alt=""  />
</p>
<br>
<p>如果想在自己电脑中实验上述代码，可以点击 <a href="https://deepnote.com/project/bloxs-ZNGnsap0R7ea8LeZY0uarQ/%2Fnotebook.ipynb">notebook</a> 下载。</p>
<br>
<h2 id="结合mercury用bloxs">结合Mercury用Bloxs</h2>
<p><a href="https://github.com/mljar/mercury">Mercury</a> 是一个用于将笔记本转换为交互式网络应用程序的框架。 它基于 YAML 配置将小部件添加到笔记本中。 下面展示了一个带有 bloxs 的笔记本，以及作为 Mercury 的 Web 应用程序的同一笔记本。</p>
<p><img loading="lazy" src="img/bloxs_notebook.gif" alt=""  />
</p>
<br>
<h2 id="mercury网页应用">Mercury网页应用</h2>
<p><a href="https://mercury.mljar.com/app/5">Demo</a></p>
<p><img loading="lazy" src="img/bloxs_mercury.gif" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>极简浏览器启动页StartPage分享</title>
      <link>https://textdata.cn/blog/dengstartpage/</link>
      <pubDate>Fri, 01 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/dengstartpage/</guid>
      <description>最近一年多，大邓之前一直使用自己diy的浏览器启动页, 最初是被该启动页的关键词搜索功能所惊艳。但用久了人总会喜新厌旧，但是每次打开浏览器，呈现的网址链接效果太繁杂了。而且大多数都是僵尸链接，平常很少点击的，反而常用的链接都设置成了快捷键。</description>
      <content:encoded><![CDATA[<h2 id="dengs-startpage">Deng&rsquo;s StartPage</h2>
<p>最近一年多，大邓之前一直使用自己diy的<a href="https://textdata.cn/homepage/">浏览器启动页</a>, 最初是被该启动页的关键词搜索功能所惊艳。但用久了人总会喜新厌旧，但是每次打开浏览器，呈现的网址链接效果太繁杂了。而且大多数都是僵尸链接，平常很少点击的，反而常用的链接都设置成了快捷键。</p>
<p><img loading="lazy" src="img/old_homepage.png" alt=""  />
</p>
<p><br><br></p>
<p>经过一番搜索，找到以下9个启动页，除了startpage7和startpage8外，大多数启动页都具有<strong>快捷关键词搜索方法</strong>， 大家根据自己喜好进行选择。</p>
<h2 id="快捷关键词搜索方法">快捷关键词搜索方法</h2>
<p>4个启动页基本拥有相同的<strong>快捷关键词搜索方法</strong></p>
<ul>
<li>点击时钟，弹出日期框和倒计时信息。</li>
<li>搜索框支持<code>command/</code>搜索语法. 例如</li>
</ul>
<p>在搜索框输入<code>scholar/ python</code>回车，就能实现在谷歌学术中搜<strong>python</strong>相关信息。类似的功能还有。</p>
<table>
<thead>
<tr>
<th>搜索框命令</th>
<th>目标网站</th>
<th>例子</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>scholar/</td>
<td>google scholar</td>
<td><code>scholar/ python</code></td>
<td>在谷歌学术中搜<strong>python</strong>相关信息</td>
</tr>
<tr>
<td>book/</td>
<td>豆瓣读书</td>
<td><code>book/ python</code></td>
<td>在豆瓣读书中搜<strong>python</strong>相关书籍信息</td>
</tr>
<tr>
<td>zhihu/</td>
<td>知乎</td>
<td><code>zhihu/ python</code></td>
<td>在知乎网站搜python相关信息</td>
</tr>
<tr>
<td>youtube/</td>
<td>youtube</td>
<td><code>youtube/ python</code></td>
<td>在youtube搜索python相关视频</td>
</tr>
<tr>
<td>taobao/</td>
<td>淘宝</td>
<td><code>taobao/ python</code></td>
<td>在淘宝搜python相关商品服务</td>
</tr>
<tr>
<td>jd/</td>
<td>京东</td>
<td><code>jd/ python</code></td>
<td>在京东搜python相关商品服务</td>
</tr>
<tr>
<td>bilibili/</td>
<td>B站</td>
<td><code>bilibili/ python</code></td>
<td>在B站搜索python相关视频</td>
</tr>
<tr>
<td>github/</td>
<td>github</td>
<td><code>github/ python</code></td>
<td>在github上搜python相关仓库代码等信息</td>
</tr>
<tr>
<td>mail/</td>
<td>qq邮箱</td>
<td><code>mail/</code></td>
<td>默认打开qq邮箱</td>
</tr>
<tr>
<td>medium/</td>
<td>Medium</td>
<td><code>medium/ python</code></td>
<td>在medium中搜python相关内容</td>
</tr>
<tr>
<td>arxiv/</td>
<td>arxiv</td>
<td><code>arxiv/ python</code></td>
<td>在arXiv中搜python相关论文</td>
</tr>
<tr>
<td>img/</td>
<td>unsplash图片网</td>
<td><code>img/ sun</code></td>
<td>在unsplash中搜sun相关的图片</td>
</tr>
<tr>
<td>scihub/</td>
<td>scihub</td>
<td><code>scihub/ 论文的doi</code></td>
<td>在scihub中根据论文doi寻找论文pdf资源</td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h2 id="9个启动页">9个启动页</h2>
<p>9个启动页搜索功能略微有些差异，并不是所有的都具备<strong>快捷关键词搜索方法</strong>。</p>
<ul>
<li>第一类，有<strong>快捷关键词搜索方法</strong>，其中startpage1、2、3、5、6、9项目文件夹中使用了相同的搜索引擎js文件<strong>search-box.js</strong></li>
<li>第二类，有<strong>快捷关键词搜索方法</strong>， startpage4使用特有的js文件定义了常用的关键词检索方法，配置文件为<strong>config.js</strong>；</li>
<li>第三类，没<strong>快捷关键词搜索方法</strong>， startpage7、8各自使用的自由搜索引擎。</li>
</ul>
<br>
<h3 id="startpage1httpstextdatacnstartpage1"><a href="https://textdata.cn/startpage1/">startpage1</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage1/">Demo</a></p>
</li>
<li>
<p><a href="startpage1.zip">Code Download</a></p>
</li>
</ul>
<p>拥有<strong>关键词快捷搜索功能</strong>。简单到项目文件夹中只有html、js、css及字体4个文件。</p>
<p><img loading="lazy" src="img/startpage1.png" alt=""  />
</p>
<br>
<h3 id="startpage2httpstextdatacnstartpage2"><a href="https://textdata.cn/startpage2/">Startpage2</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage2/">Demo</a></p>
</li>
<li>
<p><a href="startpage2.zip">Code Download</a></p>
</li>
</ul>
<p>拥有<strong>关键词快捷搜索功能</strong>。如startpage1一般简单，项目文件夹中也只有html、js、css及字体4个文件。</p>
<p><img loading="lazy" src="img/startpage2.png" alt=""  />
</p>
<br>
<h3 id="startpage3httpstextdatacnstartpage3"><a href="https://textdata.cn/startpage3/">Startpage3</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage3/">Demo</a></p>
</li>
<li>
<p><a href="startpage3.zip">Code Download</a></p>
</li>
</ul>
<p>拥有<strong>关键词快捷搜索功能</strong>。相比前两个，这个启动页拥有自动背景切换功能，选取的都是漂亮的油画。</p>
<p><img loading="lazy" src="img/startpage3.png" alt=""  />
</p>
<br>
<h3 id="startpage4httpstextdatacnstartpage"><a href="https://textdata.cn/startpage/">Startpage4</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage/">Demo</a></p>
</li>
<li>
<p><a href="startpage.zip">Code Download</a></p>
</li>
</ul>
<p>拥有<strong>关键词快捷搜索功能</strong>。功能最强大，最炫酷的，大邓正在使用的启动页。</p>
<p><img loading="lazy" src="img/startpage4.png" alt=""  />
</p>
<br>
<h3 id="startpage5httpstextdatacnstartpage5"><a href="https://textdata.cn/startpage5/">Startpage5</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage5/">Demo</a></p>
</li>
<li>
<p><a href="startpage5.zip">Code Download</a></p>
</li>
</ul>
<p>拥有<strong>关键词快捷搜索功能</strong>。上方的黑色波浪是动画，实时变化。</p>
<p><img loading="lazy" src="img/startpage5.png" alt=""  />
</p>
<br>
<h3 id="startpage6httpstextdatacnstartpage6"><a href="https://textdata.cn/startpage6/">Startpage6</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage6/">Demo</a></p>
</li>
<li>
<p><a href="startpage6.zip">Code Download</a></p>
</li>
</ul>
<p>拥有<strong>关键词快捷搜索功能</strong>。</p>
<p><img loading="lazy" src="img/startpage6.png" alt=""  />
</p>
<br>
<h3 id="startpage7httpstextdatacnstartpage7"><a href="https://textdata.cn/startpage7/">Startpage7</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage7/">Demo</a></p>
</li>
<li>
<p><a href="startpage7.zip">Code Download</a></p>
</li>
</ul>
<p>注意，startpage7没有<strong>关键词快捷搜索功能</strong>。</p>
<p><img loading="lazy" src="img/startpage7.png" alt=""  />
</p>
<br>
<h3 id="startpage8httpstextdatacnstartpage8"><a href="https://textdata.cn/startpage8/">Startpage8</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage8/">Demo</a></p>
</li>
<li>
<p><a href="startpage8.zip">Code Download</a></p>
</li>
</ul>
<p>注意，startpage8没有<strong>关键词快捷搜索功能</strong>。</p>
<p><img loading="lazy" src="img/startpage8.png" alt=""  />
</p>
<br>
<h3 id="startpage9httpstextdatacnstartpage9"><a href="https://textdata.cn/startpage9/">Startpage9</a></h3>
<ul>
<li>
<p><a href="https://textdata.cn/startpage9/">Demo</a></p>
</li>
<li>
<p><a href="startpage9.zip">Code Download</a></p>
</li>
</ul>
<p>拥有<strong>关键词快捷搜索功能</strong>。</p>
<p><img loading="lazy" src="img/startpage9.png" alt=""  />
</p>
<br>
<br>
<h2 id="code使用方法">Code使用方法</h2>
<p>下载code压缩文件夹，以<strong>startpage1</strong>文件夹为例， 使用浏览器打开文件夹中的<strong>index.html</strong>文件，浏览器就是如下效果。</p>
<p><img loading="lazy" src="img/page1.png" alt=""  />
</p>
<p><img loading="lazy" src="img/startpage1.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>营销研究中文本分析应用概述(含案例及代码)</title>
      <link>https://textdata.cn/blog/automate_text_analysis_in_market/</link>
      <pubDate>Fri, 01 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/automate_text_analysis_in_market/</guid>
      <description>总结和探索了在营销研究中的应用，如情感分析、主题建模和研究组织沟通，包括对产品发布的口碑反应的案例研究。</description>
      <content:encoded><![CDATA[<h2 id="摘要">摘要</h2>
<p>在过去的二十年里，可供营销研究人员分析的文本数据量呈指数级增长。 然而，书面语言充满了复杂的含义、歧义和细微差别。 营销研究人员如何才能将这种丰富的语言表示转化为可量化的数据以进行统计分析和建模？ 本章介绍了文本分析各种方法。 在涵盖了文本分析的一些基础知识后，总结和探索了在<strong>营销研究</strong>中的应用，如<strong>情感分析、主题建模和研究组织沟通</strong>，包括对产品发布的口碑反应的案例研究。<br></p>
<h2 id="本文相关资料">本文相关资料</h2>
<blockquote>
<p><a href="2022_Book_HandbookOfMarketResearch.pdf">Christian Homburg, Martin Klarmann, and Arnd Vomberg. 2022. <em>Handbook of Market Research</em>.</a></p>
<p><a href="2019_AutomatedTextAnalysis.pdf">Humphreys A. (2019) Automated Text Analysis. In: Homburg C., Klarmann M., Vomberg A. (eds) Handbook of Market Research. Springer, Cham. https://doi.org/10.1007/978-3-319-05542-8_26-1</a></p>
<p><a href="https://academic.oup.com/jcr/article-abstract/44/6/1274/4283031">Humphreys, Ashlee, and Rebecca Jen-Hui Wang. &ldquo;Automated text analysis for consumer research.&rdquo; Journal of Consumer Research 44.6 (2018): 1274-1306.</a></p>
</blockquote>
<br>
<h2 id="关键词">关键词</h2>
<ul>
<li>
<p>文本分析Text analysis</p>
</li>
<li>
<p>计算机辅助文本分析computer-assisted text analysis</p>
</li>
<li>
<p>自动内容分析automated content analysis</p>
</li>
<li>
<p>内容分析content analysis</p>
</li>
<li>
<p>主题建模topic modeling</p>
</li>
<li>
<p>情感分析sentiment analysis</p>
</li>
<li>
<p>LDA主题分析LDA</p>
</li>
<li>
<p>口碑word-of-mouth</p>
</li>
</ul>
<br>
<h1 id="一引言">一、引言</h1>
<p>要了解<strong>自动文本分析(后文均简称文本分析)</strong>，首先要回顾一下它与<strong>传统内容分析</strong>的关系。<strong>内容分析</strong>是社会科学中用于系统地评估和分析消息内容的一种方法，通常以文本的形式，最早的内容分析传统可以追溯到 16 世纪的修道院生活，但现代内容分析是由 Max Weber (1924) 首次提出来研究新闻的。从那时起，<strong>社会学和传播学</strong>的学者就使用<strong>人类编码</strong>的内容分析来调查媒体内容的差异，<strong>描述传播随时间的趋势，揭示组织或个人关注的模式，并检查个人的态度、兴趣、意图或价值观或一组</strong>（例如，Berelson 1971；Gamson 和 Modigliani 1989）。</p>
<p>传统的内容分析首先通过 Kassarjian (1977) 的方法大纲引入<strong>消费者行为领域</strong>，然后由 Kolbe 和 Burnett (1991) 进行再创新，以提高可靠性和客观性，主要关注<strong>计算编码间一致性的标准</strong>（参见也格雷森和锈 2001）。在消费者研究和营销中，传统的内容分析已被用于分析<strong>杂志广告</strong>（Belk 和 Pollay 1985）、<strong>直邮direct mail</strong>（Stevenson 和 Swayne 1999）、<strong>报纸文章</strong>（Garrett 1987）和<strong>口碑传播</strong>（Moore 2015；菲尔普斯等人 2004）。虽然文本分析可以提高传统内容分析的效率和可靠性，但它也有局限性。例如，计算机化的文本分析可能会遗漏文本中的细微之处，并且无法编码更精细的含义。</p>
<p>文本分析并不是什么新鲜事，但自从个人计算机广泛采用以来，它已经变得更容易实现了。 <strong>General Inquirer</strong> (Stone 1966) 是最早用于消费者研究的计算机内容分析工具之一 (Kranz 1970)。 Kranz (1970) 对营销中内容分析涉及<strong>字典创建</strong>，但没有解决<strong>类别创建</strong>、<strong>有效性</strong>等。从那时起，在文本分析方面取得了长足的进步。</p>
<br>
<h1 id="二文本分析的方法">二、文本分析的方法</h1>
<p>在当前实践中，自动化文本分析基本上有词典法、机器学习法（分类方法、主题模型）。</p>
<h2 id="21-词典法">2.1 词典法</h2>
<p><strong>研究者测度文本中某些构念(概念)前，首先需要寻找到文本中存在的规律，通过构建单词列表或一组规则来完成(识别或)测量</strong>（Rayson 2009）。该方法已广泛用于社会科学，如消费者研究（Humphreys 和 Wang 2018）、心理学（Chung 和 Pennebaker 2013；Mehl 和 Gill 2008；Pennebaker 和 King 1999）、社会学（Van de Rijt 等人） . 2013) 和政治学 (Grimmer and Stewart 2013; Lasswell and Leites 1949)，<strong>因为词典法能够将理论构念转化为可测度的文本元素，并且算法具有可靠的透明度(相比而言，机器学习算法更像是黑箱)</strong>。另一方面，自下而上的方法在工程、计算机科学和营销科学中得到了更广泛的应用。营销策略借鉴了这两种方法，尽管基于字典的方法似乎更常见（Ertimur 和 CoskunerBalli 2015；Humphreys 2010；Ludwig 等人 2013；Packard 等人 2014）。</p>
<p>基于字典的文本分析方法基于预先开发的单词列表或字典，用于计算文本中单词的出现次数。标准化词典可用于许多构造，例如情绪（例如，Hutto 和 Gilbert 2014）、与营销相关的构造，例如真实性和品牌个性（Kovács 等人 2013；Opoku 等人 2006），以及心理学中的许多标准概念(Pennebaker et al. 2001; Snefjella and Kuperman 2015) 和其他领域，如政治学 (Dunphy et al. 1974; Stone 1966)。除了使用标准字典外，许多研究人员选择创建自己的字典以适应特定的上下文，尽管只有在标准字典不可用时才应该这样做。</p>
<p><strong>字典创建最归纳的方法是根据研究问题和假设的相关类别，先从文档中按频率列出的所有单词和词组（Chung and Pennebaker 2013）</strong>。如果研究人员事先不知道哪些类别是相关的，则可以使用在词典开发之前，使用定性研究方法，编码过程中创建一组相关概念及对应的单词列表，（Humphreys 2010）。例如，为了研究报纸文章中与瑜伽行业有关的制度逻辑，Ertimur 和Coskuner-Balli (2015) 首先主轴编码了报纸文章和其他历史文本的数据集。通常，数据集中随机选取10-20% 的样本足以进行编码（Humphreys 和 Wang 2018），但研究人员应注意数据量，根据类别或时间段的不均匀性，相应地进行分层处理（Humphreys 2010）。</p>
<p><strong>字典创建的最演绎方法是从理论概念或类别创建一个词表</strong>。然而，应该注意研究人员和作家倾向于选择比文本数据中普遍存在的更抽象的词（Palmquist 等人，2009 年）。出于这个原因，仔细的<strong>后测验证</strong>是必要的，以确保词典结构的有效性。在清理和存储文本并创建字典后，研究人员使用 Python、Diction、LIWC、WordStat 或 R 等程序来执行计数。然后可以使用传统的统计包保存和分析数据。</p>
<p>词典构建过程中，如果要进行<strong>后测验证</strong>，有很多方法检验方法。</p>
<ol>
<li>彭内贝克等人 (2001) 推荐了一种验证字典的方法，但不推荐结果测量。在这里，三个研究助理将一个词视为该类别的代表或不代表，如果三个编码员中有两个同意，则保留该词。如果他们不这样做，则应从字典中删除该词。然后可以计算和报告字典类别的百分比协议，一般阈值与 Krippendorf 的 alpha 相似，高于 75%。</li>
<li>Weber (2005) 提出了一个饱和程序，研究人员从一个概念的 10 或 20 个实例中抽取样本，并让研究助理将它们编码为准确地代表类别（或不代表）。如果比率低于 80%，则应修改字典类别，直到达到阈值。</li>
<li>最后一种方法是将计算机编码的结果与来自两个或更多编码器的大量人工编码结果进行比较。为此，人们从数据集中选择一个随机样本（数量可能会因数据集的大小而异），然后人工编码人员根据类别描述对文本进行编码，并像在传统内容分析中一样计算可靠性。然后可以将其与计算机的附加“编码器”进行比较以产生相似度分数。尽管这种最终方法具有与传统内容分析比较的优势，但它并不总是必要的，并且在某些情况下会产生错误的结果。人类编码员能够理解计算机无法获得的微妙含义，同样，计算机能够一致且均匀地在整个数据集上对概念进行编码，而不会出现遗漏或偏见。出于这个原因，在某些情况下，将人类编码与计算机编码进行比较就像将苹果与橙子进行比较。</li>
</ol>
<p>基于词典的分析已研究了很多领域的理论概念，例如<strong>情感emotion</strong>（Berger 和 Milkman 2012）、<strong>解释水平construal level</strong>（Snefjella 和 Kuperman 2015）、<strong>制度逻辑institutional logics</strong>（Ertimur 和 Coskuner-Balli 2015）、<strong>风险risk</strong>（Humphreys 和 Thompson 2014）、 <strong>言语行为speech acts</strong>（Ludwig et al. 2016; Villarroel Ordenes et al. 2017）和<strong>框架framing</strong>（Fiss and Hirsch 2005; Humphreys and Latour 2013; Jurafsky et al. 2014）。 <strong>可以通过基于词典的分析来探索各种上下文</strong>，例如产品和餐厅评论（Barasch 和 Berger 2014，Jurafsky 等人 2014；Kovács 等人 2013）、推文（Mogilner 等人 2010）、客户服务电话 (Packard et al. 2014)、博客 (Arsel and Bean 2013) 和新闻文章 (Humphreys 2010; Humphreys and Thompson 2014)。</p>
<br>
<h2 id="23-机器学习法">2.3 机器学习法</h2>
<p><strong>机器学习法又细分为分类算法和主题建模</strong>。</p>
<h3 id="231-分类方法">2.3.1 分类方法</h3>
<p><strong>分类方法基于将文档分类为不同的“类型”，然后进一步描述（计算）文本中哪些元素为该条文本数据的成为某“类型”贡献了多少权重(可能性)</strong>。例如，Tirunillai 和 Tellis (2012) 使用分类来训练一个机器模型，以根据星级来识别正面和负面评论。研究者对训练数据集，使用朴素贝叶斯和支持向量机 (SVM) 分类器来找出哪些词可以预测星级，然后使用这些信息对整个评论集进行分类，达到精确度——这意味着他们的算法预测真阳性——68-85% 的时间，取决于产品类别。 Villarroel Ordenes 等人（2017 年）通过使用文本中显式和隐式情绪指标来衡量情绪和情绪强度，进一步完善情绪测量，还在 Tripadvisor、亚马逊和 Barnes and Noble 的一组星级评论上测试了他们的框架。<strong>分类模型算法的复杂程度各不相同</strong>；例如，这些方法的情绪准确性从 55% 到 96% 不等（Hutto and Gilbert 2014）。</p>
<p>分类模型已被用于研究评论 (Tirunillai and Tellis 2012; Van Laer et al. 2017)、在线论坛 (Homburg et al. 2015)、电子邮件 (Ludwig et al. 2016) 和文学文本 (Boyd and Pennebaker 2015b; Plaisant 等人，2006 年）。例如，为了衡量留言板帖子的情绪，Homburg 等人（2015）对明确的正面和负面帖子的训练数据集进行分类。然后，他们使用情绪作为一个独立的衡量标准来了解公司参与实际上增加了多少积极的消费者情绪，发现参与的回报是递减的。</p>
<h3 id="232-主题建模">2.3.2 主题建模</h3>
<p>主题建模是一种方法，它首先将文本解析为离散的单词，然后假设单词出现是独立的情况下找到在统计上不太可能出现的共现模式（看不懂没关系，继续阅读）。通过这种方式，分析识别出可能由明显存在的词潜在表示的类别，然后标记这些词组以表示数据中有意义的概念或特征，就像在因子分析中所做的那样。例如，在酒店评论研究中，Mankad 等人。 (2016) <strong>使用潜在狄利克雷分配 (LDA) 来识别用户 TripAdvisor 评论中出现的五个主题，将便利设施、位置、交易、价值和体验确定为评论者提到的关键主题</strong>。潜在语义分析 (LSA)、k-means 聚类 (Lee and Bradlow 2011)、概率潜在语义分析 (PLSA) 和 LDA (Blei et al. 2003) 都是主题建模的方法，其中 LDA 是最新和最常见的方法主题建模的分析方法。</p>
<p>LDA 是一种分层贝叶斯模型，用于确定给定文档中存在的主题概率分布组合。 <strong>LDA主题建模前需要研究者设定主题的数量</strong>。假设主题的选择存在一定的概率分布，并且在该分布中选择表示该主题的词有一定的分布，LDA 会生成最终的主题列表（由该主题中的词列表表示）和给定主题在文档中的概率。尽管大多数方法都是基于单词或短语的，但 Büschken 和 Allenby (2016) 使用句子作为分析单位进行了 LDA 分析，并发现这产生的结果比基于单词的 LDA 更能预测评分。基于句子的模型假设句子中的所有单词都是同一主题的一部分，考虑到 Grice 的关系和方式准则（Grice 1975），这是合理的。 Büschken 和 Allenby (2016) 使用此模型从 Expedia 和 we8there.com 上的评论中识别意大利餐厅和酒店的主题。</p>
<p>LDA 已在广泛的应用中使用（Büschken 和 Allenby 2016；Tirunillai 和 Tellis 2014）。<strong>与词典法一样，后测验证，在这种情况下，使用保留样本或其他预测技术（例如，外部 DV）是非常可取的</strong>。机器只会读取字面意思，因此同音异义词和包括讽刺在内的其他口语可能会出现问题，因为它们是过于笼统和过于具体的词。此外，仔细清理和准备文本可以减少错误，因为有时可以在数据收集期间添加文本标记（例如，页眉、页脚等）。</p>
<br>
<h1 id="三文本分析的市场研究应用">三、文本分析的市场研究应用</h1>
<h2 id="31-情感分析">3.1 情感分析</h2>
<p>许多文本分析程序和从业者声称可以衡量情绪，但并不总是清楚这个关键指标的内涵。在讨论情感的文本分析之前，首先要讨论<strong>什么是情感</strong>、<strong>情感能体现文本中的什么信息</strong>。在大多数营销环境中，研究人员和从业者都对消费者对品牌、产品或服务的态度感兴趣。然而，<strong>态度是复杂的心理结构，不仅由情感组成，还包括认知信念和意图</strong>（Fishbein 和 Ajzen 1972）。此外，对于任何给定产品的最终购买态度和未来行为（如忠诚度）的重要性在很大程度上取决于上下文和参与（Petty 和 Cacioppo 1979）。人们在网上表达的态度可能并不能完全反映他们的潜在态度，他们选择表达的态度可能存在选择偏差，并且他们的行为也可能与他们所支持的态度不同。<strong>尽管如此，以情感表达的在线话语可以反映对品牌、产品或服务的某种潜在态度，并且重要的是可以影响其他消费者之间共享的社会共识</strong>。情绪已被证明可以预测电影销量（Krauss et al. 2008; Mestyán et al. 2013）和股票市场回报（Bollen et al. 2011; De Choudhury et al. 2008; Tirunillai and Tellis 2012）。</p>
<p><strong>情感得分的计算方法</strong></p>
<ul>
<li>
<p>大多数方法试图将文本分类或测量为具有积极、消极或有时是中性的情绪</p>
</li>
<li>
<p>另一些方法将其转化为净情绪，从积极的词中减去消极词（例如，Ludwig et al. 2013; Homburg et al. 2015 ）。</p>
</li>
</ul>
<p>除了<strong>情感效价valence，情绪也可以有强度strength和确定性certainty</strong>。先前的研究使用了明确的、语义的情感指标以及隐含的、更实用的情感指标，如**言语行为speech acts（委托、断言和方向）**来成功测量情感强度（Villarroel Ordenes 等人，2017 年）。进一步研究表明，其他类型言语，如指示语 (Potts and Schwarz 2010) 和其他语用标记可以指示表达性内容，通常在产品评论中表达 (Constant et al. 2009)。</p>
<p>使用预先开发的标准化词典是衡量跨上下文情绪的最可靠方法之一，因为这些词汇表已经开发并在广泛的文本数据上进行了测试。例如，<strong>VADAR</strong>(一种英文情感词典)使用带有基于规则的方法的字典来测量情绪。具体来说，Hutto 和 Gilbert (2014) 使用了基于以前标准化词典（如 LIWC 和 General Inquirer）的词典组合，但随后还开发了五个规则，这些规则考虑了句法和语法来衡量强度。使用词典法衡量情绪产生的准确率从 55% 到 96% 不等，具体取决于上下文（Hutto 和 Gilbert 2014）。 例如，Tirunillai 和 Tellis (2012) 使用星级来创建情绪分类系统，准确率为 68-85%。<br></p>
<h2 id="32-通过文本分析研究口碑">3.2 通过文本分析研究口碑</h2>
<p>迄今为止，文本分析在营销研究中的主要用途是研究在线口碑传播。消费者总是通过人际交流来分享产品信息（Arndt 1967），这种交流已被证明比商业信息更有效（Brown 和 Reingen 1987；另见 Godes 和 Mayzlin 2004；Money 等人 1998）。然而，虽然口碑传播以前是通过面对面或电话进行的，但现在它可以在社交购物网站（Stephen 和 Toubia 2010）、社交媒体（Humphreys 2015）和第三方评论网站上看到并存档和平台。亚马逊上的产品评论、TripAdvisor 上的酒店评论和 Yelp 上的餐厅评论！都提供了营销见解，以更好地了解评级与销售额和股价之间的关系（Moe 和 Schweidel 2014；Schweidel 和 Moe 2014；Moe 和 Trusov 2011）。例如，Moe 和 Trusov (2011) 发现正面评论对销售有直接影响，但这种影响在某种程度上是短暂的，因为随着人们发布更多评分（即，帖子的社会动态导致评论变得相对更加负面）随着时间的推移）。此外，积极性可能因平台而异（Schweidel 和 Moe 2014；Villarroel Ordenes 等人 2017）。</p>
<p><strong>在线口碑可以通过测量情感效价、评论数量和评分分布的方差来表示</strong>（Godes 和 Mayzlin 2004）。评论数量和评分方差与现有的建模测量相对兼容，因为评论数可以聚合，评分的方差可以通过开始评级或其他用户输入来测量。<strong>情感效价虽然部分由星标衡量，但最好用情感衡量，这需要文本分析作为一种方法，将语言描述的非结构化数据转换为可纳入定量模型的数据</strong>。应该指出的是，<strong>除了情感效价之外，还有广泛的语言属性和语义内容可以为营销研究提供有用的信息</strong>（Humphreys and Wang 2018）。例如，Kovács 等人。 (2013) 表明，如果评论者在评论中提及<strong>真实性</strong>，即使在控制餐厅质量的情况下，餐厅的评分也会更高。</p>
<p>情感在口碑传播中的作用是一个关键话题。在一项关于分享新闻文章的研究中，Berger 和 Milkman (2012) 发现积极情绪会增加病毒式传播，但文章中存在强烈的负面情绪（如愤怒或焦虑）也会增加病毒式传播。还通过使用代词的文本分析研究了发送者和言语上下文的影响。使用第一人称人称代词（“I”、“me”）的标准字典，Packard 和 Wooten（2013 年）发现，消费者通过口耳相传更多地自我提升，以表明对特定领域的了解。消费者也被证明通过在向大量观众广播时分享较少的负面情绪来进行自我展示，而不是对较小的观众进行窄播（Barasch 和 Berger 2014）。在像电影一样评估产品时，消费者在表达对品味的看法与对质量的看法时，更有可能使用指代自己的代词（Spiller 和 Belogolova 2016）。</p>
<br>
<h2 id="33-创建公司产品定位图主题发现">3.3 创建公司(产品)定位图、主题发现</h2>
<p>文本分析可用于为品牌、公司或产品创建<strong>定位图</strong>，并根据特定类别中的属性可视化市场结构。**借助k-means 聚类算法或LDA 主题建模算法，可按一定的潜在逻辑(属性、品牌)，对文本中的常见词进行分组。**例如，为了从 Epinions.com 上的一组评论中创建相机市场结构的可视化，Lee 和 Bradlow (2011) 首先提取与特定属性（例如，电池寿命、照片质量）相关的短语，然后使用 k-means基于短语的相似性（计算为单词向量之间的余弦相似度）对短语进行聚类。分析发现消费者提到的和对消费者重要的属性存在差异，但在尺寸、设计和屏幕亮度等专家评论中却没有差异。同样，使用来自糖尿病论坛的文本数据，Netzer 等人。 (2012) 发现论坛上经常提到的几种副作用，但在 WebMD 之类的网站上却没有（例如，体重增加、肾脏问题）。</p>
<p>主题模型与心理学理论之间是兼容的，例如<strong>语义记忆中的传播激活</strong>（Collins and Loftus 1975）。例如，人们是在一定的语义记忆中谈论相关的品牌。受到该想法启发，Netzer 等人 (2012) 使用 Edmunds.com 的评论为汽车品牌制作感知地图，并将其与使用销售(调查)数据测度的品牌转换感知地图进行比较。在此过程中，他们发现基于文本分析的结果与基于销售或调查数据的结果之间存在一些显着差异。例如，根据销售数据，韩国品牌的汽车与日本品牌没有关联。但是，根据文本数据，这些品牌被归为一类。这表明，虽然文本分析可以捕捉认知关联，但这些关联不一定会转化为品牌转换等行为（表 1）。</p>
<table>
<thead>
<tr>
<th>文本分析方法</th>
<th>数据源</th>
<th>应用领域</th>
<th>算法</th>
<th>相关案例</th>
</tr>
</thead>
<tbody>
<tr>
<td>词典法</td>
<td>在线评论、论坛、新闻、公告、年报</td>
<td>情感(情绪)、心理(如解释水平)、品牌关注度、品牌价值、公司形象等</td>
<td>词频</td>
<td>Humphreys (2010), Berger and Milkman (2012), Packard et al. (2018)</td>
</tr>
<tr>
<td>分类法</td>
<td>在线评论、论坛、文献、推特、邮件</td>
<td>情感分析、欺诈识别、产品属性、市场结构</td>
<td>监督机器学习算法，如SVM、K近邻、朴素贝叶斯等</td>
<td>Homburg et al. (2015), Van Laer et al. (2018), Tirunillai and Tellis (2012)</td>
</tr>
<tr>
<td>主题模型</td>
<td>产品服务评论、在西安论坛</td>
<td>产品属性、定位图positioning、市场结构等</td>
<td>LDA、K-means</td>
<td>Netzer et al. (2012), Lee and Bradlow (2006), Buschken and Allenby (2016)</td>
</tr>
</tbody>
</table>
<br>
<h2 id="34-组织和公司环境的测量">3.4 组织和公司环境的测量</h2>
<p>最后，<strong>文本分析可用于通过分析股东报告、新闻稿和其他营销传播来衡量组织关注度</strong>。<strong>这些研究主要基于基于词典的分析，并且经常创建词典而不是使用标准化词典来适应行业或原始背景和研究问题</strong>。例如，学者们开发了字典来研究 <strong>企业社会责任语言</strong>随时间的变化，以揭示发展中国家的差异（Gandolfo et al. 2016）。在对年度报告的分析中，Lee 等人 (2004) 发现，披露负面信息时，如果倾向于向内寻找原因，这类公司一年后的股价较高，这表明将责任归咎于公司控制因素的组织似乎比那些不责任的组织更有控制力，因此投资者对负面事件的印象更佳。</p>
<p><strong>企业环境也可以通过测量媒体，如报纸、杂志和贸易出版物来捕捉</strong>。例如，Humphreys (2010) 表明，制度和文化环境的变化使美国的赌场赌博业合法化。 Humphreys 和 Thompson（2014 年）研究了两次危机（埃克森和 BP 漏油）之后的风险认知环境，并发现媒体的叙述有助于遏制这些灾难之后的风险认知。 Ertimur 和 Coskuner-Balli（Ertimur 和 Coskuner-Balli 2015）追溯了瑜伽行业如何随着时间的推移而变化，形成了影响行业内品牌和定位的独特制度逻辑。</p>
<br>
<h2 id="35-处理文本数据的问题">3.5 处理文本数据的问题</h2>
<p>尽管文本为分析消费者想法和市场战略领域研究提供了一个窗口，但在分析文本时仍有几个问题需要考虑。<strong>语言很少（如果有的话）遵循正态分布模式</strong>（Zipf 1932）。例如，像“a”、“he”和“there”这样的功能词在正常使用中占所有语言的 40% 左右。名词和动词等常用词占另外 59%，这些常用词中通常只有一小部分与研究问题相关。文本数据通常是左偏的（很多零），文档通常包含不同数量的单词，并且感兴趣的单词通常太少或太频繁出现而无法进行有意义的比较。由于这些原因，在计算出词频之后，研究人员通常会在统计分析之前对数据进行转换。此外，<strong>由于数据的非正态分布，许多检验（如 ANOVA）不适合</strong>。</p>
<p>因此，<strong>文本信息几乎就是表示为文档中单词的百分比（例如，Ludwig et al. 2013），并且通常使用对数转换来解释偏度</strong>（Netzer et al. 2012），尽管使用了几种可能的转换（曼宁等人，2008 年）。 <strong>Tf-idf</strong> 是一种经常用于解释词频的度量，由整个数据集中单词的总体频率标准化（有关计算 tf*idf 的详细信息，请参阅 Salton 和 McGill 1983，以及伴随的转换选项）。</p>
<p>用于测量共现的传统方法（例如 Pearson 相关性），必然导致一个问题，即数据集中存在大量的零（Netzer 等人，2012 年）。对此，<strong>研究人员经常使用余弦相似度或 Jaccard 距离来比较单词和文档</strong>。通常需要使用多种方法来计算共现的一系列稳健性检查，以确保结果不仅仅由于不经常或过于频繁出现的单词而出现（Monroe et al. 2009; Netzer et al. 2012）。例如，如果像“he他”这样的词很常见，那么与“airbag安全气囊”这样的不常见词相比，它可能与更多的词同时出现。然而，“安全气囊”这个词可能比“他”这样的人称代词更能<strong>概念可诊断性(信息量更大，更特别)</strong>。因为数据不是正态分布的，所以统计检验，例如 Mann-Whitney 检验，检验排名的显着性而不是绝对数，可以替代 ANOVA。</p>
<br>
<h1 id="四扩展专家和非专家之间产品发布的口碑差异">四、扩展：专家和非专家之间，产品发布的口碑差异</h1>
<p>本节介绍了一个文本分析案例，以词典法为例，将数据分析的过程分为六个阶段（转载自<em><strong>Humphreys and Wang (2018), Automated Text Analysis for Consumer Research, Journal of Consumer Research, 44(6), 1 (April), 1274–1306</strong></em>）。该案例研究消费者对 mp3 播放器/无线设备 Apple iTouch 产品发布的反应，在本文中只展示部分内容，展示从<strong>理论构念到文本分析大主要步骤。</strong>。</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>含义功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.识别研究问题</td>
<td>确定主题，以及与之对应的几个问题</td>
</tr>
<tr>
<td>2. <strong>数据采集</strong></td>
<td>识别数据源；<br>在线数据库或新闻；<br/>对已有非文本数据(书籍、刊物)的数字化；<br/>网络爬虫；<br/>访谈</td>
</tr>
<tr>
<td>3. <strong>定义构(概)念</strong></td>
<td>定性分析数据的子样本; <br/>为每个构念创建一个词典（单词列表）； <br/>让编码人员检查和完善词典;<br/>初步实施字典以检查误报和漏报</td>
</tr>
<tr>
<td>4. <strong>构念测量(计算)</strong></td>
<td>对原始数据计算相关构念 ;<br>根据研究问题，运行相关计算：<br/> 所有单词的百分比；<br>时间段或类别中的单词百分比；<br/>所有编码单词的百分比；<br/> 二进制（“属于某构念”或“不属于某构念”）</td>
</tr>
<tr>
<td>5. 解读&amp;分析</td>
<td>依文章、你那份对文本进行不同角度的分析；<br>通过不同角度进行比较;<br>对研究问题选择合适的统计方法:<br>方差分析ANOVA；<br>回归分析；<br/>相关分析；<br/></td>
</tr>
<tr>
<td>6. 后测验证</td>
<td>提取子样本并由研究助理或研究人员编码，根据 Krippendorf 的 alpha 计算所构建的词典的优劣合格与否</td>
</tr>
</tbody>
</table>
<br>
<h2 id="stage-1提出研究问题">Stage-1：提出研究问题</h2>
<p>本研究提出了一个具体的问题：</p>
<ol>
<li>在产品发布后，专家的反应与非专家的反应是否不同？</li>
<li>此外，随着产品的扩散，专家组与非专家组的口碑反应如何变化？</li>
</ol>
<p>专家的口口相传对产品采纳特别有影响，因此了解他们的观点会随着时间的推移以及与非专家群体的比较而发生变化是很重要的。 本研究选择的背景，即 Apple iTouch 的发布，是一个很好的研究案例，因为产品类别和评估产品的标准在推出时都是模棱两可的。</p>
<br>
<h2 id="stage-2-数据收集">Stage-2: 数据收集</h2>
<p>数据来自两个网站</p>
<ul>
<li>Amazon.com 亚马逊是一个销售从书籍到玩具的所有商品的网站，拥有广泛的受众； 来自Amazon的消费者评论被用来反映非专家或混合消费者的反应</li>
<li>CNET.com CNET 是一个专门用于技术的网站，并且可能拥有更专业的发帖人。来自CNET的用户评论被用来衡量专家的反应。</li>
</ul>
<p>研究者收集了Amazon.com 和 CNET.com关于iTouch文本数据，采集的时间窗口从2007 年 9 月 5 日到 2009 年 11 月 6 日。“iPod Touch”的关键字搜索用于收集当时对该产品可用的所有客户评论的分析。对设备多个版本（第一代和第二代）的评论包括在分析中，并根据发布日期进行了细分。第一代 iPod Touch 于 2007 年 9 月 5 日发布，第二代于 2008 年 9 月 9 日发布。</p>
<p>字段包括评论者(或发帖人)评论日期、发帖人姓名、评分、发帖人位置以及评论本身的文本都存储为单独的变量。从亚马逊收集了大约 204 个帖子，从 CNET 收集了 269 个帖子，产生的样本量足够高，可以在组之间进行统计比较。</p>
<br>
<h2 id="stage-3-定义构念">Stage-3: 定义构念</h2>
<p>信息处理领域的研究表明<strong>专家处理信息的方式与新手不同</strong>（Alba and Hutchinson 1987）。一般来说，</p>
<ul>
<li>专家们更多地从<strong>认知角度</strong>看待产品，评估产品属性而不是好处或用途（Maheswaran 和 Sternthal 1990；Maheswaran 等人 1996；Sujan 1985）。</li>
<li>新手只使用刻板印象信息，专家则使用属性信息和刻板印象线索（Maheswaran 1994）。</li>
<li>专家能够同化吸收适应信息的类别模糊性，这意味着专家能更快地适应新产品（Meyers-Levy 和 Tybout 1989）。</li>
<li>专家还倾向于以抽象的、更高的解释水平来进行判断（Hong and Sternthal 2010）。</li>
</ul>
<p>根据之前的研究，可以提出几个工作假设。我们希望进行的战略比较是关于专家与非专家如何评估产品以及这是否会随着时间而改变。首先，人们可能会期望专家会使用更多的认知语言，并且他们会更严格地评估设备。</p>
<p><strong>H1：专家会比新手使用更多的认知语言。</strong><br></p>
<p>其次，人们还期望专家会关注设备的功能，但非专家会更多地关注设备的使用（Maheswaran et al. 1996）。</p>
<p><strong>H2：专家会比非专家更多地讨论特征。</strong><br></p>
<p><strong>H3：非专家会比专家更多地讨论好处和用途。</strong><br></p>
<p>第三，随着时间的推移，人们可能会预测专家将能够吸收模棱两可的产品功能(属性)，而非专家则不会。因为专家可以更容易地处理模棱两可的类别信息，并且由于他们具有更高的解释水平，所以人们会预测他们比新手更喜欢这种模棱两可的产品，并且会学会吸收模棱两可的信息。例如，在这种情况下，设备的存储空间使其难以分类（手机与 mp3 播放器）。人们会期望专家会更快地理解这种模糊性，并且随着时间的推移，他们对这一特征的阐述会减少。</p>
<p><strong>H4：随着时间的推移，专家将较少谈论模棱两可的属性（例如，存储空间），而非专家将继续讨论模棱两可的属性。</strong><br>最后，先前的研究表明，这些关注点的差异，专家在功能上和非专家在利益方面的差异，会对产品评级产生不同的影响.也就是说，非专家的评级将取决于对娱乐等福利的评估，但专家评级将更多地受到特征的影响。</p>
<p><strong>H5：评级将由非专家的利益驱动。</strong><br></p>
<p><strong>H6：评级将由专家的特征驱动。</strong><br></p>
<p>这些只是在线口碑传播分析中可以探索的众多潜在假设中的一小部分。人们同样可以探索新技术的文化框架（Giesler 2008）或通过与博主进行产品评论来共同制作品牌传播（Kozinets 2010）。这里提出的问题——随着时间的推移，专家对新产品的反应是否与非专家不同？ – 旨在说明使用自动文本分析可以做什么，而不是对专业知识的心理属性进行严格测试。</p>
<Br>
<p>在这个说明性案例中， H1 到 H6 的<strong>关键构念</strong>是已知的：<strong>专家和非专家、认知表达、情感、产品特征、收益</strong>。有一些构念的测量——认知语言和情感语言——可以通过已有的LIWC词典（Pennebaker et al. 2001）获得。然而，剩下的构念，如产品的特征和收益是特定于上下文的，需要专门构建字典。此外，可能还有其他特征将专家与非专家区分开来。因此，本研究的文本分析，我们<strong>采用词典法</strong>进行构念的测量。</p>
<br>
<h2 id="stage-4-构念测量">Stage-4: 构念测量</h2>
<p>对于此分析，Pennebaker 等人开发的标准 LIWC 词典。 (2001) 除了自定义字典外还使用了。Table3 显示了标准化和自定义词典中使用的类别。标准词典包括诸如“我”之类的人称代词的类别，诸如形容词之类的词类，诸如积极和消极情绪之类的心理测量学预先测试的类别，以及诸如休闲leisure、家庭family和与朋友相关的语言之类的内容相关类别。</p>
<p>开发一个自定义词典来识别此处产品口碑数据的类别。研究人员不考虑不区分网站来源，从2个网站各选 10 条评论进行开放式编码。然后，从每个网站再选择 10 条评论并添加编码，直到达到饱和（Weber 2005）。总之，开发自定义词典所需的子样本是 60 条评论，每个网站有 30 条，约占所有评论的 11%。创建了十四个类别，每个类别平均包含六个单词。</p>
<blockquote>
<p>这一步主要是构建与理论构念相适应的词典，通过不同构念的词表测量不同的构念。Table3中Category是不同的构念(Category)，对应的词表是Words，通过Words词语出现次数就能计算(测量)文本中不同构念(Category)。</p>
</blockquote>
<p>评论的定性分析显示，发帖者倾向于从功能或美学角度谈论产品。因此，为与特征（例如 GPS、相机、硬盘、电池）和美学（例如，锐利、干净、性感、时尚）相关的词创建了字典类别。发帖人还反复关注设备的容量、产品的成本，并报告了他们在使用产品时遇到的问题。为这些问题中的每一个都创建了类别。因为可能有一些研究人员对产品用途的兴趣，并且因为发帖人经常提到娱乐和工作相关用途，所以为每种用途创建了类别。包括“大”与“小”的类别是因为先前的社会学理论表明 iPod 的成功来自其提供的过剩产品——大屏幕、过剩容量等（Sennett 2006）。当提到竞争产品时，创建了两个类别来计算，无论是在 Apple 品牌内部还是外部。</p>
<p>字典类别由三位编码人员验证，他们建议包含和排除的单词。表 3 中可以找到每个字典类别的编码员之间的百分比一致性。<strong>alpha平均一致性为 90%</strong>。文本文件通过 LIWC 程序运行，首先使用标准字典，然后使用自定义字典。从三组数据创建了一个电子表格：<strong>(1) 直接从网站收集的评论数据（例如，发布日期、产品评级），(2) 标准字典的计算机结果， (3) 自定义词典计算结果</strong>。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/%e8%a1%a83.png" width="100%" />
    
    
</figure>
</div>
<p>例如测量评论文本的Social processes指标(词频)，实现计算的代码写法有很多种，以下仅为其中一种（代码仅供参考）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#构建的自定义词典(词表)</span>
<span class="n">socialProcessWords</span><span class="o">=</span> <span class="p">[</span><span class="s1">&#39;mate&#39;</span><span class="p">,</span> <span class="s1">&#39;talk&#39;</span><span class="p">,</span> <span class="s1">&#39;they&#39;</span><span class="p">,</span> <span class="s1">&#39;child&#39;</span><span class="p">]</span>

<span class="c1">#待分析的某条评论文本</span>
<span class="n">comment</span> <span class="o">=</span> <span class="s1">&#39;Jim and Jam have a new iTouch.They talk the iTouch is wonderful.&#39;</span>

<span class="c1">#构念测量方法(统计评论文本中自定义词典词语出现的总次数)</span>
<span class="k">def</span> <span class="nf">calculate_SocialProcess</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">socialProcessWords</span><span class="p">:</span>
            <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">num</span>

<span class="c1">#返回运行结果</span>
<span class="n">socialProcessIndex</span> <span class="o">=</span> <span class="n">calculate_SocialProcess</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">comment</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;social process index is </span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">socialProcessIndex</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">2
</code></pre></div><h2 id="最后">最后</h2>
<p>对这篇案例感兴趣的童鞋可以直接阅读原文, 对**<a href="https://textdata.cn/blog/management_python_course/">python网络爬虫文本分析</a>**感兴趣的童鞋，也可点击课程介绍。</p>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="参考文献">参考文献</h2>
<blockquote>
<p>Christian Homburg, Martin Klarmann, and Arnd Vomberg. 2022. <em>Handbook of Market Research</em>. Cham, Switzerland: Springer. <a href="https://search.ebscohost.com/login.aspx?direct=true&amp;db=edsebk&amp;AN=3112347&amp;lang=zh-cn&amp;site=eds-live">https://search.ebscohost.com/login.aspx?direct=true&amp;db=edsebk&amp;AN=3112347&amp;lang=zh-cn&amp;site=eds-live</a>.</p>
<p>Humphreys A. (2019) Automated Text Analysis. In: Homburg C., Klarmann M., Vomberg A. (eds) Handbook of Market Research. Springer, Cham. <a href="https://doi.org/10.1007/978-3-319-05542-8_26-1">https://doi.org/10.1007/978-3-319-05542-8_26-1</a></p>
<p>Humphreys, Ashlee, and Rebecca Jen-Hui Wang. &ldquo;Automated text analysis for consumer research.&rdquo; Journal of Consumer Research 44.6 (2018): 1274-1306.</p>
</blockquote>
<br>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext库 |  Python文本分析包更新</title>
      <link>https://textdata.cn/blog/cntext_simplification/</link>
      <pubDate>Fri, 01 Apr 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/cntext_simplification/</guid>
      <description>扩展词典、情感分析、可阅读性，内置9种情感词典，涵盖中英文</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/hidadeng/cntext"><img loading="lazy" src="https://img.shields.io/badge/cntext-%e4%b8%ad%e6%96%87%e6%96%87%e6%9c%ac%e5%88%86%e6%9e%90%e5%ba%93-orange?style=for-the-badge&amp;logo=appveyor" alt=""  />
</a></p>
<p><a href="version1.2.md">旧版cntext入口</a></p>
<p>中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等</p>
<ul>
<li><a href="https://github.com/hidadeng/cntext">github地址</a> <code>https://github.com/hidadeng/cntext</code></li>
<li><a href="https://pypi.org/project/cntext/">pypi地址</a>  <code>https://pypi.org/project/cntext/</code></li>
<li><a href="https://ke.qq.com/course/482241?tuin=163164df">视频课-<strong>Python网络爬虫与文本数据分析</strong></a></li>
</ul>
<p>功能模块含</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>stats</strong>  文本统计指标
<ul>
<li><input checked="" disabled="" type="checkbox"> 词频统计</li>
<li><input checked="" disabled="" type="checkbox"> 可读性</li>
<li><input checked="" disabled="" type="checkbox"> 内置pkl词典</li>
<li><input checked="" disabled="" type="checkbox"> <strong>情感分析</strong></li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>dictionary</strong> 构建词表(典)
<ul>
<li><input checked="" disabled="" type="checkbox"> Sopmi 互信息扩充词典法</li>
<li><input checked="" disabled="" type="checkbox"> W2Vmodels 词向量扩充词典法</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>similarity</strong>   文本相似度
<ul>
<li><input checked="" disabled="" type="checkbox"> cos相似度</li>
<li><input checked="" disabled="" type="checkbox"> jaccard相似度</li>
<li><input checked="" disabled="" type="checkbox"> 编辑距离相似度</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>mind.py</strong> 计算文本中的认知方向（态度、偏见）</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install cntext
</code></pre></div><br>
<h2 id="quickstart">QuickStart</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">help</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">Help</span> <span class="nx">on</span> <span class="kn">package</span> <span class="nx">cntext</span><span class="p">:</span>

<span class="nx">NAME</span>
    <span class="nx">cntext</span>

<span class="nx">PACKAGE</span> <span class="nx">CONTENTS</span>
    <span class="nx">mind</span>
    <span class="nx">dictionary</span>
    <span class="nx">similarity</span>
    <span class="nx">stats</span>
</code></pre></div><br>
<h2 id="一stats">一、stats</h2>
<p>目前stats内置的函数有</p>
<ul>
<li><strong>readability</strong>  文本可读性</li>
<li><strong>term_freq</strong> 词频统计函数</li>
<li><strong>dict_pkl_list</strong>  获取cntext内置词典列表(pkl格式)</li>
<li><strong>load_pkl_dict</strong> 导入pkl词典文件</li>
<li><strong>sentiment</strong> 情感分析</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<h3 id="11--readability">1.1  readability</h3>
<p>文本可读性，指标越大，文章复杂度越高，可读性越差。</p>
<p>readability(text, lang=&lsquo;chinese&rsquo;)</p>
<ul>
<li>text: 文本字符串数据</li>
<li>lang: 语言类型，&ldquo;chinese&quot;或&quot;english&rdquo;，默认&quot;chinese&quot;</li>
</ul>
<p>**中文可读性 ** 算法参考自</p>
<blockquote>
<p>徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.</p>
<ul>
<li>readability1 &mdash;每个分句中的平均字数</li>
<li>readability2  &mdash;每个句子中副词和连词所占的比例</li>
<li>readability3  &mdash;参考Fog Index， readability3=(readability1+readability2)×0.5</li>
</ul>
</blockquote>
<p>​</p>
<p>以上三个指标越大，都说明文本的复杂程度越高，可读性越差。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>


<span class="n">ct</span><span class="o">.</span><span class="n">readability</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 28.0,
 &#39;readability2&#39;: 0.15789473684210525,
 &#39;readability3&#39;: 14.078947368421053}
</code></pre></div><br>
<p>句子中的符号变更会影响结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>
<span class="n">ct</span><span class="o">.</span><span class="n">readability</span><span class="p">(</span><span class="n">text2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 27.0,
 &#39;readability2&#39;: 0.16666666666666666,
 &#39;readability3&#39;: 13.583333333333334}
</code></pre></div><p><br><br></p>
<h3 id="12--term_freq">1.2  term_freq</h3>
<p>词频统计函数，返回Counter类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span> 

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<h3 id="13-dict_pkl_list">1.3 dict_pkl_list</h3>
<p>获取cntext内置词典列表(pkl格式)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># 获取cntext内置词典列表(pkl格式)</span>
<span class="n">ct</span><span class="o">.</span><span class="n">dict_pkl_list</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;DUTIR.pkl&#39;,
 &#39;HOWNET.pkl&#39;,
 &#39;sentiws.pkl&#39;,
 &#39;ChineseFinancialFormalUnformalSentiment.pkl&#39;,
 &#39;ANEW.pkl&#39;,
 &#39;LSD2015.pkl&#39;,
 &#39;NRC.pkl&#39;,
 &#39;geninqposneg.pkl&#39;,
 &#39;HuLiu.pkl&#39;,
 &#39;AFINN.pkl&#39;,
 &#39;ADV_CONJ.pkl&#39;,
 &#39;LoughranMcDonald.pkl&#39;,
 &#39;STOPWORDS.pkl&#39;]
</code></pre></div><p>词典对应关系, 部分情感词典资料整理自 <a href="https://github.com/quanteda/quanteda.sentiment">quanteda.sentiment</a></p>
<table>
<thead>
<tr>
<th>pkl文件</th>
<th>词典</th>
<th>语言</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>DUTIR.pkl</td>
<td>大连理工大学情感本体库</td>
<td>中文</td>
<td>七大类情绪，<code>哀, 好, 惊, 惧, 乐, 怒, 恶</code></td>
</tr>
<tr>
<td>HOWNET.pkl</td>
<td>知网Hownet词典</td>
<td>中文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>sentiws.pkl</td>
<td>SentimentWortschatz (SentiWS)</td>
<td>英文</td>
<td>正面词、负面词；<br>效价</td>
</tr>
<tr>
<td>ChineseFinancialFormalUnformalSentiment.pkl</td>
<td>金融领域正式、非正式；积极消极</td>
<td>中文</td>
<td>formal-pos、<br>formal-neg；<br>unformal-pos、<br>unformal-neg</td>
</tr>
<tr>
<td>ANEW.pkl</td>
<td>英语单词的情感规范Affective Norms for English Words (ANEW)</td>
<td>英文</td>
<td>词语效价信息</td>
</tr>
<tr>
<td>LSD2015.pkl</td>
<td>Lexicoder Sentiment Dictionary (2015)</td>
<td>英文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>NRC.pkl</td>
<td>NRC Word-Emotion Association Lexicon</td>
<td>英文</td>
<td>细粒度情绪词；</td>
</tr>
<tr>
<td>geninqposneg.pkl</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>HuLiu.pkl</td>
<td>Hu&amp;Liu (2004)正、负情感词典</td>
<td>英文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>AFINN.pkl</td>
<td>尼尔森 (2011) 的“新 ANEW”效价词表</td>
<td>英文</td>
<td>情感效价信息valence</td>
</tr>
<tr>
<td>LoughranMcDonald.pkl</td>
<td>会计金融LM词典</td>
<td>英文</td>
<td>金融领域正、负面情感词</td>
</tr>
<tr>
<td>ADV_CONJ.pkl</td>
<td>副词连词</td>
<td>中文</td>
<td></td>
</tr>
<tr>
<td>STOPWORDS.pkl</td>
<td></td>
<td>中、英</td>
<td>停用词</td>
</tr>
</tbody>
</table>
<h3 id="注意">注意:</h3>
<ul>
<li>
<p>如果用户情绪分析时使用DUTIR词典发表论文，请在论文中添加诸如“使用了大连理工大学信息检索研究室的情感词汇本体” 字样加以声明。参考文献中加入引文“徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.”</p>
</li>
<li>
<p>如果大家有制作的词典，可以上传至百度网盘，并在issue中留下词典的网盘链接。如词典需要使用声明，可连同文献出处一起issue</p>
</li>
</ul>
<br>
<h3 id="14-load_pkl_dict">1.4 load_pkl_dict</h3>
<p>导入pkl词典文件，返回字典样式数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># 导入pkl词典文件,</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;DUTIR&#39;: {&#39;哀&#39;: [&#39;怀想&#39;, &#39;治丝而棼&#39;, ...],
           &#39;好&#39;: [&#39;进贤黜奸&#39;, &#39;清醇&#39;, &#39;放达&#39;, ...], 
           &#39;惊&#39;: [&#39;惊奇不已&#39;, &#39;魂惊魄惕&#39;, &#39;海外奇谈&#39;,...],
           &#39;惧&#39;: [&#39;忸忸怩怩&#39;, &#39;谈虎色变&#39;, &#39;手忙脚乱&#39;, &#39;刿目怵心&#39;,...],
           &#39;乐&#39;: [&#39;百龄眉寿&#39;, &#39;娱心&#39;, &#39;如意&#39;, &#39;喜糖&#39;,...],
           &#39;怒&#39;: [&#39;饮恨吞声&#39;, &#39;扬眉瞬目&#39;,...],
           &#39;恶&#39;: [&#39;出逃&#39;, &#39;鱼肉百姓&#39;, &#39;移天易日&#39;,]
           }
</code></pre></div><br>
<h3 id="15-sentiment">1.5 sentiment</h3>
<p>sentiment(text, diction, lang=&lsquo;chinese&rsquo;)
使用diy词典进行情感分析，计算各个情绪词出现次数; 未考虑强度副词、否定词对情感的复杂影响，</p>
<ul>
<li>text:  待分析中文文本</li>
<li>diction:  情感词字典；</li>
<li>lang: 语言类型，&ldquo;chinese&quot;或&quot;english&rdquo;，默认&quot;chinese&quot;</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;我今天得奖了，很高兴，我要将快乐分享大家。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>
             <span class="n">diction</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">],</span>
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;哀_num&#39;: 0,
 &#39;好_num&#39;: 0,
 &#39;惊_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;乐_num&#39;: 2,
 &#39;怒_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;stopword_num&#39;: 8,
 &#39;word_num&#39;: 14,
 &#39;sentence_num&#39;: 1}
</code></pre></div><p>如果不适用pkl词典，可以自定义自己的词典，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">diction</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;高兴&#39;</span><span class="p">,</span> <span class="s1">&#39;快乐&#39;</span><span class="p">,</span> <span class="s1">&#39;分享&#39;</span><span class="p">],</span>
           <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;难过&#39;</span><span class="p">,</span> <span class="s1">&#39;悲伤&#39;</span><span class="p">],</span>
           <span class="s1">&#39;adv&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;很&#39;</span><span class="p">,</span> <span class="s1">&#39;特别&#39;</span><span class="p">]}</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;我今天得奖了，很高兴，我要将快乐分享大家。&#39;</span>
<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> 
             <span class="n">diction</span><span class="o">=</span><span class="n">diction</span><span class="p">,</span> 
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;pos_num&#39;: 3,
 &#39;neg_num&#39;: 0,
 &#39;adv_num&#39;: 1,
 &#39;stopword_num&#39;: 8,
 &#39;word_num&#39;: 14,
 &#39;sentence_num&#39;: 1}
</code></pre></div><p><br><br></p>
<h2 id="二dictionary">二、dictionary</h2>
<p>本模块用于构建词表(典),含</p>
<ul>
<li>SoPmi 共现法扩充词表(典)</li>
<li>W2VModels 词向量word2vec扩充词表(典)</li>
</ul>
<h3 id="21-sopmi-共现法">2.1 SoPmi 共现法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">sopmier</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">SoPmi</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span>
                   <span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_corpus.txt&#39;</span><span class="p">,</span>  <span class="c1">#原始数据，您的语料</span>
                   <span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_seed_words.txt&#39;</span><span class="p">,</span> <span class="c1">#人工标注的初始种子词</span>
                   <span class="p">)</span>   

<span class="n">sopmier</span><span class="o">.</span><span class="n">sopmi</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...Preprocess   Corpus ...
Step 2/4:...Collect co-occurrency information ...
Step 3/4:...Calculate   mutual information ...
Step 4/4:...Save    candidate words ...
Finish! used 44.49 s
</code></pre></div><br>
<h3 id="22-w2vmodels-词向量">2.2 W2VModels 词向量</h3>
<p><strong>特别要注意代码需要设定lang语言参数</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#初始化模型,需要设置lang参数。</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> 
                     <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>  <span class="c1">#语料数据 w2v_corpus.txt</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_corpus.txt&#39;</span><span class="p">)</span>


<span class="c1">#根据种子词，筛选出没类词最相近的前100个词</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/integrity.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/innovation.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/quality.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/respect.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/teamwork.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...Preprocess   corpus ...
Step 2/4:...Train  word2vec model
            used   174 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s

</code></pre></div><br>
<h3 id="需要注意">需要注意</h3>
<p>训练出的w2v模型可以后续中使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">w2v</span><span class="o">.</span><span class="n">model路径</span><span class="p">)</span>
<span class="c1">#找出word的词向量</span>
<span class="c1">#w2v_model.get_vector(word)</span>
<span class="c1">#更多w2_model方法查看</span>
<span class="c1">#help(w2_model)</span>
</code></pre></div><p>例如本代码，运行生成的结果路径<code>output/w2v_candi_words/w2v.model</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;output/w2v_candi_words/w2v.model&#39;</span><span class="p">)</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="s1">&#39;innovation&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;technology&#39;, 0.689210832118988),
 (&#39;infrastructure&#39;, 0.669672966003418),
 (&#39;resources&#39;, 0.6695448160171509),
 (&#39;talent&#39;, 0.6627111434936523),
 (&#39;execution&#39;, 0.6549549102783203),
 (&#39;marketing&#39;, 0.6533523797988892),
 (&#39;merchandising&#39;, 0.6504817008972168),
 (&#39;diversification&#39;, 0.6479553580284119),
 (&#39;expertise&#39;, 0.6446896195411682),
 (&#39;digital&#39;, 0.6326863765716553)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#获取词向量</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;innovation&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-0.45616838, -0.7799563 ,  0.56367606, -0.8570078 ,  0.600359  ,
       -0.6588043 ,  0.31116748, -0.11956959, -0.47599426,  0.21840936,
       -0.02268819,  0.1832016 ,  0.24452794,  0.01084935, -1.4213187 ,
        0.22840202,  0.46387577,  1.198386  , -0.621511  , -0.51598716,
        0.13352732,  0.04140598, -0.23470387,  0.6402956 ,  0.20394802,
        0.10799981,  0.24908689, -1.0117126 , -2.3168423 , -0.0402851 ,
        1.6886286 ,  0.5357047 ,  0.22932841, -0.6094084 ,  0.4515793 ,
       -0.5900931 ,  1.8684244 , -0.21056202,  0.29313338, -0.221067  ,
       -0.9535679 ,  0.07325   , -0.15823542,  1.1477109 ,  0.6716076 ,
       -1.0096023 ,  0.10605699,  1.4148282 ,  0.24576302,  0.5740349 ,
        0.19984631,  0.53964925,  0.41962907,  0.41497853, -1.0322098 ,
        0.01090925,  0.54345983,  0.806317  ,  0.31737605, -0.7965337 ,
        0.9282971 , -0.8775608 , -0.26852605, -0.06743863,  0.42815775,
       -0.11774074, -0.17956367,  0.88813037, -0.46279573, -1.0841943 ,
       -0.06798118,  0.4493006 ,  0.71962464, -0.02876493,  1.0282255 ,
       -1.1993176 , -0.38734904, -0.15875885, -0.81085825, -0.07678922,
       -0.16753489,  0.14065655, -1.8609751 ,  0.03587054,  1.2792674 ,
        1.2732009 , -0.74120265, -0.98000383,  0.4521185 , -0.26387128,
        0.37045383,  0.3680011 ,  0.7197629 , -0.3570571 ,  0.8016917 ,
        0.39243212, -0.5027844 , -1.2106236 ,  0.6412354 , -0.878307  ],
      dtype=float32)
</code></pre></div><p><br><br></p>
<h2 id="23-co_occurrence_matrix">2.3 co_occurrence_matrix</h2>
<p>词共现矩阵</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I go to school every day by bus .&#34;</span><span class="p">,</span>
         <span class="s2">&#34;i go to theatre every night by bus&#34;</span><span class="p">]</span>

<span class="n">ct</span><span class="o">.</span><span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> 
                        <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="/Users/thunderhit/Desktop/Coding/Python/diyPython/cntext/img/co_occurrence1.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">documents2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;编程很好玩&#34;</span><span class="p">,</span>
             <span class="s2">&#34;Python是最好学的编程&#34;</span><span class="p">]</span>

<span class="n">ct</span><span class="o">.</span><span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents2</span><span class="p">,</span> 
                        <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="/Users/thunderhit/Desktop/Coding/Python/diyPython/cntext/img/co_occurrence2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="三similarity">三、similarity</h2>
<p>四种相似度计算函数</p>
<ul>
<li>cosine_sim(text1, text2)  cos余弦相似</li>
<li>jaccard_sim(text1, text2)     jaccard相似</li>
<li>minedit_sim(text1, text2)  最小编辑距离相似度；</li>
<li>simple_sim(text1, text2) 更改变动算法</li>
</ul>
<p>算法实现参考自 <code>Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.</code></p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span> 


<span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;编程真好玩编程真好玩&#39;</span>
<span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;游戏真好玩编程真好玩啊&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">cosine_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">jaccard_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">minedit_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">simple_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0.82
0.67
2.00
0.87
</code></pre></div><p><br><br></p>
<h2 id="四text2mind">四、Text2Mind</h2>
<p>词嵌入中蕴含着人类的认知信息，以往的词嵌入大多是比较一个概念中两组反义词与某对象的距离计算认知信息。</p>
<p>- <strong>多个对象在某概念的远近</strong>，职业与性别，某个职业是否存在亲近男性，而排斥女性</p>
<p>- 多个对象在某<strong>概念的分量(fen，一声)的多少</strong>， 人类语言中留存着对不同动物体积的认知记忆，如小鼠大象。动物词在词向量空间中是否能留存着这种大小的记忆</p>
<p>这两种认知分别可以用向量距离、向量语义投影计算得来。</p>
<ul>
<li>tm.sematic_distance(words, c_words1, c_words2)  向量距离</li>
<li>tm.sematic_projection(words, c_words1, c_words2)  向量语义投影</li>
</ul>
<h3 id="41-tmsematic_distancewords-c_words1-c_words2">4.1 tm.sematic_distance(words, c_words1, c_words2)</h3>
<p>分别计算words与c_words1、c_words2语义距离，返回距离差值。</p>
<p>例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">male_concept = [&#39;male&#39;, &#39;man&#39;, &#39;he&#39;, &#39;him&#39;]
female_concept = [&#39;female&#39;, &#39;woman&#39;, &#39;she&#39;, &#39;her&#39;]
software_engineer_concept  = [&#39;engineer&#39;,  &#39;programming&#39;,  &#39;software&#39;]
d1 = distance(male_concept,  software_engineer_concept)
d2 = distance(female_concept,  software_engineer_concept)
</code></pre></div><p>如果d1-d2&lt;0，说明在语义空间中，software_engineer_concept更接近male_concept，更远离female_concept。</p>
<p>换言之，在该语料中，人们对软件工程师这一类工作，对女性存在刻板印象(偏见)。</p>
<p><strong>下载glove_w2v.6B.100d.txt</strong>链接: <a href="https://pan.baidu.com/s/1MMfQ7M0YCzL9Klp4zrlHBw">https://pan.baidu.com/s/1MMfQ7M0YCzL9Klp4zrlHBw</a> 提取码: 72l0</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1">#Note: this is a word2vec format model</span>
<span class="n">tm</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">Text2Mind</span><span class="p">(</span><span class="n">w2v_model_path</span><span class="o">=</span><span class="s1">&#39;glove_w2v.6B.100d.txt&#39;</span><span class="p">)</span>

<span class="n">engineer</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;program&#39;</span><span class="p">,</span> <span class="s1">&#39;software&#39;</span><span class="p">,</span> <span class="s1">&#39;computer&#39;</span><span class="p">]</span>
<span class="n">mans</span> <span class="o">=</span>  <span class="p">[</span><span class="s2">&#34;man&#34;</span><span class="p">,</span> <span class="s2">&#34;he&#34;</span><span class="p">,</span> <span class="s2">&#34;him&#34;</span><span class="p">]</span>
<span class="n">womans</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;woman&#34;</span><span class="p">,</span> <span class="s2">&#34;she&#34;</span><span class="p">,</span> <span class="s2">&#34;her&#34;</span><span class="p">]</span>

<span class="c1">#在语义空间中，工程师更接近于男人，而不是女人。</span>
<span class="c1">#in semantic space, engineer is closer to man, other than woman.</span>
<span class="n">tm</span><span class="o">.</span><span class="n">sematic_distance</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">animals</span><span class="p">,</span> 
                    <span class="n">c_words1</span><span class="o">=</span><span class="n">mans</span><span class="p">,</span> 
                    <span class="n">c_words2</span><span class="o">=</span><span class="n">womans</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">-0.38
</code></pre></div><br>
<h3 id="42-tmsematic_projectionwords-c_words1-c_words2">4.2 tm.sematic_projection(words, c_words1, c_words2)</h3>
<p><strong>语义投影</strong>，根据两组反义词c_words1, c_words2构建一个概念(认知)向量, words中的每个词向量在概念向量中投影，即可得到认知信息。</p>
<p>分值越大，word越位于c_words2一侧。</p>
<p>下图是语义投影示例图，本文算法和图片均来自 &ldquo;Grand, G., Blank, I.A., Pereira, F. and Fedorenko, E., 2022. Semantic projection recovers rich human knowledge of multiple object features from word embeddings. <em>Nature Human Behaviour</em>, pp.1-13.&rdquo;</p>
<p><img loading="lazy" src="img/Nature_Semantic_projection_recovering_human_knowledge_of.png" alt=""  />
</p>
<p>例如，人类的语言中，存在尺寸、性别、年龄、政治、速度、财富等不同的概念。每个概念可以由两组反义词确定概念的向量方向。</p>
<p>以尺寸为例，动物在人类认知中可能存在体积尺寸大小差异。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">animals</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;mouse&#39;</span><span class="p">,</span> <span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="s1">&#39;horse&#39;</span><span class="p">,</span>  <span class="s1">&#39;pig&#39;</span><span class="p">,</span> <span class="s1">&#39;whale&#39;</span><span class="p">]</span>
<span class="n">smalls</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;small&#34;</span><span class="p">,</span> <span class="s2">&#34;little&#34;</span><span class="p">,</span> <span class="s2">&#34;tiny&#34;</span><span class="p">]</span>
<span class="n">bigs</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;large&#34;</span><span class="p">,</span> <span class="s2">&#34;big&#34;</span><span class="p">,</span> <span class="s2">&#34;huge&#34;</span><span class="p">]</span>

<span class="c1"># In size conception, mouse is smallest, horse is biggest.</span>
<span class="c1"># 在大小概念上，老鼠最小，马是最大的。</span>
<span class="n">tm</span><span class="o">.</span><span class="n">sematic_projection</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">animals</span><span class="p">,</span> 
                      <span class="n">c_words1</span><span class="o">=</span><span class="n">smalls</span><span class="p">,</span> 
                      <span class="n">c_words2</span><span class="o">=</span><span class="n">bigs</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;mouse&#39;, -1.68),
 (&#39;cat&#39;, -0.92),
 (&#39;pig&#39;, -0.46),
 (&#39;whale&#39;, -0.24),
 (&#39;horse&#39;, 0.4)]
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>置顶推荐 | Python语法入门(含视频)</title>
      <link>https://textdata.cn/blog/dadeng_python_basic_tutorial/</link>
      <pubDate>Fri, 01 Apr 2022 08:43:10 +0600</pubDate>
      
      <guid>/blog/dadeng_python_basic_tutorial/</guid>
      <description>在科学研究中，数据的获取及分析是最重要的也是最棘手的三个环节！在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的三个问题： </description>
      <content:encoded><![CDATA[<p>在科学研究中，数据的获取及分析是最重要的也是最棘手的三个环节！</p>
<p>在<strong>前大数据时代</strong>，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但<strong>大数据时代</strong>，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的三个问题：</p>
<ol>
<li><strong>Python语法</strong> 解决 <strong>如何通过电脑自动化帮我们做事情</strong>？</li>
<li><strong>网络爬虫技术</strong> 解决 如何从网络世界中高效地 <strong>采集数据</strong>？</li>
<li><strong>文本分析技术</strong> 解决 如何从杂乱的文本数据中<strong>抽取文本信息(变量)</strong>？</li>
</ol>
<br>
<h2 id="使用说明">使用说明</h2>
<p>目前<strong>Python语法入门</strong>部分已免费开放，最近将相关教程代码视频整合到大邓的博客中，</p>
<p><font color="blue" weight="bold"><b>博客地址 <a href="https://textdata.cn/">https://textdata.cn/</a></b></font></p>
<p><img loading="lazy" src="img/blog1.png" alt=""  />
</p>
<p>点击<strong>Python语法入门</strong>进入语法学习界面，一共有15篇基础知识。大家按照顺序，从上往下学习即可。</p>
<p><img loading="lazy" src="img/basic.png" alt=""  />
</p>
<p>例如，点击<strong>Python是一种语言</strong>, 可以看到页面中</p>
<ul>
<li>有B站视频</li>
<li>有课件下载地址</li>
<li>还有文档教程</li>
</ul>
<p><img loading="lazy" src="img/download.png" alt=""  />
</p>
<p>此外，为了方便大家学习交流，博客开通了<strong>留言评论</strong>功能(有github账号的童靴才可以留言。)。建议大家注册个github账号(<a href="https://github.com/">https://github.com/</a>)，不止为了留言，更主要的是可以在github中找到自己需要的代码。</p>
<p><img loading="lazy" src="img/comments.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="教程纲要">教程纲要</h2>
<ul>
<li><strong>课程目标：</strong> 掌握Python语法</li>
<li><strong>核心知识点：</strong> 数据类型、逻辑语句、常用内置函数、常用内置库</li>
<li><strong>环境配置:</strong>  安装anaconda，注意安装过程中勾选<strong>Add Anaconda to the system Path environment variable</strong>、<strong>Register Anaconda as the system python 3.x</strong></li>
<li><strong>课件资料：</strong> 本课程全部使用jupyter notebook文件作为课程课件，已全部上传至github中。</li>
</ul>
<p><br><br></p>
<h2 id="python语法入门">Python语法入门</h2>
<ul>
<li><a href="https://textdata.cn/blog/basic-01-python-is-a-language/">Python跟英语一样是一门语言</a></li>
<li>环境配置
<ul>
<li><a href="https://textdata.cn/blog/basic-03-mac-settings/">Mac配置</a></li>
<li><a href="https://textdata.cn/blog/basic-02-win-settings/">Win配置</a></li>
</ul>
</li>
<li><a href="https://textdata.cn/blog/basic-04-string/">数据类型-字符串</a></li>
<li><a href="https://textdata.cn/blog/basic-05-list-tuple-set/">数据类型-列表元组集合</a></li>
<li><a href="https://textdata.cn/blog/basic-06-dict/">数据类型-字典</a></li>
<li><a href="https://textdata.cn/blog/basic-07-boolean-none/">数据类型-布尔值、None</a></li>
<li><a href="https://textdata.cn/blog/basic-08-logical-if-else-try-except/">逻辑语句(if&amp;for&amp;tryexcept)</a></li>
<li><a href="https://textdata.cn/blog/basic-09-list-comprehension/">高级语法-列表推导式</a></li>
<li><a href="https://textdata.cn/blog/basic-10-understand-function/">高级语法-理解函数</a></li>
<li><a href="https://textdata.cn/blog/basic-11-built-function/">常用内置函数</a></li>
<li><a href="https://textdata.cn/blog/basic-12-pathlib/">pathlib路径库</a></li>
<li><a href="https://textdata.cn/blog/basic-13-csv/">内置库csv文件库</a></li>
<li><a href="https://textdata.cn/blog/basic-14-regex/">正则表达式re库</a></li>
<li><a href="https://textdata.cn/blog/basic-15-common-errors/">常见错误汇总</a></li>
</ul>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>streamlit|任务周期表生成器</title>
      <link>https://textdata.cn/blog/periodic-table-creator/</link>
      <pubDate>Tue, 29 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/periodic-table-creator/</guid>
      <description>这个周期表生成器的想法是创建一个关于 自然语言处理任务周期表的博客。 在 Streamlit 的帮助下并受到此 Bokeh的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1mu411i7Jv&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<p>这个<strong>周期表生成器</strong>的想法是创建一个关于 <a href="https://www.innerdoc.com/periodic-table-of-nlp-tasks/">自然语言处理任务周期表</a> 的博客。 在 Streamlit 的帮助下并受到此 Bokeh <a href="https://docs.bokeh.org/en/latest/docs/gallery/periodic.html">图库示例</a> 的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！</p>
<p>大邓的作用仅仅是将其汉化，没有做布局上的新创新。</p>
<br>
<h2 id="下载">下载</h2>
<p>点击下载<a href="periodic-table-creator.zip"><strong>periodic-table-creator</strong></a>项目压缩文件夹</p>
<br>
<p>下面是自定义的<strong>任务周期表</strong>示例。 在这种情况下：对于自然语言处理任务！</p>
<p><img loading="lazy" src="img/periodic-table-generator-customize-content.png" alt="alt text"  />
</p>
<br>
<h2 id="安装运行">安装&amp;运行</h2>
<p>打开命令行(终端),</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install streamlit==1.8.1
pip3 install bokeh==2.4.1


#切换至项目文件夹periodic-table-creator
cd periodic-table-creator

#运行streamlit
streamlit run periodic_table_creator.py
</code></pre></div><p>此时在命令行中会出现</p>
<p><img loading="lazy" src="img/terminal.png" alt=""  />
</p>
<p>点击<strong>Local URL</strong>对应的链接，或者将该链接复制粘贴到浏览器，即可访问。</p>
<p><img loading="lazy" src="img/firstrun.png" alt=""  />
</p>
<br>
<h2 id="导入数据">导入数据</h2>
<p>创建自己特有的<strong>任务周期表</strong>需要导入自由的csv数据。可以[点击这里] (periodic-table-creator/periodic_nlp.csv) 下载并查看数据格式，或者运行案例时， 点击按钮&quot;Edit CSV text&quot; 查看示例数据格式。</p>
<ul>
<li>表的字符名(列名): <code>atomicnumber;group;period;symbol;elementname;groupname;color;url;excerpt</code></li>
<li>csv文件的分隔符使用英文格式下的 <code>;</code>或<code>,</code></li>
<li>csv文件使用utf-8编码</li>
</ul>
<p><img loading="lazy" src="img/periodic-table-generator-load-content.png" alt=""  />
</p>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>doccano|为机器学习建模做数据标注</title>
      <link>https://textdata.cn/blog/doccano_text_anotation/</link>
      <pubDate>Mon, 28 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/doccano_text_anotation/</guid>
      <description>使用doccano，为机器学习建模做数据标注</description>
      <content:encoded><![CDATA[<h2 id="doccano">doccano</h2>
<p>doccano是开源的数据标注工具，可以简化数据标注的难度。需要注意，市面上的机器学习课程一般都默认数据已标注，在此基础上讲机器学习。</p>
<p><img loading="lazy" src="img/doccano.gif" alt=""  />
</p>
<p>您还可以将 doccano 与您的脚本集成，因为它将功能公开为API。 doccano API是在局域网内的网址链接，多台设备可打开浏览、标注。</p>
<br>
<h2 id="一标记流程">一、标记流程</h2>
<p>通过以下步骤开始和完成使用 doccano 的标签项目：</p>
<ol>
<li>安装doccano。</li>
<li>运行doccano。</li>
<li>设置标签项目。 选择标签项目的类型， 配置项目设置。</li>
<li>导入数据集。 您还可以导入带标签的数据集。</li>
<li>给项目添加<strong>标注人员</strong></li>
<li>给标志者定义标注工作文档说明</li>
<li>开始标记数据。</li>
<li>导出标记的数据集。</li>
</ol>
<br>
<h2 id="二配置环境">二、配置环境</h2>
<h3 id="21-安装">2.1 安装</h3>
<p>打开命令行（cmd、terminal）执行安装命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install doccano
</code></pre></div><br>
<h3 id="22-运行doccano">2.2 运行doccano</h3>
<p>在命令行（cmd、terminal）内依次执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#在电脑第一次运行的时候初始化doccano
#只需设置一次，之后不用再运行该命令
doccano init

#创建用户名及密码；例如现在有一个主管admin，两个标注员tom和jack
#设置好用户，之后不用再运行该命令
doccano createuser --username admin --password pass
doccano createuser --username tom --password pass
doccano createuser --username jack --password pass

#开启doccano服务
doccano webserver
</code></pre></div><p>完成上述操作后，另打开一个新的命令行，执行下列命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">doccano task
</code></pre></div><br>
<h2 id="三案例">三、案例</h2>
<p>下面我们以外卖评论数据为例，对评论进行判断，标注为正、负面情感。<a href="data.csv">点击下载data.csv</a></p>
<br>
<h3 id="31-创建项目">3.1 创建项目</h3>
<p>先登录用户名和密码，这里的admin是超级用户(权限最大)</p>
<p><img loading="lazy" src="img/signin.png" alt=""  />
</p>
<p>为创建项目，如图点击<strong>Create</strong>按钮。 根据需要选择合适的项目类别,这里选择的<strong>Text  Classification，</strong></p>
<p><strong>填写项目信息</strong>，例如项目名情感标注，简介、标注类型</p>
<p><img loading="lazy" src="img/create_project.png" alt=""  />
</p>
<p>根据需要选择项目的功能需求，例如允许单标签，把数据打乱随机显示， 用户之间共享标注</p>
<p><img loading="lazy" src="img/create_project2.png" alt=""  />
</p>
<br>
<h3 id="32-上传数据">3.2 上传数据</h3>
<p>创建项目后，点击<strong>Dataset</strong>按钮，点击<strong>Import dataset</strong>导入数据。我这里准备的是csv文件，拥有review和label两个字段。</p>
<p><img loading="lazy" src="img/import_dataset1.png" alt=""  />
</p>
<p><img loading="lazy" src="img/import_dataset2.png" alt=""  />
</p>
<p><img loading="lazy" src="img/import_dataset3.png" alt=""  />
</p>
<br>
<h3 id="33-定义标签">3.3 定义标签</h3>
<p>点击左侧菜单中的“<strong>Labels</strong>”按钮来定义我们的标签。 我们应该看到标签编辑器页面。 在标签编辑器页面中，您可以通过指定标签文本、快捷键、背景颜色和文本颜色来创建标签。</p>
<p><img loading="lazy" src="img/define_labels.png" alt=""  />
</p>
<p><img loading="lazy" src="img/define_labels1.png" alt=""  />
</p>
<p>同理，可以定义负面neg标签。现在有了pos和neg两个标签。</p>
<p><img loading="lazy" src="img/define_labels3.png" alt=""  />
</p>
<br>
<h3 id="34-添加成员">3.4 添加成员</h3>
<p>点击左侧目录中的 <code>Members</code> 按钮，</p>
<p><img loading="lazy" src="img/select_members.png" alt=""  />
</p>
<p>然后，选择“<strong>Add</strong>”按钮以显示表单。 使用您要添加到项目中的用户名和角色填写此表单。 然后，选择“<strong>Save</strong>”按钮。</p>
<p><img loading="lazy" src="img/select_user.png" alt=""  />
</p>
<p>如果没有可供选择的成员，记得创建成员。形如<code>doccano createuser --username tom --password pass</code></p>
<br>
<h3 id="35-开始标注">3.5 开始标注</h3>
<p>接下来，我们准备标注文本数据。 只需点击导航栏中的“<strong>Start annotation</strong>”按钮，我们就可以开始对文档进行批注了。</p>
<p><img loading="lazy" src="img/annotation.png" alt=""  />
</p>
<br>
<h3 id="36-导出数据">3.6 导出数据</h3>
<p>在注释步骤之后，我们可以下载标注后的数据。 转到“<strong>Dataset</strong>”页面，然后单击“操作”菜单中的“<strong>Export dataset</strong>”按钮。 选择导出格式后，单击“<strong>Export</strong>”。 您应该看到以下屏幕：</p>
<p><img loading="lazy" src="img/export_dataset.png" alt=""  />
</p>
<p>到出的结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;all.csv&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p><img loading="lazy" src="img/export_dataset2.png" alt=""  />
</p>
<br>
<h3 id="37-导出数据">3.7 导出数据</h3>
<p>对了，当标注过程不同阶段，还看查看标注工作量等可视化信息</p>
<p><img loading="lazy" src="img/vis.png" alt=""  />
</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用streamlit制作自然语言处理发展时间线页面</title>
      <link>https://textdata.cn/blog/nlp-history-timeline/</link>
      <pubDate>Sun, 27 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/nlp-history-timeline/</guid>
      <description>使用streamlit制作自然语言处理发展时间线页面</description>
      <content:encoded><![CDATA[<h2 id="说明">说明</h2>
<p>这个案例使用<a href="https://streamlit.io">Streamlit</a> 和 <a href="http://timeline.knightlab.com/">TimelineJS</a> 制作， 通过时间线方式展示自然语言处理领域发展。大家可以将其改造为公司发展时间线、人生里程碑时间线等等。</p>
<br>
<h2 id="下载运行">下载&amp;运行</h2>
<ul>
<li><a href="nlp-history-timeline.zip">点击此处下载代码</a>   <a href="https://textdata.cn/blog/nlp-history-timeline/nlp-history-timeline.zip">https://textdata.cn/blog/nlp-history-timeline/nlp-history-timeline.zip</a></li>
<li>解压nlp-history-timeline.zip文件夹，放置于<strong>桌面</strong></li>
<li>打开命令行(终端)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#切换到nlp-history-timeline
cd nlp-history-timeline

#安装需要的包
pip3 install -r requirements.txt

#运行timeline_app.py
streamlit run timeline_app.py
</code></pre></div><br>
<h2 id="使用方式">使用方式</h2>
<ul>
<li><a href="https://www.innerdoc.com/nlp-timeline-demo/">点击打开案例网站</a></li>
</ul>
<p>下面是网页的一个时间点</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/demo-timeline.png" width="100%" />
    
    <figcaption><small><i>自然语言处理发展时间线</i></small></figcaption>
</figure>
</div>
<br>
<p>你也可以浏览的原始数据文件，格式为json。下图可以看到json的是由</p>
<ul>
<li>36个字典，即36个时间点</li>
<li>每个字典中有很多字段，如url图片链接、headline、year年份、text简介等。</li>
</ul>
<div style="text-align: center;">
<figure >
    
        <img src="img/demo-data.png" width="100%" />
    
    <figcaption><small><i>时间线案例数据</i></small></figcaption>
</figure>
</div>
<br>
<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>营销科技 | 今天出门穿什么？时尚电商Stitch Fix</title>
      <link>https://textdata.cn/blog/stitchfix/</link>
      <pubDate>Sun, 27 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/stitchfix/</guid>
      <description>“穿衣服是大学问”，不相信可以问问很多女生，每天出门前会不会为了今天要穿什麽衣服而伤脑筋？现在如果有一家公司帮您聘请一个专属的“穿衣顾问”，只在一开始收费120多元（二十块美金）的造型费，然后定期寄来已经帮您量身打造的时尚服饰，您愿意买单吗？不瞒您说，目前全世球已有三百五十万人接受美国一家叫做“Stitch Fix”的穿衣时尚订阅公司的服务。</description>
      <content:encoded><![CDATA[<blockquote>
<ul>
<li>作者：蘇宇暉（台科大管研所博士候選人）、羅凱揚（台科大企管系博士）</li>
<li>日期: 2020-12-14</li>
<li>绘图：彭煖蘋</li>
<li>出处: <a href="https://medium.com/marketingdatascience/%E6%99%82%E5%B0%9A%E9%9B%BB%E5%95%86stitch-fix-6aed7636b2c9">medium</a></li>
</ul>
</blockquote>
<br>
<p>“穿衣服是大学问”，不相信可以问问很多女生，每天出门前会不会为了今天要穿什麽衣服而伤脑筋？现在如果有一家公司帮您聘请一个专属的“穿衣顾问”，只在一开始收费120多元（二十块美金）的造型费，然后定期寄来已经帮您量身打造的时尚服饰，您愿意买单吗？不瞒您说，目前全世球已有三百五十万人接受美国一家叫做“Stitch Fix”的穿衣时尚订阅公司的服务。</p>
<div style="text-align: center;">
<figure >
    <a href="https://www.stitchfix.com/">
        <img src="img/StitchFix.png" width="100%" />
    </a>
    <figcaption><small><i>点击浏览Stitch Fix网站</i></small></figcaption>
</figure>
</div>
<p>2011年6月，刚从哈佛大学商学院毕业的美日混血儿<strong>卡翠娜‧雷克</strong>（Katrina Lake），在美国旧金山成立时尚电商公司Stitch Fix。满脑子有趣想法的雷克，透过募集到的五十万美金，开始了她的创业之旅。短短不到七年的时间，到了2017年11月，Stitch Fix在美国Nasdaq上市。而卡翠娜‧雷克本人也成为2019年《福布斯》全美白手起家女富豪排行榜中的55名。</p>
<p><strong>Stitch Fix的背后，其实是一家充分利用营销研究和营销数据科学，同时提供“穿衣时尚订阅”服务的新创公司。现在让我们来看看，Stitch Fix如何运作</strong>，如图-1所示。</p>
<div style="text-align: center;">
<figure >
    <a href="https://www.stitchfix.com/">
        <img src="img/StitchFix%e8%bf%90%e4%bd%9c.png" width="100%" />
    </a>
    <figcaption><small><i>图-1 StitchFix运作</i></small></figcaption>
</figure>
</div>
<p>消费者在登录Stitch Fix的网站首页时，不会看到像其他购物网站会有太多的商品展示，反而是<strong>介绍穿衣风格才是重点</strong>。而<strong>网站会有造型师来塑造消费者的风格，并且透过这种新的购物方式力邀消费者加入会员</strong>。因此，当消费者在Stitch Fix的网站注册时，Stitch Fix会请会员填答一份详细的问卷，包括顾客的<strong>基本资料、身高、尺码、喜欢的颜色、风格、经常出席的场合、甚至是预算</strong>等。</p>
<p>接著，Stitch Fix每个月就会透过一个称为“<strong>订购盒子</strong>（Subscription Box）”的包裹，一次将五件服饰寄送给顾客。等到消费者收到包裹时，可以留下觉得满意的服饰，看不上眼或者不满意的服饰就再寄回给Stitch Fix。如果消费者将服饰全部留下，就会享受到折扣，反之，如果一件都不想买，就负担二十美元的包裹服务费。</p>
<p>在美国，消费者要买衣服，往往得开车到购物中心或百货公司，买个两三件衣服总要花上半天时间。Stitch Fix一次寄来五件衣服（连同一张纸本问卷），其实也经过精算，因为如果一次寄太多件，消费者心理和预算上都难以承受。而Stitch Fix透过消费者所填答的电脑和纸本问卷，以及购买与退换货记录，利用机器学习算法对消费者喜好与需求进行预测，并结合设计师的搭配，给消费者定制化的建议。因为喜欢的衣服被留下，不喜欢的退回，Stitch Fix就很容易利用这些大量数据建立起消费者穿衣风格的“模型”。</p>
<p>而为了进一步收集到更精准的数据，2017年，Stitch Fix推出了一款Style Shuffle的小游戏，让顾客针对不同的服饰或配件，简单回应喜爱或是不喜爱。借此更进一步收集消费者的偏好，并增加消费者的粘性。Stitch Fix后来并将触角伸向男性服饰以及儿童服饰。而大尺码的女性服饰更是其服务重点。</p>
<p>通过收集大量消费者用户数据，以及不断优化的模型算法，并结合个人造型师和机器学习（AI）进行个性化推荐，让Stitch Fix的时尚订阅制服务，能够更精准地预测与满足消费者偏好的服饰及配件。据了解，截至2019年，该公司拥有8,000名员工，其中包括5,100名造型师和100多名数据科学家。</p>
<p>从以上Stitch Fix的故事中，我们看到了营销研究与数据科学的完美搭配。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用altair绘制漂亮的股票价格趋势图</title>
      <link>https://textdata.cn/blog/time-series-annotation/</link>
      <pubDate>Sun, 27 Mar 2022 10:42:10 +0600</pubDate>
      
      <guid>/blog/time-series-annotation/</guid>
      <description>使用altair绘制漂亮的股票价格趋势图</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://share.streamlit.io/streamlit/example-app-time-series-annotation/main">
        <img src="img/stockevolution.svg" width="100%" />
    </a>
    <figcaption><small><i>点击</i></small></figcaption>
</figure>
</div>
<p>使用altair绘制漂亮的股票价格趋势图, 直接上代码。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">altair</span>
</code></pre></div><br>
<h2 id="案例数据">案例数据</h2>
<p>这里使用vega_datasets中提供的数据做测试，返回的结果是dataframe类型的数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">stocks</span><span class="p">()</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">source</span><span class="p">[</span><span class="n">source</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="s2">&#34;2004-01-01&#34;</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">source</span>

<span class="n">get_data</span><span class="p">()</span>
</code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>symbol</th>
      <th>date</th>
      <th>price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>49</th>
      <td>MSFT</td>
      <td>2004-02-01</td>
      <td>21.77</td>
    </tr>
    <tr>
      <th>50</th>
      <td>MSFT</td>
      <td>2004-03-01</td>
      <td>20.46</td>
    </tr>
    <tr>
      <th>51</th>
      <td>MSFT</td>
      <td>2004-04-01</td>
      <td>21.45</td>
    </tr>
    <tr>
      <th>52</th>
      <td>MSFT</td>
      <td>2004-05-01</td>
      <td>21.53</td>
    </tr>
    <tr>
      <th>53</th>
      <td>MSFT</td>
      <td>2004-06-01</td>
      <td>23.44</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>555</th>
      <td>AAPL</td>
      <td>2009-11-01</td>
      <td>199.91</td>
    </tr>
    <tr>
      <th>556</th>
      <td>AAPL</td>
      <td>2009-12-01</td>
      <td>210.73</td>
    </tr>
    <tr>
      <th>557</th>
      <td>AAPL</td>
      <td>2010-01-01</td>
      <td>192.06</td>
    </tr>
    <tr>
      <th>558</th>
      <td>AAPL</td>
      <td>2010-02-01</td>
      <td>204.62</td>
    </tr>
    <tr>
      <th>559</th>
      <td>AAPL</td>
      <td>2010-03-01</td>
      <td>223.02</td>
    </tr>
  </tbody>
</table>
<p>364 rows × 3 columns</p>
</div>
<br>
<h2 id="完整代码">完整代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">altair</span> <span class="k">as</span> <span class="nn">alt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>
<span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">stocks</span><span class="p">()</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">source</span><span class="p">[</span><span class="n">source</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="s2">&#34;2004-01-01&#34;</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">source</span>

<span class="k">def</span> <span class="nf">get_chart</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">hover</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">selection_single</span><span class="p">(</span>
        <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;date&#34;</span><span class="p">],</span>
        <span class="n">nearest</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">on</span><span class="o">=</span><span class="s2">&#34;mouseover&#34;</span><span class="p">,</span>
        <span class="n">empty</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">lines</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;股票价格趋势&#34;</span><span class="p">)</span>
        <span class="o">.</span><span class="n">mark_line</span><span class="p">()</span>
        <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
            <span class="n">x</span><span class="o">=</span><span class="s2">&#34;date&#34;</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="s2">&#34;price&#34;</span><span class="p">,</span>
            <span class="n">color</span><span class="o">=</span><span class="s2">&#34;symbol&#34;</span><span class="p">,</span>
            <span class="c1"># strokeDash=&#34;symbol&#34;,</span>
        <span class="p">)</span>
    <span class="p">)</span>

    <span class="c1"># Draw points on the line, and highlight based on selection</span>
    <span class="n">points</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">transform_filter</span><span class="p">(</span><span class="n">hover</span><span class="p">)</span><span class="o">.</span><span class="n">mark_circle</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">65</span><span class="p">)</span>

    <span class="c1"># Draw a rule at the location of the selection</span>
    <span class="n">tooltips</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
        <span class="o">.</span><span class="n">mark_rule</span><span class="p">()</span>
        <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
            <span class="n">x</span><span class="o">=</span><span class="s2">&#34;yearmonthdate(date)&#34;</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="s2">&#34;price&#34;</span><span class="p">,</span>
            <span class="n">opacity</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">condition</span><span class="p">(</span><span class="n">hover</span><span class="p">,</span> <span class="n">alt</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="mf">0.3</span><span class="p">),</span> <span class="n">alt</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span>
            <span class="n">tooltip</span><span class="o">=</span><span class="p">[</span>
                <span class="n">alt</span><span class="o">.</span><span class="n">Tooltip</span><span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;日期&#34;</span><span class="p">),</span>
                <span class="n">alt</span><span class="o">.</span><span class="n">Tooltip</span><span class="p">(</span><span class="s2">&#34;price&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;价格 (USD)&#34;</span><span class="p">),</span>
            <span class="p">],</span>
        <span class="p">)</span>
        <span class="o">.</span><span class="n">add_selection</span><span class="p">(</span><span class="n">hover</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="p">(</span><span class="n">lines</span> <span class="o">+</span> <span class="n">points</span> <span class="o">+</span> <span class="n">tooltips</span><span class="p">)</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>


<span class="c1"># Original time series chart. Omitted `get_chart` for clarity</span>
<span class="n">chart</span> <span class="o">=</span> <span class="n">get_chart</span><span class="p">(</span><span class="n">get_data</span><span class="p">())</span>

<span class="c1"># Input annotations</span>
<span class="n">ANNOTATIONS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="s2">&#34;Mar 01, 2008&#34;</span><span class="p">,</span> <span class="s2">&#34;Pretty good day for GOOG&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Dec 01, 2007&#34;</span><span class="p">,</span> <span class="s2">&#34;Something&#39;s going wrong for GOOG &amp; AAPL&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Nov 01, 2008&#34;</span><span class="p">,</span> <span class="s2">&#34;Market starts again thanks to...&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Dec 01, 2009&#34;</span><span class="p">,</span> <span class="s2">&#34;Small crash for GOOG after...&#34;</span><span class="p">),</span>
<span class="p">]</span>

<span class="c1"># Create a chart with annotations</span>
<span class="n">annotations_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">ANNOTATIONS</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="s2">&#34;event&#34;</span><span class="p">])</span>
<span class="n">annotations_df</span><span class="o">.</span><span class="n">date</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">annotations_df</span><span class="o">.</span><span class="n">date</span><span class="p">)</span>
<span class="n">annotations_df</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">annotation_layer</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">annotations_df</span><span class="p">)</span>
    <span class="o">.</span><span class="n">mark_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">ticker</span><span class="p">,</span> <span class="n">dx</span><span class="o">=</span><span class="n">ticker_dx</span><span class="p">,</span> <span class="n">dy</span><span class="o">=</span><span class="n">ticker_dy</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="s2">&#34;center&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="s2">&#34;date:T&#34;</span><span class="p">,</span>
        <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s2">&#34;y:Q&#34;</span><span class="p">),</span>
        <span class="n">tooltip</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;event&#34;</span><span class="p">],</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="p">)</span>



<span class="p">(</span><span class="n">chart</span> <span class="o">+</span> <span class="n">annotation_layer</span><span class="p">)</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/stockevolution.svg" alt=""  />
</p>
<br>
<h2 id="代码下载time-series-annotationzip"><a href="time-series-annotation.zip">代码下载</a></h2>
<br>
<h2 id="出处">出处</h2>
<p><a href="https://share.streamlit.io/streamlit/example-app-time-series-annotation/main">https://share.streamlit.io/streamlit/example-app-time-series-annotation/main</a></p>
<br>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用WeasyPrint自动生成pdf报告文件</title>
      <link>https://textdata.cn/blog/weasyprint_auto_report/</link>
      <pubDate>Sun, 27 Mar 2022 10:41:10 +0600</pubDate>
      
      <guid>/blog/weasyprint_auto_report/</guid>
      <description>自动化办公，可使用WeasyPrint自动生成pdf报告文件</description>
      <content:encoded><![CDATA[<p>Pandas非常善于处理大规模数据，支持将结果导出到CSV，Excel，HTML，json等文件中。 如果您想将 <code>多种信息（excel、图片等）组合</code> 到一个文档中，那么事情变得更加困难。 例如，如果要在一个Excel工作表上放置两个DataFrame，则需要使用相应的Excel库才能输出。 这当然是OK的，但走起来真不简单。 本文将介绍一种方法，将多种 <code>信息（excel、图片等）组合</code> 成一个 <code>HTML模板</code> ，然后使用<code>Jinja模板和WeasyPrint</code> 再将其转换为独立的PDF文档。</p>
<br>
<h2 id="操作流程">操作流程</h2>
<p>使用Pandas将数据输出到Excel文件中的多个工作表或者用DataFrames创建多个Excel文件非常方便。 但是，如果您想将 <code>多种信息（excel、图片等）组合</code> 输出到一个文件中，那么直接从Pandas进行操作的方法并不多。 幸运的是，万能的python大法有很多选项可以帮助我们。</p>
<p>在本文中，我将采用以下流程来创建多页PDF文档。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/pdf-conversion-pipeline.png" width="100%" />
    
    
</figure>
</div>
<br>
<h2 id="工具">工具</h2>
<p>我决定使用HTML作为模板语言，因为它可能是生成结构化数据最便捷的方法，支持各种格式数据（如图片、excel表）。我也认为每个人都知道（或可以弄清楚）足够的HTML知识来生成一个简单的报告。</p>
<p>这个工作流程中最困难的部分是弄清楚如何将HTML呈现为PDF。我觉得还没有最佳的解决方案，但我选择了 <code>WeasyPrint</code> ，因为它仍然在积极维护，我发现我可以相对容易地使它工作。作为替代方案，我过去使用过xhtml2pdf，它的效果也很好，遗憾的是该库缺乏文档说明，但它已存在一段时间，并且确实可以从HTML生成PDF。</p>
<br>
<h2 id="数据">数据</h2>
<p>如上所述，我们将使用之前文章中的相同数据集。 为了使这一切成为一个独立的文章，下面是我如何导入数据,做描述性统计，及并生成关于CPU和软件销售的 <code>数据透视表</code> 。</p>
<p>导入模块，并读入销售渠道信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;salesfunnel.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Account</th>
      <th>Name</th>
      <th>Rep</th>
      <th>Manager</th>
      <th>Product</th>
      <th>Quantity</th>
      <th>Price</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>1</td>
      <td>30000</td>
      <td>presented</td>
    </tr>
    <tr>
      <th>1</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>Software</td>
      <td>1</td>
      <td>10000</td>
      <td>presented</td>
    </tr>
    <tr>
      <th>2</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>Maintenance</td>
      <td>2</td>
      <td>5000</td>
      <td>pending</td>
    </tr>
    <tr>
      <th>3</th>
      <td>737550</td>
      <td>Fritsch, Russel and Anderson</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>1</td>
      <td>35000</td>
      <td>declined</td>
    </tr>
    <tr>
      <th>4</th>
      <td>146832</td>
      <td>Kiehn-Spinka</td>
      <td>Daniel Hilton</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>2</td>
      <td>65000</td>
      <td>won</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<p>对数据做透视表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sales_report</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Manager&#34;</span><span class="p">,</span> <span class="s2">&#34;Rep&#34;</span><span class="p">,</span> <span class="s2">&#34;Product&#34;</span><span class="p">],</span> 
                              <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Price&#34;</span><span class="p">,</span> <span class="s2">&#34;Quantity&#34;</span><span class="p">],</span>
                              <span class="n">aggfunc</span><span class="o">=</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">],</span> 
                              <span class="n">fill_value</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">sales_report</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}

.dataframe thead tr:last-of-type th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th colspan="2" halign="left">sum</th>
      <th colspan="2" halign="left">mean</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th>Price</th>
      <th>Quantity</th>
      <th>Price</th>
      <th>Quantity</th>
    </tr>
    <tr>
      <th>Manager</th>
      <th>Rep</th>
      <th>Product</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">Debra Henley</th>
      <th rowspan="3" valign="top">Craig Booker</th>
      <th>CPU</th>
      <td>65000</td>
      <td>2</td>
      <td>32500</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>Maintenance</th>
      <td>5000</td>
      <td>2</td>
      <td>5000</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>Software</th>
      <td>10000</td>
      <td>1</td>
      <td>10000</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">Daniel Hilton</th>
      <th>CPU</th>
      <td>105000</td>
      <td>4</td>
      <td>52500</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>Software</th>
      <td>10000</td>
      <td>1</td>
      <td>10000</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h2 id="模板">模板</h2>
<p>DataFrame拥有to_html()的方法，可以将dataframe数据转化为含有HTML格式的字符串。</p>
<p>但是随着您的报告变得越来越复杂或您选择将Jinja模板用于您的网络应用，jinja的这些功能将为您提供良好的服务。Jinja的另一个不错的功能是它包含多个内置过滤器，这些过滤器允许我们以Pandas中难以做到的方式格式化我们的一些数据。</p>
<p>为了在我们的应用程序中使用Jinja，我们需要做三件事：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1. 创建一个模板
2. 将变量添加到模板上下文中
3. 将模板渲染为HTML
</code></pre></div><br>
<p>这是一个非常简单的模板，我们称之为myreport.html：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{ title }}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Sales Funnel Report - National<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
     {{ national_pivot_table }}
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>上面html代码中拥有 <code>{{title}} 和 {{national_pivot_table }}</code> 这两个关键词。这两个关键词用来接收需要渲染的数据，比如图片对象、dataframe对象等。</p>
<p>要填充这些变量，我们需要创建一个Jinja环境并获取我们的模板对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">jinja2</span> <span class="kn">import</span> <span class="n">Environment</span><span class="p">,</span> <span class="n">FileSystemLoader</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">Environment</span><span class="p">(</span><span class="n">loader</span><span class="o">=</span><span class="n">FileSystemLoader</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
<span class="n">template</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s1">&#39;myreport.html&#39;</span><span class="p">)</span>
</code></pre></div><p>在上面的示例中，我假设模板位于当前目录中，但您可以将完整路径放到模板位置。</p>
<p>另一个关键组件是 <code>env</code> 的创建。 这个变量是我们将数据（或对象）填充给模板的方式。 我们创建了一个名为 <code>template_var</code> 的字典，其中包含我们想要传递给模板的所有变量。</p>
<p><code>请注意变量的名称如何与我们的模板匹配。即名称要与myreport.html中的{{}}夹住的关键词一样。</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">template_vars</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span> <span class="p">:</span> <span class="s2">&#34;Sales Funnel Report - National&#34;</span><span class="p">,</span>
                 <span class="s2">&#34;national_pivot_table&#34;</span><span class="p">:</span> <span class="n">sales_report</span><span class="o">.</span><span class="n">to_html</span><span class="p">()}</span>
</code></pre></div><p>最后一步是将 <code>template_vars</code> 渲染到html模板中，并输出为html字符串，最终我们将使用该html字符串来生成pdf报告。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">html_out</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">template_vars</span><span class="p">)</span>
</code></pre></div><p>为简洁起见，我不会显示完整的HTML，但您应该明白这一点。</p>
<br>
<h2 id="生成pdf">生成pdf</h2>
<p>pdf报告的生成部分相当简单，这里用到weasyprint库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">weasyprint</span> <span class="kn">import</span> <span class="n">HTML</span>
<span class="n">HTML</span><span class="p">(</span><span class="n">string</span><span class="o">=</span><span class="n">html_out</span><span class="p">)</span><span class="o">.</span><span class="n">write_pdf</span><span class="p">(</span><span class="s2">&#34;report.pdf&#34;</span><span class="p">)</span>
</code></pre></div><div style="text-align: center;">
<figure >
    
        <img src="img/ugly_table.png" width="100%" />
    
    
</figure>
</div>
<p>但是打开的pdf样式很简单，白底黑字并不美观。之所以这样是因为我们没有使用自定义样式表css，但是咱们不熟悉css，有一种简单的办法就是用成熟的css，这里我用的<code>typography.css</code> 作为填充表格时的样式表。这个css的优点有：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1. 相对较小且易于理解
2. 可以在PDF引擎中运行而不会抛出错误和警告
3. 能让表格表格看起来很美观
</code></pre></div><p>让我们尝试使用我们更新的样式表重新渲染它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">HTML</span><span class="p">(</span><span class="n">string</span><span class="o">=</span><span class="n">html_out</span><span class="p">)</span><span class="o">.</span><span class="n">write_pdf</span><span class="p">(</span><span class="s1">&#39;beautiful_report.pdf&#39;</span><span class="p">,</span> <span class="n">stylesheets</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;typography.css&#34;</span><span class="p">])</span>
</code></pre></div><div style="text-align: center;">
<figure >
    
        <img src="img/beautiful_table.png" width="100%" />
    
    
</figure>
</div>
<p>添加了一个stylesheets参数就让输出结果瞬间变得高端大气上档次。</p>
<br>
<h2 id="更多">更多</h2>
<p>如果想更加丰富的输出pdf报告，大家回去需要查阅jinja文档，找一些css样式表。</p>
<br>
<h2 id="下载weasyprint_auto_reportzip"><a href="weasyprint_auto_report.zip">下载</a></h2>
<p><a href="weasyprint_auto_report.zip">点击这里</a>下载本文需要的实验数据及代码</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Rembg库 | 可以去掉图片背景的</title>
      <link>https://textdata.cn/blog/rembg_remove_background_from_image/</link>
      <pubDate>Wed, 23 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/rembg_remove_background_from_image/</guid>
      <description>最近一年多，大邓之前一直使用自己diy的浏览器启动页, 最初是被该启动页的关键词搜索功能所惊艳。但用久了人总会喜新厌旧，但是每次打开浏览器，呈现的网址链接效果太繁杂了。而且大多数都是僵尸链接，平常很少点击的，反而常用的链接都设置成了快捷键。</description>
      <content:encoded><![CDATA[<h2 id="rembg">Rembg</h2>
<p>Rembg可以去掉图片中的背景，效果如下</p>
<p><img loading="lazy" src="clean_bg.png" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<p>CPU版</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pip install rembg
</code></pre></div><p>GPU版</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pip install rembg<span class="o">[</span>gpu<span class="o">]</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>安装成功后，可以在命令行中调动Rembg。如果只对<strong>单个图片</strong>进行处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">rembg i path/to/input.png path/to/output.png
</code></pre></div><p>对多个图片文件处理(批处理)，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">rembg p path/to/input path/to/output
</code></pre></div><br>
<h3 id="在python中使用">在Python中使用</h3>
<p>把图片读取为二进制数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">rembg</span> <span class="kn">import</span> <span class="n">remove</span>

<span class="c1">#待处理的图片路径</span>
<span class="n">input_path</span> <span class="o">=</span> <span class="s1">&#39;input.png&#39;</span>
<span class="c1">#处理后存储的图片路径</span>
<span class="n">output_path</span> <span class="o">=</span> <span class="s1">&#39;output.png&#39;</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">input_path</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">o</span><span class="p">:</span>
        <span class="nb">input</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">remove</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Python计算地图中两点距离及方位角</title>
      <link>https://textdata.cn/blog/how_to_calculate_geo_distance_in_python/</link>
      <pubDate>Thu, 17 Mar 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/how_to_calculate_geo_distance_in_python/</guid>
      <description>使用Python的geographiclib包可以用来计算地理信息，诸如两城市距离、方位角等信息</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="img/earth.jpg" alt=""  />
</p>
<br>
<h2 id="下载本文代码使用python计算地图中两点距离及方位角ipynb"><a href="%E4%BD%BF%E7%94%A8Python%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9B%BE%E4%B8%AD%E4%B8%A4%E7%82%B9%E8%B7%9D%E7%A6%BB%E5%8F%8A%E6%96%B9%E4%BD%8D%E8%A7%92.ipynb">下载本文代码</a></h2>
<br>
<h2 id="如何计算地图中两点距离及角度">如何计算地图中两点距离及角度</h2>
<p>例如北京市北纬40.1，东经116.6； 哈尔滨市北纬45.7567, 东经126.6424</p>
<p>感兴趣的童鞋也可去看问题出处</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/3932502/calculate-angle-between-two-latitude-longitude-points/51415608">https://stackoverflow.com/questions/3932502/calculate-angle-between-two-latitude-longitude-points/51415608</a></p>
</blockquote>
<p>在回答中，看到有地理信息系统Python包geographiclib，可以计算两点距离和角度。</p>
<br>
<h2 id="安装geographiclib">安装geographiclib</h2>
<p><a href="https://geographiclib.sourceforge.io/1.52/python/">https://geographiclib.sourceforge.io/1.52/python/</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">geographiclib</span><span class="o">==</span><span class="mf">1.52</span>
</code></pre></div><br>
<h2 id="计算距离">计算距离</h2>
<p>注意，在接下来的计算中，将北纬、东经表示为正数。将南纬、西经表示为负数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">distance</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。
</span><span class="s2">    dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负
</span><span class="s2">    beiwei2: 地点2的纬度数
</span><span class="s2">    dongjing2: 地点2的经度数
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">from</span> <span class="nn">geographiclib.geodesic</span> <span class="kn">import</span> <span class="n">Geodesic</span>
    <span class="n">geod</span> <span class="o">=</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">WGS84</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">geod</span><span class="o">.</span><span class="n">Inverse</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">g</span><span class="p">[</span><span class="s1">&#39;s12&#39;</span><span class="p">]</span><span class="o">/</span><span class="mi">1000</span>
    <span class="k">return</span> <span class="n">distance</span>
    

<span class="c1">#北京Beijing与哈尔滨harbin</span>
<span class="n">distance</span><span class="p">(</span><span class="mf">40.1</span><span class="p">,</span> <span class="mf">116.6</span><span class="p">,</span> <span class="mf">45.7567</span><span class="p">,</span> <span class="mf">126.6424</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>1031.617791888516
</code></pre>
<p><img loading="lazy" src="img/%e8%b7%9d%e7%a6%bb.png" alt=""  />
</p>
<br>
<h2 id="方位角azimuth">方位角azimuth</h2>
<p>两个地点在地图中所处的相对位置，称之为方位角azimuth。方位角最大度数360度，</p>
<ul>
<li>0度表示正北</li>
<li>90度表示正西</li>
<li>180度表示正南</li>
<li>270度表示正西</li>
<li>360度表示正北</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">azimuth</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。
</span><span class="s2">    dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负
</span><span class="s2">    beiwei2: 地点2的纬度数
</span><span class="s2">    dongjing2: 地点2的经度数
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">from</span> <span class="nn">geographiclib.geodesic</span> <span class="kn">import</span> <span class="n">Geodesic</span>
    <span class="n">geod</span> <span class="o">=</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">WGS84</span>
    <span class="n">l</span> <span class="o">=</span> <span class="n">geod</span><span class="o">.</span><span class="n">InverseLine</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">s12</span> <span class="o">=</span> <span class="n">distance</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">Position</span><span class="p">(</span><span class="n">s12</span><span class="p">,</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">STANDARD</span> <span class="o">|</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">LONG_UNROLL</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">g</span><span class="p">[</span><span class="s1">&#39;azi2&#39;</span><span class="p">]</span>

<span class="c1">#北京 哈尔滨</span>
<span class="n">azimuth</span><span class="p">(</span><span class="mf">40.1</span><span class="p">,</span> <span class="mf">116.6</span><span class="p">,</span> <span class="mf">45.7567</span><span class="p">,</span> <span class="mf">126.6424</span><span class="p">)</span>
</code></pre></div><pre><code>56.03961942267271
</code></pre>
<p>按照azimuth定义，56度的解读为 哈尔滨位于北京的东北方向。</p>
<p>同理可以计算西安与杭州</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#西安， 杭州</span>
<span class="n">azimuth</span><span class="p">(</span><span class="mf">34.2658</span><span class="p">,</span> <span class="mf">108.9541</span><span class="p">,</span> <span class="mf">30.2741</span><span class="p">,</span> <span class="mf">120.1552</span><span class="p">)</span>
</code></pre></div><pre><code>115.1506923699206
</code></pre>
<p>杭州位于西安的115度，即东南方向</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Python中使用Greppo构建的地理空间仪表板</title>
      <link>https://textdata.cn/blog/geospatial_with_greppo/</link>
      <pubDate>Sat, 12 Mar 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/geospatial_with_greppo/</guid>
      <description>缺乏前端、后端和网络开发经验可能会限制使用 Python 制作网络应用程序。 在Python中使用 Greppo构建的地理空间仪表板</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="vector-demo.zip">
        <img src="img/1.gif" width="100%" />
    </a>
    <figcaption><small><i>点击本图下载本文项目代码</i></small></figcaption>
</figure>
</div>
<h2 id="下载项目数据代码vector-demozip"><a href="vector-demo.zip">下载项目数据代码</a></h2>
<p><strong>地理空间数据分析</strong>已成为数据科学中的一个常见领域。对于地理空间数据科学来说也不例外。支持 GeoPandas、Shapely 和 Rasterio 等项目的社区使 Python 成为地理空间分析的首选。</p>
<br>
<h2 id="greppo快速简单的地理空间仪表板构建方法">Greppo：快速简单的地理空间仪表板构建方法</h2>
<p>Greppo 是一个用于构建地理空间网络应用程序的开源 Python 框架。 它提供了可随时使用的前端和后端组件作为函数，充当前端交互组件和绑定的后端变量之间的 API。 要了解有关心智模型的更多信息，<a href="https://docs.greppo.io/mental-model.html">请参阅此页面</a>。</p>
<p>无需太多前端、后端、Web 开发经验，您就可以在 5 分钟内使用 Python 构建和部署功能齐全的 Web 应用程序。</p>
<ul>
<li>GitHub存储库：https://github.com/greppo-io/greppo</li>
<li>文档：https://docs.greppo.io/</li>
<li>网站：https://greppo.io/</li>
</ul>
<blockquote>
<p>在本教程中，我们将使用 Greppo 在 Python 中构建地理空间仪表板。 我们将通过设置环境、安装、导入数据、为我们的仪表板放入组件并为其提供服务来工作。 您将需要了解 Python、GeoPandas 和地理空间分析的基础知识。
入门…</p>
</blockquote>
<p>首先要做的是安装本文需要的 Python 第三方库。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install greppo geopandas
</code></pre></div><p>下载本教程所需的数据集。 本教程的所有数据和代码都可以在这个 GitHub 存储库中找到：greppo-demo/vector-demo（数据源：https://github.com/openpolis/geojson-italy）</p>
<br>
<h2 id="编写仪表板脚本">编写仪表板脚本</h2>
<p>我们首先为项目设置文件夹结构。 我将使用以下项目文件夹结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">└── vector-demo
    ├── app.py
    ├── cities.geojson
    ├── regions.geojson
    └── roads.geojson
</code></pre></div><p>该应用程序的主控脚本是 app.py。</p>
<br>
<h2 id="step-0启动服务器">Step 0：启动服务器</h2>
<p>启动服务器，请打开**终端（windows对应的是命令行cmd）**并按照这些说明进行操作。</p>
<p>首先，终端中执行<code>cd vector_demo</code>将工作目录切换为 (cd) 项目文件夹 <strong>vector_demo</strong>。</p>
<p>然后，终端执行<code>greppo serve app.py</code>, 启动服务器。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/2.png" width="90%" />
    
    <figcaption><small><i>在命令行中启动服务器</i></small></figcaption>
</figure>
</div>
<p>然后，您将看到 Uvicorn 服务器在指定位置（类似于链接）运行。 复制网址链接，并将其粘贴到浏览器中。 然后它将加载应用程序。 如果您对 app.py 进行了任何更改，您将在浏览器页面上看到对您的应用的更新更改。</p>
<br>
<h2 id="step-1构建应用程序的基本脚手架">Step 1：构建应用程序的基本脚手架。</h2>
<p>即导入 greppo 包，并在地图中添加 base_layer。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Open Street Map&#34;</span><span class="p">,</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://</span><span class="si">{s}</span><span class="s2">.tile.openstreetmap.org/</span><span class="si">{z}</span><span class="s2">/</span><span class="si">{x}</span><span class="s2">/</span><span class="si">{y}</span><span class="s2">.png&#34;</span><span class="p">,</span>
    <span class="n">subdomains</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
    <span class="n">attribution</span><span class="o">=</span><span class="s1">&#39;(C) OpenStreetMap contributors&#39;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span><span class="n">provider</span><span class="o">=</span><span class="s2">&#34;CartoDB Positron&#34;</span><span class="p">)</span>
</code></pre></div><p>您需要先从 greppo 导入应用程序。 此应用程序对象将用作您的应用程序前端的接口，并为前端和后端之间的 2 路通信提供 API。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/3.png" width="90%" />
    
    
</figure>
</div>
<p>要将 base_layer 添加到您的应用程序地图，只需使用带有所需参数的应用程序 API 方法 app.base_layer()。 请<a href="https://docs.greppo.io/">参阅文档</a>以了解什么是必需的和什么是可选的。 base_layer 方法提供了两种方法来指定基本瓦片层。 一种是使用 name 和 url 属性。 另一种方法是使用提供者的名称。</p>
<br>
<h2 id="step-2导入数据集并将其显示为叠加层">Step 2：导入数据集并将其显示为叠加层。</h2>
<p>使用 geopandas，我们可以将矢量数据集作为 GeoDataFrame 导入。 然后可以使用 app.vector_layer() 方法在 Web 应用程序上的地图上对其进行可视化。
在这里，我要导入三个不同的数据集，每个数据集都有多边形（意大利不同地区的边界）、线（意大利的主要高速公路）和点（意大利的主要城市）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
<span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">regions</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Regions of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Polygons showing the boundaries of regions of Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;fillColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#4daf4a&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">roads</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Highways in Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Lines showing the major highways in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#377eb8&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">cities</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Cities of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Points showing the cities in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#e41a1c&#34;</span><span class="p">},</span>
    <span class="n">visible</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div><p>使用方法 app.vector_layer() 作为前端的 API，我们可以显示矢量数据。 您需要传入名称，其他参数是可选的。 虽然，将颜色或填充颜色传递给样式是区分和识别每一层的好习惯。 由于前端基于 Leaflet，所有样式都符合 Leaflet 的规范，可以在文档中找到。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/4.png" width="100%" />
    
    
</figure>
</div>
<p>您可以在此处找到 vector_layer 和样式的所有信息。 注意：您也可以制作 Choropleth 地图。 可以在此处找到其文档。</p>
<br>
<h2 id="step-3显示应用内文本应用标题和应用描述">Step 3：显示应用内文本、应用标题和应用描述</h2>
<p>为了使 Web 应用程序有用，它需要携带一些文本以向其用户提供一些指导和上下文。 这些可以显示在组件旁边的侧边栏上。 使用 app.display() 方法可以在 web-app 上显示降价文本。 使用相同的方法，可以设置应用程序的标题和描述。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;Vector demo&#39;</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;description&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;A Greppo demo app for vector data using GeoJSON data.&#39;</span><span class="p">)</span>

<span class="n">text_1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">## About the web-app
</span><span class="s2">The dashboard shows the boundaries of the regions of Italy as polygons, 
</span><span class="s2">the major arterial higways as lines and the major cities of each region as points.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-1&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">text_1</span><span class="p">)</span>
</code></pre></div><p>app.display() 接受两个参数 name 和 value 。 虽然 value 承载要显示的文本，但 name 必须是唯一的，并带有文本的标识符。 如果 name=&lsquo;title&rsquo; 传递的值是应用程序的标题，如果 name=&lsquo;description&rsquo; 传递的值是应用程序的描述。 如果没有这两者中的任何一个，该应用程序将带有其默认标题和描述。 鼓励设置应用程序的标题和描述。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/5.png" width="100%" />
    
    
</figure>
</div>
<br>
<h2 id="step-4将数据显示为图表">Step 4：将数据显示为图表</h2>
<p>数据应用程序几乎没有将数据显示为图表。 Greppo 还允许您将数据显示为图表。 可以在文档中找到有关图表及其用法的信息。 这里，作为一个例子，展示了一个条形图，app.bar_chart()。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-2&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;The following displays the count of polygons, lines and points as a barchart.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">bar_chart</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;Geometry count&#39;</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;A bar-cart showing the count of each geometry-type in the datasets.&#39;</span><span class="p">,</span>
              <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;polygons&#39;</span><span class="p">,</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="s1">&#39;points&#39;</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">regions</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">roads</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)],</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#984ea3&#39;</span><span class="p">)</span>
</code></pre></div><p>图表所需的参数是名称、x 和 y 值。 可以添加描述和颜色来为应用程序用户提供更好的上下文。 名称和描述与图表一起显示。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/6.png" width="90%" />
    
    
</figure>
</div>
<br>
<h2 id="结论">结论</h2>
<p>让我们全面了解一下我们在这里所做的事情。 我们的目标是使用 Greppo 创建一个地理空间 web 应用程序，以显示一些 GIS 矢量数据，并添加组件以为应用程序的用户提供更好的上下文。 这是该应用程序的完整代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;Vector demo&#39;</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;description&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;A Greppo demo app for vector data using GeoJSON data.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Open Street Map&#34;</span><span class="p">,</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://</span><span class="si">{s}</span><span class="s2">.tile.openstreetmap.org/</span><span class="si">{z}</span><span class="s2">/</span><span class="si">{x}</span><span class="s2">/</span><span class="si">{y}</span><span class="s2">.png&#34;</span><span class="p">,</span>
    <span class="n">subdomains</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
    <span class="n">attribution</span><span class="o">=</span><span class="s1">&#39;(C) OpenStreetMap contributors&#39;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">provider</span><span class="o">=</span><span class="s2">&#34;CartoDB Positron&#34;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">regions</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Regions of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Polygons showing the boundaries of regions of Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;fillColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#4daf4a&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">roads</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Highways in Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Lines showing the major highways in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#377eb8&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">cities</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Cities of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Points showing the cities in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#e41a1c&#34;</span><span class="p">},</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">text_1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">## About the web-app
</span><span class="s2">
</span><span class="s2">The dashboard shows the boundaries of the regions of Italy as polygons, the 
</span><span class="s2">major arterial higways as lines and the major cities of each region as points.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-1&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">text_1</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-2&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;The following displays the count of polygons, lines and points as a barchart.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">bar_chart</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;Geometry count&#39;</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;A bar-cart showing the count of each geometry-type in the datasets.&#39;</span><span class="p">,</span>
              <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;polygons&#39;</span><span class="p">,</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="s1">&#39;points&#39;</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">regions</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">roads</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)],</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#984ea3&#39;</span><span class="p">)</span>
</code></pre></div><p>运行效果如下</p>
<div style="text-align: center;">
<figure >
    <a href="vector-demo.zip">
        <img src="img/1.gif" width="100%" />
    </a>
    <figcaption><small><i>点击本图下载本文项目代码</i></small></figcaption>
</figure>
</div>
<h2 id="下载项目数据代码vector-demozip-1"><a href="vector-demo.zip">下载项目数据代码</a></h2>
<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title></title>
      <link>https://textdata.cn/blog/read_csv_fast_with_pandas/</link>
      <pubDate>Sat, 05 Feb 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/read_csv_fast_with_pandas/</guid>
      <description>当遇到特别大的csv文件，例如500M，pandas读取会很慢。本文提供了新的解决办法</description>
      <content:encoded><![CDATA[<h2 id="问题场景">问题场景</h2>
<p>当遇到特别大的csv文件，例如500M，pandas读取会很慢，在之前教程中要使用其他包另类的语法。现在只需更新pandas，加一个参数即可。</p>
<p>在本文中，我们将介绍：</p>
<ul>
<li>Pandas 的默认 CSV读数据， v1.4 中引入的更快、更并行的 CSV解析器。</li>
<li>一种不同的方法可以使事情变得更快。</li>
<li>读取 CSV，默认方式</li>
</ul>
<p>碰巧有一个 850MB 的 CSV 文件，这是使用 Pandas 加载它的默认方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">## 更新pandas</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pandas</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;large.csv&#34;</span><span class="p">)</span>
</code></pre></div><p>下面是<strong>旧的pandas版本</strong>代码读数据所消耗时间</p>
<p>0m13.245s</p>
<br>
<h2 id="使用pyarrow读csv">使用pyarrow读csv</h2>
<p>2022年1月份，刚刚发布的pandas1.4版本增加了arrow库的csv解析器。对了，该功能仍然处于试验阶段，不是默认解析器，但是足够快。下面是新版本用法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;large.csv&#34;</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;pyarrow&#34;</span><span class="p">)</span>
</code></pre></div><p>新版本代码读数据所消耗时间</p>
<p>0m6.507s</p>
<table>
<thead>
<tr>
<th>CSV解析器</th>
<th>CPU运行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认C</td>
<td>13.2s</td>
</tr>
<tr>
<td>PyArrow</td>
<td>6.5s</td>
</tr>
</tbody>
</table>
<p>需要注意，如果你的数据分析项目已经使用了并行加速数据的读取，那么今天的新教程（pyarrow）并不会特别显著改善代码运行速度（十几倍加速），但至少可能提供有意义的加速（一倍左右）。</p>
<br>
<h2 id="重新思考">重新思考</h2>
<p>加载 CSV 基本上是一项繁重的工作：</p>
<ul>
<li>需要分成几行。</li>
<li>需要用逗号分隔每一行。</li>
<li>需要处理字符串引用。</li>
<li>需要猜测（！）列的类型，除非您明确地将它们传递给 Pandas。</li>
<li>需要将字符串转换为整数、日期和其他非字符串类型。</li>
</ul>
<p>所有这些都需要 CPU 时间。</p>
<p>如果您从第三方获取 CSV，并且只处理一次，那么您对此无能为力。但是，如果您多次加载同一个 CSV 文件怎么办？或者，如果您是在数据处理管道的其他部分生成输入文件的人，该怎么办？</p>
<p>您可以读取其他一些处理速度更快的文件格式，而不是读取 CSV。让我们看一个例子，使用 Parquet 数据格式。 Parquet 文件旨在快速读取：您不必像使用 CSV 那样进行大量解析。与 CSV 不同，其中列类型在文件读取时无需编码，在 Parquet 中，列的类型存储在实际文件中。</p>
<p>首先，我们将 CSV 文件转换为 Parquet 文件；我们禁用压缩，因此我们正在与 CSV 进行更多的苹果对苹果的比较。当然，如果您是第一个生成文件的人，则不需要转换步骤，您可以直接将数据写入 Parquet。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;large.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">to_parquet</span><span class="p">(</span><span class="s2">&#34;large.parquet&#34;</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</code></pre></div><p>现在我们的数据存在于large.parquet中，再读取large.parquet看看读取时间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_parquet</span><span class="p">(</span><span class="s2">&#34;large.parquet&#34;</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;fastparquet&#34;</span><span class="p">)</span>
</code></pre></div><p>2.441s</p>
<table>
<thead>
<tr>
<th>CSV解析器</th>
<th>CPU运行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认C</td>
<td>13.2s</td>
</tr>
<tr>
<td>PyArrow</td>
<td>6.5s</td>
</tr>
<tr>
<td>fastparquet</td>
<td>2.4s</td>
</tr>
</tbody>
</table>
<br>
<p>纯粹由 CPU 衡量，fastparquet 是迄今为止最快的。  这只是一个例子。 但显然阅读 Parquet 格式的效率要高得多。</p>
<br>
<h2 id="最好的文件格式不是-csv">最好的文件格式不是 CSV</h2>
<p>CSV 是一种糟糕的格式。 除了解析效率低下之外，缺少类型数据意味着解析总是比具有实际列类型的结构化文件格式更容易出错和模棱两可。 因此，如果可以，请避免使用 CSV 并使用更好的格式，尽量选择其他高效类型，如 Parquet。</p>
<p>如果你被 CSV 卡住了，考虑在 Pandas 1.4 中使用新的 PyArrow CSV 解析器； 你会得到很好的加速，特别是如果你的程序当前没有利用多个 CPU。</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python妙用|给小外甥生成10以内加减运算数学做作业</title>
      <link>https://textdata.cn/blog/math_add_sub/</link>
      <pubDate>Mon, 17 Jan 2022 13:50:10 +0600</pubDate>
      
      <guid>/blog/math_add_sub/</guid>
      <description>&lt;p&gt;接到大姐任务，要&lt;strong&gt;每天&lt;/strong&gt;给小外甥出10以内的加减法习题。我寻思了下，还是写代码生成测试习题方便。&lt;/p&gt;
&lt;p&gt;为了自己偷懒，把习题和答案都生成，做完了让娃自己检查，我只检查他有没有做题就行了^_^&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;random&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#加、减模板&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;add_formula&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{a}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; + &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{b}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{c}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sub_formula&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{a}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; - &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{b}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{c}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;formulas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;formulas&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_formula&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#小外甥这个岁数没有负数的概念，需要满足a&amp;gt;=b的减法&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;formulas&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sub_formula&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#习题去重且有序，方便做题后自己检查对错&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;formulas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;formulas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#保存到加减md中，方便导出pdf&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;today&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;today&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;加减.md&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;## &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{month}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;月&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{day}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;号 加减运算&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fm&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;formulas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;= &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; =&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\n\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        
&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;加减答案.md&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;## &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{month}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;月&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{day}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;号 加减运算&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fm&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;formulas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/result.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;然后共享到ipad内，刚刚开心了半个小时，小外甥做了10道题不到，我的pencil二代就完犊子了~~~~~&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;figure &gt;
    &lt;a href=&#34;https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596&#34;&gt;
        &lt;img src=&#34;/images/bg/management_data_mining_with_python_course.png&#34; width=&#34;90%&#34; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;点击上方图片购买课程&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;了解课程&#34;&gt;了解课程&lt;/h2&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;figure &gt;
    &lt;a href=&#34;https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596&#34;&gt;
        &lt;img src=&#34;/images/bg/management_data_mining_with_python_course.png&#34; width=&#34;100%&#34; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;点击上方图片购买课程&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;点击进入详情页&lt;/a&gt;&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p>接到大姐任务，要<strong>每天</strong>给小外甥出10以内的加减法习题。我寻思了下，还是写代码生成测试习题方便。</p>
<p>为了自己偷懒，把习题和答案都生成，做完了让娃自己检查，我只检查他有没有做题就行了^_^</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1">#加、减模板</span>
<span class="n">add_formula</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">{a}</span><span class="s1"> + </span><span class="si">{b}</span><span class="s1"> = </span><span class="si">{c}</span><span class="s1">&#39;</span>
<span class="n">sub_formula</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">{a}</span><span class="s1"> - </span><span class="si">{b}</span><span class="s1"> = </span><span class="si">{c}</span><span class="s1">&#39;</span>

<span class="n">formulas</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">50</span><span class="p">):</span>
    <span class="n">a</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">b</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">formulas</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">add_formula</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">a</span><span class="o">&gt;=</span><span class="n">b</span><span class="p">:</span>
        <span class="c1">#小外甥这个岁数没有负数的概念，需要满足a&gt;=b的减法</span>
        <span class="n">formulas</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">sub_formula</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">))</span>

<span class="c1">#习题去重且有序，方便做题后自己检查对错</span>
<span class="n">formulas</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">formulas</span><span class="p">)</span>

<span class="c1">#保存到加减md中，方便导出pdf</span>
<span class="n">month</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">month</span>
<span class="n">day</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">day</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;加减.md&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;## </span><span class="si">{month}</span><span class="s1">月</span><span class="si">{day}</span><span class="s1">号 加减运算</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">month</span><span class="o">=</span><span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="n">day</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">fm</span> <span class="ow">in</span> <span class="n">formulas</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fm</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;= &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; =</span><span class="se">\n\n\n</span><span class="s1">&#39;</span><span class="p">)</span>

        
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;加减答案.md&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;## </span><span class="si">{month}</span><span class="s1">月</span><span class="si">{day}</span><span class="s1">号 加减运算</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">month</span><span class="o">=</span><span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="n">day</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">fm</span> <span class="ow">in</span> <span class="n">formulas</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fm</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/result.png" alt=""  />
</p>
<p>然后共享到ipad内，刚刚开心了半个小时，小外甥做了10道题不到，我的pencil二代就完犊子了~~~~~</p>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>即将开班 | 2022Python数据挖掘寒假工作坊</title>
      <link>https://textdata.cn/blog/2022_1st_workshop/</link>
      <pubDate>Sat, 15 Jan 2022 15:43:10 +0600</pubDate>
      
      <guid>/blog/2022_1st_workshop/</guid>
      <description>大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题： 网络爬虫技术解决 如何从网络世界中高效地采集数据？文本分析技术解决如何从杂乱的文本数据中抽取文本信息(变量)？</description>
      <content:encoded><![CDATA[<h2 id="python网络爬虫与文本分析">Python网络爬虫与文本分析</h2>
<br>
<h2 id="工作坊基本信息">工作坊基本信息</h2>
<ul>
<li><strong>2000元</strong></li>
<li>2021年1月21-22日</li>
<li>小鹅通平台(线上直播）</li>
<li>每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑</li>
</ul>
<br>
<h2 id="报名咨询">报名咨询</h2>
<ul>
<li>17816181460（同微信）（汪老师）</li>
<li>单位：杭州国商智库信息技术服务有限公司</li>
<li>开户银行： 中国银行杭州大学城支行</li>
<li>银行账户：6232636200100260588</li>
</ul>
<br>
<h2 id="课程纲要">课程纲要</h2>
<ul>
<li><strong>课程目标：</strong> 掌握Python语法、网络爬虫、文本分析、机器学习的核心知识点和分析思路</li>
<li><strong>核心知识点：</strong> 爬虫原理及应用、 非结构化文本数据挖掘的思路及方法、机器学习应用等</li>
<li><strong>环境配置:</strong>  安装anaconda，注意安装过程中勾选<strong>Add Anaconda to the system Path environment variable</strong>、<strong>Register Anaconda as the system python 3.x</strong></li>
<li><strong>课件资料：</strong> 本课程全部使用jupyter notebook文件作为课程课件，开课前会将<strong>代码数据等相关资料</strong>发给各位</li>
</ul>
<br>
<h2 id="课程特色">课程特色</h2>
<ul>
<li><strong>接地气：</strong> 以经管学术需求为导向， 将Python分为语法篇、采集数据篇、文本分析篇、机器学习篇四大部分</li>
<li><strong>好理解：</strong> 知识点力求通俗易懂，少了晦涩的计算机术语，多了通俗易懂的使用场景和实战讲解</li>
<li><strong>上手快：</strong> 所有知识点均有可重复使用的代码块，犹如一块块的积木，课后您可以根据分析需要，快速搭建出自己的Python代码</li>
</ul>
<p><br><br></p>
<h2 id="课程目录">课程目录</h2>
<p>在科学研究中，数据的获取及分析是最重要的也是最棘手的两个环节！</p>
<p>在<strong>前大数据时代</strong>，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但<strong>大数据时代</strong>，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题：</p>
<ol>
<li><strong>网络爬虫技术</strong> 解决 如何从网络世界中高效地 <strong>采集数据</strong>？</li>
<li><strong>文本分析技术</strong> 解决 如何从杂乱的文本数据中<strong>抽取文本信息(变量)</strong>？</li>
</ol>
<p><br><br></p>
<h2 id="一python语法入门">一、Python语法入门</h2>
<ul>
<li>Python跟英语一样是一门语言</li>
<li>数据类型之字符串</li>
<li>数据类型之列表元组集合</li>
<li>数据类型之字典</li>
<li>数据类型之布尔值、None</li>
<li>逻辑语句(if&amp;for&amp;tryexcept)</li>
<li>列表推导式</li>
<li>理解函数</li>
<li>常用的内置函数</li>
<li>内置库os路径库</li>
<li>内置库csv文件库</li>
<li>常见错误汇总</li>
</ul>
<br>
<h2 id="二数据采集">二、数据采集</h2>
<ul>
<li>网络爬虫原理</li>
<li>寻找网址规律</li>
<li>获取网页-requests库</li>
<li>pyquery库解析html网页</li>
<li><strong>案例 1</strong>：豆瓣/大众点评</li>
<li>json库解析json网页</li>
<li><strong>案例 2</strong>： 知乎</li>
<li><strong>案例 3</strong>： 百度地图POI地点检索</li>
<li><strong>案例 4：</strong> 下载文档、多媒体文件</li>
<li><strong>案例 5</strong>：上市公司定期报告pdf批量下载</li>
<li>简易爬虫库smartscraper（了解）</li>
<li>区分动态网站与静态网站</li>
</ul>
<br>
<h2 id="三初识文本分析">三、初识文本分析</h2>
<ul>
<li>文本分析在经管领域中的应用</li>
<li>读取文件中的数据(txt、xlsx、csv)</li>
<li>数据清洗re库-从文本中抽取姓名、年龄、电话、数字等各种信息</li>
<li><strong>案例 6</strong>：将多个txt文件整理到一个excel中</li>
<li>jieba分词包</li>
<li>spacy包</li>
<li><strong>案例 7</strong>：词频统计&amp;制作词云图</li>
<li><strong>案例 8</strong>：金融文本语调（正式、非正式）分析</li>
<li><strong>案例 9</strong>： 扩展情感词典- 共现法</li>
<li><strong>案例 10：</strong> 扩展情感词典- 词向量word2vec</li>
<li><strong>案例 11：</strong> 文本情感分析</li>
<li>数据分析pandas库快速入门</li>
<li><strong>案例 12</strong>：使用pandas对excel中的文本进行情感分析</li>
</ul>
<br>
<h2 id="四机器学习与文本分析">四、机器学习与文本分析</h2>
<ul>
<li>了解机器学习</li>
<li>使用机器学习做文本分析的流程</li>
<li>scikit-learn机器学习库简介</li>
<li>文本特征工程-将文本转化为机器可处理的数字向量</li>
<li>认识词袋法、one-hot、tf-idf、word2vec</li>
<li><strong>案例 13</strong>： 文本情感分析（带权重tf-idf&amp;情感词典）</li>
<li><strong>案例 14：</strong> 文本数据标注工具</li>
<li><strong>案例 15：</strong> 在线评论文本分类</li>
<li>文本相似性计算</li>
<li><strong>案例 15</strong>：使用文本相似性识别变化(政策连续性)</li>
<li><strong>案例 16</strong>：Kmeans聚类算法</li>
<li><strong>案例 17</strong>：LDA话题模型</li>
<li><strong>案例 18</strong>：使用预训练BERT词向量模型做主题分析</li>
<li><strong>案例 19:</strong>  识别图片中的文本</li>
<li>python爬虫、文本分析、机器学习等技术在论文中的应用赏析</li>
</ul>
<br>
<h2 id="工作坊基本信息-1">工作坊基本信息</h2>
<ul>
<li><strong>2000元</strong></li>
<li>2021年1月21-22日</li>
<li>小鹅通平台(线上直播）</li>
<li>每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑</li>
</ul>
<br>
<h2 id="报名咨询-1">报名咨询</h2>
<ul>
<li>17816181460（同微信）（汪老师）</li>
<li>单位：杭州国商智库信息技术服务有限公司</li>
<li>开户银行： 中国银行杭州大学城支行</li>
<li>银行账户：6232636200100260588</li>
</ul>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="相关论文">相关论文</h2>
<p>参照论文的摘要，可以通过场景化等的方式帮助我们迅速理解上面两个问题。加粗内容是论文用到了python技术，在我们的课程中均有与之对应的知识点和代码。</p>
<p><strong>蔡庆丰,陈熠辉,林焜.信贷资源可得性与企业创新:激励还是抑制?——基于银行网点数据和金融地理结构的微观证据[J].经济研究,2020,v.55;No.637(10):124-140.</strong></p>
<blockquote>
<p>结合银行和企业的地理位置数据,<strong>运用Python编写的基于百度地图API的地理坐标匹配系统</strong>,获取上市公司办公地点周围的银行网点数量。</p>
</blockquote>
<br>
<p><strong>王伟,陈伟,祝效国,王洪伟.众筹融资成功率与语言风格的说服性——基于Kickstarter的实证研究[J].管理世界,2016(05):81-98.</strong></p>
<blockquote>
<p><strong>摘要</strong>：众筹融资效果决定着众筹平台的兴衰。 众筹行为很大程度上是由投资者的主观因素决定的，而影响主观判断的一个重要因素就是语言的说服性。 而这又是一种典型的用 户产生内容（UGC），项目发起者可以采用任意类型的语言风格对项目进行描述。 不同的语 言风格会改变投资者对项目前景的感知，进而影响他们的投资意愿。
首先，依据 Aristotle 修 辞三元组以及 Hovland 说服模型，采用扎根理论，将众筹项目的语言说服风格分为 5 类：诉诸可信、诉诸情感、诉诸逻辑、诉诸回报和诉诸夸张。</p>
<p>然后，<strong>借助文本挖掘方法，构建说服风格语料库，并对项目摘要进行分类。</strong></p>
<p>最后，建立语言说服风格对项目筹资影响的计量模型，并对 <strong>Kickstarter 平台上的 128345 个项目进行实证分析</strong>。 总体来说，由于项目性质的差异，不同 的项目类别对应于不同的最佳说服风格。</p>
</blockquote>
<br>
<p><strong>胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.</strong></p>
<blockquote>
<p>在可持续发展战略导向下，秉持长远理念是企业抵御外部环境威胁和拥有可持续经营能力的基 石。 然而，作为企业掌舵人的管理者并非都具有长远的目光。 本文基于高层梯队理论和社会心理学中的时间 导向理论，提出了管理者内在的短视主义特质与企业资本支出和研发支出的关系，并<strong>采用文本分析和机器学习技术构建出管理者短视主义指标从而对其进行实证检验</strong>。 研究结果发现，<strong>年报 MD&amp;A 中披露的“短期视域” 语言</strong> 能够反映管理者内在的短视主义特质，管理者短视会导致企业减少资本支出和研发支出。 当公司治理水平、监督型机构投资者的持股比例以及分析师关注度越高时，管理者短视主义对这些长期投资的负向影响越易受到抑制。 最终，管理者短视主义导致的研发支出减少和资本投资效率降低会损害企业的未来绩效。 本文拓宽了管理者短视主义的行为后果分析，对企业高层次管理人才的聘任以及企业和政府的监管具有重要的实践启示。<strong>同时，本文将文本分析和机器学习方法引入管理者短视主义的研究，为未来该领域的研究提供了参考和借鉴。</strong></p>
</blockquote>
<br>
<p><strong>姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.</strong></p>
<blockquote>
<p>金融文本的语调与情绪含有上市公司管理层以及个体投资者表达的情感信息 ， 并对股票市场产生影响 。 通过词典重组和深度学习算法构建了适用于<strong>正式文本</strong> 与 <strong>非正式文本</strong>的金融领域 <strong>中文情绪词典</strong>，并基于词典构建了上市公司的年报语调和社交媒体情绪指标构建的年报语调指标和社交媒体情绪指标能有效地预测上市公司股票的收益率 、成交量波动率和非预期盈余等市场因素 ， 并优于基于其他广泛使用情绪词典构建的指标。此外，年报语调指标和社交媒体情绪指标对上市公司的股价崩盘风险具有显著的预测作用。为文本大数据在金融市场的 应用提供了分析工具 ，也为大数据时代的金融市场预测和监管等活动提供了决策支持 。</p>
</blockquote>
<br>
<p><strong>Wang, Quan, Beibei Li, and Param Vir Singh. &ldquo;Copycats vs. original mobile apps: A machine learning copycat-detection method and empirical analysis.&rdquo; <em>Information Systems Research</em> 29, no. 2 (2018): 273-291.</strong></p>
<blockquote>
<p><strong>摘要:</strong> 尽管移动应用程序市场的增长为移动应用程序开发人员创新提供了巨大的市场机会和经济诱因，但它也不可避免地刺激了模仿者开发盗版软件。原始应用的从业人员和开发人员声称，模仿者窃取了原始应用的想法和潜在需求，并呼吁应用平台对此类模仿者采取行动。令人惊讶的是，很少有严格的研究来分析模仿者是否以及如何影响原始应用的需求。</p>
<p><strong>进行此类研究的主要威慑因素是缺乏一种客观的方法来识别应用程序是模仿者还是原创者。通过结合自然语言处理，潜在语义分析，基于网络的聚类和图像分析等机器学习技术，我们提出了一种将应用识别为原始或模仿者并检测两种模仿者的方法：欺骗性和非欺骗性。</strong></p>
<p>根据检测结果，我们进行了经济计量分析，以确定五年间在iOS App Store中发布的<strong>5,141个开发人员的10,100个动作游戏应用程序</strong>样本中，模仿应用程序对原始应用程序需求的影响。我们的结果表明，特定模仿者对原始应用需求的影响取决于模仿者的质量和欺骗程度。高质量的非欺骗性复制品会对原件产生负面影响。相比之下，低质量，欺骗性的模仿者正面影响了对原件的需求。</p>
<p>结果表明，从总体上讲，模仿者对原始移动应用程序需求的影响在统计上是微不足道的。<strong>我们的研究通过提供一种识别模仿者的方法</strong>，并提供模仿者对原始应用需求的影响的证据，为越来越多的移动应用消费文献做出了贡献。</p>
</blockquote>
<br>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="相关论文汇总">相关论文汇总</h2>
<p>[1]沈艳,陈赟,黄卓.文本大数据分析在经济学和金融学中的应用:一个文献综述[J].经济学(季刊),2019,18(04):1153-1186.</p>
<p>[2]王伟,陈伟,祝效国,王洪伟. 众筹融资成功率与语言风格的说服性-基于Kickstarter的实证研究.<em>管理世界</em>.2016;5:81-98.</p>
<p>[3]胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.</p>
<p>[4]Kai Li, Feng Mai, Rui Shen, Xinyan Yan, Measuring Corporate Culture Using Machine Learning, <em>The Review of Financial Studies</em>,2020</p>
<p>[5]Kenneth Benoit. July 16, 2019. “Text as Data: An Overview.” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. Handbook of Research Methods in Political Science and International Relations. Thousand Oaks: Sage.</p>
<p>[6]Loughran T, McDonald B. Textual analysis in accounting and finance: A survey[J]. <em>Journal of Accounting Research</em>, 2016, 54(4): 1187-1230. Author links open overlay panelComputational socioeconomics</p>
<p>[7]Berger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. &ldquo;Uniting the tribes: Using text for marketing insight.&rdquo; <em>Journal of Marketing</em> 84, no. 1 (2020): 1-25.</p>
<p>[8]Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. &ldquo;A review of best practice recommendations for text analysis in R (and a user-friendly app).&rdquo; <em>Journal of Business and Psychology</em> 33, no. 4 (2018): 445-459.</p>
<p>[9]Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. &ldquo;Lazy prices.&rdquo; <em>The Journal of Finance</em> 75, no. 3 (2020): 1371-1415.</p>
<p>[10]孟庆斌, 杨俊华, 鲁冰. 管理层讨论与分析披露的信息含量与股价崩盘风险——基于文本向量化方法的研究[J]. <em>中国工业经济</em>, 2017 (12): 132-150.</p>
<p>[11]Wang, Quan, Beibei Li, and Param Vir Singh. &ldquo;Copycats vs. Original Mobile Apps: A Machine Learning Copycat-Detection Method and Empirical Analysis.&rdquo; <em>Information Systems Research</em> 29.2 (2018): 273-291.</p>
<p>[12]Hoberg, Gerard, and Gordon Phillips. 2016, Text-based network industries and endogenous product differentiation,?<em>Journal of Political Economy</em> 124, 1423-1465</p>
<p>[13]Loughran, Tim, and Bill McDonald. &ldquo;When is a liability not a liability? Textual analysis, dictionaries, and 10‐Ks.&rdquo; <em>The Journal of Finance</em> 66, no. 1 (2011): 35-65.</p>
<p>[14]Fairclough, Norman. 2003. Analysing discourse: Textual analysis for social research (Psychology Press)</p>
<p>[15]Grimmer, Justin, and Brandon M Stewart. 2013, Text as data: The promise and pitfalls of automatic content analysis methods for political texts, <em>Political analysis</em>21, 267-297.</p>
<p>[16]Bollen, Johan, et al. &ldquo;Historical language records reveal a surge of cognitive distortions in recent decades.&rdquo; <em>Proceedings of the National Academy of Sciences</em> 118.30 (2021).</p>
<p>[17]Markowitz, D. M., &amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).</p>
<p>[18]Bail, Christopher Andrew. &ldquo;Combining natural language processing and network analysis to examine how advocacy organizations stimulate conversation on social media.&rdquo; <em>Proceedings of the National Academy of Sciences</em> 113, no. 42 (2016): 11823-11828.</p>
<p>[19]姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.</p>
<h2 id="录播课">录播课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hitomi|下载图像/视频/音乐/文本等的桌面实用程序</title>
      <link>https://textdata.cn/blog/hitomi_downloader/</link>
      <pubDate>Sat, 15 Jan 2022 13:50:10 +0600</pubDate>
      
      <guid>/blog/hitomi_downloader/</guid>
      <description>从各种网站下载图像/视频/音乐/文本等的桌面实用程序</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<p>用于从各种网站下载图像/视频/音乐/文本等的桌面实用程序。</p>
<p><img loading="lazy" src="img/card_crop.png" alt=""  />
</p>
<br>
<h2 id="下载安装">下载安装</h2>
<p><strong>App版</strong>，仅支持Win</p>
<p><a href="https://github.com/KurtBestor/Hitomi-Downloader/releases/tag/v3.7h">https://github.com/KurtBestor/Hitomi-Downloader/releases/tag/v3.7h</a>
<br>
<strong>Chrome浏览器插件</strong></p>
<p><a href="https://github.com/KurtBestor/Hitomi-Downloader/wiki/Chrome-Extension">https://github.com/KurtBestor/Hitomi-Downloader/wiki/Chrome-Extension</a></p>
<br>
<h2 id="操作演示">操作演示</h2>
<p><img loading="lazy" src="img/how_to_download.gif" alt=""  />
</p>
<br>
<h2 id="功能特色">功能特色</h2>
<ul>
<li>🍰 简洁用户接口</li>
<li>🚀 加速下载</li>
<li>📜 支持用户diy脚本</li>
<li>🧲 支持BitTorrent &amp; Magnet</li>
<li>🎞️ 支持 M3U8 &amp; MPD 格式视频下载</li>
</ul>
<br>
<h2 id="支持的站点sites">支持的站点Sites</h2>
<table>
<thead>
<tr>
<th style="text-align:center">Site</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>AfreecaTV</strong></td>
<td><a href="https://afreecatv.com">https://afreecatv.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ArtStation</strong></td>
<td><a href="https://artstation.com">https://artstation.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>AsianSister</strong></td>
<td><a href="https://asiansister.com">https://asiansister.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>AsmHentai</strong></td>
<td><a href="https://asmhentai.com">https://asmhentai.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Avgle</strong></td>
<td><a href="https://avgle.com">https://avgle.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>baraag.net</strong></td>
<td><a href="https://baraag.net">https://baraag.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>半次元</strong></td>
<td><a href="https://bcy.net">https://bcy.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>BDSMlr</strong></td>
<td><a href="https://bdsmlr.com">https://bdsmlr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>bilibili</strong></td>
<td><a href="https://bilibili.com">https://bilibili.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ComicWalker</strong></td>
<td><a href="https://comic-walker.com">https://comic-walker.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Coub</strong></td>
<td><a href="https://coub.com">https://coub.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Danbooru</strong></td>
<td><a href="https://danbooru.donmai.us">https://danbooru.donmai.us</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Kakao Webtoon</strong></td>
<td><a href="http://webtoon.kakao.com">http://webtoon.kakao.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>DeviantArt</strong></td>
<td><a href="https://deviantart.com">https://deviantart.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>E(x)Hentai Galleries</strong></td>
<td><a href="https://e-hentai.org">https://e-hentai.org</a><br><a href="https://exhentai.org">https://exhentai.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Facebook</strong></td>
<td><a href="https://facebook.com">https://facebook.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>FC2 Video</strong></td>
<td><a href="https://video.fc2.com">https://video.fc2.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Flickr</strong></td>
<td><a href="https://flickr.com">https://flickr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Gelbooru</strong></td>
<td><a href="https://gelbooru.com">https://gelbooru.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hameln</strong></td>
<td><a href="https://syosetu.org">https://syosetu.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>hanime.tv</strong></td>
<td><a href="https://hanime.tv">https://hanime.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hentai Foundry</strong></td>
<td><a href="https://hentai-foundry.com">https://hentai-foundry.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hitomi.la</strong></td>
<td><a href="https://hitomi.la">https://hitomi.la</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hiyobi.me</strong></td>
<td><a href="https://hiyobi.me">https://hiyobi.me</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Imgur</strong></td>
<td><a href="https://imgur.com">https://imgur.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Instagram</strong></td>
<td><a href="https://instagram.com">https://instagram.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Iwara</strong></td>
<td><a href="https://iwara.tv">https://iwara.tv</a><br><a href="https://ecchi.iwara.tv">https://ecchi.iwara.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Jmana</strong></td>
<td><a href="https://jmana.net">https://jmana.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>カクヨム</strong></td>
<td><a href="https://kakuyomu.jp">https://kakuyomu.jp</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>LHScan</strong></td>
<td><a href="https://loveheaven.net">https://loveheaven.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Likee</strong></td>
<td><a href="https://likee.video">https://likee.video</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Luscious</strong></td>
<td><a href="https://luscious.net">https://luscious.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>MyReadingManga</strong></td>
<td><a href="https://myreadingmanga.info">https://myreadingmanga.info</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Blog</strong></td>
<td><a href="https://blog.naver.com">https://blog.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Post</strong></td>
<td><a href="https://post.naver.com">https://post.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Webtoon</strong></td>
<td><a href="https://comic.naver.com">https://comic.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver TV</strong></td>
<td><a href="https://tv.naver.com">https://tv.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>nhentai</strong></td>
<td><a href="https://nhentai.net">https://nhentai.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>nhentai.com</strong></td>
<td><a href="https://nhentai.com">https://nhentai.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Niconico</strong></td>
<td><a href="http://nicovideo.jp">http://nicovideo.jp</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ニジエ</strong></td>
<td><a href="https://nijie.info">https://nijie.info</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pawoo</strong></td>
<td><a href="https://pawoo.net">https://pawoo.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pinterest</strong></td>
<td><a href="https://pinterest.com">https://pinterest.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pixiv</strong></td>
<td><a href="https://pixiv.net">https://pixiv.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>pixivコミック</strong></td>
<td><a href="https://comic.pixiv.net">https://comic.pixiv.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pornhub</strong></td>
<td><a href="https://pornhub.com">https://pornhub.com</a><br><a href="https://pornhubpremium.com">https://pornhubpremium.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Rule34.xxx</strong></td>
<td><a href="https://rule34.xxx">https://rule34.xxx</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Sankaku Complex</strong></td>
<td><a href="https://www.sankakucomplex.com">https://www.sankakucomplex.com</a><br><a href="https://chan.sankakucomplex.com">https://chan.sankakucomplex.com</a><br><a href="https://idol.sankakucomplex.com">https://idol.sankakucomplex.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Soundcloud</strong></td>
<td><a href="https://soundcloud.com">https://soundcloud.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>小説家になろう</strong></td>
<td><a href="https://syosetu.com">https://syosetu.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>TOKYO Motion</strong></td>
<td><a href="https://tokyomotion.net">https://tokyomotion.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Tumblr</strong></td>
<td><a href="https://tumblr.com">https://tumblr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Twitch</strong></td>
<td><a href="https://twitch.tv">https://twitch.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Twitter</strong></td>
<td><a href="https://twitter.com">https://twitter.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Vimeo</strong></td>
<td><a href="https://vimeo.com">https://vimeo.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>V LIVE</strong></td>
<td><a href="https://vlive.tv">https://vlive.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Weibo</strong></td>
<td><a href="https://weibo.com">https://weibo.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>WikiArt</strong></td>
<td><a href="https://www.wikiart.org">https://www.wikiart.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>xHamster</strong></td>
<td><a href="https://xhamster.com">https://xhamster.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>XNXX</strong></td>
<td><a href="https://xnxx.com">https://xnxx.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>XVideos</strong></td>
<td><a href="https://xvideos.com">https://xvideos.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Yande.re</strong></td>
<td><a href="https://yande.re">https://yande.re</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Youku</strong></td>
<td><a href="https://youku.com">https://youku.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>YouTube</strong></td>
<td><a href="https://youtube.com">https://youtube.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>and more&hellip;</strong></td>
<td>[Supported sites by youtube-dl](<a href="http://ytdl-org.github.io/youtube-dl/supportedsites.html">http://ytdl-org.github.io/youtube-dl/supportedsites.html</a></td>
</tr>
</tbody>
</table>
<br>
<h2 id="数据挖掘课">数据挖掘课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>博客已更新，现支持留言功能</title>
      <link>https://textdata.cn/blog/blog_add_comments_function/</link>
      <pubDate>Sat, 15 Jan 2022 13:50:10 +0600</pubDate>
      
      <guid>/blog/blog_add_comments_function/</guid>
      <description>使用utterances让hugo博客添加免费的评论功能</description>
      <content:encoded><![CDATA[<p>目前博客有以下几个功能特色</p>
<ul>
<li><a href="https://github.com/gohugoio/hugo">Hugo</a> 框架建站</li>
<li><a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod</a>网站主题风格</li>
<li><a href="https://github.com/mkdocs/mkdocs">MkDocs</a> 生成技术文档</li>
<li><a href="https://github.com/utterance/utterances">utterances</a> 留言功能</li>
<li><a href="https://textdata.cn/mkdocs/home/">浏览器首页</a> 学术浏览器首页</li>
</ul>
<br>
<h2 id="网站仓库">网站仓库</h2>
<p>博客的所有代码文件存储于<a href="https://github.com/hiDaDeng/textdata.cn">hiDaDeng/textdata.cn</a>。大家如果想爬大邓的博客，速度还是太慢，可以直接从这里下载项目。
<img loading="lazy" src="img/github.png" alt=""  />
</p>
<br>
<h2 id="主题风格">主题风格</h2>
<p>博客之前换过很多种主题，有商务风、极客风，最后发现还是简单最好。而PaperMod不止简洁，还支持标签、搜索等功能。
<img loading="lazy" src="img/%e6%a0%87%e7%ad%be.png" alt=""  />

<img loading="lazy" src="img/%e6%90%9c%e7%b4%a2.png" alt=""  />

<br></p>
<h2 id="技术文档">技术文档</h2>
<p>大邓课程培训<a href="https://textdata.cn/mkdocs/python_tutorial/">Python快速入门</a>基础教程，使用MkDocs框架生成技术文档，界面如图
<img loading="lazy" src="img/python_tutorial.png" alt=""  />
</p>
<br>
<h2 id="留言功能">留言功能</h2>
<p>博客使用<a href="https://github.com/utterance/utterances">utterances</a>调用github仓库资源，用于存储评论数据。评论系统有点慢，需要先有github账户才可以使用。日常大家如果对Python感兴趣，有什么好的想法、资料，欢迎在博客中留言。
<img loading="lazy" src="img/%e7%95%99%e8%a8%80.png" alt=""  />
</p>
<br>
<h2 id="学术浏览器首页">学术浏览器首页</h2>
<p>如果你也是经管背景，对Python感兴趣，可以点击收藏该<a href="https://textdata.cn/mkdocs/home/">学术首页</a></p>
<p>如果想生成自己学科的学术首页，可以点击<a href="https://textdata.cn/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A6%96%E9%A1%B5/">制作方法</a>查看diy详情</p>
<p><img loading="lazy" src="img/%e5%ad%a6%e6%9c%af%e6%b5%8f%e8%a7%88%e5%99%a8%e9%a6%96%e9%a1%b5.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>pychorus | 3行代码提取音乐高潮部分</title>
      <link>https://textdata.cn/blog/pychorus/</link>
      <pubDate>Thu, 13 Jan 2022 13:50:10 +0600</pubDate>
      
      <guid>/blog/pychorus/</guid>
      <description>提取音乐高潮部分</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/irYCS5gQVNu9vidqMy-WJA">https://mp.weixin.qq.com/s/irYCS5gQVNu9vidqMy-WJA</a></p>
</blockquote>
<p>有些时候，为了设定手机铃声或者发抖音视频，我们会耗费大量时间在剪辑音乐高潮部分上。那么这个音乐高潮的提取能不能自动化呢？当然可以。</p>
<p>先来听听效果，孤芳自赏提取高潮后的部分：</p>
<p>怎么样，是不是迫不及待想往下读了？不要急，让我们从原理开始慢慢讲起。</p>
<br>
<h2 id="原理简介">原理简介</h2>
<p>不知道大家有没有这样的体会，大部分时候，歌曲的高潮部分通常是重复次数最多的部分。因此我们可以根据这一个特征，提出我们的算法：</p>
<ol>
<li>遍历整首歌曲。</li>
<li>将选定长度的部分与其他部分比较并计算相似度，以查看是否重复。</li>
<li>寻找重复次数较大、且间隔长的片段。</li>
</ol>
<br>
<h2 id="代码编写">代码编写</h2>
<p>为了避免造轮子，我们找到了别人已经做过的类似的项目：https://github.com/vivjay30/pychorus</p>
<p>我们只需要分析这个源代码中最核心的部分，即求相似区段的源代码，就能知道它是不是符合我们的项目需求了：</p>
<p><img loading="lazy" src="img/pychorus.png" alt=""  />
</p>
<p>可以看到，这部分代码就是做了我们算法的第二步，进行了片段与片段之间的相似度计算。检测时用到的相似函数是这样的：</p>
<p><img loading="lazy" src="img/formula.png" alt=""  />
</p>
<p>这主要是因为歌曲由12个基本音符的帧的集合而组成，v1和v2是任意两段音乐的音符矢量，如果说两段音乐非常相似，那么右边的式子将接近于0. <strong>如果说 1-右边的式子 得分非常高，则说明两段音乐非常相似</strong>。</p>
<p>下面我们看看怎么使用这个项目求音乐高潮部分，其实非常简单。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install pychorus
</code></pre></div><br>
<h2 id="编写代码">编写代码</h2>
<p>实际上，这个包用起来可是相当简单，如果我们只是想单纯提取歌曲高潮部分：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pychorus</span> <span class="kn">import</span> <span class="n">find_and_output_chorus</span>

<span class="n">chorus_start_sec</span> <span class="o">=</span> <span class="n">find_and_output_chorus</span><span class="p">(</span><span class="s2">&#34;你的音乐文件&#34;</span><span class="p">,</span> <span class="s2">&#34;提取结果的目标路径&#34;</span><span class="p">,</span> <span class="n">要多少秒的高潮部分</span><span class="p">)</span>
</code></pre></div><p>没错，两行代码就解决了。如果你想知道一些详细的细节，比如说输出相似矩阵或者结果可视化，建议阅读github中该项目的操作指令。下面让我们检验一下效果。</p>
<br>
<h2 id="效果检验">效果检验</h2>
<p>以《孤芳自赏》 为例，让我们试试这个提取器的功力。</p>
<p>原曲：</p>
<p>编写代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 提取音乐高潮部分</span>
<span class="kn">from</span> <span class="nn">pychorus</span> <span class="kn">import</span> <span class="n">find_and_output_chorus</span>

<span class="n">input_file</span> <span class="o">=</span> <span class="s2">&#34;孤芳自赏.mp3&#34;</span>
<span class="n">output_file</span> <span class="o">=</span> <span class="s2">&#34;孤芳自赏_high.wav&#34;</span>
<span class="n">clip_length</span><span class="o">=</span><span class="mi">40</span>
<span class="n">chorus_start_sec</span> <span class="o">=</span> <span class="n">find_and_output_chorus</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">,</span> <span class="n">clip_length</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="数据挖掘课">数据挖掘课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Imageio | 读取和写入图像数据的Python库</title>
      <link>https://textdata.cn/blog/imageio/</link>
      <pubDate>Thu, 13 Jan 2022 12:50:10 +0600</pubDate>
      
      <guid>/blog/imageio/</guid>
      <description>用于读取和写入图像数据的 Python 库</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<p>用于读取和写入图像数据的 Python 库；</p>
<p>Imageio 提供了一系列 <a href="https://imageio.readthedocs.io/en/stable/getting_started/standardimages.html">example images</a>，可以通过使用 &lsquo;&lsquo;imageio:chelsea.png&rsquo;&rsquo; 之类的 URI 来使用。 如果您的系统上尚不存在这些图像，则会自动下载这些图像。 因此，下面的大多数示例应该可以正常工作。</p>
<br>
<h2 id="读取图片">读取图片</h2>
<p>最常用的读取图片功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s1">&#39;imageio:chelsea.png&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">im</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div><p>如果图片文件是gif动图(gif是由多个静态图片组成的动图)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="s1">&#39;cat.gif&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">im</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># Each frame is a numpy matrix</span>
</code></pre></div><p>如果gif存储于内存中（二进制数）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="c1">#image_bytes二进制数据</span>
<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="n">image_bytes</span><span class="p">,</span> <span class="s1">&#39;.gif&#39;</span><span class="p">)</span>
</code></pre></div><h2 id="读取网图">读取网图</h2>
<p>Imageio可以从文件名、文件对象、zip压缩文件夹、字节流、图片链接中读取图片</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>
<span class="kn">import</span> <span class="nn">visvis</span> <span class="k">as</span> <span class="nn">vv</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s1">&#39;http://upload.wikimedia.org/wikipedia/commons/d/de/Wikipedia_Logo_1.0.png&#39;</span><span class="p">)</span>
<span class="n">vv</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
</code></pre></div><blockquote>
<p>注意: 有时候代码运行不出结果，可以尝试 <code>imageio.imread(imageio.core.urlopen(url).read(), '.gif')</code>.</p>
</blockquote>
<br>
<h2 id="读取文件夹中的图片">读取文件夹中的图片</h2>
<p>一种常见的情况是您想要读取文件夹中的所有图像，例如 进行科学分析，或者因为这些都是您的训练示例。 假设该文件夹仅包含图像文件，您可以这样读取它</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>
<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="n">images</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;path/to/folder&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">iterdir</span><span class="p">():</span>
    <span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
    <span class="n">images</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="迭代视频中的图片">迭代视频中的图片</h2>
<p>视频也是由图片组成的，通过每秒钟播放几十帧（视频由很多张图片组成），静态的图展示出视频效果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">reader</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="s1">&#39;imageio:cockatoo.mp4&#39;</span><span class="p">)</span>

<span class="c1">#for循环迭代</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">im</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">reader</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Mean of frame </span><span class="si">%i</span><span class="s1"> is </span><span class="si">%1.1f</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">im</span><span class="o">.</span><span class="n">mean</span><span class="p">()))</span>
</code></pre></div><br>
<h2 id="官方文档">官方文档</h2>
<p>更多功能请查看官方文档
<a href="https://github.com/imageio/imageio">https://github.com/imageio/imageio</a></p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>大邓整理的有用Python项目</title>
      <link>https://textdata.cn/blog/python_tools/</link>
      <pubDate>Fri, 07 Jan 2022 12:43:10 +0600</pubDate>
      
      <guid>/blog/python_tools/</guid>
      <description>涵盖网络爬虫、数据库、数据分析、机器学习、可视化、文本分析</description>
      <content:encoded><![CDATA[<h2 id="tool_kits">Tool_Kits</h2>
<p>工具箱大全,主要是Python项目。</p>
<p>涵盖：</p>
<ol>
<li>网络爬虫</li>
<li>数据库</li>
<li>数据分析</li>
<li>机器学习</li>
<li>可视化</li>
<li>文本分析</li>
<li>GUI</li>
<li>自动化办公</li>
<li>其他</li>
</ol>
<br>
<h2 id="网络爬虫">网络爬虫</h2>
<ul>
<li><a href="https://github.com/psf/requests">requests</a>  最好用的网络爬虫访问库</li>
<li><a href="https://github.com/hidadeng/smartscraper">smartscraper</a>  最简单的网络爬虫访问&amp;解析库</li>
<li><a href="https://github.com/hidadeng/weibo_crawler">weibo_crawler</a> 最简单的微博爬虫</li>
<li><a href="https://mp.weixin.qq.com/s/qL1uEk4j_ks3uhjINe-xyA">崔庆才大神发布的测试站点</a></li>
<li><a href="https://github.com/Gerapy/GerapyAutoExtractor">gerapy-auto-extractor</a> 爬虫页面智能解析库</li>
<li><a href="https://github.com/davidteather/TikTok-Api">TikTok-Api</a> 抖音国际站爬虫库</li>
<li><a href="https://github.com/tebelorg/RPA-Python">rpa</a> Python自动化操纵包</li>
<li><a href="https://github.com/celery/celery/">celery</a> 可以用于制作爬虫访问队列</li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a> 最简单的网页解析库</li>
<li><a href="https://github.com/gawel/pyquery">pyquery</a>  最简洁网页解析库</li>
<li><a href="https://github.com/scrapy/scrapy">scrapy</a> 最流行的爬虫框架</li>
<li><a href="https://github.com/binux/pyspider">pyspider</a> 国人开发的爬虫框架</li>
<li><a href="https://github.com/SeleniumHQ/selenium/">selenium</a> 浏览器自动化测试框架，可以用于爬虫反爬</li>
<li><a href="https://github.com/microsoft/playwright">playwright</a> 微软开源的浏览器自动化测试框架</li>
<li><a href="https://github.com/imWildCat/scylla">scylla</a> 智能IP代理池，用于反爬</li>
<li><a href="https://github.com/hidadeng/shreport">shreport</a> 上海证券交易所上市公司定期报告下载</li>
<li><a href="https://github.com/codelucas/newspaper">newspaper</a> 新闻爬虫库，根据提供的url可以抽取出新闻标题、作者、关键词、总结，部分功能支持中文</li>
<li><a href="https://github.com/sml2h3/ddddocr">ddddocr</a>  通用验证码识别OCR pypi版</li>
</ul>
<br>
<h2 id="web">Web</h2>
<ul>
<li><a href="https://github.com/getpelican/pelican">pelican</a> Python静态网站生成库</li>
<li><a href="https://github.com/pallets/flask">flask</a> 可以开发网站、分享rest-api接口;流行度top2的web框架</li>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a>、<a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>对Python小白最友好的的web库</li>
<li><a href="https://github.com/tiangolo/fastapi">fastapi</a>  web框架，高性能，易于学习，快速编写代码；</li>
<li><a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>  不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。</li>
<li><a href="https://github.com/mkdocs/mkdocs">mkdocs</a> 制作文档网站
<br></li>
</ul>
<h2 id="数据库">数据库</h2>
<ul>
<li><a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a></li>
<li><a href="https://docs.python.org/3/library/sqlite3.html">Sqlite3</a>  轻量级sql数据库(python内置库)</li>
<li><a href="https://github.com/mongodb/mongo-python-driver">pymongo</a> 非关系型MongoDB库</li>
<li><a href="https://github.com/redis/redis">redis</a>  Redis数据库</li>
<li><a href="https://github.com/py2neo-org/py2neo">py2neo</a>  对接Neo4J数据库的python库</li>
<li><a href="https://github.com/simonw/datasette">datasette</a> 探索和发布数据的开源多功能工具，主要面向数据记者、博物馆馆长、档案管理员、地方政府、科学家、研究人员以及任何拥有希望与世界分享数据的人。</li>
</ul>
<br>
<h2 id="数据分析">数据分析</h2>
<ul>
<li><a href="https://github.com/pandas-dev/pandas">pandas</a> 必须Python数据分析库，读取文件、预处理数据、分析、存储</li>
<li><a href="https://github.com/garrettj403/SciencePlots">SciencePlots</a>  科学绘图的Python工具包</li>
<li><a href="https://github.com/orchest/orchest">Orchest</a> 创建数据科学工作量的工具。Orchest是一款Web数据科学工具，可在文件系统上运行</li>
<li><a href="https://github.com/statsmodels/statsmodels">statsmodels</a> Python的统计计量统计库</li>
<li><a href="https://github.com/bashtage/linearmodels">linearmodels</a> 添加线性模型，包括statsmodels中缺少的工具变量和面板数据模型。</li>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a> 快速搭建本地数据分析类Web应用</li>
<li><a href="https://github.com/modin-project/modin">modin</a> pandas加速库，接口语法与pandas高度一致</li>
<li><a href="https://github.com/dask/dask">dask</a>  pandas加速库，接口语法与pandas高度一致</li>
<li><a href="https://github.com/has2k1/plydata%5D">plydata</a>  pandas管道语法库</li>
<li><a href="https://github.com/networkx/networkx">networkx</a> 社交网络分析库</li>
</ul>
<br>
<p>​</p>
<h2 id="机器学习">机器学习</h2>
<ul>
<li><a href="https://github.com/VowpalWabbit/vowpal_wabbit">vowpal wabbit</a>  机器学习的前沿库</li>
<li><a href="https://github.com/scikit-learn/scikit-learn">scikit-learn</a> 机器学习必学库，支持有监督、无监督多种算法，含文本分析功能</li>
<li><a href="https://github.com/biolab/orange3">Orange3</a> 点击操作的机器学习分析<strong>软件</strong>， 可文本分析</li>
<li><a href="https://github.com/doccano/doccano">doccano</a> 文本数据标注工具</li>
<li><a href="https://github.com/heartexlabs/label-studio">label-studio</a>  最牛掰的文本数据标注工具</li>
</ul>
<h2 id="可视化">可视化</h2>
<ul>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a> 快速搭建本地数据分析类Web应用</li>
<li><a href="https://github.com/matplotlib/matplotlib">matplotlib</a>  Python中最万能绘图库，很少有ta画不出来的图；但语法较难、静态图</li>
<li><a href="https://github.com/nschloe/matplotx">matplotx</a>  Matplotlib扩展库，可以提供更多样式，简化样式设定</li>
<li><a href="https://github.com/mwaskom/seaborn">seaborn</a> 基于matplotlib开发的简化版可视化库， 一般的图可以用ta绘制； 高度定制仍需要结合matplotlib进行样式定制；静态图</li>
<li><a href="https://github.com/has2k1/plotnine">plotnine</a>  ggplot2语法的Python可视化库， 可与<a href="https://github.com/has2k1/plydata%5D">plydata</a> 库结合使用</li>
<li><a href="https://github.com/pyecharts/pyecharts">pyecharts</a> 国人开发并封装的动态可视化图绘制库; 中文文档</li>
<li><a href="https://github.com/plotly/plotly.py">plotly</a> 动态可视化图绘制库</li>
<li><a href="https://github.com/bokeh/bokeh">bokeh</a> 动态可视化图绘制库</li>
<li><a href="https://github.com/garrettj403/SciencePlots">SciencePlots</a>  科研论文绘图，基于matplotlib</li>
<li><a href="https://github.com/datapane/datapane">datapane</a>  数据分析报告生成</li>
<li><a href="https://github.com/apache/superset">superset</a> 开源商务智能分析可视化库</li>
<li><a href="https://github.com/alfonsosemeraro/pyplutchik">pyplutchik</a> 文本可视化，可将文本情感信息按照plutchik轮样式可视化</li>
</ul>
<br> 
<h2 id="文本分析">文本分析</h2>
<ul>
<li><a href="https://github.com/nltk/nltk">nltk</a> 自然语言分析套件，对中文不友好</li>
<li><a href="https://github.com/shaypal5/skift">skift</a>  使用scikit-learn语法封装了fastText功能的包。</li>
<li><a href="https://github.com/andrewtavis/kwx">kwx</a>  Python 中基于 BERT、LDA 和 TFIDF 的关键字提取</li>
<li><a href="https://github.com/explosion/spaCy">spacy</a> 工业级自然语言模型库，支持中文</li>
<li><a href="https://github.com/fxsjy/jieba">jieba</a>  中文文本分词库</li>
<li><a href="https://github.com/isnowfy/snownlp">snownlp</a> 中文情感分析库</li>
<li><a href="https://github.com/RaRe-Technologies/gensim">gensim</a>  最好用、最全的话题模型</li>
<li><a href="https://github.com/hidadeng/cntext">cntext</a> 中文文本分析库，含词频统计、情感分析、可视化</li>
<li><a href="https://github.com/heartexlabs/label-studio">label-studio</a>  最牛掰的文本数据标注工具</li>
<li><a href="https://github.com/doccano/doccano">doccano</a> 文本数据标注工具</li>
<li><a href="https://github.com/shivam5992/textstat">textstat</a>  文本可读性计算包(算法全，但仅支持英文)</li>
<li><a href="https://github.com/jbesomi/texthero">texthero</a> 文本预处理、展示、可视化库，仅支持英文</li>
<li><a href="https://github.com/textpipe/textpipe">textpipe</a> 文本分析流水线</li>
<li><a href="https://github.com/davidmcclure/textplot">textplot</a> 词语网络图</li>
<li><a href="https://github.com/ryanjgallagher/shifterator">shifterator</a> 通过让您查看单词使用方式的变化，单词移位可以帮助您进行从根本上更可解释的情感，熵和散度分析。量化不同单词对两个文本差异做出的贡献，以及它们如何发挥作用。</li>
<li><a href="https://github.com/vi3k6i5/GuidedLDA">GuidedLDA</a> 半监督LDA主题模型</li>
<li><a href="https://github.com/gregversteeg/corex_topic">corex_topic</a>  层次非监督、半监督话题模型</li>
<li><a href="https://github.com/MaartenGr/BERTopic">BERTopic</a> BERT话题模型</li>
<li><a href="https://github.com/RasaHQ/whatlies">whatlies</a>  词向量可视化</li>
<li><a href="https://github.com/HLasse/TextDescriptives">TextDescriptives</a> 文本描述性统计,不支持中文</li>
<li><a href="https://github.com/hidadeng/pdfdocx">pdfdocx</a> pdf、docx读取库</li>
<li><a href="https://github.com/ocrmypdf/OCRmyPDF">OCRmyPDF</a>    为<strong>扫描的 PDF</strong> 文件添加了 OCR 文本层，允许对其进行搜索</li>
<li><a href="https://github.com/ddangelov/Top2Vec">Top2Vec</a>  主题建模和语义搜索的算法, 自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。 适用于短文本;</li>
<li><a href="https://github.com/jboynyc/textnets">TextNet</a>  textnet将文档集表示为文档和单词的网络,为文本分析与可视化提供了新的可能性。</li>
<li><a href="https://github.com/remram44/taguette">taguette</a> 免费开源的定性研究工具</li>
</ul>
<br>
<h2 id="gui窗体软件开发">GUI窗体软件开发</h2>
<ul>
<li><a href="https://wiki.python.org/moin/TkInter">tkinter</a> Python内置的gui库</li>
<li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a> 最简单的gui开发库</li>
<li><a href="https://doc.qt.io/qt.html#qtforpython">pyqt5、pyside</a> 最牛掰的gui软件开发库</li>
<li><a href="https://github.com/hoffstadt/DearPyGui">DearPyGui</a>  易于使用且功能强大的Python GUI框架，它提供了DearImGui的包装。</li>
<li><a href="https://github.com/pywebio/PyWebIO">PyWebIO</a>  快速构建 Web 应用的 Python 工具</li>
<li><a href="https://github.com/kivy/kivy">kivy</a>  star数高达14k的gui库
<br></li>
</ul>
<h2 id="自动化办公">自动化办公</h2>
<ul>
<li><a href="https://github.com/zhangyunhao116/zmail">zmail</a> 自动化收发邮件管理库</li>
<li><a href="https://github.com/pywinauto/pywinauto">pywinauto</a> Windows电脑自动化Python库</li>
<li><a href="https://github.com/Kozea/WeasyPrint">WeasyPrint</a>  自动化生产pdf报告</li>
<li><a href="https://github.com/jorisschellekens/ptext-release"></a> 对PDF文件读取、更改、添加信息</li>
<li><a href="https://github.com/SeleniumHQ/selenium/">selenium</a> 浏览器自动化框架，可以自动化点击浏览器，完成某些工作</li>
<li><a href="https://github.com/mkdocs/mkdocs/">mkdocx</a></li>
<li><a href="https://github.com/python-openxml/python-docx">python-docx</a>  创建、修改docx文件库</li>
<li><a href="https://github.com/scanny/python-pptx">python-ppt</a>  创建、修改ppt文件库</li>
<li><a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a> xlsx文件库</li>
<li><a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>  不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。</li>
</ul>
<br>
<h2 id="其他">其他</h2>
<ul>
<li><a href="https://github.com/hiresearch/hiresearch.github.io">hiresearch</a> 丢弃繁杂收藏夹，定义简洁办公的浏览器首页</li>
<li><a href="https://github.com/hakimel/reveal.js">reveal.js</a> 最流行的幻灯片</li>
<li><a href="https://github.com/slidevjs/slidev">slidev</a> 编程人员使用的幻灯片</li>
<li><a href="https://github.com/mkdocs/mkdocs">mkdocs</a> 制作文档网站</li>
<li><a href="https://github.com/mockoon/cli">mockoon</a>  帮我们快速搭建 API 服务图形化界面工具</li>
<li><a href="https://www.codepng.app/">codepng</a>  把代码转为美观的截图的website</li>
<li><a href="https://github.com/amphibian-dev/toad">toad</a> 金融风险评分卡；覆盖了建模全流程，从 EDA、特征工程、特征筛选 到 模型验证和评分卡转化</li>
<li><a href="https://github.com/salomonelli/best-resume-ever">best-resume-ever</a> Latex项目， 基于 Web 的简历模板，可以生成网页简历，然后用浏览器打印成 PDF 文件。</li>
<li><a href="https://github.com/vivjay30/pychorus">pychorus</a> 将音频文件中的高潮部分剪辑出来的python包</li>
<li><a href="https://github.com/imageio/imageio">imageio</a>  用于读取和写入图像数据的 Python 库；</li>
<li><a href="https://github.com/Textualize/rich">rich</a> 让命令行输出更美观简洁的Python包</li>
<li><a href="https://github.com/Textualize/textual">textual</a> rich作者开发的<strong>文本用户界面</strong>用户</li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>dvt库 |  视觉文化分析的Python工具包</title>
      <link>https://textdata.cn/blog/dvt/</link>
      <pubDate>Mon, 03 Jan 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/dvt/</guid>
      <description>视觉文化分析的Python工具包</description>
      <content:encoded><![CDATA[<h2 id="dvt">dvt</h2>
<p>Distant Viewing Toolkit for the Analysis of Visual Culture</p>
<p><strong>视觉文化分析</strong>的Python工具包</p>
<p><a href="https://github.com/distant-viewing/dvt">https://github.com/distant-viewing/dvt</a></p>
<p>远程电视工具包由几个 Python 包组成，旨在促进<strong>视觉文化</strong>的计算分析。 开始使用该工具包的最简单方法是在 <strong>Google 的协作 (Colab) 环境</strong>中运行该工具包。 这是一项免费使用的服务，允许您以最少的设置在远程服务器上运行 Python 代码。 只需选择以下链接之一即可开始：</p>
<ul>
<li>COLAB 笔记本演 <a href="https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing">https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing</a></li>
</ul>
<p>有关在您自己的机器上设置工具包的更多信息，请参阅 INSTALL.md。 以下页面提供了有关工具包和项目的更多信息：</p>
<ul>
<li>搜索和发现界面示例：DVT 视频可视化</li>
<li>使用聚合元数据的示例分析：“两个网络时代情景喜剧的视觉风格”</li>
<li>项目理论：“远距离观察：分析大型视觉语料库”。</li>
<li>软件白皮书：用于分析视觉文化的 Python 包</li>
</ul>
<br>
<h2 id="示例">示例</h2>
<p>开发者提供的colab代码，我跑通了图片标注(例如识别不同身体部位)、视频转场(不同素材拼凑)</p>

<figure >
    
        <img src="img/pic1.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/pic2.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/video.png" width="800" />
    
    
</figure>

<br>
<h2 id="提示">提示</h2>
<p>本地配置难度极大，建议按照开发者提示，使用google colab环境。可能需要先配置好科学上网，才能使用</p>
<ul>
<li>COLAB 笔记本演 <a href="https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing">https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing</a></li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Stargazer库 |  创建漂亮可发表的多元回归表</title>
      <link>https://textdata.cn/blog/stargazer/</link>
      <pubDate>Sun, 02 Jan 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/stargazer/</guid>
      <description>可用于创建漂亮的、可发表的多元回归表</description>
      <content:encoded><![CDATA[<h2 id="代码下载stargazer_examplesipynb"><a href="Stargazer_examples.ipynb">代码下载</a></h2>
<br>
<h2 id="stargazer库介绍">Stargazer库介绍</h2>
<p>R语言有一个stargazer包，可用于创建漂亮的、可发表的多元回归表。如今有Python化的stargazer库也可做类似的事。</p>
<p>下图是使用stargazer生成的没有任何样式的原始示例的示例：</p>

<figure >
    
        <img src="img/latex_example.png" width="800" />
    
    
</figure>

<br>
<h2 id="什么时候会用到这些">什么时候会用到这些？</h2>
<p>人们倾向于使用R版本的stargazer的主要情况是在学术论文中报告回归结果。 它允许您轻松地比较多个回归结果，这有助于比较具有实验影响的模型与没有影响的模型之间的结果。 这允许用户轻松查看系数的差异、统计显着性以及实验引入的新变量的影响。</p>
<p>它目前支持 LaTeX 和 HTML 输出，stargazer开发者最终最表是也支持 Markdown 和 ASCII 文本。</p>
<br>
<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/mwburke/stargazer">https://github.com/mwburke/stargazer</a></p>
<br>
该库实现了原始包中的许多自定义功能。大多数示例可以在示例 jupyter notebook 中找到，功能函数完整列表如下：
<h2 id="stargazer库的函数">Stargazer库的函数</h2>
<ul>
<li>show_header：显示或隐藏模型头数据</li>
<li>show_model_numbers：显示或隐藏型号</li>
<li>custom_columns：自定义模型名称和模型分组</li>
<li>significance_levels：更改统计显着性阈值</li>
<li>significant_digits：更改有效数字的数量</li>
<li>show_confidence_intervals：显示置信区间，而不是方差</li>
<li>dependent_variable_name：重命名因变量</li>
<li>rename_covariates: 重命名协变量</li>
<li>covariate_order：重新排序协变量</li>
<li>reset_covariate_order：将协变量顺序重置为原始顺序</li>
<li>show_degrees_of_freedom：显示或隐藏自由度</li>
<li>custom_note_label：表格底部的标签注释部分</li>
<li>add_custom_notes：将自定义注释添加到表格底部的部分</li>
<li>add_line：向表格中添加自定义行</li>
<li>append_notes：显示或隐藏统计显着性阈值</li>
</ul>
<p>这些功能与渲染类型无关，无论用户以 HTML、LaTeX 等格式输出都将应用</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">stargazer</span>
</code></pre></div><br>
<h2 id="ols回归">OLS回归</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">datasets</span>
<span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="k">as</span> <span class="nn">sm</span>
<span class="kn">from</span> <span class="nn">stargazer.stargazer</span> <span class="kn">import</span> <span class="n">Stargazer</span>

<span class="n">diabetes</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">load_diabetes</span><span class="p">()</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diabetes</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Age&#39;</span><span class="p">,</span> <span class="s1">&#39;Sex&#39;</span><span class="p">,</span> <span class="s1">&#39;BMI&#39;</span><span class="p">,</span> <span class="s1">&#39;ABP&#39;</span><span class="p">,</span> <span class="s1">&#39;S1&#39;</span><span class="p">,</span> <span class="s1">&#39;S2&#39;</span><span class="p">,</span> <span class="s1">&#39;S3&#39;</span><span class="p">,</span> <span class="s1">&#39;S4&#39;</span><span class="p">,</span> <span class="s1">&#39;S5&#39;</span><span class="p">,</span> <span class="s1">&#39;S6&#39;</span><span class="p">]</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">diabetes</span><span class="o">.</span><span class="n">target</span>

<span class="n">est</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">OLS</span><span class="p">(</span><span class="n">endog</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">],</span> <span class="n">exog</span><span class="o">=</span><span class="n">sm</span><span class="o">.</span><span class="n">add_constant</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">]]))</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>
<span class="n">est2</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">OLS</span><span class="p">(</span><span class="n">endog</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">],</span> <span class="n">exog</span><span class="o">=</span><span class="n">sm</span><span class="o">.</span><span class="n">add_constant</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">6</span><span class="p">]]))</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>

<span class="n">stargazer</span> <span class="o">=</span> <span class="n">Stargazer</span><span class="p">([</span><span class="n">est</span><span class="p">,</span> <span class="n">est2</span><span class="p">])</span>
</code></pre></div><pre><code>/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only
  x = pd.concat(x[::order], 1)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#分析结果渲染成html</span>
<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">display</span><span class="p">,</span> <span class="n">HTML</span>
<span class="n">raw_str</span> <span class="o">=</span> <span class="n">stargazer</span><span class="o">.</span><span class="n">render_html</span><span class="p">()</span>
<span class="n">html</span> <span class="o">=</span> <span class="n">HTML</span><span class="p">(</span><span class="n">raw_str</span><span class="p">)</span>
<span class="n">display</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/html_example.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#分析结果渲染成latex</span>
<span class="n">stargazer</span><span class="o">.</span><span class="n">render_latex</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/latex_example.png" width="800" />
    
    
</figure>

<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>PNAS | 情侣分手3个月前就有预兆！聊天记录还能反映分手后遗症</title>
      <link>https://textdata.cn/blog/2022-01-02-pnas_love_separate/</link>
      <pubDate>Sun, 02 Jan 2022 12:43:10 +0600</pubDate>
      
      <guid>/blog/2022-01-02-pnas_love_separate/</guid>
      <description>女友提出分手，你是不是后悔没有早点察觉？这不，关于分手前的聊天记录的文本分析，科学家给出了答案。</description>
      <content:encoded><![CDATA[<blockquote>
<p>公众号-新智元</p>
<p>编辑: 桃子 小咸鱼</p>
</blockquote>
<p>女朋友提出分手，你是不是后悔没有早点察觉？</p>
<p><strong>这不，对于分手前的有关迹象，科学家给出了答案：聊天记录！</strong></p>
<br>
<p>近日，美国德克萨斯大学的研究人员发表的一篇论文表明，通过分析情侣的聊天记录，可以找到情侣即将分手的证据。</p>
<p>这篇 Language left behind on social media exposes the emotional and cognitive costs of a romantic breakup 已于12月20日发表在国际顶刊PNAS。</p>
<p><img loading="lazy" src="img/pnas_love_home.png" alt=""  />
</p>
<p><strong>分手前三个月，聊天便不正常了</strong></p>
<p>基于已有的数据，研究人员对6800名Reddit用户发布的1027541个帖子进行了文本分析。</p>
<p><img loading="lazy" src="img/pnas_love_table.png" alt=""  />
</p>
<p>这些帖子涵盖了用户在过去2年里的Reddit发帖数据，这些帖子的内容不仅仅与他们的感情关系有关，也涵盖了他们生活中各个方面的内容。</p>
 <br>
<h2 id="语言标记">语言标记</h2>
<p>表示「即将分手」的「<strong>语言标记</strong>」在分手发生前3个月出现的频次非常高，在分手的那一周达到峰值，并在6个月后恢复到正常基线。</p>
<p>在表示「即将分手」的「语言标记」中，出现次数比较多的是「我」、「我们」这类字眼，以及暗含认知过程（cognitive processing ）的词汇（常常表示抑郁、高度集中的注意力、探究意义等）。</p>
<p><img loading="lazy" src="img/pnas_love_line.png" alt=""  />
</p>
<p>分手前后Reddit用户语言模式的变化。第0周是每个用户在分手时公开披露分手的时间点。</p>
<p>此外，「语言标记」中有关「分析思考」（analytic thinking）的词汇的出现频次会下降，与「分析思考」相关的词汇往往包含更多以个人为中心和非正式的语言。</p>
<p>研究人员还发现，即使人们在与分手这类话题无关的群组中发帖，上述这种「语言标记」模式仍然存在。</p>
<p><strong>要注意了！</strong></p>
<p>与偶尔发一次帖的人相比，那些经常发布分手信息的人在分手一年之后，适应能力会变得很差。</p>
<p>83%的人都会以第一人称发送第一次分手的信息，并且这些帖子详细描述了分手过程，甚至导致分手的原因和分手的后果都有。</p>
<p><img loading="lazy" src="img/pnas_love_S1.png" alt=""  />
</p>
<p>例如，一位网友通过回忆来讲述自己分手的故事：</p>
<blockquote>
<p>“Hey breakups, going through a rough one this week. The girl I&rsquo;ve been seeing the last 7 months left me last Friday due to us not having common interests. Our relationship seemed just awesome and thought we were happy. We did get into a &ldquo;routine&rdquo; pretty fast and I was happy with it. Cook dinner, sex, watch movies together. I knew going into this with her she was a free spirited outdoorsy type and I am admittedly the opposite. But we sparked, and formed a relationship after a few months of talking. Things seemed great. We lived maybe 45 minutes away from each other and had different work schedules, so we only saw each other maybe 3 times a week, so it was sometimes hard to see each other&hellip;”</p>
</blockquote>
<br>
<h2 id="分析思考和认知过程">分析思考和认知过程</h2>
<p>尽管许多情侣关系解体模型都强调了分手过程中固有的认知思维，但没有一项研究能够实时跟踪认知过程。</p>
<p>同时，研究人员在研究认知过程的变化时面临着几个艰巨的挑战，包括如何识别和测量感兴趣的认知动态。</p>
<p>研究人员最近的工作确定了两种基于语言的通用思维模式：一是分析思考，另一是认知过程。</p>
<p><img loading="lazy" src="img/pnas_love_LIWC.png" alt=""  />
</p>
<p><strong>说话以「我」、「我们」为焦点</strong></p>
<p>回想下，排除第三者关系，女友和你提出分手前，是不是经常会说「我&hellip;.」</p>
<p>正如研究人员指出，当分手发生时，人们会向内去理解发生关系破裂的原因，这有时会让人陷入沉思和情绪困扰 。</p>
<p>在与抑郁、自杀、情绪剧变、消极和心理困扰相关的报告中，「我」这个词是最常见的。这表明 「我」的使用能够捕获内部的焦点和个人内部的关注。</p>
<p>同样，在情侣关系研究中，在分手之前、之中和之后查看「我」字的使用可能是一种不错的方法，来跟踪人们在整个分手过程中的对自我关注和调整。</p>
<p><img loading="lazy" src="img/pnas_love_LIWC.png" alt=""  />
</p>
<p>在分手期间，人们可能会深究对方的前任伴侣和两人间的关系。</p>
<p>「我们」一词，揭示了情侣间的关系承诺、继续关系的意图和解决问题的行为等等信息。</p>
<p>而情侣之间更多地使用「我们」一词突出了成功的浪漫关系背后靠的是情侣间的相互依存性。</p>
<p>但是，如果情侣间的关系变坏呢？</p>
<p>一些研究发现，经常分享分手故事的人，如果开始频繁地使用「我们」这个词，这种现象就预示着他和他伴侣间的关系会变得更差。</p>
<br>
<h2 id="分手后遗症">分手后遗症</h2>
<p>在人们的社交生活与其在线状态交织在一起的时代，研究分手和其他个人心情动荡出现了新的方法。</p>
<p>通过研究社交媒体帖子，研究人员已经发现了与人们情绪和心理状态相关的语言模式，例如抑郁症、创伤后应激障碍诊断和注意缺陷多动障碍症状。</p>
<p>通过对社交媒体平台中人们的语言进行分析，研究人员最终可以追踪人们在分手时不断演变的心理过程。</p>
<p>正如研究者指出，真正分手后会持续6个月的心理影响。</p>
<p><img loading="lazy" src="img/pnas_love_sig.png" alt=""  />
</p>
<p>分手后遗症，你有吗？</p>
<br>
<h2 id="数据下载httpsosfioa9qmxview_only07f3d732d9c04bcc9f6844c4e889c1e8"><a href="https://osf.io/a9qmx/?view_only=07f3d732d9c04bcc9f6844c4e889c1e8">数据下载</a></h2>
<p><a href="https://osf.io/a9qmx/?view_only=07f3d732d9c04bcc9f6844c4e889c1e8">4.8G,含代码</a></p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>量化历史语言学-贝叶斯语言谱系分析</title>
      <link>https://textdata.cn/blog/quant_lang/</link>
      <pubDate>Sat, 01 Jan 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/quant_lang/</guid>
      <description>量化历史语言学，尤其是贝叶斯语言谱系分析的前世今生，以及可能的未来</description>
      <content:encoded><![CDATA[<blockquote>
<p>Author:小云哥哥</p>
<p>Src: <a href="https://zhuanlan.zhihu.com/p/386454664">https://zhuanlan.zhihu.com/p/386454664</a></p>
</blockquote>
<p>历史语言学家有两个基本任务。第一个任务是追溯相关语言的源头——所谓的“原始语言”，说得通俗一点就是推测一下祖先们是怎么说话的。但其实除非有时光机器，否则我们不可能知道祖先的发音，构拟原始语言的最终目的是使用一个自洽的系统去解释现代亲属语言的差异。这个任务是技术活儿，需要硬功夫，语言学家必须对这些语言的各方面都了如指掌，通过多年的时间真正理解这些语言的运作（尤其是音系和形态），而不是一上来就开始尬比较。第二任务是第一个任务的衍生产品。当我们能够解释亲属语言的差异以后，我们自然而然会发现有的语言差异较小，有的语言差异较大，我们会希望知道每种差异发生的时间顺序，从而推断出亲属语言是因循什么轨迹从原始语言中分化出来的。这就是语言的谱系。</p>
<p>虽然传统的历史语言学取得了非常大的成功，但是语言学家毕竟是人，他们用人力研究为数众多的语言、处理浩如烟海的语料，总会出现这样那样的问题。比如说我们会在不少著作中看到语言学家前后标准不一致，或者分析过程描述不清晰透明等现象。有时候这些问题并不是有意为之，而是因为人确实无法预估那么多的事情，出错在所难免。</p>
<p>于是，一部分语言学家开始认识到，我们需要一个机器协助的、量化的转变。人的大脑爱耍小聪明，更擅长处理复杂而特殊的个案，而机器更像一个奴隶，可以帮人类用统一的方法处理繁多和重复的工作。那么，历史语言学家的两个任务，机器可以协助我们解决哪一个呢？原始语言的构拟还是语言的谱系？</p>
<p>事实上，这两个任务都需要很多的小聪明。如果原始语言的构拟是简单的音位比较，那么机器也许可以很快做出来。但实际操作上要比这个绕很多的弯儿，需要语言学家综合知识的灵活运用。比如索绪尔的喉音理论，就需要对梵语动词变位的深入理解，从而比较不同变位模式的内在一致，并且对音变的类型学有融会贯通的了解。这一切的运作，可能在索绪尔的脑子里一秒钟就能形成，而机器则不可能在短时间内完成喉音的构拟。我们引入机器是为了提高效率，而不是降低效率。<strong>因此，语言学家把目光转向了第二个任务，语言的谱系</strong>。历史语言学确定谱系的唯一标准是共同创新，但辨认共同创新实际上也需要深厚的研究功底，机器很难按照人类的方式分析。一个比较可行的办法是偏离历史语言学的原则，使用统计学的方式，构造出在统计学意义上最可能的谱系。</p>
<p>在这篇文章中，我就用流水账的方式梳理一下机器协助的语言谱系分析的相关历史，尤其专注于贝叶斯谱系分析。因为是流水账，所以不会分小节，我也会省去所有赶客的公式和理论描述。</p>
<br>
<h2 id="语言谱系分析">语言谱系分析</h2>
<p>较早使用统计学处理语言谱系的研究可以追溯到十九世纪前叶。不过现代的尝试最值得提的是二十世纪二十年代开始的一系列操作。波兰人类学家Czekanowski[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_1">1]</a>在1928年收集了二十多个音系、形态和词汇上的特点，研究了包括立陶宛语、古教会斯拉夫语、哥特语、古爱尔兰语、拉丁语、希腊语、吠陀梵语、阿维斯陀语和亚美尼亚语相互之间的关系。他们得出的结果其中一个错误是认为哥特语与波罗地-斯拉夫语更为接近，而不是意大利-凯尔特语。1937年，加州大学的Kroeber和Chrétien[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_2">2]</a>在前人的基础上，添加了新的数据（主要是特征性的音变和形态变化方面的数据），使参与比较的特征达到了74个。下图是Kroeber and Chrétien (1937)的统计分析</p>

<figure >
    
        <img src="img/tab_occu.jpg" width="800" />
    
    
</figure>

<p>Kroeber和Chrétien就是通过判断每一个特征是否在各种语言中出现，列出矩阵计算出各语言的相似度。他们的结果，至少从这九种语言来看，基本上与历史语言学的结果相符。但由于数据本身的局限性，他们的方法并没有被大规模地使用，并且遭到了一些批评。我不知道他们的计算是否用了机器，但是从他们并不复杂的公式来看，可能是笔算的。</p>
<p>虽然这些早期的尝试寿命并不长，但是也为量化历史语言学定下了统计学的基调，尽管在数据选取上，名义上是使用了历史语言学的结论，但是并没有使用历史语言学的分类标准，而是把这些结论转化成可以用于统计学的数据。这也是从这以后，直至现在将尽一个世纪的趋势。</p>
<blockquote>
<p>La linguistique est la science statistique type ; les statisticiens le savent bien ; la plupart des linguistes l&rsquo;ignorent encore. (Guiraud 1959: 15[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_3">3]</a>)
语言学就是典型的统计科学；统计学家心里很清楚，大部分语言学家却不知道。</p>
</blockquote>
<p>&lt;比如&gt;</p>
<h2 id="基于词汇的语言谱系分析">基于词汇的语言谱系分析</h2>
<p>1950年代，有一个长得有点喜感的中年男人，叫Morris Swadesh。他是一个美国的语言学家。身为一个历史语言学家，他并不把关注的重点放在音系和形态的变化上，而是更专注于词汇。词汇相对于音系和形态，显然是更容易操作的东西，毕竟它们就像拼好的积木，能让人一眼就辨认出来。Morris Swadesh (1909-1967)</p>

<figure >
    
        <img src="img/Morris.jpg" width="800" />
    
    
</figure>

<p>Swadesh认为不同语言中词汇的重合度很可能与语系的演化有关。这点很符合我们的直觉，基因关系较远的语言中，非同源的词汇理应越多。而且，他还假设词汇系统是按一定的速率变化的，我们只要以这个速率为基础，然后比较亲属语言的同源词的多寡，就能得到语言的谱系，同时我们还可以算出亲属语言的分裂时间。<strong>Swadesh (1950)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_4">4]</a>认为词汇的变化速率是每过1000年，一种语言想对于原本形态的同源词就会降低到原来的85%。后来这个百分比又被改为81%。 这个数字大概是基于古英语和现代英语的词汇变化确定的</strong>。</p>
<h3 id="核心词汇">核心词汇</h3>
<p>我们不可能穷尽所有的词汇，所以就需要选取一些具有代表性的词汇来简化我们的研究。Swadesh整理出一份100词的词表，现在我们称为“<strong>核心词汇</strong>”或者“<strong>基本词汇</strong>”，包括身体部位、数字、颜色、基本动作等类别，这些词汇被认为是最不容易被借用的，有较大的概率是本土词汇。</p>
<h3 id="语言断代学词汇统计学">语言断代学（词汇统计学）</h3>
<p>这么一来，如果我们发现两种亲属语言在核心词汇表上有81%的同源词，那么我们就可以认为这两种语言的分化时间是1000年。如果它们有81%×81%=65.61%的同源词，那么它们的分化时间就是2000年。这个方法我们称为Glottochronology，汉语称作“<strong>语言断代学</strong>”，它也是“<strong>词汇统计学</strong>”（lexicostatistics）的最主要方法之一。</p>
<p>为了让故事更连续，我在这里删除了其它的研究方法，比如计算词汇间Levenshtein距离，有关这方面的内容，可以看<a href="https://www.zhihu.com/question/442752699/answer/1714008582">这个回答</a>。</p>
<p>总而言之，从Swadesh开始，量化历史语言学基本上就在词汇之间徘徊，人们开始想尽办法从词汇中找到语言发展的轨迹。当然， 也有从音系/形态上考虑的（Ringe et al 2002）[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_5">5]</a>，还有从类型学上考虑的（Dunn et al 2008）[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_6">6]</a>，但始终无法摆脱或者撼动以词汇为基础的大趋势。</p>
<p>语言断代学虽然在语言谱系分析的量化上取得了较大的进展，但最终仍被认为是失败的方法。这是因为它强制规定词汇有着固定的变化速率。这一基本假设从直觉上就不符合语言的发展历程，而且没有靠谱的研究去证明，反而很容易被证伪。比如说，我们使用语言年代学的模型，我们会得到格鲁吉亚语和明格列尔语的分化年代距今约1000年左右。但实际上，它们两个的分化年代要远早于公元四到五世纪（Bergsland and Vogt 1962）[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_7">7]</a>。Swadesh本人也觉得这个方法有问题。所以逐渐人们也就不再使用语言年代学了。</p>
<p>语言断代学最大的贡献不在于它得出的结论有多正确，而是让人们看到为语言分化断代的希望，通过语言的年代来研究人类史前史成为了可能，历史语言学不再是自娱自乐地谈论古人怎么说话，而一跃成为了人类历史研究中最重要的学科之一。</p>
<p>比如说，Gray and Jordan (2000)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_8">8]</a>使用简约分析（parsimony analysis）计算出南岛语的谱系，测试了有关南岛语系起源的两个假说，“快车假说（express-train）”和“岛屿纠缠假说（entangled bank）”。他们发现快车假说与南岛语谱系树惊人吻合，从而确认了南岛语是从台湾省起源，扩散到南部各个岛屿的。</p>
<p>因为有了成功的希望，所以尽管有很多语言学家对语言的断代嗤之以鼻，另一部分语言学家仍旧在探索着新的道路。我们在这里将跳过一些不太受欢迎的研究方法，比如Ringe et al (2002)和Nakhleh et al (2005)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_9">9]</a>的“完全谱系”（perfect phylogenies）。他们跟二十世纪二三十年代的那帮人类似，使用了音系和形态方面的语料来计算，当然他们的统计学方法要先进得多。只不过，他们处理语料的方式跟前人一样，基本上就是看哪一些特征在哪一些语言中存在，并没有具体到确切的实例。</p>
<h3 id="语言变化的时钟-宽松时钟">语言变化的时钟-宽松时钟</h3>
<p>谱系分析始终只是历史语言学家的其中一个任务，更多的历史语言学家喜欢智力游戏，在构拟上下的功夫比较多，对于机器处理的谱系分析的热情没那么高。正在这时，那一边厢，生物学家们正在努力地发展更有效的断代方法。美国亚利桑那大学的演化生物学家Michael Sanderson就是其中一个代表人物。他从1997到2002发表了一系列的论文[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_10">10]</a>[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_11">11]</a>，研究了一些已知的谱系树分支的年龄，认为DNA序列的发展确实是有既定的速率，这个速率是它们内在的“时钟”决定的，在不同的分支中，时钟走动的快慢是有区别的。如果我们把这个思想代入到语言学中，我们就知道，按照Swadesh的语言年代学的方法，词汇的发展被认为有统一的“时钟”，或者叫“分子时钟”（molecular clock），我们称为“严格时钟”（strict clock），而分子生物学的最新假设则是引入了“宽松时钟”（relaxed clock），换成语言学，则是认为词汇在不同语支的替换速率并不统一，而是各有各的速率。顺便一提，Swadesh的语言年代学比分子生物学中的“分子时钟”的提出（Zuckerkandl and Pauling 1965）[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_12">12]</a>要早十年左右，但是生物学家在接受新鲜事物和创新方面要比语言学家快得多。在贝叶斯谱系分析中，Thorne et al (1998)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_13">13]</a>和Drummond et al (2006)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_14">14]</a>等人都对严格时钟的框架进行了批评和测试，并发现宽松时钟确实可以更好地模拟真实的演化过程。</p>
<p>历史语言学最终还是再次向生物学靠拢了。2003年，Gray and Atkinson (2003)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_15">15]</a>在Nature上发表了一篇文章，他们使用了贝叶斯谱系分析计算出了印欧语的谱系树，并如同之前测试南岛民族的演化历程一样，这次他们也用谱系树测试了印欧语起源的两种假说，并表示语言的谱系支持原始印欧人是安纳托利亚的农民这一种看法。下图是Gray and Atkinson (2003)的印欧语谱系树</p>

<figure >
    
        <img src="img/Hcluster.jpg" width="800" />
    
    
</figure>

<br>
<h2 id="谱系分析算法">谱系分析算法</h2>
<p>那么，语言的贝叶斯谱系分析究竟是怎么进行的呢？就像我们之前说的，词汇仍旧是基础。我们选取一个核心词汇表，然后把词汇表中的词汇翻译成我们需要解决的诸语言。当然，这一切都是建立在我们有合理理由怀疑这些语言是同属一个语系的前提下，否则我们得到的结果就没有意义。把词汇翻译成各种语言以后，我们就开始辨别同源词。我们把每一个义项下的同源词找出来，并把它们配成对儿。下图是词源词典编辑工具Edictor界面下的同源词辨认</p>

<figure >
    
        <img src="img/alignLang.jpg" width="800" />
    
    
</figure>

<p>同一个义项下，不同的语言可能呈现不同的词汇。比如汉语中，表示“EAT”这个义项的词汇在粤语和闽南语中都是来自“食”的同源词（粤语：si̍k，闽南语chia̍h），而普通话中则用“吃”来替代。那么单凭这一个词，我们用人脑都可以算出来，粤语和闽南语应该归在一个分支下，而普通话则应该属于另一个分支。</p>
<p>我们就这样把数十甚至上百种语言的同源词都标记出来，并且把它们转化为机器可读的形式。那么什么样的形式机器才可读呢？机器是不会管你每个词是怎么发音的，它只想知道某两个词是不是同源词。所以你只需要告诉它哪些词是同源词，哪些不是，就可以了。如果两个词是同源词，那么就标记一个“1”，如果不是就标记一个“0”。所以你就要做一个像下图一样的东西，全是0和1，咱们看不懂，但是机器很容易看懂：</p>

<figure >
    
        <img src="img/binary.jpg" width="800" />
    
    
</figure>

<p>看到这里，大家就明白了。贝叶斯谱系分析的数据是“同源关系”，而不是同源词本身。我们把数据喂给电脑，接下来就让电脑处理吧。</p>
<h3 id="马尔可夫链蒙特卡洛">马尔可夫链蒙特卡洛</h3>
<p>很多传统语言学家诟病，电脑处理的这个部分不透明，像在黑盒里操作一样，不放心把一切交给程序。为了解除一部分疑虑，我在这里解释一下究竟机器是怎么算谱系树的，当然，为了不赶客，下文中不会出现深奥的东西。</p>
<p>机器在得到我们这些充满0和1的数据后，会开始使用贝叶斯定理，计算出一棵谱系树的可能性。它会先随机生成一棵谱系树，这棵谱系树正确反映语言谱系的概率可想而知是非常低的，但机器就会根据输入的数据，把这个概率算出来，先记下。然后它就会改变原树的形状，生成一棵新的树，再计算出这棵树正确反映语言谱系的概率算出来，与前一棵树的概率比较。如果前一棵树的概率比较小，那么我们就保留新的这棵树。如果前一棵树的概率较大，那么说明新树比旧树还要差，因此我们就会计算前后两个概率的比值（用新的概率除以旧的概率），得到的就是接受这棵新树的概率。然后机器会一直生成新的树，一直重复着相同的比较和计算，一般我们会让机器重复上千万次的计算，从而保证生成的每一棵树的概率达到一个较为稳定的值。这个过程有个名字，叫马尔可夫链蒙特卡洛（Markov chain Monte Carlo，MCMC）。大家可以看以下这篇文章，对其中的数学做了详细介绍：</p>
<p><a href="https://zhuanlan.zhihu.com/p/420214359">https://zhuanlan.zhihu.com/p/420214359</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/420214359">而今听雨：MCMC与贝叶斯推断简介：从入门到放弃111 赞同 · 16 评论文章</a></p>
<h3 id="共识树">共识树</h3>
<p>计算完了上千万次的树以后，还要进行一个步骤。就是我们需要把前边那些低概率的树删掉一点，或者说“烧掉”（burn-in），这样我们就可以排除掉那些比较糟糕的树。最终留下的带有稳定较高概率的树的集合，就是机器为我们输出的结果。所以，我们在众多有关贝叶斯谱系分析论文中看到的树，都不是一棵树，而是成千上万棵具有相近概率的树相互妥协的结果，我们称为“共识树”（consensus tree）。</p>
<p>机器计算出的每棵树的分支都有着不同的长度。这些长度跟每一个分支末端的语言年龄是成正比的。也就是说，单凭这些分支的长度，我们只能知道语言之间年龄的比值，而我们想知道的却是它们精确到年的真正年龄。这就需要我们找到一个参考点，或者一个称为prior的东西。Prior可以是对得出最佳谱系有利的任何参考数据，而针对语言谱系的年龄，最理想的prior就是语言被记录的时间。比如，我们知道书面藏语是1300多年前被记录的，那么我们就为书面藏语标记1300年的年龄。这样的信息越多，那么计算出来的年龄就会越准确。软件会结合分支的长度与我们给出的年龄信息，推算出其它语言的年龄。这样我们带有年龄的谱系树就产生了。</p>
<h3 id="densitree">Densitree</h3>
<p>即便有了年龄，共识树还是共识树，我们不能把它看作一棵单一的谱系树，这也是许多人看这类文章的误区。其实，除了这棵共识树，机器还能给我们提供另一种树，叫做Densitree。Densitree可以把所有谱系树中冲突的部分可视化，让我们看到究竟哪里出了问题。Densitree看起来还是很美观的， 是无数线条的集合。下图中展示的Sagart et al (2019)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_16">16]</a>汉藏语谱系的Densitree，显示了计算过程中出现的非树形结构。一个完美的树形结构中，每一种语言应该只被一条线连接，但是我们看到在这棵树上，有不少语言被深浅不一的线群连接了，比如比较严重的有Chepang、Tshangla、Dulong等语言。存在这一类非树状信息的一大原因在于我们没有完全正确地辨认同源词，而是被部分表面现象骗了，把借词也算成同源词，也提醒我们重新审视我们的同源词判定。Sagart et al (2019)汉藏语谱系的Densitree</p>

<figure >
    
        <img src="img/hcluster2.jpg" width="800" />
    
    
</figure>

<p>所以，我们除了看共识树以外，还要注意看densitree，densitree里有更多有用的信息。大部分人对于贝叶斯谱系分析，或者任何谱系分析的诟病都是基于最后的结论，极少注意到这些研究的数据结构和分析方法，甚至连结论都没有看全。因此，我呼吁大家除了看短短的正文，还要注意看文章的补充材料。</p>
<br>
<h2 id="贝叶斯谱系分析是不是语言学">贝叶斯谱系分析是不是语言学？</h2>
<p>语言学的贝叶斯谱系分析基本上就是如上述方式进行的，希望这样的描述足够通俗易懂。如果你们看懂了，你们可能会产生这一个疑问：究竟贝叶斯谱系分析跟传统历史语言学的结合有多紧密？这样子做出的语言谱系，究竟是不是语言学？</p>
<p>首先，我们应该明确，至少在语言学上，谱系分析的作用不是告诉我们确切的谱系，而是给我们一个有关语言谱系的参考，是辅助历史语言学研究的工具，而不能代替历史语言学本身。比如说，我们推测出的汉藏语系的谱系可以帮我们确立今后汉藏语系历史语言学研究的大方向，因为我们知道了哪些语言更可能属于同一分支，那么我们就可以根据这些线索和思路有针对性的研究。</p>
<p>贝叶斯语言谱系分析全过程中跟历史语言学有关的部分当然是前期的数据准备过程。这一过程需要历史语言学家判断同源词。如果研究对象是一个我们了解得比较深入的语系，比如印欧语系，我们判断同源词的标准当然是严格遵守历史语言学的原则的。但如果是像汉藏语系这种我们基本不了解的语系，判断同源词的时候很大程度上是靠猜测，有经验的语言学家比没有经验的一般人猜测的准确率自然会高出不少，但也不能完全保证准确。判断同源词的过程必须主要由人工处理。虽然现在也有不少判断同源词的工具和程序，但这些工具大部分基于词汇的相似性，但同源词、尤其是庞大语系下相距较远语言中的同源词往往不相似。比如拉丁语的duus和亚美尼亚语的erk是同源词，除非能把所有的音变告诉机器，否则机器是不可能把它们俩判断为同源词的。对于超级大的语系，判断同源词的工作可能长达数月，也需要好几个历史语言学家的商量与合作。做好同源词的数据后，我们就把一切复杂的计算交给电脑，等它算个几天，这一部分就脱离了传统语言学，进行纯粹统计学的计算了。</p>
<p>在得到谱系树之后，我们还可以进行后续的历史语言学研究，并把历史语言学的结论与贝叶斯谱系树进行比较。比如说，Birchall et al (2016)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_17">17]</a>就为Chapacruan语系的语言做了一个贝叶斯谱系分析，并同时使用音变创新手动得出了另一个谱系树，并对两棵树进行了比较研究，发现贝叶斯谱系分析得出的结论与手动做出的谱系树还是比较吻合的。又比如，在Sagart et al (2019)的汉藏语谱系发表后，项目成员又发表了一些后续的历史语言学研究与其遥相呼应，比如Lai et al (2020)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_18">18]</a>对西夏语谱系地位的研究，以及Jacques et Pellard (2021)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_19">19]</a>对羌缅语的分析。</p>
<p>虽然贝叶斯谱系分析的前前后后都少不了历史语言学的工作，但两者始终没有完全融合在一起，在整个研究中交集并不多，而是有着明显的分工。这一个弱点也经常被人们攻击。而且，贝叶斯谱系分析直到今天，都在使用语言学家们较为不喜欢的核心词汇作为基础，而词汇绝不能与生物学中的DNA序列相提并论，音系和形态才可以。</p>
<p>那么为什么我们坚持使用词汇呢？我在这里谈两个原因。</p>
<p>第一，词汇被认为可以涵盖历史语言学的大部分工作，并且容易操作。我们判断同源词的时候，自然要考虑到音变的规律性和对应关系，有时甚至要倒推形态，有时还要进行简单的构拟，这些工作都体现在同源词的判别中，因此我们选用词汇，并不是完全无视传统历史语言学，而是因为词汇的比较是传统历史语言学的“精华”。</p>
<p>第二，词汇的替换是可以无限进行下去的，而且词汇替换的速率已经被证明可以用一定的模型去模拟。而音变则是比较有方向性的，有的音变一旦发生，可能就没办法回头了，比如p &gt; f的音变很容易发生，而f &gt; p的音变则极少发生。另外，音变可以很快，也可以很慢，它们究竟能不能模拟也是一大问题。</p>
<p>因此，大部分语言学家在谱系分析时，都在如何更好地标记词汇上下功夫。以同源词关系为基础的谱系分析可以在较大的语系下取得成功，但如果我们要研究时间深度较浅的小分支，很可能就没那么得心应手了。</p>
<p>比如我们要研究官话的谱系，大部分官话的核心词汇都差不多，词汇替换的现象比较少，那么我们喂给机器的数据库可能大部分都是“1”，这样我们可能会得到许多平行的分支，而不是一棵有结构的树。用贝叶斯谱系分析做出的官话谱系，可能不会比白一平（2006）[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_20">20]</a>用最大简约法做出的官话谱系进步多少。再者，目前的贝叶斯分析也并非能对大语系完全掌控，比如说，Gray and Atkinson (2003)的印欧语谱系树最让人看不过眼的一点就是斯拉夫语的分类，大家可以自行上滑到他们的印欧语谱系树上，找找波兰语在哪里。</p>
<p>再举一个极端的例子，假设两种语言互相不能通话（发生了重要的音变），但所有核心词汇都是同源词，没有发生词汇替换，那么机器将认为这两种语言是同一种语言。尽管这样极端的情况在现实世界中不会发生，尽管每一种研究方法都有它的不足之处，但我们应该事先考虑到突发状况的解决办法。这就是未来我们需要解决的问题。</p>
<p>贝叶斯谱系分析在语言学上的应用已经差不多二十年了，但这二十年间，研究方法上的突破并不显著。人们当然知道这样的分析存在的问题，但是实际研究上，却很难去解决。比如在词汇替换中，有一种情况可能只有词汇的一部分被替换了，那么我们究竟是赋“1”呢，还是赋“0”呢？Hill and List (2017)[<a href="https://zhuanlan.zhihu.com/p/386454664#ref_21">21]</a>倒是提出了一个解决方案，他们开发了“部分同源词”（partial cognate）的标记方法，这种方法支持把一个词拆开，只标记同源的部分。如下图中，缅语支诸语言的“羽毛”一词，都可以分析称两个词素，我们可以把这两个词素拆开，分别标记同源关系。</p>

<figure >
    
        <img src="img/tokens.jpg" width="800" />
    
    
</figure>

<p>部分同源词的标记实际上已经向基于形态的谱系分析迈进了一步，虽然它并没有真正触及到复杂的形态变化，但至少在尝试为合成词的问题寻求合理的解决方法。部分同源词的标记通过实验证明是可行的，但是目前并没有很多真枪实弹的研究成果发表出来。</p>
<p>如果没有部分同源词的标记，贝叶斯谱系分析其实已经开始变得有点无聊，即便有了部分同源词标记，也并不能把它的有趣续命太久，毕竟这一步迈得也不大。当我们知道一个方法远没有达到理想的程度，但又不断原地打转时，我们就会自然而然地感到焦虑。</p>
<p>未来的贝叶斯谱系分析的重点必然在于我们处理数据的方式，如何融入更多的历史语言学原则是我们需要思考的。在上文中，我们已经提到，目前声称把语言学和贝叶斯谱系结合在一起的研究无非就是分别用贝叶斯做一个，再用语言学做一个，然后再进行定性的比较。这种方法是绝不能让人满意的。我们需要更加无缝的衔接。</p>
<p>另外，回归到1930年代或者Ringe et al (2002)和Nakhleh et al (2005)的“完全谱系”那种基于音系和形态特征的谱系分析似乎也是不可取的。因为这些研究对具体数据的处理完全不够，仅仅是从前人的作品里选出一部分可能对分类有用的特征进行计算，这中间仍会有许多不清晰的地方。</p>
<p>最理想的情景是从语料入手，自然地融入同源词判定以及音系、形态上的创新，让机器根据各语言创新的情况来计算出谱系树。这样不仅仅能大大增加研究的客观性和透明性——单纯的同源词判定的主观因素占比非常严重，而使用创新为依据可以让读者更直接地找出潜在的问题，而且可以让谱系分析有更强大的理论背景。</p>
<br>
<h2 id="最后">最后</h2>
<p>恰好，昨天（2021年7月6日），我在我们所的部门会议上谈到了这个问题，Gray and Atkinson (2003)的作者之一，Russell Gray，也是我们的部门主任，也谈了他的想法。他非常愿意看到新的贝叶斯谱系的方案，不过他承认即便在印欧语的谱系研究中，完全融合语言各层面的数据也是极难做到的。我解释道我不是想完全放弃以词汇的同源关系为基础的谱系分析，而是希望能通过音系和形态，去检验词汇同源关系所无法得到的细节。我的预感是，如果我们融入了音系/形态的创新，得出的结果中，非树状信号会大大减少，并帮我们检查同源词判定究竟在哪里出现了问题。</p>
<p>流水账就写到这里吧。我想大家在这篇流水账中看到的中心思想，是通过量化谱系分析的发展史，看到研究方法一步一步的变迁，以及它们遇到的困难和存在的问题。我们应该知道，评价这类研究的重点在于它们的方法，而不仅仅局限于结论——因为结论必然是有问题的，即便我们得到了一棵完美全对的谱系树，它仍旧是存在问题的，因为它并非完全基于历史语言学理论，而很大程度基于概率，它的完美只是概率问题（有时候太漂亮的结果，也是我们担心的来源之一）。只有对数据处理的方法不断地改进，才有可能把我们带向最真实的谱系分析。</p>
<p>谱系分析是历史语言学研究中的一个强大的辅助，尤其是它自带断代的特征，可以让我们更好地追溯人类的历史。因此今后的历史语言学家对机器协助的谱系研究会更加上心，争取让既有的历史语言学理论与新兴的技术更加默契地配合。这也是我的愿望列表上的一项，在今后数年的研究中会作出各种各样的尝试。</p>
<br>
<h2 id="参考">参考</h2>
<ol>
<li>Jan Czekanowski, Na Marginesie Recenzji P. K. Moszyiskiego o Ksigtce: Wstep do Historji Slowian. Lud, Series II, vol. VII (1928).</li>
<li>Kroeber, A., &amp; Chrétien, C. (1937). Quantitative Classification of Indo-European Languages. Language, 13(2), 83-103. doi:10.2307/408715</li>
<li>Guiraud, Pierre (1959), Problèmes et méthodes de la statistique linguistique, D. Reidel, Publishing Company, Dordrecht, Holland.</li>
<li>Swadesh, M. (1950). Salish internal relationships. International Journal of American Linguistics, 16(4), 157-167.</li>
<li>Ringe, D., Warnow, T., &amp; Taylor, A. (2002). Indo‐European and computational cladistics. Transactions of the philological society, 100(1), 59-129.</li>
<li>Dunn, M., Levinson, S. C., Lindström, E., Reesink, G., &amp; Terrill, A. (2008). Structural phylogeny in historical linguistics: Methodological explorations applied in Island Melanesia. Language, 710-759.</li>
<li>Bergsland, K., &amp; Vogt, H. (1962). On the validity of glottochronology. Current anthropology, 3(2), 115-153.</li>
<li>Gray, R. D., &amp; Jordan, F. M. Language trees support the express-train sequence of Austronesian expansion, 2000. Nature, 405, 1052.</li>
<li>Nakhleh, L., Ringe, D., &amp; Warnow, T. (2005). Perfect phylogenetic networks: A new methodology for reconstructing the evolutionary history of natural languages. Language, 382-420.</li>
<li>Sanderson, M. J. (1997). A nonparametric approach to estimating divergence times in the absence of rate constancy. Molecular biology and evolution, 14(12), 1218-1231.</li>
<li>Sanderson, M. 2002 Estimating absolute rates of evo- lution and divergence times: a penalized likelihood approach. Mol. Biol. Evol. 19, 101–109.</li>
<li>Zuckerkandl, E., &amp; Pauling, L. (1965). Evolutionary divergence and convergence in proteins. In Evolving genes and proteins (pp. 97-166). Academic Press.</li>
<li>Thorne, J. L., Kishino, H., &amp; Painter, I. S. (1998). Estimating the rate of evolution of the rate of molecular evolution. Molecular biology and evolution, 15(12), 1647-1657.</li>
<li>Drummond, A. J., Ho, S. Y. W., Phillips, M. J. &amp; Rambaut, A. 2006 Relaxed phylogenies and dating with confidence. PLoS Biol. 4, e88. 699 – 710. (doi:10.1371/ journal.pbio.0040088)</li>
<li>Gray, R. D., &amp; Atkinson, Q. D. (2003). Language-tree divergence times support the Anatolian theory of Indo-European origin. Nature, 426(6965), 435-439.</li>
<li>Sagart, L., Jacques, G., Lai, Y., Ryder, R. J., Thouzeau, V., Greenhill, S. J., &amp; List, J. M. (2019). Dated language phylogenies shed light on the ancestry of Sino-Tibetan. Proceedings of the National Academy of Sciences, 116(21), 10317-10322.</li>
<li>Birchall, J., Dunn, M., &amp; Greenhill, S. J. (2016). A combined comparative and phylogenetic analysis of the Chapacuran language family. International Journal of American Linguistics, 82(3), 255-284.</li>
<li>Lai, Yunfan., Gong, Xun., Gates, Jesse. P., &amp; Jacques, Guillaume. (2020). Tangut as a West Gyalrongic language. Folia Linguistica Historica, 54(s41), 171-203.</li>
<li>Jacques, G., &amp; Pellard, T. (2021). Phylogenies based on lexical innovations refute the Rung hypothesis. Diachronica, 38(1), 1-24.</li>
<li>Baxter, W. H. (2006). Mandarin dialect phylogeny. Cahiers de linguistique-Asie orientale, 35(1), 71-114.</li>
<li>Hill, N. W., &amp; List, J. M. (2017, September). Challenges of annotation and analysis in computer-assisted language comparison: A case study on Burmish languages. In Yearbook of the Poznan Linguistic Meeting (Vol. 3, No. 1, pp. 47-76). De Gruyter Open.</li>
</ol>
<h2 id="录播课">录播课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python与文化分析入门</title>
      <link>https://textdata.cn/blog/culture_analysis/</link>
      <pubDate>Fri, 31 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/culture_analysis/</guid>
      <description> 如何使用 Python 来研究文化领域的数据，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。这些材料最初是为了支持“**文化分析简介：数据、计算和文化**”，这是康奈尔大学和华盛顿大学教授的本科课程。</description>
      <content:encoded><![CDATA[<h2 id="introduction-to-cultural-analytics--python">Introduction to Cultural Analytics &amp; Python</h2>
<p>Designed by <a href="https://melaniewalsh.org/">Melanie Walsh</a> // Powered by <a href="https://jupyterbook.org/">Jupyter Book</a></p>
<p>该项目仓库托管了在线教科书 <strong>Introduction to Cultural Analytics &amp; Python</strong> 里的代码，主要面向人文社科人群设计的Python编程语言书</p>
<p>这本书展示了如何使用 Python 来研究文化领域的数据，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。</p>
<p>这些材料最初是为了支持“<strong>文化分析简介：数据、计算和文化</strong>”，这是康奈尔大学和华盛顿大学教授的本科课程。</p>
<br>
## 章节列表
## 数据集
## 命令行
<br>
<h2 id="python语法">Python语法</h2>
<ul>
<li>安装Python</li>
<li>如何使用Jupyter Notebook</li>
<li>变量</li>
<li>数据类型</li>
<li>字符串方法</li>
<li>比较逻辑运算</li>
<li>循环</li>
<li>函数</li>
<li>文件编码</li>
<li>常见Python错误</li>
<li>Jupyter使用技巧
<br></li>
</ul>
<h2 id="数据分析">数据分析</h2>
<ul>
<li>Pandas基本操作</li>
<li>合并数据
<br></li>
</ul>
<h2 id="数据采集">数据采集</h2>
<ul>
<li>法律风险</li>
<li>网络爬虫</li>
<li>API</li>
<li>案例-采集歌词</li>
<li>案例-twitter</li>
<li>案例-Reddit
<br></li>
</ul>
<h2 id="文本分析">文本分析</h2>
<ul>
<li>TF-IDf</li>
<li>情感分析</li>
<li>话题模型</li>
<li>命名实体识别</li>
<li>词性
<br></li>
</ul>
<h2 id="网络分析">网络分析</h2>
<ul>
<li>bokeh网络可视化
<br></li>
</ul>
<h2 id="资料下载">资料下载</h2>
<p><a href="https://github.com/hiDaDeng/Intro-Cultural-Analytics/archive/refs/heads/master.zip">https://github.com/hiDaDeng/Intro-Cultural-Analytics/archive/refs/heads/master.zip</a></p>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>免费社科类Python编程课程列表</title>
      <link>https://textdata.cn/blog/course_recommendation_about_social_science/</link>
      <pubDate>Fri, 31 Dec 2021 11:43:10 +0600</pubDate>
      
      <guid>/blog/course_recommendation_about_social_science/</guid>
      <description>&lt;h2 id=&#34;文化分析python&#34;&gt;文化分析&amp;amp;Python&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html&#34;&gt;https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本书对应于康奈尔大学和华盛顿大学教授的本科课程《&lt;strong&gt;文化分析简介：数据、计算和文化&lt;/strong&gt;》，主要介绍了&lt;strong&gt;如何使用 Python 来研究文化材料&lt;/strong&gt;，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。&lt;/p&gt;
&lt;p&gt;这些材料最初是为了支持“”，这是。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;什么是文化分析？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文化分析是用计算方法研究文化。 文化是一个广义的术语，包括文学、历史、政治、艺术、音乐、社交媒体等等。 文化分析是数字人文和信息科学等领域不断发展的研究领域。&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/culturePython.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;h2 id=&#34;计算和推理思维数据科学基础&#34;&gt;计算和推理思维:数据科学基础&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Computational and Inferential Thinking: The Foundations of Data Science&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://inferentialthinking.com/chapters/intro.html&#34;&gt;https://inferentialthinking.com/chapters/intro.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;加州大学伯克利分校数据科学基础课程结合了三个观点：&lt;strong&gt;推理思维、计算思维和现实世界的相关性&lt;/strong&gt;。 给定来自某些现实世界现象的数据，如何分析该数据以了解该现象？ 该课程教授计算机编程和统计推断方面的关键概念和技能，并结合对现实世界数据集的动手分析，包括经济数据、文档集、地理数据和社交网络。 它深入探讨了围绕数据分析的社会问题，例如隐私和设计。该课程是与伯克利数据科学部合作提供的。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;使用-pysal-和-pydata-堆栈的地理数据科学&#34;&gt;使用 PySAL 和 PyData 堆栈的地理数据科学¶&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://geographicdata.science/book/intro.html&#34;&gt;https://geographicdata.science/book/intro.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地理数据无处不在。总体而言，社会过程、物理环境和个人行为在其地理模式、结构和间隔方面表现出惊人的规律性&lt;/strong&gt;。随着与这些系统相关的数据在范围、强度和深度上的增长，从位置等常见地理属性中提取有意义的见解变得更加重要，而且如何利用标准数据科学中不太常见的拓扑属性（例如关系）也变得更加重要。&lt;/p&gt;
&lt;p&gt;本书介绍了一种思考地理挑战的新方法， 如&lt;strong&gt;空间自相关(Spatial Autocorrelation)、点模式分析(Point Pattern Analysis)&lt;/strong&gt;。使用地理分析和计算推理，它向读者展示了如何解开隐藏在数据中的新见解。本书围绕 Python 中可用的优秀数据科学环境构建，提供示例和工作分析供读者复制、适应、扩展和改进。&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/GeoPython.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;h2 id=&#34;心理科学python编程&#34;&gt;心理科学Python编程&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lukas-snoek.com/introPy/index.html&#34;&gt;https://lukas-snoek.com/introPy/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阿姆斯特丹大学为心理学硕士研究生开设的，是为期 4 周的“心理科学编程”课程的一部分，从两周的 R 编程开始，之后学生可以在剩下的两周内选择两个主题之一：高级 R 或 Python/PsychoPy（本课程） 。因此，本 Python/PsychoPy 课程假设学生熟悉基本的编程概念（例如条件、循环和函数）。 在本课程的第 1 周，我们将深入研究 Python 特定的主题（至少与 R 相比），例如面向对象编程和最重要的数据处理包（包括 pandas、numpy 和 matplotlib）。 在第 2 周，我们将讨论如何使用 PsychoPy 软件包通过其图形界面 (Builder) 和 Python 界面 (Coder) 创建实验。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;openpifpaf用于语义关键点检测和时空关联的复合字段&#34;&gt;OpenPifPaf：用于语义关键点检测和时空关联的复合字段&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenPifPaf: Composite Fields for Semantic Keypoint Detection and Spatio-Temporal Association&lt;/li&gt;
&lt;/ul&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/openpifpaf.jpeg&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;h2 id=&#34;经济和金融领域的-python-编程&#34;&gt;经济和金融领域的 Python 编程&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://quantecon.org/python-lectures/&#34;&gt;https://quantecon.org/python-lectures/&lt;/a&gt;&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/quanecon.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://python.quantecon.org/intro.html&#34;&gt;https://python.quantecon.org/intro.html&lt;/a&gt;&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/quanecon2.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;h2 id=&#34;信用卡欺诈机器学习识别&#34;&gt;信用卡欺诈机器学习识别&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html&#34;&gt;https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML 技术在支付卡欺诈检测系统中的集成大大提高了它们更有效地检测欺诈的能力，并协助支付处理中介识别非法交易。尽管近年来欺诈交易的数量不断增加，但欺诈造成的损失百分比在 2016 年开始下降，这是与 ML 解决方案越来越多地采用相关的反向趋势。 [rep19]。除了帮助节省资金外，实施基于机器学习的欺诈检测系统如今已成为机构和公司赢得客户信任的必要条件。&lt;/p&gt;
&lt;p&gt;在这个用于卡欺诈检测的机器学习新领域中，一个被广泛认可和反复出现的问题是关于该主题 [LJ20,PP19,PL18,ZAM+16] 发表的大多数研究工作&lt;strong&gt;缺乏可重复性&lt;/strong&gt;。一方面，支付卡交易数据缺乏可用性，出于保密原因不能公开共享。另一方面，作者没有做出足够的努力来提供他们的代码并使他们的结果可重现。&lt;/p&gt;
&lt;p&gt;本书所介绍的一些技术，例如处理&lt;strong&gt;类别不平衡、模型集成或概念漂移&lt;/strong&gt;的技术，被广泛认为是信用卡欺诈检测系统设计的重要组成部分。我们还涵盖了我们认为值得更多关注的记录较少的主题。其中包括建模过程的特定设计方面，例如性能指标和验证策略的选择，以及有前景的预处理和学习策略，例如特征嵌入、主动学习和迁移学习。虽然本书侧重于支付卡欺诈，但我们相信本书中介绍的大多数技术和讨论对从事更广泛的欺诈检测主题的其他从业者有用。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;音乐分类超越监督学习走向现实世界的应用&#34;&gt;音乐分类：超越监督学习，走向现实世界的应用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://music-classification.github.io/tutorial/landing-page.html&#34;&gt;https://music-classification.github.io/tutorial/landing-page.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;音乐分类是一项&lt;strong&gt;音乐信息检索&lt;/strong&gt; (MIR) 任务，其目标是对音乐语义的计算理解。 对于给定的歌曲，分类器预测相关的音乐属性。 根据任务定义，分类任务几乎是无限的——从流派、情绪和乐器到更广泛的概念，包括音乐相似性和音乐偏好。 检索到的信息可以进一步用于许多应用，包括音乐推荐、策展、播放列表生成和语义搜索。&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/musicclassification.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="文化分析python">文化分析&amp;Python</h2>
<p><a href="https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html">https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html</a></p>
<p>本书对应于康奈尔大学和华盛顿大学教授的本科课程《<strong>文化分析简介：数据、计算和文化</strong>》，主要介绍了<strong>如何使用 Python 来研究文化材料</strong>，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。</p>
<p>这些材料最初是为了支持“”，这是。</p>
<ul>
<li><strong>什么是文化分析？</strong></li>
</ul>
<p>文化分析是用计算方法研究文化。 文化是一个广义的术语，包括文学、历史、政治、艺术、音乐、社交媒体等等。 文化分析是数字人文和信息科学等领域不断发展的研究领域。</p>

<figure >
    
        <img src="img/culturePython.png" width="100%" />
    
    
</figure>

<br>
<h2 id="计算和推理思维数据科学基础">计算和推理思维:数据科学基础</h2>
<blockquote>
<p>Computational and Inferential Thinking: The Foundations of Data Science</p>
</blockquote>
<p><a href="https://inferentialthinking.com/chapters/intro.html">https://inferentialthinking.com/chapters/intro.html</a></p>
<p>加州大学伯克利分校数据科学基础课程结合了三个观点：<strong>推理思维、计算思维和现实世界的相关性</strong>。 给定来自某些现实世界现象的数据，如何分析该数据以了解该现象？ 该课程教授计算机编程和统计推断方面的关键概念和技能，并结合对现实世界数据集的动手分析，包括经济数据、文档集、地理数据和社交网络。 它深入探讨了围绕数据分析的社会问题，例如隐私和设计。该课程是与伯克利数据科学部合作提供的。</p>
<br>
<h2 id="使用-pysal-和-pydata-堆栈的地理数据科学">使用 PySAL 和 PyData 堆栈的地理数据科学¶</h2>
<p><a href="https://geographicdata.science/book/intro.html">https://geographicdata.science/book/intro.html</a></p>
<p><strong>地理数据无处不在。总体而言，社会过程、物理环境和个人行为在其地理模式、结构和间隔方面表现出惊人的规律性</strong>。随着与这些系统相关的数据在范围、强度和深度上的增长，从位置等常见地理属性中提取有意义的见解变得更加重要，而且如何利用标准数据科学中不太常见的拓扑属性（例如关系）也变得更加重要。</p>
<p>本书介绍了一种思考地理挑战的新方法， 如<strong>空间自相关(Spatial Autocorrelation)、点模式分析(Point Pattern Analysis)</strong>。使用地理分析和计算推理，它向读者展示了如何解开隐藏在数据中的新见解。本书围绕 Python 中可用的优秀数据科学环境构建，提供示例和工作分析供读者复制、适应、扩展和改进。</p>

<figure >
    
        <img src="img/GeoPython.png" width="100%" />
    
    
</figure>

<br>
<h2 id="心理科学python编程">心理科学Python编程</h2>
<p><a href="https://lukas-snoek.com/introPy/index.html">https://lukas-snoek.com/introPy/index.html</a></p>
<p>阿姆斯特丹大学为心理学硕士研究生开设的，是为期 4 周的“心理科学编程”课程的一部分，从两周的 R 编程开始，之后学生可以在剩下的两周内选择两个主题之一：高级 R 或 Python/PsychoPy（本课程） 。因此，本 Python/PsychoPy 课程假设学生熟悉基本的编程概念（例如条件、循环和函数）。 在本课程的第 1 周，我们将深入研究 Python 特定的主题（至少与 R 相比），例如面向对象编程和最重要的数据处理包（包括 pandas、numpy 和 matplotlib）。 在第 2 周，我们将讨论如何使用 PsychoPy 软件包通过其图形界面 (Builder) 和 Python 界面 (Coder) 创建实验。</p>
<br>
<h2 id="openpifpaf用于语义关键点检测和时空关联的复合字段">OpenPifPaf：用于语义关键点检测和时空关联的复合字段</h2>
<ul>
<li>OpenPifPaf: Composite Fields for Semantic Keypoint Detection and Spatio-Temporal Association</li>
</ul>

<figure >
    
        <img src="img/openpifpaf.jpeg" width="100%" />
    
    
</figure>

<br>
<h2 id="经济和金融领域的-python-编程">经济和金融领域的 Python 编程</h2>
<p><a href="https://quantecon.org/python-lectures/">https://quantecon.org/python-lectures/</a></p>

<figure >
    
        <img src="img/quanecon.png" width="100%" />
    
    
</figure>

<p><a href="https://python.quantecon.org/intro.html">https://python.quantecon.org/intro.html</a></p>

<figure >
    
        <img src="img/quanecon2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="信用卡欺诈机器学习识别">信用卡欺诈机器学习识别</h2>
<p><a href="https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html">https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html</a></p>
<p>ML 技术在支付卡欺诈检测系统中的集成大大提高了它们更有效地检测欺诈的能力，并协助支付处理中介识别非法交易。尽管近年来欺诈交易的数量不断增加，但欺诈造成的损失百分比在 2016 年开始下降，这是与 ML 解决方案越来越多地采用相关的反向趋势。 [rep19]。除了帮助节省资金外，实施基于机器学习的欺诈检测系统如今已成为机构和公司赢得客户信任的必要条件。</p>
<p>在这个用于卡欺诈检测的机器学习新领域中，一个被广泛认可和反复出现的问题是关于该主题 [LJ20,PP19,PL18,ZAM+16] 发表的大多数研究工作<strong>缺乏可重复性</strong>。一方面，支付卡交易数据缺乏可用性，出于保密原因不能公开共享。另一方面，作者没有做出足够的努力来提供他们的代码并使他们的结果可重现。</p>
<p>本书所介绍的一些技术，例如处理<strong>类别不平衡、模型集成或概念漂移</strong>的技术，被广泛认为是信用卡欺诈检测系统设计的重要组成部分。我们还涵盖了我们认为值得更多关注的记录较少的主题。其中包括建模过程的特定设计方面，例如性能指标和验证策略的选择，以及有前景的预处理和学习策略，例如特征嵌入、主动学习和迁移学习。虽然本书侧重于支付卡欺诈，但我们相信本书中介绍的大多数技术和讨论对从事更广泛的欺诈检测主题的其他从业者有用。</p>
<br>
<h2 id="音乐分类超越监督学习走向现实世界的应用">音乐分类：超越监督学习，走向现实世界的应用</h2>
<p><a href="https://music-classification.github.io/tutorial/landing-page.html">https://music-classification.github.io/tutorial/landing-page.html</a></p>
<p>音乐分类是一项<strong>音乐信息检索</strong> (MIR) 任务，其目标是对音乐语义的计算理解。 对于给定的歌曲，分类器预测相关的音乐属性。 根据任务定义，分类任务几乎是无限的——从流派、情绪和乐器到更广泛的概念，包括音乐相似性和音乐偏好。 检索到的信息可以进一步用于许多应用，包括音乐推荐、策展、播放列表生成和语义搜索。</p>

<figure >
    
        <img src="img/musicclassification.png" width="100%" />
    
    
</figure>

<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用文本相似度可以识别变化的时间点</title>
      <link>https://textdata.cn/blog/text_sim/</link>
      <pubDate>Thu, 30 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/text_sim/</guid>
      <description>用漂亮国大统领报告(演讲)做政策连续性分析&amp;amp;可视化</description>
      <content:encoded><![CDATA[<p>使用文本相似度可以识别变化的时间点，先配置环境</p>
<h2 id="代码下载codezip"><a href="code.zip">代码下载</a></h2>
<br>
<h2 id="配置环境">配置环境</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">scikit</span><span class="o">-</span><span class="n">learn</span><span class="o">==</span><span class="mf">1.0</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">cntext</span><span class="o">==</span><span class="mf">1.2</span> 

<span class="c1"># 安装pyecharts可视化</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">==</span><span class="mf">1.6.2</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">javascripthon</span><span class="o">==</span><span class="mf">0.0.6</span>              
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">jupyter</span><span class="o">-</span><span class="n">installer</span><span class="o">==</span><span class="mf">0.0.3</span>              
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">snapshot</span><span class="o">==</span><span class="mf">0.2.0</span> 
</code></pre></div><br>
<h2 id="1-查看数据">1. 查看数据</h2>
<p>本次使用sotu数据集，收集了从1790年至2018年国情咨文文本，这是漂亮国大统领每年发表的演讲，用于描述国家过去的成就和未来面临的挑战。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;sotu.csv&#39;</span><span class="p">)</span>
<span class="c1">#text2是text向下顺移1位的结果</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;text2&#39;</span><span class="p">]</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="c1">#剔除空字符</span>
<span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">tail</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="800" />
    
    
</figure>

<p>两段文本的相似度可以通过cos计算</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.similarity</span> <span class="kn">import</span> <span class="n">similarity_score</span>

<span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;Mr. Speaker, Mr. Vice President, members of&#39;</span>
<span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;Thank you very much. Mr. Speaker, Mr. Vice&#39;</span>

<span class="n">similarity_score</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>{'Sim_Cosine': 0.4629100498862757,
 'Sim_Jaccard': 0.3,
 'Sim_MinEdit': 16,
 'Sim_Simple': 0.9619883040935673}
</code></pre>
<br>
<h2 id="2-相似度可视化">2. 相似度可视化</h2>
<p>如果把很多个相邻文本(有时间先后顺序)依次计算相似度，可以绘制出曲线，我们根据自己的领域知识，就可以看出变化的时间点。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.similarity</span> <span class="kn">import</span> <span class="n">similarity_score</span>
<span class="n">cosines</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="n">text1</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">]</span>
    <span class="n">text2</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="s1">&#39;text2&#39;</span><span class="p">]</span>
    <span class="n">simi</span> <span class="o">=</span> <span class="n">similarity_score</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">)[</span><span class="s1">&#39;Sim_Cosine&#39;</span><span class="p">]</span>
    <span class="n">cosines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">simi</span><span class="p">)</span>
<span class="n">cosines</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[0.42767330405703097,
 0.39821498388325544,
 0.410744931596176,
 0.3844380358041578,
 0.4116242706522565,
 0.4169268094228332,
 0.4249719376001671,
 ....
 0.39065212923423315,
 0.3763764307701755,
 0.35307484669994105,
 0.4119319787659037,
 0.43053043053064594,
 0.45219743197249296,
 0.421723837550935,
 0.427904362863808]
</code></pre></div><p>紧接着</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Line</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>

<span class="n">line</span> <span class="o">=</span> <span class="n">Line</span><span class="p">()</span>

<span class="n">line</span><span class="o">.</span><span class="n">add_xaxis</span><span class="p">(</span><span class="n">xaxis_data</span><span class="o">=</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">])</span>

<span class="n">line</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s2">&#34;本期与上期的相似度&#34;</span><span class="p">,</span> 
               <span class="n">cosines</span><span class="p">,</span> 
               <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">))</span>

<span class="n">line</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;1790年至2018年国情咨文文本相似度&#34;</span><span class="p">))</span>

<span class="n">line</span><span class="o">.</span><span class="n">load_javascript</span><span class="p">()</span>
<span class="n">line</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s1">&#39;1790年至2018年国情咨文文本相似度可视化.html&#39;</span><span class="p">)</span>
<span class="n">line</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e7%9b%b8%e4%bc%bc%e5%ba%a6%e8%b6%8b%e5%8a%bf.png" width="800" />
    
    
</figure>

<p>注意，横坐标显示的是当年报告 与 前一年报告 的对比相似度</p>
<br>
<h2 id="3-图形解读">3. 图形解读</h2>
<p>相似度越低，说明本期与前期相比，文本变化较大，在本场景中可能是漂亮国在大幅度调整政策。</p>
<ol>
<li>在图中，我们最熟悉的时期是一战和二战，这个阶段在图中较长时间处于低位，漂亮国zf的政策处于战时状态。</li>
<li>漂亮国立国初期，相似度连线也长时间处于低位，体现了新国家正在探索为政之道。</li>
<li>漂亮国每4年选ju一次，那么换届年份，相似度也会比较低。</li>
</ol>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>文本数据: 展开、过滤和分块</title>
      <link>https://textdata.cn/blog/text_features_tutorial/</link>
      <pubDate>Tue, 28 Dec 2021 10:43:10 +0600</pubDate>
      
      <guid>/blog/text_features_tutorial/</guid>
      <description>TF-IDF刻画参与者信息的“新且熟悉” ,构建参与者文化网络</description>
      <content:encoded><![CDATA[<p>前段时间发现apachecn在github上翻译了一本和特征工程相关的书籍：《Feature Engineering for Machine Learning》，中文名为《面向机器学习的特征工程》。</p>
<p><a href="Feature_Engineering_for_Machine_Learning.pdf">Feature_Engineering_for_Machine_Learning.pdf</a></p>
<h2 id="三文本数据-展开过滤和分块httpfe4mlapachecnorgdocs3文本数据id三文本数据-展开过滤和分块"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E4%B8%89%E3%80%81%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE-%E5%B1%95%E5%BC%80%E3%80%81%E8%BF%87%E6%BB%A4%E5%92%8C%E5%88%86%E5%9D%97">三、文本数据: 展开、过滤和分块</a></h2>
<blockquote>
<p>译者：<a href="https://github.com/kkejili">@kkejili</a></p>
<p>校对者：<a href="https://github.com/KyrieHee">@HeYun</a></p>
</blockquote>
<p>如果让你来设计一个算法来分析以下段落，你会怎么做？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Emma knocked on the door. No answer. She knocked again and waited. There was a large maple tree next to the house. Emma looked up the tree and saw a giant raven perched at the treetop. Under the afternoon sun, the raven gleamed magnificently. Its beak was hard and pointed, its claws sharp and strong. It looked regal and imposing. It reigned the tree it stood on. The raven was looking straight at Emma with its beady black eyes. Emma felt slightly intimidated. She took a step back from the door and tentatively said, “hello?” 复制ErrorOK!
</code></pre></div><p>该段包含很多信息。我们知道它谈到了到一个名叫Emma的人和一只乌鸦。这里有一座房子和一棵树，艾玛正想进屋，却看到了乌鸦。这只华丽的乌鸦注意到艾玛，她有点害怕，但正在尝试交流。</p>
<p>那么，这些信息的哪些部分是我们应该提取的显着特征？首先，提取主要角色艾玛和乌鸦的名字似乎是个好主意。接下来，注意房子，门和树的布置可能也很好。关于乌鸦的描述呢？Emma的行为呢，敲门，退后一步，打招呼呢？</p>
<p>本章介绍文本特征工程的基础知识。我们从词袋（bags of words）开始，这是基于字数统计的最简单的文本功能。一个非常相关的变换是 tf-idf，它本质上是一种特征缩放技术。它将被我在（下一篇）章节进行全面讨论。本章首先讨论文本特征提取，然后讨论如何过滤和清洗这些特征。</p>
<br>
<h2 id="bag-of-x把自然文本变成平面向量httpfe4mlapachecnorgdocs3文本数据idbag-of-x把自然文本变成平面向量"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=bag-of-x%EF%BC%9A%E6%8A%8A%E8%87%AA%E7%84%B6%E6%96%87%E6%9C%AC%E5%8F%98%E6%88%90%E5%B9%B3%E9%9D%A2%E5%90%91%E9%87%8F">Bag of X：把自然文本变成平面向量</a></h2>
<p>无论是构建机器学习模型还是特征工程，其结果应该是通俗易懂的。简单的事情很容易尝试，可解释的特征和模型相比于复杂的更易于调试。简单和可解释的功能并不总是会得到最精确的模型。但从简单开始就是一个好主意，仅在绝对必要时我们可以增加其复杂性。</p>
<p>对于文本数据，我们可以从称为 BOW 的字数统计开始。字数统计表中并没有特别费力来寻找<code>&quot;Emma&quot;</code>或乌鸦这样有趣的实体。但是这两个词在该段落中被重复提到，并且它们在这里的计数比诸如<code>&quot;hello&quot;</code>之类的随机词更高。对于此类简单的文档分类任务，字数统计通常比较适用。它也可用于信息检索，其目标是检索与输入文本相关的文档集。这两个任务都很好解释词级特征，因为某些特定词的存在可能是本文档主题内容的重要指标。</p>
<br>
<h2 id="词袋httpfe4mlapachecnorgdocs3文本数据id词袋"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E8%AF%8D%E8%A2%8B">词袋</a></h2>
<p>在词袋特征中，文本文档被转换成向量。（向量只是 n 个数字的集合。）向量包含词汇表中每个单词可能出现的数目。 如果单词<code>&quot;aardvark&quot;</code>在文档中出现三次，则该特征向量在与该单词对应的位置上的计数为 3。 如果词汇表中的单词没有出现在文档中，则计数为零。 例如，“这是一只小狗，它是非常可爱”的句子具有如图所示的 BOW 表示</p>

<figure >
    
        <img src="img/3-1.png" width="100%" />
    
    
</figure>

<p>图 3-1 转换词成向量描述图</p>
<p>BOW 将文本文档转换为平面向量。 它是“平面的”，因为它不包含任何原始的文本结构。 原文是一系列词语。但是词袋向量并没有序列；它只是记得每个单词在文本中出现多少次。 它不代表任何词层次结构的概念。 例如，“动物”的概念包括“狗”，“猫”，“乌鸦”等。但是在一个词袋表示中，这些词都是矢量的相同元素。</p>

<figure >
    
        <img src="img/3-2.png" width="100%" />
    
    
</figure>

<p>图 3-2 两个等效的词向量，向量中单词的排序不重要，只要它在数据集中的个数和文档中出现数量是一致的。</p>
<p>重要的是特征空间中数据的几何形状。 在一个词袋矢量中，每个单词成为矢量的一个维度。如果词汇表中有 n 个单词，则文档将成为n维空间中的一个点。 很难想象二维或三维以外的任何物体的几何形状，所以我们必须使用我们的想象力。 图3-3显示了我们的例句在对应于“小狗”和“可爱”两个维度的特征空间中的样子。</p>

<figure >
    
        <img src="img/3-3.png" width="100%" />
    
    
</figure>

<p>图 3-3 特征空间中文本文档的图示</p>

<figure >
    
        <img src="img/3-4.png" width="100%" />
    
    
</figure>

<p>图 3-4 三维特征空间</p>
<p>图 3-3 和图 3-4 描绘了特征空间中的数据向量。 坐标轴表示单个单词，它们是词袋表示下的特征，空间中的点表示数据点（文本文档）。 有时在数据空间中查看特征向量也是有益的。 特征向量包含每个数据点中特征的值。 轴表示单个数据点和点表示特征向量。 图 3-5 展示了一个例子。 通过对文本文档进行词袋特征化，一个特征是一个词，一个特征向量包含每个文档中这个词的计数。 这样，一个单词被表示为一个“一个词向量”。正如我们将在第 4 章中看到的那样，这些文档词向量来自词袋向量的转置矩阵。</p>

<figure >
    
        <img src="img/3-5.png" width="100%" />
    
    
</figure>

<br>
<h2 id="bag-of-n-gramhttpfe4mlapachecnorgdocs3文本数据idbag-of-n-gram"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=bag-of-n-gram">Bag-of-N-gram</a></h2>
<p>Bag-of-N-gram 或者 bag-of-ngram 是 BOW 的自然延伸。 n-gram 是 n 个有序的记号（token）。一个词基本上是一个 1-gram，也被称为一元模型。当它被标记后，计数机制可以将单个词进行计数，或将重叠序列计数为 n-gram。例如，<code>&quot;Emma knocked on the door&quot;</code>这句话会产生 n-gram，如<code>&quot;Emma knocked&quot;</code>，<code>&quot;knocked on&quot;</code>，<code>&quot;on the&quot;</code>，<code>&quot;the door&quot;</code>。 N-gram 保留了文本的更多原始序列结构，故 bag-of-ngram可以提供更多信息。但是，这是有代价的。理论上，用 k 个独特的词，可能有 k 个独立的 2-gram（也称为 bigram）。在实践中，并不是那么多，因为不是每个单词后都可以跟一个单词。尽管如此，通常有更多不同的 n-gram（n &gt; 1）比单词更多。这意味着词袋会更大并且有稀疏的特征空间。这也意味着 n-gram 计算，存储和建模的成本会变高。n 越大，信息越丰富，成本越高。</p>
<p>为了说明随着 n 增加 n-gram 的数量如何增加，我们来计算纽约时报文章数据集上的 n-gram。我们使用 Pandas 和 scikit-learn 中的<code>CountVectorizer</code>转换器来计算前 10,000 条评论的 n-gram。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pandas</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">CountVectorizer</span> 
<span class="c1"># Load the first 10,000 reviews </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/yelp/v6/yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_review.json&#39;</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">js</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span> 
<span class="o">...</span> <span class="n">js</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()))</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">review_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">js</span><span class="p">)</span> 
<span class="c1"># Create feature transformers for unigram, bigram, and trigram. </span>
<span class="c1"># The default ignores single-character words, which is useful in practice because it trims </span>
<span class="c1"># uninformative words. But we explicitly include them in this example for illustration purposes. </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bow_converter</span> <span class="o">=</span> <span class="n">CountVectorizer</span><span class="p">(</span><span class="n">token_pattern</span><span class="o">=</span><span class="s1">&#39;(?u)</span><span class="se">\\</span><span class="s1">b</span><span class="se">\\</span><span class="s1">w+</span><span class="se">\\</span><span class="s1">b&#39;</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">bigram_converter</span> <span class="o">=</span> <span class="n">CountVectorizer</span><span class="p">(</span><span class="n">ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">token_pattern</span><span class="o">=</span><span class="s1">&#39;(?u)</span><span class="se">\\</span><span class="s1">b</span><span class="se">\\</span><span class="s1">w+</span><span class="se">\\</span><span class="s1">b&#39;</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">trigram_converter</span> <span class="o">=</span> <span class="n">CountVectorizer</span><span class="p">(</span><span class="n">ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">token_pattern</span><span class="o">=</span><span class="s1">&#39;(?u)</span><span class="se">\\</span><span class="s1">b</span><span class="se">\\</span><span class="s1">w+</span><span class="se">\\</span><span class="s1">b&#39;</span><span class="p">)</span> 
<span class="c1"># Fit the transformers and look at vocabulary size </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bow_converter</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">words</span> <span class="o">=</span> <span class="n">bow_converter</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">bigram_converter</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">bigram</span> <span class="o">=</span> <span class="n">bigram_converter</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">trigram_converter</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">trigram</span> <span class="o">=</span> <span class="n">trigram_converter</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">bigram</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">trigram</span><span class="p">))</span> 
<span class="mi">26047</span> <span class="mi">346301</span> <span class="mi">847545</span> 
<span class="c1"># Sneak a peek at the ngram themselves</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">words</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span> 
<span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;00&#39;</span><span class="p">,</span> <span class="s1">&#39;000&#39;</span><span class="p">,</span> <span class="s1">&#39;0002&#39;</span><span class="p">,</span> <span class="s1">&#39;00am&#39;</span><span class="p">,</span> <span class="s1">&#39;00ish&#39;</span><span class="p">,</span> <span class="s1">&#39;00pm&#39;</span><span class="p">,</span> <span class="s1">&#39;01&#39;</span><span class="p">,</span> <span class="s1">&#39;01am&#39;</span><span class="p">,</span> <span class="s1">&#39;02&#39;</span><span class="p">]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">bigram</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">:]</span> 
<span class="p">[</span><span class="s1">&#39;zucchinis at&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zucchinis took&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zucchinis we&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zuma over&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zuppa di&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zuppa toscana&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zuppe di&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zurich and&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zz top&#39;</span><span class="p">,</span> 
<span class="s1">&#39;à la&#39;</span><span class="p">]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">trigram</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span> 
<span class="p">[</span><span class="s1">&#39;0 10 definitely&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 2 also&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 25 per&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 3 miles&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 30 a&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 30 everything&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 30 lb&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 35 tip&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 5 curry&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 5 pork&#39;</span><span class="p">]</span> <span class="n">复制ErrorOK</span><span class="err">!</span>
</code></pre></div>
<figure >
    
        <img src="img/3-6.png" width="100%" />
    
    
</figure>

<p>图3-6 Number of unique n-gram in the first 10,000 reviews of the Yelp dataset</p>
<br>
<h3 id="过滤清洗特征httpfe4mlapachecnorgdocs3文本数据id过滤清洗特征"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E8%BF%87%E6%BB%A4%E6%B8%85%E6%B4%97%E7%89%B9%E5%BE%81">过滤清洗特征</a></h3>
<p>我们如何清晰地将信号从噪声中分离出来？ 通过过滤，使用原始标记化和计数来生成简单词表或 n-gram 列表的技术变得更加可用。 短语检测，我们将在下面讨论，可以看作是一个特别的 bigram 过滤器。 以下是执行过滤的几种方法。</p>
<br>
<h3 id="停用词httpfe4mlapachecnorgdocs3文本数据id停用词"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%81%9C%E7%94%A8%E8%AF%8D">停用词</a></h3>
<p>分类和检索通常不需要对文本有深入的理解。 例如，在<code>&quot;Emma knocked on the door&quot;</code>一句中，<code>&quot;on&quot;</code>和<code>&quot;the&quot;</code>这两个词没有包含很多信息。 代词、冠词和介词大部分时间并没有显示出其价值。流行的 Python NLP 软件包 NLTK 包含许多语言的语言学家定义的停用词列表。 （您将需要安装 NLTK 并运行<code>nltk.download()</code>来获取所有的好东西。）各种停用词列表也可以在网上找到。 例如，这里有一些来自英语停用词的示例词</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Sample words from the nltk stopword list
a, about, above, am, an, been, didn’t, couldn’t, i’d, i’ll, itself, let’s, myself, our, they, through, when’s, whom, ... 复制ErrorOK!
</code></pre></div><p>请注意，该列表包含撇号，并且这些单词没有大写。 为了按原样使用它，标记化过程不得去掉撇号，并且这些词需要转换为小写。</p>
<br>
<h3 id="基于频率的过滤httpfe4mlapachecnorgdocs3文本数据id基于频率的过滤"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%9F%BA%E4%BA%8E%E9%A2%91%E7%8E%87%E7%9A%84%E8%BF%87%E6%BB%A4">基于频率的过滤</a></h3>
<p>停用词表是一种去除空洞特征常用词的方法。还有其他更统计的方法来理解“常用词”的概念。在搭配提取中，我们看到依赖于手动定义的方法，以及使用统计的方法。同样的想法也适用于文字过滤。我们也可以使用频率统计。</p>
<br>
<h3 id="高频词httpfe4mlapachecnorgdocs3文本数据id高频词"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E9%AB%98%E9%A2%91%E8%AF%8D">高频词</a></h3>
<p>频率统计对滤除语料库专用常用词以及通用停用词很有用。例如，纽约时报文章数据集中经常出现“纽约时报”和其中单个单词。“议院”这个词经常出现在加拿大议会辩论的Hansard语料库中的“众议院”一词中，这是一种用于统计机器翻译的流行数据集，因为它包含所有文档的英文和法文版本。这些词在普通语言中有意义，但不在语料库中。手动定义的停用词列表将捕获一般停用词，但不是语料库特定的停用词。</p>
<p>表 3-1 列出了 Yelp 评论数据集中最常用的 40 个单词。在这里，频率被认为是它们出现在文件（评论）中的数量，而不是它们在文件中的数量。正如我们所看到的，该列表涵盖了许多停用词。它也包含一些惊喜。<code>&quot;s&quot;</code>和<code>&quot;t&quot;</code>在列表中，因为我们使用撇号作为标记化分隔符，并且诸如<code>&quot;Mary's&quot;</code>或<code>&quot;did not&quot;</code>之类的词被解析为<code>&quot;Mary s&quot;</code>和<code>&quot;didn t&quot;</code>。词<code>&quot;good&quot;</code>，<code>&quot;food&quot;</code>和<code>&quot;great&quot;</code>分别出现在三分之一的评论中。但我们可能希望保留它们，因为它们对于情感分析或业务分类非常有用。</p>

<figure >
    
        <img src="img/biao.png" width="100%" />
    
    
</figure>

<p>最常用的单词最可以揭示问题，并突出显示通常有用的单词通常在该语料库中曾出现过多次。 例如，纽约时报语料库中最常见的词是“时代”。实际上，它有助于将基于频率的过滤与停用词列表结合起来。还有一个棘手的问题，即何处放置截止点。 不幸的是这里没有统一的答案。在大多数情况下截断还需手动确定，并且在数据集改变时可能需要重新检查。</p>
<br>
<h3 id="稀有词httpfe4mlapachecnorgdocs3文本数据id稀有词"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E7%A8%80%E6%9C%89%E8%AF%8D">稀有词</a></h3>
<p>根据任务的不同，可能还需要筛选出稀有词。对于统计模型而言，仅出现在一个或两个文档中的单词更像噪声而非有用信息。例如，假设任务是根据他们的 Yelp 评论对企业进行分类，并且单个评论包含<code>&quot;gobbledygook&quot;</code>这个词。基于这一个词，我们将如何说明这家企业是餐厅，美容院还是一间酒吧？即使我们知道在这种情况下的这种生意发生在酒吧，它也会对于其他包含<code>&quot;gobbledygook&quot;</code>这个词的评论来说，这可能是一个错误。</p>
<p>不仅稀有词不可靠，而且还会产生计算开销。这套 160 万个 Yelp 评论包含 357,481 个独特单词（用空格和标点符号表示），其中 189,915 只出现在一次评论中，41,162 次出现在两次评论中。超过 60% 的词汇很少发生。这是一种所谓的重尾分布，在现实世界的数据中非常普遍。许多统计机器学习模型的训练时间随着特征数量线性地变化，并且一些模型是二次的或更差的。稀有词汇会产生大量的计算和存储成本，而不会带来额外的收益。</p>
<p>根据字数统计，可以很容易地识别和修剪稀有词。或者，他们的计数可以汇总到一个特殊的垃圾箱中，可以作为附加功能。图3-7展示了一个短文档中的表示形式，该短文档包含一些常用单词和两个稀有词<code>&quot;gobbledygook&quot;</code>和<code>&quot;zylophant&quot;</code>。通常单词保留自己的计数，可以通过停用词列表或其他频率进一步过滤方法。这些难得的单词会失去他们的身份并被分组到垃圾桶功能中.</p>

<figure >
    
        <img src="img/3-7.png" width="100%" />
    
    
</figure>

<p>由于在计算整个语料库之前不会知道哪些词很少，因此需要收集垃圾桶功能作为后处理步骤。</p>
<p>由于本书是关于特征工程的，因此我们将重点放在特征上。但稀有概念也适用于数据点。如果文本文档很短，那么它可能不包含有用的信息，并且在训练模型时不应使用该信息。</p>
<p>应用此规则时必须谨慎。维基百科转储包含许多不完整的存根，可能安全过滤。另一方面，推文本身就很短，并且需要其他特征和建模技巧。</p>
<br>
<h3 id="词干解析stemminghttpfe4mlapachecnorgdocs3文本数据id词干解析stemming"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E8%AF%8D%E5%B9%B2%E8%A7%A3%E6%9E%90%EF%BC%88stemming%EF%BC%89">词干解析（Stemming）</a></h3>
<p>简单解析的一个问题是同一个单词的不同变体会被计算为单独的单词。例如，<code>&quot;flower&quot;</code>和<code>&quot;flowers&quot;</code>在技术上是不同的记号，<code>&quot;swimmer&quot;</code>，<code>&quot;swimming&quot;</code>和<code>&quot;swim&quot;</code>也是如此，尽管它们的含义非常接近。如果所有这些不同的变体都映射到同一个单词，那将会很好。</p>
<p>词干解析是一项 NLP 任务，试图将单词切分为基本的语言词干形式。有不同的方法。有些基于语言规则，其他基于观察统计。被称为词形化的算法的一个子类将词性标注和语言规则结合起来。</p>
<p>Porter stemmer 是英语中使用最广泛的免费词干工具。原来的程序是用 ANSI C 编写的，但是很多其他程序包已经封装它来提供对其他语言的访问。尽管其他语言的努力正在进行，但大多数词干工具专注于英语。</p>
<p>以下是通过 NLTK Python 包运行 Porter stemmer 的示例。正如我们所看到的，它处理了大量的情况，包括将<code>&quot;sixties&quot;</code>和<code>&quot;sixty&quot;</code>转变为同一根<code>&quot;sixti&quot;</code>。但这并不完美。单词<code>&quot;goes&quot;</code>映射到<code>&quot;goe&quot;</code>，而<code>&quot;go&quot;</code>映射到它自己。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">nltk</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span> <span class="o">=</span> <span class="n">nltk</span><span class="o">.</span><span class="n">stem</span><span class="o">.</span><span class="n">porter</span><span class="o">.</span><span class="n">PorterStemmer</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;flowers&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;lemon&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;zeroes&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;zero&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;stemmer&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;stem&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;sixties&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;sixti&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;sixty&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;sixty&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;goes&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;goe&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;go&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;go&#39;</span> <span class="n">复制ErrorOK</span><span class="err">!</span>
</code></pre></div><p>词干解析的确有一个计算成本。 最终收益是否大于成本取决于应用程序。</p>
<br>
<h3 id="含义的原子从单词到-n-gram-到短语httpfe4mlapachecnorgdocs3文本数据id含义的原子从单词到-n-gram-到短语"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%90%AB%E4%B9%89%E7%9A%84%E5%8E%9F%E5%AD%90%EF%BC%9A%E4%BB%8E%E5%8D%95%E8%AF%8D%E5%88%B0-n-gram-%E5%88%B0%E7%9F%AD%E8%AF%AD">含义的原子：从单词到 N-gram 到短语</a></h3>
<p>词袋的概念很简单。但是，一台电脑怎么知道一个词是什么？文本文档以数字形式表示为一个字符串，基本上是一系列字符。也可能会遇到 JSON blob 或 HTML 页面形式的半结构化文本。但即使添加了标签和结构，基本单位仍然是一个字符串。如何将字符串转换为一系列的单词？这涉及解析和标记化的任务，我们将在下面讨论。</p>
<br>
<h3 id="解析和分词httpfe4mlapachecnorgdocs3文本数据id解析和分词"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E8%A7%A3%E6%9E%90%E5%92%8C%E5%88%86%E8%AF%8D">解析和分词</a></h3>
<p>当字符串包含的不仅仅是纯文本时，解析是必要的。例如，如果原始数据是网页，电子邮件或某种类型的日志，则它包含额外的结构。人们需要决定如何处理日志中的标记，页眉，页脚或无趣的部分。如果文档是网页，则解析器需要处理 URL。如果是电子邮件，则可能需要特殊字段，例如 From，To 和 Subject 需要被特别处理，否则，这些标题将作为最终计数中的普通单词统计，这可能没有用处。</p>
<p>解析后，文档的纯文本部分可以通过标记。这将字符串（一系列字符）转换为一系列记号。然后可以将每个记号计为一个单词。分词器需要知道哪些字符表示一个记号已经结束，另一个正在开始。空格字符通常是好的分隔符，正如标点符号一样。如果文本包含推文，则不应将井号（<code>#</code>）用作分隔符（也称为分隔符）。</p>
<p>有时，分析需要使用句子而不是整个文档。例如，n-gram 是一个句子的概括，不应超出句子范围。更复杂的文本特征化方法，如 word2vec 也适用于句子或段落。在这些情况下，需要首先将文档解析为句子，然后将每个句子进一步标记为单词。</p>
<br>
<h3 id="字符串对象httpfe4mlapachecnorgdocs3文本数据id字符串对象"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1">字符串对象</a></h3>
<p>字符串对象有各种编码，如 ASCII 或 Unicode。纯英文文本可以用 ASCII 编码。 一般语言需要 Unicode。 如果文档包含非 ASCII 字符，则确保分词器可以处理该特定编码。否则，结果将不正确。</p>
<br>
<h3 id="短语检测的搭配提取httpfe4mlapachecnorgdocs3文本数据id短语检测的搭配提取"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E7%9F%AD%E8%AF%AD%E6%A3%80%E6%B5%8B%E7%9A%84%E6%90%AD%E9%85%8D%E6%8F%90%E5%8F%96">短语检测的搭配提取</a></h3>
<p>连续的记号能立即被转化成词表和 n-gram。但从语义上讲，我们更习惯于理解短语，而不是 n-gram。在计算自然语言处理中，有用短语的概念被称为搭配。用 Manning 和 Schütze（1999：141）的话来说：“搭配是一个由两个或两个以上单词组成的表达，它们对应于某种常规的说话方式。”</p>
<p>搭配比其部分的总和更有意义。例如，<code>&quot;strong tea&quot;</code>具有超越<code>&quot;great physical strength&quot;</code>和<code>&quot;tea&quot;</code>的不同含义，因此被认为是搭配。另一方面，“可爱的小狗”这个短语恰恰意味着它的部分总和：“可爱”和“小狗”。因此，它不被视为搭配。</p>
<p>搭配不一定是连续的序列。<code>&quot;Emma knocked on the door&quot;</code>一词被认为包含搭配<code>&quot;knock door&quot;</code>，因此不是每一个搭配都是一个 n-gram。相反，并不是每个 n-gram 都被认为是一个有意义的搭配。</p>
<p>由于搭配不仅仅是其部分的总和，它们的含义也不能通过单个单词计数来充分表达。作为一种表现形式，词袋不足。袋子的 ngram 也是有问题的，因为它们捕获了太多无意义的序列（考虑<code>&quot;this is in the bag-of-ngram example&quot;</code>），而没有足够的有意义的序列。</p>
<p>搭配作为功能很有用。但是，如何从文本中发现并提取它们呢？一种方法是预先定义它们。如果我们努力尝试，我们可能会找到各种语言的全面成语列表，我们可以通过文本查看任何匹配。这将是非常昂贵的，但它会工作。如果语料库是非常特定领域的并且包含深奥的术语，那么这可能是首选的方法。但是这个列表需要大量的手动管理，并且需要不断更新语料库。例如，分析推文，博客和文章可能不太现实。</p>
<p>自从统计 NLP 过去二十年出现以来，人们越来越多地选择用于查找短语的统计方法。统计搭配提取方法不是建立固定的短语和惯用语言列表，而是依赖不断发展的数据来揭示当今流行的语言。</p>
<br>
<h3 id="基于频率的方法httpfe4mlapachecnorgdocs3文本数据id基于频率的方法"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%9F%BA%E4%BA%8E%E9%A2%91%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95">基于频率的方法</a></h3>
<p>一个简单的黑魔法是频繁发生的 n-gram。这种方法的问题是最常发生的，这种可能不是最有用的。 表 3-2 显示了整个 Yelp 评论数据集中最流行的 bigram（<code>n=2</code>）。 正如我们所知的，按文件计数排列的最常见的十大常见术语是非常通用的术语，并不包含太多含义。</p>

<figure >
    
        <img src="img/biaod.png" width="100%" />
    
    
</figure>

<br>
<h3 id="用于搭配提取的假设检验httpfe4mlapachecnorgdocs3文本数据id用于搭配提取的假设检验"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E7%94%A8%E4%BA%8E%E6%90%AD%E9%85%8D%E6%8F%90%E5%8F%96%E7%9A%84%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C">用于搭配提取的假设检验</a></h3>
<p>原始流行度计数（Raw popularity count）是一个比较粗糙的方法。我们必须找到更聪慧的统计数据才能够轻松挑选出有意义的短语。关键的想法是看两个单词是否经常出现在一起。回答这个问题的统计机制被称为假设检验。</p>
<p>假设检验是将噪音数据归结为“是”或“否”的答案。它涉及将数据建模为从随机分布中抽取的样本。随机性意味着人们永远无法 100% 的确定答案；总会有异常的机会。所以答案附在概率上。例如，假设检验的结果可能是“这两个数据集来自同一分布，其概率为 95%”。对于假设检验的温和介绍，请参阅可汗学院关于假设检验和 p 值的教程。</p>
<p>在搭配提取的背景下，多年来已经提出了许多假设检验。最成功的方法之一是基于似然比检验（Dunning，1993）。对于给定的一对单词，该方法测试两个假设观察的数据集。假设 1（原假设）表示，词语 1 独立于词语 2 出现。另一种说法是说，看到词语1对我们是否看到词语2没有影响。假设 2（备选假设）说，看到词 1 改变了看到单词 2 的可能性。我们采用备选假设来暗示这两个单词形成一个共同的短语。因此，短语检测（也称为搭配提取）的似然比检验提出了以下问题：给定文本语料库中观察到的单词出现更可能是从两个单词彼此独立出现的模型中生成的，或者模型中两个词的概率纠缠？</p>
<p>这是有用的。让我们算一点。（数学非常精确和简洁地表达事物，但它确实需要与自然语言完全不同的分析器。）</p>

<figure >
    
        <img src="img/gongshi.png" width="100%" />
    
    
</figure>

<p>似然函数<code>L(Data; H)</code>表示在单词对的独立模型或非独立模型下观察数据集中词频的概率。为了计算这个概率，我们必须对如何生成数据做出另一个假设。最简单的数据生成模型是二项模型，其中对于数据集中的每个单词，我们抛出一个硬币，并且如果硬币朝上出现，我们插入我们的特殊单词，否则插入其他单词。在此策略下，特殊词的出现次数遵循二项分布。二项分布完全由词的总数，词的出现次数和词首概率决定。</p>
<p>似然比检验分析常用短语的算法收益如下。</p>
<ol>
<li>
<p>计算所有单体词的出现概率：<code>p(w)</code>。</p>
</li>
<li>
<p>计算所有唯一双元的条件成对词发生概率：<code>p(W2 × W1)</code></p>
</li>
<li>
<p>计算所有唯一的双对数似然比对数。</p>
</li>
<li>
<p>根据它们的似然比排序双字节。</p>
</li>
<li>
<p>以最小似然比值作为特征。</p>
<br>
</li>
</ol>
<h3 id="掌握似然比测试httpfe4mlapachecnorgdocs3文本数据id掌握似然比测试"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E6%8E%8C%E6%8F%A1%E4%BC%BC%E7%84%B6%E6%AF%94%E6%B5%8B%E8%AF%95">掌握似然比测试</a></h3>
<p>关键在于测试比较的不是概率参数本身，而是在这些参数（以及假设的数据生成模型）下观察数据的概率。可能性是统计学习的关键原则之一。但是在你看到它的前几次，这绝对是一个令人困惑的问题。一旦你确定了逻辑，它就变得直观了。</p>
<p>还有另一种基于点互信息的统计方法。但它对真实世界文本语料库中常见的罕见词很敏感。因此它不常用，我们不会在这里展示它。</p>
<p>请注意，搭配抽取的所有统计方法，无论是使用原始频率，假设测试还是点对点互信息，都是通过过滤候选词组列表来进行操作的。生成这种清单的最简单和最便宜的方法是计算 n-gram。它可能产生不连续的序列，但是它们计算成本颇高。在实践中，即使是连续 n-gram，人们也很少超过 bi-gram 或 tri-gram，因为即使在过滤之后，它们的数量也很多。为了生成更长的短语，还有其他方法，如分块或与词性标注相结合。</p>
<br>
<h3 id="分块chunking和词性标注part-of-speech-tagginghttpfe4mlapachecnorgdocs3文本数据id分块chunking和词性标注part-of-speech-tagging"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%88%86%E5%9D%97%EF%BC%88chunking%EF%BC%89%E5%92%8C%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8%EF%BC%88part-of-speech-tagging%EF%BC%89">分块（Chunking）和词性标注（part-of-Speech Tagging）</a></h3>
<p>分块比 n-gram 要复杂一点，因为它基于词性，基于规则的模型形成了记号序列。</p>
<p>例如，我们可能最感兴趣的是在问题中找到所有名词短语，其中文本的实体，主题最为有趣。 为了找到这个，我们使用词性标记每个作品，然后检查该标记的邻域以查找词性分组或“块”。 定义单词到词类的模型通常是语言特定的。 几种开源 Python 库（如 NLTK，Spacy 和 TextBlob）具有多种语言模型。</p>
<p>为了说明 Python 中的几个库如何使用词性标注非常简单地进行分块，我们再次使用 Yelp 评论数据集。 我们将使用 spacy 和 TextBlob 来评估词类以找到名词短语。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span> 
<span class="c1"># Load the first 10 reviews </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/yelp/v6/yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_review.json&#39;</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">js</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span> 
<span class="n">js</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()))</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">review_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">js</span><span class="p">)</span> 
<span class="c1">## First we&#39;ll walk through spaCy&#39;s functions </span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">spacy</span> 
<span class="c1"># preload the language model </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">)</span> 
<span class="c1"># We can create a Pandas Series of spaCy nlp variables </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">doc_df</span> <span class="o">=</span> <span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">nlp</span><span class="p">)</span> 
<span class="c1"># spaCy gives you fine grained parts of speech using: (.pos_) </span>
<span class="c1"># and coarse grained parts of speech using: (.tag_) </span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">doc_df</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> 
<span class="nb">print</span><span class="p">([</span><span class="n">doc</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">doc</span><span class="o">.</span><span class="n">pos_</span><span class="p">,</span> <span class="n">doc</span><span class="o">.</span><span class="n">tag_</span><span class="p">])</span> 
<span class="n">Got</span> <span class="n">VERB</span> <span class="n">VBP</span> 
<span class="n">a</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">letter</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="ow">in</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">the</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">mail</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="n">last</span> <span class="n">ADJ</span> <span class="n">JJ</span> 
<span class="n">week</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="n">that</span> <span class="n">ADJ</span> <span class="n">WDT</span> 
<span class="n">said</span> <span class="n">VERB</span> <span class="n">VBD</span> 
<span class="n">Dr</span><span class="o">.</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="n">Goldberg</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="ow">is</span> <span class="n">VERB</span> <span class="n">VBZ</span> 
<span class="n">moving</span> <span class="n">VERB</span> <span class="n">VBG</span> 
<span class="n">to</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">Arizona</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="n">to</span> <span class="n">PART</span> <span class="n">TO</span> 
<span class="n">take</span> <span class="n">VERB</span> <span class="n">VB</span> 
<span class="n">a</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">new</span> <span class="n">ADJ</span> <span class="n">JJ</span> 
<span class="n">position</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="n">there</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="ow">in</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">June</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="o">.</span> <span class="n">PUNCT</span> <span class="o">.</span> 
<span class="n">SPACE</span> <span class="n">SP</span> 
<span class="n">He</span> <span class="n">PRON</span> <span class="n">PRP</span> 
<span class="n">will</span> <span class="n">VERB</span> <span class="n">MD</span> 
<span class="n">be</span> <span class="n">VERB</span> <span class="n">VB</span> 
<span class="n">missed</span> <span class="n">VERB</span> <span class="n">VBN</span> 
<span class="n">very</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="n">much</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="o">.</span> <span class="n">PUNCT</span> <span class="o">.</span> 
<span class="n">SPACE</span> <span class="n">SP</span> 
<span class="n">I</span> <span class="n">PRON</span> <span class="n">PRP</span> 
<span class="n">think</span> <span class="n">VERB</span> <span class="n">VBP</span> 
<span class="n">finding</span> <span class="n">VERB</span> <span class="n">VBG</span> 
<span class="n">a</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">new</span> <span class="n">ADJ</span> <span class="n">JJ</span> 
<span class="n">doctor</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="ow">in</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">NYC</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="n">that</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">you</span> <span class="n">PRON</span> <span class="n">PRP</span> 
<span class="n">actually</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="n">like</span> <span class="n">INTJ</span> <span class="n">UH</span> 
<span class="n">might</span> <span class="n">VERB</span> <span class="n">MD</span> 
<span class="n">almost</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="n">be</span> <span class="n">VERB</span> <span class="n">VB</span> 
<span class="k">as</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="n">awful</span> <span class="n">ADJ</span> <span class="n">JJ</span> 
<span class="k">as</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">trying</span> <span class="n">VERB</span> <span class="n">VBG</span> 
<span class="n">to</span> <span class="n">PART</span> <span class="n">TO</span> 
<span class="n">find</span> <span class="n">VERB</span> <span class="n">VB</span> 
<span class="n">a</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">date</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="err">!</span> <span class="n">PUNCT</span> <span class="o">.</span> 
<span class="c1"># spaCy also does some basic noun chunking for us </span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">([</span><span class="n">chunk</span> <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">doc_df</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">noun_chunks</span><span class="p">])</span> 
<span class="p">[</span><span class="n">a</span> <span class="n">letter</span><span class="p">,</span> <span class="n">the</span> <span class="n">mail</span><span class="p">,</span> <span class="n">Dr</span><span class="o">.</span> <span class="n">Goldberg</span><span class="p">,</span> <span class="n">Arizona</span><span class="p">,</span> <span class="n">a</span> <span class="n">new</span> <span class="n">position</span><span class="p">,</span> <span class="n">June</span><span class="p">,</span> <span class="n">He</span><span class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="n">a</span> <span class="n">new</span> <span class="n">doctor</span><span class="p">,</span> <span class="n">NYC</span><span class="p">,</span> <span class="n">you</span><span class="p">,</span> <span class="n">a</span> <span class="n">date</span><span class="p">]</span> 
<span class="c1">##### </span>
<span class="c1">## We can do the same feature transformations using Textblob </span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">textblob</span> <span class="kn">import</span> <span class="n">TextBlob</span> 
<span class="c1"># The default tagger in TextBlob uses the PatternTagger, which is fine for our example. </span>
<span class="c1"># You can also specify the NLTK tagger, which works better for incomplete sentences. </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">blob_df</span> <span class="o">=</span> <span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">TextBlob</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">blob_df</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">tags</span> 
<span class="p">[(</span><span class="s1">&#39;Got&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;letter&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;mail&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;last&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;week&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;that&#39;</span><span class="p">,</span> <span class="s1">&#39;WDT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;said&#39;</span><span class="p">,</span> <span class="s1">&#39;VBD&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;Dr.&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;Goldberg&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;VBZ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;moving&#39;</span><span class="p">,</span> <span class="s1">&#39;VBG&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;to&#39;</span><span class="p">,</span> <span class="s1">&#39;TO&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;Arizona&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;to&#39;</span><span class="p">,</span> <span class="s1">&#39;TO&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;take&#39;</span><span class="p">,</span> <span class="s1">&#39;VB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;new&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;position&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;there&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;June&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;He&#39;</span><span class="p">,</span> <span class="s1">&#39;PRP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;will&#39;</span><span class="p">,</span> <span class="s1">&#39;MD&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;be&#39;</span><span class="p">,</span> <span class="s1">&#39;VB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;missed&#39;</span><span class="p">,</span> <span class="s1">&#39;VBN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;very&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;much&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="p">,</span> <span class="s1">&#39;PRP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;think&#39;</span><span class="p">,</span> <span class="s1">&#39;VBP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;finding&#39;</span><span class="p">,</span> <span class="s1">&#39;VBG&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;new&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;doctor&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;NYC&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;that&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;you&#39;</span><span class="p">,</span> <span class="s1">&#39;PRP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;actually&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;like&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;might&#39;</span><span class="p">,</span> <span class="s1">&#39;MD&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;almost&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;be&#39;</span><span class="p">,</span> <span class="s1">&#39;VB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;as&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;awful&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;as&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;trying&#39;</span><span class="p">,</span> <span class="s1">&#39;VBG&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;to&#39;</span><span class="p">,</span> <span class="s1">&#39;TO&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;find&#39;</span><span class="p">,</span> <span class="s1">&#39;VB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">)]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">([</span><span class="n">np</span> <span class="k">for</span> <span class="n">np</span> <span class="ow">in</span> <span class="n">blob_df</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">noun_phrases</span><span class="p">])</span> 
<span class="p">[</span><span class="s1">&#39;got&#39;</span><span class="p">,</span> <span class="s1">&#39;goldberg&#39;</span><span class="p">,</span> <span class="s1">&#39;arizona&#39;</span><span class="p">,</span> <span class="s1">&#39;new position&#39;</span><span class="p">,</span> <span class="s1">&#39;june&#39;</span><span class="p">,</span> <span class="s1">&#39;new doctor&#39;</span><span class="p">,</span> <span class="s1">&#39;nyc&#39;</span> <span class="n">复制ErrorOK</span><span class="err">!</span>
</code></pre></div><p>你可以看到每个库找到的名词短语有些不同。spacy 包含英语中的常见单词，如<code>&quot;a&quot;</code>和<code>&quot;the&quot;</code>，而 TextBlob 则删除这些单词。这反映了规则引擎的差异，它驱使每个库都认为是“名词短语”。 你也可以写你的词性关系来定义你正在寻找的块。使用 Python 进行自然语言处理可以深入了解从头开始用 Python 进行分块。</p>
<br>
<h2 id="总结httpfe4mlapachecnorgdocs3文本数据id总结"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E6%80%BB%E7%BB%93">总结</a></h2>
<p>词袋模型易于理解和计算，对分类和搜索任务很有用。但有时单个单词太简单，不足以将文本中的某些信息封装起来。为了解决这个问题，人们寄希望于比较长的序列。Bag-of-ngram 是 BOW 的自然概括，这个概念仍然容于理解，而且它的计算开销这就像 BOW 一样容易。</p>
<p>Bag of-ngram 生成更多不同的 ngram。它增加了特征存储成本，以及模型训练和预测阶段的计算成本。虽然数据点的数量保持不变，但特征空间的维度现在更大。因此数据密度更为稀疏。n 越高，存储和计算成本越高，数据越稀疏。由于这些原因，较长的 n-gram 并不总是会使模型精度的得到提高（或任何其他性能指标）。人们通常在<code>n = 2</code>或 3 时停止。较少的 n-gram 很少被使用。</p>
<p>防止稀疏性和成本增加的一种方法是过滤 n-gram 并保留最有意义的短语。这是搭配抽取的目标。理论上，搭配（或短语）可以在文本中形成非连续的标记序列。然而，在实践中，寻找非连续词组的计算成本要高得多并且没有太多的收益。因此搭配抽取通常从一个候选人名单中开始，并利用统计方法对他们进行过滤。</p>
<p>所有这些方法都将一系列文本标记转换为一组断开的计数。与一个序列相比，一个集合的结构要少得多；他们导致平面特征向量。</p>
<p>在本章中，我们用简单的语言描述文本特征化技术。这些技术将一段充满丰富语义结构的自然语言文本转化为一个简单的平面向量。我们讨论一些常用的过滤技术来降低向量维度。我们还引入了 ngram 和搭配抽取作为方法，在平面向量中添加更多的结构。下一章将详细介绍另一种常见的文本特征化技巧，称为 tf-idf。随后的章节将讨论更多方法将结构添加回平面向量。</p>
<br>
<h2 id="参考文献httpfe4mlapachecnorgdocs3文本数据id参考文献"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></h2>
<p>Dunning, Ted. 1993. “Accurate methods for the statistics of surprise and</p>
<p>coincidence.” ACM Journal of Computational Linguistics, special issue on using large corpora , 19:1 (61—74).</p>
<p>“Hypothesis Testing and p-Values.” Khan Academy, accessed May 31,</p>
<p>2016,https://www.khanacademy.org/math/probability/statistics-inferential/hypothesis-testing/v/hypothesis-testing-and-p-values.</p>
<p>Manning,Christopher D. and Hinrich Schütze. 1999. Foundations of StatisticalNatural Language Processing . Cambridge, Massachusettes: MIT Press.</p>
<p>Sometimes people call it the document “vector.” The vector extends from the original and ends at the specified point. For our purposes, “vector” and “point” are the same thing.</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PNAS | 文本网络分析&amp;文化桥梁Python代码实现</title>
      <link>https://textdata.cn/blog/2021-12-28-pnas_culture_bridges/</link>
      <pubDate>Tue, 28 Dec 2021 09:43:10 +0600</pubDate>
      
      <guid>/blog/2021-12-28-pnas_culture_bridges/</guid>
      <description> PNAS2016这篇使用“自闭症谱系障碍ASD疾病的治病原因大讨论”做研究，文中使用TF-IDF刻画参与者信息的“新且熟悉” ,构建参与者文化网络。使用自动文本分析发现，如果组织方建立文化桥梁，在很少能一起讨论的议题领域内产生可连接的对话主题信息，这类信息不仅能引起多个受众的共鸣，而且还能让这些受众彼此进行对话，那么组织方更有可能激发新社交媒体受众的评论</description>
      <content:encoded><![CDATA[<h2 id="代码下载codezip"><a href="code.zip">代码下载</a></h2>
<p>现在一提到文本分析，除了词频统计、情感分析，就属话题分析最火，主流技术路线是使用LDA话题模型进行主题分析。但是LDA适合文档区分度大，文本档数较大。如果不满足这两点，LDA虽然能跑出模型，但是跑出的topic无法解读，没有意义。今天分享一个技术文，在看技术文之前，将技术文的背景文献稍微整理翻译了下，方便大家更好的理解textnets的应用场景。</p>
<p>网络分析通常用于描述人与人之间的关系——尤其是在社会科学中——但它也可以应用于词之间的关系。例如，网络关系可以通过文档中单个单词的共现来创建，或者可以使用双模式网络投影在文档之间创建关系。</p>
<p>基于网络的自动文本分析方法的优点是</p>
<ul>
<li>
<p>像社会群体一样，可以通过三元闭包更准确地测量词组的含义——或者任何两个词或术语相互的含义的原则如果将它们放在第三个词的上下文中，可以更准确地理解；</p>
</li>
<li>
<p><strong>文本网络可以应用于任何长度的文档</strong>，这与通常需要大量单词才能正常运行的主题模型不同。在简短的社交媒体文本变得普遍的时代，这是一个显着的优势。</p>
</li>
<li>
<p>最后，这种方法受益于<strong>社区检测</strong>跨学科文献的最新进展，可以说它提供了更准确的单词分组方法，这些方法受益于网络内观察到的聚类，而不是词袋模型。</p>
</li>
</ul>
<br>
<h2 id="背景-文化桥梁">背景-文化桥梁</h2>
<p>文化信息传递理论和公共审议和计算技术。</p>
<blockquote>
<p>Markowitz, D. M., &amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).</p>
</blockquote>
<p>由于每天光顾此类论坛的人数迅速增加，社交媒体为倡导组织塑造公共辩论提供了有力的机会。 然而，社会科学家还没有解释为什么一些<strong>议题发起者</strong>能成功发起大规模的广泛参与性(公开辩论/广泛对话)，而大多数其他组织却没做到。 本文使用自动文本分析发现，如果组织方建立<strong>文化桥梁</strong>，在很少能一起讨论的议题领域内产生可连接的对话主题信息，这类信息不仅能引起多个受众的共鸣，而且还能让这些受众彼此进行对话，那么组织方更有可能激发新社交媒体受众的评论。
在控制这些因素的情况下，建立实质性文化桥梁的组织， 其所发布信息， 比那些没有建立实质性文化桥梁的组织， 得到的评论数多 2.52 倍。</p>

<figure >
    
        <img src="img/large.jpg" />
    
    
</figure>

<p>社交网络分析通常用于描述个人之间的友谊或其他关系，但它也可通过参与者的消息或想法的类型来描述参与者之间的关系（如下图) 是“文化网络”中的一个小区域。</p>
<ul>
<li>每个节点描述一个参与议题公开对话的参与者</li>
<li>节点间的边代表那些在社交媒体倡导领域内讨论类似议题的人。</li>
</ul>
<p>PNAS2016这篇使用“<strong>自闭症谱系障碍ASD疾病的治病原因大讨论</strong>”做的数据分享，图中 t1 处的一类用户认为ASD致病可能跟疫苗有关，而另一类人可能认为ASD可能与遗传因素的有关。从图形看，t1这类议题发起方式，没有产生广泛参与性。而t2和t3，文化网络中因为文化桥梁的存在，产生了广泛参与性。</p>
<p><strong>假设的文化网络</strong>，其中节点代表参与有关议题的对话参与者，而节点之间的边则描述了其消息内容的相似性。议题广泛参与性，除了话题发起者影响力、话题投放资源等因素影响，还有一个因素就是发起的话题是否吸引了受众。对于参与者而言，最有吸引力的话题需要满足“<strong>新颖，且熟悉</strong>”。</p>
<p><strong>用TF-IDF刻画文化网络中的“新且熟悉”</strong>
在文本分析中有一个文本特征提取技术tf-idf</p>
<ul>
<li>tf指词语在某文档中出现的次数；从词语的角度，该值越大越熟悉</li>
<li>idf逆文档数，即词语出现在多少个文档中；从词语的角度，该值越小越新颖</li>
</ul>

<figure >
    
        <img src="img/large2.jpg" />
    
    
</figure>

<p>本教程将引导您完成使用文本网络分析和可视化数据所需的所有步骤。 在解决与使用文本网络相关的其他杂项问题之前，本教程首先介绍了一个独立的示例。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">textnets</span>
</code></pre></div><br>
<h2 id="1-查看数据">1. 查看数据</h2>
<p>pnas2016这篇的数据没有开源，通过文本构建文化网络、发现文化桥梁。这里使用一个特别特别小的新闻数据，关于人类第一次登月。如果我们使用<a href="https://github.com/jboynyc/textnets">textnets</a>，准备的数据需要有两个列</p>
<ul>
<li>议题参与者，类比报刊</li>
<li>议题参与者发布的内容，如评论等</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;test.csv&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | Unnamed: 0        | headlines                                                                 |
|---:|:------------------|:--------------------------------------------------------------------------|
|  0 | The Guardian      | 3:56 am: Man Steps On to the Moon                                         |
|  1 | New York Times    | Men Walk on Moon -- Astronauts Land on Plain, Collect Rocks, Plant Flag   |
|  2 | Boston Globe      | Man Walks on Moon                                                         |
|  3 | Houston Chronicle | Armstrong and Aldrich &#34;Take One Small Step for Man&#34; on the Moon           |
|  4 | Washington Post   | The Eagle Has Landed -- Two Men Walk on the Moon                          |
|  5 | Chicago Tribune   | Giant Leap for Mankind -- Armstrong Takes 1st Step on Moon                |
|  6 | Los Angeles Times | Walk on Moon -- That\&#39;s One Small Step for Man, One Giant Leap for Mankind |
</code></pre></div><br>
<h2 id="2-导入corpus">2. 导入corpus</h2>
<p>使用textnets库的将数据导入为其特有的语料格式。从下方可以看到textnets可能会用spacy，如果要配置英文en_core_web_sm或中文zh_core_web_sm, 请查看该文 <a href="https://t.hk.uy/aCmr">https://t.hk.uy/aCmr</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">textnets</span> <span class="k">as</span> <span class="nn">tn</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="c1">#设置随机种子，保证代码可重复性</span>
<span class="n">tn</span><span class="o">.</span><span class="n">params</span><span class="p">[</span><span class="s2">&#34;seed&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span>

<span class="n">corpus</span> <span class="o">=</span> <span class="n">tn</span><span class="o">.</span><span class="n">Corpus</span><span class="o">.</span><span class="n">from_csv</span><span class="p">(</span><span class="s1">&#39;test.csv&#39;</span><span class="p">)</span>
<span class="n">corpus</span>
</code></pre></div>
<figure >
    
        <img src="img/corpus.png" width="100%" />
    
    
</figure>

<br>
<h2 id="3-构建网络">3. 构建网络</h2>
<p>需要注意的是corpus.tokenized()是textnets特有的分词方法，如果所处理的新闻是中文，需要提前分词去停用词整理为像英文数据格式，用空格间隔单词。</p>
<p>textnets提供了构建网络的方法</p>
<p>tn.Textnet(data, min_docs, connected, doc_attrs)</p>
<ul>
<li>data DataFrame类型, 三列，自己可以运行 corpus.tokenized() 查看样式</li>
<li>min_docs 一个词语存在于至少多少个文档中，默认为2。一个词至少出现在两个doc中，才会让两个doc产生连接</li>
<li>connected 仅保留网络的最大连接组件（默认值：False）</li>
<li>doc_attrs 文档节点的属性，字典的字典(双层嵌套字典)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">t</span> <span class="o">=</span> <span class="n">tn</span><span class="o">.</span><span class="n">Textnet</span><span class="p">(</span><span class="n">corpus</span><span class="o">.</span><span class="n">tokenized</span><span class="p">(),</span> <span class="n">min_docs</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>使用所有默认参数， textnets 会帮我们删除英文停用词，词干化(合并同类词)，并删除标点符号、数字、URL 等。</p>
<p>但这里我们将破例将 min_docs 设置为1（因为数据只有几句话几十个单词，这里破例设置为1，正常这里至少是2）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">t</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">label_nodes</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>   <span class="c1">#标记节点名(单词、媒体)</span>
       <span class="n">show_clusters</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#绘制簇的边界</span>
</code></pre></div>
<figure >
    
        <img src="img/output_10_0.svg" width="100%" />
    
    
</figure>

<p>show_clusters 使用 <strong>Leiden社区检测算法</strong>(Leiden community detection algorithm)找到了分区成簇，它似乎识别了<strong>同一主题</strong>(登月)下不同词之间的远近(相似的词在一个簇中，不同的词处于不同的簇中)。</p>
<p>你可能会疑惑：为什么网络图中的<strong>单词: moon</strong>会自己漂移？ 那是因为moon这个词在每个文档中只出现一次，所以每个文档moon的tf-idf得分为0。</p>
<p>让我们再次可视化相同的事情，但这次根据节点的 BiRank（二部网络的中心性度量）缩放节点，根据权重缩放边缘。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">t</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">label_nodes</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
       <span class="n">show_clusters</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
       <span class="n">scale_nodes_by</span><span class="o">=</span><span class="s2">&#34;birank&#34;</span><span class="p">,</span>
       <span class="n">scale_edges_by</span><span class="o">=</span><span class="s2">&#34;weight&#34;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_12_0.svg" width="100%" />
    
    
</figure>

<p>我们还可以只可视化报刊网络，不显示词语。这里设置node_type=&lsquo;doc&rsquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#node_type有两种值， doc、term</span>
<span class="n">papers</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">project</span><span class="p">(</span><span class="n">node_type</span><span class="o">=</span><span class="s2">&#34;doc&#34;</span><span class="p">)</span>
<span class="n">papers</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">label_nodes</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_14_0.svg" width="100%" />
    
    
</figure>

<p>和之前的双向网络一样，我们可以看到Houston Chronicle、  Chicago Tribune、  Los Angeles Times更紧密地聚集在一起。</p>
<p>接下来，词网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">project</span><span class="p">(</span><span class="n">node_type</span><span class="o">=</span><span class="s2">&#34;term&#34;</span><span class="p">)</span>
<span class="n">words</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">label_nodes</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
           <span class="n">show_clusters</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_16_0.svg" width="100%" />
    
    
</figure>

<p>除了可视化之外，我们还可以使用<strong>社交网络指标</strong>分析我们的语料库。 例如，具有教高<strong>介数中心性betweenness centrality</strong>的文档可能将主题不同簇联系起来，起到文化桥梁的作用，从而刺激跨越符号鸿沟的交流(Bail,2016)。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">papers</span><span class="o">.</span><span class="n">top_betweenness</span><span class="p">()</span>
</code></pre></div><pre><code>Los Angeles Times    7.0
Boston Globe         0.0
Chicago Tribune      0.0
Houston Chronicle    0.0
New York Times       0.0
The Guardian         0.0
Washington Post      0.0
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span><span class="o">.</span><span class="n">top_betweenness</span><span class="p">()</span>
</code></pre></div><pre><code>walk         72.00
man          18.00
step         16.00
small        12.75
land          6.00
giant         6.00
leap          6.00
mankind       6.00
armstrong     3.25
plain         0.00
dtype: float64
</code></pre>
<p>这是因为New York Times在其标题中使用了“walk”一词，将“one small step”簇与“man on moon”簇联系起来。</p>
<p>我们可以再次生成词网络图，这次根据节点的中介中心性缩放节点，并使用“骨干提取”从网络中修剪边缘：cite:p<code>Serrano2009</code>。</p>
<p>我们还可以使用 color_clusters（而不是 show_clusters）根据节点的分区为节点着色。</p>
<p>我们可以过滤节点标签，只标记那些中间中心性betweenness centrality分数高于中位数的节点。 这在高阶网络中特别有用，其中标记每个节点会导致视觉混乱。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">label_nodes</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
           <span class="n">scale_nodes_by</span><span class="o">=</span><span class="s2">&#34;betweenness&#34;</span><span class="p">,</span>
           <span class="n">color_clusters</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
           <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
           <span class="n">edge_width</span><span class="o">=</span><span class="p">[</span><span class="mi">10</span><span class="o">*</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="o">.</span><span class="n">edges</span><span class="p">[</span><span class="s2">&#34;weight&#34;</span><span class="p">]],</span>
           <span class="n">edge_opacity</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span>
           <span class="n">node_label_filter</span><span class="o">=</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span><span class="o">.</span><span class="n">betweenness</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">words</span><span class="o">.</span><span class="n">betweenness</span><span class="o">.</span><span class="n">median</span><span class="p">())</span>
</code></pre></div>
<figure >
    
        <img src="img/output_21_0.svg" width="100%" />
    
    
</figure>

<h2 id="其他textnets案例资料">其他textnets案例资料</h2>
<p><a href="https://www.jboy.space/blog/enemies-foreign-and-partisan.html">https://www.jboy.space/blog/enemies-foreign-and-partisan.html</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>神经网络textgenrnn库生成文本</title>
      <link>https://textdata.cn/blog/textgenrnn/</link>
      <pubDate>Tue, 28 Dec 2021 06:43:10 +0600</pubDate>
      
      <guid>/blog/textgenrnn/</guid>
      <description> 只需几行代码，即可在任何文本数据集上轻松训练您自己的任意大小和复杂性的文本生成神经网络。 </description>
      <content:encoded><![CDATA[<p>textgenrnn是在Keras/Tensorflow基础上搭建的Python包，特性:</p>
<ul>
<li>有现代的神经网络架构，使用注意力权重和嵌入Embedding来加速训练和提升模型质量</li>
<li>支持字符级别和单词级别的训练</li>
<li>可设置RNN尺寸、RNN层数、是否使用双向RNN</li>
<li>可支持对任意输入文本的训练，包括大文件</li>
<li>可以使用GPU训练，使用CPU生成文本</li>
<li>提供基于GPU的cuDNN，以加速模型训练</li>
<li>使用情景标签训练模型，更快的学习，产出更好的效果。</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">textgenrnn</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">textgenrnn</span> <span class="kn">import</span> <span class="n">textgenrnn</span>

<span class="n">textgen</span> <span class="o">=</span> <span class="n">textgenrnn</span><span class="p">()</span>
<span class="n">textgen</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[Spoiler] Anyone else find this post and their person that was a little more than I really like the Star Wars in the fire or health and posting a personal house of the 2016 Letter for the game in a report of my backyard.
</code></pre></div><br>
<p>使用新文本训练新模型也很简单</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">textgen</span><span class="o">.</span><span class="n">train_from_file</span><span class="p">(</span><span class="s1">&#39;hacker_news_2000.txt&#39;</span><span class="p">,</span> <span class="n">num_epochs</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">textgen</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Project State Project Firefox
</code></pre></div><br>
<p>生成3个论文标题按照疯狂程度的增加顺序（temperature越高，生成算法偏离学习概率分布的程度越大)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">textgen.generate(3, temperature=1.0)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Why we got money “regular alter”

Urburg to Firefox acquires Nelf Multi Shamn

Kubernetes by Google’s Bern
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>30天Python编程学习挑战</title>
      <link>https://textdata.cn/blog/30_days_of_python/</link>
      <pubDate>Mon, 27 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/30_days_of_python/</guid>
      <description> 在挑战结束时，您将获得 _30DaysOfPython_ 编程挑战证书。</description>
      <content:encoded><![CDATA[<p>30天入门Python，需要你耐得住寂寞，又能静下心来敲代码，不要惧怕英文的Python教程，其实敲代码运行代码的过程与玩游戏无异。</p>
<br>
<h2 id="引言">引言</h2>
<p>Python 是一种用于通用编程的高级编程语言。它是一种开源的、解释性的、面向对象的编程语言。 Python 是由荷兰程序员 Guido van Rossum 创建的。 Python 编程语言的名称来源于英国的小品喜剧系列，<em>Month Python&rsquo;s Flying Circus</em>。第一个版本于 1991 年 2 月 20 日发布。这个为期 30 天的 Python 挑战将帮助您逐步学习最新版本的 Python3。这些主题分为 30 天，每天包含几个主题，带有易于理解的解释、真实示例、许多动手练习和项目。</p>
<p>这个挑战是为想要学习 Python 编程语言的初学者和专业人士设计的。完成挑战可能需要30到100天，积极参与电报群的人完成挑战的概率很高。</p>
<br>
<h2 id="why-python-">Why Python ?</h2>
<p>它是一种非常接近人类语言的编程语言，因此易于学习和使用。
Python 被各种行业和公司（包括 Google）使用。 它已被用于开发 Web 应用程序、桌面应用程序、系统管理和机器学习库。 Python 是数据科学和机器学习社区中高度接受的语言。 我希望这足以说服你开始学习 Python。 Python 正在吞噬世界，而你在它吃掉你之前就应该杀了它。</p>
<br>
<h2 id="目录">目录</h2>
<table>
<thead>
<tr>
<th># Day</th>
<th style="text-align:center">Topics</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td style="text-align:center"><a href="./readme.md">引言</a></td>
</tr>
<tr>
<td>02</td>
<td style="text-align:center"><a href="./02_Day_Variables_builtin_functions/02_variables_builtin_functions.md">变量,内置函数</a></td>
</tr>
<tr>
<td>03</td>
<td style="text-align:center"><a href="./03_Day_Operators/03_operators.md">四则运算</a></td>
</tr>
<tr>
<td>04</td>
<td style="text-align:center"><a href="./04_Day_Strings/04_strings.md">字符串</a></td>
</tr>
<tr>
<td>05</td>
<td style="text-align:center"><a href="./05_Day_Lists/05_lists.md">列表</a></td>
</tr>
<tr>
<td>06</td>
<td style="text-align:center"><a href="./06_Day_Tuples/06_tuples.md">元组</a></td>
</tr>
<tr>
<td>07</td>
<td style="text-align:center"><a href="./07_Day_Sets/07_sets.md">集合</a></td>
</tr>
<tr>
<td>08</td>
<td style="text-align:center"><a href="./08_Day_Dictionaries/08_dictionaries.md">字典</a></td>
</tr>
<tr>
<td>09</td>
<td style="text-align:center"><a href="./09_Day_Conditionals/09_conditionals.md">条件语句</a></td>
</tr>
<tr>
<td>10</td>
<td style="text-align:center"><a href="./10_Day_Loops/10_loops.md">循环语句</a></td>
</tr>
<tr>
<td>11</td>
<td style="text-align:center"><a href="./11_Day_Functions/11_functions.md">函数</a></td>
</tr>
<tr>
<td>12</td>
<td style="text-align:center"><a href="./12_Day_Modules/12_modules.md">魔窟</a></td>
</tr>
<tr>
<td>13</td>
<td style="text-align:center"><a href="./13_Day_List_comprehension/13_list_comprehension.md">列表生成式</a></td>
</tr>
<tr>
<td>14</td>
<td style="text-align:center"><a href="./14_Day_Higher_order_functions/14_higher_order_functions.md">高级函数</a></td>
</tr>
<tr>
<td>15</td>
<td style="text-align:center"><a href="./15_Day_Python_type_errors/15_python_type_errors.md">类型错误</a></td>
</tr>
<tr>
<td>16</td>
<td style="text-align:center"><a href="./16_Day_Python_date_time/16_python_datetime.md">日期</a></td>
</tr>
<tr>
<td>17</td>
<td style="text-align:center"><a href="./17_Day_Exception_handling/17_exception_handling.md">异常处理语句</a></td>
</tr>
<tr>
<td>18</td>
<td style="text-align:center"><a href="./18_Day_Regular_expressions/18_regular_expressions.md">正则表达式</a></td>
</tr>
<tr>
<td>19</td>
<td style="text-align:center"><a href="./19_Day_File_handling/19_file_handling.md">文件读写</a></td>
</tr>
<tr>
<td>20</td>
<td style="text-align:center"><a href="./20_Day_Python_package_manager/20_python_package_manager.md">包管理</a></td>
</tr>
<tr>
<td>21</td>
<td style="text-align:center"><a href="./21_Day_Classes_and_objects/21_classes_and_objects.md">类&amp;对象</a></td>
</tr>
<tr>
<td>22</td>
<td style="text-align:center"><a href="./22_Day_Web_scraping/22_web_scraping.md">网络爬虫</a></td>
</tr>
<tr>
<td>23</td>
<td style="text-align:center"><a href="./23_Day_Virtual_environment/23_virtual_environment.md">虚拟环境</a></td>
</tr>
<tr>
<td>24</td>
<td style="text-align:center"><a href="./24_Day_Statistics/24_statistics.md">统计</a></td>
</tr>
<tr>
<td>25</td>
<td style="text-align:center"><a href="./25_Day_Pandas/25_pandas.md">Pandas</a></td>
</tr>
<tr>
<td>26</td>
<td style="text-align:center"><a href="./26_Day_Python_web/26_python_web.md">Web开发</a></td>
</tr>
<tr>
<td>27</td>
<td style="text-align:center"><a href="./27_Day_Python_with_mongodb/27_python_with_mongodb.md">MongoDB数据库</a></td>
</tr>
<tr>
<td>28</td>
<td style="text-align:center"><a href="./28_Day_API/28_API.md">API接口</a></td>
</tr>
<tr>
<td>29</td>
<td style="text-align:center"><a href="./29_Day_Building_API/29_building_API.md">搭建API</a></td>
</tr>
<tr>
<td>30</td>
<td style="text-align:center"><a href="./30_Day_Conclusions/30_conclusions.md">总结</a></td>
</tr>
</tbody>
</table>
<br>
<h2 id="welcome">Welcome</h2>
<p><strong>恭喜</strong>决定参加 <em>30 天的 Python</em> 编程挑战。 在这个挑战中，您将学习成为 Python 程序员所需的一切以及整个编程概念。 在挑战结束时，您将获得 <em>30DaysOfPython</em> 编程挑战证书。</p>
<p>如果您想积极参与挑战，可以加入30DaysOfPython 挑战(<a href="https://t.me/ThirtyDaysOfPython">https://t.me/ThirtyDaysOfPython</a>) 电报群。</p>
<br>
<h2 id="下载课件">下载课件</h2>
<p><a href="https://github.com/Asabeneh/30-Days-Of-Python/archive/refs/heads/master.zip">https://github.com/Asabeneh/30-Days-Of-Python/archive/refs/heads/master.zip</a></p>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>共词矩阵 | cntext更新至1.1</title>
      <link>https://textdata.cn/blog/cntext_upgrade/</link>
      <pubDate>Wed, 22 Dec 2021 13:43:10 +0600</pubDate>
      
      <guid>/blog/cntext_upgrade/</guid>
      <description>共现矩阵 </description>
      <content:encoded><![CDATA[<h2 id="cntext更新至11-版本">cntext更新至1.1 版本</h2>
<p>本次更新了共现矩阵的计算函数。</p>
<p>更新方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext --upgrade
</code></pre></div><p>或指定版本安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext==1.1
</code></pre></div><br>
<h2 id="co_occurrence_matrix">co_occurrence_matrix</h2>
<p>词共现矩阵</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">co_occurrence_matrix</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I go to school every day by bus .&#34;</span><span class="p">,</span>
         <span class="s2">&#34;i go to theatre every night by bus&#34;</span><span class="p">]</span>

<span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/co_occurrence1.png" width="100%" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">documents2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;编程很好玩&#34;</span><span class="p">,</span>
             <span class="s2">&#34;Python是最好学的编程&#34;</span><span class="p">]</span>

<span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents2</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/co_occurrence2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Phonemizer音素化 Python文本语音表征包</title>
      <link>https://textdata.cn/blog/phonemizer/</link>
      <pubDate>Mon, 20 Dec 2021 23:43:10 +0600</pubDate>
      
      <guid>/blog/phonemizer/</guid>
      <description> 音素是构成语音的基本声音，音节和单词建立在音节上。在与语音和语言处理相关的各种应用（例如文本到语音系统）中，将文本从其拼写形式转录为语音字母表是一项重要要求。 </description>
      <content:encoded><![CDATA[<h2 id="音素">音素</h2>
<p><strong>音素</strong>是构成语音的基本声音，音节和单词建立在音节上。在与<strong>语音</strong>和<strong>语言</strong>处理相关的各种应用（例如<strong>文本到语音系统</strong>）中，将文本从其拼写形式转录为语音字母表是一项重要要求。</p>
<p>Phonemizer 是一个精确寻址的 Python 包, 它将文本从其拼写表示转录为语音表示。 该包设计用户友好的，并公开了一个高级音素化函数， 支持大约100种不同的语言。phonemizer 使用的默认后端是 eSpeak
（Dunn &amp; Vitolins，2019 年），一种基于语言专业知识和手写转录规则的文本转语音软件。它将文本转录成国际音标，并支持一百多种语言。使用 MBROLA 声音（Tits &amp; Vitolins，2019），eSpeak 后端可用于大约 35 种语言，以 SAMPA 计算机可读语音字母表转录文本。</p>
<br>
<h2 id="安装">安装</h2>
<p>安装phonemizer前需要配置espeak-ng，</p>
<ul>
<li>win <a href="https://github.com/espeak-ng/espeak-ng/releases">https://github.com/espeak-ng/espeak-ng/releases</a>下载对应的msi文件点击安装</li>
<li>mac 首先配置好homebrew，之后命令行brew install espeak</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install phonemizer
</code></pre></div><h2 id="音素化phonemize">音素化phonemize</h2>
<p>from phonemizer import phonemize</p>
<p>phonemize(text, language=&lsquo;en-us&rsquo;, prepend_text=False, preserve_punctuation=False, with_stress=False, njobs=1)</p>
<ul>
<li>text 文本列表</li>
<li>language 语言。&ldquo;en-us&quot;美国英语， &ldquo;zh&quot;中文</li>
<li>prepend_text 输出结果保留输入的文本，默认False</li>
<li>preserve_punctuation 输出结果保留标点符号，默认False</li>
<li>with_stress 标记重读，默认False</li>
<li>njobs 并行运算核数，默认使用cpu的1个核。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer</span> <span class="kn">import</span> <span class="n">phonemize</span>

<span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hello, my name is david&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;nice to meet you!&#39;</span><span class="p">]</span>

<span class="c1"># Do this:</span>
<span class="n">phonemized</span> <span class="o">=</span>  <span class="n">phonemize</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">language</span><span class="o">=</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>
<span class="n">phonemized</span>
</code></pre></div><p>Run</p>
<pre><code>['həloʊ maɪ neɪm ɪz deɪvɪd ', 'naɪs tə miːt juː ']
</code></pre>
<br>
<p>但上面的用法速度较慢， 更高效的写法应该为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="n">language</span><span class="o">=</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>

<span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hello, my name is david&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;nice to meet you!&#39;</span><span class="p">]</span>

<span class="n">phonemized</span> <span class="o">=</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">(</span><span class="n">texts</span><span class="p">)</span> 
<span class="n">phonemized</span>
</code></pre></div><p>Run</p>
<pre><code>142 µs ± 851 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<p>给每个单词构造音素，输出结果为字典样式</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="kn">from</span> <span class="nn">phonemizer.punctuation</span> <span class="kn">import</span> <span class="n">Punctuation</span>
<span class="kn">from</span> <span class="nn">phonemizer.separator</span> <span class="kn">import</span> <span class="n">Separator</span>
<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;It amused him to think that they were probably talking about him at that very moment&#39;</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)]</span>

<span class="c1"># 忽略词语边界，音素之间用空格间隔</span>
<span class="n">separator</span> <span class="o">=</span> <span class="n">Separator</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>

<span class="n">lexicon</span> <span class="o">=</span> <span class="p">{</span><span class="n">word</span><span class="p">:</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">([</span><span class="n">word</span><span class="p">],</span> <span class="n">separator</span><span class="o">=</span><span class="n">separator</span><span class="p">,</span> <span class="n">strip</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
           <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">}</span>

<span class="n">lexicon</span>
</code></pre></div><p>Run</p>
<pre><code>{'it': 'ɪ t',
 'amused': 'ɐ m j uː s d',
 'him': 'h ɪ m',
 'to': 't uː',
 'think': 'θ ɪ ŋ k',
 'that': 'ð æ t',
 'they': 'ð eɪ',
 'were': 'w ɜː',
 'probably': 'p ɹ ɑː b ə b l i',
 'talking': 't ɔː k ɪ ŋ',
 'about': 'ɐ b aʊ t',
 'at': 'æ t',
 'very': 'v ɛ ɹ i',
 'moment': 'm oʊ m ə n t'}
</code></pre>
<br>
<h2 id="中文的音素化">中文的音素化</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text_zhs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;你好我的名字是大卫&#39;</span><span class="p">,</span> 
            <span class="s1">&#39;很高兴认识你&#39;</span><span class="p">]</span>

<span class="n">phonemized_zhs</span> <span class="o">=</span> <span class="n">phonemize</span><span class="p">(</span><span class="n">text_zhs</span><span class="p">,</span> <span class="n">language</span><span class="o">=</span><span class="s1">&#39;zh&#39;</span><span class="p">)</span>
<span class="n">phonemized_zhs</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;ni2 xɑu2 wo2 tə1 miɜŋ tsi̪5 s.i.5 tɑ5 wei5 &#39;,
 &#39;xə2n kɑu5 ɕi5ŋ ʐə5n s.i.1 ni2 &#39;]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="kn">from</span> <span class="nn">phonemizer.punctuation</span> <span class="kn">import</span> <span class="n">Punctuation</span>
<span class="kn">from</span> <span class="nn">phonemizer.separator</span> <span class="kn">import</span> <span class="n">Separator</span>
<span class="kn">import</span> <span class="nn">re</span>


<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;想到他们可能在那个时候谈论他，他觉得好笑&#39;</span>
<span class="n">words</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;[</span><span class="se">\u4e00</span><span class="s1">-</span><span class="se">\u9fa5</span><span class="s1">]&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>


<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="s1">&#39;zh&#39;</span><span class="p">)</span>

<span class="n">separator</span> <span class="o">=</span> <span class="n">Separator</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>

<span class="c1"># 构建每个汉字一个对应的音素表达，输出结果为字典样式</span>
<span class="n">lexicon</span> <span class="o">=</span> <span class="p">{</span><span class="n">word</span><span class="p">:</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">([</span><span class="n">word</span><span class="p">],</span> <span class="n">separator</span><span class="o">=</span><span class="n">separator</span><span class="p">,</span> <span class="n">strip</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
           <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">}</span>

<span class="n">lexicon</span>
</code></pre></div><p>Run</p>
<pre><code>{'想': 'ɕ iɑ2 ŋ ',
 '到': 't ɑu5 ',
 '他': 'th ɑ5 ',
 '们': 'm ə1 n ',
 '可': 'kh o2 ',
 '能': 'n əɜ ŋ ',
 '在': 'ts ai5 ',
 '那': 'n ɑ5 ',
 '个': 'k o1 ',
 '时': 's. i.ɜ ',
 '候': 'x ou5 ',
 '谈': 'th aɜ n ',
 '论': 'l uə5 n ',
 '觉': 'tɕ yɛɜ ',
 '得': 't ə1 ',
 '好': 'x ɑu2 ',
 '笑': 'ɕ j ɑu5 '}
</code></pre>
<br>
<h2 id="心理学相关概念">心理学相关概念</h2>
<p>这个包用起来比较简单，但是想到一个场景，说不定可以多个角度去分析文本。</p>
<p>经常看文本的时候，脑海里不自觉的读出声音，这种现象今天查了下叫做“听觉表象”，听觉表象产生于语言的视觉区和语言的运动区——角回和布洛卡区。通过听觉，听出相应的字的声音，我们就可以领会到这句话的意思。从常人的生长发育的过程，我们都是先牙牙学语，通过声音理解内容的含义，而后经过十数教育学会语言书面文字，掌握文字系统，此时我们的神经回路是“视觉(听觉)~记忆~理解”</p>
<p>对一个东西的“知觉”在心理学上叫做这个东西的“知觉表征”，相当于是把这个东西转码为了一个，用于后续在心理上对这个东西进行加工。这个心理符号的编码与这个东西本身的特征以及最初的感觉通道有关——一个真正的苹果常会被以视觉的方式编码，成为一个视觉知觉表征，可以简单理解成这个苹果的图像；一个词“苹果”常会被以听觉的方式编码，成为一个AVL单元，可以简单地理解成把“苹果”这两个字和“ping’guo”这个读音打包在一起的一个文件。</p>
<p>感觉代码被经过某些处理后储存在记忆当中，当有一天需要用的时候再被从记忆里提取出来。这个时候的提取，本身是一种建构，也就是与将感觉处理后存储起来的一个相反的过程——所以心理学上把我们所提取（建构）的这个代码就称为表象。表象和知觉是机能等价的（Neisser，1972），可以简单理解为表象就是是一种基于过去经验的知觉。这也解释了我们默读词汇的时候，这个AVL单元里“语音”的部分是哪里来的了——这是我们基于对自己声音的了解而建构的一种听觉表象。简单来说这个语音就是根据我们对自己声音的认识，来“想象”的读出来的声音。</p>
<blockquote>
<p>知乎回答-心理学哈士奇</p>
<p>Conrad R (1963). Acoustic confusions and memory span for words. Nature, 197: 1029-1030.</p>
<p>Neisser U (1972). Changing conception of imagery. In P W Sheehan (ED), The Function and Nature of Imagery. London: Achademic Press.
知乎回答-心理学哈士奇</p>
</blockquote>
<br>
<h2 id="引用格式">引用格式</h2>
<p>Bernard, M. and Titeux, H. (2021). Phonemizer: Text to phones transcription for multiple languages in python. Journal of Open Source Software, 6(68):3958.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-tex" data-lang="tex">@article<span class="nb">{</span>Bernard2021,
  doi = <span class="nb">{</span>10.21105/joss.03958<span class="nb">}</span>,
  url = <span class="nb">{</span>https://doi.org/10.21105/joss.03958<span class="nb">}</span>,
  year = <span class="nb">{</span>2021<span class="nb">}</span>,
  publisher = <span class="nb">{</span>The Open Journal<span class="nb">}</span>,
  volume = <span class="nb">{</span>6<span class="nb">}</span>,
  number = <span class="nb">{</span>68<span class="nb">}</span>,
  pages = <span class="nb">{</span>3958<span class="nb">}</span>,
  author = <span class="nb">{</span>Mathieu Bernard and Hadrien Titeux<span class="nb">}</span>,
  title = <span class="nb">{</span>Phonemizer: Text to Phones Transcription for Multiple Languages in Python<span class="nb">}</span>,
  journal = <span class="nb">{</span>Journal of Open Source Software<span class="nb">}</span>
<span class="nb">}</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>OMNIZART: 音乐转录变得容易</title>
      <link>https://textdata.cn/blog/omnizart/</link>
      <pubDate>Mon, 20 Dec 2021 22:43:10 +0600</pubDate>
      
      <guid>/blog/omnizart/</guid>
      <description> Omnizart 是一个 Python 库，是自动音乐转录的简化解决方案</description>
      <content:encoded><![CDATA[
<figure >
    
        <img src="img/OMNIZART.png" width="100%" />
    
    
</figure>

<p>Omnizart 是一个 Python 库，是自动音乐转录的简化解决方案。该库收集了<strong>音乐与文化技术实验室</strong>(<a href="https://sites.google.com/view/mctl/home">https://sites.google.com/view/mctl/home</a>)的研究成果，分析和弦音乐并转录<strong>乐器的音符 、和弦 、drum events、帧级人声旋律、音符级人声旋律</strong>。</p>
<p>Omnizart 提供构建基于深度学习的音乐转录生命周期的主要功能，涵盖从<em>数据集下载</em>、<em>特征预处理</em>、<em>模型训练</em>、<em>转录</em>和<em>声音化</em>。还提供了预先训练的检查点，以便立即使用转录。该论文可以从 <a href="https://doi.org/10.21105/joss.03391">Journal of Open Source Software (JOSS)</a> 中找到。</p>
<br>
<h2 id="演示">演示</h2>
<h3 id="colab">Colab</h3>
<p>使用 <strong>Colab notebook</strong> <a href="https://bit.ly/OmnizartColab">https://bit.ly/OmnizartColab</a>几乎可以立即转录您最喜欢的歌曲！</p>
<br>
<h2 id="声音样本">声音样本</h2>
<p>原声</p>
<p><video id="video" controls="" preload="none" type="video/mp4"> <source id="mp4" src="img/Highway_No_9.mp4" type="video/mp4"> </video></p>
<p>和弦转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_chord_synth.mp3">
</audio>
<p>鼓点转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_drum_synth.mp3">
</audio>
<p>音符级人声转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_vocal_synth.mp3">
</audio>
<p>帧级语音转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_vocal_contour.mp3">
</audio>
<p>Source files can be downloaded <a href="https://drive.google.com/file/d/15VqHearznV9L83cyl61ccACsXXJ4vBHo/view?usp=sharing">here</a>. You can use <em>Audacity</em> to open the files.</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PNAS | 历史语言记录揭示了近几十年来认知扭曲的激增</title>
      <link>https://textdata.cn/blog/2021-12-19-pnas_historical_language/</link>
      <pubDate>Sun, 19 Dec 2021 20:43:10 +0600</pubDate>
      
      <guid>/blog/2021-12-19-pnas_historical_language/</guid>
      <description> 患有抑郁症的人容易出现适应不良的思维模式，即认知扭曲，他们以过于消极和不准确的方式思考自己、世界和未来。 这些扭曲与个人情绪、行为和语言的显着变化有关。 **我们假设社会可以经历类似的集体心理变化，这些变化会反映在语言使用的历史记录中**。我们调查了过去 **125 年超 1400 万本书中认知扭曲（congnition disorder）**的文本标记的流行情况，并观察到自 1980 年代以来它们的流行程度激增，达到超过大萧条和两次世界大战的水平。 **这种模式似乎不是由词义、出版和写作标准或 Google 图书样本的变化驱动的**。 我们的研究结果发现，通过语言分析**最近的社会转向与认知扭曲和内化障碍相关**。</description>
      <content:encoded><![CDATA[<blockquote>
<p>Bollen, Johan, et al. &ldquo;Historical language records reveal a surge of cognitive distortions in recent decades.&rdquo; <em>Proceedings of the National Academy of Sciences</em> 118.30 (2021).</p>
</blockquote>
<br>
<h2 id="摘要">摘要</h2>
<p>患有抑郁症的人容易出现适应不良的思维模式，即认知扭曲，他们以过于消极和不准确的方式思考自己、世界和未来。 这些扭曲与个人情绪、行为和语言的显着变化有关。 <strong>我们假设社会可以经历类似的集体心理变化，这些变化会反映在语言使用的历史记录中</strong>。我们调查了过去 <strong>125 年超 1400 万本书中认知扭曲（congnition disorder）<strong>的文本标记的流行情况，并观察到自 1980 年代以来它们的流行程度激增，达到超过大萧条和两次世界大战的水平。 <strong>这种模式似乎不是由词义、出版和写作标准或 Google 图书样本的变化驱动的</strong>。 我们的研究结果发现，通过语言分析</strong>最近的社会转向与认知扭曲和内化障碍相关</strong>。</p>
<br>
<h2 id="正文">正文</h2>
<p>抑郁症与独特且可识别的适应不良思维模式有关，称为<strong>认知扭曲</strong>，其中个人以不准确和过于消极的方式思考自己、未来和世界 (9-12)。例如，当个体用消极的、绝对主义的术语（例如，“I am a loser”）给自己贴上标签时，就会出现在抑郁症中看到的认知扭曲。他们可能会用二分法、极端的术语谈论未来事件（例如，“My meeting will be a complete disaster”）或对别人的心态做出毫无根据的假设（例如，“Everybody will think that I am a failure”）。</p>
<p>认知扭曲的类型通常区分许多部分重叠的类型，例如“灾难化”、“二分推理”、“否定积极的”、“情感推理”、“算命”、“标记和错误标记”、“放大和最小化”、“心理过滤”、“读心术”、“过度概括”、“个性化”和“应该陈述”。</p>
<p>**认知行为疗法 (cognitive-behavioral therapy，CBT) ** 是治疗抑郁症和其他内化障碍的黄金标准 (13)，其基础理论认为认知扭曲与内化障碍有关； 它们反映了环境压力下的负面情感和回避行为模式 (14, 15)。 <strong>语言与这种动态密切相关。 事实上，最近的研究表明，患有内化障碍的个体在他们的语言中表现出明显更高水平的认知扭曲 (16, 17)，以至于他们的患病率可能被用作抑郁症易感性的指标 (18, 19)。</strong></p>
<p>我们分析了过去 125 年中大量以英语、西班牙语和德语出版的超过 1400 万本书籍（谷歌图书）中的大量认知扭曲标记的流行情况。具体来说，我们正在研究由 CBT 专家、计算语言学家和双语母语人士组成的团队设计的数百个 1 到 5 个单词 (n-gram)、 标记的认知失真图式 (cognitive distortion schemata,CDS) 的纵向流行情况，以及由 CBT 专家小组外部验证，以捕捉 12 种认知扭曲的表达 (9)。 <strong>CDS n-gram</strong> 被设计为简短、明确和独立的语句，使用频率很高的术语表达特定认知扭曲类型的核心（图 1 和 SI 附录，表 S1-S3）。例如，3-gram 的“I am a”捕获了标签和错误标签失真，而不管其上下文或所涉及的精确标签（“女士”、“尊贵的人”、“失败者”等）。这些相同的 n-gram 在早期的研究中被证明显着更多。</p>
<br>
<h2 id="cds流行度测量">CDS流行度测量</h2>
<p><img loading="lazy" src="img/CDS_n-gram.png" alt=""  />
</p>
<p><strong>CDS n-gram</strong> 显示在灰色框内的示例，周围是合理的上下文词，这些词可能会有所不同，而不会影响 n-gram 是否标记给定类型的认知扭曲的表达（例如，<strong>读心术Mindreading、情感推理Emotiona lReasoning、标记Labeling和错误标记Mislabeling</strong>） . CDS 是由 CBT 专家、语言学家和母语使用者组成的团队设计的，用于捕捉特定认知扭曲类型的表达，而不管其特定的词汇上下文。 对于英语（美国）、西班牙语和德语，专家团队分别定义了 241、435 和 296 个 n-gram 来标记 12 种常见的认知扭曲类型。 请注意，我们的<strong>流行度测量只计算 CDS n-gram 的出现，而不管上下文（“每个人都在思考”、“仍然感觉”和“我是一个”）</strong>。 按失真类型提供的所有 CDS n-gram 的完整列表在SI Appendix, Tables S1–S3.</p>
<p><img loading="lazy" src="img/fig2.png" alt=""  />
</p>
<p>(A-C) 美国英语 (A)、西班牙语 (B) 和德语 (C) 从 1855 年到 2020 年 (125 y) 的 CDS n-gram 流行时间序列的中值 z 分数，其中添加了年份标记 对于重大历史事件。 在 20 世纪的大部分时间里，所有时间序列都显示出稳定或下降的水平，随后在过去的 30 年里认知扭曲急剧增加。</p>
<p>美国英语从 1899 年到 1978 年呈下降趋势，在 1914 年和 1940 年（第一次世界大战和第二次世界大战）以及特别是 1968 年出现小高峰。随后是 CDS 流行率从 1978 年开始激增，并持续到 2019 年。</p>
<p>对于西班牙语 我们发现从 1895 年到 1980 年代初期的稳定水平，在这一点上出现了一个趋势，即 CDS 患病率水平高于之前观察到的任何水平。</p>
<p>德国表现出稳定的 CDS 流行水平，除了第一次世界大战和第二次世界大战前后和之后的强劲高峰，直到 2007 年突然激增。</p>
<br>
<h2 id="data">Data</h2>
<p>研究数据谷歌已经开源，开源下载哦</p>
<p><a href="https://storage.googleapis.com/books/ngrams/books/datasetsv3.html">https://storage.googleapis.com/books/ngrams/books/datasetsv3.html</a></p>
<p><img loading="lazy" src="img/googlebooks.png" alt=""  />
</p>
<br>
<h2 id="cds-ngram词表">CDS ngram词表</h2>
<p>该论文CDS ngram词表</p>
<p><img loading="lazy" src="img/cdsngramlist.png" alt=""  />
</p>
<br>
<h2 id="代码">代码</h2>
<p>ngram代码实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">nltk.util</span> <span class="kn">import</span> <span class="n">ngrams</span>
<span class="kn">from</span> <span class="nn">nltk.tokenize</span> <span class="kn">import</span> <span class="n">word_tokenize</span>

<span class="n">sentence</span> <span class="o">=</span> <span class="s2">&#34;Historical language records reveal a surge of cognitive distortions in recent decades&#34;</span>
<span class="n">words</span> <span class="o">=</span> <span class="n">word_tokenize</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;分词结果: &#39;</span><span class="p">,</span> <span class="n">words</span><span class="p">)</span>
<span class="c1">#2-gram</span>
<span class="n">two_grams</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tw</span><span class="p">)</span> <span class="k">for</span> <span class="n">tw</span> <span class="ow">in</span> <span class="n">ngrams</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;2-gram处理结果: &#39;</span><span class="p">,</span> <span class="n">two_grams</span><span class="p">)</span>
<span class="c1">#3-gram</span>
<span class="n">three_grams</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tw</span><span class="p">)</span> <span class="k">for</span> <span class="n">tw</span> <span class="ow">in</span> <span class="n">ngrams</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;3-gram处理结果: &#39;</span><span class="p">,</span> <span class="n">three_grams</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">分词结果:  [&#39;Historical&#39;, &#39;language&#39;, &#39;records&#39;, &#39;reveal&#39;, &#39;a&#39;, &#39;surge&#39;, &#39;of&#39;, &#39;cognitive&#39;, &#39;distortions&#39;, &#39;in&#39;, &#39;recent&#39;, &#39;decades&#39;]

2-gram处理结果:  [&#39;Historical language&#39;, &#39;language records&#39;, &#39;records reveal&#39;, &#39;reveal a&#39;, &#39;a surge&#39;, &#39;surge of&#39;, &#39;of cognitive&#39;, &#39;cognitive distortions&#39;, &#39;distortions in&#39;, &#39;in recent&#39;, &#39;recent decades&#39;]

3-gram处理结果:  [&#39;Historical language records&#39;, &#39;language records reveal&#39;, &#39;records reveal a&#39;, &#39;reveal a surge&#39;, &#39;a surge of&#39;, &#39;surge of cognitive&#39;, &#39;of cognitive distortions&#39;, &#39;cognitive distortions in&#39;, &#39;distortions in recent&#39;, &#39;in recent decades&#39;]

</code></pre></div><p>统计统计CDS-ngram与ngram频数，进而计算出CDS流行度。</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python自动化利器RPA爬数据so easy</title>
      <link>https://textdata.cn/blog/rpa/</link>
      <pubDate>Sun, 19 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/rpa/</guid>
      <description>您可以使用它快速实现自动化操作网站、自动化处理桌面应用程序上的重复性耗时任务。</description>
      <content:encoded><![CDATA[<p>RPA for Python 简单而强大的自动化套件！ 您可以使用它快速实现自动化操作网站、自动化处理桌面应用程序上的重复性耗时任务。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">rpa</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>首次运行下方代码会，提示安装200M左右的配置文件，建议选择状况较好的网络环境。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpa</span> <span class="k">as</span> <span class="nn">r</span>

<span class="n">r</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="c1">#操控Chrome打开某个链接</span>
<span class="n">r</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="s1">&#39;https://www.google.com&#39;</span><span class="p">)</span>

<span class="c1">#定位搜索框，输入decentralization，回车执行搜索</span>
<span class="n">r</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="s1">&#39;//*[@name=&#34;q&#34;]&#39;</span><span class="p">,</span> <span class="s1">&#39;decentralization[enter]&#39;</span><span class="p">)</span>

<span class="c1">#定位结果页的统计信息。</span>
<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;result-stats&#39;</span><span class="p">))</span>

<span class="c1">#截屏</span>
<span class="n">r</span><span class="o">.</span><span class="n">snap</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="s1">&#39;results.png&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><pre><code>找到约 1,590,000,000 条结果 （用时 0.39 秒）
True
</code></pre>
<p>需要注意的是 <code>//*[@name=&quot;q&quot;]</code> 与 <code>result-stats</code> 都是网页的定位表达式，建议大家稍微学一下html选择器 selector。 咱们爬虫课程中的pyquery部分讲的主要是selector，感兴趣可以付下一下。</p>
<br>
<h2 id="再试一下">再试一下</h2>
<p>这里我给大家操作一下，通过开发者工具Element面板选定并复制的方法构造selector。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpa</span> <span class="k">as</span> <span class="nn">r</span>

<span class="n">r</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">r</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="s1">&#39;https://www.baidu.com&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="s1">&#39;#kw&#39;</span><span class="p">,</span> <span class="s1">&#39;大邓和他的Python[enter]&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;//*[@id=&#34;tsn_inner&#34;]/div[2]&#39;</span><span class="p">))</span>
<span class="n">r</span><span class="o">.</span><span class="n">snap</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="s1">&#39;results.png&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><pre><code>搜索工具百度为您找到相关结果约1,920,000个
True
</code></pre>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>案例实战 | 企业信息数据采集</title>
      <link>https://textdata.cn/blog/%E7%88%B1%E4%BC%81%E6%9F%A5/</link>
      <pubDate>Wed, 08 Dec 2021 18:42:10 +0600</pubDate>
      
      <guid>/blog/%E7%88%B1%E4%BC%81%E6%9F%A5/</guid>
      <description>手把手教你写爬虫</description>
      <content:encoded><![CDATA[<h2 id="爱企查">爱企查</h2>
<p>想搜集企业信息，可以使用爱企查网站，例如通过该网站，搜”华为“，，可以获得与关键词<strong>华为</strong>相关的很多企业名信息

<figure >
    
        <img src="img/01-%e7%88%b1%e4%bc%81%e6%9f%a5%e9%a6%96%e9%a1%b5.png" width="100%" />
    
    
</figure>
</p>
<p>设计网络爬虫步骤</p>
<ol>
<li>使用开发者工具network面板审查网站的网址规律urls</li>
<li>对单个网址url尝试访问</li>
<li>确定网站是html或json类型</li>
<li>从网页中解析定位需要的数据。</li>
</ol>
<ul>
<li>使用pyquery解析html页面数据；</li>
<li>或使用json解析json页面数据</li>
</ul>
<ol start="5">
<li>存储到csv</li>
<li>重复2-5</li>
</ol>
<br>
<h2 id="尝试访问第一页">尝试访问第一页</h2>

<figure >
    
        <img src="img/02-%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" width="100%" />
    
    
</figure>

<p>经过开发者工具network，可以使用requests对其进行访问。</p>
<p>需要注意的是，headers中需要加入Referer参数，该参数作用是告诉服务器</p>
<blockquote>
<p>兄弟，我是经过Referer介绍的，不然我也不可能知道
<a href="https://aiqicha.baidu.com/s/advanceFilterAjax?q=%E5%8D%8E%E4%B8%BA&amp;t=&amp;p=1&amp;s=10&amp;o=0&amp;f=%7B%7D">https://aiqicha.baidu.com/s/advanceFilterAjax?q=%E5%8D%8E%E4%B8%BA&amp;t=&amp;p=1&amp;s=10&amp;o=0&amp;f=%7B%7D</a>
这个网址啊</p>
</blockquote>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">quote</span>

<span class="n">query</span> <span class="o">=</span> <span class="s1">&#39;华为&#39;</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://aiqicha.baidu.com/s/advanceFilterAjax?q=</span><span class="si">{q}</span><span class="s1">&amp;t=&amp;p=1&amp;s=10&amp;o=0&amp;f=%7B%7D&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">quote</span><span class="p">(</span><span class="n">query</span><span class="p">))</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.55 Safari/537.36&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;https://aiqicha.baidu.com/s?q=</span><span class="si">{q}</span><span class="s1">&amp;t=0&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">quote</span><span class="p">(</span><span class="n">query</span><span class="p">))}</span>

<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
<span class="n">resp</span>
</code></pre></div><pre><code>&lt;Response [200]&gt;
</code></pre>
<br>
<h2 id="解析网页数据">解析网页数据</h2>
<p>
<figure >
    
        <img src="img/03-%e8%a7%a3%e6%9e%90%e6%95%b0%e6%8d%ae.png" width="100%" />
    
    
</figure>

通过开发者工具可以看到，这个网站采用的json类型网页数据。</p>
<p>
<figure >
    
        <img src="img/04-%e6%95%b0%e6%8d%ae%e5%ad%97%e6%ae%b5.png" width="100%" />
    
    
</figure>

好在这类网页的解析定位比较简单。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">com</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;data&#39;</span><span class="p">][</span><span class="s1">&#39;resultList&#39;</span><span class="p">][:</span><span class="mi">3</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">com</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    {&#39;pid&#39;: &#39;31360200662522&#39;, &#39;entName&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;技术有限公司&#39;, &#39;entType&#39;: &#39;有限责任公司(自然人投资或控股的法人独资)&#39;, &#39;validityFrom&#39;: &#39;1896-08-14&#39;, &#39;domicile&#39;: &#39;深圳市龙岗区坂田&lt;em&gt;华为&lt;/em&gt;总部办公楼&#39;, &#39;entLogo&#39;: &#39;https://zhengxin-pub.cdn.bcebos.com/logopic/67e739bf0e47768f4a1f542daf3f7f42_fullsize.jpg&#39;, &#39;openStatus&#39;: &#39;开业&#39;, &#39;legalPerson&#39;: &#39;赵明路&#39;, &#39;tags&#39;: {&#39;laTaxer&#39;: &#39;&lt;span class=&#34;zx-ent-tag laTaxer&#34;&gt;A级纳税人(2020)&lt;/span&gt;&#39;}, &#39;logoWord&#39;: &#39;华为技术&#39;, &#39;titleName&#39;: &#39;华为技术有限公司&#39;, &#39;titleLegal&#39;: &#39;赵明路&#39;, &#39;titleDomicile&#39;: &#39;深圳市龙岗区坂田华为总部办公楼&#39;, &#39;levelAtaxer&#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], &#39;regCap&#39;: &#39;5,035,113.2万&#39;, &#39;scope&#39;: &#39;一般经营项目是:程控交换机、传输设备、数据通信设备、宽带多媒体设备、电源、无线通信设备、微电子产品、软件、系统集成工程、计算机及配套设备、终端设备及相关通信信息产品、数据中心机房基础设施及配套产品(含供配电、空调制冷设备、智能管理监控等)的开发、生产、销售、技术服务、工程安装、维修、咨询、代理、租赁;信息系统设计、集成、运行维护;集成电路设计、研发;统一通信及协作类产品,服务器及配套软硬件产品,存储设备及相关软件的研发、生产、销售;无线数据产品(不含限制项目)的研发、生产、销售;通信站点机房基础设施及通信配套设备(含通信站点、通信机房、通信电源、机柜、天线、通信线缆、配电、智能管理监控、锂电及储能系统等)的研发、生产、销售;能源科学技术研究及能源相关产品的研发、生产、销售;大数据产品、物联网及通信相关领域产品的研发、生产、销售;汽车零部件及智能系统的研发、生产、销售及服务;建筑工程;设计、制作、发布、代理各类广告;通信设备租赁(不含限制项目);培训服务;技术认证服务;信息咨询(不含限制项目);企业管理咨询(不含限制项目);进出口业务;国内商业、物资供销业业务(不含专营、专控、专卖商品);对外经济技术合作业务;房屋租赁业务(持许可经营证);以及其他法律法规不禁止的经营活动(依法须经批准的项目,经相关部门批准后方可开展经营活动)。,许可经营项目是:增值电信业务经营。&#39;, &#39;regNo&#39;: &#39;815503001822039217&#39;, &#39;hitReason&#39;: [{&#39;品牌项目&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;&#39;}, {&#39;商标名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;&#39;}, {&#39;企业名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;技术有限公司&#39;}, {&#39;网站名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;应用平台1&#39;}, {&#39;地址&#39;: &#39;深圳市龙岗区坂田&lt;em&gt;华为&lt;/em&gt;总部办公楼&#39;}], &#39;labels&#39;: {&#39;opening&#39;: {&#39;text&#39;: &#39;开业&#39;, &#39;style&#39;: &#39;blue&#39;, &#39;fontColor&#39;: &#39;#1EA930&#39;, &#39;bgColor&#39;: &#39;#EBF6EC&#39;}}, &#39;personTitle&#39;: &#39;法定代表人&#39;, &#39;personId&#39;: &#39;a9f275934f59110096757b656ba41382&#39;}
    
    {&#39;pid&#39;: &#39;28610144220343&#39;, &#39;entName&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;终端(深圳)有限公司&#39;, &#39;entType&#39;: &#39;有限责任公司(外商投资、非独资)&#39;, &#39;validityFrom&#39;: &#39;2003-12-25&#39;, &#39;domicile&#39;: &#39;深圳市龙岗区坂田&lt;em&gt;华为&lt;/em&gt;基地B区2号楼&#39;, &#39;entLogo&#39;: &#39;https://zhengxin-pub.cdn.bcebos.com/logopic/a638462a7a48ab79f84b7db2c0e64230_fullsize.jpg&#39;, &#39;openStatus&#39;: &#39;开业&#39;, &#39;legalPerson&#39;: &#39;赵明路&#39;, &#39;tags&#39;: {&#39;laTaxer&#39;: &#39;&lt;span class=&#34;zx-ent-tag laTaxer&#34;&gt;A级纳税人(2020)&lt;/span&gt;&#39;}, &#39;logoWord&#39;: &#39;华为终端&#39;, &#39;titleName&#39;: &#39;华为终端(深圳)有限公司&#39;, &#39;titleLegal&#39;: &#39;赵明路&#39;, &#39;titleDomicile&#39;: &#39;深圳市龙岗区坂田华为基地B区2号楼&#39;, &#39;levelAtaxer&#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], &#39;regCap&#39;: &#39;1,598,080.8万&#39;, &#39;scope&#39;: &#39;一般经营项目是：开发、生产、销售通信电子产品及配套产品，并提供技术咨询和售后服务。进出口业务（不含分销)。，许可经营项目是：&#39;, &#39;regNo&#39;: &#39;815503006447640305&#39;, &#39;hitReason&#39;: [{&#39;企业名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;终端(深圳)有限公司&#39;}, {&#39;网站名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;HARMONYOS网站&#39;}, {&#39;地址&#39;: &#39;深圳市龙岗区坂田&lt;em&gt;华为&lt;/em&gt;基地B区2号楼&#39;}], &#39;labels&#39;: {&#39;opening&#39;: {&#39;text&#39;: &#39;开业&#39;, &#39;style&#39;: &#39;blue&#39;, &#39;fontColor&#39;: &#39;#1EA930&#39;, &#39;bgColor&#39;: &#39;#EBF6EC&#39;}}, &#39;personTitle&#39;: &#39;法定代表人&#39;, &#39;personId&#39;: &#39;a9f275934f59110096757b656ba41382&#39;}
    
    {&#39;pid&#39;: &#39;30140456955334&#39;, &#39;entName&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;终端有限公司&#39;, &#39;entType&#39;: &#39;有限责任公司(外商投资企业法人独资)&#39;, &#39;validityFrom&#39;: &#39;2012-11-23&#39;, &#39;domicile&#39;: &#39;广东省东莞市松山湖园区新城路2号&#39;, &#39;entLogo&#39;: &#39;https://zhengxin-pub.cdn.bcebos.com/logopic/cc662a5d573b793e9c5b84031350ced0_fullsize.jpg&#39;, &#39;openStatus&#39;: &#39;开业&#39;, &#39;legalPerson&#39;: &#39;赵明路&#39;, &#39;tags&#39;: {&#39;laTaxer&#39;: &#39;&lt;span class=&#34;zx-ent-tag laTaxer&#34;&gt;A级纳税人(2020)&lt;/span&gt;&#39;}, &#39;logoWord&#39;: &#39;华为终端&#39;, &#39;titleName&#39;: &#39;华为终端有限公司&#39;, &#39;titleLegal&#39;: &#39;赵明路&#39;, &#39;titleDomicile&#39;: &#39;广东省东莞市松山湖园区新城路2号&#39;, &#39;levelAtaxer&#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], &#39;regCap&#39;: &#39;70,000.0万&#39;, &#39;scope&#39;: &#39;开发、生产、销售：通信及电子产品、计算机、卫星电视接收天线、高频头、数字卫星电视接收机及前述产品的配套产品，并提供技术咨询和售后服务；开发、生产、销售：医疗器械（第一类、第二类、第三类医疗器械），并提供技术咨询和售后服务；增值电信业务经营；佣金代理；货物或技术进出口（国家禁止或涉及行政审批的货物和技术进出口除外）。(依法须经批准的项目，经相关部门批准后方可开展经营活动)&#39;, &#39;regNo&#39;: &#39;815518000494355853&#39;, &#39;hitReason&#39;: [{&#39;企业名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;终端有限公司&#39;}], &#39;labels&#39;: {&#39;opening&#39;: {&#39;text&#39;: &#39;开业&#39;, &#39;style&#39;: &#39;blue&#39;, &#39;fontColor&#39;: &#39;#1EA930&#39;, &#39;bgColor&#39;: &#39;#EBF6EC&#39;}}, &#39;personTitle&#39;: &#39;法定代表人&#39;, &#39;personId&#39;: &#39;a9f275934f59110096757b656ba41382&#39;}
</code></pre></div><br>
<h2 id="完整爬虫">完整爬虫</h2>
<p>经过刚刚的几个步骤，我们现在只需要</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">query</span> <span class="o">=</span> <span class="s1">&#39;华为&#39;</span>  
<span class="n">max_pages</span> <span class="o">=</span> <span class="mi">10</span>   <span class="c1">#获取前10页的企业信息数据</span>

<span class="c1">#存储数据</span>
<span class="n">csvf</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;企业信息.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;titleName&#39;</span><span class="p">,</span> <span class="s1">&#39;titleDomicile&#39;</span><span class="p">,</span> <span class="s1">&#39;titleLegal&#39;</span><span class="p">,</span> <span class="s1">&#39;validityFrom&#39;</span><span class="p">,</span> <span class="s1">&#39;regCap&#39;</span><span class="p">,</span> <span class="s1">&#39;regNo&#39;</span><span class="p">,</span> <span class="s1">&#39;scope&#39;</span><span class="p">]</span>
<span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>

<span class="c1">#访问</span>
<span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_pages</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://aiqicha.baidu.com/s/advanceFilterAjax?q=</span><span class="si">{q}</span><span class="s1">&amp;t=&amp;p=</span><span class="si">{p}</span><span class="s1">&amp;s=10&amp;o=0&amp;f=%7B%7D&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">quote</span><span class="p">(</span><span class="n">query</span><span class="p">),</span> <span class="n">p</span><span class="o">=</span><span class="n">page</span><span class="p">)</span>

    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.55 Safari/537.36&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;https://aiqicha.baidu.com/s?q=</span><span class="si">{q}</span><span class="s1">&amp;t=0&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">quote</span><span class="p">(</span><span class="n">query</span><span class="p">))}</span>

    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
    
    <span class="c1">#解析数据</span>
    <span class="k">for</span> <span class="n">com</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;data&#39;</span><span class="p">][</span><span class="s1">&#39;resultList&#39;</span><span class="p">]:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">fieldname</span> <span class="ow">in</span> <span class="n">fieldnames</span><span class="p">:</span>
            <span class="n">data</span><span class="p">[</span><span class="n">fieldname</span><span class="p">]</span> <span class="o">=</span> <span class="n">com</span><span class="p">[</span><span class="n">fieldname</span><span class="p">]</span>
        <span class="c1">#写入csv</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        

<span class="n">csvf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><br>
<h2 id="运行结果">运行结果</h2>
<p>采集10页的爬虫运行结束后，尝试读取 <strong>企业信息.csv</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span><span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;企业信息.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/05-data.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>博客使用PaperMod主题改版</title>
      <link>https://textdata.cn/blog/papermod/</link>
      <pubDate>Tue, 07 Dec 2021 15:40:10 +0600</pubDate>
      
      <guid>/blog/papermod/</guid>
      <description>本文档不定期更新，碰到比较好的 Newsletter 就会加进来。</description>
      <content:encoded><![CDATA[<p>DaDengAndHisPython博客改版上线了</p>
<p>博客网站改版了，将之前黑暗风改为极简风，内容相对整洁，无广告，会不定期更新Python数据分析内容。</p>
<p>博客有主页、推文列表栏、搜索栏、标签栏、联系页等。</p>
<br>
<h2 id="欢迎页">欢迎页</h2>

<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>

<br>
<h2 id="推文列表页">推文列表页</h2>

<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>

<br>
<h2 id="搜索页">搜索页</h2>

<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>

<br>
<h2 id="标签页">标签页</h2>

<figure >
    
        <img src="img/4.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/5.png" width="800" />
    
    
</figure>

<br>
<p>点击左下角”<strong>阅读原文</strong>“进入博客网站</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>转载 | 周翔：作为法学研究方法的大数据技术</title>
      <link>https://textdata.cn/blog/big_data_method_in_law_research/</link>
      <pubDate>Tue, 07 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/big_data_method_in_law_research/</guid>
      <description>本文旨在回答大数据技术如何才能成为法学研究的方法，如何与法律实证研究、规范研究这两大传统的方法实现有效的互动。</description>
      <content:encoded><![CDATA[<blockquote>
<p>本文原载《法学家》2021年第6期。</p>
<p>作者 | 周翔（法学博士，浙江大学光华法学院特聘副研究员）</p>
<p>来源 |《法学家》2021年第6期“主题研讨二：跨学科法学研究的方法论检视”栏目。</p>
</blockquote>
<p>因篇幅较长，已略去原文注释。</p>
<h2 id="目录">目录</h2>
<ul>
<li>一、前大数据时代的法律实证研究</li>
<li>二、大数据技术运用的各个节点</li>
<li>三、大数据技术对于实证研究而言是一场接力</li>
<li>四、大数据技术对于规范研究而言是一种助力</li>
<li>结　语</li>
</ul>
<br>
<p>　　中国法学正在迎来“大数据”“人工智能”的研究热潮。“<strong>数字法学</strong>”“<strong>计算法学</strong>”等各类新词汇层出不穷，但研究者们却并不都是在同一内涵和外延下使用这些概念。因此，本文有必要在开篇之初先设置一套分类法，对既有的学术研究成果加以归类，从而明确本文在既有研究中的坐标位置。笔者将既有的相关研究分为如下四大类：</p>
<p>第一类称作“<strong>学科论</strong>”，此类研究看待技术的视角最广，其目标是希望厘清法学+数字技术的最大学科边界；<br>
第二类称作“<strong>对象论</strong>”，是把“大数据”“人工智能”等视为法律规制和法学研究的对象，此类文章占了当前本领域研究成果中的大多数；<br>
第三类称作“<strong>工程论</strong>”，这类研究关注到数字技术可以被引入执法、司法等各个场景当中，赋能法治的各环节；<br>
第四类才是“<strong>方法论</strong>”，是从学术研究方法的视角看待大数据技术，探讨其能为学术活动提供哪些新契机。本文的研究侧重于第四类，亦即集中讨论大数据分析技术作为学术活动的工具，能够给法学研究提供何种新方法。</p>
<p>　　本文旨在回答大数据技术如何才能成为法学研究的方法，如何与法律实证研究、规范研究这两大传统的方法实现有效的互动。关于此，左卫民在《迈向大数据法律研究》一文（以下简称为“左文”）中较早地提出了“<strong>大数据技术如何作为法学研究方法</strong>”这一命题，在“方法论”层面为将大数据技术引入法学研究当中起到了重要的推动作用。同时，笔者认为，以下方面仍值得进一步探讨：</p>
<p>第一，“左文”中提到“从研究范式看，大数据法律研究可能推动实证研究的跨越式发展，特别是机器学习方式的引入，会使法学研究从法教义学、社科法学和实证法律研究等范式转向数据科学式的法学研究”。“范式”一词在托马斯·库恩（Thomas Kuhn）那里，是指“一个成熟的科学共同体在某段时间内所认可的研究方法、问题领域和解题标准的源头活水”。形成一个范式，是任何一个学科在发展中达到成熟的标志。“数据科学式”的法学研究已经是一种成熟的范式了么？它与“左文”中提到的法教义学、社科法学等既有的法学研究范式之间又是什么样的关系？<br></p>
<p>第二，“左文”中提到“需要将小数据社科研究中已普遍运用和相对成熟的数据分析方法……运用到大数据分析中”。社会科学中开展定量研究，是以统计学原理为根基的，这和大数据技术联系密切的机器学习方法之间有何差异？法学研究又能够吸取大数据技术中的哪些优势？<br></p>
<p>第三，左文中还提到“一些大数据法律研究缺乏必要的问题意识，主要是描述式研究，沦为‘调查报告式’的数据展示”。这涉及的是大数据分析技术应用现状的问题。<br></p>
<p>上述三个方面，围绕大数据技术对法学研究的主要贡献展开，清晰地定位了大数据技术在既有的法学研究方法体系中的地位。</p>
<p>　　上述延伸和思考，一方面是对话，另一方面是形成本文研究的路径。本文的基本立足点在于：<strong>大数据分析技术如果对法学研究有影响的话，那么主要是使得法学更加社会科学化、更重视实证的方法、更习惯从大数据中探索法律世界的规律</strong>。这些贡献决定了大数据技术在法学研究方法体系中的位置，其既是对以统计学为基础的法律实证研究的接力，更是对以法教义学、立法论研究为核心的传统规范研究的助力。在这一基本立场之下，本文首先对前大数据时代的实证研究方法、研究对象作一番回顾；接着结合笔者担任大数据分析师的经历，针对技术细节作梳理；然后在这些基础之上，就如何实现大数据技术、定量的实证研究、规范的法教义学研究三者间的互动提出一套初步的方案；最后，鉴于当前学界在相关概念上存在较多的混用现象，本文就此作一些观点上的澄清。</p>
<br>
<h2 id="一前大数据时代的法律实证研究">一、前大数据时代的法律实证研究</h2>
<p>　　关于什么是实证研究，目前虽然尚无统一定论，但在“基于模型和数据的方法”这一点上则有比较明确的共识。包括法学在内的各个社会科学学科之所以都对定量方法感兴趣，是因为“定量的方法，乃一切科学进程的核心”。只要是跨越个案地探寻案件平均水平、共性特征、要素相关性的研究，都将被本文纳入前大数据时代法律实证研究的范畴。下文对此类法律实证研究的回顾和梳理，主要是从研究的方法、测量的工具、样本量的大小等三个维度展开。</p>
<h3 id="一以统计为主的研究方法">（一）以统计为主的研究方法</h3>
<p>　　从研究方法来看，既有的法律实证研究均奉统计学为同宗。通常认为，统计学的方法有描述性统计和相关性分析两大类。结合法学研究的特点，这里稍作更细致的划分。根据笔者的概括，以往的研究成果主要利用了如下三种方法。</p>
<p>　　方法一：<strong>多案例分析</strong>。对案例的运用，如果不是针对法条进行解释、对立法提出建议，那么在笔者看来即为一种实证研究的路径。例如陈杭平关于民事诉讼标的的研究，为案件类型化设定了一套分类标准，即诉讼标的的不同含义，纵轴根据不同学说见解区分为三个版本，横轴以诉讼标的的不同领域或场景为标准。从多个案例中挖掘某些规律性信息，是一种超越个案、试图通过案件类型化获得研究结论的方法尝试。</p>
<p>　　方法二：<strong>描述性统计</strong>。前述的多案例分析，还很难称得上是严格意义上的实证分析。左卫民的一系列文章有力地推动了法律实证研究向前发展，其主要采用的便是描述性统计方法。例如，他关于审判委员会的研究，统计了某地区的三级法院审判委员会委员的审判经验与学历背景，并将讨论的议题细化到宏观指导议题和个案议题，分别进行统计和分析；再比如，他另一份关于中国刑事法律援助的研究，通过调研和考察某省的三家法院，统计了各类型辩护的人数和占比，并由此回答“究竟应当在多大范围内推行并构建当代中国的法律援助制度”这一问题。</p>
<p>　　方法三：<strong>相关性分析</strong>。白建军等人的研究则在描述性统计之基础上，迈向了相关性分析这一相对复杂的层次。相关性研究也被称为推论统计，是将统计学手法与概率理论相融合，对“‘无法整体把握的大的对象’或‘还未发生而未来会发生的事情’进行推测”。白建军等人开始关注引起某一现象的原因，试图建立自变量和因变量之间统计学意义上的相关性，所采用的回归模型主要为多元线性回归、logistics回归等常见模型。例如，白建军迄今为止在中国知网上下载量最高的一篇论文，是通过相关系数、多元线性回归来研究犯罪率的社会成因；又如，李本森关于速裁程序的研究，则以诉讼效率、量刑均衡和诉讼权利作为其关心的因变量，采用的是多元线性回归模型。</p>
<p>　　在线性回归、logistics回归这两大常用的回归模型之基础上，法律实证研究方法也根据议题之需推陈出新。首先表现为统计方法趋于高级，例如白建军在其一贯的相关性分析之基础上，对无法观察的变量作了科学处理，将中国民众的刑法偏好这一因变量，拆解为犯罪圈大小、刑罚轻重、罪刑均衡程度等三个可通过问卷调查测量的因子，以打分取值的形式获得该变量的数值；其次是结果呈现方法上的创新，例如单勇关于盗窃罪的回归分析结果，用GIS作图的方法实现可视化，选取建筑物、停车场等10类空间因素为自变量，用于说明因变量和空间变量的地理联系；最后是体现在用于分析的软件工具之更新上，过去的法律实证研究以使用SPSS软件为多，而近来的研究很多提及使用了Stata、R等工具。当然，使用更高级的软件进行分析，其效果未必就一定更好，但上述变化至少标志着学者们在工具利用方面的水平提升，且有些回归模型是初阶工具所无法胜任的。</p>
<br>
<h3 id="二多元测量工具并存">（二）多元测量工具并存</h3>
<p>　　测量工具是指获得数据的方法。数据搜集在统计学中是重要的一环，“所有统计数据追踪其初始来源，都是来自调查或实验”。统计学上根据是否为直接获得第一手数据，区分直接来源和间接来源。法学实证研究多以一手的直接来源为主，主要的测量工具包括如下几种。</p>
<p>　　工具一：<strong>问卷调查</strong>。这种测量工具与传统的社会科学方法保持一致，通过设置问题、受调查者回答的方式收集受访者的信息。此种方法在获取受访者主观态度方面效果明显，为学界所常用。例如，程金华在研究过程中为了解检察人员针对检察人员分类改革的认识而发放问卷；胡铭关于司法公信力的研究，通过向社会公众和司法官分别发放问卷，比较和审视“对于影响司法公信力的要素的认知与评判”。</p>
<p>　　工具二：<strong>模拟实验</strong>。“实验大多是对自然现象而言的”，但在近年来的法学研究中也时常出现。司法裁判一般不具有可再现性，同一个案件在真实场景下只可能出现一次。模拟实验是一种对司法裁判过程的模拟再现，借此可发现一些影响裁判结果的变量。目前中国法学界的模拟实验主要是对一些经典案例裁判过程的复盘，以验证某些观点。例如李学尧等人关于案卷材料阅读流畅度与裁判尺度之关系的研究，通过问卷字体大小、是否斜体、是否加重、行间距以及案件数量的变化来操纵阅读流畅度的变化。</p>
<p>　　工具三：<strong>文本摘录</strong>。法律中的文本，其典型形态为裁判文书。在裁判文书大量公开上网后，有人认为数据法学的春天即将到来。的确，裁判文书是记录诉讼过程最终的、有法律效力的、体系最完整的文本。对裁判文书的利用，比如文姬关于信用卡诈骗罪的研究当中有很多维度的信息挖掘，包括审级、行为人出生年等16个变量。文本的种类近年来也出现不少创新，比如习超等人关于证券监管的研究采用的是对上市公司执法事件的披露信息。</p>
<p>　　工具四：<strong>实地/田野调查</strong>。倘若只是单纯采取个案式的访谈记录，则在方法论上一般将之归入定性研究的范畴。但如果是在田野调查中对多个样本进行观察或访谈，采取结构化的方式收集数据，最终对数据进行跨越个案的量化分析，那么也可以被视为实证研究的测量工具之一。此种方式在国内法学研究中不乏实例，比如一份关于当事人法律意识的研究，所主要利用的素材就是在某法院传达室对一百多位当事人进行访谈所收集的数据；再比如左卫民在研究基层法院的财政制度、法官的工作时间分配等问题时，课题组前往实地调研、观察记录收集数据资料。</p>
<p>　　除了采用上述工具之一，实证研究还可以多种测量工具结合、定量和定性方法混用。比如胡铭关于庭审实质化的研究就不仅利用了判决文书，且还通过观摩庭审直播并记录的方式收集数据。</p>
<br>
<h3 id="三万级以下的样本量">（三）万级以下的样本量</h3>
<p>　　实证研究的论文中约定俗成要报告样本量，而之所以特别指出研究所用的样本量大小，是由于样本量直接关系到根据小样本得出的结论能否推及至更大的范围，因此抽样是统计学中很重要的概念。建立一个好样本的关键，是尽量选择最符合总体的样本，如果样本具有代表性，那么表明样本与总体有十分相似的特性，进而可以通过样本预测出总体具有哪种规律。</p>
<p>　　法律实证研究中的样本量过去以百级、千级为主，比如文姬关于信用卡诈骗罪的研究所利用的裁判文书样本有2103份，习超等人对证券监管“旋转门”的研究则采用了7103个监管事件作为样本。样本量大小是个相对的概念，还要考虑“全体”的规模大小。当我们确定研究的问题后，从理论上讲“全体”的范围就固定了。若以裁判文书为测量工具，则有三个层次的案件范围，依次分别是客观真实发生的案件总数、裁判文书网上公开的案件数、用于实际研究的案件样本数。前大数据时代的法律实证研究，是在公开的裁判文书范围内选取一定的样本进行分析，距公开的案件“全体”和真实客观的案件“全体”相去甚远，正因如此，不少研究受到样本代表性不足的质疑。</p>
<p>　　除了抽样和样本的代表性问题外，前述提及的那些研究基本没有交待如何实现样本的数据结构化。根据笔者自身的数据分析经验，以传统方式处理样本耗时巨大。如果以阅读裁判文书并摘取的形式处理样本，那么一天工作8小时也只能阅读20—40份裁判文书，如此来算，处理千量级的裁判文书样本就得花费数月时间。如果再安排专人抽查数据录入的质量，那么工时还得另计。</p>
<br>
<h3 id="四留待提升的不足">（四）留待提升的不足</h3>
<p>　　在研究方法上，相关性分析方法之后难有新的突破；在分析工具上，研究者虽试图推陈出新，但总体变化不大。以构建回归模型做研究为例，中国法学界目前用过的回归算法种类屈指可数。某些研究虽然其方法有一定的创新，比如采用决策树的方法，但又和机器学习的决策树算法相去较远。另一个问题在于分析软件，小样本时代没有使用分析软件的明显障碍，但在大样本时代则要考虑借助的分析工具是否恰当，能否高效运行。上述两个方面，大数据技术都可能给其带来变革。</p>
<p>　　测量工具上，以往较强依赖于社会资源的协调能力。中国法学界当前使用的测量工具中，问卷调查、模拟实验的应用较为普遍，而上述二法的共同局限在于严重依赖研究者的社会资源协调能力。很多研究并不避讳利用了作者的挂职身份、承担横向课题的机会、本省司法资源的便利条件等。就数据获取而言，即使只是选择几个投放点，也要付出很大的成本，且若没有较大经费支持则难以做到。上述列举的那些研究成果，因此往往是知名学者的作品。这也造就了一个怪圈：是先成名后做实证研究，还是因实证研究而成名？而在大数据时代，研究者将在一定程度上不再依靠外部资源的协调能力。</p>
<p>　　以往样本量太小，使得据其发现的规律的代表性不足。前文已经提及，样本量关乎结论的普遍性，统计分析的根本目标在于“推论”。样本量越小，对抽样的随机性要求就越高，而抽样始终是一个难题。造成抽样偏差的成因很复杂，比如抽样空间条目不齐全、抽样单位不正确等，无法穷举。如何克服抽样的难题？换个角度试想一下，研究的样本如果就是公开的“全体”，那么抽样的重要性将被极大淡化，而基于公开的全体案例作分析，在大数据技术的赋能下是能够实现的。</p>
<br>
<h2 id="二大数据技术运用的各个节点">二、大数据技术运用的各个节点</h2>
<p>　　从实证研究的过程来看，在选择议题、提出假设和设计变量等步骤中，数据的收集和分析是大数据技术最相关的两个环节。其中，数据的收集又包括语料的获取、语料转为数据和数据清洗等步骤。本文认为，大数据分析技术正是借助数据的收集和分析这两点，助力法律实证研究向更高阶段发展。从已有大数据分析的实践经验来看，可大致分为以下几个步骤。</p>
<h3 id="一语料的获取">（一）语料的获取</h3>
<p>　　语料获取是应用大数据技术的第一个环节。凡是对立法活动、司法实践有所记录的载体，都可作为实证研究的原始语料。当然，文本仍是当前法律大数据分析主要的语料类型，大数据技术目前还比较难以有效处理图片、音视频等数据。所幸的是，法律文书本来就是记录法律活动最重要的、也是表达相对准确的语言形式。</p>
<p>　　当前的语料获取问题，应重点聚焦于如何便利地获取法律类文书。研究者作为个体要想获得供研究之用的文本，除逐一复制或下载外，还有两条路径值得重视：一是采取网络爬虫的方式，从数据源自动爬取，业内有句话叫作“可见即可得”，其意思是只要有该网站的访问权限，那么便可获得该数据，包括一般性的网页、API资源、文件资源和媒体资源；二是与拥有法律文书数据的公司进行合作，后者一般掌握较为完整的法律文书库。</p>
<p>　　网络上的其他数据资源也不可被忽视。在传统的法学研究中，我们便已看到许多研究者用到法律年鉴、地方志等信息，而此类信息如今已基本实现无纸化、网络化。我们可从以下几个渠道收集与自己研究有关的语料：一是国家及地方各公立机构的官方网站，比如图书馆、档案馆、财政局等行政事业单位；二是各行业的商业机构网站，比如上市公司财务报表的披露网站、各行业的商业情报网站等；三是一些人气活跃的社区论坛，比如在司法公信力、媒体和司法之关系等研究议题中，我们关心的案件舆情就在论坛社区中有丰富的表达。网络资源可有效弥补裁判文书这一测量工具的局限性，因为法治事件的真实场景变量复杂，法律文书只能反映其中的一小部分。</p>
<br>
<h3 id="二语料转为数据">（二）语料转为数据</h3>
<p>　　传统的实证研究是统计学思维，处理的是阿拉伯数字。这一点在大数据的语境下没有本质变化，即机器学习仍然难以根据文本直接构建模型，数据分析的对象仍是结构化数据。遗憾的是，法律领域的语料主要是自然语言，以数字形式呈现、直接可用的信息少之又少。因此，在获取与我们研究议题相关的文本语料后，还将面临如何将语料转为结构化数据的问题。前述提及的那些实证研究成果也用到文本，并主要采取人工摘录的方式进行处理，而大数据获取技术中的文本挖掘技术，通过计算机就可实现数据结构化。</p>
<p>　　将语料转为数据的过程，本质上是将自然语言转化为机器语言。处理自然语言的工具，大致可分为基于概率和基于规则两类。前者是通过人工标注一定的语料，再由机器模型识别剩余部分的语料，得到的是一个结果的分布概率；后者的典型代表是正则表达式，因其结果更为准确，故而成为当前适用广泛的提取方法。学术研究要求较高的准确性，因此基于规则的方法更为现实可取。正则表达式，在技术书中被定义为“一门袖珍编程语言的通用模式表示法，赋予使用者描述和分析文本的能力”，这里也可将其通俗地理解为高级版的关键词检索。正则表达式可将我们关心的、希望提取的某一要素，通过计算机能理解的方式表达出来。不过其具有的缺陷是，如果编写者未能预见同一意思下全部的汉语表达方式，那么该正则表达式也将无法识别出全部包含该意思的文书。</p>
<p>　　语言表达方式虽然具有多样性，但也并非无穷无尽，常见的文字表达类型是可以由正则表达式囊括的。实践中的通常做法为：先人工阅读一部分文书，枚举语言表述的类型→通过正则表达出每种类型→正则遍历文书，筛选出被命中的文书→再次阅读部分未经匹配的文书→优化正则表达式→再次遍历剩余未被命中的文书。多次循环后，正则表达式将会得到很大的改进，信息提取的准确性也会随之提高。数据的获取任务至此完成，这也是大数据技术相较于传统实证研究在技术上的巨大变革之处，即数据的获取不再高度依赖于外部资源的多寡，只要研究者掌握了一定的编程能力，那么就可以从最大的数据资源库即互联网中获取自己想要的各类数据。</p>
<br>
<h3 id="三数据清洗">（三）数据清洗</h3>
<p>　　数据清洗面临两种情形，一种是从文本到数据的过程中存在信息的遗漏，另一种是有些文书信息虽然被提取了出来，但存在错别字或其他不当之处。处理信息残缺的方法，至少有以下几种：第一种是根据信息有残缺的文书编号，追溯至该份文书，人工阅读发现原因并修正提取的方法。这和上文提及的不断优化正则、扩大匹配的范围的做法很接近。第二种是统计学中处理残缺值的传统方法，比如用平均值替代、剔除该样本等。第三种是借助Excel表格中的工具、pandas等第三方库对数据逐一进行修正，通过人工的个别修正使数据回归正常。例如裁判文书中存在诸多错别字、语病等错误需要清洗，笔者曾遇到过某一罪名在裁判文书中，有十余种错误的文字表述、八种不同的“零”写法，这些均属于若无人工预判则机器便无法自动识别的情形。</p>
<p>　　数据清洗，主要面对的是如何处理自然语言中不同词汇的相同意思（同义问题），以及一个词汇在不同背景中有不同的意思（多义问题）。在数据清洗的实践中，可以发现存在如下几种规律：（1）词汇类型有限的数据项，需要清洗的脏数据比较少。例如提取裁判文书中的法院审级，一般文书落款中有“中级”“高级”“最高”等关键词，正则很容易匹配成功；而当鉴别机构的名称时，由于全国各地的命名方式不一，便会出现很多数据空缺需要填补的问题。（2）数据的清洗和人工的投入量基本成正比。无论是用人工标签+机器学习的方法，还是用正则表达式提取，都需要人工阅读并发现数据错误，添加惩罚项或修改正则来减少脏数据。（3）数据清洗要适可而止，因为数据清洗需要耗费大量的人工成本。一些简单且明显的错误，比如审判员人数提取为“2人”，能够及时返查并纠正，但人工清洗全部的脏数据是不可能的。现阶段在计算机还没有能力自查和纠错的情况下，学术共同体对待数据获取环节的准确性只能给予更多的包容。</p>
<br>
<h3 id="四数据分析">（四）数据分析</h3>
<p>　　若要从数据中产生规律性的知识，则还要依赖于数据分析的工具。以统计学思维看待数据分析的方法，主要有描述性分析和相关性分析两大类。</p>
<p>　　大数据时代的分析环节，仍有运用描述性统计的必要。大数据时代虽然样本量呈几何式增长，但试图把握司法实践之一般规律的需求并未改变。而描述性分析是最有利于把握案件整体情况、聚焦重点案件类型的方法。</p>
<p>　　关于相关性分析，大数据技术主要借助于机器学习，“根据训练数据是否拥有标记信息，学习任务可大致划分为两大类：‘监督学习’和‘无监督学习’”。有监督的机器学习，其建模方法为研究者提供了一种新思路，即把样本一分为二，区分训练集和测试集，用训练集拟合参数，用测试集评估数据模型的准确性。机器学习与统计学中的回归建模方法之间最大的一点差异，在于检验模型参数的可靠性上，机器学习采用交叉检验的方法，而统计学上则主要采用假设检验的方法，其典型者如t检验。无监督的机器学习事前不作标记，通过对无标记训练样本的学习，来揭示数据的内在性质及规律。以统计学视角来看，即事前不设置因变量。通过该项技术，可以从中探索我们所关心的研究议题，从而确定因变量。</p>
<p>　　用大数据的机器学习方法建模，最好采取Python语言编写程序。该语言可调用各类第三方库，statsmodels、scikit-learn等第三方库中已内置有大部分的常用算法，调用接口即可满足现有的研究需要。在大数据时代，获取的数据样本量将轻松突破万级，例如研究某些社会高度关注的案件的网络舆情，从微博、论坛中获取的评论数甚至可以很轻松地突破百万条。自己编写程序做大数据分析，在面对大样本时，能更好地满足个性化的研究需求。</p>
<br>
<h3 id="五前述流程的局限">（五）前述流程的局限</h3>
<p>　　<strong>大数据技术并非没有局限性，它是一把双刃剑</strong>。“技术不是敌人，我们的敌人是寄居在技术里的浪漫又革命的‘解决问题兽’”。因此，人们要保持独立思考的能力，用批判性的眼光去接受、采用技术。在看待大数据技术在法学研究中的应用前景时，同样应重视可能存在的一些局限性。</p>
<p>　　<strong>第一个局限在于，大数据技术更难以关照到个案的细节之处</strong>。这也是左文中提到的大数据时代的一个特点，即样本量变大后，做不到人工查看每个样本。此为一个明显的缺陷。大数据分析所反映的只是数据间的相关性，但要解释此种相关性，还要依靠外部其他角度的素材。当回答为什么出现数据间存在显著相关性这一问题时，特别离不开对一些典型个案作具体的剖析。如前所述，大数据技术不再要求人工逐一阅读，便可将文本信息转为数据信息，但是小样本时代，逐一阅读案例，恰恰是发现有价值细节、启发研究灵感的历程。因此，大数据时代的法学研究，在用数据说话的同时，仍然少不了要深入到对典型个案的阅读中。</p>
<p>　　<strong>第二个局限在于，计算机技术的使用门槛较高，许多研究者面临着计算机技术有关知识匮乏的挑战</strong>。首先，在数据获取上，研究者最好能够掌握一些网络爬虫的技巧。从笔者的实战经验来看，爬取一般网站论坛上的数据相对容易，但爬取微博、微信公众号等数据就比较困难，这是因为后者设置了很多反爬虫的措施。再以法学研究常用的裁判文书为例，中国裁判文书网为确保正常访问，采取了一系列的加密措施，而这意味着研究者根本无法一劳永逸地解决数据获取的问题。其次，当前在研究成果发表时，法学期刊通常并不要求同步公开研究所依据的数据样本，也就是说，同行无法获知所采集的数据库详情、数据清洗的程度等。这是大数据法学研究早期阶段的特点。在大数据法学研究的成熟阶段，各研究者可能反复使用同一批大数据，并有一系列量化的模型衡量指标。</p>
<p>　　<strong>第三个局限在于，机器学习所用的部分算法，在变量参数和影响路径的可解释性上，不如那些简单的统计学算法</strong>。这部分是由于一些自身原理所造成的，比如机器学习中可能嵌套多层级函数，其目的是提高模型的拟合度。以神经网络的一般模型为例，有（d+l+1）*q+l个参数需确定，d、l、q分别代表输入、输出、隐层的神经元个数，神经网络的学习过程，就是根据训练数据来调整神经元之间的连接权，即参数值。这还只是一个隐层的情形，“容量”越大的深度学习，参数就越复杂，对法学研究而言的可解释性也越弱。如果认为法律实证研究主要是社会科学意义上的追求现象间相关性的分析，那么越是过程复杂的机器学习算法，越不能透过模型发现变量间的关系。</p>
<p>　　综上，笔者对待大数据技术的整体态度是，获取更大规模、更多类型的数据，对外部资源的依赖程度降低，是其最主要的贡献点，同时也要警惕研究过程中脱离个案细节、技术门槛提高、复杂模型的可解释性弱等风险。有效化解上述风险的策略包括：在跨越技术门槛上，可考虑借鉴其他学科团队式研究的模式，吸纳技术人员参与，改变过去一些法学期刊所认为的合署论文便有“搭便车”嫌疑的前见；在克服脱离个案细节这一问题上，则可以多采取混合研究的方法，即定性的方法和定量的方法相结合，实证研究和规范研究相结合；在数据分析时的算法选择上，则应尽可能选择一些原理简单、可解释性强的算法。</p>
<br>
<h2 id="三大数据技术对于实证研究而言是一场接力">三、大数据技术对于实证研究而言是一场接力</h2>
<p>　　大数据技术对于实证研究而言有一种接力的价值，两者的共性大于差异。大数据技术主要应定位于加强实证研究的某些环节，但并不改变实证研究基本的方法论框架。本文认为，大数据技术的接力作用，主要体现为：（1）降低了数据获取的难度，作为本文第一节中介绍过的那五种测量工具之外单独的一种数据获取途径，以网络爬虫、文本挖掘为代表的大数据技术，在获取数据上具有时间成本和经济成本更为低廉的优势。（2）加强了描述性统计的能力，适合探索性的量化研究。若对实证研究作描述性分析和相关性分析的二分，则大数据技术更擅长概览式地描述研究对象。（3）拓展了可量化研究的议题，使得某些议题的论证更加充分和有说服力。</p>
<h3 id="一拓新数据获取的重要渠道">（一）拓新数据获取的重要渠道</h3>
<p>　　任何定量研究均离不开信度可靠、效度可行的数据来源。<strong>对大样本的追求，在统计学上称为“一致性”，费希尔（Stanley Fischer）用数学公式说明了“你得到的数据越多，你计算出的统计量越有可能接近参数真值”</strong>。在本文前一节的大数据技术应用详解中，所提及的第一步便是大数据的获取技术，若能掌握大数据的获取技术，或者吸纳有相关技术能力的合作者参与，则将大大拓展数据获取的渠道，互联网将成为一种新的测量工具。本节结合一些国内外较新的关于应用大数据技术的文献，深入探讨互联网这一大数据的来源，以此说明大数据技术在获取数据时的优势。</p>
<p>　　首先，把互联网视为数据获取的来源时，主要是将互联网视为一个“知识库”。互联网沉淀了人类活动的大量数据，其中一些是与法律有关的行为数据，例如裁判文书是对司法过程和结果的一种记录，网友针对某一热点案件的留言是司法民意的表达。这些数据的特点是它们的产生最初并非为了供研究之用，故而只能提供有限的数据项，研究者需迁就网络数据可用的数据维度进行研究设计。利用裁判文书开展大数据分析就十分典型，裁判文书的数据维度并不是为研究所设计的，因此在选题时，就要充分考虑裁判文书中所体现的信息是否足够用于回答该问题、有无其他数据源可作补充。</p>
<p>　　其次，进一步拓宽数据获取的思路，还可以把互联网视为形成数据的“实验室”和“协作平台”。大数据技术可以把互联网作为提问数据和实验数据的来源，即前述实证研究测量工具中的实验方法、问卷和田野等方法也可以在互联网中大规模使用。通过网络发送调查问卷，在学术界目前已经有一些成功的研究案例。例如，在一项针对累犯成因机制的研究中，通过给刑满释放的研究对象发放智能手机，大数据采集平台每天向研究对象发送问卷收集数据，并与定位数据、短信数据等数据源相结合，分析再犯罪的成因机制。借助互联网还可以开展随机对照实验，例如一项在二手交易网络商城开展的实验，通过在商品详情描述中改变卖家手持商品的手背肤色、手臂是否有文身、出价和商品介绍的质量等变量，分析这些变量与商品成交价的相关性，从而实证分析商品交易中存在的种族歧视问题。甚至还可以设计一个研究任务分包的网站，将数据的收集、标注等任务进行拆解，让更多的人参与到结构化数据库的建设中来。例如在一份关于国外政党之竞选政策立场的研究文献中，研究者事先将政党宣言作出类型化的定义，然后在网站上分包，最终从1500名工人处收集到20万条的分类数据，而分类的结果经过事后的验证，与专家分类的结果高度吻合。此类对文本、图片的信息采集和分类工作，如果能够分拆为不需要大量专业训练且答案较明确的任务，那么通过互联网的方式，就可以实现低成本的大数据采集和处理。</p>
<br>
<h3 id="二提高实证研究的描述分析能力">（二）提高实证研究的描述分析能力</h3>
<p>　　社会科学所立足的成熟的研究范式，目前仍是提出假设、并用定量的统计方法加以验证的过程，这一套研究的基本方法在引入大数据技术后，并没有发生实质性改变。在数据分析的描述性和相关性之二分法中，大数据分析技术主要加强的是描述性部分，相关性分析仍主要沿用实证研究中倚赖的统计学算法。要想用好大数据分析技术，还应注意区分商业利用和学术研究的不同侧重点，商业领域的分析技术，不一定都能直接迁移至法学研究中来。</p>
<p>　　首先，大数据分析技术主要提高了研究对象的整体描述能力。实证研究中的描述性分析，针对研究对象设计变量，统计平均值、方差等。除这些外，大数据分析技术还有其他可供选择的方法，比如通过词频的计算提炼文本的关键词、通过情感分析的技术反映某些文本的正负情感及强度、通过文本摘要的技术浓缩海量文本的内容，分析的结果可以用词云、动图等多样的可视化方法来呈现。这些技术与实证分析中的描述性分析非常接近，只是起到丰富描述分析工具箱的作用。</p>
<p>　　其次，现有以统计学为基础的相关性分析，所用的算法仍将保持主流地位。统计学中最基本的线性回归、对数回归等模型，仍是当前最为成熟、较适合社会科学研究使用的方法。这并非法律实证研究特定阶段的现象，例如对美国在政治学、社会学领域最权威的6本期刊于2001—2010年间发表的实证研究论文所采用的方法进行统计后发现，最小二乘法（OLS）和logit回归的方法之和占比最高，达到六成。作为大数据分析的主要技术，机器学习在吸收统计学的基本算法后，通过模型的嵌套演变出神经网络、深度学习等高级算法，同时损失了算法的可解释性。而可解释性的本质是输入变量（即自变量）的参数、影响输出变量（即因变量）的路径透明可见，机器学习中的很多算法，在这方面其实不如过去实证研究中常用的统计学算法。</p>
<p>　　最后，应清醒地认识到，某些大数据分析技术之所以难以引入到实证研究中，是因为大数据技术的发展动力来自商业市场的需求，其初衷不是为学术研究而开发的。因此，要区别大数据技术在工程领域和在学术领域的使用差别。工程领域要求大数据模型有较强的结果预测能力，不太重视输入变量与输出结果间发生联系的路径。这使得技术开发的着力点在于如何能够准确预测未来，例如市场中多款量刑辅助的产品提供给办案人员的，是一个案件未来可能判处的刑期结果，而不是提供充分的说理。而学术研究更关心法律现象背后的社会成因机制，希望揭示出现象背后的原因。上述二者虽有共同点（进行精准预测的前提，也要有一个基于历史案件的模型），但考核模型表现优劣的标准是极为不同的。知晓此种差异后，研究者才能对当前眼花缭乱的大数据分析技术有所甄别，优先选择那些具有较好可解释性的机器学习算法。</p>
<br>
<h3 id="三加强某些议题的论证力度">（三）加强某些议题的论证力度</h3>
<p>　　数据源和样本量的扩大，分析能力的增强，使得某些研究议题有机会变换新的角度、充实更有力的论据、得出更有说服力的结论。大数据技术作为一种方法并不直接产生新议题，但是能够增强旧有议题的论证能力，为原先难以量化研究的重要议题开启新的篇章。本节选取“法治中国”这一研究议题，尝试构想一个引入大数据技术后的学术发展新空间。</p>
<p>　　“法治中国”在近年来备受关注，是我国法学研究中的一个重要议题。一般认为，“‘法治中国’的内涵比‘法治国家’更加丰富、更加深刻、更具中国特色”，关于“法治中国”的主体、客体、竞争力等，都是“法治中国”之科学含义研究中的重要子课题。“法治中国”同时是一个有待进一步发展的议题，自党的十八届四中全会提出该口号后，关于“法治中国”的核心价值和精神元素是什么、具体的模式如何这些问题，虽然已经有一些研究成果，但还要继续丰富其内涵。在一些知名法学家的带领下，亟待更多法学青年学者的跟进，特别是作为一个与我国法治实践紧密联系的议题，“法治中国”应首先从国家、社会的各个实践侧面做出事实的归纳。</p>
<p>　　大数据技术可以在归纳中国法治实践中发挥大作用。具体可勾连几个看似不相关但实则联系密切的议题。一是近年来强调“中国问题”的学术反思。2011年举办的“中国法学研究之转型”研讨会上，诸多学者曾呼吁法学研究范式应该转变，认为“当前对中国特有的问题关注不够，缺乏中国问题意识”。具体而言，中国问题是在中国的政治建构、区域发展的极不平衡、社会在转型期中的急剧变化、社会治理资源的多元化等背景下形成的。本文认为，地域间、时间跨度中的中国法治实践差异，可通过大数据的时间序列、地理坐标图等各种形式予以呈现，法学研究要逐渐习惯于用数字化的方法发现并解释中国法治实践中的问题。二是与大数据技术直接关联的“法治评估”，这是关于立法、执法、司法等各领域的评估，其最大特色在于将指标构建技术和统计方法作为工具。笔者认为法治评估的相关研究，主要不在于实现地区间法治状况的可比性（这的确是提出法治评估的原因之一），而是旨在强调各国治理结构的差别，总结不同国家间某问题的不同法治方案。在西方学界过往的法治评估中，“所有实行西方政治制度的国家的得分必定高”。法治中国的研究要想有说服力地破除上述迷局，既要讲道理，更要摆事实，特别是利用好大数据所呈现的事实。</p>
<br>
<h2 id="四大数据技术对于规范研究而言是一种助力">四、大数据技术对于规范研究而言是一种助力</h2>
<p>　　法学实证研究和传统的规范研究间如何衔接和对话，是一个困扰研究者和期刊编辑的共同问题。有期刊编辑抱怨说，很多看似眼花缭乱的定量研究，最终得出的结论却不那么新奇，其言外之意是不需如此费劲，读者也早已知道这样的结论。还有学者坦言，实证研究和传统的规范研究间缺少对话，存在“平行线”难题，法学实证研究存在“叫好不叫座”的现象，即便高质量的实证研究，其被引用率也不高。数字法学时代到来后，上述问题能否有所改善？笔者以为，与其勉为其难地与规范研究直接对话，不如以“提供给规范研究一定启示”的姿态，定位大数据技术的贡献。此种贡献主要是便于研究者更自主、低成本地了解法律实践的运行状况，它是一种助力的功能。</p>
<h3 id="一拓宽了解释论的问题边界">（一）拓宽了解释论的问题边界</h3>
<p>　　法律规范之所以需要解释，其原因在于“制定法的真实含义不只是隐藏在法条文字中，而且隐藏在具体的生活事实中”，生活事实的不断变化，使得法条一直有予以解释的必要性。换言之，这是一种来自司法实践中法条适用的困难所延伸出来的需求。但是，法教义学的规范研究，其传统重镇在高校，科研人员的作业模式与司法实践间隔较远，真正熟悉办案一线的学者并不多。这使得他们在发现哪个法条的哪个关键词存在司法适用困难、故而具有研究必要性上颇费周折。而哪怕是具有司法实践经验的研究者，在这个问题上的表现往往也好不到哪里去，因为他们的经验只是来自直接或间接经办过的案件，是一种主观的、个案式的感受。司法大数据的引入，有望改变上述局面。开展规范研究的学者可通过多个地区的法律案件文书，把文本向数据转换、提取文本背后的有用信息，进而全面获得实践中的裁判观点。波斯纳（Richard A. Posner）对此有过恰当的评论，他认为“法律决定和教义全都由事实驱动，而不是由理论驱动”。</p>
<p>　　首先，法律大数据所挖掘的信息，为规范研究提供了问题意识，为解释设定了起点。规范之所以需要解释，是因为存在疑义。此种疑义并非凭空而来，而是在法律的具体适用中凸显。在过去，此种凸显主要依靠典型案例的被发现而引起学术界的重视。如今，大数据技术的兴起，缩短了该种疑义被发现的进程，并克服了主观选择案例的片面性。这是因为，研究者可不再依赖于司法机关筛选出的指导案例，或者主观随意地挑选案件，而是通过公开的裁判文书进行全样本的大数据分析，挖掘出研究者所关心的司法实践的某一侧面情况。在评价中国的法教义学之缺陷时，有学者指责在中国看不到“法学与司法之间的深入对话”，进而强调中国学者应当虚心、耐心和诚心地向中国法官学习。面对面交流自然是学习的方式之一，但其成本太高。更有效的方式是跨越个案地、基于海量样本地分析法官所写的裁判文书（裁判文书是法官裁判观点的浓缩精华）。</p>
<p>　　其次，大数据方法赋能后的实证研究，为研究者提供了法律概念的社会语境。解释的最终目标是达致“裁定之案件获得公平的处理”，这种公平处理首先要具体化为探寻某一规则的立法目的。目的解释在某些学者眼里是指“探求法律在今日法秩序的标准意义”。那么，今日法秩序的理想图景又从何获知？学术研究者、法律适用者面临探寻这一出处的难题。以往的学理解释，一般是从部门法的基本价值出发解释法条，例如刑法的解释总是要考虑罪刑法定、罪刑均衡、法益保护、保障人权等，又如诉讼法中强调程序参与、诉讼效率、纠纷解决等。在学理解释者看来，这些基本就是衡量解释是否恰当的主要标准。而在具体法律适用者（例如面临个案裁判需要的法官）那里，还可能有其他社会、经济甚至政治的因素要加以考量。大数据的实证分析技术，为解释这些“关键词”提供了上述维度的信息参考，例如可利用大数据分析某个条款在不同案件背景下的不同解释结论，这些背景包括年代、当地的社会经济背景、原被告双方的身份等。以往的实证研究当中并非没有此类尝试，但毫无疑问，在大样本中分析裁判观点的社会语境，所得出的结论将更具有普适性。</p>
<p>　　当然，法教义学同样也给大数据分析以有价值的课题，规范研究者可以将其感兴趣的问题传递给法律大数据的分析者。如此一来，“这些学科的研究对象和知识兴趣就受到教义学的影响了，或者，也会引发交叉学科的研究课题的产生”。</p>
<br>
<h3 id="二为立法论提供效果评估工具">（二）为立法论提供效果评估工具</h3>
<p>　　2011年3月，时任全国人大常委会委员长吴邦国在十一届全国人大四次会议第二次全体会议上宣布“中国特色社会主义法律体系已经形成”。在此之后，学界有过一种观点，亦即认为我们的学术研究将从立法中心主义转向司法中心主义。另一种更谨慎的观点则认为，就中国特色社会主义法律体系这一宏大工程而言，上述时间节点是一个终点，但更是一个起点。在此后的七八年里，现实更加验证的似乎是后一种观点，即立法并没有消退，经济发展、社会转型向法律制度提出了新的要求。实证研究亦表明，立法中心主义的研究氛围始终存在。既然立法论的研究从未消失，我们更应当重视此类研究推动的立法质量和效果。法律体系形成及其规模的持续扩大，并不表明法律体系已经完备或能够自动产生实效，更不意味着立法必然合乎社会需要。就立法进行事前和事后的评估，这不只是立法机关的工作职责，同时也是借此反思立法论研究的良好契机。</p>
<p>　　这里主要探讨立法评估的方法，重点考察大数据技术是否有助于提升立法评估的广度和精度。当前的立法评估方式包括征集公众意见、问卷调查、实地走访等。例如在一份对地方法规的评估中，其研究者主要是在政府机构的主导下，通过第三方评估机构，推动各部门和区县自查、设计和布置调查问卷、文献梳理、重点走访和调研等方式，来完成评估。评估的方法当前“主要运用的是定性分析方法，很少运用定量分析方法及运用影响分析方法”，而这从评估的精确性来讲是不够的。毕竟，现代国家的管理是“数目字”管理，在现代政府的协调性行政控制中，对这些“官方数据”的例行监测是不可或缺的。大数据技术在立法评估中有如下两方面可能的贡献。</p>
<p>　　首先，大数据技术有助于更好地收集来自社会各界的反馈。笔者在研究中访问了全国人大和多个地方人大的网站，发现它们目前都还停留于前大数据时代的意见收集模式。大数据时代很注重对信息的标签化收集和处理，产业界将此称为“打标签”。若能在信息收集环节按照大数据分析的需要进行改造，增加备选的、对立法评估有价值的“标签”供用户勾选，则将有助于提高所收集的信息之质量。而互联网的发展，为利益相关者尤其是公众参与立法评估提供了手段。</p>
<p>　　其次，在立法有关材料的文本清洗和分类中，大数据技术也将提供更多的工具。在各地的立法评估实践中，会面对大量的文字材料。根据某省立法部门的反映，他们缺乏的是针对各方面立法意见的信息汇总和分类的能力。立法机关当前仍然停留于通过传统的“人工看、人工做统计”的方式来获悉各方面的反馈。大数据技术中的词频统计、主题分析、情感分析等相关技术，可以对庞杂的立法建议作清洗、聚类，而这些立法意见的文本处理能力是可积累和可复用的，根据过往的立法意见所构建的筛选模型，例如征集到的立法反馈有哪些意见类型、主要针对立法的哪部分提出意见、意见提出者的身份等，通过机器学习，可以应用于今后对立法意见的高效筛选之中。</p>
<p>　　最后，就立法评估的时间节点而言，大数据技术更能发挥作用的应该是立法后的评估。立法前评估与立法后评估的区别在于，立法前评估主要评估立法的必要性、合法性、协调性和可操作性，而立法后评估则重在考察法律法规对经济、社会和环境的实际影响。影响评估和成本—收益分析是两种不同的方法。成本—收益法是一种法经济学的路径，该方法之所以在立法前评估中经常被使用，是因为在立法之前一切影响都是估计的，并无立法产生的实际影响可以测量。较之事前的估计，关于事后的立法影响，其有关信息显然更多，数据分析也将更有应用的空间。因此，大数据技术和法经济学的方法，在立法前、后的评估中将体现出不同的分工。</p>
<p>　　上述主要讨论立法部门引入大数据技术展开立法评估，此外，大数据技术还应赋能学者的立法论研究，为研究提供检验成效、提示风险的能力。在一些西方学者看来，实证研究的前提为认同法律乃是一种工具，且由此对它可以用一种实证性的方法来加以检验。又由于法律规范对于维持社会秩序具有极大的重要性，社会变革一般不允许像其他科学领域中那样被“视为一种迭代过程”，因此，“在公共事务领域，失败是一个典型的只能在私下里低声讨论的事情”。但是，对某一制度的变革方案之效果进行大数据分析，绝对是有意义的，哪怕实证分析的结论不完全公开、仅供特定人参阅。例如陈卫东等人的课题组将某些改革举措限定在局部区域进行自然实验时，其中就用到大量的统计数据，该研究若能增加数据的维度和样本的数量，则其论证的效果也许会更好。此种对法律制度立法效果的大数据评估，已经在学术界得到一定的认可，例如在一项对精神损害赔偿发生机制的研究中，其研究者就意识到实证研究可以大幅度提高立法预测个体行动的精确性。</p>
<br>
<h2 id="结语">结　语</h2>
<p>　　揭开大数据技术的面纱，我们可以看到，作为法学研究的一种新方法，大数据技术增强了我们获取数据、分析数据的能力，使得在更大时空范围内研究法治实践的规律成为了可能。</p>
<p>　　笔者认为，“数字技术+法学”应区分不同的细分场景展开讨论，不同的法律场景具有不同的特点。例如，首先应区别工程和学术，在学术研究中引入大数据技术，模型设计有充裕的时间，过程的可解释性要求较高。其次应区别学科和学术，作为法学研究方法的大数据技术，只是学科论中的内容之一。有学者认为，“计算法学的研究方法中最主要、最具特点的方法还是本文所指的运用计算机科学智能化处理大量法律数据以解决法律问题的方法”。本文的见解与其相近，同时认为这套大数据的方法不只适用于计算法学，而是全面覆盖法学的各个二级学科。最后是研究中具体方法的细分，如果将法学研究的方法区分为规范研究和实证研究，那么大数据技术方法和法学研究的结合点主要是在实证研究上。有学者认为，“计算法学可归属为实证法学的基本范畴”，“计算法学通过兼收并蓄的统合吸纳了定性研究和定量研究各自的优长”。本文主张狭义地将大数据技术定位为是对定量研究产生的变革，这并不妨碍与定性研究的彼此互鉴。在我国法学界，实证研究将与规范研究长期并存、共同发展。若对此心存疑虑，则不妨回顾一下美国法学研究在20世纪60年代所谓的“跨学科”研究方法之转向，以及90年代对此的二次转向，还有我国法学界在2005年前后也出现了一次“中国法学向何处去”的热烈讨论，便可以发现规范研究和各种跨学科法学研究方法间存在着难舍难分、始终共存的关系。</p>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>ashares库|A股市场历史行情数据</title>
      <link>https://textdata.cn/blog/ashares/</link>
      <pubDate>Sun, 05 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/ashares/</guid>
      <description>&lt;h1 id=&#34;ashares&#34;&gt;ashares&lt;/h1&gt;
&lt;p&gt;代码非原创，是对项目&lt;a href=&#34;https://github.com/mpquant/Ashare&#34;&gt;Ashare&lt;/a&gt;的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。&lt;/p&gt;
&lt;h2 id=&#34;功能特点&#34;&gt;功能特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年&lt;/li&gt;
&lt;li&gt;双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。&lt;/li&gt;
&lt;li&gt;全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理&lt;/li&gt;
&lt;li&gt;和其他行情库（tushare等）比的优点是什么？ &amp;ndash; 简单 轻量 便携 开源&lt;/li&gt;
&lt;li&gt;Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 &lt;code&gt;get_price()&lt;/code&gt; 看完下面例子就会了&lt;/li&gt;
&lt;li&gt;Ashare可以用在任何需要量化研究，量化分析的场合&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip install akshares
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt;  &lt;span class=&#34;nn&#34;&gt;ashares&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
    
&lt;span class=&#34;c1&#34;&gt;# 证券代码兼容多种格式 通达信，同花顺，聚宽&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# sh000001 (000001.XSHG)    sz399006 (399006.XSHE)   sh600519 ( 600519.XSHG ) &lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh000001&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;#默认获取今天往前5天的日线实时行情&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数日线行情&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;000001.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2021-04-30&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#可以指定结束日期，获取历史行情&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数历史行情&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                        

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;000001.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2018-06-15&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#支持&amp;#39;1d&amp;#39;日, &amp;#39;1w&amp;#39;周,  &amp;#39;1M&amp;#39;月  &lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数历史周线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh600519&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;15m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;#分钟线实时行情，可用&amp;#39;1m&amp;#39;,&amp;#39;5m&amp;#39;,&amp;#39;15m&amp;#39;,&amp;#39;30m&amp;#39;,&amp;#39;60m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;贵州茅台15分钟线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;600519.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;60m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#分钟线实时行情，可用&amp;#39;1m&amp;#39;,&amp;#39;5m&amp;#39;,&amp;#39;15m&amp;#39;,&amp;#39;30m&amp;#39;,&amp;#39;60m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;贵州茅台60分钟线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#上证指数日线行情----------------------------------------------------
              open    close     high      low       volume
2021-06-07  3597.14  3599.54  3600.38  3581.90  303718677.0
2021-06-08  3598.75  3580.11  3621.52  3563.25  304491470.0
2021-06-09  3576.80  3591.40  3598.71  3572.64  298323296.0
2021-06-10  3587.53  3610.86  3624.34  3584.13  318174808.0
2021-06-11  3614.11  3589.75  3614.40  3587.15  360554970.0


#贵州茅台60分钟线----------------------------------------------------
                       open    close     high      low    volume
2021-06-10 14:00:00  2237.00  2224.16  2245.00  2222.00   4541.53
2021-06-10 15:00:00  2222.21  2238.48  2240.34  2222.21   4146.88
2021-06-11 10:30:00  2239.00  2220.00  2244.00  2197.86  12030.00
2021-06-11 11:30:00  2220.01  2210.18  2231.80  2200.18   4868.00
2021-06-11 14:00:00  2210.10  2223.35  2224.48  2206.01   4544.00
2021-06-11 15:00:00  2223.33  2178.81  2226.80  2178.81  12529.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="ashares">ashares</h1>
<p>代码非原创，是对项目<a href="https://github.com/mpquant/Ashare">Ashare</a>的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。</p>
<h2 id="功能特点">功能特点</h2>
<ul>
<li>双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年</li>
<li>双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。</li>
<li>全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理</li>
<li>和其他行情库（tushare等）比的优点是什么？ &ndash; 简单 轻量 便携 开源</li>
<li>Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 <code>get_price()</code> 看完下面例子就会了</li>
<li>Ashare可以用在任何需要量化研究，量化分析的场合</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install akshares
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span>  <span class="nn">ashares</span> <span class="kn">import</span> <span class="n">get_price</span><span class="p">,</span> 
    
<span class="c1"># 证券代码兼容多种格式 通达信，同花顺，聚宽</span>
<span class="c1"># sh000001 (000001.XSHG)    sz399006 (399006.XSHE)   sh600519 ( 600519.XSHG ) </span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;sh000001&#39;</span><span class="p">,</span> <span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1d&#39;</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>      <span class="c1">#默认获取今天往前5天的日线实时行情</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数日线行情</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;000001.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1d&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">end_date</span><span class="o">=</span><span class="s1">&#39;2021-04-30&#39;</span><span class="p">)</span>  <span class="c1">#可以指定结束日期，获取历史行情</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数历史行情</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>                        

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;000001.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1w&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">end_date</span><span class="o">=</span><span class="s1">&#39;2018-06-15&#39;</span><span class="p">)</span>  <span class="c1">#支持&#39;1d&#39;日, &#39;1w&#39;周,  &#39;1M&#39;月  </span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数历史周线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span> 

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;sh600519&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;15m&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>     <span class="c1">#分钟线实时行情，可用&#39;1m&#39;,&#39;5m&#39;,&#39;15m&#39;,&#39;30m&#39;,&#39;60m&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;贵州茅台15分钟线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;600519.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;60m&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>  <span class="c1">#分钟线实时行情，可用&#39;1m&#39;,&#39;5m&#39;,&#39;15m&#39;,&#39;30m&#39;,&#39;60m&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;贵州茅台60分钟线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#上证指数日线行情----------------------------------------------------
              open    close     high      low       volume
2021-06-07  3597.14  3599.54  3600.38  3581.90  303718677.0
2021-06-08  3598.75  3580.11  3621.52  3563.25  304491470.0
2021-06-09  3576.80  3591.40  3598.71  3572.64  298323296.0
2021-06-10  3587.53  3610.86  3624.34  3584.13  318174808.0
2021-06-11  3614.11  3589.75  3614.40  3587.15  360554970.0


#贵州茅台60分钟线----------------------------------------------------
                       open    close     high      low    volume
2021-06-10 14:00:00  2237.00  2224.16  2245.00  2222.00   4541.53
2021-06-10 15:00:00  2222.21  2238.48  2240.34  2222.21   4146.88
2021-06-11 10:30:00  2239.00  2220.00  2244.00  2197.86  12030.00
2021-06-11 11:30:00  2220.01  2210.18  2231.80  2200.18   4868.00
2021-06-11 14:00:00  2210.10  2223.35  2224.48  2206.01   4544.00
2021-06-11 15:00:00  2223.33  2178.81  2226.80  2178.81  12529.00
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyCatFlow库|类别数据时间序列可视化库</title>
      <link>https://textdata.cn/blog/pycatflow/</link>
      <pubDate>Sun, 05 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pycatflow/</guid>
      <description>大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。</description>
      <content:encoded><![CDATA[<p>大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。</p>
<h2 id="pycatflow">PyCatFlow</h2>
<p>PyCatFlow 是一个 Python 包，用于可视化<strong>类别数据的时间变化</strong>。它的灵感来自 Bernhard Rieder 的可视化工具 <strong>RankFlow</strong>，它允许将排名列表随着时间的推移进行可视化，例如，Google 或 YouTube 上查询的搜索结果的变化。在我看来，尽管它的用户界面极简,RankFlow 是一个非常有用的工具，而且我很难为其准备数据。事实证明，这些困难主要源于“滥用”RankFlow，或者用更积极的术语来说，它源于将 RankFlow 用于其设计目的以外的其他目的。</p>
<h2 id="背景了解rankflow">背景：了解RankFlow</h2>
<p>RankFlow 允许比较排名列表（随着时间的推移）。 在最简单的形式中，它需要以每列代表一个排名列表的方式排列表格数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Time 1,Time 2,Time 3,Time 4
Item 1,Item 1,Item 1,Item 2
Item 2,Item 4,Item 2,Item 1
Item 3,Item 2,Item 4,Item 4
Item 4,Item 3,Item 5,Item 5
</code></pre></div><p>每个排名列表都可以通过权重进行补充，从而为数据添加另一层信息。 例如，如果我们采用 YouTube 搜索结果数据，则可以将观看次数、赞成票数或赞成票反对率用作权重信息。 为简单起见，示例数据仅由排名列表组成，并在以下流程图中显示结果。</p>

<figure >
    
        <img src="img/rankflow.png" width="800" />
    
    
</figure>

<p>为了加快图表的后处理速度，我决定创建一个类似于 RankFlow 的可视化工具，它非常适合不包含显式排名信息但可能包含额外分类数据的时间数据。</p>
<h2 id="pycatflow快速上手">PyCatFlow快速上手</h2>

<figure >
    
        <img src="img/sample_viz.png" width="800" />
    
    
</figure>

<p>如果我们用两种不同颜色，灰色和绿色分别表示男生和女生，然后每一个格子表示一类电影，横轴是男生和女生随着时间推移看的不同的电影，这样我们就可以一目了然男生和女生的喜好的变化，真的是太直观了！
PyCatFlow大大方便了我们对于类别特征随着时间变化的分析。</p>
<p><strong>准备数据</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/sample_data_ChatterBot_Requirements.csv&#34;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">column</th>
<th style="text-align:left">items</th>
<th style="text-align:left">category</th>
<th style="text-align:right">column order</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">fuzzywuzzy</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">requests</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">requests-oauthlib</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">pymongo</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">jsondatabase</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pycatflow</span> <span class="k">as</span> <span class="nn">pcf</span>

<span class="c1"># Load and parse data from file</span>
<span class="n">fname</span><span class="o">=</span><span class="s2">&#34;data/sample_data_ChatterBot_Requirements.csv&#34;</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="s2">&#34;column&#34;</span><span class="p">,</span> <span class="n">nodes</span><span class="o">=</span><span class="s2">&#34;items&#34;</span><span class="p">,</span> <span class="n">categories</span><span class="o">=</span><span class="s2">&#34;category&#34;</span><span class="p">,</span> <span class="n">column_order</span><span class="o">=</span><span class="s2">&#34;column order&#34;</span><span class="p">)</span>

<span class="s1">&#39;&#39;&#39;
</span><span class="s1">visualize(data, spacing=50, node_size=10, width=None, height=None, minValue=1, maxValue=10, node_scaling=&#34;linear&#34;,
</span><span class="s1">          connection_type=&#34;semi-curved&#34;, color_startEnd=True, color_categories=True, nodes_color=&#34;gray&#34;,
</span><span class="s1">          start_node_color=&#34;green&#34;, end_node_color=&#34;red&#34;, palette=None, show_labels=True,
</span><span class="s1">          label_text=&#34;item&#34;, label_font=&#34;sans-serif&#34;, label_color=&#34;black&#34;, label_size=5,
</span><span class="s1">          label_shortening=&#34;clip&#34;, label_position=&#34;nodes&#34;, line_opacity=0.5, line_stroke_color=&#34;white&#34;,
</span><span class="s1">          line_stroke_width=0.5, line_stroke_thick=0.5, legend=True, sort_by=&#34;frequency&#34;)
</span><span class="s1">&#39;&#39;&#39;</span>

<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="c1">#save visualization to files</span>
<span class="n">viz</span><span class="o">.</span><span class="n">savePng</span><span class="p">(</span><span class="s1">&#39;sample_viz.png&#39;</span><span class="p">)</span>
<span class="n">viz</span><span class="o">.</span><span class="n">saveSvg</span><span class="p">(</span><span class="s1">&#39;sample_viz.svg&#39;</span><span class="p">)</span>

<span class="c1">#show visualization</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Another option is to visualize the graph with curved connections.</span>
<span class="c1"># The implementation of this connection type draws on https://github.com/bernorieder/RankFlow</span>

<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">connection_type</span><span class="o">=</span><span class="s1">&#39;curved&#39;</span><span class="p">)</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The third option are straight connections between nodes</span>
<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">connection_type</span><span class="o">=</span><span class="s1">&#39;straight&#39;</span><span class="p">)</span>

<span class="c1"># show visualization</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>

<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/bumatic/PyCatFlow">https://github.com/bumatic/PyCatFlow</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>DataSpell数据挖掘编辑器</title>
      <link>https://textdata.cn/blog/data_spell/</link>
      <pubDate>Wed, 01 Dec 2021 20:40:10 +0600</pubDate>
      
      <guid>/blog/data_spell/</guid>
      <description>python数据挖掘生产力工具</description>
      <content:encoded><![CDATA[<p>Dataspell——一个专为数据科学家制作的IDE。 一方面，您拥有 Jupyter 以实现最大的交互性，另一方面拥有 PyCharm 作为专业环境。</p>
<br>
<h2 id="什么是dataspell">什么是DataSpell？</h2>
<p>Dataspell 是专为数据科学家制作的 IDE（集成开发环境）。 它由 Jetbrains ( IntelliJ Idea 和 PyCharm 背后的一家公司)开发，支持所有主要操作系统平台，包括 ARM (M1) Mac。</p>
<p>DataSpell亮点：</p>
<ul>
<li>原生notebook体验——如果你使用过 Jupyter 会有宾至如归的感觉。</li>
<li>智能代码辅助 - 有点像 Jupyter 和 PyCharm 生了孩子。</li>
<li>Markdown 和 JavaScript — 根据需要设置notebook样式并嵌入数据可视化。</li>
<li>交互式外壳 - REPL 控制台 + 语法检查。</li>
<li>SQL 数据库支持 — 连接到数据库、直观地检查数据、导入/导出数据等。</li>
</ul>
<p>打开dataspell，很像PyCharm</p>

<figure >
    
        <img src="img/dataspell%e7%95%8c%e9%9d%a2.png" width="800" />
    
    
</figure>

<br>
<h2 id="创建你的第一个notebook">创建你的第一个notebook</h2>
<p>该过程几乎与任何其他 Jetbrains 产品相同。 点击根目录，进入新建——Jupyter Notebook：</p>

<figure >
    
        <img src="img/dataspell%e7%95%8c%e9%9d%a22.png" width="800" />
    
    
</figure>

<p>我将其命名为 first_notebook.ipynb。</p>

<figure >
    
        <img src="img/first_notebook.png" width="800" />
    
    
</figure>

<p>样式是个人喜好的东西，但你不能说设计不是一流的。</p>
<p>在创建笔记本时，您可能已经看到创建 R 脚本和 Markdown 文件的选项。 一旦 Python 正常运行，Dataspell 将同时支持 R 和 Julia（来源）。</p>
<p>现在让我们探索基本的 Python 和数据科学库是如何工作的。 下图显示了 Numpy 数组和 Pandas DataFrame：</p>

<figure >
    
        <img src="img/numpypandas.png" width="800" />
    
    
</figure>

<p>正如预期的那样。 我喜欢 Numpy 数组打印为 Pandas 系列的方式，但这只是个人喜好。
Matplotlib 呢？ 这是一个真正简单的散点图：</p>

<figure >
    
        <img src="img/matplotlib.png" width="800" />
    
    
</figure>

<p>我更喜欢出版物可视化的白色背景，但在晚上工作时眼睛无法长时间工作，夜晚我喜欢黑色背景。 干得好，Dataspell。</p>
<p>接下来，让我们探索每个 IDE 必须具备的功能——智能编码辅助。</p>
<br>
<h2 id="智能编码辅助">智能编码辅助</h2>
<p>我不喜欢 JupyterLab 的是缺乏编码帮助。 确实有插件，但它们的帮助远不及专业的 IDE。 我不喜欢 IDE 的是缺乏交互性。 希望 Dataspell 将是两全其美的。</p>
<p>让我们尝试导入 Numpy，看看会发生什么：</p>

<figure >
    
        <img src="img/assitence.png" width="800" />
    
    
</figure>

<p>支持自动代码提示——它完美无缺； 也支持代码未正确编写时的警告/错误，例如函数add_integers 应该返回一个整数，但它故意返回一个浮点数：</p>

<figure >
    
        <img src="img/add_integers.png" width="800" />
    
    
</figure>

<br>
<h2 id="支持markdown">支持markdown</h2>
<p>首先，将鼠标悬停在单元格上方并单击添加 Markdown 单元格：</p>

<figure >
    
        <img src="img/markdown.png" width="800" />
    
    
</figure>

<p>另一种方法是单击代码下拉列表并将单元格类型切换为 Markdown。</p>
<p>下面是一些 Markdown 代码供您尝试：</p>

<figure >
    
        <img src="img/markdown2.png" width="800" />
    
    
</figure>

<p>这是运行单元格时的样子：</p>

<figure >
    
        <img src="img/markdown3.png" width="800" />
    
    
</figure>

<h2 id="支持数据库">支持数据库</h2>
<p>作为数据科学家，您几乎每天都必须建立和管理数据库连接。 当 SQL 写成字符串时，调试很长的 SQL 行并不容易。 Dataspell 有一个解决方案。以下是使用 sqlite3 包建立连接、创建数据库和表的方法：</p>

<figure >
    
        <img src="img/database.png" width="800" />
    
    
</figure>

<p>您现在可以像往常一样插入数据：</p>

<figure >
    
        <img src="img/database2.png" width="800" />
    
    
</figure>

<p>Dataspell 的特别之处在于无需离开 IDE 或编写不必要的查询即可浏览数据库的选项。 只需双击数据库，就会打开一个新的侧窗口。从那里，您可以轻松单击任何感兴趣的表格，在单独的选项卡中浏览它：</p>

<figure >
    
        <img src="img/database3.png" width="800" />
    
    
</figure>

<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Python采集多媒体文件数据</title>
      <link>https://textdata.cn/blog/multi_media_examples/</link>
      <pubDate>Fri, 26 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/multi_media_examples/</guid>
      <description>使用Python对多媒体文件进行下载</description>
      <content:encoded><![CDATA[<p>多媒体文件的下载包括</p>
<ul>
<li>图片</li>
<li>音频</li>
<li>视频</li>
<li>文件</li>
</ul>
<p>代码非常简单，只要准备好多媒体文件链接url和存储路径file即可，代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>


<span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">file</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    下载多媒体及文件
</span><span class="s2">    url： 多媒体文件链接（结尾有文件格式名）
</span><span class="s2">    file: 存储文件的路径（结尾有文件格式名）
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="c1">#获取到二进制数据</span>
    <span class="n">binarydata</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">content</span>
    <span class="c1">#以二进制形式将数据流存入fname中</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">binarydata</span><span class="p">)</span>  
</code></pre></div><h2 id="案例数据">案例数据</h2>
<p>视频由于体积太大未能上传至我的博客服务器，我为大家准备了音频、pdf文件、图片文件三种数据类型。其实不论什么类型，只要是文件，均可使用上面的download函数下载。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pics</span>  <span class="o">=</span>  <span class="p">[</span><span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/about-page.jpg&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/about-us.jpg&#39;</span><span class="p">,</span>
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/AI_Knowledge_intro.png&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/banner-1.jpg&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/blog-post-1.jpg&#39;</span><span class="p">,</span>
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/blog-post-2.jpg&#39;</span><span class="p">,</span>
                <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/blog-post-3.jpg&#39;</span><span class="p">]</span>

<span class="n">pdfs</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/网络爬虫.pdf&#39;</span><span class="p">,</span>
           <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/相似度.pdf&#39;</span><span class="p">,</span>
           <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/中文可读性.pdf&#39;</span><span class="p">]</span>


<span class="n">musics</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/Elastic.mp3&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/HAPPYBEL.WAV&#39;</span><span class="p">,</span>
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/MU14.WAV&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/typing.wav&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/Water.mp3&#39;</span><span class="p">]</span>
</code></pre></div><br>
<h2 id="批量下载">批量下载</h2>
<p>以pdf为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">pdfs</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/网络爬虫.pdf&#39;</span><span class="p">,</span>
           <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/相似度.pdf&#39;</span><span class="p">,</span>
           <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/中文可读性.pdf&#39;</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">file</span><span class="p">):</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">binarydata</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">content</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">binarydata</span><span class="p">)</span> 
        
<span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">pdfs</span><span class="p">:</span>
    <span class="c1">#注意，代码运行前所在文件夹内新建一个data文件夹</span>
    <span class="n">filepath</span><span class="o">=</span><span class="s1">&#39;data/&#39;</span><span class="o">+</span><span class="n">url</span><span class="o">.</span><span class="n">spit</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">link</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="n">filepath</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>pyjanitor数据分析清洁包</title>
      <link>https://textdata.cn/blog/pyjanitor_tutorial/</link>
      <pubDate>Thu, 25 Nov 2021 23:10:10 +0600</pubDate>
      
      <guid>/blog/pyjanitor_tutorial/</guid>
      <description>清洗数据，也简洁代码</description>
      <content:encoded><![CDATA[<ul>
<li>
<p><a href="https://pyjanitor-devs.github.io/pyjanitor/">official docs</a></p>
</li>
<li>
<p><a href="https://github.com/pyjanitor-devs/pyjanitor">github</a></p>
</li>
</ul>
<br>
<p>pyjanitor是参照R语言janitor包语法，为Python量身定制的数据清洗包,即可清洗数据，又可让代码简洁干净。</p>
<h2 id="代码下载">代码下载</h2>
<p><a href="pyjanitor_tutorial.ipynb">click to download the code</a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyjanitor</span>
</code></pre></div><br>
<h2 id="为什么用janitor">为什么用janitor？</h2>
<p>数据预处理通常由一系列步骤组成，这些步骤涉及将原始数据转换为可理解/可用的格式。这一系列的步骤需要按照一定的顺序运行才能成功。我们以基础数据文件为起点，对其执行操作，例如删除空行/空行、用其他值替换它们、添加/重命名/删除数据列、过滤行等。更正式地说，这些步骤以及它们的关系和依赖关系通常被称为有向无环图 (DAG)。</p>
<p>pandas API 对 Python 数据科学生态系统非常宝贵，它实现了方法子集的方法链作为 API 的一部分。例如，重置索引 (.reset_index())、删除空值 (.dropna()) 等都是通过适当的 pd.DataFrame 方法调用来完成的。</p>
<p>受 R 统计语言生态系统 dplyr 包的易用性和表达能力的启发，我们将 pyjanitor 开发为语法包，用于为 Pandas 用户表达数据处理 DAG。</p>
<p>为了实现这一点，我们需要调用声明式的操作 替换为允许 逻辑顺序的方法链。让我们看看下面带注释的示例。首先，这里是数据清理路径的文字描述：</p>
<ol>
<li>创建一个dataframe。</li>
<li>删除一列。</li>
<li>删除两个特定列中具有空值的行。</li>
<li>重命名另外两列。</li>
<li>添加一个新列。</li>
</ol>
<p>让我们导入一些库并从本示例的一些示例数据开始：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Libraries</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">janitor</span>

<span class="c1"># Sample Data curated for this example</span>
<span class="n">company_sales</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;SalesMonth&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Jan&#39;</span><span class="p">,</span> <span class="s1">&#39;Feb&#39;</span><span class="p">,</span> <span class="s1">&#39;Mar&#39;</span><span class="p">,</span> <span class="s1">&#39;April&#39;</span><span class="p">],</span>
    <span class="s1">&#39;Company1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">150.0</span><span class="p">,</span> <span class="mf">200.0</span><span class="p">,</span> <span class="mf">300.0</span><span class="p">,</span> <span class="mf">400.0</span><span class="p">],</span>
    <span class="s1">&#39;Company2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">180.0</span><span class="p">,</span> <span class="mf">250.0</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="mf">500.0</span><span class="p">],</span>
    <span class="s1">&#39;Company3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">400.0</span><span class="p">,</span> <span class="mf">500.0</span><span class="p">,</span> <span class="mf">600.0</span><span class="p">,</span> <span class="mf">675.0</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div><br>
<h2 id="常见的pandas实现方式">常见的Pandas实现方式</h2>
<p>下面是传统的Pandas方式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The Pandas Way</span>

<span class="c1"># 1. 创建一个dataframe</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>

<span class="c1"># 2.删除一列。 Say &#39;Company1&#39;</span>
<span class="k">del</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;Company1&#39;</span><span class="p">]</span>

<span class="c1"># 3. 删除两个特定列中具有空值的行。 &#39;Company2&#39; and &#39;Company3&#39;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Company2&#39;</span><span class="p">,</span> <span class="s1">&#39;Company3&#39;</span><span class="p">])</span>

<span class="c1"># 4. 重命名另外两列。 将&#39;Company2&#39; 改为 &#39;Amazon&#39;； 将 &#39;Company3&#39; 改为 &#39;Facebook&#39;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">rename</span><span class="p">({</span><span class="s1">&#39;Company2&#39;</span><span class="p">:</span> <span class="s1">&#39;Amazon&#39;</span><span class="p">,</span>
                <span class="s1">&#39;Company3&#39;</span><span class="p">:</span> <span class="s1">&#39;Facebook&#39;</span><span class="p">},</span>
               <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># 5. 添加一个新列 &#39;Google&#39;</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Google&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">]</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><br>
<h2 id="稍微高级一点pandas实现方式">稍微高级一点Pandas实现方式</h2>
<p>稍微高级一点的用户可能会利用函数式 API：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>
    <span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="s2">&#34;Company1&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Company2&#34;</span><span class="p">:</span> <span class="s2">&#34;Amazon&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">:</span><span class="s2">&#34;Facebook&#34;</span><span class="p">})</span>
    <span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">Google</span><span class="o">=</span><span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">])</span>
<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><br>
<h2 id="pyjanitor实现方式">PyJanitor实现方式</h2>
<p>借助pyjanitor库，我们可以使用方法名链式代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>
    <span class="o">.</span><span class="n">remove_columns</span><span class="p">([</span><span class="s1">&#39;Company1&#39;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">rename_column</span><span class="p">(</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Amazon&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">rename_column</span><span class="p">(</span><span class="s2">&#34;Company3&#34;</span><span class="p">,</span> <span class="s2">&#34;Facebook&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">add_column</span><span class="p">(</span><span class="s2">&#34;Google&#34;</span><span class="p">,</span> <span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">])</span>

<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><p>因此，pyjanitor 的词源与“清洁度”有双重关系。 首先，它是关于使用方便的数据清理例程扩展 Pandas。 其次，它是关于为常见的 Pandas 例程提供更清晰、方法链接、基于动词的 API。</p>
<br>
<h2 id="pyjanitor更多功能">pyjanitor更多功能</h2>
<ul>
<li>清理列名（多索引是可能的！）</li>
<li>删除空行和列</li>
<li>识别重复条目</li>
<li>将列编码为分类</li>
<li>将数据拆分为特征和目标（用于机器学习）</li>
<li>添加、删除和重命名列</li>
<li>将多列合并为一列</li>
<li>日期转换（从 matlab、excel、unix）到 Python 日期时间格式</li>
<li>将具有分隔的分类值的单个列扩展为虚拟编码变量</li>
<li>基于分隔符连接和分离列</li>
<li>用于根据列上的查询过滤数据框的语法糖</li>
<li>金融、生物、化学、工程和 pyspark 的实验子模块</li>
</ul>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>科学绘图matplotlib</title>
      <link>https://textdata.cn/blog/sci_matplotlib/</link>
      <pubDate>Wed, 24 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/sci_matplotlib/</guid>
      <description>字段丰富，适合玩数据分析</description>
      <content:encoded><![CDATA[<p>Python 科学可视化领域是巨大的，由无数工具组成，从最通用和最广泛使用的工具到更专业和机密的工具。其中一些工具是基于社区的，而另一些则是由公司开发的。有些是专门为 Web 制作的，有些仅适用于桌面，有些处理 3D 和大数据，而有些则针对完美的 2D 渲染。</p>
<p>在这个图景中，Matplotlib 有着非常特别的地方。</p>
<ul>
<li>它是一个多功能且功能强大的库，可让您设计非常高质量的图形，适用于<strong>科学出版</strong>。</li>
<li>它还提供了一个简单直观的界面以及一个面向对象的架构，允许您调整图形中的任何内容。</li>
<li>最后，它可以用作常规图形库以设计非科学图形。</li>
</ul>
<br>
<h2 id="本书章节四个部分">本书章节四个部分</h2>
<ul>
<li>
<p>第一部分 Matplotlib 库的基本原理。</p>
<p>这包括回顾构成图形的不同部分、不同的坐标系、可用的比例和投影，我们还将介绍一些与排版和颜色相关的概念。</p>
</li>
<li>
<p>第二部分 图形涉及实践。</p>
<p>在介绍了一些生成更好图形的简单规则之后，我们将继续解释 Matplotlib 默认值和样式系统，然后再深入研究图形布局组织。然后我们将探索可用的不同类型的情节，看看如何用不同的元素装饰一个人物。</p>
</li>
<li>
<p>第三部分 更高级的概念</p>
<p>即 3D 图形、优化和动画。第四部分也是最后一部分是展示集合。</p>
</li>
</ul>
<br>
<h2 id="美图展览">美图展览</h2>
<p>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>
</p>
<br>
<h2 id="案例代码">案例代码</h2>

<figure >
    
        <img src="img/matplotlib.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.textpath</span> <span class="kn">import</span> <span class="n">TextPath</span>
<span class="kn">from</span> <span class="nn">matplotlib.patches</span> <span class="kn">import</span> <span class="n">PathPatch</span>
<span class="kn">from</span> <span class="nn">matplotlib.collections</span> <span class="kn">import</span> <span class="n">PolyCollection</span>
<span class="kn">from</span> <span class="nn">matplotlib.font_manager</span> <span class="kn">import</span> <span class="n">FontProperties</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">font_manager</span> <span class="k">as</span> <span class="n">fm</span><span class="p">,</span> <span class="n">rcParams</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>

<span class="c1">#更改字体，支持中文。</span>
<span class="n">prop</span> <span class="o">=</span> <span class="n">FontProperties</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s1">&#39;fonts/Alibaba-PuHuiTi-Bold.otf&#39;</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

<span class="n">red</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">233</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">255</span><span class="p">])</span> <span class="o">/</span> <span class="mi">255</span>
<span class="n">darkred</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">130</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">255</span><span class="p">])</span> <span class="o">/</span> <span class="mi">255</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mf">14.8</span> <span class="o">/</span> <span class="mf">2.54</span><span class="p">,</span> <span class="mi">21</span> <span class="o">/</span> <span class="mf">2.54</span><span class="p">))</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">add_axes</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">aspect</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">xlim</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span> <span class="n">ylim</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mf">14.2</span><span class="p">,</span> <span class="mf">14.2</span><span class="p">])</span>
<span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s2">&#34;off&#34;</span><span class="p">)</span>

<span class="c1"># Text path</span>
<span class="n">path</span> <span class="o">=</span> <span class="n">TextPath</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="s2">&#34;MATPLOTLIB库&#34;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">prop</span><span class="o">=</span><span class="n">prop</span><span class="p">)</span>

<span class="c1"># Text centering</span>
<span class="n">V</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">vertices</span>
<span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span> <span class="o">=</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">min</span><span class="p">(),</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
<span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span> <span class="o">=</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">min</span><span class="p">(),</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
<span class="n">V</span> <span class="o">-=</span> <span class="p">(</span><span class="n">xmin</span> <span class="o">+</span> <span class="n">xmax</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">ymin</span> <span class="o">+</span> <span class="n">ymax</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>


<span class="c1"># Compute shadow by iterating over text path segments</span>
<span class="n">polys</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">iter_segments</span><span class="p">(</span><span class="n">curves</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">MOVETO</span><span class="p">:</span>
        <span class="n">points</span> <span class="o">=</span> <span class="p">[</span><span class="n">point</span><span class="p">]</span>
    <span class="k">elif</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">LINETO</span><span class="p">:</span>
        <span class="n">points</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">CLOSEPOLY</span><span class="p">:</span>
        <span class="n">points</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">points</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">points</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">p0</span><span class="p">,</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
            <span class="n">polys</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p1</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">),</span> <span class="n">p0</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">)])</span>

<span class="c1"># Display shadow</span>
<span class="n">collection</span> <span class="o">=</span> <span class="n">PolyCollection</span><span class="p">(</span>
    <span class="n">polys</span><span class="p">,</span> <span class="n">closed</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="n">darkred</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=-</span><span class="mi">10</span>
<span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">add_collection</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>

<span class="c1"># Display text</span>
<span class="n">patch</span> <span class="o">=</span> <span class="n">PathPatch</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="s2">&#34;white&#34;</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">add_artist</span><span class="p">(</span><span class="n">patch</span><span class="p">)</span>

<span class="c1"># Transparent gradient to fade out shadow</span>
<span class="n">I</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">200</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span> <span class="o">+</span> <span class="n">red</span>
<span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=-</span><span class="mi">20</span><span class="p">,</span> <span class="n">clip_on</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">I</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">I</span><span class="p">))</span>
<span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">clip_on</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>


<span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span>
    <span class="mf">6.5</span><span class="p">,</span>
    <span class="o">-</span><span class="mf">1.75</span><span class="p">,</span>
    <span class="s2">&#34;一个多功能的科学可视化库&#34;</span><span class="p">,</span>
    <span class="n">color</span><span class="o">=</span><span class="s2">&#34;white&#34;</span><span class="p">,</span>
    <span class="n">ha</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">,</span>
    <span class="n">va</span><span class="o">=</span><span class="s2">&#34;baseline&#34;</span><span class="p">,</span>
    <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="c1">#family=&#34;Pacifico&#34;,</span>
    <span class="n">zorder</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
    <span class="n">fontproperties</span><span class="o">=</span><span class="n">prop</span>
<span class="p">)</span>

<span class="c1"># Save and show result</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s2">&#34;text-shadow.pdf&#34;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s2">&#34;text-shadow.png&#34;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><br>
<h2 id="电子书下载">电子书下载</h2>
<p>您可以阅读 PDF（95Mo，首选站点）这本书，该书是开放访问的，托管在 HAL 上，HAL 是一个面向学术界的法国开放档案馆。最新版本也可以在 GitHub 上找到。本书的来源（包括代码示例）可在 github.com/rougier/scientific-visualization-book 上找到。</p>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hiDaDeng/DaDengAndHisPython/tree/master/matplotlib%E7%BB%98%E5%9B%BE%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87">点击下载</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Rmarkdown中调用Python代码</title>
      <link>https://textdata.cn/blog/call_python_code_in_rmarkdown/</link>
      <pubDate>Tue, 23 Nov 2021 18:40:10 +0600</pubDate>
      
      <guid>/blog/call_python_code_in_rmarkdown/</guid>
      <description>左手R，右手Python！</description>
      <content:encoded><![CDATA[<h1 id="rpy2简介">rpy2简介</h1>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E5%9C%A8Rmarkdown%E4%B8%AD%E8%B0%83%E7%94%A8Python%E4%BB%A3%E7%A0%81.zip">点击下载文本</a></p>
<br>
<p>Python和R是一对数据科学两大语言，在互联互通的路上，我感觉R更加的积极。还记得之前 <strong>Python中调用R的库-rpy2</strong>， 在Python使用R语言语法还是有些不自然。在R中调用Python体验十分棒，一起跟我看看吧。</p>
<p>reticulate包是可以让R语言非常流畅自然联通Python的关键。</p>
<p><strong>Rmarkdown预备知识</strong></p>
<p>Rmarkdown很像jupyter notbeook和markdown的结合。</p>
<ul>
<li>代码块</li>
<li>markdon文本</li>
</ul>
<br>
<h2 id="代码块">代码块</h2>
<p>在Rmarkdown中的代码块的开始都是以三引号、{}和语言名为标志，以三引号结尾。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">library(ggplot2)
ggplot(mpg, aes(x=displ, y=cty))+
  geom_point()
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">ggplot</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">displ</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">cty</span><span class="p">))</span><span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/unnamed-chunk-1-1.png" width="100%" />
    
    
</figure>

<p>后面设置好reticulate包后，就可以在Rmarkdown中使用python代码块，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import pandas as pd
df = pd.read_csv(&#39;test.csv&#39;)
df.head()
</code></pre></div><br>
<h2 id="markdown文本">markdown文本</h2>
<p>文本部分全部支持markdown语法，这里不做赘述。</p>
<h2 id="安装rpy">安装rpy</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;reticulate&#34;)
</code></pre></div><h2 id="环境设置">环境设置</h2>
<p>当我们在R代码块中设置好Python环境，就可以在Rmarkdown中跑Python代码。</p>
<br>
<h2 id="查询python">查询Python</h2>
<p>首先我们需要知道Python安装路径，可以在<strong>命令行</strong>中逐行执行下面代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">python3
import sys
sys.executable
</code></pre></div><p>我的mac电脑的Python安装路径为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/Library/Frameworks/Python.framework/Versions/3.7/bin/python3
</code></pre></div><br>
<h2 id="指定python">指定Python</h2>
<p>执行下方的代码(路径改为自己的Python安装路径)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="err">##</span> <span class="nx">Warning</span><span class="p">:</span> <span class="kn">package</span> <span class="err">&#39;</span><span class="nx">reticulate</span><span class="err">&#39;</span> <span class="nx">was</span> <span class="nx">built</span> <span class="nx">under</span> <span class="nx">R</span> <span class="nx">version</span> <span class="mf">3.6.2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">use_python</span><span class="p">(</span><span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/bin/python3&#39;</span><span class="p">)</span>
</code></pre></div><p>执行代码后，我们就可以愉快的使用Python代码</p>
<br>
<h1 id="运行python代码">运行Python代码</h1>
<p>在Rmarkdown中写Python代码块</p>
<h2 id="作图">作图</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span> 
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span> 
<span class="c1"># 计算正弦曲线上点的 x 和 y 坐标</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>  <span class="mi">3</span>  <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span>  <span class="mf">0.1</span><span class="p">)</span> 
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;sine wave form&#34;</span><span class="p">)</span>  
<span class="c1"># 使用 matplotlib 来绘制点</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> 
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/unnamed-chunk-3-1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="读取csv">读取csv</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;test.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;gbk&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">##      birthday   name               text  age  gender  height  weight
## 0  1985/10/08  Alice  我很开心，每天都这么快乐，我很幸福   35  female     175      55
## 1    95.07.07   Mary               我很难过   25  female     165      50
## 2    01-11-10   Mike              唉，真难受   19    male     180      75
## 3      90/2/8  Smith          无所谓开心还是难过   30    male     175      70
## 4      93-1-5  Henry          每天赚一万，真爽！   27    male     185      80
</code></pre></div><p>返回的df是Python对象，我们可以看到表格不好看，这是R中的Python对象。</p>
<br>
<h2 id="在r代码块中调用python变量对象">在R代码块中调用Python变量(对象)</h2>
<p>刚刚讲的都是在Rmakdown中运行Python代码块，并不是在R代码块中运行Python代码或者调用Python变量。</p>
<h3 id="pypython_variable_name">py$python_variable_name</h3>
<p>R代码块中调用Python方法</p>
<p>py$python_variable_name</p>
<ul>
<li>py相当于Python中的对象</li>
<li>$ 相当于Python中的<strong>点</strong></li>
<li>python_variable_name 是Python代码块中的变量名</li>
</ul>
<p>比如在上文中Python的变量df，在R中调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">py</span><span class="o">$</span><span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="100%" />
    
    
</figure>

<p>现在调用Python对象df时，R会默认将其转为R对象，所以内容一样，样式似乎变好看了。</p>
<h3 id="r代码块中导入python库">R代码块中导入Python库</h3>
<p>使用os库的listdir函数查询当前项目文件夹内的文件列表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [&#39;reticulate学习.md&#39;, &#39;test.csv&#39;, &#39;test.py&#39;, &#39;reticulate学习.html&#39;, &#39;reticulate学习_files&#39;, &#39;reticulate.pdf&#39;, &#39;reticulate学习.Rmd&#39;, &#39;data.py&#39;]
</code></pre></div><p>在R代码块中实现上方的Python功能，如下，很简单</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>

<span class="c1">#导入库</span>
<span class="n">os</span> <span class="o">&lt;-</span> <span class="nf">import</span><span class="p">(</span><span class="s">&#34;os&#34;</span><span class="p">)</span>

<span class="c1">#os库的listdir函数</span>
<span class="n">os</span><span class="o">$</span><span class="nf">listdir</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;reticulate学习.md&#34;    &#34;test.csv&#34;             &#34;test.py&#34;             
## [4] &#34;reticulate学习.html&#34;  &#34;reticulate学习_files&#34; &#34;reticulate.pdf&#34;      
## [7] &#34;reticulate学习.Rmd&#34;   &#34;data.py&#34;
</code></pre></div><p>可以发现</p>
<ul>
<li><code>import(&quot;os)</code>代替了<code>import os</code></li>
<li><code>$</code>代替了<code>.</code></li>
<li><code>&lt;-</code> 代替了 <code>=</code></li>
</ul>
<p>再熟悉一下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
<span class="n">pd</span> <span class="o">&lt;-</span> <span class="nf">import</span><span class="p">(</span><span class="s">&#34;pandas&#34;</span><span class="p">)</span>
<span class="n">df2</span> <span class="o">&lt;-</span> <span class="n">pd</span><span class="o">$</span><span class="nf">read_csv</span><span class="p">(</span><span class="s">&#34;test.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#34;gbk&#34;</span><span class="p">)</span>
<span class="n">df2</span>
</code></pre></div>
<figure >
    
        <img src="img/df2.png" width="100%" />
    
    
</figure>

<p>需要注意的是，在R代码块中执行Python代码时，默认会将Python对象转为R对象。</p>
<h3 id="source_python">source_python()</h3>
<p>使用reticulate包中的source_python(&lsquo;py文件路径&rsquo;)可以导入py文件中的变量，这样就可以在R代码块中使用外部变量。例如我在data.py中准备A和B两个字符串</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A = &#39;我是张三,&#39;
B = &#39;来自河北&#39;
</code></pre></div><p>在R代码块中运行data.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>

<span class="nf">source_python</span><span class="p">(</span><span class="s">&#34;data.py&#34;</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;我是张三,&#34;
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">print</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;来自河北&#34;
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">paste0</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;我是张三,来自河北&#34;
</code></pre></div><h2 id="py_run_file">py_run_file()</h2>
<p>在R代码块中运行项目文件夹中的test.py文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
<span class="nf">py_run_file</span><span class="p">(</span><span class="s">&#34;test.py&#34;</span><span class="p">)</span>
</code></pre></div><h1 id="数据类型对比">数据类型对比</h1>
<table>
<thead>
<tr>
<th>R</th>
<th>Python</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td>Single-element vector</td>
<td>Scalar</td>
<td><code>1</code>, <code>1L</code>, <code>TRUE</code>, <code>&quot;foo&quot;</code></td>
</tr>
<tr>
<td>Multi-element vector</td>
<td>List</td>
<td><code>c(1.0, 2.0, 3.0)</code>, <code>c(1L, 2L, 3L)</code></td>
</tr>
<tr>
<td>List of multiple types</td>
<td>Tuple</td>
<td><code>list(1L, TRUE, &quot;foo&quot;)</code></td>
</tr>
<tr>
<td>Named list</td>
<td>Dict</td>
<td><code>list(a = 1L, b = 2.0)</code>, <code>dict(x = x_data)</code></td>
</tr>
<tr>
<td>Matrix/Array</td>
<td>NumPy ndarray</td>
<td><code>matrix(c(1,2,3,4), nrow = 2, ncol = 2)</code></td>
</tr>
<tr>
<td>Data Frame</td>
<td>Pandas DataFrame</td>
<td><code>data.frame(x = c(1,2,3), y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</code></td>
</tr>
<tr>
<td>Function</td>
<td>Python function</td>
<td><code>function(x) x + 1</code></td>
</tr>
<tr>
<td>NULL, TRUE, FALSE</td>
<td>None, True, False</td>
<td><code>NULL</code>, <code>TRUE</code>, <code>FALSE</code></td>
</tr>
</tbody>
</table>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>科研绘图SciencePlots库</title>
      <link>https://textdata.cn/blog/scienceplots/</link>
      <pubDate>Tue, 23 Nov 2021 18:40:10 +0600</pubDate>
      
      <guid>/blog/scienceplots/</guid>
      <description>科研可视化绘图包</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/SciencePlot%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE.zip">https://github.com/hidadeng/DaDengAndHisPython/blob/master/SciencePlot科研绘图.zip</a></p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">SciencePlots</span>

</code></pre></div><pre><code>Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple/
Collecting SciencePlots
  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/c2/44/7b5c0ecd6f2862671a076425546f86ac540bc48c1a618a82d6faa3b26f58/SciencePlots-1.0.9.tar.gz (10 kB)
  Installing build dependencies ... [?25l/
</code></pre>
<p><strong>tips</strong>:</p>
<p>SciencePlots库需要电脑安装LaTex，其中</p>
<ul>
<li>MacOS电脑安装MacTex  <a href="https://www.tug.org/mactex/">https://www.tug.org/mactex/</a></li>
<li>Windows电脑安装MikTex  <a href="https://miktex.org/">https://miktex.org/</a></li>
</ul>
<h2 id="初始化绘图样式">初始化绘图样式</h2>
<p>在SciencePlots库中科研绘图样式都是用的science</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="s1">&#39;science&#39;</span><span class="p">)</span>
</code></pre></div><p>当然你也可以同时设置多个样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;ieee&#39;</span><span class="p">])</span>
</code></pre></div><p>在上面的代码中， <strong>ieee</strong> 会覆盖掉 <strong>science</strong> 中的某些参数（列宽、字号等）， 以达到符合 <strong>IEEE</strong>论文的绘图要求</p>
<p>如果要临时使用某种绘图样式，科研使用如下语法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#注意，此处是语法示例，</span>
<span class="c1">#如要运行， 请提前准备好x和y的数据</span>
<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;ieee&#39;</span><span class="p">]):</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><h2 id="案例">案例</h2>
<p>定义函数曲线， 准备数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="k">def</span> <span class="nf">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">**</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">x</span> <span class="o">**</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">p</span><span class="p">))</span>

<span class="n">pparam</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">xlabel</span><span class="o">=</span><span class="s1">&#39;Voltage (mV)&#39;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;Current ($\mu$A)&#39;</span><span class="p">)</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.75</span><span class="p">,</span> <span class="mf">1.25</span><span class="p">,</span> <span class="mi">201</span><span class="p">)</span>
</code></pre></div><h3 id="science样式">science样式</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">]):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Order&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">autoscale</span><span class="p">(</span><span class="n">tight</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">**</span><span class="n">pparam</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig1.pdf&#39;</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig1.jpg&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_12_0.png" width="800" />
    
    
</figure>

<h3 id="scienceieee样式">science+ieee样式</h3>
<p>针对IEEE论文准备的<strong>science+ieee</strong>样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;ieee&#39;</span><span class="p">]):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">100</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Order&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">autoscale</span><span class="p">(</span><span class="n">tight</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">**</span><span class="n">pparam</span><span class="p">)</span>
    <span class="c1"># Note: $\mu$ doesn&#39;t work with Times font (used by ieee style)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;Current (\textmu A)&#39;</span><span class="p">)</span>  
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig2a.pdf&#39;</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig2a.jpg&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_14_0.png" width="800" />
    
    
</figure>

<h3 id="sciencescatter样式">science+scatter样式</h3>
<p><strong>IEEE</strong> 要求图形以黑白打印时必须可读。 <strong>ieee</strong> 样式还可以将图形宽度设置为适合IEEE论文的一列。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;scatter&#39;</span><span class="p">]):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="s1">&#39;k--&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">fill_between</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mf">2.2</span><span class="p">,</span> <span class="mf">1.8</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mf">1.8</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">],</span>
                    <span class="n">color</span><span class="o">=</span><span class="s1">&#39;dodgerblue&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="n">y1</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">r</span><span class="s2">&#34;$^\#$</span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Sample&#39;</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">xlbl</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&#34;$\log_</span><span class="si">{10}</span><span class="s2">\left(\frac{L_\mathrm</span><span class="si">{IR}</span><span class="s2">}{\mathrm</span><span class="si">{L}</span><span class="s2">_\odot}\right)$&#34;</span>
    <span class="n">ylbl</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&#34;$\log_</span><span class="si">{10}</span><span class="s2">\left(\frac{L_\mathrm</span><span class="si">{6.2}</span><span class="s2">}{\mathrm</span><span class="si">{L}</span><span class="s2">_\odot}\right)$&#34;</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="n">xlbl</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="n">ylbl</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig3.pdf&#39;</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig3.jpg&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_16_0.png" width="800" />
    
    
</figure>

<h3 id="dark_background-sciencehigh-vis">dark_background +science+high-vis</h3>
<p>您还可以将这些样式与Matplotlib随附的其他样式结合使用。 例如，dark_background +science+high-vis样式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;dark_background&#39;</span><span class="p">,</span> <span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;high-vis&#39;</span><span class="p">]):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Order&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">autoscale</span><span class="p">(</span><span class="n">tight</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">**</span><span class="n">pparam</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig5.pdf&#39;</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig5.jpg&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_18_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>plotnine绘图 | python的ggplot2语法绘图包</title>
      <link>https://textdata.cn/blog/plotnine/</link>
      <pubDate>Tue, 23 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/plotnine/</guid>
      <description>ggplot2语法，三行代码绘图</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/plotnine%E5%8C%85%E5%AD%A6%E4%B9%A0-Python%E7%89%88%E7%9A%84ggplot2.ipynb">点击跳转到下载链接页面</a></p>
<br>
<p>R语言的ggplot2绘图能力超强，python虽有matplotlib，但是语法臃肿，使用复杂，入门极难，seaborn的出现稍微改善了matplotlib代码量问题，但是定制化程度依然需要借助matplotlib，使用难度依然很大。</p>
<p>好消息是python中有一个plotnine包，可以实现绝大多数ggplot2的绘图功能，两者语法十分相似，R和Python的语法转换成本大大降低。</p>
<ul>
<li>plotnine文档
<a href="https://plotnine.readthedocs.io/en/latest/">https://plotnine.readthedocs.io/en/latest/</a></li>
<li>R语言ggplot2文档
<a href="https://ggplot2.tidyverse.org/reference/index.html">https://ggplot2.tidyverse.org/reference/index.html</a></li>
</ul>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">plotnine</span>

</code></pre></div><h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine.data</span> <span class="kn">import</span> <span class="n">mpg</span>

<span class="c1">#dataframe</span>
<span class="n">mpg</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">manufacturer</th>
<th style="text-align:left">model</th>
<th style="text-align:right">displ</th>
<th style="text-align:right">year</th>
<th style="text-align:right">cyl</th>
<th style="text-align:left">trans</th>
<th style="text-align:left">drv</th>
<th style="text-align:right">cty</th>
<th style="text-align:right">hwy</th>
<th style="text-align:left">fl</th>
<th style="text-align:left">class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">1.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">4</td>
<td style="text-align:left">auto(l5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">18</td>
<td style="text-align:right">29</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">1.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">4</td>
<td style="text-align:left">manual(m5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">21</td>
<td style="text-align:right">29</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2008</td>
<td style="text-align:right">4</td>
<td style="text-align:left">manual(m6)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">20</td>
<td style="text-align:right">31</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2008</td>
<td style="text-align:right">4</td>
<td style="text-align:left">auto(av)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">21</td>
<td style="text-align:right">30</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">6</td>
<td style="text-align:left">auto(l5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">16</td>
<td style="text-align:right">26</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
</tbody>
</table>
<h2 id="快速作图qplot">快速作图qplot</h2>
<p>我们先直接看最简单好用的快速作图函数qplot(x, y, data)</p>
<ul>
<li>横坐标displ</li>
<li>纵坐标cty</li>
<li>数据mpg</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">qplot</span>

<span class="n">qplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> 
      <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">,</span>
      <span class="n">data</span><span class="o">=</span><span class="n">mpg</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_6_0.png" width="800" />
    
    
</figure>

<h2 id="ggplot图层">ggplot图层</h2>
<p>qplot是快速作图函数，如果想让图更好看，进行私人订制，那么我们需要进行图层设计</p>
<p>首先设置ggplot图层（相当于买了一个高级画布），</p>
<ul>
<li>数据mpg</li>
<li>横坐标x轴为displ</li>
<li>纵坐标y轴cty</li>
</ul>
<p>在plotnine中，变量所对应的数据均可通过字段名调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">geom_point</span><span class="p">,</span> <span class="n">aes</span>

<span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_8_0.png" width="800" />
    
    
</figure>

<h2 id="图层叠加">图层叠加</h2>
<p>我们可以看到，已经绘制出一个空的ggplot图层，x轴为displ，y轴为cty。</p>
<p>接下来我们给这个图层上加上数据对应的散点，使用geom_point()直接追加在ggplot图层之上即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_10_0.png" width="800" />
    
    
</figure>

<h2 id="color">color</h2>
<p>在上图中，散点是没有区分每辆车的气缸数cyl。</p>
<p>在geom_point()中，我们可以按照气缸数cyl分门别类，按照颜色显示出来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;cyl&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_12_0.png" width="800" />
    
    
</figure>

<p>上图挺好看的，有时候需要绘制的字段是离散型数值，但是上色后可能不够明显，需要声明该字段为离散型。这时候用factor()来告诉plotnine，这个字段是离散型数值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;factor(cyl)&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_14_0.png" width="800" />
    
    
</figure>

<h2 id="size">size</h2>
<p>有时候为了增加可视化显示的维度数，还可以考虑加入点的大小size</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="s1">&#39;hwy&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_16_0.png" width="800" />
    
    
</figure>

<h2 id="梯度色">梯度色</h2>
<p>如果你想自己设置颜色的梯度，可以通过scale_color_gradient设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">scale_color_gradient</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
<span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;hwy&#39;</span><span class="p">))</span>
<span class="o">+</span> <span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_18_0.png" width="800" />
    
    
</figure>

<h2 id="条形图">条形图</h2>
<p>plotnine中可绘制的图有很多，刚刚已经讲了散点图，接下来我们看看plotnine中的条形图。</p>
<p>首先准备一下数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;variable&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">],</span>
    <span class="s1">&#39;category&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Female&#39;</span><span class="p">,</span> <span class="s1">&#39;Male&#39;</span><span class="p">,</span> <span class="s1">&#39;1-24&#39;</span><span class="p">,</span> <span class="s1">&#39;25-54&#39;</span><span class="p">,</span> <span class="s1">&#39;55+&#39;</span><span class="p">,</span> <span class="s1">&#39;Lo&#39;</span><span class="p">,</span> <span class="s1">&#39;Lo-Med&#39;</span><span class="p">,</span> <span class="s1">&#39;Med&#39;</span><span class="p">,</span> <span class="s1">&#39;High&#39;</span><span class="p">],</span>
    <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">40</span><span class="p">],</span>
<span class="p">})</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Categorical</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">],</span> <span class="n">categories</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Categorical</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">],</span> <span class="n">categories</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">])</span>

<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">variable</th>
<th style="text-align:left">category</th>
<th style="text-align:right">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">gender</td>
<td style="text-align:left">Female</td>
<td style="text-align:right">60</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">gender</td>
<td style="text-align:left">Male</td>
<td style="text-align:right">40</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">age</td>
<td style="text-align:left">1-24</td>
<td style="text-align:right">50</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">age</td>
<td style="text-align:left">25-54</td>
<td style="text-align:right">30</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">age</td>
<td style="text-align:left">55+</td>
<td style="text-align:right">20</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Lo</td>
<td style="text-align:right">10</td>
</tr>
<tr>
<td style="text-align:right">6</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Lo-Med</td>
<td style="text-align:right">25</td>
</tr>
<tr>
<td style="text-align:right">7</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Med</td>
<td style="text-align:right">25</td>
</tr>
<tr>
<td style="text-align:right">8</td>
<td style="text-align:left">income</td>
<td style="text-align:left">High</td>
<td style="text-align:right">40</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">aes</span><span class="p">,</span> <span class="n">geom_text</span><span class="p">,</span> <span class="n">position_dodge</span><span class="p">,</span> <span class="n">geom_point</span>

<span class="c1">#调整文本位置</span>
<span class="n">dodge_text</span> <span class="o">=</span> <span class="n">position_dodge</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">0.9</span><span class="p">)</span>                              <span class="c1"># new</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">,</span> 
                <span class="n">y</span><span class="o">=</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> 
                <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;category&#39;</span><span class="p">))</span> <span class="c1">#类别填充颜色</span>
 <span class="o">+</span> <span class="n">geom_col</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="s1">&#39;dodge&#39;</span><span class="p">,</span> 
            <span class="n">show_legend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>   <span class="c1"># modified</span>
 <span class="o">+</span> <span class="n">geom_text</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="o">=-</span><span class="mf">.5</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;category&#39;</span><span class="p">),</span>                          <span class="c1"># new</span>
             <span class="n">position</span><span class="o">=</span><span class="n">dodge_text</span><span class="p">,</span>
             <span class="n">color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span>  <span class="c1">#文本颜色</span>
             <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>   <span class="c1">#字号</span>
             <span class="n">angle</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="c1">#文本的角度</span>
             <span class="n">va</span><span class="o">=</span><span class="s1">&#39;top&#39;</span><span class="p">)</span>
    
 <span class="o">+</span> <span class="n">lims</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>                                                 <span class="c1"># new</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_22_0.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine.data</span> <span class="kn">import</span> <span class="n">economics_long</span>

<span class="n">economics_long</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">date</th>
<th style="text-align:left">variable</th>
<th style="text-align:right">value</th>
<th style="text-align:right">value01</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">1967-07-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">507.4</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">1967-08-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">510.5</td>
<td style="text-align:right">0.000266001</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">1967-09-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">516.3</td>
<td style="text-align:right">0.00076368</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">1967-10-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">512.9</td>
<td style="text-align:right">0.000471937</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">1967-11-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">518.1</td>
<td style="text-align:right">0.000918132</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">aes</span><span class="p">,</span> <span class="n">geom_line</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">economics_long</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;value01&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">))</span>
 <span class="o">+</span> <span class="n">geom_line</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_25_0.png" width="800" />
    
    
</figure>

<p>plotnine目前已经支持绝大多数ggplot2，但是文档方面没有ggplot2全，所以学习plotnine时可以参考ggplot2。</p>
<ul>
<li>plotnine文档
<a href="https://plotnine.readthedocs.io/en/latest/">https://plotnine.readthedocs.io/en/latest/</a></li>
<li>R语言ggplot2文档
<a href="https://ggplot2.tidyverse.org/reference/index.html">https://ggplot2.tidyverse.org/reference/index.html</a></li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>rpy2包 | 在Jupyter中调用R语言的代码</title>
      <link>https://textdata.cn/blog/call_r_language_code_in_jupyter/</link>
      <pubDate>Mon, 22 Nov 2021 17:40:10 +0600</pubDate>
      
      <guid>/blog/call_r_language_code_in_jupyter/</guid>
      <description>文本数据分析利器Python和R语言！</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E5%9C%A8jupyter%E4%B8%AD%E8%B0%83%E7%94%A8R%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81.zip">点击下载</a></p>
<br>
<p>在数据分析中，Python和R各有千秋，虽然Python或R都能在数据分析打通关，从采集、清洗(预处理)、分析、可视化，但是在不同的环节，不同的语言易用程度不同。Python胜在干脏活累活，诸如数据采集、数据清洗、机器学习等；而R语言胜在统计分析、可视化等。所以，如果你正好Python和R都入门了，可以考虑两者结合。那么就会遇到今天的问题-<strong>如何在jupyter中使用R语言代码？</strong></p>
<h2 id="rpy2包">rpy2包</h2>
<p>rpy2包首先是Python包，ta衔接了Python和R，通过rpy2可以运行R语言相关代码、函数、包。</p>
<p>在Jupyter notebook中主要有两种情况</p>
<ol>
<li>单元格中以Python为主，可以插入<strong>R的代码字符串</strong></li>
<li>单个的单元格要么只有<strong>R代码</strong>，要么只有<strong>Python代码</strong></li>
</ol>
<p>遇到这类问题，各位的电脑要确保</p>
<ol>
<li>电脑已经安装了Python和R</li>
<li>已安装rpy2包</li>
</ol>
<p>安装rpy2包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">rpy2</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="c1">#R代码运行会尽量以DataFrame显示</span>
<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#运行R代码</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="s1">&#39;R代码字符串&#39;</span><span class="p">)</span>
</code></pre></div><h2 id="运行r代码">运行R代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">rpy2</span><span class="o">.</span><span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="s1">&#39;R代码字符串&#39;</span><span class="p">)</span>

</code></pre></div><p>rpy2.robjects.r()函数会识别 <strong>R代码字符串</strong>, 并将其执行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>
<span class="kn">import</span> <span class="nn">warnings</span> 
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="c1">#直接声明，data frame强制转为DataFrame</span>
<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#R代码</span>
<span class="n">r_code</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">library(dplyr)
</span><span class="s2">
</span><span class="s2">text &lt;- c(&#34;Because I could not stop for Death -&#34;,
</span><span class="s2">          &#34;He kindly stopped for me -&#34;,
</span><span class="s2">          &#34;The Carriage held but just Ourselves -&#34;,
</span><span class="s2">          &#34;and Immortality&#34;)
</span><span class="s2">          
</span><span class="s2">text_df &lt;- tibble(docid=1:4, text=text)
</span><span class="s2">text_df
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="c1">#运行R代码</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="n">r_code</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">docid</th>
<th style="text-align:left">text</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">Because I could not stop for Death -</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">He kindly stopped for me -</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">The Carriage held but just Ourselves -</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
<td style="text-align:left">and Immortality</td>
</tr>
</tbody>
</table>
<ol>
<li>准备一个R代码r_code，该代码会生成R语言的tibble数据类型(R语言中的一种data frame)。</li>
<li>robjects.r(r_code) 运行R代码(字符串)</li>
<li>在本例中，使用pandas2ri.activate()强制声明，在Python中将变量text_df以pandas.DataFrame显示</li>
</ol>
<h2 id="调用r数据集">调用R数据集</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">rpy2.robjects.r.data(&#39;R的数据集名&#39;)
</code></pre></div><p>调用R的数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
</code></pre></div><ul>
<li>robjects.r.data(&lsquo;R数据集名&rsquo;) 准备R数据集，此时Python并没有显示该数据集，可以理解为准备数据</li>
<li><code>robjects.r['R数据集名']</code> 导入R的数据集</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#准备iris</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">data</span><span class="p">(</span><span class="s1">&#39;iris&#39;</span><span class="p">)</span>
<span class="c1">#导入iris</span>
<span class="n">iris</span> <span class="o">=</span> <span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">[</span><span class="s1">&#39;iris&#39;</span><span class="p">]</span>
<span class="n">iris</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">Sepal.Length</th>
<th style="text-align:right">Sepal.Width</th>
<th style="text-align:right">Petal.Length</th>
<th style="text-align:right">Petal.Width</th>
<th style="text-align:left">Species</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">5.1</td>
<td style="text-align:right">3.5</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">4.9</td>
<td style="text-align:right">3</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">4.7</td>
<td style="text-align:right">3.2</td>
<td style="text-align:right">1.3</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">4.6</td>
<td style="text-align:right">3.1</td>
<td style="text-align:right">1.5</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3.6</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
</tbody>
</table>
<h2 id="调用r语言包">调用R语言包</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">rpy2</span><span class="o">.</span><span class="n">robjects</span><span class="o">.</span><span class="n">packages</span><span class="o">.</span><span class="n">importr</span><span class="p">(</span><span class="s1">&#39;R包名&#39;</span><span class="p">)</span>
</code></pre></div><p>R语言中的readr包有read_csv()函数，可以读取csv文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">rpy2.robjects.packages</span> <span class="kn">import</span> <span class="n">importr</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#导入R语言中的readr包</span>
<span class="n">readr</span> <span class="o">=</span> <span class="n">importr</span><span class="p">(</span><span class="s2">&#34;readr&#34;</span><span class="p">)</span>
<span class="c1">#使用readr包中的read_csv()函数</span>
<span class="n">mtcars</span> <span class="o">=</span> <span class="n">readr</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;mtcars.csv&#34;</span><span class="p">)</span>
<span class="n">mtcars</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">car</th>
<th style="text-align:right">mpg</th>
<th style="text-align:right">cyl</th>
<th style="text-align:right">disp</th>
<th style="text-align:right">hp</th>
<th style="text-align:right">drat</th>
<th style="text-align:right">wt</th>
<th style="text-align:right">qsec</th>
<th style="text-align:right">vs</th>
<th style="text-align:right">am</th>
<th style="text-align:right">gear</th>
<th style="text-align:right">carb</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">Mazda RX4</td>
<td style="text-align:right">21</td>
<td style="text-align:right">6</td>
<td style="text-align:right">160</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.9</td>
<td style="text-align:right">2.62</td>
<td style="text-align:right">16.46</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">Mazda RX4 Wag</td>
<td style="text-align:right">21</td>
<td style="text-align:right">6</td>
<td style="text-align:right">160</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.9</td>
<td style="text-align:right">2.875</td>
<td style="text-align:right">17.02</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">Datsun 710</td>
<td style="text-align:right">22.8</td>
<td style="text-align:right">4</td>
<td style="text-align:right">108</td>
<td style="text-align:right">93</td>
<td style="text-align:right">3.85</td>
<td style="text-align:right">2.32</td>
<td style="text-align:right">18.61</td>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">Hornet 4 Drive</td>
<td style="text-align:right">21.4</td>
<td style="text-align:right">6</td>
<td style="text-align:right">258</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.08</td>
<td style="text-align:right">3.215</td>
<td style="text-align:right">19.44</td>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">Hornet Sportabout</td>
<td style="text-align:right">18.7</td>
<td style="text-align:right">8</td>
<td style="text-align:right">360</td>
<td style="text-align:right">175</td>
<td style="text-align:right">3.15</td>
<td style="text-align:right">3.44</td>
<td style="text-align:right">17.02</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
</tr>
</tbody>
</table>
<h2 id="cell只运行r代码">Cell只运行R代码</h2>
<p>上面的几个章节中，每个cell中代码均为Python和R的混用，如果在Cell中只运行R代码，</p>
<ol>
<li>可以先单独在一个cell中运行 <code>%load_ext rpy2.ipython</code>,</li>
<li>在另外一个cell中使用<code>%%R</code>声明本cell中使用的是R代码。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">%</span><span class="n">load_ext</span> <span class="n">rpy2</span><span class="o">.</span><span class="n">ipython</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="o">%%</span><span class="n">R</span>

<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>

<span class="nf">ggplot</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">Sepal.Length</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="n">Sepal.Width</span><span class="p">,</span> 
                 <span class="n">color</span><span class="o">=</span><span class="n">Species</span><span class="p">))</span><span class="o">+</span>
<span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="output_17_0.png" width="100%" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="o">%%</span><span class="n">R</span> <span class="o">-</span><span class="n">h</span> <span class="m">550</span> <span class="o">-</span><span class="n">w</span> <span class="m">800</span>  <span class="c1">#设置宽、高</span>

<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>

<span class="nf">ggplot</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">Sepal.Length</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="n">Sepal.Width</span><span class="p">,</span> 
                 <span class="n">color</span><span class="o">=</span><span class="n">Species</span><span class="p">))</span><span class="o">+</span>
<span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="output_18_0.png" width="100%" />
    
    
</figure>

<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用pandas_bokeh做可视化</title>
      <link>https://textdata.cn/blog/pandas_bokeh_vis/</link>
      <pubDate>Thu, 18 Nov 2021 17:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_bokeh_vis/</guid>
      <description>简洁数据可视化</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96pandas_bokeh.zip">点击下载代码</a></p>
<h2 id="pandas_bokeh">pandas_bokeh</h2>
<p>pandas_bokeh可以使得dataframe直接调用bokeh底层代码。通过使用pandas_bokeh，可以在notebook或者html中显示，语法相比于bokeh更简洁易用。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pandas_bokeh</span>
</code></pre></div><h2 id="快速上手">快速上手</h2>
<p>对fruits.csv做一个条形图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">fruits</th>
<th style="text-align:right">2015</th>
<th style="text-align:right">2016</th>
<th style="text-align:right">2017</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">苹果</td>
<td style="text-align:right">2</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">梨</td>
<td style="text-align:right">1</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">香蕉</td>
<td style="text-align:right">4</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">草莓</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">樱桃</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">橘子</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">pandas_bokeh</span>
<span class="kn">import</span> <span class="nn">warnings</span> 
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s2">&#34;ignore&#34;</span><span class="p">)</span> <span class="c1">#忽略某些不影响程序的提示</span>

<span class="c1">#在notebook中能显示可视化结果</span>
<span class="n">pandas_bokeh</span><span class="o">.</span><span class="n">output_notebook</span><span class="p">()</span>

<span class="c1">#将fruits列设置为行索引</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>


<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> 
              <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;fruits&#39;</span><span class="p">,</span> <span class="c1">#将fruits列选做x轴</span>
              <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;2015&#39;</span><span class="p">,</span> <span class="s1">&#39;2016&#39;</span><span class="p">,</span> <span class="s1">&#39;2017&#39;</span><span class="p">],</span> <span class="c1">#将年份选做y轴</span>
              <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;水果价格(元/斤)&#39;</span><span class="p">,</span>
              <span class="n">title</span><span class="o">=</span><span class="s1">&#39;水果&#39;</span><span class="p">,</span>
              <span class="n">show_figure</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#显示</span>
</code></pre></div>
<figure >
    
        <img src="img/2.gif" width="800" />
    
    
</figure>

<p>上面的例子已经可以看到该库的简洁优美之处，现在我们多学点</p>
<h2 id="pandas_bokeh输出设定">pandas_bokeh输出设定</h2>
<ul>
<li>pandas_bokeh.output_notebook() 在notebook中能显示可视化结果</li>
<li>pandas_bokeh.output_file(filename) 将结果输出到html文件中</li>
</ul>
<h2 id="支持可视化图种类">支持可视化图种类</h2>
<ul>
<li>line</li>
<li>bar</li>
<li>point</li>
<li>scatter</li>
<li>histogram</li>
<li>area</li>
<li>pie</li>
<li>map</li>
</ul>
<p>以bar为例，调用可视化接口时，有以下两种使用方法</p>
<ul>
<li>df.plot_bokeh.line(&hellip;)</li>
<li>df.plot_bokeh(kind=&lsquo;line&rsquo;)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fake_stocks.xlsx&#39;</span><span class="p">)</span>

<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;line&#34;</span><span class="p">,</span> 
              <span class="n">x</span><span class="o">=</span><span class="s1">&#39;日期&#39;</span><span class="p">,</span> <span class="c1">#将excel中的日期列当做x轴</span>
              <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Google&#39;</span><span class="p">,</span> <span class="s1">&#39;Apple&#39;</span><span class="p">])</span> <span class="c1">#将&#39;Google&#39;, &#39;Apple&#39;两列作为y轴</span>
</code></pre></div>
<figure >
    
        <img src="img/3.gif" width="800" />
    
    
</figure>

<h2 id="高级参数">高级参数</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">figsize</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">xlim</span><span class="p">,</span> <span class="n">ylim</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span>
              <span class="n">logx</span><span class="p">,</span> <span class="n">logy</span><span class="p">,</span> <span class="n">xticks</span><span class="p">,</span> <span class="n">yticks</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">colormap</span><span class="p">,</span> <span class="n">hovertool</span><span class="p">,</span> 
              <span class="n">zooming</span><span class="p">,</span> <span class="n">panning</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div><ul>
<li>kind: 支持的图种类&quot;line&quot;, &ldquo;point&rdquo;, &ldquo;scatter&rdquo;, &ldquo;bar&rdquo; ,&ldquo;histogram&quot;等</li>
<li>x: 选中数据某列名作为x轴。如果x不传入参数，会默认使用df的索引作为x轴</li>
<li>y: 将数据中的某列或某些列指定为y轴</li>
<li>figsize: 图的尺寸,如figsize=(600, 350)</li>
<li>title:  图的标题</li>
<li>xlim/ylim: 设置图的x轴和y轴的范围</li>
<li>xlabel/ylabel: 设置x轴和y轴的名字</li>
<li>logx/logy: 布尔型值，对x和y的数据是否进行log变换</li>
<li>xticks/yticks: 显性定义横纵坐标刻度</li>
<li>color: 对图中使用同一的颜色，如果想定义多种颜色，请使用colormap参数</li>
<li>colormap: 可以对图中的不同对象设置颜色， 传入的是颜色字符串列表。</li>
<li>hovertool: 默认True，鼠标放在图上会悬浮显示具体信息。</li>
<li>zooming: 布尔值，默认True支持缩放</li>
<li>panning: 布尔值，默认True支持平移</li>
<li>kwargs**: 更多参数设定请看官方文档</li>
</ul>
<h2 id="文档">文档</h2>
<ul>
<li>pandas_bokeh文档地址https://github.com/PatrikHlobil/Pandas-Bokeh</li>
<li>Bokeh官方文档地址https://docs.bokeh.org/en/latest/</li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Pandas做数据预处理</title>
      <link>https://textdata.cn/blog/pre_process_in_pandas/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pre_process_in_pandas/</guid>
      <description>4000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA">https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA</a></p>
<p>author: 俊欣</p>
<p>公众号: 关于数据分析与可视化</p>
</blockquote>
<p>数据预处理过程当中, 大致会遇到</p>
<ul>
<li>加载数据</li>
<li>处理缺失值如何处理</li>
<li>处理离散型数据该如何处理</li>
<li>数据的标准化</li>
<li>将数据集划分成训练集与测试集</li>
<li>去掉重复值</li>
</ul>
<br>
<h2 id="加载数据">加载数据</h2>
<p>我们导入必要的库并且加载数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data.csv&#34;</span><span class="p">)</span>
</code></pre></div><p>在进行数据分析前，可以查看一下数据的总体情况，从宏观上了解数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span> <span class="c1">#显示前五行数据</span>
<span class="n">data</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span> <span class="c1">#显示末尾五行数据</span>
<span class="n">data</span><span class="o">.</span><span class="n">info</span><span class="p">()</span> <span class="c1">#查看各字段的信息</span>
<span class="n">data</span><span class="o">.</span><span class="n">shape</span> <span class="c1">#查看数据集有几行几列,data.shape[0]是行数,data.shape[1]是列数</span>
<span class="n">data</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span> <span class="c1">#查看数据的大体情况，均值，最值，分位数值...</span>
<span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>   <span class="c1">#得到列名的list</span>
</code></pre></div><br>
<h2 id="处理缺失值">处理缺失值</h2>
<p>缺失值一直都是数据预处理当中比较常见的一个问题，而在处理类似的问题的时候，方式方法也是多种多样的，我们一一来介绍，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;小明&#39;</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">55</span><span class="p">],[</span><span class="s1">&#39;小红&#39;</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">60</span><span class="p">],[</span><span class="s1">&#39;小王&#39;</span><span class="p">,</span><span class="mi">26</span><span class="p">]]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span><span class="s1">&#39;Age&#39;</span><span class="p">,</span><span class="s1">&#39;Weight&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
2   小王   26     NaN
</code></pre></div><p>针对上面的数据集，我们通过pandas中的方法看一下缺失值的情况</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Name    Age  Weight
0  False  False   False
1  False  False   False
2  False  False    True
</code></pre></div><p>另外我们也可以这么来做，检测每一列空值的数量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Name      0
Age       0
Weight    1
dtype: int64
</code></pre></div><p>而在面对缺失值的时候，我们一方面可以将其去除</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
</code></pre></div><p>当然我们也可以对缺失值进行填充，例如用平均值来填充</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
2   小王   26    57.5
</code></pre></div><p>除了pandas当中的方法之外，我们也可以使用sklearn库当中的一些函数方法，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.impute</span> <span class="kn">import</span> <span class="n">SimpleImputer</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">SimpleImputer</span><span class="p">(</span><span class="n">missing_values</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="n">strategy</span><span class="o">=</span><span class="s1">&#39;mean&#39;</span><span class="p">)</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]])</span>
</code></pre></div><p>最后返回的结果也和上面的fillna()方法返回的结果一致，我们用平均值来代码空值，那么同样道理我们也可以用中位数、众数等统计值来进行替换，这里就不做多说</p>
<br>
<h2 id="处理离散型数据">处理离散型数据</h2>
<p>另外当数据集当中出现离散型数据的时候，我们也要进行相应的处理，毕竟在后面的建模过程当中，机器学习的模型需要的是连续型的数据。
离散型数据也分为两种，一种是有序的离散变量，就比方说是衣服的尺码，有M码的、也有L码的、也还有与之更大的尺码，另外一种则是无序的，例如衣服的颜色，颜色之间没有大小之分，因此在编码的时候也应该另外处理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_cat</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> 
                     <span class="p">[[</span><span class="s1">&#39;green&#39;</span><span class="p">,</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="mf">10.1</span><span class="p">,</span><span class="s1">&#39;class1&#39;</span><span class="p">],</span>
                      <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span><span class="s1">&#39;L&#39;</span><span class="p">,</span><span class="mf">20.1</span><span class="p">,</span><span class="s1">&#39;class2&#39;</span><span class="p">],</span>
                      <span class="p">[</span><span class="s1">&#39;white&#39;</span><span class="p">,</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="mf">30.1</span><span class="p">,</span><span class="s1">&#39;class1&#39;</span><span class="p">]],</span> <span class="p">)</span>
<span class="n">df_cat</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">,</span><span class="s1">&#39;size&#39;</span><span class="p">,</span><span class="s1">&#39;price&#39;</span><span class="p">,</span><span class="s1">&#39;classlabel&#39;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   color size  price classlabel
0  green    M   10.1     class1
1   blue    L   20.1     class2
2  white    M   30.1     class1
</code></pre></div><p>对于有序的离散型变量，我们可以使用map()函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">size_mapping</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;M&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;L&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">}</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">size_mapping</span><span class="p">)</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    1
1    2
2    1
Name: size, dtype: int64
</code></pre></div><p>另外我们也可以使用sklearn库中的LabelEncoder()方法来处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span>
<span class="n">class_le</span> <span class="o">=</span> <span class="n">LabelEncoder</span><span class="p">()</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">class_le</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
</code></pre></div><p>而对于无序的离散型变量，我们可以采用独热编码，例如对color这一列进行编码过之后会有color_green、color_blue以及color_white三个特征，特征值为0或者1</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s2">&#34;color&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   color_blue  color_green  color_white
0           0            1            0
1           1            0            0
2           0            0            1

</code></pre></div><p>然后我们将此并入到源数据当中去</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_cat</span><span class="p">[[</span><span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dummies</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   size  price  color_blue  color_green  color_white
0     1   10.1           0            1            0
1     2   20.1           1            0            0
2     1   30.1           0            0            1
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">但是考虑到后面搭建模型的时候</span><span class="err">，</span><span class="n">变量与变量之间应该保持独立</span><span class="err">，</span><span class="n">而不应该是存在依赖的关系</span><span class="err">，</span><span class="n">对于color这一列中存在三种颜色</span><span class="err">，</span><span class="n">分别是blue</span><span class="err">、</span><span class="n">green以及white</span><span class="err">，</span><span class="n">当前两类取值都为0的时候</span><span class="err">，</span><span class="n">color只可能是white</span>
<span class="n">所以将get_dummies</span><span class="p">()</span><span class="n">方法中的drop_first默认值为False改为True</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dummies</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s2">&#34;color&#34;</span><span class="p">,</span> <span class="n">drop_first</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">df_cat</span><span class="p">[[</span><span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dummies</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="数据的标准化">数据的标准化</h2>
<p>由于不同的变量，它们往往存在不同的单位以及不同的取值范围，有时候取值范围的差异较大会对机器学习的模型带来很多不必要的麻烦。因此为了最后预测结果的可靠性，我们需要对数据进行标准化，对数据按比例进行缩放，使之落入一个小的特定区间。而标准化算法有</p>
<ul>
<li>z-score 标准化</li>
</ul>
<p>这种方法根据原始数据的均值和标准差进行数据的标准化，经过处理的数据符合正态分布，即均值为0，标准差为1 ，当然sklearn库当中的代码则是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="n">sc</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><ul>
<li>线性归一化</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">MinMaxScaler</span><span class="p">()</span>
<span class="n">min_max_scaler</span> <span class="o">=</span> <span class="n">MinMaxScaler</span><span class="p">()</span>
<span class="n">X_train_minmax</span> <span class="o">=</span> <span class="n">min_max_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">X_train_minmax</span><span class="p">)</span>
</code></pre></div><p>训练集中的数据经过转化，取值范围都集中在[0,1]之间</p>
<ul>
<li>MaxAbsScaler()方法</li>
</ul>
<p>MaxAbsScaler()方法和上述的线性归一化效果相类似，训练集中的数据经过转化，取值范围在[-1,1]之间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">max_abs_scaler</span> <span class="o">=</span> <span class="n">preprocessing</span><span class="o">.</span><span class="n">MaxAbsScaler</span><span class="p">()</span>
<span class="n">X_train_maxabs</span> <span class="o">=</span> <span class="n">max_abs_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_test_maxabs</span> <span class="o">=</span> <span class="n">max_abs_scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><ul>
<li>RobustScaler()方法</li>
</ul>
<p>要是当数据集当中存在很多的极值的时候，利用平均值和标准差来进行数据的标准化效果可能并不理想，毕竟极值会影响到平均值和标准差的计算，这个时候我们就需要用到RobustScaler()方法，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">RobustScaler</span>
<span class="n">transformer</span> <span class="o">=</span> <span class="n">RobustScaler</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">transformer</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="将数据集划分成训练集和测试集">将数据集划分成训练集和测试集</h2>
<p>在建模之前，我们需要将数据集分成训练集和测试集，我们在训练集上面建立模型，训练与优化模型，然后再将模型放到测试集上面，评估一下模型的性能以及优化的效果，在sklearn库中也有相对应的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>上面的变量y具体指的是被预测的因变量，而x则是在预测中使用的自变量</p>
<br>
<h2 id="去除重复值">去除重复值</h2>
<p>在pandas当中也有对应的方法来去除掉重复值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">br</span><span class="o">&gt;</span>

<span class="c1">## 代码下载</span>
<span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">hidadeng</span><span class="o">/</span><span class="n">DaDengAndHisPython</span><span class="o">/</span><span class="n">blob</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="mi">4000</span><span class="n">字归纳总结PandasSklearn数据预处理</span><span class="o">.</span><span class="n">ipynb</span>
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Pandas处理文本数据</title>
      <link>https://textdata.cn/blog/text_analysis_in_pandas/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/text_analysis_in_pandas/</guid>
      <description>2000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/MmfEtyKaMqNn_Ik1oJtitQ">https://mp.weixin.qq.com/s/MmfEtyKaMqNn_Ik1oJtitQ</a></p>
<p>author: 俊欣</p>
<p>公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86Pandas%E7%AF%87.ipynb">点击Pandas本文代码下载</a></p>
<p>今天我们来谈论一下pandas库当中文本数据的操作，希望大家再看完本篇文章之后会有不少的收获，我们大致会讲</p>
<ul>
<li>创建一个包含文本数据的DataFrame</li>
<li>常用处理文本数据的方法的总结</li>
<li>正则表达式与DataFrame内部方法的结合</li>
</ul>
<br>
<h2 id="创建文本内容的数据">创建文本内容的数据</h2>
<p>我们先来创建一个包含文本数据的DataFrame，来供我们后面使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
   <span class="s2">&#34;姓&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;李&#34;</span><span class="p">,</span><span class="s2">&#34;王&#34;</span><span class="p">,</span><span class="s2">&#34;戴&#34;</span><span class="p">,</span> <span class="s2">&#34;李&#34;</span><span class="p">,</span> <span class="s2">&#34;张&#34;</span><span class="p">],</span>
   <span class="s2">&#34;名&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;华&#34;</span><span class="p">,</span><span class="s2">&#34;硕&#34;</span><span class="p">,</span><span class="s2">&#34;建业&#34;</span><span class="p">,</span> <span class="s2">&#34;四&#34;</span><span class="p">,</span> <span class="s2">&#34;三&#34;</span><span class="p">],</span>
   <span class="s2">&#34;户籍地址&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34; 浙江省·宁波市 &#34;</span><span class="p">,</span> <span class="s2">&#34;   浙江省·杭州市    &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·丽水市  &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·衢州市 &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·湖州市           &#34;</span><span class="p">],</span>
   <span class="s2">&#34;微信ID&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Tomoplplplut1248781&#34;</span><span class="p">,</span> <span class="s2">&#34;Smopopo857&#34;</span><span class="p">,</span> <span class="s2">&#34;Adahuhuifhhjfj&#34;</span><span class="p">,</span> <span class="s2">&#34;Tull1945121&#34;</span><span class="p">,</span> <span class="s2">&#34;ZPWERERTFD599557&#34;</span><span class="p">],</span>
   <span class="s2">&#34;邮箱地址&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;tom02159@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;smitt7821@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;adams623@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;tull0305@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;five7532@163.com&#34;</span><span class="p">]</span>
<span class="p">})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | 姓   | 名   | 户籍地址      | 微信ID              | 邮箱地址          |
|---:|:-----|:-----|:--------------|:--------------------|:------------------|
|  0 | 李   | 华   | 浙江省·宁波市 | Tomoplplplut1248781 | tom02159@163.com  |
|  1 | 王   | 硕   | 浙江省·杭州市 | Smopopo857          | smitt7821@163.com |
|  2 | 戴   | 建业 | 浙江省·丽水市 | Adahuhuifhhjfj      | adams623@163.com  |
|  3 | 李   | 四   | 浙江省·衢州市 | Tull1945121         | tull0305@163.com  |
|  4 | 张   | 三   | 浙江省·湖州市 | ZPWERERTFD599557    | five7532@163.com  |
</code></pre></div><br>
<h2 id="常用处理文本数据的方法总结">常用处理文本数据的方法总结</h2>
<p>Python当中用来处理字符串数据的方法有很多，基本上都可以在DataFrame内部拿来使用，例如lower()方法和upper()方法，给字母大小写</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    tomoplplplut1248781
1             smopopo857
2         adahuhuifhhjfj
3            tull1945121
4       zpwerertfd599557
Name: 微信ID, dtype: object
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">len</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    19
1    10
2    14
3    11
4    16
Name: 微信ID, dtype: int64
</code></pre></div><p>当然我们看到户籍地址这一列中的数据有很多的空格</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0                浙江省·宁波市 
1             浙江省·杭州市    
2               浙江省·丽水市  
3                浙江省·衢州市 
4      浙江省·湖州市           
Name: 户籍地址, dtype: object
</code></pre></div><p>我们可以使用处理字符串时的strip()方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省·宁波市
1    浙江省·杭州市
2    浙江省·丽水市
3    浙江省·衢州市
4    浙江省·湖州市
Name: 户籍地址, dtype: object
</code></pre></div><p>与之相类似的还有lstrip()方法以及rstrip()方法，这里就不做赘述。</p>
<p>在字符串的处理过程当中，startswith()方法和endswith()方法也是用的非常的频繁，例如我们想要挑选出户籍地址是“宁波市”的数据，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
<span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;宁波市&#34;</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID              邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781  tom02159@163.com
</code></pre></div><p>另外我们还可以使用replace()方法来实现当中的字符串的替换</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="s2">&#34;--&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省--宁波市
1    浙江省--杭州市
2    浙江省--丽水市
3    浙江省--衢州市
4    浙江省--湖州市
Name: 户籍地址, dtype: object
</code></pre></div><p>那既然用到了replace()方法，那么split()方法也可以尝试一下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    [浙江省, 宁波市]
1    [浙江省, 杭州市]
2    [浙江省, 丽水市]
3    [浙江省, 衢州市]
4    [浙江省, 湖州市]
Name: 户籍地址, dtype: object
</code></pre></div><p>在经过spilit()方法的切割过之后就变成了列表的形式，然后可以通过get()方法或者[]来获取里面的元素，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

</code></pre></div><p>或者</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省
1    浙江省
2    浙江省
3    浙江省
4    浙江省
Name: 户籍地址, dtype: object
</code></pre></div><p>那么获取列表当中的第二个元素也是同样的道理，当然我们也可以在split()方法当中添加expand=True这个参数，来将上面列表形式的数据转化成DataFrame格式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">      0    1
0  浙江省  宁波市
1  浙江省  杭州市
2  浙江省  丽水市
3  浙江省  衢州市
4  浙江省  湖州市
</code></pre></div><p>同样地，我们可以在后面添加[]来获取我们想要的元素</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    宁波市
1    杭州市
2    丽水市
3    衢州市
4    湖州市
Name: 1, dtype: object
</code></pre></div><br>
<h2 id="正则表达式与dataframe内部方法的结合">正则表达式与DataFrame内部方法的结合</h2>
<p>假如我们想要提取文本数据内部的一部分数据，可以结合正则表达式来使用，例如我们想要提取“微信ID”这一列当中的字母和数字，并且将两者分开来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">two_groups</span> <span class="o">=</span> <span class="s2">&#34;([a-zA-Z]+)([0-9]+)&#34;</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">two_groups</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">              0        1
0  Tomoplplplut  1248781
1       Smopopo      857
2           NaN      NaN
3          Tull  1945121
4    ZPWERERTFD   599557
</code></pre></div><p>当然了，如果想是要提取文本数据中的部分数据，可以直接在str方法后面添加索引，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;邮箱地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="p">[</span><span class="o">-</span><span class="mi">8</span><span class="p">:]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    @163.com
1    @163.com
2    @163.com
3    @163.com
4    @163.com
Name: 邮箱地址, dtype: object
</code></pre></div><p>当然，从另外一个角度讲，正则表达式也可以帮助我们确认文本数据是否符合某种规律，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">two_groups</span> <span class="o">=</span> <span class="s2">&#34;([a-zA-Z]+)([0-9]+)&#34;</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">two_groups</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0     True
1     True
2    False
3     True
4     True
Name: 微信ID, dtype: bool
</code></pre></div><p>当中有一个为False，不满足字母+数字的规律，我们再进一步，将满足条件的数据提取出来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">two_groups</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID               邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781   tom02159@163.com
1  王  硕  浙江省·杭州市           Smopopo857  smitt7821@163.com
3  李  四  浙江省·衢州市          Tull1945121   tull0305@163.com
4  张  三  浙江省·湖州市     ZPWERERTFD599557   five7532@163.com
</code></pre></div><p>针对文本数据而言，contains()方法也能够派上用场，例如下面的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓   名                  户籍地址                 微信ID               邮箱地址
0  李   华              浙江省·宁波市   Tomoplplplut1248781   tom02159@163.com
1  王   硕           浙江省·杭州市               Smopopo857  smitt7821@163.com
2  戴  建业             浙江省·丽水市         Adahuhuifhhjfj   adams623@163.com
3  李   四              浙江省·衢州市           Tull1945121   tull0305@163.com
4  张   三    浙江省·湖州市                ZPWERERTFD599557   five7532@163.com
5  黄   五               浙江省·宁波市        hunhunhu45652  1erdcvf127@16.com
</code></pre></div><p>我们用contains()来提取出户籍地址为“宁波市”的内容，可以这么做</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s2">&#34;宁波市&#34;</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID               邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781   tom02159@163.com
5  黄  五  浙江省·宁波市        hunhunhu45652  1erdcvf127@16.com
</code></pre></div><p>暂时就这些了，下一篇原创的文章安排在周天，非技术方面的，期待一下？</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐20个好用到爆的Pandas函数方法</title>
      <link>https://textdata.cn/blog/pandas_20_most_usefull_functions/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_20_most_usefull_functions/</guid>
      <description>4000字详细说明</description>
      <content:encoded><![CDATA[<p>今天分享几个不为人知的pandas函数，大家可能平时看到的不多，但是使用起来倒是非常的方便，也能够帮助我们数据分析人员大幅度地提高工作效率，同时也希望大家看完之后能够有所收获</p>
<br>
<br>
<h2 id="items方法">items()方法</h2>
<p>pandas当中的<code>items()</code>方法可以用来遍历数据集当中的每一列，同时返回列名以及每一列当中的内容，通过以元组的形式，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;species&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;bear&#39;</span><span class="p">,</span> <span class="s1">&#39;bear&#39;</span><span class="p">,</span> <span class="s1">&#39;marsupial&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;population&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1864</span><span class="p">,</span> <span class="mi">22000</span><span class="p">,</span> <span class="mi">80000</span><span class="p">]},</span>
                   <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;panda&#39;</span><span class="p">,</span> <span class="s1">&#39;polar&#39;</span><span class="p">,</span> <span class="s1">&#39;koala&#39;</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   population |
|:------|:----------|-------------:|
| panda | bear      |         1864 |
| polar | bear      |        22000 |
| koala | marsupial |        80000 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">label</span><span class="p">,</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;label: </span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;content: </span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;=&#34;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div><pre><code>label: species
content: panda         bear
polar         bear
koala    marsupial
Name: species, dtype: object
==================================================
label: population
content: panda     1864
polar    22000
koala    80000
Name: population, dtype: int64
==================================================
</code></pre>
<p>相继的打印出了‘species’和‘population’这两列的列名和相应的内容</p>
<br>
<h2 id="iterrows方法">iterrows()方法</h2>
<p>而对于<code>iterrows()</code>方法而言，其功能则是遍历数据集当中的每一行，返回每一行的索引以及带有列名的每一行的内容，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">label</span><span class="p">,</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;label: </span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;content: </span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;=&#34;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div><pre><code>label: panda
content: species       bear
population    1864
Name: panda, dtype: object
==================================================
label: polar
content: species        bear
population    22000
Name: polar, dtype: object
==================================================
label: koala
content: species       marsupial
population        80000
Name: koala, dtype: object
==================================================
</code></pre>
<br>
<h2 id="insert方法">insert()方法</h2>
<p><code>insert()</code>方法主要是用于在数据集当中的特定位置处插入数据。在DataFrame数据集当中，列的索引也是从0开始的</p>
<p>示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#在第二列插入size字段，内容如下</span>
<span class="n">df</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="p">[</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">3000</span><span class="p">,</span> <span class="mi">4000</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
|       | species   |   size |   population |
|:------|:----------|-------:|-------------:|
| panda | bear      |   2000 |         1864 |
| polar | bear      |   3000 |        22000 |
| koala | marsupial |   4000 |        80000 |
</code></pre></div><br>
<h2 id="assign方法">assign()方法</h2>
<p><code>assign()</code>方法可以用来在数据集当中添加新的列，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">size_1</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">9</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |
|:------|:----------|-------:|-------------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |
| polar | bear      |   3000 |        22000 |  39632   |
| koala | marsupial |   4000 |        80000 | 144032   |
</code></pre></div><p>从上面的例子中可以看出，我们通过一个lambda匿名函数，在数据集当中添加一个新的列，命名为<strong>size_1</strong>，当然我们也可以通过assign()方法来创建不止一个列</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">size_1</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">9</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">32</span><span class="p">,</span>
               <span class="n">size_2</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |
|:------|:----------|-------:|-------------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   |
</code></pre></div><br>
<h2 id="eval方法">eval()方法</h2>
<p><code>eval()</code>方法主要是用来执行用字符串来表示的运算过程的，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s2">&#34;size_3 = size_1 + size_2&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |   size_3 |
|:------|:----------|-------:|-------------:|---------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |   6379.6 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |  74842   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   | 272042   |
</code></pre></div><p>当然我们也可以同时对执行多个运算过程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span><span class="s1">size_3 = size_1 + size_2
</span><span class="s1">size_4 = size_1 - size_2
</span><span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |   size_3 |   size_4 |
|:------|:----------|-------:|-------------:|---------:|---------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |   6379.6 |    394.8 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |  74842   |   4422   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   | 272042   |  16022   |
</code></pre></div><br>
<h2 id="pop方法">pop()方法</h2>
<p>pop()方法主要是用来删除掉数据集中特定的某一列数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">&#34;size_3&#34;</span><span class="p">)</span>
</code></pre></div><p>而原先的数据集当中就没有这个‘size_3’这一例的数据了</p>
<br>
<h2 id="truncate方法">truncate()方法</h2>
<p><code>truncate()</code>方法主要是根据行索引来筛选指定行的数据的，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;B&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;j&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;C&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">]},</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | A   | B   | C   |
|---:|:----|:----|:----|
|  1 | a   | f   | k   |
|  2 | b   | g   | l   |
|  3 | c   | h   | m   |
|  4 | d   | i   | n   |
|  5 | e   | j   | o   |
</code></pre></div><p>我们使用<code>truncate()</code>方法来做一下尝试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">truncate</span><span class="p">(</span><span class="n">before</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">after</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | A   | B   | C   |
|---:|:----|:----|:----|
|  2 | b   | g   | l   |
|  3 | c   | h   | m   |
|  4 | d   | i   | n   |
</code></pre></div><p>我们看到参数before和after存在于truncate()方法中，目的就是把行索引2之前和行索引4之后的数据排除在外，筛选出剩余的数据</p>
<br>
<h2 id="count方法">count()方法</h2>
<p><code>count()</code>方法主要是用来计算某一列当中非空值的个数，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;Name&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="s2">&#34;Myla&#34;</span><span class="p">,</span> <span class="s2">&#34;Lewis&#34;</span><span class="p">,</span> <span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="s2">&#34;John&#34;</span><span class="p">],</span>
                   <span class="s2">&#34;Age&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mf">24.</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">26</span><span class="p">],</span>
                   <span class="s2">&#34;Single&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">]})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | Name   |   Age |   Single |
|---:|:-------|------:|---------:|
|  0 | John   |    24 |        1 |
|  1 | Myla   |   nan |        1 |
|  2 | Lewis  |    25 |      nan |
|  3 | John   |    33 |        1 |
|  4 | John   |    26 |        0 |
</code></pre></div><p>我们使用count()方法来计算一下数据集当中非空值的个数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</code></pre></div><pre><code>Name      5
Age       4
Single    4
dtype: int64
</code></pre>
<br>
<h2 id="add_prefix方法add_suffix方法">add_prefix()方法/add_suffix()方法</h2>
<p><code>add_prefix()</code>方法和<code>add_suffix()</code>方法分别会给列名以及行索引添加后缀和前缀，对于<code>Series()</code>数据集而言，前缀与后缀是添加在行索引处，而对于<code>DataFrame()</code>数据集而言，前缀与后缀是添加在列索引处，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">s</span>
</code></pre></div><pre><code>0    1
1    2
2    3
3    4
dtype: int64
</code></pre>
<p>我们使用add_prefix()方法与add_suffix()方法在Series()数据集上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">.</span><span class="n">add_prefix</span><span class="p">(</span><span class="s1">&#39;row_&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>row_0    1
row_1    2
row_2    3
row_3    4
dtype: int64
</code></pre>
<p>又例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">.</span><span class="n">add_suffix</span><span class="p">(</span><span class="s1">&#39;_row&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>0_row    1
1_row    2
2_row    3
3_row    4
dtype: int64
</code></pre>
<p>而对于<code>DataFrame()</code>形式数据集而言，<code>add_prefix()</code>方法以及<code>add_suffix()</code>方法是将前缀与后缀添加在列索引处的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> 
                   <span class="s1">&#39;B&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   A |   B |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">add_prefix</span><span class="p">(</span><span class="s2">&#34;column_&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   column_A |   column_B |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">add_suffix</span><span class="p">(</span><span class="s2">&#34;_column&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   A_column |   B_column |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<h2 id="clip方法">clip()方法</h2>
<p><code>clip()</code>方法主要是通过设置阈值来改变数据集当中的数值，当数值超过阈值的时候，就做出相应的调整</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;col_0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="s1">&#39;col_1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">]}</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
|    |   col_0 |   col_1 |
|---:|--------:|--------:|
|  0 |       9 |      -2 |
|  1 |      -3 |      -7 |
|  2 |       0 |       6 |
|  3 |      -1 |       8 |
|  4 |       5 |      -5 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">lower</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="n">upper</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   col_0 |   col_1 |
|---:|--------:|--------:|
|  0 |       4 |      -2 |
|  1 |      -3 |      -4 |
|  2 |       0 |       4 |
|  3 |      -1 |       4 |
|  4 |       4 |      -4 |
</code></pre></div><p>我们看到参数lower和upper分别代表阈值的上限与下限，数据集当中超过上限与下限的值会被替代。</p>
<br>
<h2 id="filter方法">filter()方法</h2>
<p>pandas当中的<code>filter()</code>方法是用来筛选出特定范围的数据的，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">])),</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| A  |     1 |     2 |       3 |
| B  |     4 |     5 |       6 |
| C  |     7 |     8 |       9 |
| D  |    10 |    11 |      12 |
</code></pre></div><p>我们使用filter()方法来筛选数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">items</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   three |
|:---|------:|--------:|
| A  |     1 |       3 |
| B  |     4 |       6 |
| C  |     7 |       9 |
| D  |    10 |      12 |
</code></pre></div><p>我们还可以使用正则表达式来筛选数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#字段名e结尾的列</span>
<span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">regex</span><span class="o">=</span><span class="s1">&#39;e$&#39;</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   three |
|:---|------:|--------:|
| A  |     1 |       3 |
| B  |     4 |       6 |
| C  |     7 |       9 |
| D  |    10 |      12 |

</code></pre></div><p>当然通过参数axis来调整筛选行方向或者是列方向的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">like</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| B  |     4 |     5 |       6 |
</code></pre></div><br>
<h2 id="first方法">first()方法</h2>
<p>当数据集当中的行索引是日期的时候，可以通过该方法来筛选前面几行的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">index_1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s1">&#39;2021-11-11&#39;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s1">&#39;2D&#39;</span><span class="p">)</span>
<span class="n">ts</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]},</span> <span class="n">index</span><span class="o">=</span><span class="n">index_1</span><span class="p">)</span>
<span class="n">ts</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   A |
|:--------------------|----:|
| 2021-11-11 00:00:00 |   1 |
| 2021-11-13 00:00:00 |   2 |
| 2021-11-15 00:00:00 |   3 |
| 2021-11-17 00:00:00 |   4 |
| 2021-11-19 00:00:00 |   5 |
</code></pre></div><br>
<p>我们使用first()方法来进行一些操作，例如筛选出前面3天的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ts</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="s1">&#39;3D&#39;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   A |
|:--------------------|----:|
| 2021-11-11 00:00:00 |   1 |
| 2021-11-13 00:00:00 |   2 |
</code></pre></div><br>
<h2 id="isin方法">isin()方法</h2>
<p>isin()方法主要是用来确认数据集当中的数值是否被包含在给定的列表当中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">])),</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| A  |     0 |     0 |       1 |
| B  |     0 |     1 |       0 |
| C  |     0 |     0 |       0 |
| D  |     0 |     0 |       1 |
</code></pre></div><p>若是数值被包含在列表当中了，也就是3、5、12当中，返回的是True，否则就返回False</p>
<br>
<h2 id="dfplotarea方法">df.plot.area()方法</h2>
<p>下面我们来讲一下如何在Pandas当中通过一行代码来绘制图表，将所有的列都通过面积图的方式来绘制</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;sales&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">65</span><span class="p">],</span>
    <span class="s1">&#39;signups&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">13</span><span class="p">],</span>
    <span class="s1">&#39;visits&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span>
<span class="p">},</span> 
    <span class="n">index</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="s1">&#39;2021/01/01&#39;</span><span class="p">,</span> 
                        <span class="n">end</span><span class="o">=</span><span class="s1">&#39;2021/07/01&#39;</span><span class="p">,</span> 
                        <span class="n">freq</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">))</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   sales |   signups |   visits |
|:--------------------|--------:|----------:|---------:|
| 2021-01-31 00:00:00 |      30 |         7 |       20 |
| 2021-02-28 00:00:00 |      20 |         9 |       42 |
| 2021-03-31 00:00:00 |      38 |         6 |       28 |
| 2021-04-30 00:00:00 |      95 |        12 |       62 |
| 2021-05-31 00:00:00 |     106 |        18 |       81 |
| 2021-06-30 00:00:00 |      65 |        13 |       50 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">area</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div>
<figure >
    
        <img src="img/output_79_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotbar方法">df.plot.bar()方法</h2>
<p>下面我们看一下如何通过一行代码来绘制柱状图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;label&#39;</span><span class="p">:[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span> <span class="s1">&#39;values&#39;</span><span class="p">:[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">70</span><span class="p">]})</span>
<span class="n">df</span><span class="o">.</span><span class="n">to_markdown</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | label   |   values |
|---:|:--------|---------:|
|  0 | A       |       10 |
|  1 | B       |       30 |
|  2 | C       |       50 |
|  3 | D       |       70 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;label&#39;</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="s1">&#39;values&#39;</span><span class="p">,</span> 
                 <span class="n">rot</span><span class="o">=-</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_83_0.png" />
    
    
</figure>

<p>当然我们也可以根据不同的类别来绘制柱状图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">17.5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">88</span><span class="p">]</span>
<span class="n">weight</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="s1">&#39;G&#39;</span><span class="p">]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="n">age</span><span class="p">,</span> 
                   <span class="s1">&#39;weight&#39;</span><span class="p">:</span> <span class="n">weight</span><span class="p">},</span> 
                   <span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">rot</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_85_0.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_86_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotbox方法">df.plot.box()方法</h2>
<p>我们来看一下箱型图的具体的绘制，通过pandas一行代码来实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="s1">&#39;ABC&#39;</span><span class="p">))</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |         A |          B |          C |
|---:|----------:|-----------:|-----------:|
|  0 | -1.59132  |  1.47926   |  1.16891   |
|  1 | -0.649097 |  0.0501129 | -0.81485   |
|  2 |  1.31677  |  1.00035   |  0.0662983 |
|  3 | -1.04484  |  0.445727  |  0.0140137 |
|  4 |  0.217317 | -0.692044  | -0.758549  |
|  5 | -0.566574 | -0.159038  |  0.781744  |
|  6 | -0.903068 |  1.50697   |  1.2605    |
|  7 |  1.38627  | -0.0539971 | -0.0619803 |
|  8 | -1.50639  | -0.187649  |  1.00115   |
|  9 | -1.84435  | -1.37282   |  0.905218  |
| 10 | -0.400618 |  0.503642  |  1.20152   |
| 11 | -0.164643 |  1.58712   | -0.0475168 |
| 12 |  1.99742  | -0.928291  |  0.502433  |
| 13 | -1.25877  |  2.0764    | -0.840626  |
| 14 | -0.293273 | -2.09935   | -0.152372  |
| 15 | -0.686338 |  0.798964  |  1.4551    |
| 16 |  0.407321 |  0.601732  |  0.456718  |
| 17 |  0.594827 | -1.8498    |  1.22704   |
| 18 | -0.345245 | -1.27973   | -0.0971918 |
| 19 |  1.91415  |  0.656389  | -1.15816   |
| 20 |  0.149819 |  1.10037   | -0.0785313 |
| 21 | -0.311471 | -1.10781   |  0.707936  |
| 22 |  0.614726 | -0.142359  | -1.23091   |
| 23 |  1.46869  |  1.27063   |  0.797499  |
| 24 | -1.02252  |  0.819603  | -0.220382  |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">box</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_90_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotpie方法">df.plot.pie()方法</h2>
<p>接下来是饼图的绘制</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;mass&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.33</span><span class="p">,</span> <span class="mf">4.87</span> <span class="p">,</span> <span class="mf">5.97</span><span class="p">],</span>
                   <span class="s1">&#39;radius&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">2439.7</span><span class="p">,</span> <span class="mf">6051.8</span><span class="p">,</span> <span class="mf">6378.1</span><span class="p">]},</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Mercury&#39;</span><span class="p">,</span> <span class="s1">&#39;Venus&#39;</span><span class="p">,</span> <span class="s1">&#39;Earth&#39;</span><span class="p">])</span>

<span class="n">plot</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s1">&#39;mass&#39;</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</code></pre></div>
<figure >
    
        <img src="img/output_92_0.png" width="800" />
    
    
</figure>

<p>除此之外，还有折线图、直方图、散点图等等，步骤与方式都与上述的技巧有异曲同工之妙，大家感兴趣的可以自己另外去尝试。</p>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/4000%E5%AD%97%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E_%E6%8E%A8%E8%8D%9020%E4%B8%AA%E5%A5%BD%E7%94%A8%E5%88%B0%E7%88%86%E7%9A%84Pandas%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95.ipynb">https://github.com/hidadeng/DaDengAndHisPython/blob/master/4000字详细说明_推荐20个好用到爆的Pandas函数方法.ipynb</a></p>
<br>
<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/PEhYrNbZyI9Prl3OwrBcAw">https://mp.weixin.qq.com/s/PEhYrNbZyI9Prl3OwrBcAw</a></p>
<p>author: 俊欣
公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a><a href="https://textdata.cn/blog/management_python_course/">https://textdata.cn/blog/management_python_course/</a>)</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐|pandas必知必会50例</title>
      <link>https://textdata.cn/blog/pandas_must_know_50_examples/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_must_know_50_examples/</guid>
      <description>pandas常用知识8000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/j71IPWmT57g3VTajGhgN7Q">https://mp.weixin.qq.com/s/j71IPWmT57g3VTajGhgN7Q</a>
author: 俊欣
公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<p>本篇我们继续前面pandas系列教程的探讨，今天小编会介绍pandas库当中一些非常基础的方法与函数，希望大家看了之后会有所收获。</p>
<h2 id="准备需要的数据集">准备需要的数据集</h2>
<p>我们先准备生成一些随机数，作为后面需要用到的数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">index</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&#34;1/1/2000&#34;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">series</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;e&#34;</span><span class="p">])</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                  <span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="p">,</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>

</code></pre></div><br>
<h2 id="head-and-tail">Head and tail</h2>
<p>head()和tail()方法是用来查看数据集当中的前几行和末尾几行的，默认是查看5行，当然读者朋友也可以自行设定行数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="n">series2</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><pre><code>0    0.578276
1    0.643313
2   -0.336030
3   -0.422468
4   -0.493812
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 同理</span>
<span class="n">series2</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>
</code></pre></div><pre><code>95    1.307962
96    1.165135
97    0.717692
98    0.605668
99    0.264990
dtype: float64
</code></pre>
<br>
<h2 id="数据的统计分析">数据的统计分析</h2>
<p>在pandas当中用describe()方法来对表格中的数据做一个概括性的统计分析，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><pre><code>count    100.000000
mean       0.106277
std        1.027541
min       -2.554005
25%       -0.510912
50%        0.028765
75%        0.795444
max        2.512260
dtype: float64
</code></pre>
<p>当然，我们也可以设置好输出的分位</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">percentiles</span><span class="o">=</span><span class="p">[</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">])</span>
</code></pre></div><pre><code>count    100.000000
mean       0.106277
std        1.027541
min       -2.554005
5%        -1.450067
25%       -0.510912
50%        0.028765
75%        0.795444
95%        1.757926
max        2.512260
dtype: float64
</code></pre>
<p>对于离散型的数据来说，describe()方法给出的结果则会简洁很多</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">])</span>
<span class="n">s</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><pre><code>count     10
unique     4
top        a
freq       5
dtype: object
</code></pre>
<p>要是表格中既包含了离散型数据，也包含了连续型的数据，默认的话，describe()是会针对<strong>连续型数据</strong>进行统计分析</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Yes&#34;</span><span class="p">,</span> <span class="s2">&#34;Yes&#34;</span><span class="p">,</span> <span class="s2">&#34;No&#34;</span><span class="p">,</span> <span class="s2">&#34;No&#34;</span><span class="p">],</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">4</span><span class="p">)})</span>
<span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       |        b |
|:------|---------:|
| count | 4        |
| mean  | 0.967026 |
| std   | 0.859657 |
| min   | 0.204027 |
| 25%   | 0.233797 |
| 50%   | 0.947075 |
| 75%   | 1.6803   |
| max   | 1.76993  |
</code></pre></div><p>当然我们也可以指定让其强制统计分析离散型数据或者连续型数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;object&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|        | a   |
|:-------|:----|
| count  | 4   |
| unique | 2   |
| top    | Yes |
| freq   | 2   |
</code></pre></div><p>同理，我们也可以指定连续型的数据进行统计分析</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;number&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       |        b |
|:------|---------:|
| count | 4        |
| mean  | 0.967026 |
| std   | 0.859657 |
| min   | 0.204027 |
| 25%   | 0.233797 |
| 50%   | 0.947075 |
| 75%   | 1.6803   |
| max   | 1.76993  |
</code></pre></div><p>如果我们都要去做统计分析，可以这么来执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="s2">&#34;all&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|        | a   |          b |
|:-------|:----|-----------:|
| count  | 4   |   4        |
| unique | 2   | nan        |
| top    | Yes | nan        |
| freq   | 2   | nan        |
| mean   | nan |   0.967026 |
| std    | nan |   0.859657 |
| min    | nan |   0.204027 |
| 25%    | nan |   0.233797 |
| 50%    | nan |   0.947075 |
| 75%    | nan |   1.6803   |
| max    | nan |   1.76993  |
</code></pre></div><br>
<h2 id="最大最小值的位置">最大/最小值的位置</h2>
<p>idxmin()和idxmax()方法是用来查找表格当中最大/最小值的位置，返回的是值的索引</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="n">s1</span>
</code></pre></div><pre><code>0    2.244266
1    1.398258
2   -1.827026
3   -0.058691
4    0.275471
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(),</span> <span class="n">s1</span><span class="o">.</span><span class="n">idxmax</span><span class="p">()</span>
</code></pre></div><pre><code>(2, 0)
</code></pre>
<p>用在DataFrame上面的话，如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                   <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="n">df1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   0 |
|:---|----:|
| A  |   2 |
| B  |   3 |
| C  |   2 |
</code></pre></div><p>同理，我们将axis参数改成1</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | 0   |
|---:|:----|
|  0 | B   |
|  1 | B   |
|  2 | A   |
|  3 | B   |
|  4 | B   |
</code></pre></div><br>
<h2 id="value_counts方法">value_counts()方法</h2>
<p>pandas当中的value_counts()方法主要用于数据表的计数以及排序，用来查看表格当中，指定列有多少个不同的数据值并且计算不同值在该列当中出现的次数，先来看一个简单的例子</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;城市&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;北京&#39;</span><span class="p">,</span> <span class="s1">&#39;广州&#39;</span><span class="p">,</span> <span class="s1">&#39;上海&#39;</span><span class="p">,</span> <span class="s1">&#39;上海&#39;</span><span class="p">,</span> <span class="s1">&#39;杭州&#39;</span><span class="p">,</span> <span class="s1">&#39;成都&#39;</span><span class="p">,</span> <span class="s1">&#39;香港&#39;</span><span class="p">,</span> <span class="s1">&#39;南京&#39;</span><span class="p">,</span> <span class="s1">&#39;北京&#39;</span><span class="p">,</span> <span class="s1">&#39;北京&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;收入&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">5500</span><span class="p">,</span> <span class="mi">5500</span><span class="p">,</span> <span class="mi">4000</span><span class="p">,</span> <span class="mi">50000</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="mi">5200</span><span class="p">,</span> <span class="mi">5600</span><span class="p">],</span>
                   <span class="s1">&#39;年龄&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">]})</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;城市&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div><pre><code>北京    3
上海    2
广州    1
杭州    1
南京    1
香港    1
成都    1
Name: 城市, dtype: int64
</code></pre>
<p>可以看到北京出现了3次，上海出现了2次，并且默认采用的是降序来排列的，下面我们来看一下用升序的方式来排列一下收入这一列</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;收入&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>5600     1
5000     1
8000     1
5200     1
50000    1
4000     1
10000    2
5500     2
Name: 收入, dtype: int64
</code></pre>
<p>同时里面也还可以利用参数normalize=True，来计算不同值的计数占比</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;年龄&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
                      <span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>32    0.1
34    0.1
50    0.1
40    0.1
43    0.1
45    0.1
25    0.4
Name: 年龄, dtype: float64
</code></pre>
<br>
<h2 id="数据分组">数据分组</h2>
<p>我们可以使用cut()方法以及qcut()方法来对表格中的连续型数据分组，首先我们看一下cut()方法，假设下面这组数据代表的是小组每个成员的年龄</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ages</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">62</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">89</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">32</span><span class="p">])</span>
<span class="n">pd</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div><pre><code>[(1.907, 20.6], (1.907, 20.6], (1.907, 20.6], (39.2, 57.8], (20.6, 39.2], ..., (1.907, 20.6], (1.907, 20.6], (20.6, 39.2], (20.6, 39.2], (20.6, 39.2]]
Length: 16
Categories (5, interval[float64]): [(1.907, 20.6] &lt; (20.6, 39.2] &lt; (39.2, 57.8] &lt; (57.8, 76.4] &lt; (76.4, 95.0]]
</code></pre>
<p>由上可以看到用cut()方法将数据平分成了5个区间，且区间两边都有扩展以包含<strong>最大值和最小值</strong>，当然我们也可以给每一个区间加上标记</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="sa">u</span><span class="s2">&#34;婴儿&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;少年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;青年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;中年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;老年&#34;</span><span class="p">])</span>
</code></pre></div><pre><code>['婴儿', '婴儿', '婴儿', '青年', '少年', ..., '婴儿', '婴儿', '少年', '少年', '少年']
Length: 16
Categories (5, object): ['婴儿' &lt; '少年' &lt; '青年' &lt; '中年' &lt; '老年']
</code></pre>
<p>而对于qcut()方法来说，我们可以指定区间来进行分组，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">qcut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;小朋友&#39;</span><span class="p">,</span><span class="s1">&#39;大孩子&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>['小朋友', '小朋友', '小朋友', '大孩子', '大孩子', ..., '小朋友', '小朋友', '小朋友', '小朋友', '小朋友']
Length: 16
Categories (2, object): ['小朋友' &lt; '大孩子']
</code></pre>
<p>这里将年龄这组数据分成两部分[0, 0.5, 1]，一组是标上标记小朋友，另一组是大孩子，不过通常情况下，我们用的cut()方法比较多</p>
<p><br><br></p>
<h2 id="引用函数">引用函数</h2>
<p>要是在表格当中引用其他的方法，或者是自建的函数，可以使用通过pandas当中的以下这几个方法</p>
<ul>
<li>pipe()</li>
<li>apply()和applymap()</li>
<li>agg()和transform()</li>
</ul>
<br>
<h2 id="pipe方法">pipe()方法</h2>
<p>首先我们来看pipe()这个方法，我们可以将自己定义好的函数，以链路的形式一个接着一个传给我们要处理的数据集上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">extract_city_name</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_name&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_and_code&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>

<span class="k">def</span> <span class="nf">add_country_name</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">country_name</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_and_country&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_name&#34;</span><span class="p">]</span> <span class="o">+</span> <span class="n">country_name</span>
    <span class="k">return</span> <span class="n">df</span>
</code></pre></div><p>然后我们用pip()这个方法来将上面我们定义的函数串联起来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_p</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;city_and_code&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Arizona, AZ&#34;</span><span class="p">]})</span>
<span class="n">df_p</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;state_and_code&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Arizona, AZ&#34;</span><span class="p">]})</span>
<span class="n">df_p</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">extract_city_name</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">add_country_name</span><span class="p">,</span> <span class="n">country_name</span><span class="o">=</span><span class="s2">&#34;_USA&#34;</span><span class="p">)</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | state_and_code   | state_name   | state_and_country   |
|---:|:-----------------|:-------------|:--------------------|
|  0 | Arizona, AZ      | Arizona      | Arizona_USA         |
</code></pre></div><br>
<h2 id="apply方法和applymap方法">apply()方法和applymap()方法</h2>
<p>apply()方法可以对表格中的数据按照行或者是列方向进行处理，默认是按照列方向，如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A   -0.101751
B   -0.360288
C   -0.637433
dtype: float64
</code></pre></div><p>当然，我们也可以通过axis参数来进行调节</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0   -0.803675
1   -0.179640
2   -1.200973
3    0.156888
4    0.381631
5    0.049274
6    1.174923
7    0.612591
dtype: float64
</code></pre></div><p>除此之外，我们也可以直接调用匿名函数lambda的形式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">min</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A    1.922863
B    2.874672
C    1.943930
dtype: float64
</code></pre></div><p>也可以调用自己定义的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">normalize</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span> <span class="o">/</span> <span class="n">x</span><span class="o">.</span><span class="n">std</span><span class="p">()</span>
</code></pre></div><p>我们用上apply()方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">normalize</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B         C
0  1.149795  0.390263 -0.813770
1  0.805843 -0.532374  0.859627
2  0.047824 -0.085334 -0.067179
3 -0.903319 -1.215023  1.149538
4 -1.100144  1.442467 -1.128216
</code></pre></div><p>apply()方法作用于数据集当中的每个行或者是列，而applymap()方法则是对数据集当中的所有元素都进行处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;key1&#39;</span> <span class="p">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;key2&#39;</span> <span class="p">:</span> <span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;one&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;data1&#39;</span> <span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
                   <span class="s1">&#39;data2&#39;</span> <span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">)})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1   key2  data1  data2
0    a    one      1     10
1    c    two      2     11
2    b  three      3     12
3    b   four      4     13
4    d   five      5     14
</code></pre></div><p>我们来自定义一个函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="k">def</span> <span class="nf">add_A</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&#34;A&#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    
<span class="n">df</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">add_A</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1    key2 data1 data2
0   Aa    Aone    A1   A10
1   Ac    Atwo    A2   A11
2   Ab  Athree    A3   A12
3   Ab   Afour    A4   A13
4   Ad   Afive    A5   A14
</code></pre></div><p>我们然后也可以通过lambda()自定义函数方法，然后来去除掉这个A</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">add_A</span><span class="p">)</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;A&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1   key2 data1 data2
0    a    one     1    10
1    c    two     2    11
2    b  three     3    12
3    b   four     4    13
4    d   five     5    14
</code></pre></div><br>
<h2 id="agg方法和transform方法">agg()方法和transform()方法</h2>
<p>agg()方法本意上是聚合函数，我们可以将用于统计分析的一系列方法都放置其中，并且放置多个</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">)</span>
</code></pre></div><pre><code>A    2.042573
B    2.189269
C   -1.066976
dtype: float64
</code></pre>
<p>当然，当中的np.sum部分也可以用字符串来表示，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="s2">&#34;sum&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>A    2.042573
B    2.189269
C   -1.066976
dtype: float64
</code></pre>
<p>我们尝试在当中放置多个统计分析的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="s2">&#34;mean&#34;</span><span class="p">,</span> <span class="s2">&#34;median&#34;</span><span class="p">])</span>
</code></pre></div><p>当然我们也可以和lambda匿名函数混合着搭配</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">()])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">                 A         B         C
sum      -0.066486 -1.288341 -1.236244
&lt;lambda&gt; -0.013297 -0.257668 -0.247249
</code></pre></div><p>或者和自己定义的函数方法混合着用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">my_mean</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
    
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="n">my_mean</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">                A         B         C
sum     -4.850201 -1.544773  0.429007
my_mean -0.970040 -0.308955  0.085801
</code></pre></div><p>与此同时，我们在agg()方法中添加字典，实现不同的列使用不同的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;mean&#34;</span><span class="p">})</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A   -0.801753
B    0.097550
dtype: float64
</code></pre></div><br>
<h2 id="索引和列名的重命名">索引和列名的重命名</h2>
<p>针对索引和列名的重命名，我们可以通过pandas当中的rename()方法来实现，例如我们有这样一个数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                   <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">],</span>
                   <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;e&#34;</span><span class="p">])</span>
<span class="n">df1</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B         C
a  0.343690  0.869984 -1.929814
b  1.025613  0.470155 -0.242463
c -0.400908 -0.362684  0.226857
d -1.339706 -0.302005 -1.784452
e -0.957026 -0.813600  0.215098
</code></pre></div><p>我们可以这样来操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="s2">&#34;three&#34;</span><span class="p">},</span>
           <span class="n">index</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;banana&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="s2">&#34;cat&#34;</span><span class="p">})</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">             one       two     three
apple   0.383813  0.588964 -0.162386
banana -0.462068 -2.938896  0.935492
cat    -0.059807 -1.987281  0.095432
d      -0.085230  2.013733 -1.324039
e      -0.678352  0.306776  0.808697
</code></pre></div><p>当然我们可以拆开来，单独对行或者是列进行重命名，对列的重命名可以这么来做</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">rename</span><span class="p">({</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="s2">&#34;three&#34;</span><span class="p">},</span> 
           <span class="n">axis</span> <span class="o">=</span> <span class="s2">&#34;columns&#34;</span><span class="p">)</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">        one       two     three
a -0.997108 -1.383011  0.474298
b  1.009910  0.286303  1.120783
c  1.130700 -0.566922  1.841451
d -0.350438 -0.171079 -0.079804
e  0.988050 -0.524604  0.653306
</code></pre></div><br>
<h2 id="排序">排序</h2>
<p>在pandas当中，我们可以针对数据集当中的值来进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span><span class="s2">&#34;one&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> 
     <span class="s2">&#34;two&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> 
     <span class="s2">&#34;three&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
<span class="p">)</span>

<span class="n">df1</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
0    2    1      5
1    1    3      4
2    1    2      3
3    1    4      2
</code></pre></div><p>我们按照“three”这一列当中的数值来进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s2">&#34;three&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
3    1    4      2
2    1    2      3
1    1    3      4
0    2    1      5
</code></pre></div><p>我们也可以依照多列进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;two&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
2    1    2      3
1    1    3      4
3    1    4      2
0    2    1      5
</code></pre></div><p>在“one”这一列相等的时候，比较“two”这一列数值的大小，在排序的过程当中，默认采用的都是升序，我们可以改成降序来进行编排</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
3    1    4      2
1    1    3      4
2    1    2      3
0    2    1      5
</code></pre></div><br>
<h2 id="数据类型的转换">数据类型的转换</h2>
<p>最后涉及到的是数据类型的转换，在这之前，我们先得知道如何来查看数据的类型，pandas当中有相应的方法可以处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="s2">&#34;float16&#34;</span><span class="p">),</span>
        <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">)),</span>
        <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="s2">&#34;uint8&#34;</span><span class="p">)),</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="n">df2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B    C
0 -0.498779 -0.501512    0
1 -0.055817 -0.528227  254
2 -0.914551  0.763298    1
3 -0.916016  1.366833    0
4  1.993164  1.834457    0
</code></pre></div><p>我们通过dtypes属性来查看数据的类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A    float16
B    float64
C      uint8
dtype: object
</code></pre></div><p>而通过astype()方法来实现数据类型的转换</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="p">[</span><span class="s2">&#34;B&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;int64&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    0
1    0
2    0
3    2
4    1
Name: B, dtype: int64
</code></pre></div><br>
<h2 id="根据数据类型来筛选">根据数据类型来筛选</h2>
<p>与此同时，我们也可以根据相对应的数据类型来进行筛选，运用pandas当中的select_dtypes方法，我们先来创建一个数据集包含了各种数据类型的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;string_1&#34;</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="s2">&#34;abcde&#34;</span><span class="p">),</span>
        <span class="s2">&#34;int64_1&#34;</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)),</span>
        <span class="s2">&#34;uint8_1&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;u1&#34;</span><span class="p">),</span>
        <span class="s2">&#34;float64_1&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">),</span>
        <span class="s2">&#34;bool1&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">],</span>
        <span class="s2">&#34;bool2&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">],</span>
        <span class="s2">&#34;dates_1&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&#34;now&#34;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span>
        <span class="s2">&#34;category_1&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="s2">&#34;ABCDE&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;category&#34;</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  string_1  int64_1  uint8_1  ...  bool2                      dates_1  category_1
0      a      1      3  ...  False 2021-11-10 10:43:05.957685         A
1      b      2      4  ...   True 2021-11-11 10:43:05.957685         B
2      c      3      5  ...  False 2021-11-12 10:43:05.957685         C
3      d      4      6  ...  False 2021-11-13 10:43:05.957685         D
4      e      5      7  ...   True 2021-11-14 10:43:05.957685         E
</code></pre></div><p>我们先来查看一下各个列的数据类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">string_1              object
int64_1                int64
uint8_1                uint8
float64_1            float64
bool1                   bool
bool2                   bool
dates_1       datetime64[ns]
category_1          category
dtype: object
</code></pre></div><p>我们筛选类型为布尔值的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="nb">bool</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   bool1  bool2
0   True  False
1  False   True
2   True  False
3   True  False
4  False   True
</code></pre></div><p>筛选出数据类型为整型的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;int64&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   int64_1
0      1
1      2
2      3
3      4
4      5
</code></pre></div><br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>spacy产业级自然语言处理包</title>
      <link>https://textdata.cn/blog/spacy_industry_application/</link>
      <pubDate>Sun, 14 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/spacy_industry_application/</guid>
      <description>牛掰nlp库</description>
      <content:encoded><![CDATA[<h2 id="spacy">spacy</h2>
<p>产业级自然语言处理python包  <a href="https://spacy.io/">https://spacy.io/</a></p>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/20211115spacy%E4%BA%A7%E4%B8%9A%E7%BA%A7%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%8C%85.ipynb">点击下载</a></p>
<br>
<h2 id="特性">特性</h2>
<ul>
<li>支持64+语言</li>
<li>针对19门语言的64流水线pipeline处理函数</li>
<li>多任务预训练transformers，如BERT</li>
<li>预训练词向量</li>
<li>支持命名实体识别</li>
<li>支持 POS词性标注</li>
<li>支持 句法依存</li>
<li>支持 文本分类</li>
<li>支持 词干化</li>
<li>内置可视化</li>
</ul>
<br>
<h2 id="spacy安装">spacy安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">pip</span> <span class="n">install</span> <span class="n">spacy</span><span class="o">==</span><span class="mf">3.2.0</span>

</code></pre></div><br>
<h2 id="模型下载安装">模型下载安装</h2>
<p>sm小型/ md中型/ lg大型</p>
<ul>
<li>
<p><strong>中文模型3.2.0版</strong></p>
<ul>
<li>zh_core_web_sm  <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_sm-3.2.0/zh_core_web_sm-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_sm-3.2.0/zh_core_web_sm-3.2.0-py3-none-any.whl</a></li>
<li>zh_core_web_md <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_md-3.2.0/zh_core_web_md-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_md-3.2.0/zh_core_web_md-3.2.0-py3-none-any.whl</a></li>
<li>zh_core_web_lg   <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_lg-3.2.0/zh_core_web_lg-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_lg-3.2.0/zh_core_web_lg-3.2.0-py3-none-any.whl</a></li>
</ul>
</li>
<li>
<p><strong>英文模型3.2.0版</strong></p>
<ul>
<li>en_core_web_sm <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl</a></li>
<li>en_core_web_md  <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.2.0/en_core_web_md-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.2.0/en_core_web_md-3.2.0-py3-none-any.whl</a></li>
<li>en_core_web_lg  <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.2.0/en_core_web_lg-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.2.0/en_core_web_lg-3.2.0-py3-none-any.whl</a></li>
</ul>
</li>
</ul>
<p><strong>注意</strong>： 模型大小的区别主要体现在词向量维度数的差距，模型越大， 词向量的维度越多。</p>
<p>以版本3.2.0的en_core_web_sm为例，点击对应链接，下载至桌面。</p>
<p>打开命令行， 依次执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd Desktop

pip3 install en_core_web_sm-3.2.0-py3-none-any.whl
</code></pre></div><p>即可安装完成。</p>
<br>
<br>
<h2 id="doc类型">Doc类型</h2>
<ul>
<li><code>doc.lang_</code>  doc的语言</li>
<li><code>doc.text</code>   doc的文本</li>
<li><code>doc.ents</code> 文本中的实体词</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">spacy</span>

<span class="c1">#使用中文zh_core_web_sm模型</span>
<span class="n">zh_nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;zh_core_web_sm&#34;</span><span class="p">)</span>

<span class="n">test1</span> <span class="o">=</span> <span class="s1">&#39;国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。&#39;</span>

<span class="n">doc1</span> <span class="o">=</span> <span class="n">zh_nlp</span><span class="p">(</span><span class="n">test1</span><span class="p">)</span>

<span class="n">doc1</span>
</code></pre></div><pre><code>国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">lang_</span>
</code></pre></div><pre><code>'zh'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">text</span>
</code></pre></div><pre><code>'国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">vector</span>
</code></pre></div><pre><code>array([-1.81135774e-01,  2.31929451e-01,  1.45746097e-01,  6.82696044e-01,
       -8.44623148e-03, -2.21295916e-02,  4.06811416e-01, -4.60287899e-01,
       -5.73987663e-01, -1.33687481e-01, -5.34314513e-01, -6.64901555e-01,
       -3.94947737e-01,  6.35875063e-03, -2.03339502e-01,  5.78875951e-02,
       -3.34325433e-01, -3.77648622e-01,  2.43863747e-01, -5.56892566e-02,
       -7.30801523e-01, -2.41785884e-01, -4.50579911e-01, -3.13598923e-02,
        9.07084942e-02, -8.06667805e-01,  7.28501499e-01, -8.59559357e-01,
       -4.44110222e-02,  9.64611948e-01, -2.57230818e-01,  1.09481342e-01,
       -3.73580456e-01, -8.51007993e-04,  5.30374162e-02, -5.51876485e-01,
       -4.82654065e-01,  2.68822908e-01, -4.20012563e-01,  4.33068752e-01,
       -5.14427841e-01,  5.53584039e-01, -2.00293139e-02,  9.45062563e-02,
        1.04523234e-01,  1.34134221e+00, -5.23905218e-01,  1.31230903e+00,
        3.28943968e-01,  3.39987069e-01,  8.26785386e-01,  5.35273492e-01,
       -4.27510649e-01, -1.02807179e-01, -1.91500232e-01,  2.63696283e-01,
        6.33961499e-01, -5.65908328e-02, -1.94336250e-01, -5.89190602e-01,
        2.22078279e-01,  3.41992415e-02,  5.37312031e-01,  2.77926654e-01,
       -3.00608397e-01, -6.42910838e-01, -1.33188680e-01,  2.82793492e-01,
        6.25911206e-02,  2.08833948e-01,  2.69211121e-02,  1.65822819e-01,
       -4.32190485e-02, -6.67634964e-01,  6.50937319e-01, -2.43003711e-01,
        9.57057327e-02, -3.56370257e-03, -1.13566548e-01, -1.65319979e-01,
        7.40000159e-02,  3.65676880e-01, -2.21356809e-01,  2.03256473e-01,
        2.26293072e-01,  3.11525285e-01,  3.37869138e-01, -3.12896192e-01,
        5.31899095e-01, -1.86223835e-01, -6.03411011e-02,  4.97923464e-01,
        3.10418844e-01, -2.48594299e-01, -3.67455184e-01, -4.46804255e-01],
      dtype=float32)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#doc1中的实体词</span>
<span class="n">doc1</span><span class="o">.</span><span class="n">ents</span>
</code></pre></div><pre><code>(11月13日, 11月12日, 国家管网集团, 全国银行, 国家管网集团, 工商银行, 60亿元, 270天, 2, 2, 53, 超10)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#doc1中的实体词类别</span>
<span class="p">[</span><span class="n">ent</span><span class="o">.</span><span class="n">label_</span> <span class="k">for</span> <span class="n">ent</span> <span class="ow">in</span> <span class="n">doc1</span><span class="o">.</span><span class="n">ents</span><span class="p">]</span>
</code></pre></div><pre><code>['DATE',
 'DATE',
 'ORG',
 'ORG',
 'ORG',
 'ORG',
 'MONEY',
 'DATE',
 'CARDINAL',
 'CARDINAL',
 'CARDINAL',
 'CARDINAL']
</code></pre>
<h2 id="token类型">Token类型</h2>
<ul>
<li><code>token.text</code>   文本</li>
<li><code>token.pos_</code>  词性</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc1</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">token</span><span class="o">.</span><span class="n">pos_</span><span class="p">)</span>
</code></pre></div><pre><code>国家   NOUN
管网   NOUN
微信   ADJ
公众号   NOUN
11月   NOUN
13日   NOUN
消息   NOUN
，   PUNCT
11月   NOUN
12日   NOUN
，   PUNCT
国家   NOUN
管网   NOUN
集团   NOUN
首期   ADV
绿色   VERB
超短   NOUN
期融   NOUN
资券   VERB
在   ADP
全国   ADJ
银行   NOUN
间   PART
市场   NOUN
成功   ADV
发行   VERB
。   PUNCT
此次   DET
债券   NOUN
发行   VERB
是   VERB
国家   NOUN
管网   NOUN
集团   NOUN
成立   VERB
后   PART
首次   ADV
在   ADP
公开   ADJ
市场   NOUN
亮相   VERB
，   PUNCT
由   ADP
工商   NOUN
银行   NOUN
独家   ADV
承销   VERB
，   PUNCT
发行   NOUN
金额   NOUN
60亿   NUM
元   NUM
、   PUNCT
期限   NOUN
270   NUM
天   NUM
，   PUNCT
为   ADP
本   DET
年度   NOUN
单笔   NOUN
最   ADV
大   ADJ
金额   NOUN
绿色   ADJ
超短   NOUN
期融   NOUN
资券   NOUN
，   PUNCT
募集   NOUN
资金   NOUN
将   ADV
全部   ADV
用于   VERB
储气库   NOUN
等   PART
绿色   ADJ
低碳   VERB
天然气   NOUN
储运   NOUN
基础   NOUN
设施   NOUN
建设   NOUN
；   PUNCT
发行   VERB
票面   ADJ
利率   NOUN
2   NUM
.   PUNCT
41%   NOUN
，   PUNCT
认购   NOUN
总   ADJ
规模   NOUN
达   VERB
2   NUM
.   PUNCT
53   NUM
倍   NUM
，   PUNCT
低于   VERB
资本   NOUN
市场   NOUN
同期   NOUN
可比   ADV
产品   NOUN
利率   NOUN
超10   VERB
个   NUM
BP   NOUN
，   PUNCT
反映   VERB
了   PART
市场   NOUN
对   ADP
绿色   ADJ
基础   NOUN
设施   NOUN
建设   NOUN
项目   NOUN
的   PART
青睐   NOUN
。   PUNCT
</code></pre>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>2021最流行的8张可视化图</title>
      <link>https://textdata.cn/blog/8_most_popular_vis/</link>
      <pubDate>Wed, 10 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/8_most_popular_vis/</guid>
      <description>炫酷可视化案例集锦尽在本文</description>
      <content:encoded><![CDATA[<h2 id="1-酒精消费">1. 酒精消费</h2>
<p>此可视化显示了 2001 年至 2018 年人均（人均）饮酒量最高的国家。有趣的是，这段时间的最高国家主要由东非和欧洲国家组成。</p>
<p>如果您想了解更多关于全球酒精消费的信息，请查看牛津关于全球酒精消费的报告</p>
<p><a href="https://ourworldindata.org/alcohol-consumptio">https://ourworldindata.org/alcohol-consumptio</a></p>
<p>以防万一您感兴趣，这种类型的数据可视化称为条形图竞赛。 我相信你已经在 YouTube 和 Reddit 上看到了很多这样的内容。 如果您想自己构建一个，这里有一个教程，您可以查看</p>
<p><a href="https://towardsdatascience.com/step-by-step-tutorial-create-a-bar-chart-race-animation-da7d5fcd7079">https://towardsdatascience.com/step-by-step-tutorial-create-a-bar-chart-race-animation-da7d5fcd7079</a></p>
<br>
<h2 id="2-健康财富的221年">2. 健康&amp;财富的221年</h2>
<p>通常少即是多，但这是我最喜欢的可视化，因为它以清晰的方式传达了如此多的信息，而且非常积极！</p>
<p>此可视化显示了每个国家的财富（人均 GDP）和健康（平均预期寿命）如何随时间变化。 圆圈的大小代表每个国家的人口，颜色代表每个国家所属的大陆。</p>
<p>看到我们作为一个物种走了多远真是太神奇了，是吧？</p>
<p><a href="https://www.reddit.com/r/dataisbeautiful/comments/lmlrks/oc_our_health_and_wealth_over_221_years/">https://www.reddit.com/r/dataisbeautiful/comments/lmlrks/oc_our_health_and_wealth_over_221_years/</a></p>
<br>
<h2 id="3-地球光纤电缆网络-3d-地图">3. 地球光纤电缆网络 3D 地图</h2>
<p>这个由 Tyler Morgan 创建的可视化是世界光缆网络的 3D 地图。 该网络用于传输电话信号、互联网通信和电视信号。</p>
<p>真正看到我们在全球范围内的相互联系是非常疯狂的，不是吗？</p>
<p>这是使用 rayrender 和 geojsonsf 包在 R 中创建的。 如果您想查看完整代码，可以在此处查看。</p>
<p><a href="https://gist.github.com/tylermorganwall/b222fcebcac3de56a6e144d73d166322">https://gist.github.com/tylermorganwall/b222fcebcac3de56a6e144d73d166322</a></p>
<br>
<h2 id="4-美国covid病例增长">4. 美国Covid病例增长</h2>
<p>我不是特别喜欢花哨的数据可视化，因为它们通常不像简单的图形（如折线图）那样有效地传达信息。 但是，因为这个动画非常独特（而且有点令人不安），我觉得有必要将它添加到前 10 个可视化效果中。</p>
<p>虽然没有轴可以告诉我们绝对数字，但它是一个简洁的可视化，向我们展示了与 2020 年年初相比，COVID 病例数的增长速度。</p>
<p>这是使用 d3 创建的，完整代码可以在这里找到。</p>
<p><a href="https://observablehq.com/@bagami/the-us-covid-syringe">https://observablehq.com/@bagami/the-us-covid-syringe</a></p>
<br>
<h2 id="5-美国-covid-等值线图">5. 美国 COVID 等值线图</h2>
<p>此可视化告诉我们，从 2020 年 2 月开始到 2021 年 10 月，美国的 COVID 病例是如何增长的。有趣的是，您可以清楚地看到这一时期 COVID 的“波浪”。</p>
<p>这种类型的可视化被称为<strong>等值线图</strong>，它在比较不同地区（州、国家、大陆等）的特定变量随着时间的推移非常强大。</p>
<p>如果你想学习如何用 Python 构建一个，我在这里写了一份创建 Choropleth 地图的分步指南。</p>
<p><a href="https://towardsdatascience.com/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5">https://towardsdatascience.com/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5</a></p>
<br>
<h2 id="6-所有精神疾病的地图">6. 所有精神疾病的地图</h2>
<p>此可视化显示了 DSM-5 中的每一种精神障碍，它代表精神障碍诊断和统计手册。 它是美国精神障碍的标准分类。
有 20 多个类别和数百种疾病，一旦您开始了解它，这种可视化可能会花费比您想象的更多的时间。</p>
<p><a href="https://www.reddit.com/r/dataisbeautiful/comments/kugn7e/oc_every_mental_disorder_diagnosis_in_the_dsm5/">https://www.reddit.com/r/dataisbeautiful/comments/kugn7e/oc_every_mental_disorder_diagnosis_in_the_dsm5/</a></p>
<p><a href="https://webcache.googleusercontent.com/search?q=cache:LY74prf8a0gJ:https://www.psychiatry.org/File%2520Library/Psychiatrists/Practice/DSM/APA_DSM-5-Contents.pdf+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us&amp;client=safari">https://webcache.googleusercontent.com/search?q=cache:LY74prf8a0gJ:https://www.psychiatry.org/File%2520Library/Psychiatrists/Practice/DSM/APA_DSM-5-Contents.pdf+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us&amp;client=safari</a></p>
<br>
<h2 id="7-我们的塑料去哪儿了">7. 我们的塑料去哪儿了？</h2>
<p>该动画展示了塑料的生命周期，以及其中大部分的结束位置。 可悲的是，很明显，我们没有像我们应该回收的那样回收尽可能多的塑料，惊人的 60% 最终被填埋或进入海洋。</p>
<p>这种类型的可视化是一个动画桑基图，它类似于树图，因为它将数据分解为几个子组并按比例表示值。</p>
<p>如果您想学习如何在 Python 中构建 Sankey 图，请查看此链接。</p>
<p><a href="https://towardsdatascience.com/sankey-diagram-basics-with-pythons-plotly-7a13d557401a">https://towardsdatascience.com/sankey-diagram-basics-with-pythons-plotly-7a13d557401a</a></p>
<br>
<h2 id="8--近60年来top-100-艺术家">8.  近60年来，Top 100 艺术家</h2>
<p>最后，这个可视化显示了 Billboard 1960 年到 2020 年的前 100 位艺术家。我个人喜欢这个图表，因为它提供了很多信息：你可以看到顶级艺术家是谁，他们什么时候最流行，以及他们有多少歌曲 称霸排行榜！</p>
<p>你认识多少艺术家？</p>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext中文文本分析库 | 值得收藏</title>
      <link>https://textdata.cn/blog/cntext_v_1/</link>
      <pubDate>Mon, 08 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/cntext_v_1/</guid>
      <description>简单好用的中文Python文本分析包</description>
      <content:encoded><![CDATA[<h2 id="cntext">cntext</h2>
<p>中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等</p>
<ul>
<li><a href="https://github.com/hidadeng/cntext">github地址</a> <code>https://github.com/hidadeng/cntext</code></li>
<li><a href="https://pypi.org/project/cntext/">pypi地址</a>  <code>https://pypi.org/project/cntext/</code></li>
<li><a href="https://ke.qq.com/course/482241?tuin=163164df">视频课-<strong>Python网络爬虫与文本数据分析</strong></a></li>
</ul>
<p>功能模块含</p>
<ul>
<li><strong>cntext</strong></li>
<li><strong>stats</strong>  文本统计,可读性等</li>
<li><strong>dictionary</strong> 构建词表(典)</li>
<li><strong>sentiment</strong>  情感分析</li>
<li><strong>similarity</strong>   文本相似度</li>
<li><strong>visualization</strong> 可视化，如词云图</li>
</ul>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/cntext/tree/main/examples">https://github.com/hidadeng/cntext/tree/main/examples</a></p>
<br>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install cntext==0.9
</code></pre></div><br>
<h2 id="一cntext">一、cntext</h2>
<p>查看cntext基本信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span>

<span class="n">help</span><span class="p">(</span><span class="n">cntext</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">Help</span> <span class="nx">on</span> <span class="kn">package</span> <span class="nx">cntext</span><span class="p">:</span>

<span class="nx">NAME</span>
    <span class="nx">cntext</span>

<span class="nx">PACKAGE</span> <span class="nx">CONTENTS</span>
    <span class="nf">description</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">dictionary</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">sentiment</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">similarity</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">visualization</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>

<span class="nx">DATA</span>
    <span class="nx">ADV_words</span> <span class="p">=</span> <span class="p">[</span><span class="sc">&#39;都&#39;</span><span class="p">,</span> <span class="sc">&#39;全&#39;</span><span class="p">,</span> <span class="sc">&#39;单&#39;</span><span class="p">,</span> <span class="sc">&#39;共&#39;</span><span class="p">,</span> <span class="sc">&#39;光&#39;</span><span class="p">,</span> <span class="sc">&#39;尽&#39;</span><span class="p">,</span> <span class="sc">&#39;净&#39;</span><span class="p">,</span> <span class="sc">&#39;仅&#39;</span><span class="p">,</span> <span class="sc">&#39;就&#39;</span><span class="p">,</span> <span class="sc">&#39;只&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一共</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">CONJ_words</span> <span class="p">=</span> <span class="p">[</span><span class="sc">&#39;乃&#39;</span><span class="p">,</span> <span class="sc">&#39;乍&#39;</span><span class="p">,</span> <span class="sc">&#39;与&#39;</span><span class="p">,</span> <span class="sc">&#39;无&#39;</span><span class="p">,</span> <span class="sc">&#39;且&#39;</span><span class="p">,</span> <span class="sc">&#39;丕&#39;</span><span class="p">,</span> <span class="sc">&#39;为&#39;</span><span class="p">,</span> <span class="sc">&#39;共&#39;</span><span class="p">,</span> <span class="sc">&#39;其&#39;</span><span class="p">,</span> <span class="sc">&#39;况&#39;</span><span class="p">,</span> <span class="sc">&#39;厥&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">DUTIR_Ais</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">sigh</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一命呜呼</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一场春梦</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一场空</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一头跌在菜刀上</span><span class="err">－</span><span class="nx">切肤之痛</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一念之差</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">..</span>
    <span class="nx">DUTIR_Haos</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">1</span><span class="nx">兒巴经</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">3</span><span class="nx">x</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">8</span><span class="nx">错</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BUCUO</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">Cool毙</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">NB</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Jings</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">848</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">FT</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">_god</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">yun</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个骰子掷七点</span><span class="err">－</span><span class="nx">出乎意料</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一举成名</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">......</span>
    <span class="nx">DUTIR_Jus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一则以喜</span><span class="err">，</span><span class="nx">一则以惧</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一发千钧</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一年被蛇咬</span><span class="err">，</span><span class="nx">三年怕草索</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一座皆惊</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一脸横肉</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一蛇两头</span><span class="o">...</span>
    <span class="nx">DUTIR_Les</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="p">:)</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">CC</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">Happy</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">LOL</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">_so</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">haha</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Nus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">2</span><span class="nx">气斗狠</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">MD</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">TNND</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">gun</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">kao</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一刀两断</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Wus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">B4</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BD</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BS</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">HC</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">HJ</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">JJWW</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_deny</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;不&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不可</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不是</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不能</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不要</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;休&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_extreme</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;万&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万万</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万分</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万般</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不亦乐乎</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不可开交</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_ish</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一些</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一点</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一点儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不丁点儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不大</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不怎么</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_more</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;多&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">大不了</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">如斯</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">尤甚</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;强&#39;</span><span class="p">,</span> <span class="sc">&#39;愈&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_neg</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一下子爆发</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一下子爆发的一连串</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一不小心</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个屁</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一仍旧贯</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一偏</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_pos</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一专多能</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一丝不差</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一丝不苟</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个心眼儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一五一十</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_very</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">不为过</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不少</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不胜</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不过</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">何啻</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">何止</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">STOPWORDS_en</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">about</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">above</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">across</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">after</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">afterwards</span><span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">STOPWORDS_zh</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;、&#39;</span><span class="p">,</span> <span class="sc">&#39;。&#39;</span><span class="p">,</span> <span class="sc">&#39;〈&#39;</span><span class="p">,</span> <span class="sc">&#39;〉&#39;</span><span class="p">,</span> <span class="sc">&#39;《&#39;</span><span class="p">,</span> <span class="sc">&#39;》&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    
    <span class="nx">FORMAL_pos_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">100</span><span class="nx">强</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">3</span><span class="nx">A级</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">50</span><span class="nx">强</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">AAA级</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">AAA企业</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">爱戴</span><span class="err">&#39;</span><span class="p">,..]</span>
    <span class="nx">FORMAL_neg_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">安于现状</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗藏</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗淡</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗黑</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗流</span><span class="err">&#39;</span><span class="p">,</span> <span class="p">..]</span>
    <span class="nx">UNFORMAL_pos_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">爱心</span><span class="sc">&#39;,&#39;</span><span class="nx">安定</span><span class="sc">&#39;,&#39;</span><span class="nx">安全</span><span class="sc">&#39;,&#39;</span><span class="nx">安然无恙</span><span class="sc">&#39;,&#39;</span><span class="nx">安泰</span><span class="sc">&#39;,&#39;</span><span class="nx">霸主</span><span class="err">&#39;</span><span class="p">,</span><span class="o">...</span><span class="p">]</span>
    <span class="nx">UNFORMAL_neg_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">哀鸿遍野</span><span class="sc">&#39;,&#39;</span><span class="nx">肮脏</span><span class="sc">&#39;,&#39;</span><span class="nx">罢免</span><span class="sc">&#39;,&#39;</span><span class="nx">白痴</span><span class="sc">&#39;,&#39;</span><span class="nx">败笔</span><span class="sc">&#39;,&#39;</span><span class="nx">败诉</span><span class="sc">&#39;,&#39;</span><span class="nx">半信半疑</span><span class="err">&#39;</span><span class="p">..]</span>



<span class="nx">FILE</span>
    <span class="o">/</span><span class="nx">Library</span><span class="o">/</span><span class="nx">Frameworks</span><span class="o">/</span><span class="nx">Python</span><span class="p">.</span><span class="nx">framework</span><span class="o">/</span><span class="nx">Versions</span><span class="o">/</span><span class="mf">3.7</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">python3</span><span class="mf">.7</span><span class="o">/</span><span class="nx">site</span><span class="o">-</span><span class="nx">packages</span><span class="o">/</span><span class="nx">cntext</span><span class="o">/</span><span class="nx">__init__</span><span class="p">.</span><span class="nx">py</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext</span> <span class="kn">import</span> <span class="n">dict_info</span>

<span class="n">dict_info</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"> 【大连理工大学情感本体库】
     七大情绪分类，依次是哀、恶、好、惊、惧、乐、怒；对应的情绪词表依次：
    DUTIR_Ais = {&#34;泣血捶膺&#34;, &#34;望断白云&#34;, &#34;日暮途穷&#34;, &#34;身微力薄&#34;...}
    DUTIR_Wus = {&#34;饰非遂过&#34;, &#34;恶语&#34;, &#34;毁害&#34;, &#34;恶籍盈指&#34;, &#34;脾气爆躁&#34;, &#34;淫贱&#34;, &#34;凌乱&#34;...}
    DUTIR_Haos =  {&#34;打破砂锅璺到底&#34;, &#34;多彩&#34;, &#34;披沙拣金&#34;, &#34;见机行事&#34;, &#34;精神饱满&#34;...}
    DUTIR_Jings = {&#34;骇人视听&#34;, &#34;拍案惊奇&#34;, &#34;悬念&#34;, &#34;无翼而飞&#34;, &#34;原来&#34;, &#34;冷门&#34;...}
    DUTIR_Jus ={&#34;山摇地动&#34;, &#34;月黑风高&#34;, &#34;流血&#34;, &#34;老鼠偷猫饭－心惊肉跳&#34;, &#34;一发千钧&#34;...}
    DUTIR_Les ={&#34;含哺鼓腹&#34;, &#34;欢呼鼓舞&#34;, &#34;莺歌蝶舞&#34;, &#34;将伯之助&#34;, &#34;逸兴横飞&#34;, &#34;舒畅&#34;...}
    DUTIR_Nus = {&#34;怨气满腹&#34;, &#34;面有愠色&#34;, &#34;愤愤&#34;, &#34;直眉瞪眼&#34;, &#34;负气斗狠&#34;, &#34;挑眼&#34;...}
    
    【知网Hownet词典】
    含正负形容词、否定词、副词等词表，对应的词表依次:
    HOWNET_deny = {&#34;不&#34;, &#34;不是&#34;, &#34;不能&#34;, &#34;不可&#34;...}
    HOWNET_extreme = {&#34;百分之百&#34;, &#34;倍加&#34;, &#34;备至&#34;, &#34;不得了&#34;...}
    HOWNET_ish = {&#34;点点滴滴&#34;, &#34;多多少少&#34;, &#34;怪&#34;, &#34;好生&#34;, &#34;还&#34;, &#34;或多或少&#34;...}
    HOWNET_more = {&#34;大不了&#34;, &#34;多&#34;, &#34;更&#34;, &#34;比较&#34;, &#34;更加&#34;, &#34;更进一步&#34;, &#34;更为&#34;, &#34;还&#34;, &#34;还要&#34;...}
    HOWNET_neg = {&#34;压坏&#34;, &#34;鲁莽的&#34;, &#34;被控犯罪&#34;, &#34;银根紧&#34;, &#34;警惕的&#34;, &#34;残缺&#34;, &#34;致污物&#34;, &#34;柔弱&#34;...}
    HOWNET_pos = {&#34;无误&#34;, &#34;感激不尽&#34;, &#34;受大众欢迎&#34;, &#34;敬礼&#34;,  &#34;文雅&#34;, &#34;一尘不染&#34;, &#34;高精度&#34;, &#34;兴盛&#34;...}
    HOWNET_very = {&#34;不为过&#34;, &#34;超&#34;, &#34;超额&#34;, &#34;超外差&#34;, &#34;超微结构&#34;, &#34;超物质&#34;, &#34;出头&#34;...}
    
    【停用词表】
    中英文停用词表，依次
    STOPWORDS_zh = {&#34;经&#34;, &#34;得&#34;, &#34;则甚&#34;, &#34;跟&#34;, &#34;好&#34;, &#34;具体地说&#34;...}
    STOPWORDS_en = {&#39;a&#39;, &#39;about&#39;, &#39;above&#39;, &#39;across&#39;, &#39;after&#39;...}
    
    【中文副词/连词】
    副词ADV、连词CONJ
    ADV_words = [&#39;都&#39;, &#39;全&#39;, &#39;单&#39;, &#39;共&#39;, &#39;光&#39;...}
    CONJ_words = [&#39;乃&#39;, &#39;乍&#39;, &#39;与&#39;, &#39;无&#39;, &#39;且&#39;...}
    
    【金融情绪词典】
     姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.
     #正式-肯定情绪词典
     FORMAL_pos_words = [&#39;100强&#39;, &#39;3A级&#39;, &#39;50强&#39;, &#39;AAA级&#39;, &#39;AAA企业&#39;, &#39;爱戴&#39;,...]
     #正式-否定情绪词典
     FORMAL_neg_words = [&#39;安于现状&#39;, &#39;暗藏&#39;, &#39;暗淡&#39;, &#39;暗黑&#39;, &#39;暗流&#39;, ...]
     #非正式-肯定情绪词典
     UNFORMAL_pos_words = [&#39;爱心&#39;,&#39;安定&#39;,&#39;安全&#39;,&#39;安然无恙&#39;,&#39;安泰&#39;,&#39;霸主&#39;,...]
     #非正式-否定情绪词典
     UNFORMAL_neg_words = [&#39;哀鸿遍野&#39;,&#39;肮脏&#39;,&#39;罢免&#39;,&#39;白痴&#39;,&#39;败笔&#39;,&#39;败诉&#39;,&#39;半信半疑&#39;...]
</code></pre></div><br>
<p>查看词表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext</span> <span class="kn">import</span> <span class="n">CONJ_words</span><span class="p">,</span> <span class="n">ADV_words</span>

<span class="c1">#获取连词词表</span>
<span class="n">CONJ_words</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;乃&#39;,
 &#39;乍&#39;,
 &#39;与&#39;,
 &#39;无&#39;,
 &#39;且&#39;,
 &#39;丕&#39;,
 &#39;为&#39;,
 &#39;共&#39;,
 &#39;其&#39;,
 &#39;况&#39;,
 &#39;厥&#39;,
 &#39;则&#39;,
 &#39;那&#39;,
 &#39;兼&#39;,
 ...
 ]
</code></pre></div><p><br><br></p>
<h2 id="二stats">二、stats</h2>
<p>目前含</p>
<ul>
<li>term_freq 词频统计函数，返回Counter类型</li>
<li>readability 中文可读性</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.stats</span> <span class="kn">import</span> <span class="n">term_freq</span><span class="p">,</span> <span class="n">readability</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更&#39;</span>
<span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<p>**中文可读性 ** 算法参考自</p>
<blockquote>
<p>徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.</p>
</blockquote>
<ul>
<li>readability1 &mdash;每个分句中的平均字数</li>
<li>readability2  &mdash;每个句子中副词和连词所占的比例</li>
<li>readability3  &mdash;参考Fog Index， readability3=(readability1+readability2)×0.5</li>
</ul>
<p>以上三个指标越大，都说明文本的复杂程度越高，可读性越差。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">readability</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 27.0,
 &#39;readability2&#39;: 0.17647058823529413,
 &#39;readability3&#39;: 13.588235294117647}
</code></pre></div><p><br><br></p>
<h2 id="三dictionary">三、dictionary</h2>
<p>本模块用于构建词表(典),含</p>
<ul>
<li>SoPmi 共现法扩充词表(典)</li>
<li>W2VModels 词向量word2vec扩充词表(典)</li>
</ul>
<h3 id="31-sopmi-共现法">3.1 SoPmi 共现法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">SoPmi</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">sopmier</span> <span class="o">=</span> <span class="n">SoPmi</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span>
                <span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_corpus.txt&#39;</span><span class="p">,</span>  <span class="c1">#原始数据，您的语料</span>
                <span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_seed_words.txt&#39;</span><span class="p">,</span> <span class="c1">#人工标注的初始种子词</span>
                <span class="p">)</span>   

<span class="n">sopmier</span><span class="o">.</span><span class="n">sopmi</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">step 1/4:...seg corpus ...
Loading model cost 0.678 seconds.
Prefix dict has been built successfully.
step 1/4 finished:...cost 60.78995203971863...
step 2/4:...collect cowords ...
step 2/4 finished:...cost 0.6169600486755371...
step 3/4:...compute sopmi ...
step 1/4 finished:...cost 0.26422882080078125...
step 4/4:...save candiwords ...
finished! cost 61.8965539932251
</code></pre></div><br>
<h3 id="32-w2vmodels-词向量">3.2 W2VModels 词向量</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">W2VModels</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#初始化模型</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>  <span class="c1">#语料数据 w2v_corpus.txt</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_corpus.txt&#39;</span><span class="p">)</span>


<span class="c1">#根据种子词，筛选出没类词最相近的前100个词</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/integrity.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/innovation.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/quality.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/respect.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/teamwork.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">数据预处理开始.......
预处理结束...........
Word2Vec模型训练开始......
已将模型存入 /Users/Desktop/cntext/test/output/w2v_candi_words/w2v.model 

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 572 个相似的候选词
计算每个候选词 与 integrity 的相似度， 选出相似度最高的前 100 个候选词
已完成 【integrity 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/integrity.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 516 个相似的候选词
计算每个候选词 与 innovation 的相似度， 选出相似度最高的前 100 个候选词
已完成 【innovation 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/innovation.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 234 个相似的候选词
计算每个候选词 与 quality 的相似度， 选出相似度最高的前 100 个候选词
已完成 【quality 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/quality.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 243 个相似的候选词
计算每个候选词 与 respect 的相似度， 选出相似度最高的前 100 个候选词
已完成 【respect 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/respect.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 319 个相似的候选词
计算每个候选词 与 teamwork 的相似度， 选出相似度最高的前 100 个候选词
已完成 【teamwork 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/teamwork.txt， 耗时 46 秒
</code></pre></div><p><br><br></p>
<h2 id="四-sentiment">四、 sentiment</h2>
<ul>
<li>senti_by_hownet 使用知网Hownet词典对文本进行<strong>情感</strong>分析</li>
<li>senti_by_dutir  使用大连理工大学情感本体库dutir对文本进行<strong>情绪</strong>分析</li>
<li>senti_by_diydict 使用<strong>自定义词典</strong> 对文本进行<strong>情感</strong>分析</li>
</ul>
<h3 id="41-senti_by_hownettext-adj_advfalse">4.1 senti_by_hownet(text, adj_adv=False)</h3>
<p>使用知网Hownet词典进行(中)文本数据的情感分析，统计正、负情感信息出现次数(得分)</p>
<ul>
<li>text:  待分析的中文文本数据</li>
<li>adj_adv:  是否考虑副词（否定词、程度词）对情绪形容词的反转和情感强度修饰作用，默认False。默认False只统计情感形容词出现个数；</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.sentiment</span> <span class="kn">import</span> <span class="n">senti_by_hownet</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>

<span class="n">senti_by_dutir</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;word_num&#39;: 12,
 &#39;sentence_num&#39;: 2,
 &#39;stopword_num&#39;: 4,
 &#39;好_num&#39;: 0,
 &#39;乐_num&#39;: 1,
 &#39;哀_num&#39;: 0,
 &#39;怒_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;惊_num&#39;: 0}
</code></pre></div><br>
<p>考虑副词（否定词、程度词）对情绪形容词的反转和情感强度修饰作用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">senti_by_hownet</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">adj_adv</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;sentence_num&#39;: 1,
 &#39;word_num&#39;: 12,
 &#39;stopword_num&#39;: 3,
 &#39;pos_score&#39;: 13.0,
 &#39;neg_score&#39;: 0.0}
</code></pre></div><p><br><br></p>
<h3 id="42-senti_by_dutirtext">4.2 senti_by_dutir(text)</h3>
<p>使用大连理工大学情感本体库对文本进行情绪分析，统计各情绪词语出现次数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.sentiment</span> <span class="kn">import</span> <span class="n">senti_by_dutir</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>

<span class="n">senti_by_dutir</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;word_num&#39;: 12,
 &#39;sentence_num&#39;: 2,
 &#39;stopword_num&#39;: 4,
 &#39;好_num&#39;: 0,
 &#39;乐_num&#39;: 1,
 &#39;哀_num&#39;: 0,
 &#39;怒_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;惊_num&#39;: 0}
</code></pre></div><blockquote>
<p>情绪分析使用的大连理工大学情感本体库，如发表论文，请注意用户许可协议</p>
<p>如果用户使用该资源发表论文或取得科研成果，请在论文中添加诸如“使用了大连理工大学信息检索研究室的情感词汇本体” 字样加以声明。</p>
<p>参考文献中加入引文“徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.”</p>
</blockquote>
<p><br><br></p>
<h3 id="43-senti_by_diytext">4.3 senti_by_diy(text)</h3>
<p>使用diy词典进行情感分析，计算各个情绪词出现次数，未考虑强度副词、否定词对情感的复杂影响，</p>
<ul>
<li>text:  待分析中文文本</li>
<li>sentiwords:  情感词字典；
{&lsquo;category1&rsquo;:  &lsquo;category1 词语列表&rsquo;,
&lsquo;category2&rsquo;: &lsquo;category2词语列表&rsquo;,
&lsquo;category3&rsquo;: &lsquo;category3词语列表&rsquo;,
&hellip;
}</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sentiwords</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;开心&#39;</span><span class="p">,</span> <span class="s1">&#39;愉快&#39;</span><span class="p">,</span> <span class="s1">&#39;倍爽&#39;</span><span class="p">],</span>
              <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;难过&#39;</span><span class="p">,</span> <span class="s1">&#39;悲伤&#39;</span><span class="p">],</span>
              <span class="s1">&#39;adv&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;倍&#39;</span><span class="p">]}</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>
<span class="n">senti_by_diydict</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">sentiwords</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;pos_num&#39;: 1,
 &#39;neg_num&#39;: 0,
 &#39;adv_num&#39;: 1,
 &#39;stopword_num&#39;: 4,
 &#39;sentence_num&#39;: 2,
 &#39;word_num&#39;: 12}
</code></pre></div><p><br><br></p>
<h3 id="44-注意">4.4 注意</h3>
<p><strong>返回结果</strong>:  <strong>num</strong>表示词语出现次数； score是考虑副词、否定词对情感的修饰，结果不是词频，是情感类别的得分。</p>
<p><br><br></p>
<h2 id="五similarity">五、similarity</h2>
<p>使用cosine、jaccard、miniedit等计算两文本的相似度，算法实现参考自</p>
<blockquote>
<p>Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.</p>
</blockquote>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">from cntext.similarity import similarity_score

text1 = &#39;编程真好玩编程真好玩&#39;
text2 = &#39;游戏真好玩编程真好玩&#39;

similarity_score(text1, text2)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;Sim_Cosine&#39;: 0.816496580927726,
 &#39;Sim_Jaccard&#39;: 0.6666666666666666,
 &#39;Sim_MinEdit&#39;: 1,
 &#39;Sim_Simple&#39;: 0.9183673469387755}
</code></pre></div><p><br><br></p>
<h2 id="六visualization">六、visualization</h2>
<p>文本信息可视化，含wordcloud、wordshiftor</p>
<ul>
<li>wordcloud 词云图</li>
<li>wordshiftor 两文本词移图</li>
</ul>
<h3 id="61-wordcloudtext-title-html_path">6.1 wordcloud(text, title, html_path)</h3>
<ul>
<li>text:  中文文本字符串数据</li>
<li>title:  词云图标题</li>
<li>html_path:  词云图html文件存储路径</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.visualization</span> <span class="kn">import</span> <span class="n">wordcloud</span>

<span class="n">text1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;在信息化时代，各种各样的数据被广泛采集和利用，有些数据看似无关紧要甚至好像是公开的，但同样关乎国家安全。11月1日是《反间谍法》颁布实施七周年。近年来，国家安全机关按照《反间谍法》《数据安全法》有关规定，依法履行数据安全监管职责，在全国范围内开展涉外数据专项执法行动，发现一些境外数据公司长期、大量、实时搜集我境内船舶数据，数据安全领域的“商业间谍”魅影重重。
</span><span class="s2">
</span><span class="s2">2020年6月，国家安全机关在反间谍专项行动中发现，有境外数据公司通过网络在境内私下招募“数据贡献员”。广东省湛江市国家安全局据此开展调查，在麻斜军港附近发现有可疑的无线电设备在持续搜集湛江港口舰船数据，并通过互联网实时传往境外。在临近海港的一个居民楼里，国家安全机关工作人员最终锁定了位置。
</span><span class="s2">
</span><span class="s2">一套简易的无线电设备是AIS陆基基站，用来接收AIS系统发射的船舶数据。AIS系统是船舶身份自动识别系统，国际海事组织要求300总吨以上船舶必须强制安装。船只在航行过程中，通过AIS系统向其他船只和主管部门发送船只航向、航速、目的港等信息，用于航行避让、交通导航、轨迹回溯等功能。国家安全机关查获的设备虽然看上去简陋，功能却十分强大。
</span><span class="s2">
</span><span class="s2">国家安全机关进一步调查发现，这个基站的来历并不简单。2016年，湛江市的无线电爱好者郑某偶然收到一封境外某海事数据公司发来的邀请邮件。
</span><span class="s2">
</span><span class="s2">作为资深的无线电爱好者，能免费领取价值几千元的设备还能获取更多的船舶信息，郑某当然心动。而且，这个基站的架设也非常容易，只要简单组装连上家里的网络，自己的任务就算完成。郑某马上浏览了这家公司申请无线电设备的页面，并按对方要求填写了信息。
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">wordcloud</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text1</span><span class="p">,</span> 
          <span class="n">title</span><span class="o">=</span><span class="s1">&#39;词云图测试&#39;</span><span class="p">,</span> 
          <span class="n">html_path</span><span class="o">=</span><span class="s1">&#39;output/词云图测试.html&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>

<figure >
    
        <img src="img/wordcloud.png" width="800" />
    
    
</figure>

<br>
<h3 id="62-wordshiftortext1-text2-title-top_n-matplotlib_family">6.2 wordshiftor(text1, text2, title, top_n, matplotlib_family)</h3>
<ul>
<li>text1:  文本数据1；字符串</li>
<li>text2:  文本数据2；字符串</li>
<li>title:  词移图标题</li>
<li>top_n:  显示最常用的前n词； 默认值15</li>
<li>matplotlib_family matplotlib中文字体，默认&quot;Arial Unicode MS&quot;；如绘图字体乱码请，请参考下面提示</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;在信息化时代，各种各样的数据被广泛采集和利用，有些数据看似无关紧要甚至好像是公开的，但同样关乎国家安全。11月1日是《反间谍法》颁布实施七周年。近年来，国家安全机关按照《反间谍法》《数据安全法》有关规定，依法履行数据安全监管职责，在全国范围内开展涉外数据专项执法行动，发现一些境外数据公司长期、大量、实时搜集我境内船舶数据，数据安全领域的“商业间谍”魅影重重。
</span><span class="s2">
</span><span class="s2">2020年6月，国家安全机关在反间谍专项行动中发现，有境外数据公司通过网络在境内私下招募“数据贡献员”。广东省湛江市国家安全局据此开展调查，在麻斜军港附近发现有可疑的无线电设备在持续搜集湛江港口舰船数据，并通过互联网实时传往境外。在临近海港的一个居民楼里，国家安全机关工作人员最终锁定了位置。
</span><span class="s2">
</span><span class="s2">一套简易的无线电设备是AIS陆基基站，用来接收AIS系统发射的船舶数据。AIS系统是船舶身份自动识别系统，国际海事组织要求300总吨以上船舶必须强制安装。船只在航行过程中，通过AIS系统向其他船只和主管部门发送船只航向、航速、目的港等信息，用于航行避让、交通导航、轨迹回溯等功能。国家安全机关查获的设备虽然看上去简陋，功能却十分强大。
</span><span class="s2">
</span><span class="s2">国家安全机关进一步调查发现，这个基站的来历并不简单。2016年，湛江市的无线电爱好者郑某偶然收到一封境外某海事数据公司发来的邀请邮件。
</span><span class="s2">
</span><span class="s2">作为资深的无线电爱好者，能免费领取价值几千元的设备还能获取更多的船舶信息，郑某当然心动。而且，这个基站的架设也非常容易，只要简单组装连上家里的网络，自己的任务就算完成。郑某马上浏览了这家公司申请无线电设备的页面，并按对方要求填写了信息。
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>


<span class="n">text2</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">通知强调，各地商务主管部门要紧紧围绕保供稳价工作目标，压实“菜篮子”市长负责制，细化工作措施；强化横向协作与纵向联动，加强与有关部门的工作协调，形成工作合力；建立完善省际间和本地区联保联供机制，健全有关工作方案，根据形势及时开展跨区域调运；加强市场运行监测，每日跟踪蔬菜、肉类等重点生活必需品供求和价格变化情况，及时预测，及早预警。
</span><span class="s2">
</span><span class="s2">通知要求，各地支持鼓励大型农产品流通企业与蔬菜、粮油、畜禽养殖等农产品生产基地建立紧密合作关系，签订长期供销协议；耐储蔬菜要提前采购，锁定货源，做好本地菜与客菜之间，北菜与南菜之间、设施菜与露天菜之间的梯次轮换和衔接供应；健全完备本地肉类储备规模及管理制度；北方省份要按时完成本年度冬春蔬菜储备计划，南方省份要根据自身情况建立完善蔬菜储备；及时投放肉类、蔬菜等生活必需品储备，补充市场供应。
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="kn">from</span> <span class="nn">cntext.visualization</span> <span class="kn">import</span> <span class="n">wordshiftor</span>

<span class="n">wordshiftor</span><span class="p">(</span><span class="n">text1</span><span class="o">=</span><span class="n">text1</span><span class="p">,</span> 
            <span class="n">text2</span><span class="o">=</span><span class="n">text2</span><span class="p">,</span> 
            <span class="n">title</span><span class="o">=</span><span class="s1">&#39;两文本对比&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>

<figure >
    
        <img src="img/wordshiftor.png" width="800" />
    
    
</figure>

<h3 id="63-textpictitlepython测试-subtitle使用python生成图片-fontalibaba-puhuiti-boldotf-titlesize18-subsize14">6.3 textpic(title=&lsquo;PYTHON测试&rsquo;, subtitle=&lsquo;使用Python生成图片&rsquo;, font=&lsquo;Alibaba-PuHuiTi-Bold.otf&rsquo;, titlesize=1.8, subsize=14)</h3>
<ul>
<li>title:  主标题</li>
<li>subtitle: 副标题</li>
<li>font:  本地中文字体路径</li>
<li>titlesize: 主标题字体大小</li>
<li>subsize: 副标题字体大小</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">textpic</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;PYTHON测试&#39;</span><span class="p">,</span> 
        <span class="n">subtitle</span><span class="o">=</span><span class="s1">&#39;使用Python生成图片&#39;</span><span class="p">,</span> 
        <span class="n">font</span><span class="o">=</span><span class="s1">&#39;data/Alibaba-PuHuiTi-Bold.otf&#39;</span><span class="p">,</span> 
        <span class="n">titlesize</span><span class="o">=</span><span class="mf">1.8</span><span class="p">,</span> 
        <span class="n">subsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/result.png" width="800" />
    
    
</figure>

<br>
<p><strong>注意</strong></p>
<blockquote>
<p>设置参数matplotlib_family，需要先运行下面代码获取本机字体列表
from matplotlib.font_manager import FontManager
mpl_fonts = set(f.name for f in FontManager().ttflist)
print(mpl_fonts)</p>
</blockquote>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugging Face | 自然语言处理平台</title>
      <link>https://textdata.cn/blog/huggingface_test/</link>
      <pubDate>Sun, 07 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/huggingface_test/</guid>
      <description>十行以内代码实现任意NLP功能</description>
      <content:encoded><![CDATA[<p>Huggingface（抱抱脸）总部位于纽约，是一家专注于自然语言处理、人工智能和分布式系统的创业公司。他们所提供的聊天机器人技术一直颇受欢迎，但更出名的是他们在NLP开源社区上的贡献。</p>
<p>Huggingface一直致力于自然语言处理NLP技术的平民化(democratize)，希望每个人都能用上最先进(SOTA, state-of-the-art)的NLP技术，而非困窘于训练资源的匮乏。</p>
<p><strong>Hugging Face所有模型的地址</strong></p>
<p><a href="https://huggingface.co/models">https://huggingface.co/models</a></p>
<p>你可以在这里下载所需要的模型，也可以上传你微调之后用于特定task的模型。</p>
<br>
<p><strong>Hugging Face使用文档的地址</strong></p>
<p><a href="https://huggingface.co/transformers/master/index.html">https://huggingface.co/transformers/master/index.html</a></p>
<p><br><br></p>
<h2 id="英汉互译">英汉互译</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">zh2en_model</span> <span class="o">=</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-zh-en&#39;</span><span class="p">)</span>
<span class="n">zh2en_tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-zh-en&#39;</span><span class="p">)</span>
<span class="n">zh2en_translation</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;translation_zh_to_en&#39;</span><span class="p">,</span> 
                       <span class="n">model</span><span class="o">=</span><span class="n">zh2en_model</span><span class="p">,</span> 
                       <span class="n">tokenizer</span><span class="o">=</span><span class="n">zh2en_tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">zh2en_translation</span><span class="p">(</span><span class="s1">&#39;Python是一门非常强大的编程语言!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>[{'translation_text': 'Python is a very powerful programming language!'}]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">en2zh_model</span> <span class="o">=</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-en-zh&#39;</span><span class="p">)</span>
<span class="n">en2zh_tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-en-zh&#39;</span><span class="p">)</span>

<span class="n">en2zh_translation</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;translation_en_to_zh&#39;</span><span class="p">,</span> 
                       <span class="n">model</span><span class="o">=</span><span class="n">en2zh_model</span><span class="p">,</span> 
                       <span class="n">tokenizer</span><span class="o">=</span><span class="n">en2zh_tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">en2zh_translation</span><span class="p">(</span><span class="s1">&#39;Python is a very powerful programming language!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>[{'translation_text': 'Python是一个非常强大的编程语言!'}]
</code></pre>
<p><br><br></p>
<h2 id="文本分类">文本分类</h2>
<p>模型 <strong>uer/roberta-base-finetuned-chinanews-chinese</strong>是使用5个中文文本分类数据集训练得到</p>
<ul>
<li>京东full、京东binary和大众点评数据集包含不同情感极性的用户评论数据。</li>
<li>凤凰网 和 China Daily 包含不同主题类的新闻文本数据</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForSequenceClassification</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;uer/roberta-base-finetuned-chinanews-chinese&#39;</span><span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;uer/roberta-base-finetuned-chinanews-chinese&#39;</span><span class="p">)</span>
<span class="n">text_classification</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;sentiment-analysis&#39;</span><span class="p">,</span> 
                               <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span> 
                               <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_text</span> <span class="o">=</span> <span class="s2">&#34;上证指数大涨2%&#34;</span>

<span class="n">text_classification</span><span class="p">(</span><span class="n">test_text</span><span class="p">,</span> <span class="n">return_all_scores</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>[[{'label': 'mainland China politics', 'score': 0.0002807585697155446},
  {'label': 'Hong Kong - Macau politics', 'score': 0.00015504546172451228},
  {'label': 'International news', 'score': 6.818029214628041e-05},
  {'label': 'financial news', 'score': 0.9991051554679871},
  {'label': 'culture', 'score': 0.00011297615128569305},
  {'label': 'entertainment', 'score': 0.00012184812658233568},
  {'label': 'sports', 'score': 0.0001558474759804085}]]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_text</span> <span class="o">=</span> <span class="s2">&#34;Python是一门强大的编程语言&#34;</span>
<span class="n">text_classification</span><span class="p">(</span><span class="n">test_text</span><span class="p">,</span> <span class="n">return_all_scores</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>[[{'label': 'mainland China politics', 'score': 0.02050291746854782},
  {'label': 'Hong Kong - Macau politics', 'score': 0.0030984438490122557},
  {'label': 'International news', 'score': 0.005687597207725048},
  {'label': 'financial news', 'score': 0.03360358253121376},
  {'label': 'culture', 'score': 0.913349986076355},
  {'label': 'entertainment', 'score': 0.010810119099915028},
  {'label': 'sports', 'score': 0.012947351671755314}]]
</code></pre>
<p><br><br></p>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211108HuggingFace%E5%AD%A6%E4%B9%A0">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211108HuggingFace学习</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用matplotlib绘制超可爱超萌化的图表</title>
      <link>https://textdata.cn/blog/cute_matplotlib/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/cute_matplotlib/</guid>
      <description>萌化matplotlib图</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031%E4%BD%BF%E7%94%A8matplotlib%E7%BB%98%E5%88%B6%E5%8D%A1%E9%80%9A%E5%8C%96%E5%9B%BE%E8%A1%A8">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031使用matplotlib绘制卡通化图表</a></p>
<p>数据可视化是讲故事的好方法，从中可以轻松地吸收信息并识别数据中的模式。我们的一位学生决定使用 Matplotlib 在 Python 中创建数据可视化，以了解 Netflix 上可用的不同类型的内容。本文将重点介绍使用 Matplotlib 以一种有趣的方式进行数据可视化。</p>
<p>在 Netflix 上看完精彩的节目或电影后，您有没有想过 Netflix 为您提供了如此多的惊人内容？当然，我并不孤单，不是吗？一个想法会导致另一个想法，在不知不觉中，您已经下定决心进行探索性数据分析，以了解更多关于最受欢迎的演员是谁以及哪个国家/地区更喜欢哪种类型的信息。</p>
<p>使用 Python 制作常规的条形图和饼图，虽然它们在传达结果方面做得很好，但我想为这个项目添加一些有趣的元素。</p>
<p>我最近了解到你可以在 Python 最流行的数据可视化库 Matplotlib 中创建类似 xkcd 的绘图，并决定我应该在这个项目中整理我所有的 Matplotlib 可视化，只是为了让事情变得更有趣。</p>
<p>一起来看看数据怎么说吧！</p>
<br>
<h2 id="导入数据">导入数据</h2>
<p>7787部电影/TV节目的信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;netflix_titles.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="netflix历年发展里程碑">Netflix历年发展里程碑</h2>
<p>描述一下 Netflix 多年来演变的时间表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.dpi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">200</span>


<span class="c1"># these go on the numbers below</span>
<span class="n">tl_dates</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;1997</span><span class="se">\n</span><span class="s2">Founded&#34;</span><span class="p">,</span>
    <span class="s2">&#34;1998</span><span class="se">\n</span><span class="s2">Mail Service&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2003</span><span class="se">\n</span><span class="s2">Goes Public&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2007</span><span class="se">\n</span><span class="s2">Streaming service&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2016</span><span class="se">\n</span><span class="s2">Goes Global&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2021</span><span class="se">\n</span><span class="s2">Netflix &amp; Chill&#34;</span>
<span class="p">]</span>
<span class="n">tl_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="c1"># the numbers go on these</span>
<span class="n">tl_sub_x</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mf">6.5</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>

<span class="n">tl_sub_times</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;1998&#34;</span><span class="p">,</span><span class="s2">&#34;2000&#34;</span><span class="p">,</span><span class="s2">&#34;2006&#34;</span><span class="p">,</span><span class="s2">&#34;2010&#34;</span><span class="p">,</span><span class="s2">&#34;2012&#34;</span>
<span class="p">]</span>

<span class="n">tl_text</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;Netflix.com launched&#34;</span><span class="p">,</span>
    <span class="s2">&#34;Starts</span><span class="se">\n</span><span class="s2">Personal</span><span class="se">\n</span><span class="s2">Recommendations&#34;</span><span class="p">,</span><span class="s2">&#34;Billionth DVD Delivery&#34;</span><span class="p">,</span><span class="s2">&#34;Canadian</span><span class="se">\n</span><span class="s2">Launch&#34;</span><span class="p">,</span><span class="s2">&#34;UK Launch&#34;</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
<span class="c1"># Set figure &amp; Axes</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">constrained_layout</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mf">1.75</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

    <span class="c1"># Timeline : line</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">xmin</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">xmax</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;deeppink&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Timeline : Date Points</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;palevioletred&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
    <span class="c1"># Timeline : Time Points</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">,</span><span class="n">zorder</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

    <span class="c1"># Date Text</span>
    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">date</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">tl_dates</span><span class="p">):</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.55</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
                <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">,</span>
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>

    <span class="c1"># Stemplot : vertical line</span>
    <span class="n">levels</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">))</span>
    <span class="n">levels</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.3</span>
    <span class="n">levels</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.3</span>
    <span class="n">markerline</span><span class="p">,</span> <span class="n">stemline</span><span class="p">,</span> <span class="n">baseline</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">levels</span><span class="p">,</span> <span class="n">use_line_collection</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">baseline</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">markerline</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">stemline</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">)</span>

    <span class="c1"># Text</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">txt</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">tl_sub_times</span><span class="p">,</span> <span class="n">tl_text</span><span class="p">):</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mf">1.3</span><span class="o">*</span><span class="p">(</span><span class="n">idx</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
                <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">,</span>
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>

        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mf">1.3</span><span class="o">*</span><span class="p">(</span><span class="n">idx</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mf">0.6</span><span class="p">,</span> <span class="n">txt</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
            <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">)</span>

    <span class="c1"># Spine</span>
    <span class="k">for</span> <span class="n">spine</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">&#34;left&#34;</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">spines</span><span class="p">[</span><span class="n">spine</span><span class="p">]</span><span class="o">.</span><span class="n">set_visible</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>

    <span class="c1"># Ticks</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">([])</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticks</span><span class="p">([])</span>

    <span class="c1"># Title</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s2">&#34;Netflix through the years&#34;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s2">&#34;bold&#34;</span><span class="p">,</span> <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="mf">2.4</span><span class="p">,</span><span class="mf">1.57</span><span class="p">,</span><span class="s2">&#34;From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?&#34;</span><span class="p">,</span> <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;mediumblue&#39;</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="电影-vs-电视综艺">电影 vs 电视综艺</h2>
<p>接下来，我决定看一下电影与电视节目的比例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;type&#34;</span>
<span class="n">grouped</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">grouped</span> <span class="o">=</span> <span class="n">grouped</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="n">col</span> <span class="p">:</span> <span class="s2">&#34;count&#34;</span><span class="p">,</span> <span class="s2">&#34;index&#34;</span> <span class="p">:</span> <span class="n">col</span><span class="p">})</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">explode</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>  <span class="c1"># only &#34;explode&#34; the 2nd slice (i.e. &#39;TV Show&#39;)</span>
    <span class="n">fig1</span><span class="p">,</span> <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">ax1</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">grouped</span><span class="p">[</span><span class="s2">&#34;count&#34;</span><span class="p">],</span> <span class="n">explode</span><span class="o">=</span><span class="n">explode</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">grouped</span><span class="p">[</span><span class="s2">&#34;type&#34;</span><span class="p">],</span> <span class="n">autopct</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%1.1f%%</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="n">shadow</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">startangle</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>
    <span class="n">ax1</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;equal&#39;</span><span class="p">)</span>  <span class="c1"># Equal aspect ratio ensures that pie is drawn as a circle.</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="内容最多的国家">内容最多的国家</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;country&#34;</span>

<span class="n">categories</span> <span class="o">=</span> <span class="s2">&#34;, &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span>
<span class="n">counter_list</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
<span class="n">counter_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span> <span class="k">if</span> <span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span><span class="p">]</span>
<span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">]</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">y_pos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">))</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">y_pos</span><span class="p">,</span> <span class="n">values</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticks</span><span class="p">(</span><span class="n">y_pos</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticklabels</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">invert_yaxis</span><span class="p">()</span>  <span class="c1"># labels read top-to-bottom</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;Content&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;Countries with most content&#39;</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be3.png" width="100%" />
    
    
</figure>

<br>
<h2 id="最流行的导演">最流行的导演</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">import</span> <span class="n">figure</span>
<span class="kn">import</span> <span class="nn">math</span>

<span class="n">colours</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;orangered&#34;</span><span class="p">,</span> <span class="s2">&#34;mediumseagreen&#34;</span><span class="p">,</span> <span class="s2">&#34;darkturquoise&#34;</span><span class="p">,</span> <span class="s2">&#34;mediumpurple&#34;</span><span class="p">,</span> <span class="s2">&#34;deeppink&#34;</span><span class="p">,</span> <span class="s2">&#34;indianred&#34;</span><span class="p">]</span>
<span class="n">countries_list</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;United States&#34;</span><span class="p">,</span> <span class="s2">&#34;India&#34;</span><span class="p">,</span> <span class="s2">&#34;United Kingdom&#34;</span><span class="p">,</span> <span class="s2">&#34;Japan&#34;</span><span class="p">,</span> <span class="s2">&#34;France&#34;</span><span class="p">,</span> <span class="s2">&#34;Canada&#34;</span><span class="p">]</span>
<span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;director&#34;</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">figure</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
    <span class="n">x</span><span class="o">=</span><span class="mi">1</span>
    <span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries_list</span><span class="p">:</span>
        <span class="n">country_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;country&#34;</span><span class="p">]</span><span class="o">==</span><span class="n">country</span><span class="p">]</span>
        <span class="n">categories</span> <span class="o">=</span> <span class="s2">&#34;, &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">country_df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span>
        <span class="n">counter_list</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
        <span class="n">counter_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span> <span class="k">if</span> <span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span><span class="p">]</span>
        <span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">:</span>
            <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span><span class="n">values</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">colours</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">values_int</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
        <span class="n">x</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s1">&#39;Popular Directors with the most content&#39;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be4.png" width="100%" />
    
    
</figure>

<br>
<h2 id="netflix-专注于什么样的内容">Netflix 专注于什么样的内容？</h2>
<p>我还想浏览评级栏并比较 Netflix 为儿童、青少年和成人制作的内容量——以及这些年来他们的重点是否从一个群体转移到另一个群体。</p>
<p>为此，我首先查看了 DataFrame 中的独特评级：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;date_added&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;date_added&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;date_added&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">year</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;Int64&#39;</span><span class="p">)</span>


<span class="n">ratings_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;TV-MA&#39;</span><span class="p">,</span> <span class="s1">&#39;R&#39;</span><span class="p">,</span> <span class="s1">&#39;PG-13&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-14&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-PG&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-G&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y7&#39;</span><span class="p">,</span> <span class="s1">&#39;PG&#39;</span><span class="p">,</span> <span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="s1">&#39;NC-17&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y7-FV&#39;</span><span class="p">]</span>
<span class="n">ratings_group_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span> <span class="s1">&#39;Mature&#39;</span><span class="p">]</span>
<span class="n">ratings_dict</span><span class="o">=</span><span class="p">{</span>
    <span class="s1">&#39;TV-G&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;G&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-PG&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y7&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;PG&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y7-FV&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;PG-13&#39;</span><span class="p">:</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-14&#39;</span><span class="p">:</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-MA&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span><span class="p">,</span>
    <span class="s1">&#39;R&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span><span class="p">,</span>
    <span class="s1">&#39;NC-17&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="n">rating_val</span><span class="p">,</span> <span class="n">rating_group</span> <span class="ow">in</span> <span class="n">ratings_dict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">rating</span> <span class="o">==</span> <span class="n">rating_val</span><span class="p">,</span> <span class="s2">&#34;rating&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">rating_group</span>
    
    
    
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;rating_val&#39;</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
<span class="n">x</span><span class="o">=</span><span class="mi">0</span>
<span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;kinda</span><span class="se">\n</span><span class="s1">less&#39;</span><span class="p">,</span> <span class="s1">&#39;not so</span><span class="se">\n</span><span class="s1">bad&#39;</span><span class="p">,</span> <span class="s1">&#39;holyshit</span><span class="se">\n</span><span class="s1">that</span><span class="se">\&#39;</span><span class="s1">s too</span><span class="se">\n</span><span class="s1">many&#39;</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">ratings_group_list</span><span class="p">:</span>
        <span class="n">grouped</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;rating&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">r</span><span class="p">]</span>
        <span class="n">year_df</span> <span class="o">=</span> <span class="n">grouped</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;year_added&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
        <span class="n">year_df</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">],</span> <span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;rating_val&#39;</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="n">colours</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">marker</span><span class="o">=</span><span class="s1">&#39;o&#39;</span><span class="p">)</span>
        <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2008</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">]))</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([</span><span class="mi">200</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">1000</span><span class="p">],</span> <span class="n">labels</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">values_int</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Count of shows and movies that Netflix</span><span class="se">\n</span><span class="s1"> has been producing for different audiences&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Year&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Content Count&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
        <span class="n">x</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">ratings_group_list</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be5.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何在DataFrame中使用If-Else条件语句创建新列</title>
      <link>https://textdata.cn/blog/how_to_use_ifelse_in_pandas/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/how_to_use_ifelse_in_pandas/</guid>
      <description>两个numpy函数搞定这一难题</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031%E5%A6%82%E4%BD%95%E5%9C%A8DataFrame%E4%B8%AD%E4%BD%BF%E7%94%A8If-Else%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%97">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031如何在DataFrame中使用If-Else条件语句创建新列</a></p>
<br>
<p>有时我们希望根据 DataFrame 其他列(字段) 的值向 DataFrame 添加一列。</p>
<p>虽然这听起来很简单，但如果我们尝试使用 if-else 条件来完成它可能会变得有点复杂。 值得庆幸的是，使用 numpy 两个函数<strong>np.where()、np.select()</strong> 就能实现这一需求。</p>
<h2 id="导入数据">导入数据</h2>
<p>我们有一个包含 4,000 多条 Dataquest 推文的数据集,字段包括：</p>
<ul>
<li>date  twitter发送的日期</li>
<li>time  推文发送时间</li>
<li>tweet   推文内容</li>
<li>mentions    谁提到了该推文</li>
<li>photos    图片链接</li>
<li>replies_count  推文回复数</li>
<li>retweets_count  推文再转发数</li>
<li>likes_count  推文获得的点赞数</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;tweets.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="100%" />
    
    
</figure>

<p><br><br></p>
<h2 id="问题">问题</h2>
<p>我们看到数据集中的<strong>photos</strong>字段是图片链接</p>
<ul>
<li>如果某条记录有信息，会显示图片链接列表</li>
<li>如果不含图片，该字段对应的数据是空列表</li>
</ul>
<p>我们只想查看带有图片的推文是否获得更多交互，因此我们实际上并不需要图片 URL。 让我们尝试创建一个名为 <strong>has_image</strong> 的新列，该列将包含布尔值</p>
<ul>
<li>如果推文包含图像，则为 True，否则为 False。</li>
</ul>
<p>那么我们如何创建一个<strong>has_image</strong>字段？</p>
<p><br><br></p>
<h2 id="npwhere">np.where()</h2>
<p>np.where(condition, value if condition is true, value if condition is false)</p>
<p>为此，我们将使用 numpy 的内置 where() 函数。 这个函数依次接受三个参数：我们要测试的条件，如果条件为真则分配给新列的值，如果条件为假则分配给新列的值。 它看起来像这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;has_image&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;photos&#39;</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;[]&#39;</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="npselect">np.select()</h2>
<p>这种方法很好用，但如果我们新建列的值不止True、False呢？</p>
<p>例如我们把<strong>likes_count</strong> 进行分类，不同取值范围定义为不同的类别</p>
<ul>
<li>tier_4  少于2个赞</li>
<li>tier_3  3-9 个赞</li>
<li>tier_2  10-15 个赞</li>
<li>tier_1  16+ 个赞</li>
</ul>
<p>为此，我们可以使用名为 <strong>np.select()</strong> 的函数。我们将给它两个参数：一个我们的条件列表，以及一个我们想要分配给新列中每一行的值的相关列表。</p>
<p>这意味着顺序很重要：如果满足条件列表中的第一个条件，则值列表中的第一个值将分配给该行的新列。如果满足第二个条件，则将分配第二个值，依此类推。</p>
<p>让我们来看看它在 Python 代码中的表现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># create a list of our conditions</span>
<span class="n">conditions</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">15</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">)</span>
    <span class="p">]</span>

<span class="c1"># create a list of the values we want to assign for each condition</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;tier_4&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_3&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_2&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_1&#39;</span><span class="p">]</span>

<span class="c1"># create a new column and use np.select to assign values to it using our lists as arguments</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;tier&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">conditions</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>

<span class="c1"># display updated DataFrame</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df3.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>让Python代码更简洁的pipe包</title>
      <link>https://textdata.cn/blog/pipe_make_python_code_more_clean/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pipe_make_python_code_more_clean/</guid>
      <description>短小精悍pipe</description>
      <content:encoded><![CDATA[<h1 id="pipe">Pipe</h1>
<p><strong>map</strong>和<strong>filter</strong>是处理iterable数据最好用的函数，但却让代码看起来很乱，使代码可读性大大降低。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#对arr筛选偶数，并对偶数乘以2</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">,</span> <span class="n">arr</span><span class="p">)))</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<p>刚刚的iterable的例子，其实可以使用pipe库中的 <code>|</code> 来应用多种方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span>
    <span class="o">|</span><span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
    <span class="o">|</span><span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<h2 id="pipe是什么">pipe是什么？</h2>
<p>pipe是python中的管道操作库，可以使数据分析多个步骤(函数）像管道(流水线)一样上下衔接，共同完成一个数据分析任务。</p>
<p>我喜欢pipe是因为它让iterable代码变得干净整洁，可读性大大增强。后面我会通过几个案例让大家快速掌握pipe库。首先先安装pipe</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pipe</span>
</code></pre></div><br>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/20211115%E4%BD%BF%E7%94%A8pipe%E6%92%B0%E5%86%99%E5%B9%B2%E5%87%80%E7%9A%84Python%E4%BB%A3%E7%A0%81.ipynb">点击下载本文代码</a></p>
<h2 id="where">where</h2>
<p>对iterable中的数据进行筛选操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#把偶数筛选出来</span>
<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div><pre><code>[2, 4]
</code></pre>
<h2 id="select">select</h2>
<p>对iterable中的数据进行某种操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#对arr中的每个数 乘以2</span>
<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div><pre><code>[2, 4, 6, 8, 10]
</code></pre>
<p>现在你可能会有疑问： 为何在Python已拥有map和filter情况下， 还用pipe库中的 select和 where呢？</p>
<p>因为可以使用管道在一个方法后面加入另一个方法， 加不止1次!!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> 
     <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#筛选arr中的偶数</span>
     <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">#对偶数乘以2</span>
    <span class="p">)</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<h1 id="非折叠iterable">非折叠iterable</h1>
<h2 id="chain">chain</h2>
<p>对于嵌套结构的iterable数据，最难任务之一就是将其展平。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">chain</span>

<span class="n">nested</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,[</span><span class="mi">3</span><span class="p">]],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>

<span class="nb">list</span><span class="p">((</span><span class="n">nested</span> <span class="o">|</span> <span class="n">chain</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 2, [3], 4, 5]
</code></pre>
<p>即时经过上述操作， 依然不是完全展开。 为了处理深度嵌套数据， 可以使用traverse方法。</p>
<h2 id="traverse">traverse</h2>
<p>遍历traverse方法可以用递归的方式展开 嵌套对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span>

<span class="n">nested</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,[</span><span class="mi">3</span><span class="p">]],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>

<span class="nb">list</span><span class="p">((</span><span class="n">nested</span> <span class="o">|</span> <span class="n">traverse</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5]
</code></pre>
<p>现在我们从抽取字典values中的列表，并将其展平</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span><span class="p">,</span> <span class="n">select</span>

<span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;grape&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">}</span>
<span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">fruits</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;price&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">traverse</span><span class="p">)</span>
</code></pre></div><pre><code>[2, 5, 4, 5]
</code></pre>
<h2 id="groupby">groupby</h2>
<p>有时候，需要对列表中的数据进行分组，这可能用到groupby方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">groupby</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">groupby</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s2">&#34;偶数&#34;</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="s2">&#34;奇数&#34;</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])})</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'偶数': [2, 4, 6, 8]}, {'奇数': [1, 3, 5, 7, 9]}]
</code></pre>
<p>在上面的代码中， 我们使用groupby将数字分为奇数组和偶数组。groupby方法输出的结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;偶数&#39;, &lt;itertools._grouper at 0x10bd54550&gt;),
 (&#39;奇数&#39;, &lt;itertools._grouper at 0x10bd4d350&gt;)]
 
</code></pre></div><p>接下来，使用select将元素为元组的列表转化为字典，其中</p>
<ul>
<li>元组中第1位置做字典的关键词</li>
<li>元组中第2位置做字典的值</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[{&#39;偶数&#39;: [2, 4, 6, 8]}, {&#39;奇数&#39;: [1, 3, 5, 7, 9]}]
</code></pre></div><p>Cool！为了range值大于2， 我们在select内增加where条件操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">groupby</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">groupby</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s2">&#34;偶数&#34;</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="s2">&#34;奇数&#34;</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> 
                                   <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">)</span>
                                  <span class="p">)</span>
                       <span class="p">}</span>
            <span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'偶数': [4, 6, 8]}, {'奇数': [3, 5, 7, 9]}]
</code></pre>
<h2 id="dedup">dedup</h2>
<p>使用Key对list数据进行去重</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">dedup</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">dedup</span><span class="p">)</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5, 6, 7, 9]
</code></pre>
<p>这看起来没啥新意，毕竟python内置的set函数即可实现刚刚的需求。然而，dedup通过key获得列表中的唯一元素。</p>
<p>例如，<strong>获得小于5的唯一元素， 且另一个元素大于或等于5</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">dedup</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">dedup</span><span class="p">(</span><span class="k">lambda</span> <span class="n">key</span><span class="p">:</span> <span class="n">key</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 5]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span><span class="p">,</span> <span class="n">select</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;grape&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="kc">None</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="n">data</span>
    <span class="o">|</span> <span class="n">dedup</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;count&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">count</span><span class="p">:</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="nb">int</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div><pre><code>[2, 4]
</code></pre>
<br>
<h1 id="了解课程">了解课程</h1>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>automa插件|无编程基础也可自动化办公</title>
      <link>https://textdata.cn/blog/automa_rpa/</link>
      <pubDate>Wed, 27 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/automa_rpa/</guid>
      <description>automa从自动填写表单、执行重复性任务、截取屏幕截图到抓取网站数据，您想使用此扩展程序做什么取决于您。您甚至可以安排自动化执行的时间。</description>
      <content:encoded><![CDATA[<p>如果大家之前了解selenium库，那么antoma不用过多介绍，您就能知道ta是做浏览器自动化的。automa通过点击连接卡片实现浏览器的自动化运行。</p>
<p>没有做不到，只有想不到。从自动填写表单、执行重复性任务、截取屏幕截图到抓取网站数据，您想使用此扩展程序做什么取决于您。您甚至可以安排自动化执行的时间。下面我们看一下开发者制作的操作视频</p>
<video id="video" controls="" preload="none" poster="封面">
  <source id="mp4" src="Automa.mp4" type="video/mp4">
</videos>
<p>从视频中，大家可以看到，工作流可执行表单填写、屏幕截图、网站数据抓取等各种重复性工作。如果大家感兴趣，可以试着用一下<strong>automa</strong>。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>KeyBERT | 关键词发现</title>
      <link>https://textdata.cn/blog/keybert_tutorial/</link>
      <pubDate>Wed, 27 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/keybert_tutorial/</guid>
      <description>使用 BERT 嵌入 和 简单余弦相似度 来查找文档中与文档本身最相似的短语，自动挖掘文本中的关键词</description>
      <content:encoded><![CDATA[<p>尽管已经有很多方法可用于关键字生成（例如，Rake、YAKE!、TF-IDF 等），但我想创建一个非常基本但功能强大的方法来提取关键字和关键短语。这就是 KeyBERT 的用武之地！它使用 <strong>BERT 嵌入</strong> 和 <strong>简单余弦相似度</strong> 来查找文档中与文档本身最相似的短语。</p>
<p>KeyBERT步骤</p>
<ol>
<li>首先使用 BERT 提取文档嵌入以获得<strong>文档级向量表示</strong>。</li>
<li>随后，为 N-gram 词/短语提取<strong>词向量</strong>。</li>
<li>然后，我们使用余弦相似度来找到与文档最相似的单词/短语。</li>
<li>最后可以将最相似的词识别为最能描述整个文档的词。</li>
</ol>
<h2 id="代码下载">代码下载</h2>
<p><a href="KeyBERT%E5%AD%A6%E4%B9%A0.ipynb">click to download the code</a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">keybert</span><span class="o">==</span><span class="mf">0.5.0</span>
</code></pre></div><br>
<h2 id="初始化模型">初始化模型</h2>
<p>KeyBERT库需要安装配置spacy语言模型</p>
<p>具体参考<strong>公众号：大邓和他的Python</strong> 2021-10-29 的推文 查看spacy配置方法</p>
<p>初始化模型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">keybert</span> <span class="kn">import</span> <span class="n">KeyBERT</span>
<span class="kn">import</span> <span class="nn">spacy</span>
<span class="kn">import</span> <span class="nn">jieba</span>


<span class="n">zh_model</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;zh_core_web_sm&#34;</span><span class="p">)</span>
<span class="n">bertModel</span> <span class="o">=</span> <span class="n">KeyBERT</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">zh_model</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="准备数据">准备数据</h2>
<p>中文测试数据需要先分词，而后构造成类英文的语言结构(用空格间隔的文本)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 测试数据</span>
<span class="n">doc</span> <span class="o">=</span>  <span class="s2">&#34;&#34;&#34;时值10月25日抗美援朝纪念日，《长津湖》片方发布了“纪念中国人民志愿军抗美援朝出国作战71周年特别短片”，再次向伟大的志愿军致敬！
</span><span class="s2">　　电影《长津湖》全情全景地还原了71年前抗美援朝战场上那场史诗战役，志愿军奋不顾身的英勇精神令观众感叹：“岁月峥嵘英雄不灭，丹心铁骨军魂永存！”影片上映以来票房屡创新高，目前突破53亿元，暂列中国影史票房总榜第三名。
</span><span class="s2">　　值得一提的是，这部影片的很多主创或有军人的血脉，或有当兵的经历，或者家人是军人。提起这些他们也充满自豪，影片总监制黄建新称：“当兵以后会有一种特别能坚持的劲儿。”饰演雷公的胡军透露：“我父亲曾经参加过抗美援朝，还得了一个三等功。”影片历史顾问王树增表示：“我当了五十多年的兵，我的老部队就是上甘岭上下来的，那些老兵都是我的偶像。”
</span><span class="s2">　　“身先士卒卫华夏家国，血战无畏护山河无恙。”片中饰演七连连长伍千里的吴京感叹：“要永远记住这些先烈们，他们给我们带来今天的和平。感谢他们的付出，才让我们有今天的幸福生活。”饰演新兵伍万里的易烊千玺表示：“战争的残酷、碾压式的伤害，其实我们现在的年轻人几乎很难能体会到，希望大家看完电影后能明白，是那些先辈们的牺牲奉献，换来了我们的现在。”
</span><span class="s2">　　影片对战争群像的恢弘呈现，对个体命运的深切关怀，令许多观众无法控制自己的眼泪，观众称：“当看到影片中的惊险战斗场面，看到英雄们壮怀激烈的拼杀，为国捐躯的英勇无畏和无悔付出，我明白了为什么说今天的幸福生活来之不易。”（记者 王金跃）
</span><span class="s2">        &#34;&#34;&#34;</span>


<span class="n">doc</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">doc</span><span class="p">))</span>


<span class="c1"># 关键词提取</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">bertModel</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> 
                                      <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                                      <span class="n">stop_words</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                                      <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">keywords</span>
</code></pre></div><pre><code>[('铁骨', 0.5028),
 ('纪念日', 0.495),
 ('丹心', 0.4894),
 ('战役', 0.4869),
 ('影史', 0.473),
 ('父亲', 0.4576),
 ('票房', 0.4571),
 ('偶像', 0.4497),
 ('精神', 0.4436),
 ('家国', 0.4373)]
</code></pre>
<br>
<h2 id="常用参数">常用参数</h2>
<p><strong>bertModel.extract_keywords(docs, keyphrase_ngram_range, stop_words, top_n)</strong></p>
<ul>
<li><strong>docs</strong> 文档字符串（空格间隔词语的字符串）</li>
<li><strong>keyphrase_ngram_range</strong> 设置ngram，默认(1, 1)</li>
<li><strong>stop_words</strong> 停用词列表</li>
<li><strong>top_n</strong> 显示前n个关键词，默认5</li>
<li><strong>highlight</strong> 可视化标亮关键词，默认False</li>
<li>use_maxsum: 默认False;是否使用Max Sum Similarity作为关键词提取标准，</li>
<li>use_mmr: 默认False;是否使用Maximal Marginal Relevance (MMR) 作为关键词提取标准</li>
<li>diversity 如果use_mmr=True，可以设置该参数。参数取值范围从0到1</li>
</ul>
<br>
<p>对于<strong>keyphrase_ngram_range</strong>参数，</p>
<ul>
<li>(1, 1) 只单个词， 如&quot;抗美援朝&quot;, &ldquo;纪念日&quot;是孤立的两个词</li>
<li>(2, 2) 考虑词组， 如出现有意义的词组 &ldquo;抗美援朝 纪念日&rdquo;</li>
<li>(1, 2) 同时考虑以上两者情况</li>
</ul>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 关键词提取</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">bertModel</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> 
                                      <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                      <span class="n">stop_words</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                                      <span class="n">diversity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> 
                                      <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">keywords</span>
</code></pre></div><pre><code>[('影片 总监制', 0.5412),
 ('丹心 铁骨', 0.5339),
 ('抗美援朝 纪念日', 0.5295),
 ('长津湖 片方', 0.5252),
 ('志愿军 致敬', 0.5207),
 ('老兵 偶像', 0.5192),
 ('票房 创新', 0.5108),
 ('军人 血脉', 0.5084),
 ('家国 血战', 0.4946),
 ('家人 军人', 0.4885)]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#可视化</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">bertModel</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> 
                                      <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                      <span class="n">stop_words</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                                      <span class="n">highlight</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
                                      <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="highlight.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 关键词提取</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">bertModel</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> 
                                      <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                      <span class="n">stop_words</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                                      <span class="n">use_mmr</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">diversity</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> 
                                      <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

<span class="n">keywords</span>
</code></pre></div><pre><code>[('影片 总监制', 0.5412),
 ('长津湖 片方', 0.5252),
 ('抗美援朝 纪念日', 0.5295),
 ('丹心 铁骨', 0.5339),
 ('志愿军 致敬', 0.5207),
 ('老兵 偶像', 0.5192),
 ('票房 创新', 0.5108),
 ('军人 血脉', 0.5084),
 ('家国 血战', 0.4946),
 ('家人 军人', 0.4885)]
</code></pre>
<br>
<h2 id="英文keybert">英文KeyBERT</h2>
<p>同样需要配置spacy，参考<strong>公众号：大邓和他的Python</strong> 2021-10-29 的推文 查看spacy配置方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">keybert</span> <span class="kn">import</span> <span class="n">KeyBERT</span>
<span class="kn">import</span> <span class="nn">spacy</span>

<span class="n">en_model</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;en_core_web_sm&#34;</span><span class="p">)</span>

<span class="n">doc</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">         Supervised learning is the machine learning task of learning a function that
</span><span class="s2">         maps an input to an output based on example input-output pairs. It infers a
</span><span class="s2">         function from labeled training data consisting of a set of training examples.
</span><span class="s2">         In supervised learning, each example is a pair consisting of an input object
</span><span class="s2">         (typically a vector) and a desired output value (also called the supervisory signal). 
</span><span class="s2">         A supervised learning algorithm analyzes the training data and produces an inferred function, 
</span><span class="s2">         which can be used for mapping new examples. An optimal scenario will allow for the 
</span><span class="s2">         algorithm to correctly determine the class labels for unseen instances. This requires 
</span><span class="s2">         the learning algorithm to generalize from the training data to unseen situations in a 
</span><span class="s2">         &#39;reasonable&#39; way (see inductive bias).
</span><span class="s2">      &#34;&#34;&#34;</span>
<span class="n">kw_model</span> <span class="o">=</span> <span class="n">KeyBERT</span><span class="p">()</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">kw_model</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">keywords</span>
</code></pre></div><p>Run</p>
<pre><code>[('supervised learning', 0.6779),
 ('supervised', 0.6676),
 ('signal supervised', 0.6152),
 ('examples supervised', 0.6112),
 ('labeled training', 0.6013)]
</code></pre>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>BERTopic库 | 使用预训练模型做话题建模</title>
      <link>https://textdata.cn/blog/bertopic_tutorial/</link>
      <pubDate>Tue, 26 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/bertopic_tutorial/</guid>
      <description>使用BERT主题建模技术,可以对经管等领域文本数据进行主题(话题)建模。效果堪比LDA，但比LDA智能</description>
      <content:encoded><![CDATA[<p>BERT是自然语言处理领域最新的词向量技术，而BERTopic 是基于BERT词向量进行主题建模技术，它利用 Transformer 和 c-TF-IDF 来创建密集的集群，允许轻松解释主题，同时在主题描述中保留重要词。</p>
<p>BERTopic亮点</p>
<ul>
<li>支持引导式Guided</li>
<li>支持（半）监督式</li>
<li>支持动态主题。</li>
<li>支持可视化</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">bertopic</span><span class="o">==</span><span class="mf">0.10.0</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">cntext</span><span class="o">==</span><span class="mf">1.6.5</span>
</code></pre></div><p><br><br></p>
<h2 id="准备数据">准备数据</h2>
<p>这里使用的新闻数据集， 共2000条。 新闻类别涵 <code>'娱乐', '教育', '游戏', '财经', '时政', '时尚', '科技', '体育', '家居', '房产'</code>
这里假设大家不知道有10类新闻题材， 构建模型的时候不会用到label字段的数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;cnews.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 新闻题材</span>
<span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">unique</span><span class="p">())</span>

<span class="c1">#记录数</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<pre><code>['娱乐' '教育' '游戏' '财经' '时政' '时尚' '科技' '体育' '家居' '房产']
2000
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 各类题材的新闻记录数</span>
<span class="n">df</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">时政    120
科技    106
时尚    106
财经    105
家居    103
教育     97
娱乐     96
体育     95
房产     87
游戏     85
</code></pre></div><br>
<p>这里定义了一个清洗数据函数clean_text，需要注意BERTopic需要先将中文分词改造成类似英文文本格式（用空格间隔词语）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">stopwords</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;STOPWORDS.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;STOPWORDS&#39;</span><span class="p">][</span><span class="s1">&#39;chinese&#39;</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">]</span>
    <span class="k">return</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>


<span class="n">test</span> <span class="o">=</span> <span class="s2">&#34;云南永善县级地震已致人伤间民房受损中新网月日电据云南昭通市防震减灾局官方网站消息截至日时云南昭通永善县级地震已造成人受伤其中重伤人轻伤人已全部送医院救治民房受损户间倒塌户间个乡镇所学校不同程度受损目前被损毁电力交通通讯设施已全部抢通修复当地已调拨帐篷顶紧急转移万人月日时分云南昭通永善县发生里氏级地震震源深度公里当地震感强烈此外成都等四川多地也有明显震感&#34;</span>

<span class="n">clean_text</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&#39;云南 永善县 级 地震 已致 伤间 民房 受损 中新网 日电 云南 昭通市 防震 减灾 局 官方网站 消息 日时 云南 昭通 永善县 级 地震 造成 受伤 重伤 轻伤 送 医院 救治 民房 受损 户间 倒塌 户间 乡镇 学校 不同 程度 受损 目前 损毁 电力 交通 通讯 设施 抢通 修复 调拨 帐篷 顶 紧急 转移 万人 时分 云南 昭通 永善县 发生 里氏 级 地震 震源 深度 公里 震感 强烈 成都 四川 多地 明显 震感&#39;
</code></pre></div><p>对2000条数据进行clean_text，得到的结果存储到content字段中。</p>
<p>我的macbook内存16G, 运行时间10s</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">clean_text</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="训练topic模型">训练Topic模型</h2>
<p>文本分析步骤包括构建特征工程和训练，在本文中，直接使用开源的预训练中文词向量，省去了特征模型的学习时间。</p>
<p>选取的与训练模型均为word2vec格式，这样方便我们使用gensim将其导入。</p>
<table>
<thead>
<tr>
<th>模型名</th>
<th>数据</th>
<th>预训练模型资源地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>sgns.zhihu.words.bz2</td>
<td>知乎</td>
<td>链接: <a href="https://pan.baidu.com/s/1BDxP28KL_23Odj9NWZGe-Q">https://pan.baidu.com/s/1BDxP28KL_23Odj9NWZGe-Q</a> 提取码: n1qq</td>
</tr>
<tr>
<td>sgns.wiki.words.bz2</td>
<td>中文维基百科</td>
<td>链接: <a href="https://pan.baidu.com/s/1B1sxHmPeIPJYiCuP1zrmMw">https://pan.baidu.com/s/1B1sxHmPeIPJYiCuP1zrmMw</a> 提取码: hofj</td>
</tr>
<tr>
<td>sgns.financial.words.bz2</td>
<td>金融</td>
<td>链接: <a href="https://pan.baidu.com/s/1L_hmGjZMY2ExBn9Vfc_eRg">https://pan.baidu.com/s/1L_hmGjZMY2ExBn9Vfc_eRg</a> 提取码: hhn6</td>
</tr>
<tr>
<td>sgns.renmin.words.bz2</td>
<td>人民日报</td>
<td>链接: <a href="https://pan.baidu.com/s/1VQIDrwZH3Y3Lpy4-smPutw">https://pan.baidu.com/s/1VQIDrwZH3Y3Lpy4-smPutw</a> 提取码: 3b53</td>
</tr>
<tr>
<td>sgns.sougou.words.bz2</td>
<td>搜狗新闻</td>
<td>链接: <a href="https://pan.baidu.com/s/15nCaeB41mwK0ZVLrukXpFQ">https://pan.baidu.com/s/15nCaeB41mwK0ZVLrukXpFQ</a> 提取码: 04en</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong>:</p>
<p>除了表格外的资源，还可以使用spacy现有的预训练模型。</p>
</blockquote>
<p>本文案例cnews.csv是新闻类数据，这里最好选择使用同样为新闻题材的文本训练出的模型，这样BERTopic效果会更精准一些。sgns.sougou.words.bz2是使用搜狗新闻数据训练的语言模型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">chinese_sougou_news_models</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;sgns.sogou.word.bz2&#39;</span><span class="p">,</span> <span class="n">unicode_errors</span><span class="o">=</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
<span class="n">chinese_sougou_news_models</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;gensim.models.keyedvectors.KeyedVectors at 0x7f93e5b8cc10&gt;
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">bertopic</span> <span class="kn">import</span> <span class="n">BERTopic</span>


<span class="n">topic_model</span> <span class="o">=</span> <span class="n">BERTopic</span><span class="p">(</span><span class="n">language</span><span class="o">=</span><span class="s2">&#34;chinese (simplified)&#34;</span><span class="p">,</span> 
                       <span class="n">embedding_model</span><span class="o">=</span><span class="n">chinese_sougou_news_models</span><span class="p">,</span>
                       <span class="n">calculate_probabilities</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> 
                       <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>


<span class="n">docs</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
<span class="c1">#2000条进行fit_transform需要1min</span>
<span class="n">topics</span><span class="p">,</span> <span class="n">probs</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
</code></pre></div><pre><code>100%|██████████| 2000/2000 [01:31&lt;00:00, 21.91it/s]
2021-10-28 12:11:25,583 - BERTopic - Transformed documents to Embeddings
2021-10-28 12:11:34,582 - BERTopic - Reduced dimensionality with UMAP
2021-10-28 12:11:34,718 - BERTopic - Clustered UMAP embeddings with HDBSCAN


CPU times: user 1min 50s, sys: 7.7 s, total: 1min 57s
Wall time: 1min 43s
</code></pre>
<p><br><br></p>
<h2 id="主题模型方法">主题模型方法</h2>
<ul>
<li>topic_model.get_topic_info 查看各主题信息</li>
<li>topic_model.find_topics(term, top_n=5)  查找term最有可能所属话题</li>
<li>topic_model.get_topic(0) 查看Topic 0的特征词</li>
<li>topic_model.visualize_topics() 话题间距离的可视化</li>
<li>topic_model.visualize_distribution(probs[0]) 查看某条文本的主题分布</li>
<li>topic_model.visualize_hierarchy(top_n_topics=20) 主题层次聚类可视化</li>
<li>topic_model.visualize_barchart(topics=[1]) 显示主题1的词条形图</li>
<li>topic_model.visualize_heatmap(n_clusters=10) 主题相似度热力图</li>
<li>topic_model.visualize_term_rank() 可视化词语</li>
<li>topic_model.save()  保存主题模型</li>
<li>topic_model.reduce_topics()  压缩主题个数(合并相近的主题)</li>
</ul>
<h3 id="get_topic_info">.get_topic_info()</h3>
<p>查看BERTopic基于cnews.csv数据， 跑出的各主题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic_info</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/get_topic_info.png" alt=""  />
</p>
<br>
<h3 id="find_topicsterm">.find_topics(term)</h3>
<p>查看与词语【投资】最相关的主题，返回候选的最相思的5个主题id</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#</span>
<span class="n">similar_topics</span><span class="p">,</span> <span class="n">similarity</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">find_topics</span><span class="p">(</span><span class="s2">&#34;投资&#34;</span><span class="p">,</span> <span class="n">top_n</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">similar_topics</span>
</code></pre></div><p>Run</p>
<pre><code>[3, 9, 8, 10, 4]
</code></pre>
<br>
<h3 id="get_topic">.get_topic()</h3>
<p>查看id为3的主题信息（主题词及权重）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;基金&#39;, 0.15109221307919193),
 (&#39;投资&#39;, 0.042856192509064),
 (&#39;公司&#39;, 0.039785278320496976),
 (&#39;市场&#39;, 0.037072163603417835),
 (&#39;股票&#39;, 0.03230913401086524),
 (&#39;型基金&#39;, 0.02721898070238429),
 (&#39;收益&#39;, 0.025435672141638468),
 (&#39;投资者&#39;, 0.024633503649868493),
 (&#39;经理&#39;, 0.02458550023931051),
 (&#39;发行&#39;, 0.022672639068067168)]
</code></pre></div><br>
<h3 id="visualize_topics">.visualize_topics()</h3>
<p>可视化主题间距离</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">visualize_topics1</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_topics</span><span class="p">()</span>
<span class="c1">#可视化结果保存至html中，可以动态显示信息</span>
<span class="n">visualize_topics1</span><span class="o">.</span><span class="n">write_html</span><span class="p">(</span><span class="s1">&#39;visualize_topics.html&#39;</span><span class="p">)</span>
<span class="n">visualize_topics1</span>
</code></pre></div><p><img loading="lazy" src="img/visualize_topics1.png" alt=""  />
</p>
<p><a href="img/visualize_topics1.html">点击查看visualize_topics1.html</a></p>
<br>
<h3 id="visualize_distribution">.visualize_distribution()</h3>
<p>显示第一条新闻的主题概率分布</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">first_new_topic_probs</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_distribution</span><span class="p">(</span><span class="n">probs</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">first_new_topic_probs</span><span class="o">.</span><span class="n">write_html</span><span class="p">(</span><span class="s1">&#39;first_new_topic_probs.html&#39;</span><span class="p">)</span>
<span class="n">first_new_topic_probs</span>
</code></pre></div><p><img loading="lazy" src="img/first_new_topic_probs.png" alt=""  />

<a href="img/first_new_topic_probs.html">点击查看first_new_topic_probs.html</a></p>
<p>为了理解主题的潜在层次结构，我们可以使用 scipy.cluster.hierarchy 创建聚类并可视化它们之间的关系。 这有助于合并相似主题，达到降低主题模型主题数量nr_topics。</p>
<br>
<h3 id="visualize_hierarchytop_n_topics">.visualize_hierarchy(top_n_topics)</h3>
<p>话题层次聚类可视化，模型跑出12个主题，这里就按12进行分层聚类</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_hierarchy</span><span class="p">(</span><span class="n">top_n_topics</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/visualize_hierarchy.png" alt=""  />
</p>
<br>
<h3 id="visualize_barcharttopics">.visualize_barchart(topics)</h3>
<p>显示topics的词条形图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_barchart</span><span class="p">(</span><span class="n">topics</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div><p><img loading="lazy" src="img/visualize_barchart.png" alt=""  />
</p>
<br>
<h3 id="visualize_heatmapn_clusters">.visualize_heatmap(n_clusters)</h3>
<p>话题相似热力图。BERTopic可将主题以embeddings形式（向量）表示， 因此我们可以应用余弦相似度来创建相似度矩阵。 每两两主题可进行余弦计算，最终结果将是一个矩阵，显示主题间的相似程度。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_similar_heatmap</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_heatmap</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>
<span class="n">topic_similar_heatmap</span><span class="o">.</span><span class="n">write_html</span><span class="p">(</span><span class="s1">&#39;topic_similar_heatmap.html&#39;</span><span class="p">)</span>
<span class="n">topic_similar_heatmap</span>
</code></pre></div><p><img loading="lazy" src="img/topic_similar_heatmap.png" alt=""  />

<a href="img/topic_similar_heatmap.html">点击查看topic_similar_heatmap.html</a></p>
<p>通过根据每个主题表示的 c-TF-IDF 分数创建条形图来可视化主题的选定词语。 从主题之间和主题内的相对 c-TF-IDF 分数中获得见解。 此外，可以轻松地将主题表示相互比较。</p>
<br>
<h3 id="visualize_term_rank">.visualize_term_rank()</h3>
<p>通过根据每个主题表示的 c-TF-IDF 分数创建条形图来可视化主题的选定词语。</p>
<p>从主题之间和主题内的相对 c-TF-IDF 分数中获得见解。</p>
<p>此外，可以轻松地将主题表示相互比较。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">term_score_decline</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_term_rank</span><span class="p">()</span>
<span class="n">term_score_decline</span><span class="o">.</span><span class="n">write_html</span><span class="p">(</span><span class="s1">&#39;term_score_decline.html&#39;</span><span class="p">)</span>
<span class="n">term_score_decline</span>
</code></pre></div><p><img loading="lazy" src="img/term_score_decline.png" alt=""  />

<a href="img/term_score_decline.html">点击查看term_score_decline.html</a></p>
<h3 id="update_topics">.update_topics()</h3>
<p>更新主题模型。当您训练了一个模型并查看了代表它们的主题和单词时，您可能对表示不满意。 也许您忘记删除停用词，或者您想尝试不同的 n_gram_range。 我们可以使用函数 update_topics 使用 c-TF-IDF 的新参数更新主题表示。</p>
<p>使用.update_topics()更新，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">update_topics</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="n">topics</span><span class="p">,</span> <span class="n">n_gram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div><p>topic_model得到了更新，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">similar_topics</span><span class="p">,</span> <span class="n">similarity</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">find_topics</span><span class="p">(</span><span class="s2">&#34;手机&#34;</span><span class="p">,</span> <span class="n">top_n</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>

<span class="n">similar_topics</span>
</code></pre></div><p>Run</p>
<pre><code>[2, 7, 4, 1, 5]
</code></pre>
<p>查看话题2的信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;功能&#39;, 0.022132351014298786),
 (&#39;采用&#39;, 0.02136925357979149),
 (&#39;像素&#39;, 0.020797285140907094),
 (&#39;拍摄&#39;, 0.017850841110848677),
 (&#39;机身&#39;, 0.015056931248982912),
 (&#39;英寸&#39;, 0.014624438184138326),
 (&#39;佳能&#39;, 0.012857768505732597),
 (&#39;支持&#39;, 0.012600856600766349),
 (&#39;光学&#39;, 0.012462085658291079),
 (&#39;相机&#39;, 0.011832978982454568)]
</code></pre></div><p>模型保存</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Save model</span>
<span class="c1">#model.save(&#34;my_model&#34;)</span>
<span class="c1"># Load model</span>
<span class="c1">#my_model = BERTopic.load(&#34;my_model&#34;)</span>
</code></pre></div><br>
<h3 id="reduce_topics">.reduce_topics()</h3>
<p>压缩主题数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">new_topics</span><span class="p">,</span> <span class="n">new_probs</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">reduce_topics</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">topics</span><span class="p">,</span> <span class="n">probs</span><span class="p">,</span> <span class="n">nr_topics</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>2021-10-28 12:28:01,976 - BERTopic - Reduced number of topics from 20 to 11
</code></pre>
<br>
<h2 id="代码数据">代码数据</h2>
<p><a href="bertopic_tutorial.zip">click to download</a></p>
<br>
<h2 id="总结">总结</h2>
<p>本文使用中文文本数据展示BERTopic部分功能，如果对英文数据感兴趣，可以前往  <a href="https://github.com/MaartenGr/BERTopic">https://github.com/MaartenGr/BERTopic</a> 深入学习。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Shifterator库 | 词移图分辨两文本用词风格差异</title>
      <link>https://textdata.cn/blog/shifterator_text_vis/</link>
      <pubDate>Tue, 26 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/shifterator_text_vis/</guid>
      <description>图文代码理解两文本用词风格差异</description>
      <content:encoded><![CDATA[<p>以往对比两个文本数据差异，比较简单的技术实现方法是生成两文个词云图，但是词云图无法直观显示词语层面的权重。</p>
<p><strong>Shifterator</strong>包提供了构建词移图的功能，垂直条形图可以量化哪些词会导致<strong>两个文本</strong>之间的成对差异以及它们如何起作用。 通过允许您查看单词使用方式的变化，单词转换可帮助您对情绪、熵和分歧进行分析，这些分析从根本上来说更具可解释性。</p>
<p>Shifterator亮点：</p>
<ul>
<li>提供可解释的工具，用于将文本作为数据处理并映射出两个文本相似性或差异性</li>
<li>实现常见的文本比较度量，包括相对频率、香农熵、Tsallis熵、Kullback-Leibler散度和 Jensen-Shannon 散度。</li>
<li>基于字典的情绪分析方法计算的加权平均值。</li>
<li>在研究初期可用于诊断数据、感知测量误差。</li>
</ul>
<p>计算社会科学家、数字人文主义者和其他文本分析从业者都可以使用 Shifterator 从文本数据构建可靠、稳健和可解释的故事。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">shifterator</span><span class="o">==</span><span class="mf">0.2.2</span>
</code></pre></div><br>
<h2 id="导入数据">导入数据</h2>
<p>准备的外卖csv数据，含label和review两个字段。</p>
<p>其中label是好评差评的标注，</p>
<ul>
<li>0为差评，</li>
<li>1为好评</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">reviews_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/WaiMai8k.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">reviews_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="800" />
    
    
</figure>

<p>有个疑问，外卖好差评中的用词有什么差异(区别/特点)？</p>
<h2 id="准备两组文本数据">准备两组文本数据</h2>
<p>shifterator需要两组文本数据，格式为长度相同的词频统计字典。</p>
<p>按照label类别，将数据整理为两个文本数据。在准备的过程中，我们需要做一些清洗操作</p>
<ul>
<li>清除非中文字符，如网址、邮箱、标点符号</li>
<li>清除信息量比较低的停用词</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">collections</span>
<span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">re</span> 

<span class="n">texts_neg</span> <span class="o">=</span> <span class="n">reviews_df</span><span class="p">[</span><span class="n">reviews_df</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;review&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
<span class="n">texts_pos</span> <span class="o">=</span> <span class="n">reviews_df</span><span class="p">[</span><span class="n">reviews_df</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;review&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">docs</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;清洗文本中的非中文字符、停用词，返回词频统计结果
</span><span class="s2">    docs : 待处理的文档列表
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">stop_words</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/stopwords.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&#34;[</span><span class="se">\u4e00</span><span class="s2">-</span><span class="se">\u9fa5</span><span class="s2">]+&#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stop_words</span><span class="p">]</span>
    <span class="n">wordfreq_dict</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wordfreq_dict</span>


<span class="n">clean_texts_neg</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">texts_neg</span><span class="p">)</span>
<span class="n">clean_texts_pos</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">texts_pos</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="无聊的传统绘图">无聊的传统绘图</h2>
<p>使用条形图、词云图绘制，为了缩小代码量，这里只绘制差评数据。需要注意的是matplotlib不显示中文，这里需要先使用下面三行代码获取电脑中自带的中文字体列表mpl_fonts，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib.font_manager</span> <span class="kn">import</span> <span class="n">FontManager</span>
 
<span class="n">mpl_fonts</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">FontManager</span><span class="p">()</span><span class="o">.</span><span class="n">ttflist</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mpl_fonts</span><span class="p">)</span>
</code></pre></div><p>经过运行，我的电脑mpl_fonts里有<strong>Arial Unicode MS</strong> ，后面用matplotlib显示中文的地方，我都使用该字体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#准备DataFrame数据</span>
<span class="n">common_neg</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clean_texts_neg</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span>
                             <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">])</span>

<span class="n">common_pos</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clean_texts_pos</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span>
                             <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">font_scale</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set_style</span><span class="p">(</span><span class="s2">&#34;whitegrid&#34;</span><span class="p">)</span>

<span class="c1">#为了显示中文</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s2">&#34;font&#34;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">)</span>


<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>

<span class="c1">#绘制水平条形图</span>
<span class="n">common_neg</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;words&#39;</span><span class="p">,</span>
                     <span class="n">y</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span>
                      <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span>
                      <span class="n">color</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s2">&#34;外卖差评常见词&#34;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_9_0.png" width="800" />
    
    
</figure>

<p>绘制词云图，这里使用的pyecharts包。由于该包作者更新强度比较大，为了保证日后本教程仍可正常运行，这里提供当前我使用的pyecharts相关的版本，大家可以运行下面代码保证运行出正确结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">==</span><span class="mf">1.6.2</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">javascripthon</span><span class="o">==</span><span class="mf">0.0.6</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">jupyter</span><span class="o">-</span><span class="n">installer</span><span class="o">==</span><span class="mf">0.0.3</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">snapshot</span><span class="o">==</span><span class="mf">0.2.0</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">WordCloud</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>

<span class="n">wordfreqs</span> <span class="o">=</span> <span class="p">[(</span><span class="n">w</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span><span class="p">,</span><span class="n">f</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">(</span><span class="n">clean_texts_neg</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>


<span class="n">wc</span> <span class="o">=</span> <span class="n">WordCloud</span><span class="p">()</span>
<span class="n">wc</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">data_pair</span><span class="o">=</span><span class="n">wordfreqs</span><span class="p">,</span> <span class="n">word_size_range</span><span class="o">=</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>
<span class="n">wc</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;外卖差评词云图&#34;</span><span class="p">,</span> 
                                             <span class="n">title_textstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TextStyleOpts</span><span class="p">(</span><span class="n">font_size</span><span class="o">=</span><span class="mi">23</span><span class="p">)),</span>
                   <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
<span class="n">wc</span><span class="o">.</span><span class="n">load_javascript</span><span class="p">()</span>
<span class="n">wc</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e8%af%8d%e4%ba%91%e5%9b%be.png" width="800" />
    
    
</figure>

<h2 id="使用shifterator绘制词移图">使用Shifterator绘制词移图</h2>
<p>终于要用到 <strong>Shifterator</strong> 包了！ 我们可以使用这个包根据频率和情绪（或其他值）比较负面和正面的外卖评论，这里我只计算了频率作为权重</p>
<h3 id="熵移图entropy-shift">熵移图Entropy shift</h3>
<p>第一幅图是entropy shift graph</p>
<p>具体信息请查看文档  <a href="https://github.com/ryanjgallagher/shifterator">https://github.com/ryanjgallagher/shifterator</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">shifterator</span> <span class="kn">import</span> <span class="n">EntropyShift</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s2">&#34;font&#34;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">)</span>

<span class="n">entropy_shift</span> <span class="o">=</span> <span class="n">EntropyShift</span><span class="p">(</span><span class="n">type2freq_1</span><span class="o">=</span><span class="n">clean_texts_neg</span><span class="p">,</span>
                             <span class="n">type2freq_2</span><span class="o">=</span><span class="n">clean_texts_pos</span><span class="p">,</span>
                             <span class="n">base</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">entropy_shift</span><span class="o">.</span><span class="n">get_shift_graph</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;外卖差评 vs 外卖好评&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output141.png" width="800" />
    
    
</figure>

<p>看起来最能决定外卖差评的用语是配送时间，其次才是口味。</p>
<p>最能决定外卖好评的似乎是口味，其次才是配送时间。</p>
<p>通过Shifterator我们能够看出不同词在不同文本中的作用程度。需要注意的是，我们只使用了最高的前15词频，所以显示的词有些少</p>
<h2 id="总结">总结</h2>
<p>希望本文能对你的研究有帮助，代码下载地址</p>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator%E5%AD%A6%E4%B9%A0">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator学习</a></p>
<p>代码撰写调试不易，希望帮忙转载</p>

<figure >
    
        <img src="img/Python%e4%b8%93%e6%a0%8f%e8%af%be.jpg" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SHAP机器学习模型解释库</title>
      <link>https://textdata.cn/blog/shap_ml_explanation/</link>
      <pubDate>Thu, 14 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/shap_ml_explanation/</guid>
      <description>图文代码理解机器学习模型中各特征对结果的贡献</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="SHAP.zip">点击此处下载代码</a></p>
<br>
<blockquote>
<p>原文链接 <a href="https://towardsdatascience.com/shap-explain-any-machine-learning-model-in-python-24207127cad7">https://towardsdatascience.com/shap-explain-any-machine-learning-model-in-python-24207127cad7</a></p>
</blockquote>
<h2 id="heading"></h2>
<p>想象一下，你正试图训练一个机器学习模型来预测广告是否被特定的人点击。在收到关于某人的一些信息后，模型预测某人会不会点击广告。</p>

<figure >
    
        <img src="img/%e5%9b%be1.png" />
    
    
</figure>

<p>但是为什么模型会输出这样的预测结果呢？ 每个特征对预测的贡献有多大？ 如果您能看到一个图表，显示每个特征对预测的贡献程度，如下所示，不是很好吗？</p>

<figure >
    
        <img src="img/%e6%9d%83%e9%87%8d.png" />
    
    
</figure>

<p>Shapley值就能起到特征权重测度的作用。</p>
<h2 id="shapley值是什么">Shapley值是什么？</h2>
<p>Shapley值是博弈论中使用的一种方法，它涉及公平地将收益和成本分配给在联盟中工作的行动者。
由于每个行动者对联盟的贡献是不同的，Shapley值保证每个行动者根据贡献的多少获得公平的份额。</p>

<figure >
    
        <img src="img/%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<h2 id="小案例">小案例</h2>
<p>Shapley值被广泛地应用于求解群体中每个工人(特征)的贡献问题。要理解Shapley值的作用，让我们想象一下贵公司刚刚做了A/B测试，他们在测试广告策略的不同组合。</p>
<p>每个策略在特定月份的收入是：</p>
<ul>
<li>无广告：150美元</li>
<li>社交媒体：300美元</li>
<li>谷歌广告：200美元</li>
<li>电子邮件营销：350美元</li>
<li>社交媒体和谷歌广告：320美元</li>
<li>社交媒体和电子邮件营销：400美元</li>
<li>谷歌广告和电子邮件营销：350美元</li>
<li>电子邮件营销，谷歌广告和社交媒体：450美元</li>
</ul>

<figure >
    
        <img src="img/%e7%ad%96%e7%95%a5%e8%90%a5%e6%94%b6.png" />
    
    
</figure>

<p>使用三则广告与不使用广告的收入相差300美元，每则广告对这一差异有多大的贡献?</p>

<figure >
    
        <img src="img/%e7%ad%96%e7%95%a5%e8%90%a5%e6%94%b6%e8%b4%a1%e7%8c%ae%e5%87%a0%e4%bd%95.png" />
    
    
</figure>

<p>我们可以通过计算每一类广告的Shapley值来计算谷歌广告对公司收入的总贡献入手，通过公式可以计算出Google广告的总贡献：</p>

<figure >
    
        <img src="img/%e5%85%ac%e5%bc%8f.png" />
    
    
</figure>

<p>让我们找到Google广告的边际贡献及其权重。</p>
<h2 id="寻找谷歌广告的边际贡献">寻找谷歌广告的边际贡献</h2>
<p>第一，我们将发现谷歌广告对以下群体的边际贡献：</p>
<ul>
<li>无广告</li>
<li>谷歌广告+社交媒体</li>
<li>谷歌广告+电子邮件营销</li>
<li>谷歌广告+电子邮件营销+社交媒体</li>
</ul>

<figure >
    
        <img src="img/%e8%be%b9%e9%99%85%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<p>Google广告 对 无广告 的边际贡献是：</p>

<figure >
    
        <img src="img/MC1.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告&amp;社交媒体组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC2.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告&amp;电子邮件营销组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC3.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告、电子邮件营销和社交媒体组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC4.png" />
    
    
</figure>

<h2 id="发现权重">发现权重</h2>
<p>为了发现权重，我们将把不同广告策略的组合组织成如下多个层次，每个层次对应于每个组合中广告策略的数量。</p>
<p>然后根据每个层次的边数分配权重，我们看到了这一点：</p>
<ul>
<li>第一级包含3条边，因此每个边的权重为1/3</li>
<li>第二级包含6条边，因此每条边的权重将为1/6</li>
<li>第三级包含3条边，因此每条边的权重将为1/3</li>
</ul>

<figure >
    
        <img src="img/%e5%8f%91%e7%8e%b0%e6%9d%83%e9%87%8d.png" />
    
    
</figure>

<h2 id="发现google广告的总贡献">发现Google广告的总贡献</h2>
<p>根据前面的权重和边际贡献，我们已经可以找到Google广告的总贡献!</p>

<figure >
    
        <img src="img/google%e6%80%bb%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>


<figure >
    
        <img src="img/google%e5%85%ac%e5%bc%8f.png" />
    
    
</figure>

<p>酷!所以谷歌广告在使用3种广告策略与不使用广告的总收入差异中贡献了36.67美元。36.67是Google广告的Shapey值。</p>

<figure >
    
        <img src="img/otherRevenue.png" />
    
    
</figure>

<p>重复以上步骤，对于另外两种广告策略，我们可以看出：</p>
<ul>
<li>
<p>电子邮件营销贡献151.67美元</p>
</li>
<li>
<p>社交媒体贡献116.67美元</p>
</li>
<li>
<p>谷歌广告贡献36.67美元</p>

<figure >
    
        <img src="img/%e5%90%84%e7%ad%96%e7%95%a5%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

</li>
</ul>
<p>他们共同出资300美元，用于使用3种不同类型的广告与不使用广告的区别!挺酷的，不是吗?
既然我们理解了Shapley值，那么让我们看看如何使用它来解释机器学习模型。</p>
<h2 id="shap-在python中解释机器学习模型">SHAP-在Python中解释机器学习模型</h2>
<p>SHAP是一个Python库，它使用Shapley值来解释任何机器学习模型的输出。</p>
<p>安装SHAP</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">shap</span>

</code></pre></div><h2 id="训练模型">训练模型</h2>
<p>为了理解SHAP工作原理，我们使用Kaggle平台内的advertising广告数据集。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span> 

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;advertising.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" />
    
    
</figure>

<p>我们将建立一个机器学习模型, 该模型根据用户个人特质信息来预测其是否点击广告。</p>
<p>我们使用Patsy将DataFrame转换为一组特征和一组目标值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">patsy</span> <span class="kn">import</span> <span class="n">dmatrices</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>

<span class="n">y</span><span class="p">,</span> <span class="n">X</span> <span class="o">=</span> <span class="n">dmatrices</span><span class="p">(</span>
    <span class="s2">&#34;clicked_on_ad ~ daily_time_spent_on_site + age + area_income + daily_internet_usage  + male -1&#34;</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">X_frame</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">X</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">X</span><span class="o">.</span><span class="n">design_info</span><span class="o">.</span><span class="n">column_names</span><span class="p">)</span>


</code></pre></div><p>把数据分为测试集和训练接</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">7</span><span class="p">)</span>
</code></pre></div><p>接下来使用XGBoost训练模型，并做预测</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">xgboost</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">xgboost</span><span class="o">.</span><span class="n">XGBClassifier</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">y_predicted</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><p>为了查看模型表现，我们使用F1得分</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">f1_score</span>

<span class="n">f1</span> <span class="o">=</span> <span class="n">f1_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_predicted</span><span class="p">)</span>
<span class="n">f1</span>
</code></pre></div><pre><code>0.9619047619047619
</code></pre>
<p>太好了!</p>
<h2 id="解释该模型">解释该模型</h2>
<p>该模型很好地预测了用户是否点击广告。但它是如何得出这样的预测的? <strong>每个特征对最终预测与平均预测的差异贡献了多少?</strong></p>
<p>注意，这个问题与我们在文章开头论述的问题非常相似。</p>
<p>因此，寻找每个特征的Shapley值可以帮助我们确定它们的贡献。得到特征i的重要性的步骤与之前类似，其中i是特征的索引：</p>
<ul>
<li>获取所有不包含特征i的子集</li>
<li>找出特征i对这些子集中每个子集的边际贡献</li>
<li>聚合所有边际贡献来计算特征i的贡献</li>
</ul>
<p>若要使用SHAP查找Shapley值，只需将训练好的模型插入shap.Explainer</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">shap</span>

<span class="n">explainer</span> <span class="o">=</span> <span class="n">shap</span><span class="o">.</span><span class="n">Explainer</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
<span class="n">shap_values</span> <span class="o">=</span> <span class="n">explainer</span><span class="p">(</span><span class="n">X_frame</span><span class="p">)</span>
</code></pre></div><pre><code>ntree_limit is deprecated, use `iteration_range` or model slicing instead.
</code></pre>
<h2 id="shap瀑布图">SHAP瀑布图</h2>
<p>可视化第一个预测的解释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#第一条记录是未点击</span>
<span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">waterfall</span><span class="p">(</span><span class="n">shap_values</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/output_20_0.png" />
    
    
</figure>

<p>啊哈!现在我们知道每个特征对第一次预测的贡献。对上图的解释：</p>

<figure >
    
        <img src="img/%e7%ac%ac%e4%b8%80%e6%ac%a1%e9%a2%84%e6%b5%8b%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<ul>
<li>蓝色条显示某一特定特征在多大程度上降低了预测的值。</li>
<li>红条显示了一个特定的特征在多大程度上增加了预测值。</li>
<li>负值意味着该人点击广告的概率小于0.5</li>
</ul>
<p>我们应该期望总贡献等于预测与均值预测的差值。我们来验证一下：</p>

<figure >
    
        <img src="img/%e6%80%bb%e8%b4%a1%e7%8c%ae%e7%ad%89%e4%ba%8e%e9%a2%84%e6%b5%8b%e4%b8%8e%e5%9d%87%e5%80%bc%e9%a2%84%e6%b5%8b%e7%9a%84%e5%b7%ae%e5%80%bc.png" />
    
    
</figure>

<p>酷!他们是平等的。</p>
<p>可视化第二个预测的解释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#第二条记录也是未点击</span>
<span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">waterfall</span><span class="p">(</span><span class="n">shap_values</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/output_22_0.png" />
    
    
</figure>

<h2 id="shap摘要图">SHAP摘要图</h2>
<p>我们可以使用SHAP摘要图，而不是查看每个单独的实例，来可视化这些特性对多个实例的整体影响：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">shap</span><span class="o">.</span><span class="n">summary_plot</span><span class="p">(</span><span class="n">shap_values</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_24_0.png" />
    
    
</figure>

<p>SHAP摘要图告诉我们数据集上最重要的特征及其影响范围。</p>
<p>从上面的情节中，我们可以对模型的预测获得一些有趣的见解：</p>
<ul>
<li>用户的 <strong>daily_internet_usage</strong> 对该用户是否点击广告的影响最大。</li>
<li>随着<strong>daily_time_spent_on_site</strong>的增加，用户点击广告的可能性降低。</li>
<li>随着<strong>area_income</strong>的增加，用户点击广告的可能性降低。</li>
<li>随着<strong>age</strong>的增长，用户更容易点击广告。</li>
<li>如果用户是<strong>male</strong>，则该用户点击广告的可能性较小。</li>
</ul>
<h2 id="shap条形图">SHAP条形图</h2>
<p>我们还可以使用SHAP条形图得到全局特征重要性图。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">shap_values</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_26_0.png" />
    
    
</figure>

<p>很酷!</p>
<h2 id="结论">结论</h2>
<p>恭喜你!您刚刚了解了Shapey值以及如何使用它来解释一个机器学习模型。希望本文将提供您使用Python来解释自己的机器学习模型的基本知识。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>DataShare | 6000&#43;个股票的每日财经新闻</title>
      <link>https://textdata.cn/blog/daily_financial_news_for_6000_stocks/</link>
      <pubDate>Mon, 20 Sep 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/daily_financial_news_for_6000_stocks/</guid>
      <description>财经数据集可下载</description>
      <content:encoded><![CDATA[<br>
<blockquote>
<p>作者 bot_developer</p>
<p>搬运自</p>
<ul>
<li><a href="https://www.kaggle.com/miguelaenlle/massive-stock-news-analysis-db-for-nlpbacktests">https://www.kaggle.com/miguelaenlle/massive-stock-news-analysis-db-for-nlpbacktests</a></li>
<li><a href="https://github.com/bot-developer3/Scraping-Tools-Benzinga">https://github.com/bot-developer3/Scraping-Tools-Benzinga</a>.</li>
</ul>
</blockquote>
<br>
<h2 id="背景">背景</h2>
<ul>
<li>获得高质量（历史）股市新闻数据既困难又昂贵；</li>
<li>订阅历史新闻数据提供商服务可能需要花费数千美元。</li>
</ul>
<p><br><br></p>
<h2 id="数据集">数据集</h2>
<p>采集了<strong>6000</strong>只股票<strong>2009-2020</strong>年间的<strong>4</strong>万条新闻文章</p>
<p>数据链接:https://pan.baidu.com/s/1rMo4Ek2bxvVLmeyxskVCAg  密码:paen</p>
<h3 id="raw_analyst_ratingscsv">raw_analyst_ratings.csv</h3>
<p>直接抓取分析师评级数据，有<strong>1034</strong>位分析师对<strong>6204</strong>只股票进行了股票分析，分析记录累积<strong>1407328</strong>条, 字段包括：<strong>索引、标题、URL、文章作者（出版商总是benzinga）、出版时间戳、股票代码</strong>。</p>
<p>请注意，此 CSV 文件中的所有日期均不包含精确的时分秒信息。 如果您打算使用此文件进行回测（analyst_ratings_processed.csv 更好），请假设文章是在第二天而不是当前文章中显示的日期发布的。</p>
<br>
<h3 id="raw_partner_headlinescsv">raw_partner_headlines.csv</h3>
<p>直接抓取原始新闻标题，共有<strong>1845559</strong>条记录, 字段包括：<strong>索引、标题、URL、出版商（不是 benzinga）、日期、股票行情</strong>。</p>
<br>
<h3 id="analyst_ratings_processedcsv">analyst_ratings_processed.csv</h3>
<p>处理过的分析师评级数据， 共有<strong>1400469</strong>条记录， 字段包括：<strong>文章标题，日期，股票</strong></p>
<p>时区为 UTC-4。 这与 raw_analys_theadlines 之间的区别在于，它具有精确到分钟的日期，而 raw_analys_tratings 只是没有小时或分钟的那一天。</p>
<p><br><br></p>
<h2 id="注意">注意</h2>
<ul>
<li>数据爬自benzinga.com，新闻内容版权归Benzinga所有。</li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Label-Studio|多媒体数据标注工具</title>
      <link>https://textdata.cn/blog/label_studio_test/</link>
      <pubDate>Sun, 18 Jul 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/label_studio_test/</guid>
      <description>自然语言处理前需要先标注数据,label-studio让数据标注过程变得轻松简单</description>
      <content:encoded><![CDATA[<h2 id="1-简介">1. 简介</h2>
<h3 id="label-studiohttpsgithubcomheartexlabslabel-studio"><a href="https://github.com/heartexlabs/label-studio">label-studio</a></h3>
<p>假设我们想使用机器学习做文本分析，一般都需要先对数据进行标注，才能训练出效果比较好的监督机器学习模型。</p>
<p>label-studio是多媒体数据标注工具，可以很方便的进行标注和导出。</p>
<p>Label Studio 是一款开源数据标注工具，用于标注和探索多种类型的数据。 您可以使用多种数据格式执行的标记任务。</p>
<p>您还可以将 Label Studio 与机器学习模型集成，以提供标签（预标签）的预测，或执行持续的主动学习。</p>
<p>官方文档 <a href="https://labelstud.io/">https://labelstud.io/</a></p>
<br>
<h3 id="操作步骤">操作步骤</h3>
<ol>
<li>安装Label Studio</li>
<li>启动Label Studio</li>
<li>创建Label Studio账号</li>
<li>项目默认配置</li>
<li>导入数据</li>
<li>标注数据</li>
<li>结束标记，导出标注数据</li>
</ol>
<br>
<h3 id="安装">安装</h3>
<p>命令行中执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install label-studio==1.1.0
</code></pre></div><h2 id="2-快速上手">2 快速上手</h2>
<p>在桌面创建自动生成一个名为Project的项目文件夹。</p>
<ul>
<li>Win命令行执行</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">label-studio --data-dir Desktop/Project
</code></pre></div><ul>
<li>Mac命令行执行</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">label-studio --data-dir desktop/Project
</code></pre></div><br>
<br>
<p>执行上方代码大概10s左右，会在浏览器弹出如下界面</p>

<figure >
    
        <img src="img/%e5%88%9b%e5%bb%ba%e8%b4%a6%e6%88%b7.png" width="800" />
    
    
</figure>

<p>注册好账号密码，点击<strong>Create Project</strong></p>

<figure >
    
        <img src="img/%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae.png" width="800" />
    
    
</figure>

<br>
<p>项目描述填写好，点击按钮**Data Import **，</p>

<figure >
    
        <img src="img/%e8%ae%be%e7%bd%ae%e9%a1%b9%e7%9b%ae%e6%8f%8f%e8%bf%b0.png" width="800" />
    
    
</figure>

<p>这里我们要做文本分析，导入csv</p>

<figure >
    
        <img src="img/%e5%af%bc%e5%85%a5%e6%95%b0%e6%8d%ae1.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/%e5%af%bc%e5%85%a5%e6%95%b0%e6%8d%ae2.png" width="800" />
    
    
</figure>

<br>
<p>设置标注模式，点击按钮<strong>Labeling Setup</strong>,选择<strong>Natural Language Process</strong>、<strong>TEXT Classification</strong>。就考研进行pos、neg、neo三个类别的文本标注。</p>

<figure >
    
        <img src="img/%e8%ae%be%e7%bd%ae%e6%a0%87%e6%b3%a8%e6%a8%a1%e5%bc%8f1.png" width="800" />
    
    
</figure>

<p>注意label-studio提供了diy，考研根据自己需要点击<strong>Code</strong>设定标注类别名称、增减类别。大家感兴趣的可以深入研究。</p>

<figure >
    
        <img src="img/%e8%ae%be%e7%bd%ae%e6%a0%87%e6%b3%a8%e6%a8%a1%e5%bc%8f2.png" width="800" />
    
    
</figure>

<p>点击<strong>Save</strong> 按钮，开始准备标注数据啦</p>
<br>
<p>数据界面，勾选全部数据，点击蓝色按钮<strong>Label All Tasks</strong></p>

<figure >
    
        <img src="img/%e6%95%b0%e6%8d%ae%e7%95%8c%e9%9d%a2.png" width="800" />
    
    
</figure>

<p>开始标注，勾选你认为合适的标签，点击右侧<strong>Submit</strong></p>

<figure >
    
        <img src="img/%e5%bc%80%e5%a7%8b%e6%a0%87%e6%b3%a8.png" width="800" />
    
    
</figure>

<br>
<p>导出标注数据,先点击右侧<strong>Export</strong>按钮，选择导出格式，最后点击底部<strong>Export</strong>按钮执行导出。</p>

<figure >
    
        <img src="img/%e5%af%bc%e5%87%ba%e6%a0%87%e6%b3%a8%e6%95%b0%e6%8d%ae.png" width="800" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>tfidf有权重的情感分析</title>
      <link>https://textdata.cn/blog/weighted_tfidf_sentiment_analysis/</link>
      <pubDate>Sun, 18 Jul 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/weighted_tfidf_sentiment_analysis/</guid>
      <description>最简便的词典法(有权重的)情感分析</description>
      <content:encoded><![CDATA[<h1 id="情感分析">情感分析</h1>
<ul>
<li>无权重。直接计算文本中正、负情感词出现的次数</li>
<li>有权重。tf-idf， tf是词频，idf是权重。</li>
</ul>
<h2 id="tfidf法">Tfidf法</h2>
<p>scikit库除了CountVectorizer类，还有TfidfVectorizer类。TF-IDF这个定义相信大家应该已经耳熟能详了：</p>
<p>
<figure >
    
        <img src="img/tf.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/idf.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/tfidf.png" width="800" />
    
    
</figure>
</p>
<ul>
<li>TF 词语出现越多，这个词越有信息量</li>
<li>IDF 词语越少的出现在文本中，词语越有信息量。</li>
</ul>
<br>
<h2 id="原始数据">原始数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>


<span class="n">corpus</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;hello, i am glad to meet you&#34;</span><span class="p">,</span>
           <span class="s2">&#34;it is wonderful&#34;</span><span class="p">,</span>
           <span class="s2">&#34;i hate you&#34;</span><span class="p">,</span>
           <span class="s2">&#34;i am sad&#34;</span><span class="p">]</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">corpus</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Text&#39;</span><span class="p">])</span>
<span class="n">df1</span>
</code></pre></div>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>

<br>
<h2 id="构造tfidf">构造tfidf</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfVectorizer</span>


<span class="k">def</span> <span class="nf">createDTM</span><span class="p">(</span><span class="n">corpus</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;构建文档词语矩阵&#34;&#34;&#34;</span>
    <span class="n">vectorize</span> <span class="o">=</span> <span class="n">TfidfVectorizer</span><span class="p">()</span>
    <span class="c1">#注意fit_transform相当于fit之后又transform。</span>
    <span class="n">dtm</span> <span class="o">=</span> <span class="n">vectorize</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">corpus</span><span class="p">)</span>
    <span class="c1">#vectorize.fit(corpus)</span>
    <span class="c1">#dtm  = vectorize.transform(corpus) </span>
    <span class="c1">#打印dtm</span>
    <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">dtm</span><span class="o">.</span><span class="n">toarray</span><span class="p">(),</span> 
                        <span class="n">columns</span><span class="o">=</span><span class="n">vectorize</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">())</span> 

<span class="n">df2</span> <span class="o">=</span> <span class="n">createDTM</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span>
<span class="n">df2</span>
</code></pre></div>
<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>

<br>
<h2 id="合并df1和df2">合并df1和df2</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span> <span class="n">df2</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>

<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#积极词典</span>
<span class="n">pos_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;glad&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;wonderful&#39;</span><span class="p">]</span>

<span class="c1">#消极词典</span>
<span class="n">neg_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;sad&#39;</span><span class="p">,</span> <span class="s1">&#39;hate&#39;</span><span class="p">]</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#积极词典</span>
<span class="n">df</span><span class="p">[</span><span class="n">pos_words</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="n">pos_words</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>0    0.873439
1    0.577350
2    0.000000
3    0.000000
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Pos&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">pos_words</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/4.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Neg&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">neg_words</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/5.png" width="800" />
    
    
</figure>

<br>
<h2 id="输出">输出</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s1">&#39;output/tfidf有权重的情感分析.csv&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>中文金融情感词典</title>
      <link>https://textdata.cn/blog/chinese_financial_dictionary/</link>
      <pubDate>Tue, 13 Jul 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/chinese_financial_dictionary/</guid>
      <description>基于 姚加权，冯绪，王赞钧，纪荣嵘，张维. 语调、情绪及市场影响：基于金融情绪词典. 管理科学学报 开发了中文的金融情感词典第一个权威的中文情感词典|配合cnsenti使用</description>
      <content:encoded><![CDATA[<p>可以使用cnsenti库中的自定义方法，计算年报或财经类社交媒体的文本情绪。</p>
<blockquote>
<p>姚加权，冯绪，王赞钧，纪荣嵘，张维. 语调、情绪及市场影响：基于金融情绪词典. 管理科学学报，2021. 24(5), 26-46.</p>
</blockquote>
<p>该论文开发了中文的金融情感词典，已有的中文金融情感词典有以下不足：</p>
<ul>
<li>大多采用形容情绪词，对于金融场景适用性差</li>
<li>将LM英文词典本土化，制作中文金融情绪词典</li>
<li>词典构建方法多为人工</li>
</ul>
<p>该论文开发中文情绪词典，从年报和社交媒体两个数据源出发，借助数据挖掘和深度学习算法，构建了正式用语 和 非正式用于两大类情感词典。</p>
<h2 id="标注思路">标注思路</h2>
<p>一般构建词典要么用多个词典融合，要么人工标准训练。该论文采用了一定的技巧，不需要人工标注即可实现近乎人工标注的效果。</p>
<h3 id="正式词典标注思路">正式词典标注思路</h3>
<p>正式用语情感词典，通过年报公布后3个交易日累积正负收益率为标准，将年报标记为正负面情绪两类。</p>
<h3 id="非正式词典标注思路">非正式词典标注思路</h3>
<p>使用所有中国上市公司在雪球论坛和东方财富股吧内相关帖子，共8130万条。</p>
<p>在网络股票论坛，用户发表自己的意见时，经常带有表情符号，从而使得帖子带有明显的情绪指标。 这种含有特殊指标的帖子，省去了人工标注文本情绪的工作。</p>
<br>
<p>具体构建词典的步骤，大家可以阅读论文原文。论文已经公开了中文情感词典，我已将其整理为4个txt文件</p>
<ul>
<li>formal_pos.txt  正式用语<strong>正面</strong>情绪词典</li>
<li>formal_neg.txt  正式用语<strong>负面</strong>情绪词典</li>
<li>unformal_pos.txt  非正式用语<strong>正面</strong>情绪词典</li>
<li>unformal_neg.txt  非正式用语<strong>负面</strong>情绪词典</li>
</ul>
<br>
<h2 id="中文金融词典使用方法">中文金融词典使用方法</h2>
<p>cnsenti实现了自定义词典功能，导入不同的txt词典文件，即可实现不同方面的情绪词统计。</p>
<h3 id="年报正式用语词典">年报正式用语词典</h3>
<ul>
<li>dict/formal_pos.txt   正式用语<strong>正面</strong>情绪词典</li>
<li>dict/formal_neg.txt    正式用语<strong>负面</strong>情绪词典</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cnsenti</span> <span class="kn">import</span> <span class="n">Sentiment</span>

<span class="n">senti</span> <span class="o">=</span> <span class="n">Sentiment</span><span class="p">(</span><span class="n">pos</span><span class="o">=</span><span class="s1">&#39;dict/formal_pos.txt&#39;</span><span class="p">,</span>  <span class="c1">#正面词典txt文件相对路径</span>
                  <span class="n">neg</span><span class="o">=</span><span class="s1">&#39;dict/formal_neg.txt&#39;</span><span class="p">,</span>  <span class="c1">#负面词典txt文件相对路径</span>
                  <span class="n">merge</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>             <span class="c1">#是否将cnsenti自带词典和用户导入的自定义词典融合</span>
                  <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>      <span class="c1">#两txt均为utf-8编码</span>

<span class="n">test_text</span> <span class="o">=</span> <span class="s1">&#39;这家公司是行业的引领者，是中流砥柱。今年的业绩非常好。&#39;</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">senti</span><span class="o">.</span><span class="n">sentiment_count</span><span class="p">(</span><span class="n">test_text</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;sentiment_count&#39;</span><span class="p">,</span><span class="n">result</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">sentiment_count {&#39;words&#39;: 16, &#39;sentences&#39;: 2, &#39;pos&#39;: 3, &#39;neg&#39;: 0}
</code></pre></div><br>
<h3 id="财经社交媒体非正式用语词典">财经社交媒体非正式用语词典</h3>
<ul>
<li>dict/unformal_pos.txt   非正式用语<strong>正面</strong>情绪词典</li>
<li>dict/unformal_neg.txt    非正式用语<strong>负面</strong>情绪词典</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cnsenti</span> <span class="kn">import</span> <span class="n">Sentiment</span>

<span class="n">senti</span> <span class="o">=</span> <span class="n">Sentiment</span><span class="p">(</span><span class="n">pos</span><span class="o">=</span><span class="s1">&#39;dict/unformal_pos.txt&#39;</span><span class="p">,</span>  <span class="c1">#正面词典txt文件相对路径</span>
                  <span class="n">neg</span><span class="o">=</span><span class="s1">&#39;dict/unformal_neg.txt&#39;</span><span class="p">,</span>  <span class="c1">#负面词典txt文件相对路径</span>
                  <span class="n">merge</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>             <span class="c1">#融合cnsenti自带词典和用户导入的自定义词典</span>
                  <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>      <span class="c1">#两txt均为utf-8编码</span>

<span class="n">test_text</span> <span class="o">=</span> <span class="s1">&#39;这个股票前期走势承压，现在阴跌，散户只能割肉离场，这股票真垃圾&#39;</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">senti</span><span class="o">.</span><span class="n">sentiment_count</span><span class="p">(</span><span class="n">test_text</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;sentiment_count&#39;</span><span class="p">,</span><span class="n">result</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">sentiment_count {&#39;words&#39;: 18, &#39;sentences&#39;: 1, &#39;pos&#39;: 0, &#39;neg&#39;: 2}
</code></pre></div><br>
<h2 id="说明">说明</h2>
<p>读者如需使用本项目词典，请引用如下参考文献：</p>
<blockquote>
<p>姚加权，冯绪，王赞钧，纪荣嵘，张维. 语调、情绪及市场影响：基于金融情绪词典. 管理科学学报，2021. 24(5), 26-46.</p>
</blockquote>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Clumper库|dplyr样式的Python包</title>
      <link>https://textdata.cn/blog/clumper_pipeline/</link>
      <pubDate>Tue, 22 Jun 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/clumper_pipeline/</guid>
      <description>让数据分析更优雅</description>
      <content:encoded><![CDATA[<p>Clumper可以用来处理嵌套样式的json数据结构。</p>
<h2 id="代码下载clumper代码zip"><a href="Clumper%E4%BB%A3%E7%A0%81.zip">代码下载</a></h2>
<br>
<h2 id="getting-started">Getting Started</h2>
<h3 id="安装">安装</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">clumper</span>
</code></pre></div><pre><code>Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Collecting clumper
  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/70/62/0731ab9b48c91132aff487217980dcb147ffc0922a278adc05986f6a8d4b/clumper-0.2.13-py2.py3-none-any.whl (21 kB)
Installing collected packages: clumper
Successfully installed clumper-0.2.13
[33mWARNING: You are using pip version 20.0.2; however, version 21.1.2 is available.
You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 -m pip install --upgrade pip' command.[0m
</code></pre>
<p>为了展示Clumper如何工作，我准备了pokemon.json， 由列表组成(该列表由多个字典组成)，下面是pokemon.json部分内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;pokemon.json&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">jsonf</span><span class="p">:</span>
    <span class="n">pokemon</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">jsonf</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
    
<span class="n">pokemon</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div><pre><code>[{'name': 'Bulbasaur',
  'type': ['Grass', 'Poison'],
  'total': 318,
  'hp': 45,
  'attack': 49},
 {'name': 'Ivysaur',
  'type': ['Grass', 'Poison'],
  'total': 405,
  'hp': 60,
  'attack': 62}]
</code></pre>
<p>我们准备的pokemon.json列表中大概有800个字典，数量级刚刚好，不会因为太大导致电脑无法运行数据分析，也不会太小导致手动操作性价比更高。</p>
<br>
<br>
<h2 id="example">Example</h2>
<h3 id="基本操作">基本操作</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">+</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 2, 'b': 4, 'c': 6}, 
{'a': 7, 'b': 2, 'c': 9}, 
{'a': 3, 'b': 6, 'c': 9}]
</code></pre>
<br>
<h3 id="代码解析">代码解析</h3>
<p><strong>Step1</strong></p>
<p>首先使用<strong>mutate</strong>方法，该方法可以在每条记录中生成新变量。</p>

<figure >
    
        <img src="img/first-mutate.png" width="800" />
    
    
</figure>

<p>结算结果仍为Clumper类</p>
<p><strong>Step2</strong></p>
<p>接下来对mutate之后的数据进行排序</p>

<figure >
    
        <img src="img/then-sort.png" width="800" />
    
    
</figure>

<p>得到的结果仍为Clumper类。</p>
<p>从上面的小代码案例中，可以看到整套流程像是一个流水线车间，每一行就是一个生成环节，生产环节之间使用.连接起来。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
    
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">pokemon</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">])</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>  <span class="c1">#保留type长度为1的字典</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="c1">#type值从列表变为字符串</span>
         <span class="n">ratio</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;attack&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;hp&#39;</span><span class="p">])</span> <span class="c1">#新建ratio</span>
 <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;ratio&#39;</span><span class="p">)</span>   <span class="c1">#字典最后只保留name， type， ratio三个字段</span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;ratio&#39;</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#按照ratio降序排列</span>
 <span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">#只保留前5个</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> <span class="c1">#转成列表显示</span>
<span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="common-verbs">Common Verbs</h2>
<h3 id="keep">Keep</h3>
<p>keep函数可以从原始数据中抽取符合指定条件的子集。

<figure >
    
        <img src="img/keep.png" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>  <span class="c1">#试一试去掉.collect()后的效果</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 3}, 
{'a': 4}]
</code></pre>
<p>可以实现缺失值处理，以不同的方式实现pandas的<code>.dropna()</code>的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
<span class="p">]</span>

<span class="c1">#只保留含有b的字段</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4}, 
{'a': 2, 'b': 3}, 
{'a': 3, 'b': 2}]
</code></pre>
<h3 id="mutate">Mutate</h3>
<p>mutate可以在每条记录中，创建新字段、改写旧字段。

<figure >
    
        <img src="img/mutate.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="c1">#新建了c和s字段</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">],</span>
         <span class="n">s</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2, 'c': 3, 's': 6},
 {'a': 2, 'b': 3, 'c': 5, 's': 10},
 {'a': 1, 'b': 6, 'c': 7, 's': 14}]
</code></pre>
<h3 id="sort">Sort</h3>
<p>sort可以实现排序

<figure >
    
        <img src="img/sort.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">])</span> <span class="c1">#默认升序</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 2, 'b': 1}, 
{'a': 1, 'b': 2}, 
{'a': 3, 'b': 3}]
</code></pre>
<h3 id="select">Select</h3>
<p>select挑选每条记录中的某个(些)字段

<figure >
    
        <img src="img/select.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1}, 
{'a': 2}, 
{'a': 1}]
</code></pre>
<h3 id="drop">Drop</h3>
<p>剔除某个（些）字段。

<figure >
    
        <img src="img/drop.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2}, 
{'a': 2, 'b': 3}, 
{'a': 1, 'b': 6}]
</code></pre>
<h3 id="groupby">GroupBy</h3>
<p>根据某个（些）字段对数据集进行分组，得到不同Group类的集合。一般与<code>.agg()</code>方法联合使用。

<figure >
    
        <img src="img/groupby.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;gender&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">groups</span><span class="o">==</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<h3 id="ungroup">Ungroup</h3>
<p>GroupBy的反操作

<figure >
    
        <img src="img/ungroup.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;gender&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">ungroup</span><span class="p">()</span><span class="o">.</span><span class="n">groups</span> <span class="o">==</span> <span class="nb">tuple</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<p><br><br></p>
<h1 id="about-groups">About Groups</h1>
<h3 id="agg">Agg</h3>
<p>聚合描述性统计方法</p>
<p>agg如下图，可以理解成三个步骤，即group-&gt;split-&gt;summary

<figure >
    
        <img src="img/split-apply-combine.png" width="800" />
    
    
</figure>
</p>
<p>常用的描述性统计函数有： <code>mean、count、unqiue、n_unique、sum、min和max</code></p>
<p>求学生的平均成绩、最优和最差成绩</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">mean_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">),</span>      
      <span class="n">max_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">),</span>      
      <span class="n">min_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;min&#39;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'mean_grade': 85.75, 'max_grade': 99, 'min_grade': 58}]
</code></pre>
<p>求男生和女生各自的平均成绩、最优和最差成绩</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">mean_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">),</span>      
      <span class="n">max_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">),</span>      
      <span class="n">min_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;min&#39;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'gender': '男', 'mean_grade': 78, 'max_grade': 98, 'min_grade': 58}, 
{'gender': '女', 'mean_grade': 93.5, 'max_grade': 99, 'min_grade': 88}]
</code></pre>
<h3 id="collect">Collect</h3>
<p>一般Clumper函数返回的结果显示为Clumper类，是看不到具体内容的。</p>
<p>collect作用主要是展开显示。

<figure >
    
        <img src="img/collect.png" width="800" />
    
    
</figure>
</p>
<h3 id="剔除重复">剔除重复</h3>
<p>剔除重复内容

<figure >
    
        <img src="img/drop_duplicates.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> 
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}]
</code></pre>
<hr>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">### 什么是Group？</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>&lt;Clumper groups=('grp',) len=5 @0x103cb0290&gt;
</code></pre>
<p>当前的group以grp作为关键词

<figure >
    
        <img src="img/add_grp.png" width="800" />
    
    
</figure>
</p>
<p>现在经过 <code>.group_by('grp')</code>操作后，说明你对每个grp组感兴趣。具体一点，一个组是<code>{'grp': 'a'}</code>, 另一个组是<code>{'grp': 'b'}.</code></p>
<h3 id="agg-1">Agg</h3>
<h4 id="without-groups">without groups</h4>

<figure >
    
        <img src="img/agg-without-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;sum&#39;</span><span class="p">),</span>
       <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'s': 29, 'm': 5.8}]
</code></pre>
<h4 id="with-groups">with groups</h4>
<p>分别计算组grp=a、组grp=b的sum和mean

<figure >
    
        <img src="img/agg-with-group.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
  <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;sum&#39;</span><span class="p">),</span>
       <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'grp': 'a', 's': 18, 'm': 6}, 
{'grp': 'b', 's': 11, 'm': 5.5}]
</code></pre>
<h4 id="agg内置的统计函数名">agg内置的统计函数名</h4>
<p>内置的统计函数，可直接通过字符串调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">{</span>
  <span class="s2">&#34;mean&#34;</span><span class="p">:</span> <span class="n">mean</span><span class="p">,</span>
  <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">),</span>
  <span class="s2">&#34;unique&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">d</span><span class="p">)),</span>
  <span class="s2">&#34;n_unique&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">d</span><span class="p">)),</span>
  <span class="s2">&#34;sum&#34;</span><span class="p">:</span> <span class="nb">sum</span><span class="p">,</span>
  <span class="s2">&#34;min&#34;</span><span class="p">:</span> <span class="nb">min</span><span class="p">,</span>
  <span class="s2">&#34;max&#34;</span><span class="p">:</span> <span class="nb">max</span><span class="p">,</span>
  <span class="s2">&#34;median&#34;</span><span class="p">:</span> <span class="n">median</span><span class="p">,</span>
  <span class="s2">&#34;var&#34;</span><span class="p">:</span> <span class="n">variance</span><span class="p">,</span>
  <span class="s2">&#34;std&#34;</span><span class="p">:</span> <span class="n">stdev</span><span class="p">,</span>
  <span class="s2">&#34;values&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span>
  <span class="s2">&#34;first&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
  <span class="s2">&#34;last&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
<span class="p">}</span>
</code></pre></div><h3 id="transform">Transform</h3>
<p><code>.transform()</code>与<code>.agg()</code>类似。主要的区别是transform处理过程中，记录数和字段数不会出现压缩。</p>
<h4 id="without-groups-1">without groups</h4>

<figure >
    
        <img src="img/transform-without-groups.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;sum&#34;</span><span class="p">),</span>            
            <span class="n">u</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;unique&#34;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 2, 'grp': 'b', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 7, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]},
{'a': 9, 'grp': 'b', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 5, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}]
</code></pre>
<h4 id="with-groups-1">with groups</h4>

<figure >
    
        <img src="img/transform-with-groups.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;grp&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;sum&#34;</span><span class="p">),</span>
            <span class="n">u</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;unique&#34;</span><span class="p">))</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]},
 {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]}]
</code></pre>
<h3 id="mutate-1">Mutate</h3>
<p>clumper库中的<code>row_number</code>可以给每条记录显示索引位置（第几个）。</p>
<h4 id="without-groups-2">without groups</h4>

<figure >
    
        <img src="img/mutate-without-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="kn">from</span> <span class="nn">clumper.sequence</span> <span class="kn">import</span> <span class="n">row_number</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">row_number</span><span class="p">())</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 'index': 1},
 {'a': 2, 'grp': 'b', 'index': 2},
 {'a': 7, 'grp': 'a', 'index': 3},
 {'a': 4, 'grp': 'b', 'index': 4},
 {'a': 5, 'grp': 'a', 'index': 5}]
</code></pre>
<h4 id="with-groups-2">with groups</h4>

<figure >
    
        <img src="img/mutate-with-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="kn">from</span> <span class="nn">clumper.sequence</span> <span class="kn">import</span> <span class="n">row_number</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
  <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">row_number</span><span class="p">())</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 'index': 1},
 {'a': 7, 'grp': 'a', 'index': 2},
 {'a': 5, 'grp': 'a', 'index': 3},
 {'a': 2, 'grp': 'b', 'index': 1},
 {'a': 4, 'grp': 'b', 'index': 2}]
</code></pre>
<h3 id="sort-1">Sort</h3>
<p>排序, 默认升序</p>
<h4 id="without-groups-3">without groups</h4>

<figure >
    
        <img src="img/sort-no-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span> <span class="c1">#根据字段a进行排序  </span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span>  
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 2, 'grp': 'b'}, 
{'a': 5, 'grp': 'a'}, 
{'a': 6, 'grp': 'a'}, 
{'a': 7, 'grp': 'a'}, 
{'a': 9, 'grp': 'b'}]
</code></pre>
<h4 id="with-groups-3">with groups</h4>

<figure >
    
        <img src="img/sort-with-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>  
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>  
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span>  
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 5, 'grp': 'a'}, 
{'a': 6, 'grp': 'a'}, 
{'a': 7, 'grp': 'a'}, 
{'a': 2, 'grp': 'b'}, 
{'a': 9, 'grp': 'b'}]
</code></pre>
<h3 id="ungroup-1">Ungroup</h3>
<p>最后，如果你已经进行完了分组计算，想再次整合起来，取消分组状态，可以使用<code>.ungroup()</code></p>
<p><br><br></p>
<h2 id="merge-verbs">Merge Verbs</h2>
<hr>
<p>如果想将多个记录整理到一个记录中，有很多种实现方法。</p>
<h3 id="concat">Concat</h3>
<p>如果想垂直方向将多个记录堆叠，可以使用concat

<figure >
    
        <img src="img/concat.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">c1</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}])</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}])</span>
<span class="n">c3</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}])</span>

<span class="n">c1</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于c1.concat(c2).concat(c3).collect()</span>
<span class="n">c1</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="n">c3</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}, {'a': 3}]
</code></pre>
<h3 id="joins">Joins</h3>
<p>Joins类似于数学里的交集、并集的，大致有以下四种，

<figure >
    
        <img src="img/LeftRight.png" width="800" />
    
    
</figure>
</p>
<h4 id="left-join">left join</h4>
<p>左连接，以左为主，表示以table1为主，关联上table2的数据，结果显示table1的所有数据，然后table2显示的是和table1有交集部分的数据。

<figure >
    
        <img src="img/left_join.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">},</span>
<span class="p">])</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
<span class="p">])</span>

<span class="c1">#根据b进行左右两表的合并</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">left</span><span class="o">.</span><span class="n">inner_join</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">mapping</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">})</span>
<span class="n">result</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4, 'c': 9}, {'a': 2, 'b': 6, 'c': 7}]
</code></pre>
<h4 id="inner-join">inner join</h4>
<p>内连接， 交集</p>

<figure >
    
        <img src="img/inner_join.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">8</span><span class="p">},</span>
<span class="p">])</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
<span class="p">])</span>


<span class="n">result</span> <span class="o">=</span> <span class="n">left</span><span class="o">.</span><span class="n">inner_join</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">mapping</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">})</span>
<span class="n">result</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4, 'c': 9}, {'a': 2, 'b': 6, 'c': 7}]
</code></pre>
<hr>
<p><br><br></p>
<h2 id="nested-data">Nested Data</h2>
<p>由于嵌套数据序列确实具有各种形状和大小，因此该库提供了各种方法来帮助您将数据重塑为不同的格式。 本文档将演示这些方法的工作原理。</p>
<h3 id="explode">Explode</h3>
<p>炸裂（展开）

<figure >
    
        <img src="img/explode.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">99</span><span class="p">],</span> 
         <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">]}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">explode</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'gender': '男', 'grade': 80, 'name': '张三'},
 {'gender': '男', 'grade': 99, 'name': '张三'},
 {'gender': '男', 'grade': 80, 'name': '李四'},
 {'gender': '男', 'grade': 99, 'name': '李四'}]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>


<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">99</span><span class="p">],</span> 
         <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">]}]</span>

<span class="c1">#.explode(&#39;name&#39;, &#39;grade&#39;)略微有些区别</span>
<span class="c1">#请查看两者运行结果</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">explode</span><span class="p">(</span><span class="n">item</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="s1">&#39;grade&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'gender': '男', 'item': '张三', 'val': 80},
 {'gender': '男', 'item': '张三', 'val': 99},
 {'gender': '男', 'item': '李四', 'val': 80},
 {'gender': '男', 'item': '李四', 'val': 99}]
</code></pre>
<h3 id="unpack">Unpack</h3>
<p>与explode类似

<figure >
    
        <img src="img/unpack.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s1">&#39;rows&#39;</span><span class="p">:</span> <span class="p">[{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}]</span>
<span class="p">}</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;rows&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2, 'c': 3}, 
{'a': 1, 'b': 3}, 
{'a': 1, 'b': 4}]
</code></pre>
<h3 id="flatten-keys">Flatten keys</h3>

<figure >
    
        <img src="img/flatten_keys.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;feature_1&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
  <span class="s1">&#39;feature_2&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
  <span class="s1">&#39;feature_3&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
<span class="p">}</span>


<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">listify</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
 <span class="o">.</span><span class="n">flatten_keys</span><span class="p">()</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> 
<span class="p">)</span>
</code></pre></div><pre><code>[{'propery_1': 1, 'property_2': 2, 'key': 'feature_1'},
 {'propery_1': 3, 'property_2': 4, 'key': 'feature_2'},
 {'propery_1': 5, 'property_2': 6, 'key': 'feature_3'}]
</code></pre>
<p><br><br></p>
<h2 id="summary-methods">Summary Methods</h2>
<p>Clumper支持常用的统计性方法，诸如mean、max、min等</p>
<h3 id="mean">mean</h3>

<figure >
    
        <img src="img/mean.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3.5
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>6.666666666666667
</code></pre>
<h3 id="count">count</h3>
<p>统计记录数

<figure >
    
        <img src="img/count.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="c1">#含有a的一共有多少条记录</span>
<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>4
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3
</code></pre>
<h3 id="unique">unique</h3>
<p>汇总某字段不重样的值的种类，如<code>[a, b, a, a]</code>，经过unique后，返回<code>[a, b]</code>

<figure >
    
        <img src="img/unique.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>[2, 3, 7]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>[6, 7]
</code></pre>
<h3 id="n_unique">n_unique</h3>
<p>统计某字段对应的值一种有多少种

<figure >
    
        <img src="img/nunique.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">n_unique</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">n_unique</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>2
</code></pre>
<h3 id="min">min</h3>

<figure >
    
        <img src="img/min.png" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>2
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>6
</code></pre>
<h3 id="max">max</h3>

<figure >
    
        <img src="img/max.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>7
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>7
</code></pre>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>我最喜欢的15个Typora主题</title>
      <link>https://textdata.cn/blog/my-favorite-typora-themes/</link>
      <pubDate>Tue, 01 Jun 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/my-favorite-typora-themes/</guid>
      <description>Typora是一个所见即所得的Markdown格式文本编辑器，支持Windows、macOS和GNU/Linux操作系统，拼写检查、自定义CSS样式、数学公式渲染（通过MathJax）等特性</description>
      <content:encoded><![CDATA[<h1 id="typora简介">Typora简介</h1>
<p>Typora是一个所见即所得的Markdown格式文本编辑器，支持Windows、macOS和GNU/Linux操作系统，拼写检查、自定义CSS样式、数学公式渲染（通过MathJax）等特性。</p>
<p>如果你还不知道<code>Typora</code>，请访问<a href="https://typora.io/">Typora — a markdown editor, markdown reader.</a></p>
<br>
<h1 id="主题安装方法">主题安装方法</h1>
<ol>
<li>下载本主题的压缩文件<a href="https://github.com/AntonVanke/typora-mlike-theme/releases/latest">Latest release</a></li>
<li>打开<code>Typora</code>, 点击菜单栏的<code>偏好设置</code>-<code>外观</code>-<code>打开主题文件夹</code></li>
<li>将<code>解压后的</code>文件复制到主题文件夹下(压缩包包含<code>mlike</code>文件夹、 <code>mlike.css</code> <code>mlike-light.css</code>、<code>mlike-dark.css</code>)</li>
<li>重新启动<code>Typora</code>，点击菜单栏的<code>主题</code>-<code>Mlike Light</code>或者<code>Mlike Dark</code></li>
</ol>
<p>具体的安装方法可查看 <a href="https://theme.typora.io/doc/Install-Theme/">Install Theme (typora.io)</a></p>
<br>
<h1 id="typora-themes">Typora Themes</h1>
<p>下面15个主题是大邓最喜欢的主题</p>
<ol>
<li>Autumnus</li>
<li>Adark</li>
<li>Drake</li>
<li>FluentLight</li>
<li>Jamstatic</li>
<li>LessLight</li>
<li>LessLightPrint</li>
<li>Mo</li>
<li>NewPrint</li>
<li>OptAutumnus</li>
<li>OrangeHeart</li>
<li>PixII</li>
<li>Torillic</li>
<li>Vue</li>
<li>Whitey</li>
</ol>
<br>
<h2 id="1autumnus">1.Autumnus</h2>

<figure >
    
        <img src="img/autumnus.png" width="800" />
    
    
</figure>

<br>
<h2 id="2adark">2.Adark</h2>

<figure >
    
        <img src="img/adark.png" width="800" />
    
    
</figure>

<br>
<h2 id="3drake">3.Drake</h2>

<figure >
    
        <img src="img/drake.png" width="800" />
    
    
</figure>

<br>
<h2 id="4fluentlight">4.FluentLight</h2>

<figure >
    
        <img src="img/fluentlight.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/escaping.png" width="800" />
    
    
</figure>

<br>
<h2 id="5jamstatic">5.Jamstatic</h2>

<figure >
    
        <img src="img/jamstatic.png" width="800" />
    
    
</figure>

<br>
<h2 id="6lesslight">6.LessLight</h2>

<figure >
    
        <img src="img/LessLight.png" width="800" />
    
    
</figure>

<br>
<h2 id="7lesslightprint">7.LessLightPrint</h2>

<figure >
    
        <img src="img/LessLightPrint.png" width="800" />
    
    
</figure>

<br>
<h2 id="8mo">8.Mo</h2>

<figure >
    
        <img src="img/Mo.png" width="800" />
    
    
</figure>

<br>
<h2 id="9newprint">9.NewPrint</h2>

<figure >
    
        <img src="img/newprint.png" width="800" />
    
    
</figure>

<br>
<h2 id="10optautumnus">10.OptAutumnus</h2>

<figure >
    
        <img src="img/optAutumnus.png" width="800" />
    
    
</figure>

<br>
<h2 id="11orangeheart">11.OrangeHeart</h2>

<figure >
    
        <img src="img/orangeheart.png" width="800" />
    
    
</figure>

<br>
<h2 id="12pixii">12.PixII</h2>

<figure >
    
        <img src="img/PixII.png" width="800" />
    
    
</figure>

<br>
<h2 id="13torillic">13.Torillic</h2>

<figure >
    
        <img src="img/Torillic.png" width="800" />
    
    
</figure>

<br>
<h2 id="14vue">14.Vue</h2>

<figure >
    
        <img src="img/vue.png" width="800" />
    
    
</figure>

<br>
<h2 id="15whitey">15.Whitey</h2>

<figure >
    
        <img src="img/whitey.png" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>深交所上交所pdf批量下载</title>
      <link>https://textdata.cn/blog/stock_exchange_prospectus/</link>
      <pubDate>Tue, 25 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/stock_exchange_prospectus/</guid>
      <description>有代码有视频；一文让你学会GET/POST两种请求方法的案例实战</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="%E6%8B%9B%E8%82%A1%E8%AF%B4%E6%98%8E%E4%BB%A3%E7%A0%81.zip">点击此处下载代码</a></p>
<br>
<br>
<h2 id="本文b站视频">本文B站视频</h2>
<p><a href="https://www.bilibili.com/video/BV1AE411r7ph">https://www.bilibili.com/video/BV1AE411r7ph</a></p>
<br>
<br>
<h2 id="一知识准备">一、知识准备</h2>
<ol>
<li>python语法基本知识 <a href="https://www.bilibili.com/video/BV1eb411h7sP/">https://www.bilibili.com/video/BV1eb411h7sP/</a></li>
<li>python网络爬虫 <a href="https://www.bilibili.com/video/BV1AE411r7ph/">https://www.bilibili.com/video/BV1AE411r7ph/</a></li>
</ol>
<br>
<br>
<h2 id="二网址规律分析">二、网址规律分析</h2>
<h3 id="21-上交所">2.1 上交所</h3>

<figure >
    
        <img src="img/00-%e4%b8%8a%e4%ba%a4%e6%89%80%e6%8b%9b%e8%82%a1%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" width="800" />
    
    
</figure>

<p>上交所多为GET请求方法，伪码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;上交所网址规律&#39;</span>
<span class="n">headers</span> <span class="o">=</span> <span class="s1">&#39;你的浏览器useragent(带referer)&#39;</span>
<span class="n">cookies</span> <span class="o">=</span> <span class="s1">&#39;你的cookies&#39;</span>
<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> 
                    <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> 
                    <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</code></pre></div><br>
<h3 id="22-深交所">2.2 深交所</h3>

<figure >
    
        <img src="img/01-%e6%b7%b1%e5%9c%b3%e8%af%81%e5%88%b8%e4%ba%a4%e6%98%93%e6%89%80%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/02-%e6%b7%b1%e5%9c%b3%e8%af%81%e5%88%b8%e4%ba%a4%e6%98%93%e6%89%80%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" width="800" />
    
    
</figure>

<p>深交所多为POST请求方法，伪码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;深交所网址规律&#39;</span>
<span class="n">headers</span> <span class="o">=</span> <span class="s1">&#39;你的浏览器useragent(带referer)&#39;</span>
<span class="n">cookies</span> <span class="o">=</span> <span class="s1">&#39;你的cookies&#39;</span>
<span class="n">param</span> <span class="o">=</span> <span class="s1">&#39;form data构造的字典，补全网址规律&#39;</span>

<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> 
                    <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
                    <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">,</span> 
                    <span class="n">data</span><span class="o">=</span><span class="n">param</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="三定位pdf相关数据">三、定位pdf相关数据</h2>
<p>访问得到的结果均为json数据，解析定位方法可使用python的字典方法。</p>

<figure >
    
        <img src="img/03-%e4%b8%8a%e4%ba%a4%e6%89%80%e6%95%b0%e6%8d%ae.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/04-%e6%b7%b1%e4%ba%a4%e6%89%80%e6%95%b0%e6%8d%ae.png" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="四存储数据">四、存储数据</h2>
<p>几千个pdf数据量很容易达到1000+M，如果长时间自动下载容易失败。</p>
<p>建议先获取所有公司相关信息，存储到csv中。</p>
<p>后续再单独使用pandas读取，逐一下载pdf。</p>
<p>注意，这里推荐使用csv新的语法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;你的csv文件路径&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf</span><span class="p">:</span>
    <span class="c1">#csv文件内的字段名</span>
    <span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;link&#39;</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">]</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
    <span class="c1">#访问</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;网址&#39;</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="o">....</span><span class="p">)</span>
    <span class="c1">#定位</span>
    <span class="k">for</span> <span class="n">company</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;data&#39;</span><span class="p">]:</span>
        <span class="c1">#解析数据</span>
        <span class="n">row</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="n">row</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;采集到的标题&#39;</span>
        <span class="n">row</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;采集到的日期&#39;</span>
        <span class="n">row</span><span class="p">[</span><span class="s1">&#39;link&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;采集到的pdf链接&#39;</span>
        <span class="n">row</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;采集到的内容&#39;</span>
        
        <span class="c1">#写入csv</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="五批量下载pdf">五、批量下载pdf</h2>
<p>以深交所为例，已经采集到<strong>深圳交易所.csv</strong>，现在下载只需要执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## 下载
import requests
import pandas as pd

def download(link, fpath):
    &#34;&#34;&#34;
    下载多媒体及文件
    link： 多媒体文件链接（结尾有文件格式名）
    fpath: 存储文件的路径（结尾有文件格式名）
    &#34;&#34;&#34;
    
    resp = requests.get(link)
    #获取到二进制数据
    binarydata = resp.content
    #以二进制形式将数据流存入fname中
    with open(fpath, &#39;wb&#39;) as f:
        f.write(binarydata)
        
df = pd.read_csv(&#39;深圳交易所.csv&#39;)
for title, link in zip(df[&#39;title&#39;], df[&#39;link&#39;]):
    fpath = &#39;深圳/{title}.PDF&#39;.format(title=title)
    download(link, fpath)
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Pandas小案例 | 对某公司同年的某指标批量汇总</title>
      <link>https://textdata.cn/blog/pandas_example_company_analysis/</link>
      <pubDate>Thu, 20 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_example_company_analysis/</guid>
      <description>学会pandas包，走到哪里都不怕</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="%E4%BB%A3%E7%A0%81.zip">点击此处下载代码</a></p>
<br>
<h2 id="问题">问题</h2>
<p>如何将数据中，同一股票代码同一年的某个字段加总成一条？</p>
<p>我想把某公司同一年的数据var加总到一起</p>
<br>
<h2 id="思路">思路</h2>
<p>可以通过pandas库实现这个需求</p>
<ol>
<li>获取公司股票代码列表</li>
<li>获取某公司年份列表</li>
<li>对某个公司同年的var进行加总  (var代指一个字段或变量)</li>
<li>for循环对所有的公司重复2-3操作</li>
</ol>
<br>
<h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#强制股票代码转为str类型</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data.xlsx&#39;</span><span class="p">,</span> <span class="n">converters</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;code&#34;</span><span class="p">:</span> <span class="nb">str</span><span class="p">})</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<br>
<h2 id="实验代码">实验代码</h2>
<h3 id="1-获取公司股票代码列表">1. 获取公司股票代码列表</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">codes</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
<span class="n">codes</span>
</code></pre></div><p>Run</p>
<pre><code>array(['000001', '000002', '000004', '000005', '000006'], dtype=object)
</code></pre>
<br>
<h3 id="2-获取某公司年份列表">2. 获取某公司年份列表</h3>
<p>以000001为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">years</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;000001&#39;</span><span class="p">][</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">years</span>
</code></pre></div><p>Run</p>
<pre><code>{2000, 2002, 2007, 2008, 2010, 2013, 2019}
</code></pre>
<br>
<h3 id="3-对某个公司同年的baladded进行加总">3. 对某个公司同年的baladded进行加总</h3>
<p>以000001公司2000年为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;000001&#39;</span><span class="p">]</span>
<span class="n">ndf</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">]</span>
</code></pre></div><p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<pre><code>0   -65856130.0
1   -65856130.0
Name: baladded, dtype: float64
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<pre><code>-131712260.0
</code></pre>
<br>
<h3 id="for循环对所有的公司重复2-3操作">for循环对所有的公司重复2-3操作</h3>
<p>汇总代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">codes</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
<span class="k">for</span> <span class="n">code</span> <span class="ow">in</span> <span class="n">codes</span><span class="p">:</span>
    <span class="n">years</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">code</span><span class="p">][</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="n">years</span><span class="p">:</span>
        <span class="n">ndf</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">code</span><span class="p">]</span>
        <span class="n">baladded_sum</span> <span class="o">=</span> <span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">year</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">baladded_sum</span><span class="p">)</span>
        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
<span class="n">result_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;baladded_sum&#39;</span><span class="p">])</span>
<span class="n">result_df</span>
</code></pre></div><p><img loading="lazy" src="img/df4.png" alt=""  />
</p>
<br>
<p>保存结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">result_df</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="s1">&#39;result.xlsx&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Hugo框架建立个人网站</title>
      <link>https://textdata.cn/blog/hugo_website_test/</link>
      <pubDate>Thu, 13 May 2021 11:07:10 +0600</pubDate>
      
      <guid>/blog/hugo_website_test/</guid>
      <description>十几分钟建成自己的博客</description>
      <content:encoded><![CDATA[<p>在B站看到一位博主用Hugo制作个人博客的视频，感觉挺简单的，真的十几分钟就能看到云端出现自己的博客，当然了想让自己的博客更美观更炫酷，精雕细琢会花很多功夫。现在大家看到的效果，大邓用了一整天的时间，一点点修饰改动出来的。</p>

<figure >
    
        <img src="featured.jpg" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="1-安装hugo">1. 安装Hugo</h2>
<p>这里以<strong>Mac</strong>为例，安装Hugo，命令行输入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">brew</span> <span class="n">install</span> <span class="n">hugo</span>

</code></pre></div><p><br><br></p>
<h2 id="2-新建hugo项目">2. 新建Hugo项目</h2>
<p>切换到桌面(我喜欢把项目放到桌面), 命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">cd</span> <span class="n">desktop</span>

</code></pre></div><p>新建一个叫做<strong>MyBlog</strong>的hugo项目文件夹，命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">hugo</span> <span class="n">new</span> <span class="n">site</span> <span class="n">MyBlog</span>

</code></pre></div><p>现在可以在桌面看到一个MyBlog文件夹，接下来切换工作目录到MyBlog</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">cd</span> <span class="n">MyBlog</span>

</code></pre></div><p>记者目前我们的命令行处于MyBlog的根目录 , 接下来下载网站主题</p>
<p><br><br></p>
<h2 id="3-academic主题下载">3. Academic主题下载</h2>
<p>Hugo有很多主题，我选择的 <a href="https://themes.gohugo.io/academic/">https://themes.gohugo.io/academic/</a>，</p>
<p>在命令行逐行执行下方命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">cd</span> <span class="n">themes</span>

<span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">gcushen</span><span class="o">/</span><span class="n">hugo</span><span class="o">-</span><span class="n">academic</span><span class="o">.</span><span class="n">git</span>

</code></pre></div><p>我们可以在 <strong>MyBlog/themes</strong> 看到多了一个 <strong>hugo-academic文件夹，把hugo-academic改为academic</strong> ，现在网站已经建立好了</p>
<p>这里切换回项目根目录MyBlog</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">cd</span> <span class="o">..</span>

</code></pre></div><p>命令行执行pwd，检查一下目录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">pwd</span>

</code></pre></div><p>得到</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">电脑用户名</span><span class="o">/</span><span class="n">desktop</span><span class="o">/</span><span class="n">MyBlog</span>

</code></pre></div><br>
<br>
<h2 id="4-启动本地博客">4. 启动本地博客</h2>
<p>现在我们以academic主题为例，启动博客</p>
<p>命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">hugo</span> <span class="n">server</span> <span class="o">-</span><span class="n">t</span> <span class="n">academic</span> <span class="o">--</span><span class="n">buildDrafts</span>

</code></pre></div><p>补充: t的意思是主题</p>
<p>执行后，在命令行中会提示我们</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">1313</span><span class="o">/</span>

</code></pre></div><p>在浏览器中复制粘贴上方的链接，我们的Blog毛坯房搭建好了~</p>
<br>
<br>
<h2 id="5-在本地新建一篇文章">5. 在本地新建一篇文章</h2>
<p>依旧是MyBlog根目录，命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">hugo</span> <span class="n">new</span> <span class="n">post</span><span class="o">/</span><span class="n">first</span><span class="o">-</span><span class="n">article</span><span class="o">.</span><span class="n">md</span>

</code></pre></div><p>在MyBlog/content内新生成了一个post文件夹，并且post内有了一个first-article.md文件。</p>
<p>接下来就是在first-article.md内用markdown方式写内容即可。</p>
<p>我们测试一下现在的网站,继续回到MyBlog根目录，命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">hugo</span> <span class="n">server</span> <span class="o">-</span><span class="n">t</span> <span class="n">academic</span> <span class="o">--</span><span class="n">buildDrafts</span>

</code></pre></div><p>在浏览器中我们可以看到有First Ariticle的文章。</p>
<br>
<br>
<h2 id="6-将本地博客部署到服务器">6. 将本地博客部署到服务器</h2>
<p>在github新建一个仓库，仓库名命名方式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="o">&lt;</span><span class="n">你的github用户名</span><span class="o">&gt;.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span>

</code></pre></div><p>比如我的github账号名是thunderhit，那么仓库名为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">thunderhit</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span>

</code></pre></div><p>在MyBlog根目录，命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">hugo</span> <span class="o">--</span><span class="n">theme</span><span class="o">=</span><span class="n">academic</span> <span class="o">--</span><span class="n">baseUrl</span><span class="o">=</span><span class="s1">&#39;/&#39;</span> <span class="o">--</span><span class="n">buildDrafts</span>

</code></pre></div><p><strong>注意:</strong> 主题academic, 网站地址 <code>https://textdata.cn/ </code>，你们根据自己需要改成自己的仓库名</p>
<p>现在我们在MyBlog中多了一个public文件夹，其中有我们新建的文章内容。</p>
<p><strong>绑定public与github仓库</strong></p>
<p>命令行切换到public目录，初始化git</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">cd</span> <span class="n">public</span> 
<span class="n">git</span> <span class="n">init</span>
<span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s1">&#39;我的hugo博客第一次提交&#39;</span>

</code></pre></div><p><strong>把public与远程github仓库关联</strong></p>
<p>依次执行（大家的github地址略微不同，需要改动一下)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin</span> <span class="n">git</span><span class="nd">@github</span><span class="o">.</span><span class="n">com</span><span class="p">:</span><span class="n">hidadeng</span><span class="o">/</span><span class="n">textdata</span><span class="o">.</span><span class="n">cn</span><span class="o">.</span><span class="n">git</span>

<span class="n">git</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="n">origin</span> <span class="n">master</span>

</code></pre></div><p>命令行上传完毕后，在浏览器网址栏打开链接 <a href="https://textdata.cn/">https://textdata.cn/</a></p>
<p>就可以看到我们自己的博客了~</p>
<p><br><br></p>
<h2 id="更多">更多</h2>
<p>如果大家想学仔细学Hugo，推荐大家看B站<strong>Up主：ianianying</strong>的视频</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hi Research 定义自己的科研首页</title>
      <link>https://textdata.cn/blog/brower_startpage/</link>
      <pubDate>Wed, 12 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/brower_startpage/</guid>
      <description>丢弃庞杂丑陋的收藏夹， 打造简洁科研首页。</description>
      <content:encoded><![CDATA[<p>参考<a href="https://github.com/GreatDanton">GreatDanton</a> 项目，丢弃庞杂丑陋的浏览器收藏夹， 打造简洁科研浏览器首页。</p>
<p>每个人都可以自定义自己的浏览器首页，替换默认浏览器首页/起始页。 该项目可在任何现代浏览器上运行，只需将index.html设置为主页并添加自己的链接
到index.html</p>
<br>
<p><a href="https://hiresearch.github.io/">点击查看效果 </a></p>
<br>
<h2 id="一功能">一、功能</h2>
<ul>
<li>搜索(google)</li>
<li>日历(倒计时)</li>
<li>待办事项</li>
<li>支持DIY自己的首页</li>
</ul>
<br>
<h2 id="二截图">二、截图</h2>
<p>各位可根据自身科研或者工作需要，更改成自己的标签名，替换为自己需要的网站网址</p>

<figure >
    
        <img src="screenshots/%e7%a7%91%e7%a0%94%e7%95%8c%e9%9d%a2.png" width="100%" />
    
    
</figure>


<figure >
    
        <img src="screenshots/%e7%ae%a1%e7%90%86.png" width="100%" />
    
    
</figure>


<figure >
    
        <img src="screenshots/%e6%91%b8%e9%b1%bc.png" width="100%" />
    
    
</figure>

<p>日历, 在index.html中可以设置自己认为最最重要的日子</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;script&gt;
	// 显示日期时钟
	showClock();

	//在日历上显示倒计时
	countDown({&#34;y&#34;: 2022,
           	&#34;m&#34;: 6,
           	&#34;d&#34;: 1
           	}, &#34;Message when your countdown ends&#34;);
&lt;/script&gt;
</code></pre></div>
<figure >
    
        <img src="screenshots/calendar.png" width="100%" />
    
    
</figure>

<p>待办事项</p>

<figure >
    
        <img src="screenshots/notes.png" width="100%" />
    
    
</figure>

<br>
<h2 id="三添加链接">三、添加链接</h2>
<p>网站链接需要直接加到index.html的 <code>&lt;div class=&quot;slides-container&quot;</code>标签内，以学术生活如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;slide&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;科研&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;part&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span> 数据库 <span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;links&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://scholar.google.com/&#39;</span><span class="p">&gt;</span>Google Scholar<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://webofknowledge.com/&#39;</span><span class="p">&gt;</span> Web of Science <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://search.ebscohost.com/&#39;</span><span class="p">&gt;</span> EBSCO <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
	    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://scholar.cnki.net/&#39;</span><span class="p">&gt;</span> CNKI Scholar <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://www.ssrn.com/index.cfm/en/&#39;</span><span class="p">&gt;</span>SSRN<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://www.proquest.com/site/pqdd_unavailable.shtml&#39;</span><span class="p">&gt;</span> ProQuest <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://pubsonline.informs.org/&#39;</span><span class="p">&gt;</span> Informs <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://www.emerald.com/insight/&#39;</span><span class="p">&gt;</span> Emerald Insight <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;https://link.springer.com/&#39;</span><span class="p">&gt;</span> Springer <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;http://www.cnki.net/&#39;</span><span class="p">&gt;</span> 知网 <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
   <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div>
<figure >
    
        <img src="screenshots/%e6%95%b0%e6%8d%ae%e5%ba%93.png" width="100%" />
    
    
</figure>

<h2 id="四使用方法">四、使用方法</h2>
<ul>
<li>点击时钟，弹出日期框和倒计时信息。</li>
<li>搜索框支持<code>!command</code>搜索语法. 例如
<table>
<thead>
<tr>
<th>搜索框命令</th>
<th>目标网站</th>
<th>例子</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>!scholar</td>
<td>google scholar</td>
<td>!scholar python</td>
<td>在谷歌学术中搜<strong>python</strong>相关信息</td>
</tr>
<tr>
<td>!book</td>
<td>豆瓣读书</td>
<td>!book python</td>
<td>在豆瓣读书中搜<strong>python</strong>相关书籍信息</td>
</tr>
<tr>
<td>!movie</td>
<td>豆瓣电影</td>
<td>!movie 悬崖之上</td>
<td>在豆瓣电影中搜<strong>悬崖之上</strong>相关电影信息</td>
</tr>
<tr>
<td>!zhihu</td>
<td>知乎</td>
<td>!zhihu python</td>
<td>在知乎网站搜python相关信息</td>
</tr>
<tr>
<td>!youtube</td>
<td>youtube</td>
<td>!youtube python</td>
<td>在youtube搜索python相关视频</td>
</tr>
<tr>
<td>!taobao</td>
<td>淘宝</td>
<td>!taobao python</td>
<td>在淘宝搜python相关商品服务</td>
</tr>
<tr>
<td>!jd</td>
<td>京东</td>
<td>!jd python</td>
<td>在京东搜python相关商品服务</td>
</tr>
<tr>
<td>!bilibili</td>
<td>B站</td>
<td>!bilibili python</td>
<td>在B站搜索python相关视频</td>
</tr>
<tr>
<td>!github</td>
<td>github</td>
<td>!github python</td>
<td>在github上搜python相关仓库代码等信息</td>
</tr>
<tr>
<td>!mail</td>
<td>qq邮箱</td>
<td>!mail</td>
<td>默认打开qq邮箱</td>
</tr>
</tbody>
</table>
</li>
</ul>
<br>
<h2 id="五项目代码结构">五、项目代码结构</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">├── components
│   ├── calendar.js
│   ├── clock.js
│   ├── countdown.js
│   ├── notes.js
│   ├── search-box.js
│   └── slides.js
├── css
│   ├── main_min.css
│   └── main.scss
├── index.html 
</code></pre></div><ul>
<li>Components文件夹: 含有浏览器主页所需的所有组件js文件。
<ul>
<li><code>calendar.js</code> -&gt; 日历</li>
<li><code>clock.js</code> -&gt; 时钟</li>
<li><code>countdown.js</code> -&gt; 倒计时</li>
<li><code>notes.js</code> -&gt;待办事项todo list</li>
<li><code>search-box.js</code> -&gt; 主页搜索框</li>
<li><code>slides.js</code> -&gt; 页面滑动功能</li>
</ul>
</li>
<li><code>index.html</code> -&gt; 浏览器主页入口</li>
</ul>
<h2 id="六代码获取">六、代码获取</h2>
<ol>
<li><a href="hiresearch.github.io-main.zip">直接下载</a></li>
<li><a href="https://github.com/thunderhit">github更多代码</a></li>
</ol>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Jaal库~轻松绘制动态社交网络关系图</title>
      <link>https://textdata.cn/blog/jaal_social_network_visualization/</link>
      <pubDate>Sat, 08 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/jaal_social_network_visualization/</guid>
      <description>最简单好用的社交网络可视化包</description>
      <content:encoded><![CDATA[<p>Jaal是基于Dash和Visdcc构建的可交互的Python社交网络库。由于底层使用了dash，所以我们可以认为jaal更像是一个仪表盘。基于此，jaal也提供了多种处理网络数据的可选项，例如搜索、过滤、给节点（边）上色等。所有的操作，两三行代码即可搞定。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">jaal</span>
</code></pre></div><br>
<h2 id="一快速上手">一、快速上手</h2>
<p>本文准备了《权利的游戏》的节点nodes.csv和边edges.csv数据， 可以使用jaal的plot()函数绘制《权利的游戏》关系网络图。 必须有的字段，这里加粗了
nodes.csv数据含</p>
<ul>
<li><strong>from</strong>: 节点</li>
<li><strong>to</strong>:  节点</li>
<li>weight: 边权重</li>
<li>strenth:</li>
</ul>
<p>edges.csv数据</p>
<ul>
<li><strong>id</strong> 节点id，姓名</li>
<li>gender 节点的性别</li>
</ul>

<figure >
    
        <img src="img/%e6%9d%83%e5%88%a9%e7%9a%84%e6%b8%b8%e6%88%8f.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">jaal</span> <span class="kn">import</span> <span class="n">Jaal</span>

<span class="n">edge_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;edges.csv&#39;</span><span class="p">)</span>
<span class="n">node_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;nodes.csv&#39;</span><span class="p">)</span>
<span class="n">Jaal</span><span class="p">(</span><span class="n">edge_df</span><span class="p">,</span> <span class="n">node_df</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div><p>运行代码后，会生成一个本地服务链接，例如 http://127.0.0.1:8050/ ， 点击链接，浏览器就能看到</p>

<figure >
    
        <img src="img/%e7%bd%91%e7%bb%9c%e5%9b%be.png" width="800" />
    
    
</figure>

<br>
<h2 id="二jaal功能">二、Jaal功能</h2>
<ul>
<li><strong>设置面板</strong>  Jaal运行产生的浏览器界面左侧会有一个设置面板，可以对数据进行搜索、筛选、上色。</li>
<li><strong>搜索</strong> 可以高亮搜索到的节点</li>
<li><strong>过滤</strong> 支持pandas的query语法</li>
<li><strong>上色</strong> 基于类别，对节点、边进行上色。能最多支持20个类别，即节点、边数据允许有20种属性</li>
</ul>
<br>
<h2 id="三-案例">三、 案例</h2>
<h4 id="31-搜索">3.1 搜索</h4>
<p>第一个选项是搜索，我们可以在其中搜索图中的特定节点。 它支持在节点标签上逐字符搜索。 以下是我们尝试搜索“ Arya”的示例</p>

<figure >
    
        <img src="img/search.gif" width="800" />
    
    
</figure>

<h4 id="32-过滤">3.2 过滤</h4>
<p>接下来，我们进行过滤。 Jaal支持在节点和边要素上都进行过滤的选项。 为此，我们提供了单独的文本区域。 下面我们可以看到节点和边缘过滤查询的实时效果。</p>

<figure >
    
        <img src="img/filter.gif" width="800" />
    
    
</figure>

<h4 id="33-染色">3.3 染色</h4>
<p>最后，我们可能希望查看任何功能的整体分布，而不是进行过滤。 目前，Jaal通过提供根据任何分类特征为节点或边缘着色的选项来解决此问题。 我们可以在下面看到一个真实的例子。</p>

<figure >
    
        <img src="img/color.gif" width="800" />
    
    
</figure>

<br>
<h2 id="四-代码获取">四、 代码获取</h2>
<ol>
<li><a href="%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE.zip"><strong>直接下载</strong></a></li>
<li><a href="https://github.com/thunderhit/DaDengAndHisPython">github更多代码</a></li>
</ol>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Kaggle数据挖掘最佳实践</title>
      <link>https://textdata.cn/blog/kaggle_best_practice_of_data_mining/</link>
      <pubDate>Thu, 06 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/kaggle_best_practice_of_data_mining/</guid>
      <description>让数据挖掘更优雅</description>
      <content:encoded><![CDATA[<h2 id="代码获取">代码获取</h2>
<ol>
<li><a href="%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE.zip"><strong>直接下载</strong></a></li>
<li><a href="https://github.com/thunderhit/DaDengAndHisPython">github更多代码</a></li>
</ol>
<br>
<p>Kaggle是个很棒的地方,对于数据科学家和机器学习工程师来说，这是一个知识的金矿。可以在同一地点找到由本领域专家带来的高质量，高效，可重现，很棒的代码。自推出以来，它已经举办了164场比赛。这些比赛吸引了来自世界各地的专家和专家加入该平台。结果，每场比赛以及Kaggle提供的大量开源数据集都有许多高质量的笔记本和脚本。</p>
<p>在数据科学之旅的开始，我将去Kaggle查找数据集以练习我的技能。每当我查看其他内核时，我都会对代码的复杂性感到不知所措，然后马上回避。</p>
<p>但是现在，我发现自己花费了大量时间阅读其他笔记本并提交竞赛文件。有时候，有些东西值得您度过整个周末。有时，我会发现简单但致命的有效代码技巧和最佳实践，这些技巧和最佳实践只能通过观察其他专家来学习。</p>
<p>在整个系列中，您会发现我在典型的数据科学工作流程中可能有用的任何内容，包括与通用库相关的代码快捷方式，Kaggle的顶级行业专家遵循的最佳实践等，这些都是我在学习过程中学到的。</p>
<h2 id="1-只绘制相关系数矩阵的下三角部分">1. 只绘制相关系数矩阵的下三角部分</h2>
<p>好的相关矩阵可以说明数据集中目标变量之间的相关性</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/melbourne_housing_raw.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>

<span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">diverging_palette</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">75</span><span class="p">,</span> <span class="n">l</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span>
                             <span class="n">n</span><span class="o">=</span><span class="mi">9</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="s2">&#34;light&#34;</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">corr</span><span class="p">(),</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
             <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;.2f&#39;</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/cor1.png" width="800" />
    
    
</figure>

<p>但上图中，数据集中存在大量的特征，导致相似矩阵过于庞大，让人看起来不知所措。</p>
<p>相关矩阵大部分沿主对角线对称，因此它们包含重复数据。 同样，对角线本身也没有用。 让我们看看如何只绘制有用的一半：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="c1"># 计算相关系数</span>
<span class="n">matrix</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">corr</span><span class="p">()</span>

<span class="c1"># 创建遮罩（为了只显示下三角）</span>
<span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">triu</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">))</span>

<span class="c1"># 定制调色板</span>
<span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">diverging_palette</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">75</span><span class="p">,</span> <span class="n">l</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span>
                             <span class="n">n</span><span class="o">=</span><span class="mi">9</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="s2">&#34;light&#34;</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># 设定图片尺寸</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>

<span class="c1"># 绘制相似矩阵热力图</span>
<span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
             <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;.2f&#39;</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/cor2.png" width="800" />
    
    
</figure>

<p>由此产生的可视化图更容易解释并且没有视觉干扰干扰。</p>
<ul>
<li>首先，我们使用DataFrame的.corr方法构建相关矩阵。</li>
<li>然后，我们使用dtype设置为bool的np.ones_like函数来创建一个True矩阵，其形状与DataFrame相同：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div><pre><code>array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
</code></pre></div><pre><code>array([[ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [ True,  True,  True,  True]])
</code></pre>
<p>将布尔方阵传递给Numpy的.triu函数，该函数将返回一个二维布尔蒙版，其中包含矩阵下三角的False值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">np</span><span class="o">.</span><span class="n">triu</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">))</span>
</code></pre></div><pre><code>array([[ True,  True,  True,  True],
       [False,  True,  True,  True],
       [False, False,  True,  True],
       [False, False, False,  True]])
</code></pre>
<p>然后，我们可以将其传递给Seaborn的heatmap函数，以根据此蒙版对矩阵进行可视化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
               <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;.2f&#39;</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="2-value_counts考虑缺失值">2. value_counts考虑缺失值</h2>
<p>使用value_counts时，可将dropna设置为False来查看任何列中缺失值的比例。通过确定缺失值的比例，可以决定是否丢弃含有缺失值的记录。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#字段CouncilArea的数据分布情况</span>
<span class="n">df</span><span class="o">.</span><span class="n">CouncilArea</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">dropna</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><pre><code>Boroondara City Council    0.105431
Darebin City Council       0.081791
Moreland City Council      0.060877
Glen Eira City Council     0.057549
Melbourne City Council     0.056000
Name: CouncilArea, dtype: float64
</code></pre>
<p>但是，如果要查看<strong>所有列</strong>中缺失值的比例，则value_counts不是最佳选择。 相反，您可以执行以下操作：</p>
<ol>
<li>
<p>首先，通过将缺失值的数量除以DataFrame的长度来找到比例。</p>
</li>
<li>
<p>然后，您可以过滤掉0％的列，即i。 e。 只选择缺少值的列。</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">missing_props</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

<span class="n">missing_props</span><span class="p">[</span><span class="n">missing_props</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><pre><code>BuildingArea     0.605761
YearBuilt        0.553863
Landsize         0.338813
Car              0.250394
Bathroom         0.235993
Bedroom2         0.235735
Longtitude       0.228821
Lattitude        0.228821
Price            0.218321
Propertycount    0.000086
Regionname       0.000086
CouncilArea      0.000086
Postcode         0.000029
Distance         0.000029
dtype: float64
</code></pre>
<br>
<h2 id="3-使用pandas的styler">3. 使用Pandas的Styler</h2>
<p>我们中的许多人从未意识到pandas的巨大潜力。pandas的一个被低估且经常被忽视的功能是其<strong>对DataFrames进行样式设置</strong>的能力。 使用pandas DataFrames的.style属性，可以将条件设计和样式应用于它们。</p>
<p>作为第一个示例，让我们看看如何根据每个单元格的值来更改背景颜色：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">diamonds</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/diamonds.csv&#39;</span><span class="p">)</span>
<span class="n">diamonds</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/diamonds.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">diamonds</span><span class="o">.</span><span class="n">cut</span><span class="p">,</span> <span class="n">diamonds</span><span class="o">.</span><span class="n">clarity</span><span class="p">)</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">background_gradient</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;rocket_r&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/heat1.png" width="800" />
    
    
</figure>

<p>几乎没有使用Seaborn的热图功能的热图。 在这里，我们使用pd.crosstab对钻石切割(cut)和净度(clarity)的每种组合进行计数。</p>
<p>将.style.background_gradient与调色板配合使用，您可以轻松地发现哪种组合出现得最多。 仅从上面的DataFrame中，我们可以看到大多数钻石都是“ VS2”净度类型。</p>
<p>我们甚至可以通过在交叉表中找到每种钻石切割cut和净度clarity组合的<strong>平均价格</strong>来进一步做到这一点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">diamonds</span><span class="o">.</span><span class="n">cut</span><span class="p">,</span> <span class="n">diamonds</span><span class="o">.</span><span class="n">clarity</span><span class="p">,</span> <span class="n">aggfunc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="n">diamonds</span><span class="o">.</span><span class="n">price</span><span class="p">)</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">background_gradient</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;rocket_r&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/heat2.png" width="800" />
    
    
</figure>

<p>通过将.format方法与格式字符串{：.2f}链接起来，我们指定了2个浮点数的精度。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">agg_prices</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">diamonds</span><span class="o">.</span><span class="n">cut</span><span class="p">,</span> <span class="n">diamonds</span><span class="o">.</span><span class="n">clarity</span><span class="p">,</span> <span class="n">aggfunc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="n">diamonds</span><span class="o">.</span><span class="n">price</span><span class="p">)</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">background_gradient</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;rocket_r&#39;</span><span class="p">)</span>

<span class="n">agg_prices</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:.2f}</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/heat3.png" width="800" />
    
    
</figure>

<br>
<h2 id="4-matplotlib默认全局设置">4. matplotlib默认全局设置</h2>
<p>在进行<strong>探索性数据分析</strong>时，您可能想对所有绘图应用自定义调色板，对刻度标签使用更大的字体，更改图例的位置，使用固定的图形大小等。</p>
<p>对绘图自定义参数的更改是一项非常无聊，重复且耗时的任务。 幸运的是，您可以使用Matplotlib的rcParams为绘图设置全局配置。</p>
<p>rcParams只是一个普通的Python字典，其中包含Matplotlib的默认设置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">rcParams</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="n">rcParams</span>
</code></pre></div><pre><code>RcParams({'_internal.classic_mode': False,
          'agg.path.chunksize': 0,
          'animation.avconv_args': [],
          'animation.avconv_path': 'avconv',
          'animation.bitrate': -1,
          'animation.codec': 'h264',
          'animation.convert_args': [],
          'animation.convert_path': 'convert',
          'animation.embed_limit': 20.0,
          'animation.ffmpeg_args': [],
          'animation.ffmpeg_path': 'ffmpeg',
          'animation.frame_format': 'png',
          'animation.html': 'none',
          'animation.html_args': [],
          'animation.writer': 'ffmpeg',
          'axes.autolimit_mode': 'data',
          'axes.axisbelow': 'line',
          'axes.edgecolor': 'black',
          'axes.facecolor': 'white',
          'axes.formatter.limits': [-7, 7],
          'axes.formatter.min_exponent': 0,
          'axes.formatter.offset_threshold': 4,
          'axes.formatter.use_locale': False,
          'axes.formatter.use_mathtext': False,
          'axes.formatter.useoffset': True,
          'axes.grid': False,
          'axes.grid.axis': 'both',
          'axes.grid.which': 'major',
          'axes.labelcolor': 'black',
          'axes.labelpad': 4.0,
          'axes.labelsize': 'medium',
          'axes.labelweight': 'normal',
          'axes.linewidth': 0.8,
          'axes.prop_cycle': cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']),
          'axes.spines.bottom': True,
          'axes.spines.left': True,
          'axes.spines.right': True,
          'axes.spines.top': True,
          'axes.titlepad': 6.0,
          'axes.titlesize': 'large',
          'axes.titleweight': 'normal',
          'axes.unicode_minus': True,
          'axes.xmargin': 0.05,
          'axes.ymargin': 0.05,
          'axes3d.grid': True,
          'backend': 'module://ipykernel.pylab.backend_inline',
          'backend_fallback': True,
          'boxplot.bootstrap': None,
          'boxplot.boxprops.color': 'black',
          'boxplot.boxprops.linestyle': '-',
          'boxplot.boxprops.linewidth': 1.0,
          'boxplot.capprops.color': 'black',
          'boxplot.capprops.linestyle': '-',
          'boxplot.capprops.linewidth': 1.0,
          'boxplot.flierprops.color': 'black',
          'boxplot.flierprops.linestyle': 'none',
          'boxplot.flierprops.linewidth': 1.0,
          'boxplot.flierprops.marker': 'o',
          'boxplot.flierprops.markeredgecolor': 'black',
          'boxplot.flierprops.markeredgewidth': 1.0,
          'boxplot.flierprops.markerfacecolor': 'none',
          'boxplot.flierprops.markersize': 6.0,
          'boxplot.meanline': False,
          'boxplot.meanprops.color': 'C2',
          'boxplot.meanprops.linestyle': '--',
          'boxplot.meanprops.linewidth': 1.0,
          'boxplot.meanprops.marker': '^',
          'boxplot.meanprops.markeredgecolor': 'C2',
          'boxplot.meanprops.markerfacecolor': 'C2',
          'boxplot.meanprops.markersize': 6.0,
          'boxplot.medianprops.color': 'C1',
          'boxplot.medianprops.linestyle': '-',
          'boxplot.medianprops.linewidth': 1.0,
          'boxplot.notch': False,
          'boxplot.patchartist': False,
          'boxplot.showbox': True,
          'boxplot.showcaps': True,
          'boxplot.showfliers': True,
          'boxplot.showmeans': False,
          'boxplot.vertical': True,
          'boxplot.whiskerprops.color': 'black',
          'boxplot.whiskerprops.linestyle': '-',
          'boxplot.whiskerprops.linewidth': 1.0,
          'boxplot.whiskers': 1.5,
          'contour.corner_mask': True,
          'contour.negative_linestyle': 'dashed',
          'datapath': '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data',
          'date.autoformatter.day': '%Y-%m-%d',
          'date.autoformatter.hour': '%m-%d %H',
          'date.autoformatter.microsecond': '%M:%S.%f',
          'date.autoformatter.minute': '%d %H:%M',
          'date.autoformatter.month': '%Y-%m',
          'date.autoformatter.second': '%H:%M:%S',
          'date.autoformatter.year': '%Y',
          'docstring.hardcopy': False,
          'errorbar.capsize': 0.0,
          'examples.directory': '',
          'figure.autolayout': False,
          'figure.constrained_layout.h_pad': 0.04167,
          'figure.constrained_layout.hspace': 0.02,
          'figure.constrained_layout.use': False,
          'figure.constrained_layout.w_pad': 0.04167,
          'figure.constrained_layout.wspace': 0.02,
          'figure.dpi': 72.0,
          'figure.edgecolor': (1, 1, 1, 0),
          'figure.facecolor': (1, 1, 1, 0),
          'figure.figsize': [6.0, 4.0],
          'figure.frameon': True,
          'figure.max_open_warning': 20,
          'figure.subplot.bottom': 0.125,
          'figure.subplot.hspace': 0.2,
          'figure.subplot.left': 0.125,
          'figure.subplot.right': 0.9,
          'figure.subplot.top': 0.88,
          'figure.subplot.wspace': 0.2,
          'figure.titlesize': 'large',
          'figure.titleweight': 'normal',
          'font.cursive': ['Apple Chancery',
                           'Textile',
                           'Zapf Chancery',
                           'Sand',
                           'Script MT',
                           'Felipa',
                           'cursive'],
          'font.family': ['sans-serif'],
          'font.fantasy': ['Comic Sans MS',
                           'Chicago',
                           'Charcoal',
                           'Impact',
                           'Western',
                           'Humor Sans',
                           'xkcd',
                           'fantasy'],
          'font.monospace': ['DejaVu Sans Mono',
                             'Bitstream Vera Sans Mono',
                             'Computer Modern Typewriter',
                             'Andale Mono',
                             'Nimbus Mono L',
                             'Courier New',
                             'Courier',
                             'Fixed',
                             'Terminal',
                             'monospace'],
          'font.sans-serif': ['DejaVu Sans',
                              'Bitstream Vera Sans',
                              'Computer Modern Sans Serif',
                              'Lucida Grande',
                              'Verdana',
                              'Geneva',
                              'Lucid',
                              'Arial',
                              'Helvetica',
                              'Avant Garde',
                              'sans-serif'],
          'font.serif': ['DejaVu Serif',
                         'Bitstream Vera Serif',
                         'Computer Modern Roman',
                         'New Century Schoolbook',
                         'Century Schoolbook L',
                         'Utopia',
                         'ITC Bookman',
                         'Bookman',
                         'Nimbus Roman No9 L',
                         'Times New Roman',
                         'Times',
                         'Palatino',
                         'Charter',
                         'serif'],
          'font.size': 10.0,
          'font.stretch': 'normal',
          'font.style': 'normal',
          'font.variant': 'normal',
          'font.weight': 'normal',
          'grid.alpha': 1.0,
          'grid.color': '#b0b0b0',
          'grid.linestyle': '-',
          'grid.linewidth': 0.8,
          'hatch.color': 'black',
          'hatch.linewidth': 1.0,
          'hist.bins': 10,
          'image.aspect': 'equal',
          'image.cmap': 'viridis',
          'image.composite_image': True,
          'image.interpolation': 'nearest',
          'image.lut': 256,
          'image.origin': 'upper',
          'image.resample': True,
          'interactive': True,
          'keymap.all_axes': ['a'],
          'keymap.back': ['left', 'c', 'backspace', 'MouseButton.BACK'],
          'keymap.copy': ['ctrl+c', 'cmd+c'],
          'keymap.forward': ['right', 'v', 'MouseButton.FORWARD'],
          'keymap.fullscreen': ['f', 'ctrl+f'],
          'keymap.grid': ['g'],
          'keymap.grid_minor': ['G'],
          'keymap.help': ['f1'],
          'keymap.home': ['h', 'r', 'home'],
          'keymap.pan': ['p'],
          'keymap.quit': ['ctrl+w', 'cmd+w', 'q'],
          'keymap.quit_all': ['W', 'cmd+W', 'Q'],
          'keymap.save': ['s', 'ctrl+s'],
          'keymap.xscale': ['k', 'L'],
          'keymap.yscale': ['l'],
          'keymap.zoom': ['o'],
          'legend.borderaxespad': 0.5,
          'legend.borderpad': 0.4,
          'legend.columnspacing': 2.0,
          'legend.edgecolor': '0.8',
          'legend.facecolor': 'inherit',
          'legend.fancybox': True,
          'legend.fontsize': 'medium',
          'legend.framealpha': 0.8,
          'legend.frameon': True,
          'legend.handleheight': 0.7,
          'legend.handlelength': 2.0,
          'legend.handletextpad': 0.8,
          'legend.labelspacing': 0.5,
          'legend.loc': 'best',
          'legend.markerscale': 1.0,
          'legend.numpoints': 1,
          'legend.scatterpoints': 1,
          'legend.shadow': False,
          'legend.title_fontsize': None,
          'lines.antialiased': True,
          'lines.color': 'C0',
          'lines.dash_capstyle': 'butt',
          'lines.dash_joinstyle': 'round',
          'lines.dashdot_pattern': [6.4, 1.6, 1.0, 1.6],
          'lines.dashed_pattern': [3.7, 1.6],
          'lines.dotted_pattern': [1.0, 1.65],
          'lines.linestyle': '-',
          'lines.linewidth': 1.5,
          'lines.marker': 'None',
          'lines.markeredgecolor': 'auto',
          'lines.markeredgewidth': 1.0,
          'lines.markerfacecolor': 'auto',
          'lines.markersize': 6.0,
          'lines.scale_dashes': True,
          'lines.solid_capstyle': 'projecting',
          'lines.solid_joinstyle': 'round',
          'markers.fillstyle': 'full',
          'mathtext.bf': 'sans:bold',
          'mathtext.cal': 'cursive',
          'mathtext.default': 'it',
          'mathtext.fallback_to_cm': True,
          'mathtext.fontset': 'dejavusans',
          'mathtext.it': 'sans:italic',
          'mathtext.rm': 'sans',
          'mathtext.sf': 'sans',
          'mathtext.tt': 'monospace',
          'patch.antialiased': True,
          'patch.edgecolor': 'black',
          'patch.facecolor': 'C0',
          'patch.force_edgecolor': False,
          'patch.linewidth': 1.0,
          'path.effects': [],
          'path.simplify': True,
          'path.simplify_threshold': 0.1111111111111111,
          'path.sketch': None,
          'path.snap': True,
          'pdf.compression': 6,
          'pdf.fonttype': 3,
          'pdf.inheritcolor': False,
          'pdf.use14corefonts': False,
          'pgf.preamble': '',
          'pgf.rcfonts': True,
          'pgf.texsystem': 'xelatex',
          'polaraxes.grid': True,
          'ps.distiller.res': 6000,
          'ps.fonttype': 3,
          'ps.papersize': 'letter',
          'ps.useafm': False,
          'ps.usedistiller': False,
          'savefig.bbox': None,
          'savefig.directory': '~',
          'savefig.dpi': 'figure',
          'savefig.edgecolor': 'white',
          'savefig.facecolor': 'white',
          'savefig.format': 'png',
          'savefig.frameon': True,
          'savefig.jpeg_quality': 95,
          'savefig.orientation': 'portrait',
          'savefig.pad_inches': 0.1,
          'savefig.transparent': False,
          'scatter.edgecolors': 'face',
          'scatter.marker': 'o',
          'svg.fonttype': 'path',
          'svg.hashsalt': None,
          'svg.image_inline': True,
          'text.antialiased': True,
          'text.color': 'black',
          'text.hinting': 'auto',
          'text.hinting_factor': 8,
          'text.latex.preamble': '',
          'text.latex.preview': False,
          'text.latex.unicode': True,
          'text.usetex': False,
          'timezone': 'UTC',
          'tk.window_focus': False,
          'toolbar': 'toolbar2',
          'verbose.fileo': 'sys.stdout',
          'verbose.level': 'silent',
          'webagg.address': '127.0.0.1',
          'webagg.open_in_browser': True,
          'webagg.port': 8988,
          'webagg.port_retries': 50,
          'xtick.alignment': 'center',
          'xtick.bottom': True,
          'xtick.color': 'black',
          'xtick.direction': 'out',
          'xtick.labelbottom': True,
          'xtick.labelsize': 'medium',
          'xtick.labeltop': False,
          'xtick.major.bottom': True,
          'xtick.major.pad': 3.5,
          'xtick.major.size': 3.5,
          'xtick.major.top': True,
          'xtick.major.width': 0.8,
          'xtick.minor.bottom': True,
          'xtick.minor.pad': 3.4,
          'xtick.minor.size': 2.0,
          'xtick.minor.top': True,
          'xtick.minor.visible': False,
          'xtick.minor.width': 0.6,
          'xtick.top': False,
          'ytick.alignment': 'center_baseline',
          'ytick.color': 'black',
          'ytick.direction': 'out',
          'ytick.labelleft': True,
          'ytick.labelright': False,
          'ytick.labelsize': 'medium',
          'ytick.left': True,
          'ytick.major.left': True,
          'ytick.major.pad': 3.5,
          'ytick.major.right': True,
          'ytick.major.size': 3.5,
          'ytick.major.width': 0.8,
          'ytick.minor.left': True,
          'ytick.minor.pad': 3.4,
          'ytick.minor.right': True,
          'ytick.minor.size': 2.0,
          'ytick.minor.visible': False,
          'ytick.minor.width': 0.6,
          'ytick.right': False})
</code></pre>
<p>您可以调整每个图的任意参数设置，一般的图像设置如固定图形大小，刻度标签字体大小以及其他一些参数。</p>
<p>通过这种设置，可以减少很多重复的代码量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 去掉顶部和右侧的线条Remove top and right spines</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;axes.spines.top&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;axes.spines.right&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>

<span class="c1"># 设置图的尺寸Set fixed figure size</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.figsize&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="c1"># 设置图片像素清晰度 Set dots per inch to 300, very high quality images</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.dpi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">300</span>

<span class="c1"># 设置自动调整布局Enable autolayout</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.autolayout&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>

<span class="c1"># 设置全局字号Set global fontsize</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;font.style&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">16</span>

<span class="c1"># 刻度字号Fontsize of ticklabels</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;xtick.labelsize&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;ytick.labelsize&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div><br>
<h2 id="5-pandas全局设置">5. Pandas全局设置</h2>
<p>就像Matplotlib一样，pandas具有可以使用的全局设置。 当然，它们大多数与显示选项有关。</p>
<ul>
<li><strong>get_option()</strong> -  获取pandas单个选项</li>
<li><strong>set_option()</strong> — 设置pandas单个选项</li>
<li><strong>reset_option()</strong> — 重置pandas选项值</li>
</ul>
<p>我更喜欢显示所有的列，lets go</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">set_option</span><span class="p">(</span><span class="s1">&#39;display.max_columns&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="%20img/df1.png" width="800" />
    
    
</figure>

<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python是一种语言</title>
      <link>https://textdata.cn/blog/basic-01-python-is-a-language/</link>
      <pubDate>Thu, 22 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-01-python-is-a-language/</guid>
      <description>Python号称是最说人话的编程语言，能让我们以最易理解的方式实现想法，构建代码</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=4"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h3 id="python语法入门-课件下载">Python语法入门-课件下载</h3>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264 </b></font></p>
<br>
<p>学Python一段时间后，都会听到一句“Life is short, so we learn Python! ”，恭喜你选择Python这门强大而有趣的语言。</p>
<br>
<h3 id="输出数字a的绝对数">输出数字a的绝对数</h3>
<p>在学习代码之前，我给大家看一段话</p>
<blockquote>
<p>There is such a number a, if a is greater than or equal to 0, we will print a; if a is less than 0, we will print -a</p>
</blockquote>
<p>相信大家一看就明白了这是求某数的绝对值方法的英文描述。下面我们用精炼的Python语言表示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">50</span>

<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="o">-</span><span class="n">a</span><span class="p">)</span>
</code></pre></div><pre><code>50
</code></pre>
<p><strong>Python号称是最说</strong>人话<strong>的编程语言，以最接近人类理解的方式构建代码。</strong></p>
<br>
<h3 id="python与英语对比">Python与英语对比</h3>
<p>从上面的例子中，我们已经知道了Python和英语一样都是一种语言，学习语言就需要学习基本的知识点，包括背单词和了解语法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">英语</th>
<th style="text-align:left">Python</th>
<th style="text-align:left">例如</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>单词</strong></td>
<td style="text-align:left">数据类型</td>
<td style="text-align:left">列表、字符串、字典等</td>
</tr>
<tr>
<td style="text-align:left"><strong>语法</strong></td>
<td style="text-align:left">逻辑语句</td>
<td style="text-align:left">if条件判读语句、for循环语句等</td>
</tr>
</tbody>
</table>
<br>
<h3 id="每天积累一点点">每天积累一点点</h3>
<p>本部分非必须，仅仅为了展示python也可以作图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#mac</span>
<span class="c1">#!pip3 install matplotlib</span>


<span class="c1">#win</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">matplotlib</span>
</code></pre></div><pre><code>Looking in indexes: https://mirrors.aliyun.com/pypi/simple/
Requirement already satisfied: matplotlib in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (3.2.1)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (2.4.7)
Requirement already satisfied: cycler&gt;=0.10 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (0.10.0)
Requirement already satisfied: numpy&gt;=1.11 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (1.18.2)
Requirement already satisfied: kiwisolver&gt;=1.0.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (1.2.0)
Requirement already satisfied: python-dateutil&gt;=2.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (2.8.1)
Requirement already satisfied: six in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from cycler&gt;=0.10-&gt;matplotlib) (1.14.0)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="n">ability</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">scale</span> <span class="o">=</span> <span class="mf">1.01</span>
<span class="n">records</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">days</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">365</span><span class="p">)</span>
<span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="n">days</span><span class="p">:</span>
    <span class="n">ability</span> <span class="o">=</span> <span class="n">ability</span><span class="o">*</span><span class="n">scale</span>
    <span class="n">records</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ability</span><span class="p">)</span>
    
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">days</span><span class="p">,</span> <span class="n">records</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Be better everyday!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>Text(0.5, 1.0, 'Be better everyday!')
</code></pre>

<figure >
    
        <img src="output_8_1.png" />
    
    
</figure>

<br>
<h3 id="python是面向对象的编程语言">Python是面向对象的编程语言</h3>
<p>面向对象是最难理解的部分，这里大家只需要记住</p>
<ol>
<li>类型和对象是紧密绑定的，说对象就是在说类型。</li>
<li>不同的类型有不同的功能，都是为了更高效的实现人类需求或者数据分析需求</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">实例(对象)</th>
<th style="text-align:left">实例(对象)</th>
<th style="text-align:left">方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">猪</td>
<td style="text-align:left">村东头老王家的猪</td>
<td style="text-align:left">把猪把粮食变成肉</td>
<td style="text-align:left"><code>猪.产肉</code></td>
</tr>
<tr>
<td style="text-align:left">牛</td>
<td style="text-align:left">村东头老张家的耕牛</td>
<td style="text-align:left">把粮食变成畜力</td>
<td style="text-align:left"><code>牛.耕地</code></td>
</tr>
<tr>
<td style="text-align:left">列表</td>
<td style="text-align:left"><code>hobbies = ['跑步',  '乒乓球'， '篮球'，'篮球']</code></td>
<td style="text-align:left">统计某群体爱好的分布, 查看各爱好的人数</td>
<td style="text-align:left"><code>hobbies.count('篮球')</code></td>
</tr>
<tr>
<td style="text-align:left">字符串</td>
<td style="text-align:left"><code>str1 = &quot;Hello，World!&quot;</code></td>
<td style="text-align:left">将文本内容由World更改为Python</td>
<td style="text-align:left"><code>str1.replace('World', 'Python')</code></td>
</tr>
<tr>
<td style="text-align:left">字典</td>
<td style="text-align:left"><code>grade = {'David':98, 'Mary':88,...}</code></td>
<td style="text-align:left">方便数据检索</td>
<td style="text-align:left"><code>grade.get('David')</code></td>
</tr>
<tr>
<td style="text-align:left">&hellip;</td>
<td style="text-align:left">&hellip;</td>
<td style="text-align:left">&hellip;</td>
<td style="text-align:left">&hellip;</td>
</tr>
</tbody>
</table>
<br>
<h3 id="python中的数据类型">Python中的数据类型</h3>
<p>不同的数据类型适合处理不同的数据，有不同的应用场景。</p>
<table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">数字</td>
<td><code>a = 5</code></td>
</tr>
<tr>
<td style="text-align:left">字符串</td>
<td><code>my_str = &quot;abcdefg&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">列表</td>
<td><code>my_list = [1, 2, 3]</code></td>
</tr>
<tr>
<td style="text-align:left">元组</td>
<td><code>my_tuple = (1, 2, 3)</code></td>
</tr>
<tr>
<td style="text-align:left">字典</td>
<td><code>my_dict = {'David': 25, 'Mark':30}</code></td>
</tr>
<tr>
<td style="text-align:left">空值</td>
<td><code>None</code></td>
</tr>
</tbody>
</table>
<br>
<h3 id="了解课程">了解课程</h3>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Win电脑Python环境配置</title>
      <link>https://textdata.cn/blog/basic-02-win-settings/</link>
      <pubDate>Mon, 19 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-02-win-settings/</guid>
      <description>照着视频配置Windows</description>
      <content:encoded><![CDATA[<h1 id="python语法入门-课件下载">Python语法入门-课件下载</h1>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<h1 id="win环境配置">Win环境配置</h1>
<p><strong>注意：</strong></p>
<ol>
<li>Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。</li>
<li>如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置。</li>
</ol>
<br>
<h2 id="typora软件下载">Typora软件下载</h2>
<p><font color="blue" weight="bold"><b>链接:https://pan.baidu.com/s/17yNfZbkNbnYsBko4eai0Ig  密码:ceve</b></font></p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="jupyter使用方法">Jupyter使用方法</h2>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=3"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="一python安装">一、Python安装</h2>
<p>anaconda官网  <a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p>
<h3 id="注意">注意</h3>
<ul>
<li>慢一点按照视频操作</li>
<li>勾选 <strong>Add Anaconda 3 to the system PATH environment variable</strong></li>
<li>勾选 <strong>Register Anaconda 3 as the system 3.9</strong></li>
</ul>
<p><br><br></p>
<h2 id="二pip配置">二、pip配置</h2>
<p>pip是python的命令行安装工具，可以帮我们安装第三方库。</p>
<h3 id="21-更改pip镜像">2.1 更改pip镜像</h3>
<p>为了保证安装的速度和成功率，命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 
</code></pre></div><h3 id="22-使用方法">2.2 使用方法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install packagename
</code></pre></div><h3 id="23-第三方库安装方法">2.3 第三方库安装方法</h3>
<ol>
<li>
<p>pip安装法</p>
<ul>
<li>单个库的安装，命令行执行
<ul>
<li><code>pip3 install 库的名字</code></li>
</ul>
</li>
<li>多个库的安装， 命令行执行
<ul>
<li><code>pip3 install -r requirements.txt</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>pypi本地安装</p>
<ol>
<li>
<p>在https://pypi.org/ 搜库，点进去</p>
</li>
<li>
<p>找Download files，下载whl或压缩文件到桌面。例如文件名 xxx.whl</p>
</li>
<li>
<p>命令行依次执行</p>
<ul>
<li>
<p><code> cd desktop</code></p>
</li>
<li>
<p><code>pip3 install xxx.whl</code></p>
</li>
</ul>
</li>
</ol>
</li>
<li>
<p>github本地安装（如github项目中存在setup.py文件，可以安装使用）</p>
</li>
<li>
<p>下载github项目至桌面，解压</p>
</li>
<li>
<p>命令依次执行
- <code>cd desktop</code>
- <code>python3 setup.py install</code></p>
</li>
</ol>
<p><br><br></p>
<h2 id="三jupyter-notebook">三、Jupyter notebook</h2>
<h3 id="31-安装">3.1 安装</h3>
<p>命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install jupyter
</code></pre></div><h3 id="32-调用">3.2 调用</h3>
<p>命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">jupyter notebook
</code></pre></div><h3 id="33-常用快捷键">3.3 常用快捷键</h3>
<table>
<thead>
<tr>
<th>jupyter内快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ESC+A（ESC+B）</td>
<td>当前单元格上(下)新建一个新的Cell</td>
</tr>
<tr>
<td>D+D</td>
<td>删除当前单元格</td>
</tr>
<tr>
<td>Shift+Enter</td>
<td>执行单元格内的Python代码</td>
</tr>
<tr>
<td>ESC+M</td>
<td>单元格由代码模式转为标记模式</td>
</tr>
</tbody>
</table>
<p><strong>个人建议：</strong> Markdown语法特别好用，强烈建议学习，顺便安装一个Typora软件。</p>
<p><br><br></p>
<h2 id="四tips">四、Tips</h2>
<p>环境配置太难，而且有时候电脑还会出现一些视频里出现不了的问题。这时不妨在<strong>淘宝搜python环境配置</strong>，寻找一对一远程协助</p>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h1 id="了解课程">了解课程</h1>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Mac电脑Python环境配置</title>
      <link>https://textdata.cn/blog/basic-03-mac-settings/</link>
      <pubDate>Mon, 19 Apr 2021 16:39:10 +0600</pubDate>
      
      <guid>/blog/basic-03-mac-settings/</guid>
      <description>照着视频配置Mac</description>
      <content:encoded><![CDATA[<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<h2 id="mac环境配置">Mac环境配置</h2>
<p><strong>注意：</strong></p>
<ol>
<li>Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。</li>
<li>如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置。</li>
</ol>
<br>
<h2 id="typora软件下载">Typora软件下载</h2>
<p><font color="blue" weight="bold"><b>链接:https://pan.baidu.com/s/17yNfZbkNbnYsBko4eai0Ig  密码:ceve</b></font></p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=2"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="jupyter使用方法">Jupyter使用方法</h2>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=3"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<br>
<h2 id="一python安装">一、Python安装</h2>
<p>anaconda官网  <a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p>
<p><strong>mac自带python2，为了与python2区别，凡是在命令行中使用pip和python，我们都要加上3。</strong></p>
<p>安装成功的标准是<strong>命令行可以调用python3</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">$ python3
</code></pre></div><p><br><br></p>
<h3 id="命令行打开的方法">命令行打开的方法</h3>
<p><strong>command+空格</strong> 启动  <strong>聚焦搜索Spotlight</strong>，再输入terminal</p>
<p><br><br></p>
<h2 id="二pip3设置">二、pip3设置</h2>
<p>pip3是python的命令行安装工具，可以帮我们安装第三方库。</p>
<h3 id="21-更改pip3镜像">2.1 更改pip3镜像</h3>
<p>为了保证安装的速度和成功率，命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/
</code></pre></div><h3 id="22-使用方法">2.2 使用方法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install packagename
</code></pre></div><h3 id="23-第三方库安装方法">2.3 第三方库安装方法</h3>
<ol>
<li>
<p>pip安装法</p>
<ul>
<li>单个库的安装，命令行执行
<ul>
<li><code>pip3 install 库的名字</code></li>
</ul>
</li>
<li>多个库的安装， 命令行执行
<ul>
<li><code>pip3 install -r requirements.txt</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>pypi本地安装</p>
<ol>
<li>
<p>在https://pypi.org/ 搜库，点进去</p>
</li>
<li>
<p>找Download files，下载whl或压缩文件到桌面。例如文件名 xxx.whl</p>
</li>
<li>
<p>命令行依次执行</p>
<ul>
<li>
<p><code> cd desktop</code></p>
</li>
<li>
<p><code>pip3 install xxx.whl</code></p>
</li>
</ul>
</li>
</ol>
</li>
<li>
<p>github本地安装（如github项目中存在setup.py文件，可以安装使用）</p>
</li>
<li>
<p>下载github项目至桌面，解压</p>
</li>
<li>
<p>命令依次执行
- <code>cd desktop</code>
- <code>python3 setup.py install</code></p>
</li>
</ol>
<p><br><br></p>
<h2 id="三jupyter-notebook">三、Jupyter notebook</h2>
<h3 id="31-安装">3.1 安装</h3>
<p>命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install jupyter
</code></pre></div><h3 id="32-调用">3.2 调用</h3>
<p>命令行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">jupyter notebook
</code></pre></div><h3 id="33-常用快捷键">3.3 常用快捷键</h3>
<table>
<thead>
<tr>
<th>jupyter内快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ESC+A（ESC+B）</td>
<td>当前单元格上(下)新建一个新的Cell</td>
</tr>
<tr>
<td>D+D</td>
<td>删除当前单元格</td>
</tr>
<tr>
<td>Shift+Enter</td>
<td>执行单元格内的Python代码</td>
</tr>
<tr>
<td>ESC+M</td>
<td>单元格由代码模式转为Markdown标记模式</td>
</tr>
</tbody>
</table>
<p><strong>推荐：</strong> Markdown语法特别好用，强烈建议学习，顺便安装一个Typora软件。</p>
<p><br><br></p>
<h2 id="四tips">四、Tips</h2>
<p>环境配置太难，而且有时候电脑还会出现一些视频里出现不了的问题。这时不妨在<strong>淘宝搜python环境配置</strong>，寻找一对一远程协助</p>
<br>
<h1 id="了解课程">了解课程</h1>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据类型-字符串</title>
      <link>https://textdata.cn/blog/basic-04-string/</link>
      <pubDate>Sat, 17 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-04-string/</guid>
      <description>网络爬虫与文本分析实际上主要是对字符串做的处理，一定要熟悉字符串哦</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=5"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h1 id="python语法入门-课件下载">Python语法入门-课件下载</h1>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<p><strong>网络爬虫与文本分析实际上主要是对字符串做的处理，一定要熟悉字符串哦</strong></p>
<p><br><br></p>
<h1 id="字符串string">字符串string</h1>
<h2 id="定义">定义</h2>
<p>字符串是以  <strong>单引号</strong>  或  <strong>双引号</strong>  或 <strong>三引号</strong> 括起来的任意文本，如</p>
<ul>
<li>&lsquo;abc&rsquo;</li>
<li>&ldquo;abc&rdquo;</li>
<li>&lsquo;&lsquo;&lsquo;abc&rsquo;&rsquo;&rsquo;</li>
<li>&ldquo;&ldquo;&ldquo;abc&rdquo;&rdquo;&rdquo;</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>
<span class="n">a</span>
</code></pre></div><pre><code>'abc'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;abc&#34;</span>
</code></pre></div><pre><code>'abc'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;abc&#39;&#39;&#39;</span>
</code></pre></div><pre><code>'abc'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;abc&#34;&#34;&#34;</span>
</code></pre></div><pre><code>'abc'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;abc&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;abc&#39;&#39;&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;abc&#34;&#34;&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>abc
abc
abc
abc
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;efg&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>abc
efg
</code></pre>
<br>
<p><strong>注意</strong>:</p>
<ul>
<li>这里所说的引号都是英文引号</li>
<li><code>''</code> 或 <code>&quot;&quot;</code> 本身不是字符串的一部分，因此，字符串 <code>'abc'</code> 只有a，b，c这3个字符。</li>
<li>notebook中只显示最后一个，所以这里用了两个print</li>
</ul>
<blockquote>
<p>**Tips: **这里所说的引号都是英文引号<br></p>
<p><code>''</code> 或 <code>&quot;&quot;</code> 本身不是字符串的一部分，因此，字符串 <code>'abc'</code> 只有a，b，c这3个字符。<br></p>
<p>notebook中只显示最后一个，所以这里用了两个print<br></p>
</blockquote>
<p><br><br></p>
<h2 id="拼接">拼接+</h2>
<p>按顺序拼接</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;P&#39;</span>
<span class="n">b</span> <span class="o">=</span> <span class="s1">&#39;ython&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="o">+</span><span class="n">a</span><span class="p">)</span>
</code></pre></div><pre><code>Python
ythonP
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;P&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="o">+</span><span class="n">a</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
</code></pre></div><p><br><br></p>
<h2 id="切片">切片</h2>
<p>切片就像切糕，把自己想要的那块切下来</p>

<figure >
    
        <img src="%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%b4%a2%e5%bc%95.png" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;My Name is Mike&#39;</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><pre><code>'M'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">[</span><span class="o">-</span><span class="mi">15</span><span class="p">]</span>
</code></pre></div><pre><code>'M'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">6</span><span class="p">]</span>
</code></pre></div><pre><code>'Nam'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">[</span><span class="o">-</span><span class="mi">12</span><span class="p">:</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span>
</code></pre></div><pre><code>'Nam'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div><pre><code>'My'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div><pre><code>'My'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">[</span><span class="mi">5</span><span class="p">:]</span>
</code></pre></div><pre><code>'me is Mike'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">[</span><span class="o">-</span><span class="mi">7</span><span class="p">:]</span>
</code></pre></div><pre><code>'is Mike'
</code></pre>
<p><br><br></p>
<h3 id="切片总结">切片总结</h3>
<table>
<thead>
<tr>
<th style="text-align:left">切片表达式</th>
<th style="text-align:left">解读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>从左往右</strong></td>
<td style="text-align:left">索引值从0开始，0表示&rsquo;第一个'</td>
</tr>
<tr>
<td style="text-align:left"><strong>从右向左</strong></td>
<td style="text-align:left">-1表示倒数第一个，-2表示倒数第二个</td>
</tr>
<tr>
<td style="text-align:left"><strong>a:b</strong></td>
<td style="text-align:left">选取列表索引位置为<code>a，a+1...b-2, b-1</code>的值</td>
</tr>
<tr>
<td style="text-align:left"><strong>a:</strong></td>
<td style="text-align:left">选取列表中a之后的所有元素(含a)</td>
</tr>
<tr>
<td style="text-align:left"><strong>:b</strong></td>
<td style="text-align:left">选取列表中b之前的所有元素(不含b)</td>
</tr>
</tbody>
</table>
<br>
<h2 id="字符串常用方法">字符串常用方法</h2>
<p><strong>再次强调，数据类(型)与猪牛羊不同的动物类型一样，都有满足人类需要的特殊本领(方法)。方法可以理解为数据类(型)一种特殊的本性、属性、特性</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">字符串常用方法</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">str.lower()</td>
<td style="text-align:left">变小写</td>
</tr>
<tr>
<td style="text-align:left">str.upper()</td>
<td style="text-align:left">变大写</td>
</tr>
<tr>
<td style="text-align:left">str.split(sep)</td>
<td style="text-align:left">使用sep将字符串分割，默认sep为空格</td>
</tr>
<tr>
<td style="text-align:left">str.replace(old, new)</td>
<td style="text-align:left">将str中的old替换为new</td>
</tr>
<tr>
<td style="text-align:left">str.format()</td>
<td style="text-align:left">向str中填充内容</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span> <span class="o">=</span> <span class="s1">&#39;Python is poweful!&#39;</span>
<span class="n">words</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</code></pre></div><pre><code>'python is poweful!'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
</code></pre></div><pre><code>'PYTHON IS POWEFUL!'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span>
</code></pre></div><pre><code>'Python is poweful!'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</code></pre></div><pre><code>['Python', 'is', 'poweful!']
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;Python programing language&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>'Python programing language is poweful!'
</code></pre>
<br>
<p>需要发送每个员工的工资组成详情。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&#34;张三,你这个月的工资是2310元；以下是你的工资详情。。。。&#34;
&#34;李四,你这个月的工资是3456元；以下是你的工资详情。。。。&#34;
&#34;王五,你这个月的工资是2431元；以下是你的工资详情。。。。&#34;
</code></pre></div><p>如何自动化自动化填充?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">template</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">{name}</span><span class="s1">,你这个月的工资是</span><span class="si">{salary}</span><span class="s1">元；以下是你的工资详情&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">template</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="n">salary</span><span class="o">=</span><span class="s1">&#39;2310&#39;</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">template</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="n">salary</span><span class="o">=</span><span class="s1">&#39;3456&#39;</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">template</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="n">salary</span><span class="o">=</span><span class="s1">&#39;2431&#39;</span><span class="p">))</span>
</code></pre></div><pre><code>张三,你这个月的工资是2310元；以下是你的工资详情
李四,你这个月的工资是3456元；以下是你的工资详情
王五,你这个月的工资是2431元；以下是你的工资详情
</code></pre>
<p><br><br></p>
<h2 id="转义符">转义符\</h2>
<p>如果字符串内部既包含 <strong>单引号</strong> 又包含 <strong>双引号</strong>， 会发生什么？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="n">m</span> <span class="s2">&#34;OK&#34;</span><span class="err">!</span><span class="s1">&#39;)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-28-af5dc904b170&gt;&quot;, line 1
    print('I'm &quot;OK&quot;!')
             ^
SyntaxError: invalid syntax
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 可以用 转义字符\ 来标识，比如：</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;I</span><span class="se">\&#39;</span><span class="s1">m </span><span class="se">\&#34;</span><span class="s1">OK</span><span class="se">\&#34;</span><span class="s1">!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>I'm &quot;OK&quot;!
</code></pre>
<p>常见的转义符还有</p>
<ul>
<li><code>\n</code> 换行</li>
<li><code>\t</code> 制表符</li>
<li><code>字符\</code> 本身也要转义，所以 <code>\\</code> 表示的字符就是 <code>\</code></li>
</ul>
<p>可以试着自己运行下面代码，看看下面打印结果是?：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello</span><span class="se">\t</span><span class="s1">World!&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;转义</span><span class="se">\n</span><span class="s1">换行!&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;反斜杠线</span><span class="se">\\</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello</span><span class="se">\t</span><span class="s1">World!&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>Hello	World!
Hello World!
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;转义</span><span class="se">\n</span><span class="s1">换行!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>转义
换行!
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;反斜杠线</span><span class="se">\\</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>反斜杠线\
</code></pre>
<p><br><br></p>
<h3 id="r">r</h3>
<p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>,</p>
<p>为了简化，Python还允许用<code>r''</code>表示<code>''内部</code>的字符串默认不转义,例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\\t\\</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">\t</span><span class="se">\\</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello world!&#39;</span><span class="p">)</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\\t\\</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>\	\
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">\t</span><span class="se">\\</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>\\\t\\
</code></pre>
<p><br><br></p>
<h1 id="了解课程">了解课程</h1>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据类型-列表元组集合</title>
      <link>https://textdata.cn/blog/basic-05-list-tuple-set/</link>
      <pubDate>Fri, 16 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-05-list-tuple-set/</guid>
      <description>当你不知道用什么数据类型的时候，一定要记得list，大多数的脏活累活ta都帮你搞定</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=6"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<blockquote>
<p><strong>当你不知道用什么数据类型的时候，一定要记得list，大多数的脏活累活ta都帮你搞定</strong></p>
</blockquote>
<p><br><br></p>
<h2 id="列表list">列表list</h2>
<h3 id="定义">定义</h3>
<p>list是一种<strong>有序</strong>的集合,内部可以由任何数据类型的组成的</p>
<p>现在有5位员工的汇总信息，</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">姓名</th>
<th style="text-align:left">年龄</th>
<th style="text-align:left">性别</th>
<th style="text-align:left">爱好</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">David</td>
<td style="text-align:left">25</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Basketball, Pingpang, Hiking</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">Mary</td>
<td style="text-align:left">23</td>
<td style="text-align:left">Female</td>
<td style="text-align:left">Reading, Movies</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">Henry</td>
<td style="text-align:left">23</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Diving, Hiking</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">Swift</td>
<td style="text-align:left">21</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Football, Music</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">Lenard</td>
<td style="text-align:left">26</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Stay at Home</td>
</tr>
</tbody>
</table>
<p>现在我们需要用一种格式去组织5位员工的信息，以列表为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;Swift&#39;</span><span class="p">,</span> <span class="s1">&#39;Lenard&#39;</span><span class="p">]</span>

<span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">26</span><span class="p">]</span>

<span class="n">hobbies</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;Basketball&#39;</span><span class="p">,</span> <span class="s1">&#39;Pingpang&#39;</span><span class="p">,</span> <span class="s1">&#39;Hiking&#39;</span><span class="p">],</span>
          <span class="p">[</span><span class="s1">&#39;Reading&#39;</span><span class="p">,</span> <span class="s1">&#39;Movies&#39;</span><span class="p">],</span>
          <span class="p">[</span><span class="s1">&#39;Diving&#39;</span><span class="p">,</span> <span class="s1">&#39;Hiking&#39;</span><span class="p">],</span>
          <span class="p">[</span><span class="s1">&#39;Football&#39;</span><span class="p">,</span> <span class="s1">&#39;Music&#39;</span><span class="p">],</span>
          <span class="p">[</span><span class="s1">&#39;Stay at Home&#39;</span><span class="p">]]</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">names</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ages</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">hobbies</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ages</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">hobbies</span><span class="p">)</span>
</code></pre></div><pre><code>&lt;class 'list'&gt;
&lt;class 'list'&gt;
&lt;class 'list'&gt;
['David', 'Mary', 'Henry', 'Swift', 'Lenard']
[25, 23, 23, 21, 26]
[['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']]
</code></pre>
<p>**多想一下： **组织数据的方式有很多种，list也可以用不同的方式去组织，大家可以自己想一想。</p>
<p><br><br></p>
<h3 id="拼接">拼接</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a1</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Michael&#39;</span><span class="p">,</span> <span class="s1">&#39;Bob&#39;</span><span class="p">]</span>
<span class="n">a2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Lee&#39;</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">+</span> <span class="n">a2</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">a2</span> <span class="o">+</span> <span class="n">a1</span><span class="p">)</span>
</code></pre></div><pre><code>['Michael', 'Bob', 'David', 'Lee']
['David', 'Lee', 'Michael', 'Bob']
</code></pre>
<p><br><br></p>
<h3 id="拆包">拆包</h3>
<p><strong>注意：</strong> 等号两边长度相同</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</code></pre></div><pre><code>David
25
</code></pre>
<p><br><br></p>
<h3 id="切片">切片</h3>
<p>列表的切片与字符串类似</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">姓名</th>
<th style="text-align:left">年龄</th>
<th style="text-align:left">性别</th>
<th style="text-align:left">爱好</th>
<th style="text-align:left">正索引</th>
<th style="text-align:left">倒索引</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">David</td>
<td style="text-align:left">25</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Basketball, Pingpang, Hiking</td>
<td style="text-align:left">0</td>
<td style="text-align:left">-5</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">Mary</td>
<td style="text-align:left">23</td>
<td style="text-align:left">Female</td>
<td style="text-align:left">Reading, Movies</td>
<td style="text-align:left">1</td>
<td style="text-align:left">-4</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">Henry</td>
<td style="text-align:left">23</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Diving, Hiking</td>
<td style="text-align:left">2</td>
<td style="text-align:left">-3</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">Swift</td>
<td style="text-align:left">21</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Football, Music</td>
<td style="text-align:left">3</td>
<td style="text-align:left">-2</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">Lenard</td>
<td style="text-align:left">26</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Stay at Home</td>
<td style="text-align:left">4</td>
<td style="text-align:left">-1</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;Swift&#39;</span><span class="p">,</span> <span class="s1">&#39;Lenard&#39;</span><span class="p">]</span>
<span class="n">names</span>
</code></pre></div><pre><code>['David', 'Mary', 'Henry', 'Swift', 'Lenard']
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">])</span>
</code></pre></div><pre><code>Henry
Henry
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="o">-</span><span class="mi">5</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div><pre><code>['David', 'Mary', 'Henry']
['David', 'Mary', 'Henry']
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:])</span>
</code></pre></div><pre><code>['Henry', 'Swift', 'Lenard']
['Henry', 'Swift', 'Lenard']
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">[:</span><span class="o">-</span><span class="mi">3</span><span class="p">])</span>
</code></pre></div><pre><code>['David', 'Mary']
['David', 'Mary']
</code></pre>
<br>
<h3 id="列表常用方法">列表常用方法</h3>
<table>
<thead>
<tr>
<th style="text-align:left">常用方法</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">list.append(a)</td>
<td style="text-align:left">向list中添加元素a</td>
</tr>
<tr>
<td style="text-align:left">list.extend(lst)</td>
<td style="text-align:left">向list中添加列表lst</td>
</tr>
<tr>
<td style="text-align:left">list.count(a)</td>
<td style="text-align:left">统计list中a的个数</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;Swift&#39;</span><span class="p">,</span> <span class="s1">&#39;Lenard&#39;</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
<span class="n">names</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Mary&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
</code></pre></div><pre><code>['David', 'Mary', 'Henry', 'Swift', 'Lenard']
['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary']
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;Swift&#39;</span><span class="p">,</span> <span class="s1">&#39;Lenard&#39;</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>

<span class="n">names</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="s1">&#39;Mary&#39;</span><span class="p">])</span>

<span class="nb">print</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
</code></pre></div><pre><code>['David', 'Mary', 'Henry', 'Swift', 'Lenard']
['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary']
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">26</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ages</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">23</span><span class="p">))</span>
</code></pre></div><pre><code>2
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">one</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">one</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">one</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div><pre><code>David
David
</code></pre>
<p><br><br></p>
<h2 id="元组tuple">元组tuple</h2>
<p>形似列表，也有</p>
<ul>
<li>元组拼接</li>
<li>切片</li>
<li>拆包</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;Swift&#39;</span><span class="p">,</span> <span class="s1">&#39;Lenard&#39;</span><span class="p">]</span>
<span class="n">name_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;Swift&#39;</span><span class="p">,</span> <span class="s1">&#39;Lenard&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">name_list</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">name_tuple</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="n">name_list</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">name_tuple</span><span class="p">)</span>
</code></pre></div><pre><code>&lt;class 'list'&gt;
&lt;class 'tuple'&gt;
['David', 'Mary', 'Henry', 'Swift', 'Lenard']
('David', 'Mary', 'Henry', 'Swift', 'Lenard')
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">name_list</span><span class="o">==</span><span class="n">name_tuple</span><span class="p">)</span>
</code></pre></div><pre><code>False
</code></pre>
<p><br><br></p>
<h2 id="集合">集合</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">names2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Swift&#39;</span><span class="p">,</span> <span class="s1">&#39;David&#39;</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">names2</span><span class="p">))</span>
</code></pre></div><pre><code>{'Swift', 'Mary', 'David'}
</code></pre>
<br>
<h3 id="集合的方法">集合的方法</h3>
<ul>
<li>setdata.add(ele)  向setdata中加入ele</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">names2</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">name_set</span><span class="p">)</span>

<span class="n">name_set</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;William&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">name_set</span><span class="p">)</span>
</code></pre></div><pre><code>{'Swift', 'Mary', 'David'}
{'William', 'Swift', 'Mary', 'David'}
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name_set</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-20-98cb669cc173&gt; in &lt;module&gt;
----&gt; 1 name_set[2]


TypeError: 'set' object is not subscriptable
</code></pre>
<br>
<p><strong>注意：</strong> 集合不能切片</p>
<p><br><br></p>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据类型-字典</title>
      <link>https://textdata.cn/blog/basic-06-dict/</link>
      <pubDate>Thu, 15 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-06-dict/</guid>
      <description>最有层次感的数据类型，特别干净整洁。在写爬虫时，我们最希望遇到的数据类型就是ta</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=7"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<blockquote>
<p><strong>最有层次感的数据类型，特别干净整洁。在写爬虫时，我们最希望遇到的数据类型就是ta</strong></p>
</blockquote>
<p>下图就是最简单的字典的样式，<strong>键值对 key-value-pairs</strong></p>

<figure >
    
        <img src="featured.jpg" />
    
    
</figure>

<p><br><br></p>
<h2 id="字典">字典</h2>
<p>字典是有key，有value的 key-value-pair类型数据（键-值对）</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">姓名</th>
<th style="text-align:left">年龄</th>
<th style="text-align:left">性别</th>
<th style="text-align:left">爱好</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">David</td>
<td style="text-align:left">25</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Basketball, Pingpang, Hiking</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">Mary</td>
<td style="text-align:left">23</td>
<td style="text-align:left">Female</td>
<td style="text-align:left">Reading, Movies</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">Henry</td>
<td style="text-align:left">23</td>
<td style="text-align:left">Male</td>
<td style="text-align:left">Diving, Hiking</td>
</tr>
</tbody>
</table>
<p>将上面的员工信息以关键词<code>name、age、hobbies</code> 组织成字典数据</p>
<br>
<h3 id="空字典">空字典</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">david</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">david</span><span class="p">)</span>
</code></pre></div><pre><code>{}
</code></pre>
<br>
<h3 id="填充">填充</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">david</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">23</span>
<span class="nb">print</span><span class="p">(</span><span class="n">david</span><span class="p">)</span>
</code></pre></div><pre><code>{'age': 23}
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">david</span><span class="p">[</span><span class="s1">&#39;hobbies&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Basketball&#39;</span><span class="p">,</span> <span class="s1">&#39;Pingpang&#39;</span><span class="p">,</span> <span class="s1">&#39;Hiking&#39;</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">david</span><span class="p">)</span>
</code></pre></div><pre><code>{'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">david</span><span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Male&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">david</span><span class="p">)</span>
</code></pre></div><pre><code>{'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}
</code></pre>
<p><br><br></p>
<h3 id="更新">更新</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">david</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">25</span>
<span class="nb">print</span><span class="p">(</span><span class="n">david</span><span class="p">)</span>
</code></pre></div><pre><code>{'age': 25, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}
</code></pre>
<br>
<h3 id="完整的信息">完整的信息</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">infos</span> <span class="o">=</span>  <span class="p">{</span><span class="s1">&#39;David&#39;</span><span class="p">:{</span><span class="s1">&#39;age&#39;</span><span class="p">:</span><span class="mi">25</span><span class="p">,</span> 
                   <span class="s1">&#39;gender&#39;</span><span class="p">:</span><span class="s1">&#39;Male&#39;</span><span class="p">,</span>
                   <span class="s1">&#39;hobbies&#39;</span><span class="p">:[</span><span class="s1">&#39;Basketball&#39;</span><span class="p">,</span> <span class="s1">&#39;Pingpang&#39;</span><span class="p">,</span> <span class="s1">&#39;Hiking&#39;</span><span class="p">]},</span>
          <span class="s1">&#39;Mary&#39;</span><span class="p">:{</span><span class="s1">&#39;age&#39;</span><span class="p">:</span><span class="mi">23</span><span class="p">,</span>
                  <span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;Female&#39;</span><span class="p">,</span>
                  <span class="s1">&#39;hobbies&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Reading&#39;</span><span class="p">,</span> <span class="s1">&#39;Movies&#39;</span><span class="p">]},</span>
          <span class="s1">&#39;Henry&#39;</span><span class="p">:{</span><span class="s1">&#39;age&#39;</span><span class="p">:</span><span class="mi">23</span><span class="p">,</span>
                  <span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;Male&#39;</span><span class="p">,</span>
                  <span class="s1">&#39;hobbies&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Diving&#39;</span><span class="p">,</span> <span class="s1">&#39;Hiking&#39;</span><span class="p">]}</span>
         <span class="p">}</span>

<span class="nb">print</span><span class="p">(</span><span class="n">infos</span><span class="p">)</span>
</code></pre></div><pre><code>{'David': {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, 'Mary': {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, 'Henry': {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}}
</code></pre>
<br>
<br>
<h2 id="字典的方法">字典的方法</h2>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">dictdata.items()</td>
<td style="text-align:left">返回dictdata所有item</td>
</tr>
<tr>
<td style="text-align:left">dictdata.keys()</td>
<td style="text-align:left">返回dictdata的所有关键词</td>
</tr>
<tr>
<td style="text-align:left">dictdata.values()</td>
<td style="text-align:left">返回dictdata的所有值</td>
</tr>
<tr>
<td style="text-align:left"><code>dictdata.get(keystr)</code></td>
<td style="text-align:left">获取关键词keystr对应的值</td>
</tr>
<tr>
<td style="text-align:left"><code>dictdata[keystr]</code></td>
<td style="text-align:left">获取关键词keystr对应的值</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">infos</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</code></pre></div><pre><code>dict_items([('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}), ('Mary', {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}), ('Henry', {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']})])
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#把infos.items()转化为列表</span>
<span class="nb">list</span><span class="p">(</span><span class="n">infos</span><span class="o">.</span><span class="n">items</span><span class="p">())[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><pre><code>('David',
 {'age': 25,
  'gender': 'Male',
  'hobbies': ['Basketball', 'Pingpang', 'Hiking']})
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">infos</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</code></pre></div><pre><code>dict_keys(['David', 'Mary', 'Henry'])
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">infos</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>
</code></pre></div><pre><code>dict_values([{'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}])
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">infos</span><span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">infos</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">))</span>
</code></pre></div><pre><code>{'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}
{'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}
</code></pre>
<br>
<p><strong>注意：</strong> 两种功能等同，但是get获取方法更加安全稳定。</p>
<p>例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">infos</span><span class="p">[</span><span class="s1">&#39;Will&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-16-f7c283c8ad8e&gt; in &lt;module&gt;
----&gt; 1 print(infos['Will'])


KeyError: 'Will'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">infos</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Will&#39;</span><span class="p">))</span>
</code></pre></div><pre><code>None
</code></pre>
<br>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据类型-布尔值&amp;None</title>
      <link>https://textdata.cn/blog/basic-07-boolean-none/</link>
      <pubDate>Wed, 14 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-07-boolean-none/</guid>
      <description>Python世界也存在 有与无、真与假</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=8"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<h2 id="布尔值boolean">布尔值Boolean</h2>
<p>用于逻辑判断，一般与if结合使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="kc">True</span>
<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kc">True</span>
</code></pre></div><pre><code>True
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kc">False</span>
</code></pre></div><pre><code>False
</code></pre>
<br>
<p>其他产生布尔值的方式</p>
<ul>
<li>布尔运算</li>
<li>比较运算</li>
<li>成员运算</li>
</ul>
<br>
<h2 id="布尔运算">布尔运算</h2>
<p>中学数学课里的且或非</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符号</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">例子</th>
<th style="text-align:left">等于</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">x and y</td>
<td style="text-align:left">且</td>
<td style="text-align:left">True and False</td>
<td style="text-align:left">False</td>
</tr>
<tr>
<td style="text-align:left">x or y</td>
<td style="text-align:left">或</td>
<td style="text-align:left">True or False</td>
<td style="text-align:left">True</td>
</tr>
<tr>
<td style="text-align:left">not x</td>
<td style="text-align:left">非</td>
<td style="text-align:left">not True</td>
<td style="text-align:left">False</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="kc">True</span> <span class="ow">and</span> <span class="kc">False</span>
<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div><pre><code>False
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="kc">True</span> <span class="ow">or</span> <span class="kc">False</span>
<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="ow">not</span> <span class="kc">True</span>
<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div><pre><code>False
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="ow">not</span> <span class="kc">False</span>
<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<br>
<br>
<h2 id="比较运算">比较运算</h2>
<p><strong>注意：</strong> =和<code>==</code>的区别，=用来把某个值传给某个变量(赋值操作)，<code>==</code>用来判断两个值(变量)是否相等(判断操作)</p>
<table>
<thead>
<tr>
<th style="text-align:left">比较运算符号</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">例子</th>
<th style="text-align:left">等于</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">==</td>
<td style="text-align:left">相等</td>
<td style="text-align:left">5==3</td>
<td style="text-align:left">False</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">不等于</td>
<td style="text-align:left">5!=3</td>
<td style="text-align:left">True</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td style="text-align:left">大于</td>
<td style="text-align:left"><code>5&gt;3</code></td>
<td style="text-align:left">True</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td style="text-align:left">小于</td>
<td style="text-align:left"><code>5&lt;3</code></td>
<td style="text-align:left">False</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">小于等于</td>
<td style="text-align:left"><code>5&lt;=3</code></td>
<td style="text-align:left">False</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">小于</td>
<td style="text-align:left"><code>5&gt;=3</code></td>
<td style="text-align:left">True</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">b</span>
<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div><pre><code>False
&lt;class 'bool'&gt;
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="mi">5</span><span class="o">==</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="mi">5</span><span class="o">!=</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><pre><code>False
</code></pre>
<p>**注意:**比较符两侧必须为同样的数据类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;5&#39;</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">5</span>

<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-15-861d7a553a1d&gt; in &lt;module&gt;
      2 b = 5
      3 
----&gt; 4 print(a&gt;b)
TypeError: '&gt;' not supported between instances of 'str' and 'int'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;5&#39;</span>
<span class="n">b</span> <span class="o">=</span> <span class="s1">&#39;5&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<p><br><br></p>
<h2 id="成员运算符in">成员运算符in</h2>
<p>用来判断某个值是否在集合中（这个集合可以使列表、元组、字符串等)</p>
<table>
<thead>
<tr>
<th style="text-align:left">案例</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>4 in [1,2,4]</code></td>
<td style="text-align:left">True</td>
</tr>
<tr>
<td style="text-align:left"><code>4 not in [1,2,4]</code></td>
<td style="text-align:left">False</td>
</tr>
<tr>
<td style="text-align:left"><code>3 in [1,2,4]</code></td>
<td style="text-align:left">False</td>
</tr>
<tr>
<td style="text-align:left"><code>3 not in [1,2,4]</code></td>
<td style="text-align:left">True</td>
</tr>
</tbody>
</table>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="mi">4</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="n">x</span>
</code></pre></div><pre><code>True
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">y</span> <span class="o">=</span> <span class="mi">4</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="n">y</span>
</code></pre></div><pre><code>False
</code></pre>
<p><br><br></p>
<h2 id="none">None</h2>
<p>特殊的空值，类似于C语言中的Null。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kc">None</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;</span>
</code></pre></div><br>
<pre><code>''
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">[]</span>
</code></pre></div><pre><code>[]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">dict</span><span class="p">()</span>
</code></pre></div><pre><code>{}
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">type</span><span class="p">(</span><span class="kc">None</span><span class="p">)</span>
</code></pre></div><pre><code>NoneType
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
</code></pre></div><br>
<p>##了解课程</p>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>逻辑语句(if&amp;for&amp;tryexcept)</title>
      <link>https://textdata.cn/blog/basic-08-logical-if-else-try-except/</link>
      <pubDate>Tue, 13 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-08-logical-if-else-try-except/</guid>
      <description>记住程序做事，跟人一样，也要考虑的全面，条件是否成熟。如果做不成，做好最坏打算。</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=9"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<h1 id="if条件判断">if条件判断</h1>

<figure >
    
        <img src="if%e5%9b%be.png" width="800" />
    
    
</figure>

<h2 id="condition为布尔值布尔运算成员运算符">condition为布尔值、布尔运算、成员运算符</h2>
<p>通常我们理解的condition为布尔值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#Tab</span>
<span class="n">condition</span> <span class="o">=</span> <span class="kc">True</span>

<span class="k">if</span> <span class="n">condition</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;condition为True&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;condition为False&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>condition为True
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="mi">17</span>

<span class="k">if</span> <span class="n">age</span><span class="o">&gt;=</span><span class="mi">18</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;你是成年人了&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;你还是个孩子&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>你还是个孩子
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="mi">20</span>

<span class="k">if</span> <span class="n">age</span><span class="o">&gt;=</span><span class="mi">55</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;老年人&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="mi">35</span><span class="o">&lt;=</span><span class="n">age</span><span class="o">&lt;</span><span class="mi">55</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;中年&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="mi">18</span><span class="o">&lt;=</span><span class="n">age</span><span class="o">&lt;</span><span class="mi">35</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;青年&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">age</span><span class="o">&lt;</span><span class="mi">18</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;儿童&#39;</span><span class="p">)</span>

</code></pre></div><pre><code>青年
</code></pre>
<p><br><br></p>
<h2 id="特殊的conditon">特殊的conditon</h2>
<ul>
<li>各种空值(空字符串、空列表等)作用等同于False</li>
<li>各种非空值，作用等同于True</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="kc">None</span>

<span class="k">if</span> <span class="n">a</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;a是非空数据&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;a是空数据&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>a是空数据
</code></pre>
<p><br><br></p>
<h1 id="for循环">for循环</h1>
<ul>
<li>重复做某件事</li>
<li>迭代出数据中的内容(元素)</li>
</ul>

<figure >
    
        <img src="for%e5%be%aa%e7%8e%af.png" width="800" />
    
    
</figure>

<h3 id="上面这个图可以解读为">上面这个图可以解读为</h3>
<p>我们想对iterable这个集合中的每一个item:</p>
<pre><code>做点事(对item做操作)
</code></pre>
<br>
<h2 id="重复做某事">重复做某事</h2>
<h3 id="问题1">问题1</h3>
<p>计算1+2+3+&hellip;+97+98+99+100=?</p>
<p>1 + 2 = 3
3 + 3 = 6
6 + 4 = 10
10 + 5 = 15</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1">#int</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">101</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="n">i</span>
    
<span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div><pre><code>5050
</code></pre>
<br>
<h2 id="迭代出数据中的内容">迭代出数据中的内容</h2>
<p>从某种“集合”（这个“集合”可以使list、set、tuple等），只要“集合”内部有多个成员就可以使用for循环迭代出内部的成员</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div><pre><code>David
Henry
Mary
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;David&#39;</span>

<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">name</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div><pre><code>D
a
v
i
d
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">infos</span> <span class="o">=</span>  <span class="p">{</span><span class="s1">&#39;David&#39;</span><span class="p">:{</span><span class="s1">&#39;age&#39;</span><span class="p">:</span><span class="mi">25</span><span class="p">,</span> 
                   <span class="s1">&#39;gender&#39;</span><span class="p">:</span><span class="s1">&#39;Male&#39;</span><span class="p">},</span>
          <span class="s1">&#39;Mary&#39;</span><span class="p">:{</span><span class="s1">&#39;age&#39;</span><span class="p">:</span><span class="mi">23</span><span class="p">,</span>
                  <span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;Female&#39;</span><span class="p">},</span>
          <span class="s1">&#39;Henry&#39;</span><span class="p">:{</span><span class="s1">&#39;age&#39;</span><span class="p">:</span><span class="mi">23</span><span class="p">,</span>
                  <span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;Male&#39;</span><span class="p">}</span>
         <span class="p">}</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">infos</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</code></pre></div><pre><code>('David', {'age': 25, 'gender': 'Male'})
('Mary', {'age': 23, 'gender': 'Female'})
('Henry', {'age': 23, 'gender': 'Male'})
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">info</span> <span class="ow">in</span> <span class="n">infos</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
</code></pre></div><pre><code>David
Mary
Henry
</code></pre>
<p><br><br></p>
<h1 id="try-except">try-except</h1>
<p><strong>遇到无关紧要的bug，不会停下来，让程序有一定的容错能力。通俗点就是此处不留爷，自有留爷处，凡事别钻牛角尖。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="mi">10</span><span class="o">/</span><span class="n">x</span><span class="p">)</span>
</code></pre></div><pre><code>10.0
5.0
---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-19-83bea9c92c0e&gt; in &lt;module&gt;
      1 for x in [1,2,0,2,1]:
----&gt; 2     print(10/x)
ZeroDivisionError: division by zero
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="mi">10</span><span class="o">/</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;0除错误&#39;</span><span class="p">)</span>
        <span class="c1">#pass</span>
</code></pre></div><pre><code>10.0
5.0
0除错误
5.0
10.0
</code></pre>
<p><br><br></p>
<h2 id="练习1">练习1</h2>
<p>假设现在某人的能力为1， 每天比前一天进步0.01， 一年后他的能力是多少？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ability</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">scale</span> <span class="o">=</span> <span class="mf">1.01</span>

<span class="n">records</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">365</span><span class="p">):</span>
    <span class="n">ability</span> <span class="o">=</span> <span class="n">ability</span> <span class="o">*</span> <span class="mf">1.01</span>
    <span class="n">records</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ability</span><span class="p">)</span>
    
<span class="nb">print</span><span class="p">(</span><span class="n">records</span><span class="p">)</span>
</code></pre></div><pre><code>[1.01, 1.0201, 1.030301, 1.04060401, 1.0510100501, 1.061520150601, 1.0721353521070098, 1.08285670562808, 1.0936852726843609, 1.1046221254112045, 1.1156683466653166, ...................36.30913774096189, 36.672229118371504, 37.03895140955522, 37.40934092365077, 37.783434332887275]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="n">ability</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">scale</span> <span class="o">=</span> <span class="mf">1.02</span>
<span class="n">records</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">days</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">365</span><span class="p">)</span>
<span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="n">days</span><span class="p">:</span>
    <span class="n">ability</span> <span class="o">=</span> <span class="n">ability</span><span class="o">*</span><span class="n">scale</span>
    <span class="n">records</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ability</span><span class="p">)</span>
 

<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">days</span><span class="p">,</span> <span class="n">records</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Be better everyday!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>Text(0.5, 1.0, 'Be better everyday!')
</code></pre>

<figure >
    
        <img src="output_23_1.png" width="800" />
    
    
</figure>

<p><br><br></p>
<h1 id="安装包的方法">安装包的方法</h1>
<ol>
<li>命令行执行 <code>pip install packagename</code></li>
<li>jupyter notebook的Cell中执行<code>!pip install packagename</code></li>
<li>如果是mac，pip写成pip3</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">matplotlib</span>
</code></pre></div><pre><code>Looking in indexes: https://mirrors.aliyun.com/pypi/simple/
Requirement already satisfied: matplotlib in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (3.2.1)
Requirement already satisfied: kiwisolver&gt;=1.0.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (1.2.0)
Requirement already satisfied: python-dateutil&gt;=2.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (2.8.1)
Requirement already satisfied: cycler&gt;=0.10 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (0.10.0)
Requirement already satisfied: numpy&gt;=1.11 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (1.18.2)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from matplotlib) (2.4.7)
Requirement already satisfied: six&gt;=1.5 in c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages (from python-dateutil&gt;=2.1-&gt;matplotlib) (1.14.0)
</code></pre>
<h2 id="练习2">练习2</h2>
<p><strong>打印九九乘法表格</strong></p>

<figure >
    
        <img src="%e4%b9%9d%e4%b9%9d%e4%b9%98%e6%b3%95%e8%a1%a82.png" width="800" />
    
    
</figure>

<p>用到的知识点:</p>
<ul>
<li>for循环</li>
<li>字符串format方法</li>
<li>print函数(涉及到end参数)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
    <span class="c1">#print(row)</span>
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">formula</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">{col}</span><span class="s1">*</span><span class="si">{row}</span><span class="s1">=</span><span class="si">{res}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="n">col</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="n">row</span><span class="p">,</span> <span class="n">res</span><span class="o">=</span><span class="n">col</span><span class="o">*</span><span class="n">row</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">formula</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>1*1=1	
1*2=2	2*2=4	
1*3=3	2*3=6	3*3=9	
1*4=4	2*4=8	3*4=12	4*4=16	
1*5=5	2*5=10	3*5=15	4*5=20	5*5=25	
1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	
1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	
1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	
1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">help</span><span class="p">(</span><span class="nb">print</span><span class="p">)</span>
</code></pre></div><pre><code>Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">formula</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">{col}</span><span class="s1">*</span><span class="si">{row}</span><span class="s1">=</span><span class="si">{res}</span><span class="s1">&#39;</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">formula</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="n">col</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="n">row</span><span class="p">,</span> <span class="n">res</span><span class="o">=</span><span class="n">col</span><span class="o">*</span><span class="n">row</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
    
</code></pre></div><pre><code>1*1=1	
1*2=2	2*2=4	
1*3=3	2*3=6	3*3=9	
1*4=4	2*4=8	3*4=12	4*4=16	
1*5=5	2*5=10	3*5=15	4*5=20	5*5=25	
1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	
1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	
1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	
1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	
</code></pre>
<p><br><br></p>
<h1 id="了解课程">了解课程</h1>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>高级语法-列表推导式</title>
      <link>https://textdata.cn/blog/basic-09-list-comprehension/</link>
      <pubDate>Mon, 12 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-09-list-comprehension/</guid>
      <description>5个小问题帮你理解推导式</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=10"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<p>列表推导式唯一的用处就是增强代码的可阅读性，初次接触可能比较难理解，但是大家一定要理解，文本分析中经常会用到ta。</p>
<p><br><br></p>
<h2 id="问题1-用列表表示集合x">问题1 用列表表示集合X</h2>
<p>$X= {x| x \in [1,2,3,4,5,6,7,8,9,10]}$</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">X</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
<span class="n">X</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">X</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">X</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p><br><br></p>
<h2 id="问题2-表示集合y">问题2 表示集合Y</h2>
<p>$Y = {x^2| x \in [1,2,3,4,5,6,7,8,9,10]}$</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Y</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span><span class="p">:</span>
    <span class="n">Y</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">)</span>
    
<span class="n">Y</span>
</code></pre></div><pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p><br><br></p>
<h2 id="列表推导式">列表推导式</h2>
<p>实现步骤</p>
<ol>
<li>先复制X</li>
<li>再对X中的元素x进行操作</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#先复制X</span>
<span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span><span class="p">]</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#再对x进行操作</span>
<span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span><span class="p">]</span>
</code></pre></div><pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<br>
<h3 id="理解列表推导式">理解列表推导式</h3>

<figure >
    
        <img src="%e5%88%97%e8%a1%a8%e6%8e%a8%e5%af%bc%e5%bc%8f%e7%90%86%e8%a7%a3.JPG" width="800" />
    
    
</figure>

<br>
<h3 id="带条件的列表推导式">带条件的列表推导式</h3>
<p>$C= {x^2 | (x \in X) \cap (x&gt;5)}$</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#复制X</span>
<span class="p">[</span><span class="n">x</span> 
 <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span><span class="p">]</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#X中的要大于5</span>
<span class="c1">#[x for x in X if x&gt;5]</span>


<span class="p">[</span><span class="n">x</span> 
 <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span> 
 <span class="k">if</span> <span class="n">x</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">]</span>


</code></pre></div><pre><code>[6, 7, 8, 9]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#对满足条件的x进行操作</span>
<span class="c1">#[x*x for x in X if x&gt;5]</span>

<span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> 
 <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span> 
 <span class="k">if</span> <span class="n">x</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">]</span>
</code></pre></div><pre><code>[36, 49, 64, 81]
</code></pre>
<p><br><br></p>
<h3 id="问题3-全部小写">问题3 全部小写</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Life&#39;</span><span class="p">,</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;short&#39;</span><span class="p">,</span> <span class="s1">&#39;so&#39;</span><span class="p">,</span> <span class="s1">&#39;we&#39;</span><span class="p">,</span> <span class="s1">&#39;use&#39;</span><span class="p">,</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;easy&#39;</span><span class="p">,</span> <span class="s1">&#39;to&#39;</span><span class="p">,</span> <span class="s1">&#39;learn&#39;</span><span class="p">,</span> <span class="s1">&#39;and&#39;</span><span class="p">,</span> <span class="s1">&#39;easy&#39;</span><span class="p">,</span> <span class="s1">&#39;to&#39;</span><span class="p">,</span> <span class="s1">&#39;use&#39;</span><span class="p">]</span>
<span class="n">words</span>
</code></pre></div><pre><code>['Life',
 'is',
 'short',
 'so',
 'we',
 'use',
 'Python',
 'python',
 'is',
 'easy',
 'to',
 'learn',
 'and',
 'easy',
 'to',
 'use']
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">lower_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">]</span>
<span class="n">lower_words</span>
</code></pre></div><pre><code>['life',
 'is',
 'short',
 'so',
 'we',
 'use',
 'python',
 'python',
 'is',
 'easy',
 'to',
 'learn',
 'and',
 'easy',
 'to',
 'use']
</code></pre>
<p><br><br></p>
<h3 id="问题4-计算lower_words列表数据的单词词频">问题4 计算lower_words列表数据的单词词频</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">wordset</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">lower_words</span><span class="p">)</span>
<span class="p">[(</span><span class="n">w</span><span class="p">,</span> <span class="n">lower_words</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordset</span><span class="p">]</span>
</code></pre></div><pre><code>[('so', 1),
 ('and', 1),
 ('learn', 1),
 ('use', 2),
 ('to', 2),
 ('we', 1),
 ('easy', 2),
 ('python', 2),
 ('is', 2),
 ('short', 1),
 ('life', 1)]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#1 生产词语集合</span>
<span class="n">wordset</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">lower_words</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">wordset</span><span class="p">)</span>
</code></pre></div><pre><code>{'so', 'and', 'learn', 'use', 'to', 'we', 'easy', 'python', 'is', 'short', 'life'}
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#2. wordset复制wordset自己</span>
<span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordset</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#3. 对wordset中每个词语w进行一些操作</span>
<span class="p">[</span><span class="n">lower_words</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordset</span><span class="p">]</span>
</code></pre></div><pre><code>[1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#3. 词频和词语一起显示</span>
<span class="p">[(</span><span class="n">w</span><span class="p">,</span><span class="n">lower_words</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">wordset</span><span class="p">]</span>
</code></pre></div><pre><code>[('so', 1),
 ('and', 1),
 ('learn', 1),
 ('use', 2),
 ('to', 2),
 ('we', 1),
 ('easy', 2),
 ('python', 2),
 ('is', 2),
 ('short', 1),
 ('life', 1)]
</code></pre>
<p><br><br></p>
<h3 id="问题5">问题5</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span> 
     <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> 
     <span class="s1">&#39;z&#39;</span><span class="p">:</span> <span class="s1">&#39;C&#39;</span> <span class="p">}</span>
</code></pre></div><p>如何将d中的 键值对 拼接,输出为</p>
<p><code>['xA', 'yB', 'zC]</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span> 
     <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> 
     <span class="s1">&#39;z&#39;</span><span class="p">:</span> <span class="s1">&#39;C&#39;</span> <span class="p">}</span>

<span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</code></pre></div><pre><code>dict_items([('x', 'A'), ('y', 'B'), ('z', 'C')])
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#1 自己复制d.items()自己</span>
<span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>
</code></pre></div><pre><code>[('x', 'A'), ('y', 'B'), ('z', 'C')]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#2 对任何一个元素都要进行字符串的拼接操作</span>
<span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>
</code></pre></div><pre><code>['xA', 'yB', 'zC']
</code></pre>
<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>高级语法-理解函数</title>
      <link>https://textdata.cn/blog/basic-10-understand-function/</link>
      <pubDate>Sat, 10 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-10-understand-function/</guid>
      <description>编程就是设计流水线，而函数就是流水线上的某个环节</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=11"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<p>流水线每个环节都有质量要求，只有符合质量规范，才能流通到下一个环节。这样环环相扣，设计好后经过试运营就可以投产了。Python编程也一样，编程序其实也是设计流水线，而函数就是流水线上的一个个的环节。</p>
<p><br><br></p>
<h2 id="函数">函数</h2>
<p>可重复使用的代码块</p>

<figure >
    
        <img src="%e5%87%bd%e6%95%b0.png" width="800" />
    
    
</figure>

<p>def函数常见参数定义&amp;调用方式</p>
<ul>
<li>位置参数</li>
<li>关键词参数</li>
<li>默认参数</li>
</ul>
<p><br><br></p>
<h3 id="位置参数">位置参数</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">hello1</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="k">return</span> <span class="s1">&#39;我是</span><span class="si">{0}</span><span class="s1">,今年</span><span class="si">{1}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    
<span class="n">hello1</span><span class="p">(</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
</code></pre></div><pre><code>'我是张三,今年25'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">hello1</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span><span class="s1">&#39;张三&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>'我是25,今年张三'
</code></pre>
<p><br><br></p>
<h3 id="关键词参数">关键词参数</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">hello2</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="k">return</span> <span class="s1">&#39;我是</span><span class="si">{0}</span><span class="s1">,今年</span><span class="si">{1}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    
    
<span class="n">hello2</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
</code></pre></div><pre><code>'我是张三,今年25'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">hello2</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;张三&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>'我是张三,今年25'
</code></pre>
<p><br><br></p>
<h3 id="默认参数">默认参数</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">hello3</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">gender</span><span class="o">=</span><span class="s1">&#39;男&#39;</span><span class="p">):</span>
    <span class="k">return</span> <span class="s1">&#39;我是</span><span class="si">{0}</span><span class="s1">,今年</span><span class="si">{1}</span><span class="s1">, 性别</span><span class="si">{2}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">gender</span><span class="p">)</span>

    
<span class="n">hello3</span><span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
</code></pre></div><pre><code>'我是David,今年25, 性别男'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">hello3</span><span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="n">gender</span><span class="o">=</span><span class="s1">&#39;male&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>'我是David,今年25, 性别male'
</code></pre>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>常用内置函数</title>
      <link>https://textdata.cn/blog/basic-11-built-function/</link>
      <pubDate>Fri, 09 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-11-built-function/</guid>
      <description>常用的内置函数，数学相关函数、类型转化函数、功能函数</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=12"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<p>有三大类内置函数</p>
<ul>
<li>数学相关函数</li>
<li>类型转化函数</li>
<li>功能函数</li>
</ul>
<p><strong>函数名加粗的是都是重点</strong></p>
<p><br><br></p>
<h3 id="数学相关">数学相关</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>例子</th>
<th>运行结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>abs(a)</td>
<td>对a取绝对值</td>
<td>abs(-1)</td>
<td>1</td>
</tr>
<tr>
<td>max(lst)、min(lst)</td>
<td>寻找lst中的最大、最小值</td>
<td>max([3, 2, 9])</td>
<td>9</td>
</tr>
<tr>
<td>sum(lst)</td>
<td>对lst内所有数字求和</td>
<td>sum([3, 2, 9])</td>
<td>14</td>
</tr>
<tr>
<td><strong>sorted(lst， reverse)</strong></td>
<td>对lst排序； 参数reverse为布尔值控制升降序</td>
<td>sorted([3, 2, 9])</td>
<td>[2, 3, 9]</td>
</tr>
<tr>
<td><strong>range(start, end, step)</strong></td>
<td>生成以步长step，生成从start到end的数列,默认step=1，结果取不到end</td>
<td>list(range(1,5))</td>
<td>[1, 2, 3,4]</td>
</tr>
</tbody>
</table>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#取绝对值</span>
<span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><pre><code>1
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#取最大</span>
<span class="nb">max</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
</code></pre></div><pre><code>9
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#取最小</span>
<span class="nb">min</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
</code></pre></div><pre><code>2
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#求和</span>
<span class="nb">sum</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
</code></pre></div><pre><code>14
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#排序</span>
<span class="nb">sorted</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span>
</code></pre></div><pre><code>[2, 3, 9]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#排序(方向调整)</span>
<span class="nb">sorted</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">9</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>[9, 3, 2]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#生成序列</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 3, 5, 7, 9]
</code></pre>
<p><br><br></p>
<h3 id="类型转换">类型转换</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>例子</th>
<th>运行结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>int(string)</td>
<td>将字符串数改为整数型</td>
<td>int(&lsquo;9&rsquo;)</td>
<td>9</td>
</tr>
<tr>
<td>float(int/str)</td>
<td>将int或str改为浮点型</td>
<td>float(9)、float(&lsquo;9&rsquo;)</td>
<td>9.0</td>
</tr>
<tr>
<td>list(iterable)</td>
<td>将可迭代对象为列表。这里的iterable可以为字符串，可以是列表</td>
<td>list(range(1,5))</td>
<td><code>[1,2,3,4] </code></td>
</tr>
<tr>
<td>enumerate(lst)</td>
<td>返回带有索引值的序列seq,<strong>需要list(seq)处理后才能看到seq</strong></td>
<td>list(enumerate([&lsquo;a&rsquo;, &lsquo;b&rsquo;, &lsquo;c&rsquo;]))</td>
<td>[(0,&lsquo;a&rsquo;), (1, &lsquo;b&rsquo;), (2, &lsquo;c&rsquo;)]</td>
</tr>
<tr>
<td>tuple(lst)</td>
<td>将lst变为tuple</td>
<td>tuple([1,2,3])</td>
<td>(1,2,3)</td>
</tr>
<tr>
<td>set(lst)</td>
<td>将lst变为集合</td>
<td>set([1,4,4,4,3])</td>
<td>{1,3,4}</td>
</tr>
</tbody>
</table>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="mi">9</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">9</span>

<span class="n">a</span><span class="o">+</span><span class="n">b</span>
</code></pre></div><pre><code>18
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#变转化为整数</span>
<span class="nb">int</span><span class="p">(</span><span class="s1">&#39;9&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>9
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#转化为小数</span>
<span class="nb">float</span><span class="p">(</span><span class="s1">&#39;9&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>9.0
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">float</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</code></pre></div><pre><code>9.0
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#转化为列表</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 2, 3, 4]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#给列表中每个元素分配一个索引值</span>
<span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="s1">&#39;王五&#39;</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">names</span><span class="p">))</span>
</code></pre></div><pre><code>[(0, '张三'), (1, '李四'), (2, '王五')]
</code></pre>
<p><br><br></p>
<h3 id="功能函数">功能函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>例子</th>
<th>运行结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>eval(expression)</strong></td>
<td>执行一个字符串表达式</td>
<td>eval(&lsquo;1+1&rsquo;)</td>
<td>2</td>
</tr>
<tr>
<td><strong>zip(lst1,lst2&hellip;)</strong></td>
<td>将lst1,lst2&hellip;合并,返回zip对象。<strong>需要list处理一下zip对象</strong></td>
<td>list(zip([1,2,3],[4,5,6]))</td>
<td>[(1, 4), (2, 5), (3, 6)]</td>
</tr>
<tr>
<td><strong>type(x)</strong></td>
<td>查看X的类型</td>
<td>type(&lsquo;2&rsquo;)</td>
<td>&lt;class &lsquo;str&rsquo;&gt;</td>
</tr>
<tr>
<td><strong>help(x)</strong></td>
<td>查看X的相关信息</td>
<td>help([1, 2])</td>
<td>Help on list object..</td>
</tr>
<tr>
<td><strong>map(func, lst)</strong></td>
<td>对lst中的每一个个体都进行func操作</td>
<td>list(map(sum, [[1,1], [1,2]]))</td>
<td>[2, 3]</td>
</tr>
<tr>
<td><strong>print(value, end='\n')</strong></td>
<td>打印value</td>
<td>print(&lsquo;abc&rsquo;)</td>
<td>abc</td>
</tr>
<tr>
<td><strong>open(file， encoding)</strong></td>
<td>打开file文件， encoding是file的文件编码</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h3 id="eval">eval()</h3>
<p>eval(str_expression)</p>
<p>str_expression 是字符串表达式，可以是变量、函数等</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="mi">9</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">9</span>
<span class="n">c</span> <span class="o">=</span> <span class="s1">&#39;a+b&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
</code></pre></div><pre><code>18
a+b
18
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;a+b&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>18
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">d</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">))</span>
</code></pre></div><pre><code>d
hello world
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello python&#39;</span><span class="p">)</span>
    
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello()&#39;</span><span class="p">)</span>

</code></pre></div><pre><code>hello()
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;hello()&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>hello python
</code></pre>
<p><br><br></p>
<h3 id="ziplst1-lst2lst3">zip(lst1, lst2,lst3&hellip;)</h3>
<p>将lst1， lst2， lst3按照顺序进行合并</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;Unique&#39;</span><span class="p">]</span>
<span class="n">sexs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;male&#39;</span><span class="p">,</span> <span class="s1">&#39;femal&#39;</span><span class="p">,</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span> <span class="s1">&#39;male&#39;</span><span class="p">]</span>
<span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">sexs</span><span class="p">,</span> <span class="n">ages</span><span class="p">))</span>
</code></pre></div><pre><code>[('David', 'male', 25),
 ('Mary', 'femal', 22),
 ('Henry', 'male', 30),
 ('Unique', 'male', 40)]
</code></pre>
<p><br><br></p>
<h3 id="typehelp">type/help</h3>
<p>查看数据类型、查看感兴趣对象的介绍</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div><pre><code>list
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">help</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div><pre><code>Help on list object:

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
 |  
.........
 |  append(self, object, /)
 |      Append object to the end of the list.
 |  
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  extend(self, iterable, /)
 |      Extend list by appending elements from the iterable.
 |  
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">type</span><span class="p">(</span><span class="nb">print</span><span class="p">)</span>
</code></pre></div><pre><code>builtin_function_or_method
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">help</span><span class="p">(</span><span class="nb">print</span><span class="p">)</span>
</code></pre></div><pre><code>Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
</code></pre>
<br>
<h3 id="mapfunc-lst映射运算">map(func, lst)映射运算</h3>
<p>将func运算映射到lst上每个元素</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">lst</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]]</span>

<span class="n">res</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">lst</span><span class="p">)</span>
<span class="nb">list</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div><pre><code>[2, 3, 3, 3, 3, 3, 3]
</code></pre>
<p><br><br></p>
<h3 id="printvalue-endn">print(value, end='\n')</h3>
<p>打印value，默认使用换行结束</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">help</span><span class="p">(</span><span class="nb">print</span><span class="p">)</span>
</code></pre></div><pre><code>Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello world!&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello python!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>hello world!
hello python!
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello world!&#39;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello python!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>hello world!	hello python!
</code></pre>
<p><br><br></p>
<p>open(file, mode=&lsquo;r&rsquo;, encoding=None)</p>
<ul>
<li>file 文件路径</li>
<li>mode 操作方式们，最常用的是r和a+。r读取， a+是追加写入</li>
<li>encoding 编码方式 ，常见的文件编码方式主要是utf-8和gbk</li>
</ul>
<p>读取返回io对象</p>
<p>io对象有read()方法</p>
<blockquote>
<p>相对路径</p>
<p>data</p>
</blockquote>
<blockquote>
<p>绝对路径</p>
<p>C:Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data</p>
</blockquote>
<p><strong>建议大家都要用相对路径</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 读取数据</span>
<span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/test.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</code></pre></div><pre><code>'章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 新建文件/在已有的文件内插入内容</span>
<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/test2.txt&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;我在学python，现在是下午五点&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 新建文件/在已有的文件内插入内容</span>
<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/test2.txt&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Life is short, so to learn Python&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 新建文件/在已有的文件内插入内容</span>
<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/test2.txt&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Life is short, so to learn Python&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Life is short, so to learn music&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Life is short, so to learn english&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><p><br><br></p>
<h3 id="重点函数">重点函数</h3>
<ul>
<li><input checked="" disabled="" type="checkbox"> sorted(lst， ascending)</li>
<li><input checked="" disabled="" type="checkbox"> range(start, end, step)</li>
<li><input checked="" disabled="" type="checkbox"> enumerate(lst)</li>
<li><input checked="" disabled="" type="checkbox"> eval(expression)</li>
<li><input checked="" disabled="" type="checkbox"> zip(lst1, lst2..)</li>
<li><input checked="" disabled="" type="checkbox"> map(func, lst)</li>
<li><input checked="" disabled="" type="checkbox"> print(x)</li>
<li><input checked="" disabled="" type="checkbox"> open(file, mode, encoding)</li>
</ul>
<h3 id="了解课程">了解课程</h3>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>内置库-文件路径pathlib库</title>
      <link>https://textdata.cn/blog/basic-12-pathlib/</link>
      <pubDate>Wed, 07 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-12-pathlib/</guid>
      <description>多用于批量读取多个文件，做路径管理之用</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=7"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<p>路径是可以让程序知道待操作的文件在哪里，python中有os和pathlib两个内置的路径库，我们就讲这个名字一看就懂的路径库pathlib。</p>
<br>
<p><br><br></p>
<p>绝对vs相对</p>
<ul>
<li>相对路径 <code>'img'</code></li>
<li>绝对路径  <code>'C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img'</code></li>
</ul>
<p>**注意：**当移动文件夹位置或者将代码分享给朋友使用时，你的代码再次运行就会出错。为了避免这个问题，强烈建议用相对路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pathlib</span>

<span class="c1">#当前代码所在的文件夹的相对路径</span>
<span class="n">pathlib</span><span class="o">.</span><span class="n">Path</span><span class="p">()</span>
</code></pre></div><pre><code>WindowsPath('.')
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="c1">#当前代码所在的文件夹的相对路径</span>
<span class="n">Path</span><span class="p">()</span>
</code></pre></div><pre><code>WindowsPath('.')
</code></pre>
<p><br><br></p>
<h2 id="pathlibpath属性方法">pathlib.Path()属性方法</h2>
<p>**提醒：**下表加粗的都是常用的方法，其他了解即可</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>cwd()</strong></td>
<td style="text-align:left">获取代码所在的当前工作路径</td>
</tr>
<tr>
<td style="text-align:left"><strong>joinpath(&hellip;grandpadir, fatherdir, &hellip;file)</strong></td>
<td style="text-align:left">生成路径</td>
</tr>
<tr>
<td style="text-align:left"><strong>iterdir()</strong></td>
<td style="text-align:left">返回某路径下的文件(夹)目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>glob(pattern)</strong></td>
<td style="text-align:left">返回符合pattern的所有文件的文件路径</td>
</tr>
<tr>
<td style="text-align:left">is_file()</td>
<td style="text-align:left">判断某路径是否为文件，返回布尔值</td>
</tr>
<tr>
<td style="text-align:left">is_dir()</td>
<td style="text-align:left">判断某路径是否为文件夹，返回布尔值</td>
</tr>
<tr>
<td style="text-align:left">exists()</td>
<td style="text-align:left">判断某路径是否存在，返回布尔值</td>
</tr>
<tr>
<td style="text-align:left">mkdir(parents=True, exist_ok=True)</td>
<td style="text-align:left">创建某路径对应的文件夹</td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h3 id="cwd">cwd()</h3>
<p><strong>例</strong>：获取当前代码所在文件夹的绝对路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span>
</code></pre></div><pre><code>WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门')
</code></pre>
<p><br><br></p>
<h3 id="joinpathgrandpadir-fatherdir-file">joinpath(&hellip;grandpadir, fatherdir, &hellip;file)</h3>
<p>把&hellip;grandpadir, fatherdir, &hellip;file加入到某路径中</p>
<br>
<p><strong>例</strong>：获得data文件夹的路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data')
</code></pre>
<br>
<p><strong>例</strong>：获得data/test.txt文件的路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="s1">&#39;test.txt&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt')
</code></pre>
<p><br><br></p>
<h3 id="iterdir">iterdir()</h3>
<p>返回某路径下的文件(夹)目录</p>
<br>
<p>例：获得<strong>02-Python语法入门</strong>文件夹里的所有文件(夹)路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">list</span><span class="p">(</span><span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">iterdir</span><span class="p">())</span>
</code></pre></div><pre><code>[WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/.ipynb_checkpoints'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/01-Python跟英语一样是一门语言.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/02-数据类型之字符串.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/03-数据类型之列表元组集合.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/04-数据类型之字典.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/05-数据类型之布尔值&amp;None.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/06-逻辑语句(if&amp;for&amp;tryexcept).ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/07-列表推导式.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/08-理解函数.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/09-常用内置函数.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/09-常用函数.md'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/10-内置库之文件路径pathlib库.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/11-内置库之csv文件库.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/12. 内置库之正则表达式re库.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/13-初学python常出错误汇总.ipynb'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img')]
</code></pre>
<p><br><br></p>
<h3 id="globpattern">glob(pattern)</h3>
<p>查找某路径内满足pattern的所有文件路径 。</p>
<p><code>pattern='*.*'</code> 匹配任意格式任意名字的文件</p>
<p><code>pattern='*.txt'</code> 匹配出所有的txt文件</p>
<br>
<p><strong>例</strong>：获得data文件夹内的所有的文件路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">list</span><span class="p">(</span><span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;*.*&#39;</span><span class="p">))</span>
</code></pre></div><pre><code>[WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.csv'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.txt'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/twitter_sentiment.csv')]
</code></pre>
<br>
<p><strong>例</strong>：获得data文件夹内的所有的txt额路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">list</span><span class="p">(</span><span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;*.txt&#39;</span><span class="p">))</span>
</code></pre></div><pre><code>[WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt'),
 WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.txt')]
</code></pre>
<br>
<p><strong>例</strong>：获得data/reports内的pdf路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dirs</span> <span class="o">=</span> <span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="s1">&#39;reports&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">iterdir</span><span class="p">()</span>
<span class="n">dirs</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">dirs</span><span class="p">)</span>
<span class="k">for</span> <span class="nb">dir</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
    <span class="n">files</span> <span class="o">=</span> <span class="nb">dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;*.*&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</code></pre></div><pre><code>C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600000\600000_20010901_1.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600004\600004_2006_n.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600004\600004_2006_z.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600007\600007_2001_n.pdf
.......
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600007\600007_2002_1.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\603937\603937_2018_z.pdf
......
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\603937\603937_2019_3.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\603937\603937_2019_z.pdf
</code></pre>
<br>
<p>例**：获得data/reports内的 含有&quot;_n&quot; 额pdf路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dirs</span> <span class="o">=</span> <span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="s1">&#39;reports&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">iterdir</span><span class="p">()</span>
<span class="n">dirs</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">dirs</span><span class="p">)</span>
<span class="k">for</span> <span class="nb">dir</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
    <span class="n">files</span> <span class="o">=</span> <span class="nb">dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;*_n.pdf&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</code></pre></div><pre><code>C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600000\600000_2006_n.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\600000\600000_2008_n.pdf
........
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\601872\601872_2014_n.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\601872\601872_2015_n.pdf
C:\Users\thunderhit\Desktop\Python数据分析入门\02-Python语法入门\data\reports\601872\601872_2016_n.pdf
</code></pre>
<p><br><br></p>
<h3 id="is_file">is_file()</h3>
<p>判断某路径是否为一个文件。返回布尔值：</p>
<ul>
<li>True 真实存在的文件路径</li>
<li>False 不真实存在或者文件夹路径</li>
</ul>
<p><strong>例</strong> &lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt&rsquo;是文件路径？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fpath</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt&#39;</span><span class="p">)</span>
<span class="n">fpath</span><span class="o">.</span><span class="n">is_file</span><span class="p">()</span>
</code></pre></div><pre><code>True
</code></pre>
<br>
<p><strong>例</strong> &lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test222.txt&rsquo;是文件路径？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fpath</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test222.txt&#39;</span><span class="p">)</span>
<span class="n">fpath</span><span class="o">.</span><span class="n">is_file</span><span class="p">()</span>
</code></pre></div><pre><code>False
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fpath</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&#39;</span><span class="p">)</span>
<span class="n">fpath</span><span class="o">.</span><span class="n">is_file</span><span class="p">()</span>
</code></pre></div><pre><code>False
</code></pre>
<p><br><br></p>
<h3 id="is_dir">is_dir()</h3>
<p>判断某路径是否为一个文件夹。返回布尔值，True、False</p>
<p><strong>例</strong>： &lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&rsquo; 是 文件夹路径？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fpath</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&#39;</span><span class="p">)</span>
<span class="n">fpath</span><span class="o">.</span><span class="n">is_dir</span><span class="p">()</span>
</code></pre></div><pre><code>True
</code></pre>
<p><br><br></p>
<h3 id="exists">exists()</h3>
<p>判断某路径是否存在。返回布尔值，True、False</p>
<p>例： &lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&rsquo; 是否存在？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fpath</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data&#39;</span><span class="p">)</span>
<span class="n">fpath</span><span class="o">.</span><span class="n">exists</span><span class="p">()</span>
</code></pre></div><pre><code>True
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fpath</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/datasss&#39;</span><span class="p">)</span>
<span class="n">fpath</span><span class="o">.</span><span class="n">exists</span><span class="p">()</span>
</code></pre></div><pre><code>False
</code></pre>
<br>
<h3 id="mkdirparentstrue-exist_oktrue">mkdir(parents=True, exist_ok=True)</h3>
<p>创建某路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">()</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="s1">&#39;stocks&#39;</span><span class="p">,</span> <span class="s1">&#39;800000&#39;</span><span class="p">)</span>
<span class="n">path</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><br>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>内置库-数据存储csv库</title>
      <link>https://textdata.cn/blog/basic-13-csv/</link>
      <pubDate>Tue, 06 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-13-csv/</guid>
      <description>网络爬虫采数据、文本分析结束时都需要将数据存储哦！</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=14"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<p>在编程中一般不适用excel，而是用一种很像excel的csv来存储数据。而且Excel软件可以打开csv的。</p>
<br>
<br>
<h2 id="一csv存储数据代码步骤">一、csv存储数据代码步骤</h2>
<p>**说明:**代码看不懂没关系，能背过最好。背不过也没关系，能理解代码功能，而且亲自上手调试过，调试正常无误的代码可以加入你的代码笔记本中，然后以后需要的时候复制粘贴修改参数即可</p>
<h3 id="1-1-新建一个csv文件">1. 1 新建一个csv文件</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">csv</span>
<span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;data/test.csv&#39;</span>
<span class="n">csvf</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</code></pre></div><h3 id="12-定义字段名并初始化csv文件为writer">1.2 定义字段名，并初始化csv文件为writer</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">]</span>
<span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
</code></pre></div><h3 id="13-将待存储数据整理为字典格式">1.3 将待存储数据整理为字典格式</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;David&#39;</span><span class="p">,</span>
             <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
</code></pre></div><h3 id="14-用writer往csv中存储数据">1.4 用writer往csv中存储数据</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">test_data</span><span class="p">)</span>
</code></pre></div><h3 id="15-最后记得关闭csv文件">1.5 最后记得关闭csv文件</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">csvf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">csv</span>

<span class="n">csvf</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/test1.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">]</span>
<span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>


<span class="n">csvf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">csv</span>

<span class="n">csvf</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/test2.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">]</span>
<span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>

<span class="n">test_data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;David&#39;</span><span class="p">,</span>
             <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">test_data</span><span class="p">)</span>

<span class="n">csvf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><p><br><br></p>
<h2 id="二很多数据的存储">二、很多数据的存储</h2>
<p>如果很多数据存储时，就可以用之前学到的for循环。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">datas</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">25</span><span class="p">},</span> 
         <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">},</span>
         <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;Henry&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">35</span><span class="p">}]</span>

<span class="n">datas</span>
</code></pre></div><pre><code>[{'name': 'David', 'age': 25},
 {'name': 'Mary', 'age': 30},
 {'name': 'Henry', 'age': 35}]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">csv</span>

<span class="n">csvf</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/test2.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">]</span>
<span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>

<span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">datas</span><span class="p">:</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="n">csvf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>内置库-正则表达式re库</title>
      <link>https://textdata.cn/blog/basic-14-regex/</link>
      <pubDate>Mon, 05 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-14-regex/</guid>
      <description>最难的知识点来了！网络爬虫采数据、文本数据清洗都会用到正则表达式，其中文本清洗用到的最多哦</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=15"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="python语法入门-课件下载">Python语法入门-课件下载</h2>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<p>正则表达式主要用于数据清洗，比如从脏乱差的文本中抽取出自己需要的信息。常见于爬虫和文本分析。</p>
<br>
<h2 id="一正则表达式中的符号">一、正则表达式中的符号</h2>
<p>按照符号的功能，我将其分为三类，一般情况下表达式都是由这三种符号组成的。</p>
<h3 id="11-正则字符">1.1 正则字符</h3>
<p><strong>预警，听不懂看不懂，都不要紧的。不要绞尽脑汁，本节后面会柳暗花明的。</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">正则符号</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">匹配自己时</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\</code></td>
<td style="text-align:left">转义字符。例如， &lsquo;n&rsquo; 匹配字符 &lsquo;n&rsquo;。</td>
<td style="text-align:left"><code>'\n'</code></td>
</tr>
<tr>
<td style="text-align:left"><code>( )</code></td>
<td style="text-align:left">标记一个子表达式的开始和结束位置。</td>
<td style="text-align:left"><code>\(   \)</code></td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">匹配除换行符 <code>\n</code> 之外的任何单字符。</td>
<td style="text-align:left"><code>\. </code></td>
</tr>
<tr>
<td style="text-align:left">|</td>
<td style="text-align:left">|左右两侧均可参与匹配</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">匹配字符串中的单个数字</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">a-zA-Z</td>
<td style="text-align:left">匹配全部英文字符</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">0-9</td>
<td style="text-align:left">匹配全部数字</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>\s</code></td>
<td style="text-align:left">匹配字符串中的<code>\n</code>,<code>\t</code>,<code>空格</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>[]</code></td>
<td style="text-align:left">中括号内任意正则符号均可参与匹配</td>
<td style="text-align:left"><code>\[   \]</code></td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">当在方括号表达式中使用，^对其后的正则表达式进行了反义表达。</td>
<td style="text-align:left"><code>\^</code></td>
</tr>
</tbody>
</table>
<br>
<h3 id="12-限定字符">1.2 限定字符</h3>
<p><strong>提前预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">正则符号</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">匹配自己时</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配前面的子表达式零次或多次。</td>
<td style="text-align:left"><code>\*</code></td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">匹配前面的子表达式零次或一次</td>
<td style="text-align:left">\?</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">匹配前面的子表达式一次或多次。</td>
<td style="text-align:left"><code>\+</code></td>
</tr>
<tr>
<td style="text-align:left">{m}</td>
<td style="text-align:left">n 是一个非负整数。匹配确定的 m 次。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">{m,}</td>
<td style="text-align:left">m 是一个非负整数。至少匹配m 次。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">{m, n}</td>
<td style="text-align:left">m 和 n 均为非负整数，其中m &lt;= n。最少匹配 m 次且最多匹配 n 次。</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<br>
<h3 id="13-定位字符">1.3 定位字符</h3>
<p><strong>预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">正则符号</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">匹配自己时</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配输入字符串的开始位置。</td>
<td style="text-align:left"><code>\^</code></td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配输入字符串的结尾位置</td>
<td style="text-align:left"><code>\$</code></td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配一个单词边界，即字与空格间的位置</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">非单词边界匹配</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h2 id="二re库常用方法">二、re库常用方法</h2>
<p><strong>至暗时刻已过，光明即将到来</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">re库常用函数</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>re.findall(pattern, string)</code></td>
<td style="text-align:left">根据pattern返回匹配结果（列表）</td>
</tr>
</tbody>
</table>
<p>|<code>re.split(pattern, string)</code> |使用pattern分割string，返回列表     <br>
|<code>re.sub(pattern, repl, string)</code>|使用repl替换string中的pattern|</p>
<p><br> <br></p>
<h2 id="三只需要掌握">三、只需要掌握</h2>
<p><strong>万能的百度谷歌+你的尝试，比什么都强大</strong></p>
<ul>
<li>搜索引擎检索到自己需要的正则表达式</li>
<li>最简单最好用表达式<code>(.*?)</code></li>
<li>在<a href="http://c.runoob.com/front-end/854">正则表达式测试网站</a>验证自己的正则表达式</li>
</ul>
<h3 id="31-检索找到自己需要的正则表达式">3.1 检索找到自己需要的正则表达式</h3>
<p>比如我只需要中文，其余字符统统不要。</p>
<p>我会在百度搜<strong>中文正则表达式</strong></p>
<p>发现很多网页中网友提到````，于是</p>
<p><code>[\u4e00-\u9fa5]</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;[</span><span class="se">\u4e00</span><span class="s1">-</span><span class="se">\u9fa5</span><span class="s1">]+&#39;</span>

<span class="n">string</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年。</span><span class="se">\
</span><span class="se"></span><span class="s2">目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。</span><span class="se">\
</span><span class="se"></span><span class="s2">一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">chinese_words</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
<span class="n">chinese_text</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">chinese_words</span><span class="p">)</span>
<span class="n">chinese_text</span>
</code></pre></div><pre><code>'是一门面向对象的编程语言诞生于年目前以广泛应用在网站开发游戏软件开发数据采集机器学习等多个领域一般情况下是的所以说人生苦短我用'
</code></pre>
<br>
<h3 id="32-最简单最好用表达式">3.2 最简单最好用表达式<code>(.*?)</code></h3>
<p><strong><code>(.*?)</code>特别好用，ta的暗号及使用口诀一定要背过</strong></p>
<p><strong>pattern设计步骤：</strong></p>
<p><strong>正则符号</strong>组成<strong>正则表达式</strong>，用于<strong>匹配</strong>需要的字符。</p>
<ol>
<li>找到重复的一致的规律</li>
<li>复制粘贴到pattern中</li>
<li>扣掉<strong>想要的数据</strong></li>
<li>替换为<code>(.*?)</code>  或者<code>相应的正则符号表达式*</code></li>
</ol>
<p>比如现在需要快速挖掘出intros中的姓名、籍贯和年龄</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>


<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;我叫(.*?)，来自(.*?)，今年(.*?)岁。&#39;</span>

<span class="n">intros</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;我叫张三，来自山东，今年25岁。&#39;</span><span class="p">,</span>
          <span class="s1">&#39;我叫李四，来自河北，今年28岁。&#39;</span><span class="p">,</span>
          <span class="s1">&#39;我叫王五，来自河南，今年24岁。&#39;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">intro</span> <span class="ow">in</span> <span class="n">intros</span><span class="p">:</span>
    <span class="n">info</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">intro</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</code></pre></div><pre><code>[('张三', '山东', '25')]
[('李四', '河北', '28')]
[('王五', '河南', '24')]
</code></pre>
<br>
<p><strong>特别需要注意的是pattern中的(.*?)左右两侧必须有字符，否则匹配失败。</strong></p>
<hr>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>


<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;(.*?)，来自(.*?)，今年(.*?)&#39;</span>

<span class="n">intros</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;我叫张三，来自山东，今年25岁。&#39;</span><span class="p">,</span>
          <span class="s1">&#39;我叫李四，来自河北，今年28岁。&#39;</span><span class="p">,</span>
          <span class="s1">&#39;我叫王五，来自河南，今年24岁。&#39;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">intro</span> <span class="ow">in</span> <span class="n">intros</span><span class="p">:</span>
    <span class="n">info</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">intro</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</code></pre></div><pre><code>[('我叫张三', '山东', '')]
[('我叫李四', '河北', '')]
[('我叫王五', '河南', '')]
</code></pre>
<p>由于</p>
<p><code>'(.*?)，来自(.*?)，今年(.*?)'</code></p>
<p>中最左侧和最右侧的<code>(.*?)</code>没有被其他字符左右包裹，导致匹配姓名和年龄失败。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>


<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;叫(.*?)，来自(.*?)，今年(.*?)岁&#39;</span>

<span class="n">intros</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;我叫张三，来自山东，今年25岁。&#39;</span><span class="p">,</span>
          <span class="s1">&#39;我叫李四，来自河北，今年28岁。&#39;</span><span class="p">,</span>
          <span class="s1">&#39;我叫王五，来自河南，今年24岁。&#39;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">intro</span> <span class="ow">in</span> <span class="n">intros</span><span class="p">:</span>
    <span class="n">info</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">intro</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</code></pre></div><pre><code>[('张三', '山东', '25')]
[('李四', '河北', '28')]
[('王五', '河南', '24')]
</code></pre>
<p><br><br></p>
<h2 id="四案例">四、案例</h2>
<h3 id="41-找出文本中出现的年份">4.1 找出文本中出现的年份</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>


<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;\d</span><span class="si">{4}</span><span class="s1">&#39;</span>
<span class="n">string</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年。</span><span class="se">\
</span><span class="se"></span><span class="s2">目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。</span><span class="se">\
</span><span class="se"></span><span class="s2">一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
</code></pre></div><pre><code>['1991']
</code></pre>
<br>
<h3 id="42-resplitpattern-string">4.2 re.split(pattern, string)</h3>
<p>断句</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;；|。&#39;</span>

<span class="n">string</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年；</span><span class="se">\
</span><span class="se"></span><span class="s2">目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。</span><span class="se">\
</span><span class="se"></span><span class="s2">一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">r</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">res</span> <span class="k">if</span> <span class="n">r</span><span class="p">]</span>
<span class="n">res</span>
</code></pre></div><pre><code>['Python是一门面向对象的编程语言，诞生于1991年',
 '目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域',
 '一般情况下Python是Java的20%，所以说人生苦短，我用Python']
</code></pre>
<br>
<h3 id="43-resubpattern-repl-string">4.3 re.sub(pattern, repl, string)</h3>
<p>将数字替换为NUM</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;\d+&#39;</span>

<span class="n">repl</span> <span class="o">=</span> <span class="s1">&#39;NUM&#39;</span>

<span class="n">string</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年。</span><span class="se">\
</span><span class="se"></span><span class="s2">一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">repl</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
</code></pre></div><pre><code>'Python是一门面向对象的编程语言，诞生于NUM年。一般情况下Python是Java的NUM%，所以说人生苦短，我用Python。'
</code></pre>
<br>
<h3 id="44--统一表达">4.4 . 统一表达</h3>
<p>将指代同一个主体的不同表达词语统一为同一个词</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。&#39;</span>

<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;中国铁路工程集团有限公司|中国中铁&#39;</span>

<span class="n">repl</span> <span class="o">=</span> <span class="s1">&#39;中铁&#39;</span>

<span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">repl</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</code></pre></div><pre><code>'中铁成立于1950年3月，总部位于北京。目前中铁已经发展成中国和亚洲最大的多功能综合型建设集团。'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。&#39;</span>

<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;[中国铁路工程集团有限公司|中国中铁]+&#39;</span>

<span class="n">repl</span> <span class="o">=</span> <span class="s1">&#39;中铁&#39;</span>

<span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">repl</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</code></pre></div><pre><code>'中铁成立于1950年3月，总部位于北京。目前中铁已经发展成中铁和亚洲最大的多功能综合型建设中铁。'
</code></pre>
<br>
<h3 id="45-分割文本数据的章节">4.5 分割文本数据的章节</h3>
<p>一二三四五六七八九十零百</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34; 第一篇 Python简介 第二篇 Python入门语法 第三篇 Python网络爬虫 第四篇 文本数据编码 第五篇 数据分析 第六篇 可视化&#34;&#34;&#34;</span>

<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;第[一二三四五六七八九十零百]+篇&#39;</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">r</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">res</span> <span class="k">if</span> <span class="s1">&#39; &#39;</span><span class="o">!=</span><span class="n">r</span><span class="p">]</span>
<span class="n">res</span>
</code></pre></div><pre><code>['Python简介', 'Python入门语法', 'Python网络爬虫', '文本数据编码', '数据分析', '可视化']
</code></pre>
<br>
<h3 id="46-抽取出数字">4.6 抽取出数字</h3>
<p>比如日期数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。&#39;</span>

<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;\d+&#39;</span>

<span class="s1">&#39;-&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
</code></pre></div><pre><code>'1950-3'
</code></pre>
<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
<br>
]]></content:encoded>
    </item>
    
    <item>
      <title>python常见错误及解决办法</title>
      <link>https://textdata.cn/blog/basic-15-common-errors/</link>
      <pubDate>Sun, 04 Apr 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/basic-15-common-errors/</guid>
      <description>人不要在同一个坑跌倒多次！读懂错误提示，轻松学会python</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1eb411h7sP&page=16"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<h2 id="14种常见错误">14种常见错误</h2>
<h3 id="python语法入门-课件下载">Python语法入门-课件下载</h3>
<p><font color="blue" weight="bold"><b>链接: <a href="https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA">https://pan.baidu.com/s/1h1RuWimLicVanK8xCka_xA</a> 提取码: x264</b></font></p>
<br>
<p>学习编程就是在遇到错误、认识错误、解决错误的过程。遇到错误，大家要发挥主观能动性，用自己的英文阅读能力去先读一下英文报错提示，一般情况下错误提示会告诉你是什么类型的错误，错误出在哪一行。</p>
<p>再结合百度谷歌，80%以上的问题都能解决。现在我们了解一下常见的问题都有哪些，如何克服这些问题。</p>
<br>
<h3 id="1-忘记写冒号">1. 忘记写冒号</h3>
<p>在 if、elif、else、for、while、def语句后面忘记添加 <code>:</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="mi">42</span>

<span class="k">if</span> <span class="n">age</span> <span class="o">==</span> <span class="mi">42</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-10-1f5acea116cf&gt;&quot;, line 3
    if age == 42
                ^
SyntaxError: invalid syntax
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="mi">42</span>

<span class="k">if</span> <span class="n">age</span> <span class="o">==</span> <span class="mi">42</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>Hello!
</code></pre>
<p><br><br></p>
<h3 id="2-误用-">2. 误用 <code>=</code></h3>
<p><code>=</code> 是赋值操作，而判断两个值是否相等是 <code>==</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">gender</span> <span class="o">=</span> <span class="s1">&#39;男&#39;</span>

<span class="k">if</span> <span class="n">gender</span> <span class="o">=</span> <span class="s1">&#39;男&#39;</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Man&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-12-c3ceea5a9004&gt;&quot;, line 3
    if gender = '男':
              ^
SyntaxError: invalid syntax
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">gender</span> <span class="o">=</span> <span class="s1">&#39;男&#39;</span>

<span class="k">if</span> <span class="n">gender</span> <span class="o">==</span> <span class="s1">&#39;男&#39;</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Man&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>Man
</code></pre>
<p><br><br></p>
<h3 id="3-错误的缩进">3. 错误的缩进</h3>
<p>Python用缩进区分代码块，常见的错误用法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello!&#39;</span><span class="p">)</span>
 <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Howdy!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-14-784bdb6e1df5&gt;&quot;, line 2
    print('Howdy!')
    ^
IndentationError: unexpected indent
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello!&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Howdy!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>Hello!
Howdy!
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">num</span> <span class="o">=</span> <span class="mi">25</span>
<span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">25</span><span class="p">:</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-16-8e4debcdf119&gt;&quot;, line 3
    print('Hello!')
        ^
IndentationError: expected an indented block
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">num</span> <span class="o">=</span> <span class="mi">25</span>
<span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">25</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>Hello!
</code></pre>
<p><br><br></p>
<h3 id="4-变量没有定义">4. 变量没有定义</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;New York&#39;</span><span class="p">,</span> <span class="s1">&#39;Bei Jing&#39;</span><span class="p">,</span> <span class="s1">&#39;Tokyo&#39;</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;This is a mega city&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-21-d91d0b36da73&gt; in &lt;module&gt;
----&gt; 1 if c in ['New York', 'Bei Jing', 'Tokyo']:
      2     print('This is a mega c')


NameError: name 'c' is not defined
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">city</span> <span class="o">=</span><span class="s1">&#39;New York&#39;</span>
<span class="k">if</span> <span class="n">city</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;New York&#39;</span><span class="p">,</span> <span class="s1">&#39;Bei Jing&#39;</span><span class="p">,</span> <span class="s1">&#39;Tokyo&#39;</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;This is a mega city&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>This is a mega city
</code></pre>
<p><br><br></p>
<h3 id="5-中英文输入法导致的错误">5. 中英文输入法导致的错误</h3>
<ul>
<li>英文冒号</li>
<li>英文括号</li>
<li>英文逗号</li>
<li>英文单双引号</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="mi">5</span><span class="o">&gt;</span><span class="mi">3</span><span class="err">：</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;5比3大&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-23-47f8b985b82d&gt;&quot;, line 1
    if 5&gt;3：
          ^
SyntaxError: invalid character in identifier
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="mi">5</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;5比3大&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>5比3大
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">spam</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="err">，</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-26-a003060d051a&gt;&quot;, line 1
    spam = [1, 2， 3]
                ^
SyntaxError: invalid character in identifier
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">spam</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">spam</span>
</code></pre></div><pre><code>[1, 2, 3]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="mi">5</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;5比3大’)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-30-ac2e4eb87092&gt;&quot;, line 2
    print('5比3大’)
                 ^
SyntaxError: EOL while scanning string literal
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="mi">5</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;5比3大&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>5比3大
</code></pre>
<p><br><br></p>
<h3 id="6-不同数据类型的拼接">6. 不同数据类型的拼接</h3>
<p>同种数据类型  <strong>字符串/列表/元组</strong>   支持拼接</p>
<p><strong>字典/集合</strong>不支持拼接</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;I have &#39;</span> <span class="o">+</span> <span class="mi">12</span> <span class="o">+</span> <span class="s1">&#39; eggs.&#39;</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-32-20c7c89a2ec6&gt; in &lt;module&gt;
----&gt; 1 'I have ' + 12 + ' eggs.'


TypeError: can only concatenate str (not &quot;int&quot;) to str
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;I have </span><span class="si">{}</span><span class="s1"> eggs.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
</code></pre></div><pre><code>'I have 12 eggs.'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;def&#39;</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-35-0e8919333d6b&gt; in &lt;module&gt;
----&gt; 1 ['a', 'b', 'c']+'def'


TypeError: can only concatenate list (not &quot;str&quot;) to list
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-36-90742621216d&gt; in &lt;module&gt;
----&gt; 1 ('a', 'b', 'c')+['a', 'b', 'c']


TypeError: can only concatenate tuple (not &quot;list&quot;) to tuple
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">set</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">])</span><span class="o">+</span><span class="nb">set</span><span class="p">([</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-37-ddf5fb1e6c8c&gt; in &lt;module&gt;
----&gt; 1 set(['a', 'b', 'c'])+set(['d', 'e'])


TypeError: unsupported operand type(s) for +: 'set' and 'set'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">grades1</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Mary&#39;</span><span class="p">:</span><span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;Henry&#39;</span><span class="p">:</span><span class="mi">77</span><span class="p">}</span>
<span class="n">grades2</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;David&#39;</span><span class="p">:</span><span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;Unique&#39;</span><span class="p">:</span><span class="mi">89</span><span class="p">}</span>

<span class="n">grades1</span><span class="o">+</span><span class="n">grades2</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-38-1b1456844331&gt; in &lt;module&gt;
      2 grades2 = {'David':88, 'Unique':89}
      3 
----&gt; 4 grades1+grades2


TypeError: unsupported operand type(s) for +: 'dict' and 'dict'
</code></pre>
<p><br><br></p>
<h3 id="7-索引位置问题">7. 索引位置问题</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">spam</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="s1">&#39;dog&#39;</span><span class="p">,</span> <span class="s1">&#39;mouse&#39;</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">spam</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

IndexError                                Traceback (most recent call last)

&lt;ipython-input-41-e0a79346266d&gt; in &lt;module&gt;
      1 spam = ['cat', 'dog', 'mouse']
----&gt; 2 print(spam[5])


IndexError: list index out of range
</code></pre>
<p><br><br></p>
<h3 id="8-使用字典中不存在的键">8. 使用字典中不存在的键</h3>
<p>在字典对象中访问 key 可以使用 <code>[]</code>，</p>
<p>但是如果该 key 不存在，就会导致：KeyError: &lsquo;zebra&rsquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">spam</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;cat&#39;</span><span class="p">:</span> <span class="s1">&#39;Zophie&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;dog&#39;</span><span class="p">:</span> <span class="s1">&#39;Basil&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;mouse&#39;</span><span class="p">:</span> <span class="s1">&#39;Whiskers&#39;</span><span class="p">}</span>

<span class="nb">print</span><span class="p">(</span><span class="n">spam</span><span class="p">[</span><span class="s1">&#39;zebra&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-42-92c9b44ff034&gt; in &lt;module&gt;
      3         'mouse': 'Whiskers'}
      4 
----&gt; 5 print(spam['zebra'])


KeyError: 'zebra'
</code></pre>
<p>为了避免这种情况，可以使用 get 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">spam</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;cat&#39;</span><span class="p">:</span> <span class="s1">&#39;Zophie&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;dog&#39;</span><span class="p">:</span> <span class="s1">&#39;Basil&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;mouse&#39;</span><span class="p">:</span> <span class="s1">&#39;Whiskers&#39;</span><span class="p">}</span>

<span class="nb">print</span><span class="p">(</span><span class="n">spam</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;zebra&#39;</span><span class="p">))</span>
</code></pre></div><pre><code>None
</code></pre>
<p>key 不存在时，get 默认返回 None</p>
<br>
<br>
<h3 id="9-忘了括号">9. 忘了括号</h3>
<p>当函数中传入的是函数或者方法时，容易漏写括号</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">spam</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;cat&#39;</span><span class="p">:</span> <span class="s1">&#39;Zophie&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;dog&#39;</span><span class="p">:</span> <span class="s1">&#39;Basil&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;mouse&#39;</span><span class="p">:</span> <span class="s1">&#39;Whiskers&#39;</span><span class="p">}</span>

<span class="nb">print</span><span class="p">(</span><span class="n">spam</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;zebra&#39;</span><span class="p">)</span>  <span class="c1">#end of funtion</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-44-d105cc86097c&gt;&quot;, line 5
    print(spam.get('zebra')  #end of funtion
                                            ^
SyntaxError: unexpected EOF while parsing
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">spam</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;cat&#39;</span><span class="p">:</span> <span class="s1">&#39;Zophie&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;dog&#39;</span><span class="p">:</span> <span class="s1">&#39;Basil&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;mouse&#39;</span><span class="p">:</span> <span class="s1">&#39;Whiskers&#39;</span><span class="p">}</span>

<span class="nb">print</span><span class="p">(</span><span class="n">spam</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;zebra&#39;</span><span class="p">))</span> 
</code></pre></div><pre><code>None
</code></pre>
<p><br><br></p>
<h3 id="10-漏传参数">10. 漏传参数</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">diyadd</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="o">+</span><span class="n">z</span>

<span class="n">diyadd</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-46-7184f3f906ca&gt; in &lt;module&gt;
      2     return x+y+z
      3 
----&gt; 4 diyadd(1, 2)


TypeError: diyadd() missing 1 required positional argument: 'z'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">diyadd</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div><pre><code>7
</code></pre>
<p><br><br></p>
<h3 id="11-缺失依赖库">11. 缺失依赖库</h3>
<p>电脑中没有相关的库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">packagename</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

ModuleNotFoundError                       Traceback (most recent call last)

&lt;ipython-input-48-6d7d6f569116&gt; in &lt;module&gt;
----&gt; 1 import packagename


ModuleNotFoundError: No module named 'packagename'
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">packagename</span>
</code></pre></div><p><br><br></p>
<h3 id="12-使用了python中的关键词">12. 使用了python中的关键词</h3>
<p>如try、except、def、class、object、None、True、False等</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">try</span> <span class="o">=</span> <span class="mi">5</span>
<span class="nb">print</span><span class="p">(</span><span class="k">try</span><span class="p">)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-49-508e87fe2ff3&gt;&quot;, line 1
    try = 5
        ^
SyntaxError: invalid syntax
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div><pre><code>5
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="o">=</span> <span class="mi">6</span>
<span class="nb">print</span><span class="p">(</span><span class="n">def</span><span class="p">)</span>
</code></pre></div><pre><code>  File &quot;&lt;ipython-input-51-c797890e9b85&gt;&quot;, line 1
    def = 6
        ^
SyntaxError: invalid syntax
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">d</span> <span class="o">=</span> <span class="mi">6</span>
<span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</code></pre></div><pre><code>6
</code></pre>
<br>
<br>
<h3 id="13-文件编码问题">13. 文件编码问题</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/twitter_sentiment.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><pre><code>UnicodeDecodeError: 'utf-8' codec can't decode bytes in position 7-8: invalid continuation byte
UnicodeDecodeError                        Traceback (most recent call last)

&lt;ipython-input-53-f7ee81cff3e5&gt; in &lt;module&gt;
      1 import pandas as pd
      2 
----&gt; 3 df = pd.read_csv('data/twitter_sentiment.csv')
      4 df.head()
pandas\_libs\parsers.pyx in pandas._libs.parsers._string_box_utf8()
UnicodeDecodeError: 'utf-8' codec can't decode bytes in position 7-8: invalid continuation byte
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#gbk/utf-8只能解决大部分编码问题，但不能解决全部问题</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/twitter_sentiment.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;gbk&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

UnicodeDecodeError                        Traceback (most recent call last)

&lt;ipython-input-55-6aa161f42239&gt; in &lt;module&gt;
      2 
      3 #gbk/utf-8只能解决大部分编码问题，但不能解决全部问题
----&gt; 4 df = pd.read_csv('data/twitter_sentiment.csv', encoding='gbk')
      5 df.head()


c:\users\thunderhit\appdata\local\programs\python\python37-32\lib\site-packages\pandas\io\parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)
    674         )
    675 
-&gt; 1891         self._reader = parsers.TextReader(src, **kwds)
   1892         self.unnamed_cols = self._reader.unnamed_cols
   1893 
   pandas\_libs\parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()
	pandas\_libs\parsers.pyx in pandas._libs.parsers.TextReader._get_header()
	pandas\_libs\parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()
	pandas\_libs\parsers.pyx in pandas._libs.parsers.raise_parser_error()
	UnicodeDecodeError: 'gbk' codec can't decode byte 0xbd in position 10717: 	illegal multibyte sequence
</code></pre>
<p>上面的程序会提示编码错误， 尝试encoding编码参数传入utf-8、gbk，也没有解决问题。</p>
<br>
<h3 id="那怎么找到正确的编码参数呢">那怎么找到正确的编码参数呢？</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">chardet</span>

<span class="c1">#读取为二进制数据</span>
<span class="n">binary_data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/twitter_sentiment.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

<span class="c1">#传给chardet.detect，稍等片刻</span>
<span class="n">chardet</span><span class="o">.</span><span class="n">detect</span><span class="p">(</span><span class="n">binary_data</span><span class="p">)</span>
</code></pre></div><pre><code>{'encoding': 'Windows-1252', 'confidence': 0.7291192008535122, 'language': ''}
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/twitter_sentiment.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;Windows-1252&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ItemID</th>
      <th>Sentiment</th>
      <th>SentimentText</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>is so sad for my APL frie...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>0</td>
      <td>I missed the New Moon trail...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>omg its already 7:30 :O</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>0</td>
      <td>.. Omgaga. Im sooo  im gunna CRy. I'...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>i think mi bf is cheating on me!!!   ...</td>
    </tr>
  </tbody>
</table>
</div>
<p><br><br></p>
<h3 id="14-路径字符串写法">14. 路径字符串写法</h3>
<ul>
<li>Mac&amp;Win 推荐使用 <code>/</code> 写法</li>
<li>如果使用<code>\</code> 写法，安全起见，请换成<code>\\</code>  （Mac不支持<code>\\</code> ）</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">\n
\t
\d
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/test.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</code></pre></div><pre><code>'章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data</span><span class="se">\t</span><span class="s1">est.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</code></pre></div><pre><code>---------------------------------------------------------------------------

OSError                                   Traceback (most recent call last)

&lt;ipython-input-59-d855ed58b500&gt; in &lt;module&gt;
----&gt; 1 open('data\test.txt', encoding='utf-8').read()


OSError: [Errno 22] Invalid argument: 'data\test.txt'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data</span><span class="se">\\</span><span class="s1">test.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</code></pre></div><pre><code>'章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data\Test.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</code></pre></div><pre><code>'章节设计\n\n第一部分  环境配置\n第二部分  快速入门python\n第三部分  网络爬虫\n第四部分  简单的文本分析\n第五部分  进阶文本分析'
</code></pre>
<br>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>causalinference库 | 使用Python做因果推断</title>
      <link>https://textdata.cn/blog/causal_inference/</link>
      <pubDate>Sun, 09 Feb 2020 10:43:10 +0600</pubDate>
      
      <guid>/blog/causal_inference/</guid>
      <description>使用Python做因果推断</description>
      <content:encoded><![CDATA[<p>python虽然与R一样都可以做数据分析，但是在计量方面较为薄弱，python更像是干脏活，清洗数据用的。现在慢慢的python也有一些在计量的包，比如causalinference，这个包可以做因果推断分析。</p>
<h2 id="下载">下载</h2>
<p><a href="causal_inference.zip">click to download the code</a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">causalinference</span>
</code></pre></div><br>
<h2 id="数据导入">数据导入</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data.csv&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p>Run</p>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">y</th>
<th style="text-align:right">istreatment</th>
<th style="text-align:right">x1</th>
<th style="text-align:right">x2</th>
<th style="text-align:right">x3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">4.63639</td>
<td style="text-align:right">1</td>
<td style="text-align:right">-0.355052</td>
<td style="text-align:right">0.441348</td>
<td style="text-align:right">0.908629</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">-1.96549</td>
<td style="text-align:right">0</td>
<td style="text-align:right">-0.81926</td>
<td style="text-align:right">-0.712998</td>
<td style="text-align:right">0.0375631</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">0.581781</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1.39134</td>
<td style="text-align:right">-0.0172917</td>
<td style="text-align:right">-0.804188</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">-2.06729</td>
<td style="text-align:right">0</td>
<td style="text-align:right">-0.831021</td>
<td style="text-align:right">0.49786</td>
<td style="text-align:right">0.349555</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">9.54683</td>
<td style="text-align:right">1</td>
<td style="text-align:right">1.68232</td>
<td style="text-align:right">0.608986</td>
<td style="text-align:right">0.937725</td>
</tr>
</tbody>
</table>
<p>数据描述</p>
<ul>
<li>x1，x2，x3 协变量(控制变量)</li>
<li>y 因变量</li>
<li>istreatment 处置变量D，标注每条数据隶属于treatment或control组。1为treatment， 0为control。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">causalinference</span> <span class="kn">import</span> <span class="n">CausalModel</span>

<span class="n">Y</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
<span class="n">D</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;istreatment&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span><span class="s1">&#39;x1&#39;</span><span class="p">,</span> <span class="s1">&#39;x2&#39;</span><span class="p">,</span> <span class="s1">&#39;x3&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">values</span>

<span class="c1">#CausalModel参数依次为Y， D， X。其中Y为因变量</span>
<span class="n">causal</span> <span class="o">=</span> <span class="n">CausalModel</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span>
<span class="n">causal</span>
</code></pre></div><p>Run</p>
<pre><code>&lt;causalinference.causal.CausalModel at 0x7fd3ad0edee0&gt;
</code></pre>
<br>
<h2 id="描述性统计分析">描述性统计分析</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">causal</span><span class="o">.</span><span class="n">summary_stats</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>Summary Statistics

                      Controls (N_c=2509)        Treated (N_t=2491)             
       Variable         Mean         S.d.         Mean         S.d.     Raw-diff
--------------------------------------------------------------------------------
              Y       -1.012        1.742        4.978        3.068        5.989

                      Controls (N_c=2509)        Treated (N_t=2491)             
       Variable         Mean         S.d.         Mean         S.d.     Nor-diff
--------------------------------------------------------------------------------
             X0       -0.343        0.940        0.336        0.961        0.714
             X1       -0.347        0.936        0.345        0.958        0.730
             X2       -0.313        0.940        0.306        0.963        0.650
</code></pre>
<p>causal.summary_stats含有的指标字段名</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">causal</span><span class="o">.</span><span class="n">summary_stats</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<pre><code>dict_keys(['N', 'K', 'N_c', 'N_t', 'Y_c_mean', 'Y_t_mean', 'Y_c_sd', 'Y_t_sd', 'rdiff', 'X_c_mean', 'X_t_mean', 'X_c_sd', 'X_t_sd', 'ndiff'])
</code></pre>
<br>
<h2 id="使用ols估计处置效应">使用OLS估计处置效应</h2>
<p>估计处置效应最简单的方法是使用OLS方法，</p>
<p><img loading="lazy" src="img/ols.png" alt=""  />
</p>
<p>CausalModel.est_via_ols(adj)</p>
<p>该方法有一个参数adj</p>
<ul>
<li>adj=0  模型未使用X(协变量）</li>
<li>adj=1  模型使用了D(是否为处置组)和X（协变量）。</li>
<li>adj=2  模型使用了D(是否为处置组)、X（协变量）、D与X的交互</li>
<li>adj默认为2</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">causal</span><span class="o">.</span><span class="n">est_via_ols</span><span class="p">(</span><span class="n">adj</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">causal</span><span class="o">.</span><span class="n">estimates</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>Treatment Effect Estimates: OLS

                     Est.       S.e.          z      P&gt;|z|      [95% Conf. int.]
--------------------------------------------------------------------------------
           ATE      3.017      0.034     88.740      0.000      2.950      3.083
           ATC      2.031      0.040     51.183      0.000      1.953      2.108
           ATT      4.010      0.039    103.964      0.000      3.934      4.086
</code></pre>
<p>参数解读</p>
<ul>
<li>ATE  平均处置效应(average treatment eﬀect)</li>
<li>ATC  控制组的平均处置效应(average treatment eﬀect for the controls)</li>
<li>ATT  处置组的平均处置效应(average treatment eﬀect for the treated)</li>
</ul>
<p>你们再试试adj设置为0和1分别运行出什么结果</p>
<br>
<h2 id="倾向得分估计">倾向得分估计</h2>
<p>我们估计处置效应时，很希望处置组和控制组很类似。比如研究受教育水平对个人收入的影响，其他变量如家庭背景、年龄、地区等协变量存在差异，我们希望控制组和处置组的之间的协变量平衡性尽可能的好，这样两个组就会很像，当对这两个组的受教育水平进行操作时，两个组的收入差异可以认为是受教育水平带来的。</p>
<p>让两个组很像，这里就用到倾向得分估计。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">causal</span><span class="o">.</span><span class="n">est_propensity_s</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">causal</span><span class="o">.</span><span class="n">propensity</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>Estimated Parameters of Propensity Score

                    Coef.       S.e.          z      P&gt;|z|      [95% Conf. int.]
--------------------------------------------------------------------------------
     Intercept      0.005      0.035      0.145      0.885     -0.063      0.073
            X1      0.999      0.041     24.495      0.000      0.919      1.079
            X0      1.000      0.041     24.543      0.000      0.920      1.080
            X2      0.933      0.040     23.181      0.000      0.855      1.012
</code></pre>
<br>
<h2 id="分层方法估计处置效应">分层方法估计处置效应</h2>
<p>倾向得分估计，让两个组尽量相似，但实际上这个相似值范围有点大。比如假设受教育水平对个人收入的影响，身高、体重等颜值信息（协变量）其实对收入也是有影响的，那么就应该对人群进行分层，不同颜值水平下受教育水平对个人收入的影响。</p>
<p>分层方法估计CausalModel.stratify_s 自动选择协变量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">causal</span><span class="o">.</span><span class="n">stratify_s</span><span class="p">()</span>  
<span class="nb">print</span><span class="p">(</span><span class="n">causal</span><span class="o">.</span><span class="n">strata</span><span class="p">)</span> 
</code></pre></div><p>Run</p>
<pre><code>Stratification Summary

              Propensity Score         Sample Size     Ave. Propensity   Outcome
   Stratum      Min.      Max.  Controls   Treated  Controls   Treated  Raw-diff
--------------------------------------------------------------------------------
         1     0.001     0.043       153         5     0.024     0.029    -0.049
         2     0.043     0.069       148         8     0.056     0.059     0.142
         3     0.070     0.118       283        29     0.093     0.092     0.953
         4     0.119     0.178       268        45     0.147     0.147     1.154
         5     0.178     0.240       247        65     0.208     0.210     1.728
         6     0.240     0.361       451       174     0.299     0.300     2.093
         7     0.361     0.427       196       117     0.393     0.395     2.406
         8     0.427     0.499       153       159     0.465     0.464     2.868
         9     0.499     0.532        82        75     0.515     0.515     2.973
        10     0.532     0.568        65        91     0.551     0.553     3.259
        11     0.568     0.630       114       198     0.600     0.601     3.456
        12     0.630     0.758       180       445     0.693     0.696     3.918
        13     0.758     0.818        77       236     0.787     0.789     4.503
        14     0.818     0.876        57       255     0.845     0.849     4.937
        15     0.876     0.933        23       289     0.904     0.904     5.171
        16     0.933     0.998        12       300     0.957     0.963     6.822
</code></pre>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>当cnsenti遇上streamlit</title>
      <link>https://textdata.cn/blog/cnsenti_streamlit/</link>
      <pubDate>Thu, 07 Jun 2018 10:40:10 +0600</pubDate>
      
      <guid>/blog/cnsenti_streamlit/</guid>
      <description>streamlit是web包，cnsenti是文本分析包，两者结合即可制造在线文本分析网站。</description>
      <content:encoded><![CDATA[<h1 id="cnsentidemo">cnsentiDemo</h1>
<p>这是使用streamlit库将中文情感分析[<strong>cnsenti</strong> 部署到网络世界，可<strong>在线提供简单的中文文本的情绪及情感计算</strong>。</p>
<p><strong>streamlit库</strong>(<a href="https://docs.streamlit.io/en/stable/">https://docs.streamlit.io/en/stable/</a>)， 是目前简单易用的数据可视化web框架，比flask和django少了很多的扩展性，但是容易学习上手，适合初学者把玩。</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=bv17V411H7sZ&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<p><a href="https://cnsenti.herokuapp.com/"><strong>Demo</strong></a>
<img loading="lazy" src="img/%e6%95%88%e6%9e%9c%e5%9b%be.png" alt=""  />
</p>
<p><br><br></p>
<h1 id="网站">网站</h1>
<p>现在技术有限，该网站大致内容分为三部分</p>
<ul>
<li>准备数据</li>
<li>数据分析
<ul>
<li>情感分析</li>
<li>词云图</li>
</ul>
</li>
<li>谢谢支持</li>
</ul>
<p><br><br></p>
<h1 id="本地使用">本地使用</h1>
<p>本网站的<strong>cnsentiDemo项目文件夹</strong>的文件有</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">- main.py
- cnsenti_example.csv
- 大邓和他的Python.png
- requirements.txt
- 其他文件
</code></pre></div><p>将cnsentiDemo项目下载，在<strong>电脑本地离线使用cnsenti的方法</strong></p>
<ol>
<li><a href="cnsentiDemo.zip">下载解压到桌面desktop</a></li>
<li>命令行, 执行 <code>cd desktop/cnsentiDemo</code></li>
<li>命令行，执行 <code>pip3 install -r requirements.txt</code></li>
<li>命令行, 执行 <code>streamlit run main.py</code></li>
<li>根据命令行的提示，复制粘贴网址到桌面。我这里是 <code>**http://localhost:8501**</code></li>
<li>浏览器打开效果就会与视频等同</li>
</ol>
<p>上述过程中，Mac和Win会有一些缺点导致无法使用，需要根据命令行提示解决各自系统的小问题，例如</p>
<ol>
<li>Win需要使用64位的Python</li>
<li>Mac可能需要安装Xcode-install</li>
<li>其他可能的问题</li>
</ol>
<p><br><br></p>
<h1 id="web部署方法">Web部署方法</h1>
<p>如果想将自己的streamlit项目部署成网站，可以使用Heroku和github帮助你完成人生第一个小网站。操作方法：</p>
<ol>
<li>将写好的streamlit项目上传至github自有仓库</li>
<li>Heroku注册账号</li>
<li>点击Heroku网页右上角New， 选择Create new app</li>
<li>绑定github，连接github里的streamlit项目</li>
<li>部署</li>
</ol>
<p>部署方法也可参考  <a href="https://www.youtube.com/watch?v=zK4Ch6e1zq8&amp;list=PLtqF5YXg7GLmCvTswG32NqQypOuYkPRUE&amp;index=5">Youtube视频</a></p>
<br>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐系统与协同过滤、奇异值分解</title>
      <link>https://textdata.cn/blog/svd_in_recommendation_system/</link>
      <pubDate>Thu, 07 Jun 2018 10:40:10 +0600</pubDate>
      
      <guid>/blog/svd_in_recommendation_system/</guid>
      <description>通过网络中留下的痕迹，例如观影记录，挖掘人潜在的偏好向量，进而物以类聚人以群分，开展个性化推荐Through the traces left in the network, such as movie viewing records, the potential preference vectors of people are mined, and then people are grouped together to carry out personalized recommendations</description>
      <content:encoded><![CDATA[<p>昨天我从PyData2018发现一个视频，讲如何在数据缺失的情况下挖掘出用户和产品的特征向量, 用于产品推荐系统。</p>
<blockquote>
<p>Daniel Pyrathon - A practical guide to Singular Value Decomposition in Python PyCon2018</p>
</blockquote>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/d7iIb_XVkZs" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>如果视频无法观看，可以前往<a href="https://v.qq.com/x/page/i0679novb10.html">腾讯视频</a></p>
<br>
<h1 id="一预备知识">一、预备知识</h1>
<h2 id="11-协同过滤">1.1 协同过滤</h2>
<p>日常生活中，像亚马逊、淘宝、京东、今日头条等各大互联网公司会无时不刻的收集我们的网络用户行为数据，并根据积累的历史行为数据对我们推送推荐内容或者推荐商品。这就是我们不曾感受到存在的推荐算法所起到的作用，这之中比较常见的实现方式是<strong>协同过滤</strong>（Collaberative Filtering）。数据设计到用户、产品及产品评价三种信息，数据类似于下图
<img loading="lazy" src="img/01-%e7%94%a8%e6%88%b7%e8%af%84%e5%88%86%e4%bf%a1%e6%81%af.png" alt=""  />
</p>
<br>
<h2 id="12-相似的人更容易做相似的事">1.2 相似的人更容易做相似的事</h2>
<p>协同过滤的核心想法是相似的人往往会做相似的事情。比如，A 和 B 是两个崇尚科技的人（相似信息源于大量的观影数据），而 B 喜欢 看科幻片 ，那么我们猜测 A 也喜欢 科幻片。
<img loading="lazy" src="img/02-%e7%94%a8%e6%88%b7%e8%af%84%e5%88%86%e7%9f%a9%e9%98%b5.png" alt=""  />

<img loading="lazy" src="img/03-%e9%a2%84%e6%b5%8b%e7%94%a8%e6%88%b7%e5%af%b9%e7%94%b5%e5%bd%b1%e7%9a%84%e5%96%9c%e5%a5%bd.png" alt=""  />
</p>
<br>
<h2 id="13-问题提出">1.3 问题提出</h2>
<p>上面我们展示的用户电影可视化图，实际上就是推荐算法中经常用到的<strong>用户-评价矩阵</strong>,</p>
<ul>
<li>那么我们如何对矩阵进行计算，才能获取相似性信息？</li>
<li>有了相似性信息我们又如何去利用相似性信息去做产品推荐？</li>
<li>我们知道两个向量通过余弦相似计算就可以得出两个向量的近似程度，那么这些向量我们又该如何从<strong>用户-评价矩阵</strong>提取呢？</li>
</ul>
<br>
<h2 id="14-奇异值分解svd">1.4 奇异值分解SVD</h2>
<p>这就用到奇异值分解（Singular Value Decompositon），简称SVD。具体怎么提取不是我们本文的重点，Python都帮我们实现了，我们只需要稍微了解下SVD，就直接上手用。</p>
<p>比如我们现在有了<strong>用户-评价矩阵</strong>
<img loading="lazy" src="img/04-%e7%94%a8%e6%88%b7%e8%af%84%e4%bb%b7%e7%9f%a9%e9%98%b5.png" alt=""  />
</p>
<br>
<p>给定一个矩阵，我们都可以分解得到两种矩阵，一种是用户信息矩阵，一种是评价信息（产品）矩阵。这两种矩阵在本例中使用了n_features = 2，即对于用户向量或者产品评价向量长度均为2，实际上也可以为其他数字（比如3，4。。）
<img loading="lazy" src="img/05-%e4%b8%a4%e7%a7%8d%e7%9f%a9%e9%98%b5.png" alt=""  />
</p>
<p>那么User1对于蓝色电影的喜欢程度是可以通过向量计算得出3.52
<img loading="lazy" src="img/06-%e9%a2%84%e6%b5%8b%e8%ae%a1%e7%ae%97.png" alt=""  />
</p>
<br>
<h2 id="15-用户相似性">1.5 用户相似性</h2>
<p>如下图，在二维坐标中我们可以看出不同用户间的相似度。
<img loading="lazy" src="img/07-%e7%94%a8%e6%88%b7%e7%9b%b8%e4%bc%bc%e5%ba%a6.png" alt=""  />
</p>
<p><br><br></p>
<h1 id="二项目实战">二、项目实战</h1>
<p>我们将使用Python的surprise库，对MovieLens数据集构建一个简单的协同过滤推荐系统。</p>
<p>安装方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">scikit</span><span class="o">-</span><span class="n">surprise</span>
</code></pre></div><p>如果你的anaconda自带jupyter notebook。那么你可能需要使用下面的安装方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">conda</span> <span class="n">install</span> <span class="o">-</span><span class="n">c</span> <span class="n">conda</span><span class="o">-</span><span class="n">forge</span> <span class="n">scikit</span><span class="o">-</span><span class="n">surprise</span>
</code></pre></div><p>从安装名我们发现其余scikit的特殊关系，所以熟悉scikit的同学看本文会比较轻松。</p>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="svd_in_recommendation_system.zip">点击下载</a></p>
<br>
## 2.1 准备数据
MovieLens数据集含有1000个用户的100000个观影评分记录。其中我们只需要使用该数据集中的u.data文件，该文件以行存储，每一行包括``userID itemID rating timestamp``,且各个字段之间以``\t``间隔。部分数据如下
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;196\t242\t3\t881250949\n&#39;, 
&#39;186\t302\t3\t891717742\n&#39;, 
&#39;22\t377\t1\t878887116\n&#39;, 
&#39;244\t51\t2\t880606923\n&#39;, 
&#39;166\t346\t1\t886397596\n&#39;]
</code></pre></div><br>
<h2 id="22-切割数据">2.2 切割数据</h2>
<p>在surprise库中我们可以创建读取器Reader的格式。在本例中，我们使用<code>\t</code>将每行数据分隔后分配给</p>
<p><code>user item rating timestamp</code></p>
<p>定义好Reader格式后，我们使用Dataset对象对数据进行读取操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">surprise</span> <span class="kn">import</span> <span class="n">Reader</span><span class="p">,</span> <span class="n">Dataset</span>

<span class="c1">#定义数据格式</span>
<span class="n">reader</span> <span class="o">=</span> <span class="n">Reader</span><span class="p">(</span><span class="n">line_format</span><span class="o">=</span><span class="s1">&#39;user item rating timestamp&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="c1">#使用reader格式从u.data文件中读取数据</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">Dataset</span><span class="o">.</span><span class="n">load_from_file</span><span class="p">(</span><span class="s1">&#39;u.data&#39;</span><span class="p">,</span> <span class="n">reader</span><span class="o">=</span><span class="n">reader</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="23-交叉检验">2.3 交叉检验</h2>
<p>surprise提供了交叉验证（crossvalidation）的接口，crossvalidation是啥？</p>
<p>我们先看图解释下</p>
<p>一份数据平均的分成5份，如果4份做训练集，1份做测试集。那么当我们训练模型的时候有1/5的数据我们的模型是无法学习的，这就浪费了20%。</p>
<p>但是我们又不能拿把所有的数据经过一次训练，再拿其中训练过的数据去做预测。因为这样会导致准确率a非常高，但放到实践中这个模型的预测准确率实际上是低于a的。</p>
<p>所以就有了crossvalidation交叉检验。我们一份数据训练5次，每次完整的数据分成4份训练1份测试。这样就解决了上面遇到的问题。如下图</p>
<p><img loading="lazy" src="img/08-crossvalidation.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#n_folds=5是指数据分成5份，做5次训练预测</span>
<span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">n_folds</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="24-最优化optimization">2.4 最优化Optimization</h2>
<p>训练怎么达到最优，那就要有Optimization，也就是要有一个可供参考的标准。</p>
<p>训练的方式与其他机器学习方法类似，要使得一种算法试图优化其<strong>预测值</strong>尽可能接近<strong>真实值</strong>。在协作过滤应用中，我们的算法将尝试预测某个<strong>用户-电影</strong>组合的评级，并将该<strong>预测值</strong>与<strong>真实值</strong>进行比较。 使用经典误差测量如均方根误差（Root mean squared error，RMSE）和平均绝对误差（Mean absolute error，MAE）来测量预测值和真实值之间的差异。</p>
<p>在surprise库中，我们有广泛的算法可供选择，并为每种算法（SVD，NMF，KNN）提供多种参数选择。 就我们的例子而言，我们将使用SVD算法。 优化目标<code>measures</code>采用<code>RMSE', 'MAE</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">surprise</span> <span class="kn">import</span> <span class="n">SVD</span><span class="p">,</span> <span class="n">evaluate</span>

<span class="c1">#相当于scikit的机器学习算法的初始化</span>
<span class="n">svd</span> <span class="o">=</span> <span class="n">SVD</span><span class="p">()</span>

<span class="c1">#相当于scikit中的score，模型评估</span>
<span class="n">evaluate</span><span class="p">(</span><span class="n">svd</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">measures</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;RMSE&#39;</span><span class="p">,</span> <span class="s1">&#39;MAE&#39;</span><span class="p">])</span>
</code></pre></div><p>Run</p>
<pre><code>Evaluating RMSE, MAE of algorithm SVD.

------------
Fold 1
RMSE: 0.9324
MAE:  0.7346
------------
Fold 2
RMSE: 0.9422
MAE:  0.7423
------------
Fold 3
RMSE: 0.9367
MAE:  0.7398
------------
Fold 4
RMSE: 0.9310
MAE:  0.7323
------------
Fold 5
RMSE: 0.9393
MAE:  0.7422
------------
------------
Mean RMSE: 0.9363
Mean MAE : 0.7382
------------
------------





CaseInsensitiveDefaultDict(list,
                           {'mae': [0.734621556055766,
                             0.7422621194493935,
                             0.7398192302116903,
                             0.7323079165231016,
                             0.7422361108902022],
                            'rmse': [0.9324301825022976,
                             0.9421845177536299,
                             0.9366580726086371,
                             0.9310376368987473,
                             0.9392636694333337]})
</code></pre>
<p>从上面运行结果看，optimizer选用RMSE后，5次训练的平均准确率高达93.63%。</p>
<br>
<h2 id="25-预测">2.5 预测</h2>
<p>最后我们还是很想看看训练出模型，其预测能力到底结果怎么样？</p>
<p>这次我们就做交叉验证了，省事点直接全部丢给SVD去训练</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">surprise</span> <span class="kn">import</span> <span class="n">SVD</span>
<span class="kn">from</span> <span class="nn">surprise</span> <span class="kn">import</span> <span class="n">Reader</span><span class="p">,</span> <span class="n">Dataset</span>

<span class="c1">#读取数据</span>
<span class="n">reader</span> <span class="o">=</span> <span class="n">Reader</span><span class="p">(</span><span class="n">line_format</span><span class="o">=</span><span class="s1">&#39;user item rating timestamp&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">Dataset</span><span class="o">.</span><span class="n">load_from_file</span><span class="p">(</span><span class="s1">&#39;u.data&#39;</span><span class="p">,</span> <span class="n">reader</span><span class="o">=</span><span class="n">reader</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">build_full_trainset</span><span class="p">()</span> 

<span class="c1">#初始化svd模型,用data训练模型</span>
<span class="n">svd</span> <span class="o">=</span><span class="n">SVD</span><span class="p">()</span>
<span class="n">svd</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    &lt;surprise.prediction_algorithms.matrix_factorization.SVD at 0x10ab7d7f0&gt;
</code></pre></div><p>上面的代码</p>
<p>data = data.build_full_trainset()</p>
<p>这一行本来我没有写，但是当我注释掉这一行。出现下面的错误，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">DatasetAutoFolds&#39; object has no attribute &#39;global_mean&#39; on python surprise
</code></pre></div><p>最后在stackoverflow中找到解决办法，需要将data转化为surprise能够用的trainset类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">https://stackoverflow.com/questions/49263964/datasetautofolds-object-has-no-attribute-global-mean-on-python-surprise
</code></pre></div><p>下面继续我们的预测，userid为196，itemid为302， 其真实评分为4。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">userid</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="mi">196</span><span class="p">)</span>
<span class="n">itemid</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="mi">302</span><span class="p">)</span>
<span class="n">actual_rating</span> <span class="o">=</span> <span class="mi">4</span>
<span class="nb">print</span><span class="p">(</span><span class="n">svd</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">userid</span><span class="p">,</span> <span class="mi">302</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</code></pre></div><pre><code>user: 196        item: 302        r_ui = 4.00   est = 3.41   {'was_impossible': False}
</code></pre>
<p>预测值为3.41， 真实值为4。还是相对靠谱的。</p>
<br>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用scipy实现层次聚类分析</title>
      <link>https://textdata.cn/blog/hierarchy_dendrogram_tutorial/</link>
      <pubDate>Fri, 18 May 2018 10:40:10 +0600</pubDate>
      
      <guid>/blog/hierarchy_dendrogram_tutorial/</guid>
      <description>使用scipy实现层次聚类分析</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="hierarchy_dendrogram_code.zip"><strong>click to download</strong></a></p>
<h2 id="实验目的">实验目的</h2>
<p>如果您以前从未使用过树状图，那么使用树状图是查看多维数据如何聚集在一起的好方法。 在这本笔记本中，我将简单探索通过层次分析，借助树状图将其可视化。</p>
<br>
<h2 id="层次分析">层次分析</h2>
<p>层次分析是聚类分析的一种，scipy有这方面的封装包。</p>
<p>linkage函数从字面意思是链接，层次分析就是不断链接的过程，最终从n条数据，经过不断链接，最终聚合成一类，算法就此停止。</p>
<p>dendrogram是用来绘制树形图的函数。</p>
<br>
<h2 id="实验数据">实验数据</h2>
<p>grain_variety是标签，其他列为多种属性的值（特征）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">scipy.cluster.hierarchy</span> <span class="kn">import</span> <span class="n">linkage</span><span class="p">,</span> <span class="n">dendrogram</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">seeds_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;seeds-less-rows.csv&#39;</span><span class="p">)</span>
<span class="n">seeds_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>area</th>
      <th>perimeter</th>
      <th>compactness</th>
      <th>length</th>
      <th>width</th>
      <th>asymmetry_coefficient</th>
      <th>groove_length</th>
      <th>grain_variety</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>14.88</td>
      <td>14.57</td>
      <td>0.8811</td>
      <td>5.554</td>
      <td>3.333</td>
      <td>1.018</td>
      <td>4.956</td>
      <td>Kama wheat</td>
    </tr>
    <tr>
      <th>1</th>
      <td>14.69</td>
      <td>14.49</td>
      <td>0.8799</td>
      <td>5.563</td>
      <td>3.259</td>
      <td>3.586</td>
      <td>5.219</td>
      <td>Kama wheat</td>
    </tr>
    <tr>
      <th>2</th>
      <td>14.03</td>
      <td>14.16</td>
      <td>0.8796</td>
      <td>5.438</td>
      <td>3.201</td>
      <td>1.717</td>
      <td>5.001</td>
      <td>Kama wheat</td>
    </tr>
    <tr>
      <th>3</th>
      <td>19.31</td>
      <td>16.59</td>
      <td>0.8815</td>
      <td>6.341</td>
      <td>3.810</td>
      <td>3.477</td>
      <td>6.238</td>
      <td>Rosa wheat</td>
    </tr>
    <tr>
      <th>4</th>
      <td>17.99</td>
      <td>15.86</td>
      <td>0.8992</td>
      <td>5.890</td>
      <td>3.694</td>
      <td>2.068</td>
      <td>5.837</td>
      <td>Rosa wheat</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#移除文本数据列</span>
<span class="n">varieties</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">seeds_df</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;grain_variety&#39;</span><span class="p">))</span>
<span class="n">varieties</span>
</code></pre></div><pre><code>['Kama wheat',
 'Kama wheat',
 'Kama wheat',
 'Rosa wheat',
 'Rosa wheat',
 'Rosa wheat',
 'Rosa wheat',
 'Rosa wheat',
 'Canadian wheat',
 'Canadian wheat',
 'Canadian wheat',
 'Canadian wheat',
 'Canadian wheat',
 'Canadian wheat']
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">samples</span> <span class="o">=</span> <span class="n">seeds_df</span><span class="o">.</span><span class="n">values</span>
<span class="nb">print</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;samples的维度&#39;</span><span class="p">,</span><span class="n">samples</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div><pre><code>[[14.88   14.57    0.8811  5.554   3.333   1.018   4.956 ]
 [14.69   14.49    0.8799  5.563   3.259   3.586   5.219 ]
 [14.03   14.16    0.8796  5.438   3.201   1.717   5.001 ]
 [19.31   16.59    0.8815  6.341   3.81    3.477   6.238 ]
 [17.99   15.86    0.8992  5.89    3.694   2.068   5.837 ]
 [18.85   16.17    0.9056  6.152   3.806   2.843   6.2   ]
 [19.38   16.72    0.8716  6.303   3.791   3.678   5.965 ]
 [17.36   15.76    0.8785  6.145   3.574   3.526   5.971 ]
 [13.32   13.94    0.8613  5.541   3.073   7.035   5.44  ]
 [11.43   13.13    0.8335  5.176   2.719   2.221   5.132 ]
 [11.26   13.01    0.8355  5.186   2.71    5.335   5.092 ]
 [12.46   13.41    0.8706  5.236   3.017   4.987   5.147 ]
 [11.81   13.45    0.8198  5.413   2.716   4.898   5.352 ]
 [11.23   12.88    0.8511  5.14    2.795   4.325   5.003 ]]
samples的维度 (14, 7)
</code></pre>
<h3 id="使用linkage函数对samples进行层次聚类">使用linkage函数对samples进行层次聚类</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">X = linkage(y, method=&#39;single&#39;, metric=&#39;euclidean&#39;) 
</code></pre></div><p>sacipy中y是距离矩阵，我对此只是傻傻的理解成特征矩阵。 (m*n) m行代表m条记录,n代表n个特征</p>
<p>返回结果X是(m-1)*4的矩阵。 具体含义请看下面的案例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">mergings</span> <span class="o">=</span> <span class="n">linkage</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span>

<span class="c1">#我们发现mergings比samples少一行</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;sample维度&#39;</span><span class="p">,</span><span class="n">samples</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;mergings维度&#39;</span><span class="p">,</span><span class="n">mergings</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div><pre><code>sample维度 (14, 7)
mergings维度 (13, 4)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#层次分析可视化，leaf的字体不旋转，大小为10。</span>
<span class="c1">#这里我们不显示每一条数据的具体名字标签（varieties），默认以数字标签显示</span>
<span class="n">dendrogram</span><span class="p">(</span><span class="n">mergings</span><span class="p">,</span><span class="n">leaf_rotation</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">leaf_font_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="c1">#在图中显示的数字是最细粒度的叶子，相当于每个样本数据点。</span>
</code></pre></div><p><img loading="lazy" src="output_7_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">mergings</span>
</code></pre></div><pre><code>array([[ 3.        ,  6.        ,  0.37233454,  2.        ],
       [11.        , 12.        ,  0.77366442,  2.        ],
       [10.        , 15.        ,  0.89804259,  3.        ],
       [ 5.        , 14.        ,  0.90978998,  3.        ],
       [13.        , 16.        ,  1.02732924,  4.        ],
       [ 0.        ,  2.        ,  1.18832161,  2.        ],
       [ 4.        , 17.        ,  1.28425969,  4.        ],
       [ 7.        , 20.        ,  1.62187345,  5.        ],
       [ 1.        , 19.        ,  2.02587613,  3.        ],
       [ 9.        , 18.        ,  2.13385537,  5.        ],
       [ 8.        , 23.        ,  2.323123  ,  6.        ],
       [22.        , 24.        ,  2.87625877,  9.        ],
       [21.        , 25.        ,  3.12231564, 14.        ]])
</code></pre>
<p>层次分析图从上到下看，依次是枝和叶。</p>
<p>第一列和第二列代表类标签，包含叶子和枝子。</p>
<p>第三列代表叶叶（或叶枝，枝枝）之间的距离</p>
<p>第四列代表该层次类中含有的样本数（记录数）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">X = linkage(y, method=&#39;single&#39;, metric=&#39;euclidean&#39;) 
</code></pre></div><p>method是指计算类间距离的方法,比较常用的有3种:</p>
<p>(1)single:最近邻,把类与类间距离最近的作为类间距</p>
<p>(2)average:平均距离,类与类间所有pairs距离的平均</p>
<p>(3)complete:最远邻,把类与类间距离最远的作为类间距</p>
<p>我们写曾侧分析法函数，看看不同的method从图中有什么区别</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">hierarchy_analysis</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span><span class="n">method</span><span class="o">=</span><span class="s1">&#39;single&#39;</span><span class="p">):</span>
    <span class="n">mergings</span> <span class="o">=</span> <span class="n">linkage</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="n">method</span><span class="p">)</span>

    <span class="n">dendrogram</span><span class="p">(</span><span class="n">mergings</span><span class="p">,</span>
              <span class="n">labels</span><span class="o">=</span><span class="n">varieties</span><span class="p">,</span>
              <span class="n">leaf_rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span>
              <span class="n">leaf_font_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#single</span>
<span class="n">hierarchy_analysis</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span><span class="n">method</span><span class="o">=</span><span class="s1">&#39;single&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="output_12_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#average</span>
<span class="n">hierarchy_analysis</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span><span class="n">method</span><span class="o">=</span><span class="s1">&#39;average&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="output_13_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#complete</span>
<span class="n">hierarchy_analysis</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span><span class="n">method</span><span class="o">=</span><span class="s1">&#39;complete&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="output_14_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">由于数据量比较少</span><span class="err">，</span><span class="n">complete和average方法做出来的图完全一样</span><span class="err">。</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
