[{"content":"Python网络爬虫与文本分析  点击上方图片购买课程   概览 为何要学Python？ 在科学研究中，数据的获取及分析是最重要的也是最棘手的两个环节！\n在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题：\n 网络爬虫技术 解决 如何从网络世界中高效地 采集数据？ 文本分析技术 解决 如何从杂乱的文本数据中抽取文本信息(变量)？  课程纲要  课程目标： 掌握Python语法、网络爬虫、数据分析Pandas、文本分析、机器学习的核心知识点和分析思路 核心知识点： 爬虫原理及应用、 非结构化文本数据挖掘的思路及方法、机器学习应用等 环境配置: 安装Python，注意安装过程中勾选Add python 3.x to PATH 课件资料： 本课程全部使用jupyter notebook文件作为课程课件  课程特色  接地气： 以经管学术需求为导向， 将Python分为语法篇、采集数据篇、文本分析篇、机器学习篇四大部分 好理解： 知识点力求通俗易懂，少了晦涩的计算机术语，多了通俗易懂的使用场景和实战讲解 上手快： 所有知识点均有可重复使用的代码块，犹如一块块的积木，课后您可以根据分析需要，快速搭建出自己的Python代码   点击上方图片购买课程   一、课件下载  课程介绍 Win中的Python配置 Mac中的Python配置  二、Python语法入门  Python跟英语一样是一门语言 数据类型之字符串 数据类型之列表元组集合 数据类型之字典 数据类型之布尔值、None 逻辑语句(if\u0026amp;for\u0026amp;tryexcept) 列表推导式 理解函数 常用的内置函数 内置库文件路径pathlib库 内置库csv文件库 内置库正则表达式re库 初学python常出错误汇总  三、数据采集  网络爬虫原理 网络访问requests库 网页解析pyquery库 案例 1 大众点评 案例 2 豆瓣读书 案例 3 Boss直聘 如何解析json数据 案例 4 豆瓣电影 案例 5 京东商城 案例 6 用爬虫下载文档及多媒体文件 案例 7 上市公司定期报告pdf批量下载 案例 8 上交所招股说明pdf批量下载 案例 9 深交所招股说明pdf批量下载 了解smartscraper爬虫库 爬虫知识点总结  四、数据分析  Pandas基础知识 数据去重与缺失值处理 合并数据 重塑数据 选取表中指定记录(行) 选取表中指定字段(列) 描述性统计 在表中创建新字段(列) 批操作apply与agg 透视表pivot_table 数据分组groupby 时间序列时间点创建 日期数据的dt属性 日期行索引操作(选取指定日期的数据) 时间序列date_range 时间序列重采样resample 时间序列时间窗口rolling 案例 1 Kaggle titanic数据集探索性分析 案例 11 Boss直聘Python岗位分析  五、初识文本分析   文本分析在经管领域中的应用概述\n  读取不同格式文件中的数据\n  实战之如何将多个整理到一个excel中\n  案例 12 中文分词及数据清洗\n  案例 13 词频统计\u0026amp;词云图\n  案例 14 中文情感分析(词典法)\n  案例 15 对excel中的文本进行情感分析\n  案例 16 共现法扩展情感词典(领域词典)\n  案例 17 词向量word2vec扩充领域词典\n  ​\n六、机器学习与文本分析  了解机器学习 使用机器学习做文本分析的流程 scikit-learn机器学习库简介 文本特征抽取(特征工程) 案例 18 在线评论文本分类 使用标注工具对数据进行标注 案例 19 计算文本情感分析(有权重) 案例 20 文本相似性计算 案例 21 使用文本相似性识别变化(政策连续性) 案例 22 Kmeans聚类算法 案例 23 LDA话题模型 文本分析在经管领域中的应用概述   点击上方图片购买课程   相关应用 参照两篇论文的摘要，可以通过场景化等的方式帮助我们迅速理解上面两个问题。摘要部分的加粗内容是论文用到的分析技术，在我们的课程中均有与之对应的知识点和代码。\n王伟,陈伟,祝效国,王洪伟.众筹融资成功率与语言风格的说服性——基于Kickstarter的实证研究[J].管理世界,2016(05):81-98.\n 摘要：众筹融资效果决定着众筹平台的兴衰。众筹行为很大程度上是由投资者的主观因素决定的，而影响主观判断的一个重要因素就是语言的说服性。而这又是一种典型的用 户产生内容（UGC），项目发起者可以采用任意类型的语言风格对项目进行描述。不同的语 言风格会改变投资者对项目前景的感知，进而影响他们的投资意愿。首先，依据 Aristotle 修 辞三元组以及 Hovland 说服模型，采用扎根理论，将众筹项目的语言说服风格分为 5 类：诉诸可信、诉诸情感、诉诸逻辑、诉诸回报和诉诸夸张。\n然后，借助文本挖掘方法，构建说服风格语料库，并对项目摘要进行分类。\n最后，建立语言说服风格对项目筹资影响的计量模型，并对 Kickstarter 平台上的 128345 个项目进行实证分析。总体来说，由于项目性质的差异，不同 的项目类别对应于不同的最佳说服风格。\n 胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.\n 在可持续发展战略导向下，秉持长远理念是企业抵御外部环境威胁和拥有可持续经营能力的基 石。然而，作为企业掌舵人的管理者并非都具有长远的目光。本文基于高层梯队理论和社会心理学中的时间 导向理论，提出了管理者内在的短视主义特质与企业资本支出和研发支出的关系，并采用文本分析和机器学习技术构建出管理者短视主义指标从而对其进行实证检验。研究结果发现，年报 MD\u0026amp;A 中披露的“短期视域” 语言 能够反映管理者内在的短视主义特质，管理者短视会导致企业减少资本支出和研发支出。当公司治理水平、监督型机构投资者的持股比例以及分析师关注度越高时，管理者短视主义对这些长期投资的负向影响越易受到抑制。最终，管理者短视主义导致的研发支出减少和资本投资效率降低会损害企业的未来绩效。本文拓宽了管理者短视主义的行为后果分析，对企业高层次管理人才的聘任以及企业和政府的监管具有重要的实践启示。同时，本文将文本分析和机器学习方法引入管理者短视主义的研究，为未来该领域的研究提供了参考和借鉴。\n Wang, Quan, Beibei Li, and Param Vir Singh. \u0026ldquo;Copycats vs. original mobile apps: A machine learning copycat-detection method and empirical analysis.\u0026rdquo; *Information Systems Research* 29, no. 2 (2018): 273-291.\n 摘要: 尽管移动应用程序市场的增长为移动应用程序开发人员创新提供了巨大的市场机会和经济诱因，但它也不可避免地刺激了模仿者开发盗版软件。原始应用的从业人员和开发人员声称，模仿者窃取了原始应用的想法和潜在需求，并呼吁应用平台对此类模仿者采取行动。令人惊讶的是，很少有严格的研究来分析模仿者是否以及如何影响原始应用的需求。\n进行此类研究的主要威慑因素是缺乏一种客观的方法来识别应用程序是模仿者还是原创者。通过结合自然语言处理，潜在语义分析，基于网络的聚类和图像分析等机器学习技术，我们提出了一种将应用识别为原始或模仿者并检测两种模仿者的方法：欺骗性和非欺骗性。\n根据检测结果，我们进行了经济计量分析，以确定五年间在iOS App Store中发布的5,141个开发人员的10,100个动作游戏应用程序样本中，模仿应用程序对原始应用程序需求的影响。我们的结果表明，特定模仿者对原始应用需求的影响取决于模仿者的质量和欺骗程度。高质量的非欺骗性复制品会对原件产生负面影响。相比之下，低质量，欺骗性的模仿者正面影响了对原件的需求。\n结果表明，从总体上讲，模仿者对原始移动应用程序需求的影响在统计上是微不足道的。我们的研究通过提供一种识别模仿者的方法，并提供模仿者对原始应用需求的影响的证据，为越来越多的移动应用消费文献做出了贡献。\n  点击上方图片购买课程   相关文献 [1]沈艳,陈赟,黄卓．文本大数据分析在经济学和金融学中的应用：一个文献综述[EB/OL].http://www.ccer.pku.edu.cn/yjcg/tlg/242968.htm,2018-11-19\n[2]王伟,陈伟,祝效国,王洪伟. 众筹融资成功率与语言风格的说服性-基于Kickstarter的实证研究.管理世界.2016;5:81-98.\n[3]胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.\n[4]Kai Li, Feng Mai, Rui Shen, Xinyan Yan, Measuring Corporate Culture Using Machine Learning, The Review of Financial Studies,2020\n[5]Kenneth Benoit. July 16, 2019. “Text as Data: An Overview.” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. Handbook of Research Methods in Political Science and International Relations. Thousand Oaks: Sage.\n[6]Loughran T, McDonald B. Textual analysis in accounting and finance: A survey[J]. Journal of Accounting Research, 2016, 54(4): 1187-1230. Author links open overlay panelComputational socioeconomics\n[7]Berger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. \u0026ldquo;Uniting the tribes: Using text for marketing insight.\u0026rdquo; Journal of Marketing 84, no. 1 (2020): 1-25.\n[8]Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. \u0026ldquo;A review of best practice recommendations for text analysis in R (and a user-friendly app).\u0026rdquo; Journal of Business and Psychology 33, no. 4 (2018): 445-459.\n[9]Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. \u0026ldquo;Lazy prices.\u0026rdquo; The Journal of Finance 75, no. 3 (2020): 1371-1415.\n[10]孟庆斌, 杨俊华, 鲁冰. 管理层讨论与分析披露的信息含量与股价崩盘风险——基于文本向量化方法的研究[J]. 中国工业经济, 2017 (12): 132-150.\n[11]Wang, Quan, Beibei Li, and Param Vir Singh. \u0026ldquo;Copycats vs. Original Mobile Apps: A Machine Learning Copycat-Detection Method and Empirical Analysis.\u0026rdquo; Information Systems Research 29.2 (2018): 273-291.\n[12]Hoberg, Gerard, and Gordon Phillips. 2016, Text-based network industries and endogenous product differentiation,?Journal of Political Economy 124, 1423-1465\n[13]Loughran, Tim, and Bill McDonald. \u0026ldquo;When is a liability not a liability? Textual analysis, dictionaries, and 10‐Ks.\u0026rdquo; The Journal of Finance 66, no. 1 (2011): 35-65.\n[14]Fairclough, Norman. 2003. Analysing discourse: Textual analysis for social research (Psychology Press)\n[15]Grimmer, Justin, and Brandon M Stewart. 2013, Text as data: The promise and pitfalls of automatic content analysis methods for political texts, Political analysis21, 267-297.\n","permalink":"/blog/management_python_course/","summary":"Python网络爬虫与文本分析  点击上方图片购买课程   概览 为何要学Python？ 在科学研究中，数据的获取及分析是最重要的也是最棘手的两个环节！\n在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题：\n 网络爬虫技术 解决 如何从网络世界中高效地 采集数据？ 文本分析技术 解决 如何从杂乱的文本数据中抽取文本信息(变量)？  课程纲要  课程目标： 掌握Python语法、网络爬虫、数据分析Pandas、文本分析、机器学习的核心知识点和分析思路 核心知识点： 爬虫原理及应用、 非结构化文本数据挖掘的思路及方法、机器学习应用等 环境配置: 安装Python，注意安装过程中勾选Add python 3.x to PATH 课件资料： 本课程全部使用jupyter notebook文件作为课程课件  课程特色  接地气： 以经管学术需求为导向， 将Python分为语法篇、采集数据篇、文本分析篇、机器学习篇四大部分 好理解： 知识点力求通俗易懂，少了晦涩的计算机术语，多了通俗易懂的使用场景和实战讲解 上手快： 所有知识点均有可重复使用的代码块，犹如一块块的积木，课后您可以根据分析需要，快速搭建出自己的Python代码   点击上方图片购买课程   一、课件下载  课程介绍 Win中的Python配置 Mac中的Python配置  二、Python语法入门  Python跟英语一样是一门语言 数据类型之字符串 数据类型之列表元组集合 数据类型之字典 数据类型之布尔值、None 逻辑语句(if\u0026amp;for\u0026amp;tryexcept) 列表推导式 理解函数 常用的内置函数 内置库文件路径pathlib库 内置库csv文件库 内置库正则表达式re库 初学python常出错误汇总  三、数据采集  网络爬虫原理 网络访问requests库 网页解析pyquery库 案例 1 大众点评 案例 2 豆瓣读书 案例 3 Boss直聘 如何解析json数据 案例 4 豆瓣电影 案例 5 京东商城 案例 6 用爬虫下载文档及多媒体文件 案例 7 上市公司定期报告pdf批量下载 案例 8 上交所招股说明pdf批量下载 案例 9 深交所招股说明pdf批量下载 了解smartscraper爬虫库 爬虫知识点总结  四、数据分析  Pandas基础知识 数据去重与缺失值处理 合并数据 重塑数据 选取表中指定记录(行) 选取表中指定字段(列) 描述性统计 在表中创建新字段(列) 批操作apply与agg 透视表pivot_table 数据分组groupby 时间序列时间点创建 日期数据的dt属性 日期行索引操作(选取指定日期的数据) 时间序列date_range 时间序列重采样resample 时间序列时间窗口rolling 案例 1 Kaggle titanic数据集探索性分析 案例 11 Boss直聘Python岗位分析  五、初识文本分析   文本分析在经管领域中的应用概述","title":"Python网络爬虫与文本分析"},{"content":"活动预告  想随时随地系统学习Python文本分析，可以选择  Python网络爬虫与文本分析 | 2021录播课(虽是录播，但章节更多一些)。   更喜欢有互动感通过直播学习，可以考虑  Python网络爬虫与文本分析 | 2022五一直播    文献 本文全文摘自\n冉雅璇,李志强,刘佳妮,张逸石.大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用[J/OL].南开管理评论:1-27[2022-04-08].http://kns.cnki.net/kcms/detail/12.1288.F.20210905.1337.002.html\n词嵌入亮点 词嵌入技术是文本分析中技术含量较高，可从文本中测量出人类认知信息。而即时是有一定学习能力的人，当阅读大量文本很难察觉文中是否有内置(预置)的信息，如作者的偏见、态度、刻板印象，等人类复杂认知。词嵌入技术可以将这类难以察觉的线索挖掘、测量。\n摘要 在大数据时代的背景下，基于大数据的分析处理技术为以“数据驱动”的社会科学研究创造了新的发 展契机。其中，词嵌入(Word Embeddings)技术借势大数据浪潮，以其高效的词表征能力和强大的迁移学习能力在文本分析领域受到越来越多的关注。不同于传统的文本分析路径，词嵌入技术不仅实现了对非结构化文本数据的表征，还保留了丰富的语义信息，可以实现对跨时间、跨文化文本中深层次文化信息的挖掘， 极大丰富了传统的社会科学实证的研究方法。文章总结了词嵌入技术的基本原理及特点，系统地梳理了词 嵌入技术的六大应用主题：社会偏见、概念联想、语义演变、组织关系、文本情感和个体决策机制。随后， 文章归纳了词嵌入技术的基本应用流程。词嵌入技术还面临文本数据的选择、中文文本的分词处理、单词 语义信息的表征层次三种挑战，文章归纳了相应的应对思路与方法。最后，基于词嵌入技术的强大适应能 力，未来研究可以进一步关注该技术在管理领域的应用前景，包括政策效应评估、用户推荐系统、品牌管 理、企业关系管理、组织内部管理、中国传统智慧与管理问题六个方面。\n关键词: 词嵌入；自然语言处理；文本分析；社会科学；管理领域应用\n\n引言 作为人类开展文化交流和情感沟通的基本载体，语言承担了重要的信息交换功能。借助 于各类语言表达形式，人们将诸如知觉、思维、态度和情感等复杂的心理活动转化成特定的 语言。 而作为语言的典型载体之一，文本既能够在个体层面上反映人们的内心活动，也能 够在组织和社会层面上反映集体文化。 因此，从文本内容挖掘个体深层次的心理活动和 人类社会的文化沿革是社会科学的基本研究路径。\n长期以来，在社会科学尤其是管理学和心理学等领域，实证研究多以针对实验、问卷和结构化的二手数据的量化分析为主导，而对于非结构化的文本材料(如访谈记录)仍以质性分析为主。[5] 在大数据时代，“数据+行为+交叉学科”已成为社会科学发展的必然方向。而计算社会科学的兴起则为我们理解人类行为、探讨社会现象提供了新的研究素材、视角和手段[6] 。随着互联网技术的飞速发展，人们在网络上发表大量包含思维、情感、观点的文本信息，这些井喷式爆发的文本为“以数据驱动”的社会科学研究提供了可及的信息来源。若能对之加以利用，无疑将拓宽社会科学研究的方法。[7 - 9] 然而，社会科学领域的传统文本研究方法以人工编码为主，其时间投入过大、成本较高、客观性相对较弱等不足极大地限制了文本数据 [10] 在实证研究中的应用。 所幸的是，以自然语言处理(Natural Language Processing; NLP)为核心的计算机文本分析技术(Computerized Text Analysis)的发展为大数据文本在社会科学领域 中的应用带来了契机。 “词”作为文本的最小单元，是计算机进行文本分析的基础。在自然语言处理领域，“词” 主要以向量(vector)的形式表示。而词嵌入(Word Embeddings)技术，即是一种可以把高维词 向量映射进低维向量空间，以此来实现词义理解的计算机文本分析技术。相较于其他自然语 言技术，词嵌入技术不仅展现出了高效的学习能力，而且允许计算机从更高的意义单元(即 目标词的上下文)出发理解词义、刻画“词”之间的相对关系，因此逐渐成为了自然语言处理的重要工具，在管理学、心理学等社会科学领域取得了丰富的研究进展。相比于传统的、以人工编码和词频统计为主导的文本分析方式，词嵌入的独特优势在于：\n 借助计算机分析技术，可以在短时间内、以较低成本，实现对大规模文本数据的高效处理； 在挖掘文本特征和理解文本内容时，更多地依赖文本自身的分布规律，具有较强的客观性，其背后“数据驱动”的分析逻辑也使这一技术在探索性研究中具有较大的应用优势； 面对跨时间、跨文化比较的研究话题、以及在挖掘社会学、行为学变量及变量关系等领域展现出广阔的应用前景。  词嵌入技术已在社会科学领域得到了广泛的应用，主要包括：社会偏见 、概念联想[14] 、关系网络和判断机制[16] 等六大主题，大量研究见诸 Nature、Science、PNAS、Academy Management Journal、American Sociological Review、Management Science 等国际期刊。反观国内的社会科学领域，词嵌入方法的应用价值还未得到足够重视和讨论。据此，本文通过介绍词嵌入技术的基本原理、梳理国外社会科学领域对词嵌入的应用情况，以期帮助国内社会科学研究者了解该技术独特的应用价值，推动词嵌入技术在大数据时代背景下对我国社会科学研究方法的丰富和推动。具体而言，本文：\n 梳理了词嵌入技术原理，以帮助学者深入了解词嵌入在文本分析方面的技术优势； 梳理了现有文献中社会科学研究者们利用这一技术的相关应用研究，展现了在面对实际问题时可以如何利用词嵌入技术进行实证分析，以帮助学者了解该技术的适用领域； 总结词嵌入技术的基本应用流程，提供方法指引； 归纳了词嵌入技术面临的三方面挑战 ——文本数据的选择、中文文本的分词处理、语义信息表征，并提出了相应的应对思路； 从政策效应 评估、用户推荐系统、品牌管理、企业关系管理、组织管理与中国传统智慧和管理问题这六个方面出发，探讨词嵌入技术在以管理为代表的社会科学研究中的应用潜力和价值，以期丰富大数据时代背景下我国的管理科学研究方法。  \n一、词嵌入技术的基本原理 不同于基于词频统计的文本分析方法，词嵌入技术的核心特征在于从文本的全局语义信息出发对“词”进行表征学习， 即大规模利用文本中“词”的上下文信息，将文本词汇映射至高维向量空间以实现词的向量化表示，使得词向量之间既保留着“词”在语义层面的关联，又满足向量所适用的代数运算性质。 在此基础上，通过度量词向量之间的几何关系(即“距 离”)便能够刻画“词”在现实语义中的关系。 进一步地，我们利用词与词之间这种可被量化的语义关系来探讨社会科学领域下的概念之间的相似性或相关性，并由此反映特定的社会文化和认知现象，乃至刻画社会、心理变量与其它行为变量间的相关关系。因此，词嵌入技术的应用主要包含两大步骤，即首先利用词嵌入模型从文本数据中获得对“词”的向量表征，再计算词向量距离进行相关性分析。\n1. 1 “词”的向量表征 “词”的向量化表征是计算机进行文本分析的基础，也是词嵌入技术的本质属性。纵观计算机文本分析的历史，词向量的表征方法主要经历了以下两个发展阶段：\n第一个阶段： 假设词语之间相互独立\n 第一个阶段是从词典出发、基于词频统计规则对“词”的离散型表征。例如，热向量编码(one-hot vector)通过\n建立基于目标文本(“猫很可爱，狗也很可爱”)的分词词典({“猫”: 0，“狗”: 1，“也”: 2，“很”: 3，“可爱”: 4})，将每个“词”都表示为一个向量，使其维度与词典长度相当，且每个元素取值为0 或 1。\n“猫” = (1, 0, 0, 0, 0) “狗” = (0, 1, 0, 0, 0) “也” = (0, 0, 1, 0, 0) “很” = (0, 0, 0, 1, 0) “可爱” = (0, 0, 0, 0, 1)) 这一类词表征方法虽然简单直观，但是在面对大规模文本时，词典长度的激增易造成参数空间的“维度灾难”问题(Curse of Dimension)① 。并且，粗糙的信息表征思路忽视了“词”的频率、上下文以及“词”之间的关联，使得这一类词向量无法反映“词”的语义信息。\n第二阶段: 认为词语之间有千丝万缕的联系\n 为了提升词向量的表征质量，Deerwester 等[20] 主张从更高的文本意义单元理解文本词汇的含义。由此，分布式表征(distributional representation)[18] 成为了第二阶段的词表征方法。分布式假设(distributional hypothesis)是分布式表征方法的理论支撑，也是词嵌入技术背后的核心逻辑基础——即上下文相似的“词”拥有相似的或相关的语义，它能够反映了人类的语言使用习惯，也符合人的现实认知逻辑。[16,18,21] 人们倾向于对具有相似或者相关特征的对象产生认知关联，体现在文本层面则是相近的语言表达或高度的共现频率，即相似的上下文语境。基于此，通过分析目标词与其上下文词汇之间的统计分布规律可以学习到目标词的众多文本信息，使得词表征结果囊括文本语境的特征。因此，分布式表征的思想被广泛应用于后续的语义学习中，成为了词嵌入技术的基本逻辑。\n其中，较为出色且经典的是 Mikolov 等人在 2013 年提出的 Word2Vec 模型，[18] 它标志 着 词嵌入模型 的 正 式 诞 生 。除了 Word2Vec 词嵌入模型外， Pennington 等 [23] 提出了同样具有高效学习能力的 GloVe(Global Vectors for Word Representation)学习框架，通过对词共现矩阵的矩阵分解，实 现对“词”的表征。此外，为了提升训练速度、适应海量文本学习，后 多对于词的分布式表征的改进算法，包括：fastText 算法、 谷歌的 ELMo(Embedding from Language Models)语言模型[25] 和 BERT(Bidirectional Encoder Representation from Transform) 语言模型[26]等。\n在将文本信息嵌入进每一个“词”之后，我们获得了“词”的向量表示，即在词向量空间中的位置，而词与词之间的语义关联可以通过向量空间中点与点的位置距离来反映。词嵌入技 [27,28] 术下的向量具有两项重要的几何性质——“聚类”(clustering)和“并行”(parallel)。 其中，\n “聚类”性质是指，现实语义相近的“词”在向量空间中的位置也相近。 例如， “挪威”与“瑞 典”的词向量更接近，而“意大利”和“德国”的词向量更接近。 而“并行”性质是指，向量空 间中的词向量之间满足基本的代数运算性质，且这种运算逻辑基本符合“词”的现实语义逻辑。  [18] 例如，从语义逻辑来看，“国王(King)”和“王后(Queen)”的区别平行于“男人(Man)”和“女人 (Woman)”的区别，反映到对应词向量上即可以得到“King−Man+Woman=Queen”的代数形式。\n  综合以上内容可知，词嵌入虽然聚焦在“词”这一最小的文本单位上，但是看到的是丰富的全局文本语义信在“词”上的投射和体现。这不仅与传统的、基于词频的文本分析方法在逻辑上有着本质的区别，更能够为文本分析提供更深刻、更生动的洞察，构成了词嵌入文本分析技术在大数据时代的社会科学领域相关研究中的独特应用优势。\n\n1.2 词向量的距离计算 在词嵌入领域，词向量间的“距离”是词与词之间相关程度的度量指标，是分析概念之间的相关性的基础。词嵌入技术将文本中的“词”映射为 N 维欧式空间中的“点”，“词”在空间中 的位置坐标即用其对应的 N 维向量来标识。由于点的位置反映了词语的语义，因而点与点之间的空间距离即反映了词与词之间的语义相似性，对词向量进行特定的代数运算(如加减、 内积等)能够用以度量词与词之间、概念与概念之间乃至文档与文档之间的相关性。\n1.2.1 词与词之间的距离 设在 n 维语义空间中，单词 A 和 B 分别对应词向量 vA=vA1,\u0026hellip;, vAn 和 vB=vB1,\u0026hellip;, vBn， vA 与 vB 之间的距离计算方式主要有以下两种：\n 余弦相似度(cosine similarity)：。余弦相似度衡量词向量 vA 和 vB 之间的向量夹角的余弦值，其取值范围为[-1,1]。余弦相似度取值为 0，则代表单词 A 和 B 之间不存在语义关系；而取值越靠近 1，表明单词 A 和 B 之间具有正相关性；反之，取值越 靠近-1，则表明单词 A 和 B 之间具有负相关性 欧式距离(euclidean distance)：欧式距离越小表明单词 A 和单词 B 在词向量空间中的位置越近，之间的语义关系越强；反之，欧式距离越大表明单 词 A 和 B 语义关系越弱。  1.2.2 概念与概念之间的距离 在词嵌入分析领域，一个概念是由一系列“相关词”组合而成，例如，“女性”概念可以通过“女人”、“女生”、“母亲”等名词来表达。而在对比不同属性概念(如“女性”vs.“男性”与“智慧”)之间的相关性时，需要逐个计算概念间的相对距离(“女性”与“智慧”的距离 vs.“男性”与“智慧”的距离)。Garg 等[13] 、Caliskan 等[17] 分别构建了以下两种相对距离的计算方法，并为众多后续研究所采用：\n  相对范数差函数(relative norm distance)：\n vm∈Mvm−vA−vm−vB     该函数用于衡量两项目标词概念与某一项特征概念的相对距离。其中，M 代表特征概念(如“智慧”)，vm 为所属概念的相关词向量(如“聪明”)；vA 和 vB 分别代表两类目标词向量(如“男性”vs.“女性”)。该函数的含义为：在“男性”和“女性”两类群体中，哪一类群体与“智慧”这一概念更相关。若函数值为正，则代表“女性”与“智慧”更相近；若函数值为负，则代表“男性”与“智慧”更相近；若函数值靠近 0，则表明“智慧”不存在明显的性别偏向。\n  词嵌入相关性检验 (Word Embeddings Association Test; WEAT)：\n s(X,Y,A,B)=vx∈Xs(vx,A,B)−vy∈Ys(vy,A,B) s(vw,A,B)=meanva∈Acos(vw,va)−meanvb∈Bcos(vw,vb) 该框架用于衡量两组目标词 X,Y(Target Words，如“男性”vs.“女性”)与两组属性词 A,B(Attribute Words，如“事业”vs.“家庭”)在语义上的相对距离差异，其中 vw 为所属概念的相关词向量(如在描述“男性”概念时，人们往往会使用“男生”、“父亲”、“男人”等词语)。s(vw,A,B)表示单词 vw 与两类属性词 A 和 B 的相对距离，正值代表其与 A 属性距离更近、语义更相关，反之则反；而 s(X,Y,A,B)则衡量了两项目标词 X,Y 和两项属性词 A,B 相对距离的差异，即在 “ 男性 ” 和 “ 女性 ” 两类群体中， 哪一类群体与 “ 事业 ” 或 “ 家庭 ” 的文化概念更相关。 若s(X,Y,A,B)为正值，则表明相比于“女性”，“男性”与“事业”的语义相关性更高，反之则表明“女性”与“事业”的语义相关性更高。此外，WEAT 框架还提供了相应结果的显著性检验方式以及效应量指标。    文档与文档之间的距离—词移距离(Word Mover’s Distance) minT≥0i,j=1nTij∙ci,j, s.t. jnTij=di , ∀iϵ1,\u0026hellip;,n\n  除了概念间的相关性分析，我们可以通过文档间的相似性来探讨如文本主题、个体及组织之间的相关性问题，Kusner 等[31] 提出“词移距离”这一计算方法能够实现文档间的相似 性度量。词移距离即一个向量空间移动到另一向量空间所需的最小距离，通过对两个向量语 义空间中所有词向量间的欧式距离进行加权求和，以此来衡量两个文本间的相似性，如上式 所示。其中，c(i, j)为词向量间的欧式距离；Tij 为词向量之间的权重(由 TF-IDF② 计算加权值)。 函数值越大代表两个文本的相关程度越低，反之越高。\n  \n二、词嵌入技术的优势 传统的社会科学研究通常需要借助科学实验、社会调查和人工编码等方法，依赖于专家学者的领域知识和实践直觉，存在主观性较强、耗时、耗资源的缺点。 另外，传统的社会科学研究局限于小样本数据和历史数据的不足，通常关注当下的、有限范围的社会情景， 难以进行跨时间、跨文化的分析。 反观，以词嵌入为代表的计算机化的文本分析：\n 可处理大文本数据，不仅极大地节省人力和时间投入，而且可以拓宽现有社会科学研究的素材； 能够利用现有数据和先验知识改进学习算法，可拓展性和重复性强； 能依据文本内在的分布规律和领域知识，挖掘人们内隐层面的认知信息，结果更加客观真实； 能够从大规模文本中挖掘代表整体社会的认知，尤其擅长进行跨时间、跨文化的文本研究，结论不仅具有广泛的样本代表性，而且可以展示相关文化概念、思想观念等研究对象的纵向历时演化。 这些优点极大地丰富了社会科学的研究方法，拓展了社会科学的研究视野。传统的社会科学 研究方法与词嵌入技术的具体区别见表 1。  表 1 传统的社会科学研究与词嵌入技术的区别\n   对比维度 传统的社会科学研究路径 基于词嵌入技术的社会科学研究路径     研究工具 问卷、访谈、实验、案例分析等 Word2Vec、GloVe 等词嵌入模型，以及词向量、概念及文本的相关性计算   方法依据 基于实践经验和严格的理论推断，依赖于特定学科内专家学者的领域知识和实践直觉，是以人为中心的研究方法；围绕研究假设进行数据检验的分析路径 基于语言文本来理解文化概念和思想观念，综合利用社会科学理论、计算机科学等探讨社会、心理和行为层面的问题，是人智与计算机相结合的分析方法 ；不依赖严格的假设，利用数据挖掘展开探索性的研究   检验标准 大部分研究结论缺少严格客观的评断标准，主观性较强 有多项较为成熟的指标及评价流程，具体包括：检验词嵌入模型的训练效度 ( 模型在特定的测试任务集上的表现 ) 和检验研究结论的外部效度(将结论与其他社会调查数据、其他研究方法的结果展开对比)   数据来源 调研记录、实验数据、二手数据、文献等；受限于成本投入，数据来源较为单一且体量较小 数据来源广泛，能够熟练处理包括会议记录、网络文本、新闻书籍等非结构化的文本数据；在处理大规模、跨文化、跨时间的文本数据时有极大的优势   信息层次 以基于自我报告的外显认知为主，在获取被访者内隐认知时依赖于间接的方法设计；研究较大地依赖于样本选择，结论在跨时间、跨文化上的代表性有限 允许研究者直接挖掘文本所反映的内隐社会认知；研究较多从社会、集体层面的文本范围着手，结论具有较强的代表性和普适性   其他特点 应用过程中耗时长、成本较高；主观性较强；结论的可复现性较弱 针对大数据文本的无监督训练、时间人力投入小；客观性较强；结论的可复现性较强    \n三、词嵌入技术在社会科学领域的应用话题 3.1 社会偏见/刻板印象 文本语言能够反映人类对世界的认知和态度，基于词嵌入的文本分析方法可以有效地挖掘社会偏见和刻板印象。Garg 等[13] 采用词嵌入技术分析了来自纽约时报、谷歌新闻、谷歌图书及美国历史文本库(Corpus of Historical American English; COHA③ )的文本数据，揭示了 1900～1990 年间美国社会在性别和种族两大议题上的刻板印象及其历史变化。Garg 等[13] 首先以十年为单位将文本数据分为 9 份，并针对每一份文本数据使用词嵌入技术，以获得“词” 的向量表征。然后，他们整理了相应概念的单词列表，其中包括：与“性别”维度相关的“男性”词汇[如 he]和“女性”词汇[如 she]；“白人”词汇[如 Harris]、“亚裔”词汇[如 Huang]和“拉丁 裔”词汇[如 Ruiz]。进一步，他们构建了相对范数差(relative norm difference)函数，用以计算 一组词向量(如“男性”vs.“女性”)与目标词(如专业工作)的相对距离，以此度量社会刻板印象 的程度。Garg 等[13] 发现近百年间在美国社会的认知中始终存在着较为明显的性别偏见和种 族偏见。例如，“女性”往往和护士、保洁、舞者、秘书等职业联系更为紧密，而与工程师、 木匠、技术人员等职业更为疏远。此外，亚裔姓名和教授、科学家、化学家和工程师等学术职位联系更紧密，白人姓名往往与警察、统计学家、摄影家等职位联系更紧密。通过纵向分析概念间距离随时间推移的动态演化，Garg 等[13] 发现，这两类刻板印象随着时间呈减弱势 态，结合相关社会科学理论和历史事件，他们进一步提出 60、70 年代的美国民权运动是改善刻板印象的关键事件，而基于词嵌入的概念间相对距离也如实地反映了美国民权运动对于 国民性别、种族认知的深刻影响。 作为文化的产物之一，歌曲也能反映社会认知中的偏见/刻板印象。Boghrati 和 Berger[12] 利用 Word2Vec 词嵌入技术，挖掘了自 1965 年至 2018 年的近 60 年间美国公告榜(Billboard) 上流行歌曲歌词文本中所隐含的性别偏见。一方面，他们在流行音乐中发现了显著的“厌女症(misogyny)”刻板印象(如图 2)，相比“男性”词汇，人们更少将“女性”词汇和“能力/ 成功/热情”等具有积极属性的词汇相关联。但另一方面，歌曲中所反映的性别偏见随时间的推移呈现逐渐减弱的趋势。进一步地，Boghrati 和 Berger[12] 通过控制歌曲创作者的性别因素，发现男性作词人是影响歌曲“厌女症”现象变化的关键因素。\n  为了检测词嵌入技术是否能够有效挖掘文本中的社会偏见，Caliskan 等[17] 对比了词嵌入模型和内隐联想测试(Implicit Association Test; IAT)④ ——一种社会科学领域中最常用的社会 偏见/刻板印象等内隐认知的测量方法—的差异。虽然 IAT 能够有效捕捉个体的社会偏见的内隐认知，但是该方法需要严格的实验环境、耗时较长且测量样本往往受到时间和空间的局限。Caliskan 等[17] 利用 GloVe 词嵌入模型构建了 WEAT(Word Embedding Association Test) 分析框架，并利用这一框架研究了 8 项内隐认知，如“科学-男性”和“艺术-女性”，并将其与 基于 IAT 的研究结果进行了对比。[17] 他们的研究表明，基于词嵌入技术的结论与基于 IAT 的结论具有高度且稳定的一致性。Caliskan 等[17] 进一步指出，在未来的内隐态度研究中，词嵌入技术不仅能够作为 IAT 测量方法的补充，更能够在样本代表性、研究成本和研究视野等方面展现出 IAT 所不具备的独特优势。\n除了探讨社会偏见与刻板印象的跨时特征之外，词嵌入技术还适用于跨文化的对比分析。 Defranza 等 [33] 利用词嵌入技术探讨了不同地域在性别偏见方面的程度差异。 他们利用 fastText 模型和 WEAT 分析框架， 从 49 类不同语种的文本中分别挖掘不同社会文化下的性别偏见现象。 结果显示，当一个地区的性别语言(Gendered language)——即语言中更加区分词汇的性别属性和使用者的性别身份(如泰语、芬兰语)更强时，该地区的性别偏见更加明显(图 3)，具体表现为男性与积极属性词汇的关联性更强，而女性与积极属性的联系更弱。 这一结果在一定程度上验证了萨皮尔-沃夫假说(Sapir-Whorf hypothesis)，即语言能够塑造的思维和认知。\n图 3 语言文化与性别偏见的相关性   \n3.2 文化认知 历史无法复刻，但承载历史痕迹的文本资料能够帮助人们窥探特定时代背景下的文化内涵。Kozlowski 等[28] 利用词嵌入技术分析了自 1900～1999 年来 100 余年间公开发表的书籍， 探讨了 20 世纪美国社会对七大等级文化(财富、道德、职业、性别、教育、品味、身份地位) 的共识和演变规律。首先，作者利用 Word2Vec 模型，构建了一系列标度等级文化维度(如“贫 穷-富有”、“道德-不道德”、“男性-女性”等)的词向量空间(如“性别-财富”、“职业-道德”、“品 味-职业”、“教育-地位”等)。进一步，作者将一系列目标词分别映射进相应的等级维度空间， 以此标度这些目标词的多元等级属性。例如，在被映射进如图 4 所展示的“性别—财富”等级 维度空间后，“volleyball(排球运动)”一词表现出更靠近“feminine(女性气质)”和“rich(富有)”的 等级特征。此外，标度不同等级维度的向量之间的夹角也具有一定的社会文化含义。例如， “教育”与“道德”和“品味”的相关性较强且保持历时的稳定性，但与“职业”这一维度的相关性 相对较弱，这说明教育水平的提升能够提升人的修养和品味，但对职位状态和等级(如“失业” 和“就业”)的影响较小。Kozlowski 等[28] 的研究结果表明，词向量不仅可以反映特定概念间的语义关联和相互作用，还能够用于探讨多元文化维度之间的语义结构，从而推动实现更高层次构念的表征。\n图 4 目标词在“性别”与“财富”两重维度上的投影   作为文化概念的关键形式，社会认知(social cognition)是人们对各种社会刺激的综合加工过程， 是人们的社会动机系统和社会情感系统形成变化的基础 。\n社会认知包括社会信念 (social belief)和社会态度(social attitude)。而根据内隐—外显双系统理论， 社会认知可进一步分为外显社会认知(explicit social cognition)和内隐社会认知(implicit social cognition) 两类\n 外显社会认知强调个体可以通过自省的方式(如问卷法)报告的社会认知 内隐社会认知描述个体无法内省的、潜意识层面的社会认知。  然而，受限于现有对内隐认知的挖掘手段，有关内隐信念 (Implicit belief，如“亚洲人很聪明”)和内隐态度(Implicit attitude，如“我喜欢亚洲人”)的关系，已有研究要么将其混为一谈，要么将其作为互不干涉的独立构念。为了厘清该问题，Kurdi 等[14] 利用基于预训练的 fastText 词嵌入技术，分析了内隐态度和内隐信念的关联，并对比其与外显态度和外显信念的差异。具体而言，基于被试自我报告的实验结果显示，个体的外显态度与外显信念存在方向上的不一致性，例如，亚裔群体常被白人给予负面的评价(外显态 度)，但在智商、能力方面被认为有突出优势(外显信念)；而基于词嵌入技术的分析结果则表 明内隐态度与内隐信念具有一致性，内隐态度驱使内隐信念的产生。[14 ] 例如，白人群体有 较高的自我评价(内隐态度)，也认为本群体的智商高于亚裔群体(内隐信念)。另外，Kurdi 等[14] 发现人们对同一类属性词的认知也存在差异，例如，人们倾向于认为“book-smart(有学 问的)”优于“street-smart(生存力强的)”。综合可知，词嵌入技术可以作为挖掘文化概念认知以及社会认知的有效工具。\n3.3 语义内涵演变 语言的涵义会随着时代发生改变，而词嵌入技术的一大突出优势即表现为处理跨时段的大文本数据。文本语言的运用具有系统规律性，[35] 词嵌入模型训练生成的词向量能够有效 表征词的语义信息，通过针对来自不同历史时段的文本训练词嵌入模，有助于学者在时间维度上分析词义演变。Hamilton 等[36] 通过测量目标词的向量表示的时间位移值，来描述历史文本中高频词汇与多义词汇的词义历时变化。例如，如图 5 所示，“gay”作为一个多义词，在 1900 年代的文本中和“cheerful(开心)”和“frolicsome(玩闹)”词义更接近，而到 1990 年代则与“homosexual(同性恋)”、“lesbian(女性同性恋)”等更接近。进一步，Hamilton 等[36] 依据词嵌入技术的分析结果，提出了两条语义演化法则：(1)一致性，高频词汇会保持词义相对一致的历时演化规律；(2)新颖性，多义词汇的语义演化会更加快速。\n图 5 目标词汇含义的历时演变   除了对普遍意义上的词汇含义的演变规律进行探讨，某些具体词汇的演化情况同样引起了学者们的关注，尤其是那些能反映特定文化背景或时代发展的词汇。 Rodman 等[11] 基于1855～2016 年间的纽约时报、路透社报道、美联社报道三大新闻文本集，挖掘并追踪了美国一个多世纪以来围绕“平等”一词的词义演变，其中包含了使用环境、指代对象等。他们发现，在上世纪 50 年代之前，即美国民权运动前，“平等”的词义与“社会”话题相关的词汇的关联度整体较高，但随着历史发展呈现减弱趋势，这一结果与美国民权运动前普遍存在的社会不公平现象相符合(如种族歧视)。而自上世纪 70 年代，即民权运动基本结束以来，“社会”与“经济”、“教育”等概念下的词汇的关联程度不断增强，反映了本世纪以来美国社会对“教育公平”，“经济公平”等热门话题的高度关注。可见，基于词嵌入的文本分析能够敏锐地捕捉到社会文化演变的信息线索，并能为社会、文化等领域的运动发展提供预示。\n\n3.4 文本情感分析 文本信息不仅包含词义，还表达情感。现有部分词嵌入模型在关注语义语法层面的表征 的同时，还进一步关注了词的情感信息，尤其是某些单词具有相似的上下文环境但所含的情 感态度截然相反 ( 如 “good” 和 “bad”) 。 例如， Tang 等 [37] 提出了 情感嵌入模型 (Sentiment Embeddings)，该模型不仅可以如词嵌入模型一样反映词义信息，还能识别词所包含的情感 信息，进而可以对文本(如在线评论)中的情感信息做出推断。\n情感的丰富性和语言的灵活性使得单词在不同文本环境下会呈现出差异化的情感特征。 例如，“I’m gonna put something offensive to some people.”中的“offensive(冒犯)”一词在该句话 中带有消极负面的情绪；而“#FSU offensive coordinator Sanders coached for Tennessee 1st [37] #BCS title game.”中的“offensive(矛盾)”一词则不含明显的情感信息。 Xiang 和 Zhou[38] 藉此 指出，在推断词的情感信息时加入对文本 主题(topic)的考量将有效提高情感推断的准确性。 Ren 等[39] 基于 Word2Vec 词嵌入模型，结合主题模型(Latent Dirichlet Allocation; LDA)的方法， 提出了主题增强的词嵌入模型(Topic-Enhanced Word Embeddings; TEWE)。作者使用支持向 量机(Support Vector Machine; SVM)作为文本情感分类器，发现 TEWE 模型在文本情感分类 任务有突出表现。 例如，该模型能更有效地区分含有负面情感态度的词汇(如 insane)与正 面情感词汇(如 sane)的差异。在此基础上，Xiong 等[40] 进一步考虑了文本情感信息的多元化 特征 ， 构建了多元层次情感词嵌入模型 (Multi-level Sentiment-enriched Word Embeddings; MSWE)。他们发现，在标注“积极[#happy; :-)]—消极[#angry; :-(]”的情感标签任务中，MSWE 情感嵌入模型能够实现 85.75%的分类水平，表明基于词的情感表征能够更有效地挖掘文本 背后的情感。\n\n3.5 组织关系分析 词嵌入技术在挖掘社会内隐认知方面展现出强大的效力，因而词嵌入技术可用于挖掘不 同组织在价值观和意识形态层面的关联，以此作为组织关系的推断依据。在此思路基础上， Spirling 和 Rodriguez[41] 采用 GloVe 和 Word2Vec 的词嵌入模型，分析了美国共和党和民主党两大政党在其各自的公开发言稿中对部分政治议题的所表达的态度。例如，对于“堕胎”议题， 两政党的理解存在较大争议：民主党认为“堕胎”是一种自愿选择，而共和党认为“堕胎”与“绝 育”、“公平”的话题相关；对于“税收”议题，两政党的理解则存在更多共识。由此可见，词嵌入技术不仅可以帮助我们了解政党组织在哪些政治议题上存在冲突，还可进一步衡量不同党派的政治关系。\nRheault 和 Cochrane[42] 分析了英国、加拿大和美国 20 世纪以来的议会记录文本，并依 据政党派别关系构建了“党派嵌入”(Party Embeddings)模型。学者利用词嵌入模型量化了不同党派在不同年代的议会观点中与特定“意识形态”维度(如自由 vs.保守、北部 vs.南部)的相关性，从而对比不同党派组织的意识形态差异。从整体上看，美国民主党的意识形态更靠近自 由派思想(如“民权”、“种族”、“枪支管控”)，而美国共和党的意识形态更具保守派和南部 [42] 州色彩(如“官僚”、“果农”、“烟草”)，且两党的意识形态差异随着时间不断扩大。 同样地， 对于加拿大，新民主党派与联盟党在意识形态上的政治冲突最为严重，魁北克政团与联邦主 [42] 义政团在事关“联盟”的政治议题上观点不同。 Pomeroy 等[15] 利用 GloVe 词嵌入模型分析了各个国家在联合国论坛的公开演讲文本，并使用词移距离(Word Mover’s Distance)来量化国 家讲演文本间的总体相似性，以此来反映国家立场及偏好的相似性。 作者发现，基于词嵌入技术的分析结果能够很好地反映国家间的政治关系。例如，虽然土耳其和希腊两国在投 票议程中表现出态度相似性(即一致的国家关系)，但实则两国在当年发生了边境军事冲突， 而这一冲突能从两国的联合国讲演文本中捕捉到线索。本研究指出，有关词嵌入在主体网络 关系的应用集中于党派关系和国际关系的研究，未来研究还可以考虑分析其他情景下的主体关系，如社交网络关系、品牌竞争关系、组织内部关系等。\n\n3.6 个体的判断与决策心理 决策结果和决策信息线索之间具有表征关系，因而词嵌入技术能够通过挖掘概念间的内在关联，在一定程度上揭示个体在决策任务中的思维过程和决策依据。Bhatia[16] 在自然语言处理的框架下，验证了以往决策研究中的相关性判断机制，即人们在进行判断性任务(如：“A 多大可能属于 B?”)时，会出于直觉性心理去思考问题与选项间的相关性或相似性，并以 作为判断依据。具体而言，作者综合 Word2Vec、CCA、GloVe 几项词嵌入技术，基于谷歌 新闻和 GigaWord 文本库⑤ 训练生成词向量。进一步，作者通过对句子中每个“词”的向量求 取平均值，分别对判断问题(如“在以下的两座德国城市中，哪一个人口最多？”)与选项(如“汉堡”和“科隆”)实现表征。作者依据两者间的语义相关性来预测答案选项的概率分布，并据此模拟一般决策者的选择。例如，针对上述问题，基于词嵌入模型的预测结果为“汉堡”，与被试的选择高度相似。此外，词嵌入模型在其它测试任务(如经典的“Linda 问题”⑥ )下也预测了 [16] 决策者的选择倾向， 这一现象与代表性启发理论(representativeness heuristic)——一种依赖人的相关性感知进行识别和判断的心理决策过程——相符。这说明词嵌入模型在很大程度上 能够解释人的相关性判断机制， 甚至对其中常见的认知偏差 ， 如 合取谬误 (conjunction fallacy)⑦ 、基础概率忽略(base rate neglect)⑧ 也能够予以反映。[16] 实证结果表明，词嵌入技术为我们理解人的直觉性判断心理提供了信息参考，能够帮助实现相对精准的决策预测。\n另外，个体的风险感知和风险判断也是个体决策研究中的重要组成部分。Bhatia[43] 利用词嵌入技术探讨了人们面对各类风险源时的风险评估机制。作者通过基于谷歌新闻文本的预 训练 Word2Vec 模型，量化了不同风险源(技术性风险源：“新兴技术”、“能源”等；活动性风 险源：“运动”、“职业”等)与相关概念的语义联系，进一步 揭示了人们进行风险评估时的知 识表征内容(即内隐联想)。例如，当评估药物风险时，人们在潜意识里会联想到“毒品(drug)”、 “无序(disorder)”等具有高风险含义的概念(如图 6a 的词云图)；而评估运动风险时，人们容易 联想到“碰撞(crash)”、“斗争(combat)”等风险事件(如图 6b)。作者弥补了以往有关风险评估 的研究方法中难以预测样本外数据(如新型风险源)的缺陷，展现了词嵌入技术在理解和预测个体判断决策机制中的应用优势。\n ⑥ “Linda 问题”是指“琳达，31 岁，单身，一位直率又聪明的女士，主修哲学。在学生时代，它就对歧视 问题和社会公正问题较为关心，还参加了反核示威游行。请问琳达更有可能是下面哪种情况？”有两个选 项：“A.琳达是银行出纳；B.琳达是银行出纳，同时她还积极参与女权运动”。相比于 A 选项，B 选项所 塑造的女性形象更贴近问题所提供的信息，因而人们会倾向于选择 B 选项。\n⑦合取谬误是指人们总是认为两个事件的联合出现比只出现其中一件事的可能性要大。以“Linda 问题”为例， 人们会更多地选择 B，虽然从实际概率角度来讲，B 选项的概率应低于 A 选项。\n⑧基础概率忽略是人们在进行主观概率判断时倾向于使用当下的具体信息而忽略掉一般常识的现象。\n 表 2 词嵌入技术在社会科学领域的应用主题总结  \n \n\n四、词嵌入分析的基本流程 词向量的表征学习存在两条路径：一是采用本地化的训练模型(local-trained model)。二是使用预训练的词嵌入模型(pre-trained model)。针对第一条路径，通常需要经历如下预处理和模型训练步骤(见图 7)：\n4.1 选择合适的语料库(corpus) 语料库是用于训练词嵌入模型的文本集，“词”的表征效果以及后续的相关性分析依赖于训练文本的规模、质量及其所处的语言环境。对文本语料的选择需严格依研究者的具体问题而定，使研究主题/情景与文本主题/情景相对应，[41] 进而推动单词间的语义关系聚焦于特定的领域和视角上。例如，以探讨社会文化现象的研究可以选择新闻时报、社交媒体动态等社会文本作为主要语料；探讨消费者心理及行为的研究则可以将线上评论等商业沟通文本作为语料；关注组织行为的研究则以会议 记录、公司年报等组织内部的官方文本为主。\n文本数据的获取主要有以下三种途径：\n 第一， 国内外由政府、企业及其他组织或个人提供的公开的、已初步整理规范的文本数据库。如， 人民日报文本集(1946 年至今) ⑬ 、谷歌图书(包含 1500 年～2012 年期间公开出版的书籍，约占人类历史所有出版书目总数的 6%) ⑭ 、亚马逊评论集(包含 1996 年～2018 年亚马逊平台用 户对近 30 个产品品类的超过 2 亿条评论) ⑮ 、维基百科数据库(包含来自 400 多万篇文章的近 19 亿个单词的维基百科全文) ⑯ 等。 第二，借助“爬虫”程序收集文本数据。根据研究需要， 研究者可以在特定的网站上爬取一定的文本。例如，众筹平台的项目申报文本材料、微博平台的历时推文、论坛用户间的互动文本、企业员工在 Glassdoor ⑰ 等职业资讯网的日志评论等文本。 第三，纸质版文本转换成电子文本。必要时，研究者还可以将纸质文本录入为电子文 本形式，如员工日记、会议记录、线下心理咨询文稿等。  4.2 语料预处理(pre-processing) 常规的预处理流程包括：\n 删除与文本内容无关的标点符号、特殊字符(如：数字，空格符，分行符，“©”)和其它停用词(如：代词、连词)。 此外，中文文本的预处理中还需要对文本分词 (segmentation)，从而将语料处理成由“词”这一最小的文本分析单位所构成的列表(如将语 句“我很开心”分词为“我”/“很”/“开心”)。现今常用的中文分词工具有“Jieba”、“HanLP”、 “THULAC”、“TopWORDS”等。  4.3 模型训练 在预处理后的语料文本中训练词嵌入模型，最终实现文本词的向量表征。当前主流的词嵌入模型有 Word2Vec、GloVe、fastText 等， 而在 Python 环境下，大量与自然语言处理相关的成熟的开源工具包(如，Gensim)中提供了相关的算法模块，并允许研究者对相关参数(词向量的维度、单词上下文的观测窗口的大小 等)进行调整。\n此外，基于词嵌入模型的迁移学习能力，也可直接使用预训练的词嵌入模型(如，谷歌 的 GloVe 和 BERT )，从而获得基于其它大型语料库充分训练得到的词向量表示，并根据自身的文本特征对模型或表征结果进行微调(finetune)。但无论采用何种词向量表征路径， 在正式的词向量相关性分析之前，都有必要对词嵌入模型的训练结果，即词向量的表征效度进行评估。常见的评估方式是通过与人工标注的词相关性评分进行对比，检验二者是否一致， 以此判断词嵌入模型是否能够捕捉一般化的语义关系。目前，已有大量成熟的针对“词对” (word pairs)相似性的人工标注的测试集，如 MEN-3000(英文)[47] 、Wordsim240/297(中文)[48 ] [12,41]。\n词嵌入模型训练完成后，可以进一步依据研究目的进行词向量间的“距离”的几何计算， 主要包括词列表构建、相关性计算、有效性检验和稳健性检验四个步骤 。\n (1)构建词列表。 在词嵌入的文本分析中，特定概念通常由一系列近义词或同属性词列表构成。例如，在 Garg 等[13] 的研究中，他们构建的“男性”概念词列表包括“male”、“men”、“father”、“brother”等 20 个单词。 (2)计算词向量的相关性。针对具体研究问题，衡量“词”或者概念之间的语义关联(即 词向量间的“距离”)，主要包括余弦相似度(cosine similarity)、欧式距离(euclidean distance)两 种基本的计算方法(详见上文第一部分内容)。 (3)有效性检验。针对词嵌入的分析结果，我们 有必要进行进一步的检验，以保证结论的可靠性以及方法的有效性。具体包括两类检验方法： ①与对应年代的相关社会调查数据 (如，社会职业性别占比调查、社会偏见大调查 ) [13,49-51] 进行比对，以检验词与词的相关程度、变化是否与相应的指标数据、社会事件相吻合； ②与其它研究方法进行对比，如内隐联想测试(IAT)、主题模型(LDA)，以检验词嵌入模型能 否重复已有研究结果。[11,14] (4)稳健性检验。作为一种无监督的探索性分析方法，词嵌入的 分析结果会因文本、模型等因素的不同而产生差异。通过变换词嵌入模型、参数、文本语料 或相关性计算方法，以检验研究结果的一致性。稳健性程度越高则代表基于词嵌入分析方法 的结论可靠性越高。  图 7 词嵌入技术在文本分析中的应用流程   \n五、词嵌入分析方法的挑战与应对 作为一种计算机化的文本分析方法，词嵌入技术在文本数据的预处理、文本表征效果等方面有一定的条件限制，因而该技术面临着以下几个方面的挑战。学界一直致力于词嵌入分析方法的完善，并就下述问题提出了针对性的应对方案和解决思路，详见表 3。\n(1)词嵌入技术的分析效果依赖于文本数据的体量、质量和语言环境。 ①通常来说，文本数据规模越大越有利于词嵌入学习和提取更充分的语义信息，[11] 而体量较小的文本，可能会限制词嵌入模型的训练效果，难以将文本的全局语义信息嵌入到单词上。[11,18] 对此，Rodman[11] 提出了两种解决思路：一是采用预训练的词嵌入模型。预训练词向量通常基于超大型文本数据训练而来， 使模型具备较好且广泛的语义表征能力。 二是采取“自举法”(Bootstrapping)⑱ 。通过该方法生成规模更大的文本数据集，并针对不同的抽样过程生成不同的词向量结果，随后求取其平均值以增强词向量的稳定性和有效性。\n②除此以外，文本语料的选择应考虑到其依存的文本情景、社会文化环境等背景信息。文本所依存的语言环境、文化观念和观点立场在很大程度上影响着文本词汇的分布方式(即单词上下文)，因此利用不同文化背景的文本训练词嵌入模型，可能会产生不同的研究结论。Spirling 和 Rodriguez[41] 对美国国会议事文本的分析所示，不同的党派组织对同一政治 议题的理解存在“冲突”(如，“堕胎(abortion)” \u0026amp; “福利(welfare)”)。再如，在研究组织员工的 幸福观时，企业的官方书面文本(更具指导性和应然性)以及员工的口述文本(更具真实性)可 能潜藏不同的结论。然而，如何权衡和选择合适的语料、如何处理不同文本下的结论不一致 等问题仍缺乏统一的解决标准。就学者的普遍实践来看，文本选择需要“有的放矢”，即依据 研究问题对文本的背景信息(如，表达视角、代表阶层、文本性质 )进行必要地分析和筛选， 在扩大语料库规模和类型的同时也要尽可能使之聚焦在同一视角和语境上。[11,28,41] (2)“词”是词嵌入分析的基本单位，中文文本的分析需要预先进行“分词”处理。\n对于某些特定领域的文本而言，如专业学术文章、古代汉语文本等，由于其文本内容及结构与标准的训练语料存在较大差异，[46] 使得文本分词的过程存在一定困难。近年来，大量学者就优化文本预处理技术展开了探讨，例如，Deng 等[46] 开发了“TopWORDS”分词软件，在小型训练文本中实现了部分低频词的精确识别，亦能处理含有大量未知专业语汇的文本，该方法的有效性在古汉语文本的分词任务上得到了进一步验证。在突破文本预处理中的困难后，可以应用词嵌入的实践流程对文言文展开分析，探讨古代社会文背景下的社会科学课题，如围绕权力、阶层、性别、宗教等的社会规范以及其它社会价值观念的演变。\n(3)在由“词”构成的文本结构中，词与词之间的组合搭配能够创造出更加丰富且抽象的语义信息，这一类信息难以通过词向量间简单的结构化公式运算来体现。 词嵌入技术对文本中的“词”展开语义分析，所建构的是词与词之间的关联，侧重于表达“单词级别”的语义信息。因此，基于词向量的简单几何计算难以直接反映 “单词级别”以外的语义信息，[18,5 2 ] 如词组概念、段落含义、文本主题等。学界也在积极探索“组合式分布语义”的实现方法，即如何利用词表征的组合实现对短语、段落和文档的有效表示。[18,53 ] 在自然语言处理领域，以LDA 为代表的主题模型从整个语言系统分布中学习“词”的含义，侧重于建模词与文档的关系，体现的是词的主题信息。相比于词嵌入模型下的单词之间的关联，包含主题特征的词向量之间能够反映相对丰富的语义关联。鉴于词嵌入模型具有较强的扩展能力，大量学者针对词嵌入模型的算法和训练过程进行优化，即将有关文本整体特征的信息或其他的领域知识融入词嵌入的学习过程。例如，Liu 等[54] 基于 Word2Vec 词嵌入模型，并结合 LDA 算法，使词向量包含更多的主题特征，如 “apple(苹果)”在电子产品的背景信息下表示“苹果公司”，而在食品背景信息下表示“苹果”这 类水果。此外，词嵌入技术的基本原理在文本表征领域也得到了长足发展。例如， Le 和 Mikolov[55] 将 Word2Vec(skip-gram)的算法运用至句子和短文本的表征学习；词嵌入模型界的 新秀——BERT 模型，能够有效表征句子等“单词级别”以上的文本语义概念，推动了对更 高文本单位的关系层面的理解。\n(4)传统的社会科学研究方法具备词嵌入技术所无法提供的分析视角，尤其是相对于“文本细读法(close reading)”，词嵌入这一计算机化的分析方法难以捕捉更加细微的语义差别。\n基于上下文分布来表示单词的方法也难以学习单词的细粒度语义， 例如，同义词、反义词、多义词、上下位词等词义的区分和表征还有待优化。据此，相关学者提出利用有监督的学习过程，在词嵌入的算法层面引入某些先验知识库(如，描述词义关联信息的“WordNet”语义网[5 7 ] )，帮助模型更好地捕捉单词多元的属性信息，从而有助于避免词嵌入表征词义的逻辑偏离实践认知。[19]\n  \n六、词嵌入技术在管理学领域的应用展望 6.1 政策效应评估 已有政策效应评估主要采用定量分析工具(如，双差分法)分析显性的数据指标(如，人均收入)，而对于政策的隐式效应(如，社会心理、文化认知)的判断还较为局限。本研究提出， 词嵌入技术可以结合因果推断，[5 8 ] 分析公共政策的有效性。具体而言，词嵌入技术可以研 究：①政策对社会文化认知的影响，如“2020 年禁塑令”实施对公民“环保”、“健康”等概念的 认知的影响；“2021 年惠游湖北”政策对武汉城市污名化的缓释作用等。②衡量政策创新性， 探讨政策带来的创新性影响。例如，Perren 和 Sapsed[5 9 ] 分析了英国在过去近 50 年间的议会 记录，发现在其实施“国家创新计划”之后，“创新”这一概念在社会文本的出现频率显著上升， 有关科技领域的词汇与“创新”一词的共现频率显著增加。未来研究可以利用词嵌入技术来挖 掘“创新”与具体领域，例如，“知识”、“科技”、“法律”的相关度，并比对其在政策实施节点 前后的变化。\n6.2 用户推荐系统 以往的线上推荐系统多基于用户行为数据来判断个体偏好， 以矩阵分解 (Matrix Factorization)和协同过滤(Collaborative Filtering)为代表的技术被广泛应用于线上推荐场景。 然而相比上述几项技术，词嵌入能实现更高水平的用户偏好预测， [ 60 , 6 1 ] 这意味着文本数据 将是我们了解用户的重要渠道。现如今，电商评论和社交媒体的动态文本记录了大量消费者 认知、态度及其它表现个人特征的信息。利用词嵌入技术，平台能够挖掘用户对特定领域话 题的偏好、对产品的偏好和评价，以及用户之间的相似特征等。例如，通过计算“产品/品牌” 与积极、消极属性词汇的相对“距离”，[13] 来衡量个体用户的内隐偏好和真实的消费感受，并 据此展开产品推荐和广告投放。\n6.3 数“智”品牌管理 鉴于词嵌入技术在挖掘社会内隐认知上的突出表现，因而能用于刻画企业—消费者关系， 辅助企业的品牌管理战略。 借助词嵌入的分析方法， 企业可以透过用户生成文本 (user-generated content)(如，社交媒体、网络论坛和线上评论)纵观消费者对企业品牌形象的 态度、评价，也可以用于挖掘影响消费者满意度的关键因素和市场潜在需求。[8, 6 2 ] 作为品牌 形象的内核，企业品牌个性(brand personality)及其历时演变同样也可以使用词嵌入的分析方 法对其进行挖掘，[12] 从不同时期的社会文本中测量相应的语义关系，即品牌与个性维度间 的相关性(如，品牌与“真诚型”vs.“粗犷型”)。在跨文化视角下，词嵌入技术能够帮助企业考 察不同文化背景下的市场对其品牌的认知差异，并据此助推企业品牌的形象定位与国际化进 程。[6 3 ] 再如，利用词嵌入技术能够帮助企业动态追踪新产品的市场评价，为企业评估产品 的市场表现提供新的分析工具。其它的相关话题，诸如品牌依恋(brand attachment)、品牌文 化(brand culture)和品牌联想(brand association)等研究也将受益于词嵌入的分析方法。\n6.4 企业关系管理 文本作为企业对外传达信息、价值观，以及企业间进行交流的重要载体之一，蕴含了大量的、足以表征企业特征的信息。以往从文本层面探讨企业关系的研究相对较少，而利用词嵌入的基本原理，未来研究可以考虑利用文本来刻画企业间的关系(如竞争、合作、信任等)， 进而更有效地描绘企业在网络中的嵌入式角色(embedded role)。例如，学界一直致力于研究 企业间关系网络的结构特点及其对企业绩效、企业间联合研发效率的潜在影响，探讨了社会 网络嵌入视角下的企业组织的合作范式。例如，基于知识理论视角，企业合作网络的形成及 演变动机在很大程度上取决于知识的互补性与相似性特征。[64 ] 未来研究可以利用文本刻画 企业的关系网络及其节点特征，探索企业的合作策略和市场战略。尤其在信息不对称的商业环境下，基于文本的社会关系分析能够为企业的战略伙伴选择、市场表现等提供新的分析路 径和信息参考。\n6.5 组织内部管理 在管理学领域，有关组织行为的研究大多依赖于问卷访谈和自然观察等形式的调查方法， 以及基于组织管理目标开展特定的田野实验。这些研究路径在理解和预测个体行为的过程中 存在较强的主观性和外显性，难以挖掘组织成员真实的内隐认知。此外，以往对组织场景内 的文本分析在很大程度上受限于专家学者的领域知识和实践经验，耗时、低效且准确率低。 本研究提出，词嵌入技术可以用于分析组织内成员的心理及行为规律，通过挖掘组织内的文本(如会议记录、员工评述、领导讲演文本)，揭示员工的内隐认知信息(如动机、信念、情绪)， 甚至包括领导力(leadership)、员工创新力、员工的组织支持感(organizational support)和企业文化等主题。\n6.6 中国传统智慧与管理问题 社会科学研究者不仅需要关注当下的社会情景，也需要从历史中洞察现象、以史为鉴。 中国社会文化背景下的众多管理问题、思想乃至组织行为领域的话题，均能够从历史事件中窥知和借鉴。例如，Huang 等[6 5 ] 基于《资治通鉴》这一古籍中的记载，探讨了中国家族式企 业内的领导—员工关系。他们以古代的皇帝与太子间的关继承案例作为样本，并在长时间的 人工阅读和变量编码后发现，家庭组织在权力转移的过程中，子女继任的可能性与其父母在 位者对其的压制行为存在“U 型”关系。同样地，词嵌入技术可以挖掘在位者对继任者的评价， 以此判断与继任可能性之间的关系。此外，通过对《二十四史》展开词嵌入分析，也能帮助学者了解中国各个朝代的管理层在应对人事、外部环境、组织治理等方面的管理思想与策略。 对此，本文展望利用词嵌入方法对中华古籍文本展开必要的分析，挖掘诸如组织领导风格、 组织文化、组织竞争力、管理者与下属间关系、人员激励政策等研究话题，进而探索中国本土的管理智慧和组织话题。[65]\n","permalink":"/blog/wordembeddingsinsocialscience/","summary":"活动预告  想随时随地系统学习Python文本分析，可以选择  Python网络爬虫与文本分析 | 2021录播课(虽是录播，但章节更多一些)。   更喜欢有互动感通过直播学习，可以考虑  Python网络爬虫与文本分析 | 2022五一直播    文献 本文全文摘自\n冉雅璇,李志强,刘佳妮,张逸石.大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用[J/OL].南开管理评论:1-27[2022-04-08].http://kns.cnki.net/kcms/detail/12.1288.F.20210905.1337.002.html\n词嵌入亮点 词嵌入技术是文本分析中技术含量较高，可从文本中测量出人类认知信息。而即时是有一定学习能力的人，当阅读大量文本很难察觉文中是否有内置(预置)的信息，如作者的偏见、态度、刻板印象，等人类复杂认知。词嵌入技术可以将这类难以察觉的线索挖掘、测量。\n摘要 在大数据时代的背景下，基于大数据的分析处理技术为以“数据驱动”的社会科学研究创造了新的发 展契机。其中，词嵌入(Word Embeddings)技术借势大数据浪潮，以其高效的词表征能力和强大的迁移学习能力在文本分析领域受到越来越多的关注。不同于传统的文本分析路径，词嵌入技术不仅实现了对非结构化文本数据的表征，还保留了丰富的语义信息，可以实现对跨时间、跨文化文本中深层次文化信息的挖掘， 极大丰富了传统的社会科学实证的研究方法。文章总结了词嵌入技术的基本原理及特点，系统地梳理了词 嵌入技术的六大应用主题：社会偏见、概念联想、语义演变、组织关系、文本情感和个体决策机制。随后， 文章归纳了词嵌入技术的基本应用流程。词嵌入技术还面临文本数据的选择、中文文本的分词处理、单词 语义信息的表征层次三种挑战，文章归纳了相应的应对思路与方法。最后，基于词嵌入技术的强大适应能 力，未来研究可以进一步关注该技术在管理领域的应用前景，包括政策效应评估、用户推荐系统、品牌管 理、企业关系管理、组织内部管理、中国传统智慧与管理问题六个方面。\n关键词: 词嵌入；自然语言处理；文本分析；社会科学；管理领域应用\n\n引言 作为人类开展文化交流和情感沟通的基本载体，语言承担了重要的信息交换功能。借助 于各类语言表达形式，人们将诸如知觉、思维、态度和情感等复杂的心理活动转化成特定的 语言。 而作为语言的典型载体之一，文本既能够在个体层面上反映人们的内心活动，也能 够在组织和社会层面上反映集体文化。 因此，从文本内容挖掘个体深层次的心理活动和 人类社会的文化沿革是社会科学的基本研究路径。\n长期以来，在社会科学尤其是管理学和心理学等领域，实证研究多以针对实验、问卷和结构化的二手数据的量化分析为主导，而对于非结构化的文本材料(如访谈记录)仍以质性分析为主。[5] 在大数据时代，“数据+行为+交叉学科”已成为社会科学发展的必然方向。而计算社会科学的兴起则为我们理解人类行为、探讨社会现象提供了新的研究素材、视角和手段[6] 。随着互联网技术的飞速发展，人们在网络上发表大量包含思维、情感、观点的文本信息，这些井喷式爆发的文本为“以数据驱动”的社会科学研究提供了可及的信息来源。若能对之加以利用，无疑将拓宽社会科学研究的方法。[7 - 9] 然而，社会科学领域的传统文本研究方法以人工编码为主，其时间投入过大、成本较高、客观性相对较弱等不足极大地限制了文本数据 [10] 在实证研究中的应用。 所幸的是，以自然语言处理(Natural Language Processing; NLP)为核心的计算机文本分析技术(Computerized Text Analysis)的发展为大数据文本在社会科学领域 中的应用带来了契机。 “词”作为文本的最小单元，是计算机进行文本分析的基础。在自然语言处理领域，“词” 主要以向量(vector)的形式表示。而词嵌入(Word Embeddings)技术，即是一种可以把高维词 向量映射进低维向量空间，以此来实现词义理解的计算机文本分析技术。相较于其他自然语 言技术，词嵌入技术不仅展现出了高效的学习能力，而且允许计算机从更高的意义单元(即 目标词的上下文)出发理解词义、刻画“词”之间的相对关系，因此逐渐成为了自然语言处理的重要工具，在管理学、心理学等社会科学领域取得了丰富的研究进展。相比于传统的、以人工编码和词频统计为主导的文本分析方式，词嵌入的独特优势在于：\n 借助计算机分析技术，可以在短时间内、以较低成本，实现对大规模文本数据的高效处理； 在挖掘文本特征和理解文本内容时，更多地依赖文本自身的分布规律，具有较强的客观性，其背后“数据驱动”的分析逻辑也使这一技术在探索性研究中具有较大的应用优势； 面对跨时间、跨文化比较的研究话题、以及在挖掘社会学、行为学变量及变量关系等领域展现出广阔的应用前景。  词嵌入技术已在社会科学领域得到了广泛的应用，主要包括：社会偏见 、概念联想[14] 、关系网络和判断机制[16] 等六大主题，大量研究见诸 Nature、Science、PNAS、Academy Management Journal、American Sociological Review、Management Science 等国际期刊。反观国内的社会科学领域，词嵌入方法的应用价值还未得到足够重视和讨论。据此，本文通过介绍词嵌入技术的基本原理、梳理国外社会科学领域对词嵌入的应用情况，以期帮助国内社会科学研究者了解该技术独特的应用价值，推动词嵌入技术在大数据时代背景下对我国社会科学研究方法的丰富和推动。具体而言，本文：","title":"大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用"},{"content":"前不久分享了一篇JCR2018的综述 营销研究中文本分析应用概述(含案例及代码) \n最近看到一篇JCR2021的实证 语言具体性如何影响消费者态度 ，研究者从一个现象, 即消费者可以通过感知店员的表达具体(例如，更多的名词而非代词)，判断店员是否用心倾听自己的需求。这有点像三十年前， 在服务态度不好的百货商场，店员往往爱答不理。\n  大邓作为消费者，相比1、2、3三种表达方式，我会更喜欢会觉得4、5、6句子中使用**较多细节、具体词的店员。**而简短表达，代词过多，表明店员连嘴都懒得张口服务我，似乎对我们的切身需求关注不足，态度好不端正的感觉。文中对店员言语具体性表达给出了建议及原因，例子如下图。\n   结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘|2022五一工作坊 想随时随地系统学习Python文本分析，可以选择  Python网络爬虫与文本分析 | 2021录播课(虽是录播，但章节更多一些)。   更喜欢有互动感通过直播学习，可以考虑  Python网络爬虫与文本分析 | 2022五一直播    我找了三篇文本具体性的论文，文章结尾附有具体性的Python案例代码，希望能对大家有帮助。\n语言具体性 语言具体性Concreteness描述了一个词在多大程度上是指一个实际的、有形的或“真实的”实体，以一种更具体、更熟悉、更容易被眼睛或心灵感知的方式描述对象和行为（即，可想象或生动；Brysbaert, Warriner, and Kuperman 2014; Semin and Fiedler 1988). 我找了三篇文本具体性的论文，文章结尾附有具体性的Python案例代码，希望能对大家有帮助。\n具体性词典 Brysbaert, Warriner, A. B., \u0026amp; Kuperman, V. (2014) 找4000人，网络众包标注，开发了英文40000词的具体性词典。下图是对应的词典excel文件，字段Conc.M就是对应词语的具体性得分。\n  心理距离与语言具体性 Snefjella, Bryor, and Victor Kuperman(2015)挖掘了心理距离与语言具体性之间的数学关系， 第一次将心理距离看做连续性变量进行度量(而之前的研究几乎只把心理距离设置为高、低二分类变量)，计算过程使用了Brysbaert2014的语言具体性词典度量。\n实验结果与我们认知相吻合，基本上心理距离越大， 具体性得分越小；反之，也成立。下面我列出在地理、时间、社会三个维度的量化可视化结果。\n地理维度   时间维度   社会维度     代码实现-以JCR为例   消费者经常对客户服务感到沮丧。 但是语言的简单转变是否有助于提高客户满意度？ 我们认为，语言具体性linguistic concreteness——员工在与客户交谈时使用的词语的有形性tangibility、具体性speciﬁcity或可想象性imaginability——可以塑造消费者的态度和行为。 五项研究，包括对两个不同领域环境中超过 1,000 次真实消费者-员工互动的文本分析，表明当员工与他们具体交谈时，客户会更满意、更愿意购买和购买。 这是因为客户推断使用更具体语言的员工正在倾听（即关注并理解他们的需求）。 这些发现加深了对语言如何塑造消费者行为的理解，揭示了具体性影响人们感知的心理机制，并为管理者帮助提高客户满意度提供了一种直接的方法。\n假设我们作为消费者，看到员工对同一个意思使用如下不同表达，\n  相比4、5、6这三种表达方式，会觉得句子中使用**较多代词的店员懒得说话(态度不端正)。**而使用较多名词和形容词，会表明店员关注我们的切身需求。这篇JCR就是从这个角度切入的研究。\nJCR文中具体性计算说明\nWe computed a concreteness score for each conversational turn (averaging across all words in that turn) and for each conversational participant (averaging across all words over all their turns). Results were the same whether or not stop words commonly excluded from linguistics analyses (e.g., but, and) were included. We report results excluding stop words. 按照我的理解， 设计如下算法\n 对文本(会话)使用nltk分词，得到词语列表 在具体性词典中查询对应的具体性得分 得到文本的具体性得分(句子所有词的具体性得分加总除以词数)  代码如下\nimport pandas as pd from nltk.tokenize import word_tokenize #JCR文中使用的Paetzold2016的词典 # Paetzold2016文中的词典下载链接失效。这里使用Brysbaert2014的词典 df = pd.read_excel(\u0026#34;Concreteness_ratings_Brysbaert_et_al_BRM.xlsx\u0026#34;) from nltk.tokenize import word_tokenize def query_concreteness(word): \u0026#34;\u0026#34;\u0026#34; 查询word的具体性得分 \u0026#34;\u0026#34;\u0026#34; try: return df[df[\u0026#34;Word\u0026#34;]==word][\u0026#39;Conc.M\u0026#39;].values[0] except: return 0 def concreteness_score(text): \u0026#34;\u0026#34;\u0026#34; 计算文本的具体性得分 \u0026#34;\u0026#34;\u0026#34; score = 0 text = text.lower() try: words = word_tokenize(text) except: print(\u0026#39;你的电脑nltk没配置好，请观看视频https://www.bilibili.com/video/BV14A411i7DB\u0026#39;) words = text.split(\u0026#39; \u0026#39;) for word in words: try: score += query_concreteness(word=word) except: score += 0 return score/len(words) # 案例 employee_replys = [\u0026#34;I\u0026#39;ll go look for that\u0026#34;, \u0026#34;I\u0026#39;ll go search for that\u0026#34;, \u0026#34;I\u0026#39;ll go search for that top\u0026#34;, \u0026#34;I\u0026#39;ll go search for that t-shirt\u0026#34;, \u0026#34;I\u0026#39;ll go look for that t-shirt in grey\u0026#34;, \u0026#34;I\u0026#39;ll go search for that t-shirt in grey\u0026#34;] for idx, reply in enumerate(employee_replys): score=concreteness_score(reply) template = \u0026#34;Concreteness Score: {score:.2f}| Example-{idx}: {exmaple}\u0026#34; print(template.format(score=score, idx=idx, exmaple=reply)) Run\nConcreteness Score: 1.55 | Example-0: I\u0026#39;ll go look for that Concreteness Score: 1.55 | Example-1: I\u0026#39;ll go search for that Concreteness Score: 1.89 | Example-2: I\u0026#39;ll go search for that top Concreteness Score: 2.04 | Example-3: I\u0026#39;ll go search for that t-shirt Concreteness Score: 2.37 | Example-4: I\u0026#39;ll go look for that t-shirt in grey Concreteness Score: 2.37 | Example-5: I\u0026#39;ll go search for that t-shirt in grey 员工的表达越具体，具体性得分越高。\n跟JCR中的得分不一样，但是案例的得分趋势是一致的。基本上从上至下，每个员工回复对应的具体性得分越来越高。\n  代码获取 点击下载本文代码\n  结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘|2022五一工作坊\n  想随时随地系统学习Python文本分析，可以选择\n Python网络爬虫与文本分析 | 2021录播课(虽是录播，但章节更多一些)。    更喜欢有互动感通过直播学习，可以考虑\n Python网络爬虫与文本分析 | 2022五一直播    相关文献 Brysbaert, M., Warriner, A. B., \u0026amp; Kuperman, V. (2014). Concreteness ratings for 40 thousand generally known English word lemmas. Behavior Research Methods, 46, 904–911\nSnefjella, Bryor, and Victor Kuperman. \u0026ldquo;Concreteness and psychological distance in natural language use.\u0026rdquo; Psychological science 26, no. 9 (2015): 1449-1460.\nPaetzold, G. H., and L. Specia (2016), “Inferring Psycholinguistic Properties of Words,” in Proceedings of the North American Association for Computational Linguistics-Human Language Technologies 2016, 435–40.\nPackard, Grant, and Jonah Berger. \u0026ldquo;How concrete language shapes customer satisfaction.\u0026rdquo; Journal of Consumer Research 47, no. 5 (2021): 787-806.\n","permalink":"/blog/jcr_concreteness_computation/","summary":"前不久分享了一篇JCR2018的综述 营销研究中文本分析应用概述(含案例及代码) \n最近看到一篇JCR2021的实证 语言具体性如何影响消费者态度 ，研究者从一个现象, 即消费者可以通过感知店员的表达具体(例如，更多的名词而非代词)，判断店员是否用心倾听自己的需求。这有点像三十年前， 在服务态度不好的百货商场，店员往往爱答不理。\n  大邓作为消费者，相比1、2、3三种表达方式，我会更喜欢会觉得4、5、6句子中使用**较多细节、具体词的店员。**而简短表达，代词过多，表明店员连嘴都懒得张口服务我，似乎对我们的切身需求关注不足，态度好不端正的感觉。文中对店员言语具体性表达给出了建议及原因，例子如下图。\n   结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘|2022五一工作坊 想随时随地系统学习Python文本分析，可以选择  Python网络爬虫与文本分析 | 2021录播课(虽是录播，但章节更多一些)。   更喜欢有互动感通过直播学习，可以考虑  Python网络爬虫与文本分析 | 2022五一直播    我找了三篇文本具体性的论文，文章结尾附有具体性的Python案例代码，希望能对大家有帮助。\n语言具体性 语言具体性Concreteness描述了一个词在多大程度上是指一个实际的、有形的或“真实的”实体，以一种更具体、更熟悉、更容易被眼睛或心灵感知的方式描述对象和行为（即，可想象或生动；Brysbaert, Warriner, and Kuperman 2014; Semin and Fiedler 1988). 我找了三篇文本具体性的论文，文章结尾附有具体性的Python案例代码，希望能对大家有帮助。\n具体性词典 Brysbaert, Warriner, A. B., \u0026amp; Kuperman, V. (2014) 找4000人，网络众包标注，开发了英文40000词的具体性词典。下图是对应的词典excel文件，字段Conc.M就是对应词语的具体性得分。\n  心理距离与语言具体性 Snefjella, Bryor, and Victor Kuperman(2015)挖掘了心理距离与语言具体性之间的数学关系， 第一次将心理距离看做连续性变量进行度量(而之前的研究几乎只把心理距离设置为高、低二分类变量)，计算过程使用了Brysbaert2014的语言具体性词典度量。\n实验结果与我们认知相吻合，基本上心理距离越大， 具体性得分越小；反之，也成立。下面我列出在地理、时间、社会三个维度的量化可视化结果。\n地理维度   时间维度   社会维度     代码实现-以JCR为例   消费者经常对客户服务感到沮丧。 但是语言的简单转变是否有助于提高客户满意度？ 我们认为，语言具体性linguistic concreteness——员工在与客户交谈时使用的词语的有形性tangibility、具体性speciﬁcity或可想象性imaginability——可以塑造消费者的态度和行为。 五项研究，包括对两个不同领域环境中超过 1,000 次真实消费者-员工互动的文本分析，表明当员工与他们具体交谈时，客户会更满意、更愿意购买和购买。 这是因为客户推断使用更具体语言的员工正在倾听（即关注并理解他们的需求）。 这些发现加深了对语言如何塑造消费者行为的理解，揭示了具体性影响人们感知的心理机制，并为管理者帮助提高客户满意度提供了一种直接的方法。","title":"计算文本的语言具体性 | 以JCR2021论文为例"},{"content":" 这个笔记本是教程中的部分方法\n Dzyabura, El Kihal and Peres (2020), \u0026ldquo;Image Analytics in Marketing\u0026rdquo;, in The Handbook of Market Research, Ch 14, Editors: Christian Homburg, Martin Klarmann, Arnd Vomberg. Springer, 2021.\n 安装 代码是用 Python 编写的。 用于编程和运行代码的理想界面是通过 Anaconda 的 Jupyter Notebook。\n除了标准 Anaconda 库之外，还需要安装几个额外的库。 我们在代码中标记它们。\n!pip3 install opencv-contrib-python==4.5.5.64 !pip3 install opencv-python==4.5.5.62 !pip3 install scikit-image==0.18.3 import numpy as np import pandas as pd import os import random import cv2 # needs to be installed separately import matplotlib.pyplot as plt from skimage.io import imread, imshow import matplotlib.image as mpimg %matplotlib inline \n预定义特征提取 我们从可以从图像中提取基本特征,如亮度、颜色等。\n首先，我们加载一张图片并显示它。\nimg = mpimg.imread(\u0026#39;azreali.jpg\u0026#39;) imgplot = plt.imshow(img) plt.show()   颜色提取 灰度直方图 颜色是基本的图像特征。 以下是创建颜色直方图的一些示例，这些直方图捕获图像的颜色组成。\n将彩色招照片转为灰度照片\nimg_gray = imread(\u0026#39;azreali.jpg\u0026#39;,as_gray=True) imshow(img_gray) \u0026lt;matplotlib.image.AxesImage at 0x7fd5ffe7c910\u0026gt;  ​  \n​\n我们可以为灰度图像创建一个颜色直方图，计算每个像素的强度，范围在 0 为黑色和 256 为白色之间。\n你能猜出直方图的样子吗？\nimage = cv2.imread(\u0026#39;azreali.jpg\u0026#39;) gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) hist = cv2.calcHist([gray], [0], None, [256], [0, 256]) plt.figure() plt.title(\u0026#34;Grayscale Histogram\u0026#34;) plt.xlabel(\u0026#34;Bins\u0026#34;) plt.ylabel(\u0026#34;# of Pixels\u0026#34;) plt.plot(hist) plt.xlim([0, 256]) (0.0, 256.0)  ​   ​\nRGB直方图 实际上，直方图向右倾斜。 图片主要包含刻度亮侧的像素和相对较少的暗像素。\n接下来，我们可以为 RGB 颜色空间创建颜色直方图，0 表示颜色的最低强度，256 表示最高强度。\n你能猜出三座塔图片中的主要颜色是什么吗？\ncolor = (\u0026#39;b\u0026#39;,\u0026#39;g\u0026#39;,\u0026#39;r\u0026#39;) for i,col in enumerate(color): histr = cv2.calcHist([image],[i],None,[256],[0,256]) plt.plot(histr,color = col) plt.xlim([0,256]) plt.show()   确实。 图片中有很多蓝色，直方图检测到这些蓝色像素。\n今天讲的都是很简单的图片处理，图片是一种比文本体积更大的文件数据，受限制于个人技术水平以及电脑性能，大邓无法展示机器学习、深度学习的图片分析算法。感兴趣的同学可以阅读论文，了解图片分析在营销中的新应用新进展。\n Dzyabura, El Kihal and Peres (2020), \u0026ldquo;Image Analytics in Marketing\u0026rdquo;, in The Handbook of Market Research, Ch 14, Editors: Christian Homburg, Martin Klarmann, Arnd Vomberg. Springer, 2021.\n  点击上方图片购买课程   ","permalink":"/blog/image_analytics_in_marketing_code_examples_book_chapter/","summary":"这个笔记本是教程中的部分方法\n Dzyabura, El Kihal and Peres (2020), \u0026ldquo;Image Analytics in Marketing\u0026rdquo;, in The Handbook of Market Research, Ch 14, Editors: Christian Homburg, Martin Klarmann, Arnd Vomberg. Springer, 2021.\n 安装 代码是用 Python 编写的。 用于编程和运行代码的理想界面是通过 Anaconda 的 Jupyter Notebook。\n除了标准 Anaconda 库之外，还需要安装几个额外的库。 我们在代码中标记它们。\n!pip3 install opencv-contrib-python==4.5.5.64 !pip3 install opencv-python==4.5.5.62 !pip3 install scikit-image==0.18.3 import numpy as np import pandas as pd import os import random import cv2 # needs to be installed separately import matplotlib.","title":"营销研究中的图像分析"},{"content":"大家好，五一劳动节假期我们将迎来了新的一期“结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘”工作坊，欢迎大家报名参加。我们将分七次为大家介绍本次工作坊的详细内容，敬请期待。\n关于我们 为推动我国经济、统计等社会科学量化研究方法学习与应用，培养和训练社会科学相关领域的青年学者、硕博士研究生，促进社会科学相关领域研究方法科学化规范化，“结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘”五一工作坊为广大学者提供了一个高水平学术交流、研究方法普及与研究经验分享的平台。工作坊采用模块式教学方法，不仅侧重经济、统计等社会科学量化基本方法的介绍，而且更加注重研究设计与研究选题训练，注重理论实践相结合，培养学员社会科学量化分析研究的综合能力。\n结构模型又称为结构计量模型，是将经济学模型和统计模型结合，用于估计描述现实的深层参数，模拟现实世界，以便合理地评估政策效果的实证工具。结构模型通过建立引起因果关系的数据生成具体方式（机制）的模型来解决简化型中的问题。模型中明确地指明了一些重要的外部因素（如政策）是如何影响通过某些参数来影响参与人决策的，那么通过改变这些外部因素并结合现有数据所估计出来的参数，结构模型便可以提供一系列反事实推断，对政策的制定有重要的意义。政策评估需要建立在理解对政策不变的“深层”参数之上。在结构式方法中，理论和实证的联系是紧密的。由于其建模技术的优雅和深刻，不仅是当今经济政策评估领域的前沿，也是发展经济理论的有力武器，在世界顶级期刊中，采用结构模型建模的文章引起广泛关注和引用，为所在学科的理论发展和政策评估带来深刻影响。\n实证研究过程中学者普遍面临数据获取、清洗和编码的两大问题。在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用计量分析方法对数据进行分析。但大数据时代，网络数据成为亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两大问题，即：①从网络世界中高效地采集数据 ②从纷杂的文本数据抽取文本信息。\n在获取数据及文本信息后，需要使用计量方法对数据进行分析处理。Stata、ArcGIS、Matlab等软件功能日益强大，理论也与时俱进。前沿分析固然可能会给你的Paper加分，但不理解其理论依据，会导致前沿方法的滥用, 使你的研究大为失色。\nDSGE，全称是dynamic stochastic general equilibrium，即动态随机一般均衡模型。是目前在宏观经济学研究占重要地位（甚至是主导地位）的模型方法，主要用于讨论经济增长、经济周期以及讨论政策工具效果（财政和货币政策）。我们需要对DSGE的深入学习。\n为此，本次五一工作坊特别邀请七位走在理论实证、数据分析前沿的学者，为广大热爱经济学的学生、青年教师，讲解当下前沿模型的核心思想，基于Matlab、ArcGIS、Stata、Python等软件的实践操作。在这个知识与思想碰撞的时代，我们将与您分享最前沿的思想与实践技巧！为您带来最前沿计量经济理论与扎实操作并重的高质量课程。\n工作坊详情页 由刘文革老师总筹划、谢杰老师协调发起工作坊，工作坊由7位老师分讲。\n点击下方链接，进入课程详情页，每门课程费用2000元(邓建鹏老师课程1000元)。\n 结构模型(一) -邹建文(中南财经政法大学) 结构模型(二) -邓建鹏(上海财经大学) DSGE-王文甫(四川大学) Stata实证前沿(一)-王非(中国人民大学) Stata实证前沿(二)-司继春(上海对外经贸大学) 空间计量-李光勤(安徽财经大学) Python数据挖掘-邓旭东(哈尔滨工业大学)  授课方式  时间  2022年五一期间（具体时间待定） 每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑（部分课程晚间18:30-21:30进行）   地点: 小鹅通平台（线上直播） 每门课程2000元，视频保留10天；邓建鹏老师课程1000元  \n报名信息 全国高等院校及研究机构从事经济科学研究的青年师生。尤其适合那些希望掌握高级实证方法，提升量化研究设计能力和国家课题申报能力的研究者。\n费用  每门课程2000元(每位老师讲授一门)；邓建鹏老师课程1000元  优惠政策  个人报名优惠：报名两位老师的课程9折；三位老师的课程8折；四位及以上老师的课程7.5折；老学员9折；学生优惠200元/人。 团队报名优惠：三人成团及以上9折；五人成团及以上8折。  报名时间 从即日起\n报名咨询  17816181460（同微信）（汪老师）    缴费信息  单位：杭州国商智库信息技术服务有限公司 开户银行： 中国银行杭州大学城支行 银行账户：6232636200100260588  ","permalink":"/blog/2022-05-workshop/","summary":"大家好，五一劳动节假期我们将迎来了新的一期“结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘”工作坊，欢迎大家报名参加。我们将分七次为大家介绍本次工作坊的详细内容，敬请期待。\n关于我们 为推动我国经济、统计等社会科学量化研究方法学习与应用，培养和训练社会科学相关领域的青年学者、硕博士研究生，促进社会科学相关领域研究方法科学化规范化，“结构模型、DSGE、Stata实证前沿、空间计量、Python数据挖掘”五一工作坊为广大学者提供了一个高水平学术交流、研究方法普及与研究经验分享的平台。工作坊采用模块式教学方法，不仅侧重经济、统计等社会科学量化基本方法的介绍，而且更加注重研究设计与研究选题训练，注重理论实践相结合，培养学员社会科学量化分析研究的综合能力。\n结构模型又称为结构计量模型，是将经济学模型和统计模型结合，用于估计描述现实的深层参数，模拟现实世界，以便合理地评估政策效果的实证工具。结构模型通过建立引起因果关系的数据生成具体方式（机制）的模型来解决简化型中的问题。模型中明确地指明了一些重要的外部因素（如政策）是如何影响通过某些参数来影响参与人决策的，那么通过改变这些外部因素并结合现有数据所估计出来的参数，结构模型便可以提供一系列反事实推断，对政策的制定有重要的意义。政策评估需要建立在理解对政策不变的“深层”参数之上。在结构式方法中，理论和实证的联系是紧密的。由于其建模技术的优雅和深刻，不仅是当今经济政策评估领域的前沿，也是发展经济理论的有力武器，在世界顶级期刊中，采用结构模型建模的文章引起广泛关注和引用，为所在学科的理论发展和政策评估带来深刻影响。\n实证研究过程中学者普遍面临数据获取、清洗和编码的两大问题。在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用计量分析方法对数据进行分析。但大数据时代，网络数据成为亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两大问题，即：①从网络世界中高效地采集数据 ②从纷杂的文本数据抽取文本信息。\n在获取数据及文本信息后，需要使用计量方法对数据进行分析处理。Stata、ArcGIS、Matlab等软件功能日益强大，理论也与时俱进。前沿分析固然可能会给你的Paper加分，但不理解其理论依据，会导致前沿方法的滥用, 使你的研究大为失色。\nDSGE，全称是dynamic stochastic general equilibrium，即动态随机一般均衡模型。是目前在宏观经济学研究占重要地位（甚至是主导地位）的模型方法，主要用于讨论经济增长、经济周期以及讨论政策工具效果（财政和货币政策）。我们需要对DSGE的深入学习。\n为此，本次五一工作坊特别邀请七位走在理论实证、数据分析前沿的学者，为广大热爱经济学的学生、青年教师，讲解当下前沿模型的核心思想，基于Matlab、ArcGIS、Stata、Python等软件的实践操作。在这个知识与思想碰撞的时代，我们将与您分享最前沿的思想与实践技巧！为您带来最前沿计量经济理论与扎实操作并重的高质量课程。\n工作坊详情页 由刘文革老师总筹划、谢杰老师协调发起工作坊，工作坊由7位老师分讲。\n点击下方链接，进入课程详情页，每门课程费用2000元(邓建鹏老师课程1000元)。\n 结构模型(一) -邹建文(中南财经政法大学) 结构模型(二) -邓建鹏(上海财经大学) DSGE-王文甫(四川大学) Stata实证前沿(一)-王非(中国人民大学) Stata实证前沿(二)-司继春(上海对外经贸大学) 空间计量-李光勤(安徽财经大学) Python数据挖掘-邓旭东(哈尔滨工业大学)  授课方式  时间  2022年五一期间（具体时间待定） 每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑（部分课程晚间18:30-21:30进行）   地点: 小鹅通平台（线上直播） 每门课程2000元，视频保留10天；邓建鹏老师课程1000元  \n报名信息 全国高等院校及研究机构从事经济科学研究的青年师生。尤其适合那些希望掌握高级实证方法，提升量化研究设计能力和国家课题申报能力的研究者。\n费用  每门课程2000元(每位老师讲授一门)；邓建鹏老师课程1000元  优惠政策  个人报名优惠：报名两位老师的课程9折；三位老师的课程8折；四位及以上老师的课程7.5折；老学员9折；学生优惠200元/人。 团队报名优惠：三人成团及以上9折；五人成团及以上8折。  报名时间 从即日起\n报名咨询  17816181460（同微信）（汪老师）    缴费信息  单位：杭州国商智库信息技术服务有限公司 开户银行： 中国银行杭州大学城支行 银行账户：6232636200100260588  ","title":"结构模型|DSGE|Stata实证前沿|空间计量|Python数据挖掘2022五一工作坊"},{"content":"越来越多的社交网络学者， 为测量情绪， 基于心理学家 Robert Plutchik 提出的模型（通常简称为“Plutchik轮”，人类的情绪一共有8大类）制作了大量的情绪可视化作品。在某种程度上，Plutchik轮可以看做情绪指纹，例如不同的电影题材在8类情绪的分布是不一样的。\n  今天介绍 PyPlutchik，这是一个 Python 库，专门用于在文本或语料库中可视化 Plutchik 的情绪。 PyPlutchik 绘制 Plutchik 的花朵，每个情感花瓣的大小取决于语料库中检测到或注释了多少情感，也代表每个情感花瓣的三个强度程度。\n安装 pip3 install pyplutchik \nUsage from pyplutchik import plutchik emotions = {\u0026#39;joy\u0026#39;: 0.6, \u0026#39;trust\u0026#39;: 0.4, \u0026#39;fear\u0026#39;: 0.1, \u0026#39;surprise\u0026#39;: 0.7, \u0026#39;sadness\u0026#39;: 0.1, \u0026#39;disgust\u0026#39;: 0.5, \u0026#39;anger\u0026#39;: 0.4, \u0026#39;anticipation\u0026#39;: 0.6} plutchik(emotions) \n功能特性 PyPlutchik 提供了一个即插即用的工具，用于在文本或语料库中定量表示 Plutchik 的情绪。 它尊重 Plutchik 轮中每个花瓣的原始颜色和空间位移。\n在 Pyplutchik 中，用户可以只传递一个字典作为唯一参数，其中字典的键必须是 8 种基本情绪。 每个值必须是 ∈ [0, 1]。\n  每类情绪存在三种强度，下表是Pyplutchik的8大类情绪三种强度汇总。\n用户还可以给每个情绪传入一个长度是3的列表，依次表示情绪在低、中、高三种强度的程度，数值0 和 1 之间。\n   Lower intensity Emotion Higher intensity     Annoyance Anger Rage   Interest Anticipation Vigilance   Serenity Joy Ecstasy   Acceptance Trust Admiration   Apprehension Fear Terror   Distraction Surprise Amazement   Pensiveness Sadness Grief   Boredom Disgust Loathing      PyPlutchik 也可表征用户数据中的主要二元、次要二元、二元和相反的情绪。 它会自动从字典的关键字中了解用户想要显示什么样的二元组。\n  绘图技巧 可以专注于情绪子集，不会忽视其他情绪，将情绪列表作为参数“highlight_emotions”的值传递：\n强调某些情绪   我们可以比较同一亚马逊语料库的不同子组，将我们的可视化并排放置，并仅突出显示愤怒、厌恶和恐惧的花瓣，以轻松发现这些负面情绪在 5 星评论中的表现如何低于 1 星评论 .\n强调某些情绪   或者可以隐藏坐标、刻度和标签，只绘制花瓣，使用参数 show_coordinates = False 和 show_ticklabels = False。下图是imdb不同电影的情绪轮\n强调某些情绪   查看文档 有关所有参数的文档和示例库，请参见文档\n文档下载\n🔥 PyPlutchik 2.0 即将推出！ 新功能包括从文本中提取情感并检查非主题词典。 敬请期待……🔥\n说明 如果使用PyPlutchik，请在文献中说明，格式如下\nSemeraro A, Vilella S, Ruffo G (2021) PyPlutchik: Visualising and comparing emotion-annotated corpora PLOS ONE 16(9):e0256503.https://doi.org/10.1371/journal.pone.0256503 \nSemeraro的研究   #the-canvas { border: 1px solid black; direction: ltr; width: 100%; height: auto; display: none; } #paginator { display: none; text-align: center; margin-bottom: 10px; } #loadingWrapper { display: none; justify-content: center; align-items: center; width: 100%; height: 350px; } #loading { display: inline-block; width: 50px; height: 50px; border: 3px solid #d2d0d0;; border-radius: 50%; border-top-color: #383838; animation: spin 1s ease-in-out infinite; -webkit-animation: spin 1s ease-in-out infinite; } @keyframes spin { to { -webkit-transform: rotate(360deg); } } @-webkit-keyframes spin { to { -webkit-transform: rotate(360deg); } }  Previous Next \u0026nbsp; \u0026nbsp; Page:  /       window.onload = function() { var url = \"\\/\" + '220107538.pdf'; var hidePaginator = \"\" === \"true\"; var hideLoader = \"\" === \"true\"; var selectedPageNum = parseInt(\"3\") || 1; var pdfjsLib = window['pdfjs-dist/build/pdf']; pdfjsLib.GlobalWorkerOptions.workerSrc = \"\\/\" + '/js/pdf-js/build/pdf.worker.js'; var pdfDoc = null, pageNum = selectedPageNum, pageRendering = false, pageNumPending = null, scale = 3, canvas = document.getElementById('the-canvas'), ctx = canvas.getContext('2d'), paginator = document.getElementById(\"paginator\"), loadingWrapper = document.getElementById('loadingWrapper'); showPaginator(); showLoader(); function renderPage(num) { pageRendering = true; pdfDoc.getPage(num).then(function(page) { var viewport = page.getViewport({scale: scale}); canvas.height = viewport.height; canvas.width = viewport.width; var renderContext = { canvasContext: ctx, viewport: viewport }; var renderTask = page.render(renderContext); renderTask.promise.then(function() { pageRendering = false; showContent(); if (pageNumPending !== null) { renderPage(pageNumPending); pageNumPending = null; } }); }); document.getElementById('page_num').textContent = num; } function showContent() { loadingWrapper.style.display = 'none'; canvas.style.display = 'block'; } function showLoader() { if(hideLoader) return loadingWrapper.style.display = 'flex'; canvas.style.display = 'none'; } function showPaginator() { if(hidePaginator) return paginator.style.display = 'block'; } function queueRenderPage(num) { if (pageRendering) { pageNumPending = num; } else { renderPage(num); } } function onPrevPage() { if (pageNum = pdfDoc.numPages) { return; } pageNum++; queueRenderPage(pageNum); } document.getElementById('next').addEventListener('click', onNextPage); pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) { pdfDoc = pdfDoc_; var numPages = pdfDoc.numPages; document.getElementById('page_count').textContent = numPages; if(pageNum  numPages) { pageNum = numPages } renderPage(pageNum); }); }  --- Semeraro, Alfonso, Salvatore Vilella, Giancarlo Ruffo, and Massimo Stella. \u0026#34;Writing about COVID-19 vaccines: Emotional profiling unravels how mainstream and alternative press framed AstraZeneca, Pfizer and vaccination campaigns.\u0026#34; *arXiv preprint arXiv:2201.07538* (2022).  摘要: 自 2020 年 11 月宣布 COVID-19 疫苗以来，媒体和社交媒体对 COVID-19 疫苗进行了大量辩论。由于大多数研究都集中在社交媒体中的 COVID-19 虚假信息上，与其他来源相比，主流新闻媒体如何构建 COVID-19 叙述很少受到关注。为了填补这一空白，我们使用认知网络科学和自然语言处理来重建 5745 条关于 COVID-19 疫苗的新闻的随时间变化的语义和情感框架。我们的数据集涵盖了 8 个月内的 17 个网点，其中包括在 Facebook（500 万总股数）和 Twitter（20 万股总股数）上大量转发的意大利新闻文章。我们发现主流消息来源构建“疫苗/疫苗”的总体概念的方式始终具有高度的信任/预期和较少的厌恶。在替代来源构建 COVID-19 疫苗的方式中，这些情绪严重缺失。在疫苗的特定实例中发现了更多差异。另类新闻包括以强烈的悲伤来描述阿斯利康疫苗的标题，而主流标题中没有。与“阿斯利康”相比，主流新闻最初将“辉瑞”与副作用（例如“过敏”、“反应”、“发烧”）相关联更多。随着后一种疫苗的暂停，在 2021 年 3 月 15 日，我们发现了一种语义/情感转变：即使是主流文章标题都将“阿斯利康”框定为在语义上更丰富与副作用的负面关联，而“辉瑞”则经历了积极的效价转变，主要与其更高的效率有关。血栓形成与可怕的概念联想一起进入了疫苗的框架，而死亡这个词经历了情感转变，在替代标题中转向恐惧，在主流标题中失去了希望的内涵，缺乏预期。我们的发现揭示了媒体采用的围绕 COVID-19 疫苗的情感叙述的关键方面，强调了了解替代媒体和主流媒体如何报道疫苗接种新闻的必要性。 Keywords: natural language processing, text analysis, complex networks, cognitive network science, COVID-19, COVID-19 vaccines         点击上方图片购买课程   ","permalink":"/blog/pyplutchik-emotion-circle/","summary":"越来越多的社交网络学者， 为测量情绪， 基于心理学家 Robert Plutchik 提出的模型（通常简称为“Plutchik轮”，人类的情绪一共有8大类）制作了大量的情绪可视化作品。在某种程度上，Plutchik轮可以看做情绪指纹，例如不同的电影题材在8类情绪的分布是不一样的。\n  今天介绍 PyPlutchik，这是一个 Python 库，专门用于在文本或语料库中可视化 Plutchik 的情绪。 PyPlutchik 绘制 Plutchik 的花朵，每个情感花瓣的大小取决于语料库中检测到或注释了多少情感，也代表每个情感花瓣的三个强度程度。\n安装 pip3 install pyplutchik \nUsage from pyplutchik import plutchik emotions = {\u0026#39;joy\u0026#39;: 0.6, \u0026#39;trust\u0026#39;: 0.4, \u0026#39;fear\u0026#39;: 0.1, \u0026#39;surprise\u0026#39;: 0.7, \u0026#39;sadness\u0026#39;: 0.1, \u0026#39;disgust\u0026#39;: 0.5, \u0026#39;anger\u0026#39;: 0.4, \u0026#39;anticipation\u0026#39;: 0.6} plutchik(emotions) \n功能特性 PyPlutchik 提供了一个即插即用的工具，用于在文本或语料库中定量表示 Plutchik 的情绪。 它尊重 Plutchik 轮中每个花瓣的原始颜色和空间位移。\n在 Pyplutchik 中，用户可以只传递一个字典作为唯一参数，其中字典的键必须是 8 种基本情绪。 每个值必须是 ∈ [0, 1]。\n  每类情绪存在三种强度，下表是Pyplutchik的8大类情绪三种强度汇总。\n用户还可以给每个情绪传入一个长度是3的列表，依次表示情绪在低、中、高三种强度的程度，数值0 和 1 之间。","title":"PyPlutchik库 | 可视化文本的情绪轮(情绪指纹)"},{"content":" 点击上方图片购买课程   Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。\n它适用于：Jupyter Notebook、Google Colab、Deepnote、Kaggle Notebook、Mercury。\n  安装 pip3 install bloxs \n快速上手 from bloxs import B B(1234, \u0026#34;Bloxs in notebook!\u0026#34;)   案例    Bloxs Code      B(1234, \u0026quot;Bloxs in notebook!\u0026quot;)    B(1999, \u0026quot;Percent change!\u0026quot;, percent_change=10)    B(\u0026quot;🎉🎉🎉\u0026quot;, \u0026quot;Works with emojis\u0026quot;)    B(\u0026quot;68%\u0026quot;, \u0026quot;Loading progress\u0026quot;, progress=68)    B(\u0026quot;68%\u0026quot;, \u0026quot;Loading progress\u0026quot;, progress=68, color=\u0026quot;green\u0026quot;) 颜色color参数可以设为\u0026quot;blue\u0026quot;, \u0026ldquo;red\u0026rdquo;, \u0026ldquo;green\u0026rdquo; 或十六进制表示 (例如\u0026quot;#fa33fa\u0026quot;)    B(\u0026quot;123\u0026quot;, \u0026quot;Display line chart\u0026quot;, points=[1,4,2,3,5,6])    B(\u0026quot;123\u0026quot;, \u0026quot;Display line chart\u0026quot;, points=[1,4,2,3,5,6], color=\u0026quot;red\u0026quot;)    B(\u0026quot;123\u0026quot;, \u0026quot;Display stepped chart\u0026quot;, points=[1,4,2,3,5,6], chart_type=\u0026quot;stepped\u0026quot;)    B(\u0026quot;123\u0026quot;, \u0026quot;Display bar chart\u0026quot;, points=[1,4,2,3,5,6], chart_type=\u0026quot;bar\u0026quot;)    B(\u0026quot;123\u0026quot;, \u0026quot;Display bar chart\u0026quot;, points=[1,4,2,3,5,6], chart_type=\u0026quot;bar\u0026quot;, color=\u0026quot;green\u0026quot;)    可以在一行内整合多个图\nB([ B(1999, \u0026#34;Percent change!\u0026#34;, percent_change=10), B(\u0026#34;🎉🎉🎉\u0026#34;, \u0026#34;Works with emojis\u0026#34;), B(\u0026#34;68%\u0026#34;, \u0026#34;Loading progress\u0026#34;, progress=68), B(1234, \u0026#34;Bloxs in notebook!\u0026#34;) ])   B([ B(\u0026#34;786\u0026#34;, \u0026#34;Display bar chart\u0026#34;, points=[1,4,2,3,5,6], chart_type=\u0026#34;bar\u0026#34;, color=\u0026#34;green\u0026#34;), B(\u0026#34;123\u0026#34;, \u0026#34;Display line chart\u0026#34;, points=[1,4,2,3,5,6], color=\u0026#34;red\u0026#34;), B(\u0026#34;123\u0026#34;, \u0026#34;Display stepped chart\u0026#34;, points=[1,4,2,3,5,6], chart_type=\u0026#34;stepped\u0026#34;) ])   如果想在自己电脑中实验上述代码，可以点击 notebook 下载。\n结合Mercury用Bloxs Mercury 是一个用于将笔记本转换为交互式网络应用程序的框架。 它基于 YAML 配置将小部件添加到笔记本中。 下面展示了一个带有 bloxs 的笔记本，以及作为 Mercury 的 Web 应用程序的同一笔记本。\n  Mercury网页应用 Demo\n  ","permalink":"/blog/bloxs-interactive-visualization/","summary":"点击上方图片购买课程   Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。\n它适用于：Jupyter Notebook、Google Colab、Deepnote、Kaggle Notebook、Mercury。\n  安装 pip3 install bloxs \n快速上手 from bloxs import B B(1234, \u0026#34;Bloxs in notebook!\u0026#34;)   案例    Bloxs Code      B(1234, \u0026quot;Bloxs in notebook!\u0026quot;)    B(1999, \u0026quot;Percent change!\u0026quot;, percent_change=10)    B(\u0026quot;🎉🎉🎉\u0026quot;, \u0026quot;Works with emojis\u0026quot;)    B(\u0026quot;68%\u0026quot;, \u0026quot;Loading progress\u0026quot;, progress=68)    B(\u0026quot;68%\u0026quot;, \u0026quot;Loading progress\u0026quot;, progress=68, color=\u0026quot;green\u0026quot;) 颜色color参数可以设为\u0026quot;blue\u0026quot;, \u0026ldquo;red\u0026rdquo;, \u0026ldquo;green\u0026rdquo; 或十六进制表示 (例如\u0026quot;#fa33fa\u0026quot;)    B(\u0026quot;123\u0026quot;, \u0026quot;Display line chart\u0026quot;, points=[1,4,2,3,5,6])    B(\u0026quot;123\u0026quot;, \u0026quot;Display line chart\u0026quot;, points=[1,4,2,3,5,6], color=\u0026quot;red\u0026quot;)    B(\u0026quot;123\u0026quot;, \u0026quot;Display stepped chart\u0026quot;, points=[1,4,2,3,5,6], chart_type=\u0026quot;stepped\u0026quot;)    B(\u0026quot;123\u0026quot;, \u0026quot;Display bar chart\u0026quot;, points=[1,4,2,3,5,6], chart_type=\u0026quot;bar\u0026quot;)    B(\u0026quot;123\u0026quot;, \u0026quot;Display bar chart\u0026quot;, points=[1,4,2,3,5,6], chart_type=\u0026quot;bar\u0026quot;, color=\u0026quot;green\u0026quot;)    可以在一行内整合多个图","title":"Bloxs包 | 可在notebook中使用的交互可视化包"},{"content":" 点击上方图片购买课程   Deng\u0026rsquo;s StartPage 最近一年多，大邓之前一直使用自己diy的浏览器启动页, 最初是被该启动页的关键词搜索功能所惊艳。但用久了人总会喜新厌旧，但是每次打开浏览器，呈现的网址链接效果太繁杂了。而且大多数都是僵尸链接，平常很少点击的，反而常用的链接都设置成了快捷键。\n 点击上图访问旧版启动页   \n经过一番搜索，找到以下9个启动页，除了startpage7和startpage8外，大多数启动页都具有快捷关键词搜索方法， 大家根据自己喜好进行选择。\n快捷关键词搜索方法 4个启动页基本拥有相同的快捷关键词搜索方法\n 点击时钟，弹出日期框和倒计时信息。 搜索框支持command/搜索语法. 例如  在搜索框输入scholar/ python回车，就能实现在谷歌学术中搜python相关信息。类似的功能还有。\n   搜索框命令 目标网站 例子 作用     scholar/ google scholar scholar/ python 在谷歌学术中搜python相关信息   book/ 豆瓣读书 book/ python 在豆瓣读书中搜python相关书籍信息   zhihu/ 知乎 zhihu/ python 在知乎网站搜python相关信息   youtube/ youtube youtube/ python 在youtube搜索python相关视频   taobao/ 淘宝 taobao/ python 在淘宝搜python相关商品服务   jd/ 京东 jd/ python 在京东搜python相关商品服务   bilibili/ B站 bilibili/ python 在B站搜索python相关视频   github/ github github/ python 在github上搜python相关仓库代码等信息   mail/ qq邮箱 mail/ 默认打开qq邮箱   medium/ Medium medium/ python 在medium中搜python相关内容   arxiv/ arxiv arxiv/ python 在arXiv中搜python相关论文   img/ unsplash图片网 img/ sun 在unsplash中搜sun相关的图片   scihub/ scihub scihub/ 论文的doi 在scihub中根据论文doi寻找论文pdf资源    \n9个启动页 9个启动页搜索功能略微有些差异，并不是所有的都具备快捷关键词搜索方法。\n 第一类，有快捷关键词搜索方法，其中startpage1、2、3、5、6、9项目文件夹中使用了相同的搜索引擎js文件search-box.js 第二类，有快捷关键词搜索方法， startpage4使用特有的js文件定义了常用的关键词检索方法，配置文件为config.js； 第三类，没快捷关键词搜索方法， startpage7、8各自使用的自由搜索引擎。  startpage1   Demo\n  Code Download\n  拥有关键词快捷搜索功能。简单到项目文件夹中只有html、js、css及字体4个文件。\n 点击上图访问startpage1   Startpage2   Demo\n  Code Download\n  拥有关键词快捷搜索功能。如startpage1一般简单，项目文件夹中也只有html、js、css及字体4个文件。\n 点击上图访问startpage2   Startpage3   Demo\n  Code Download\n  拥有关键词快捷搜索功能。相比前两个，这个启动页拥有自动背景切换功能，选取的都是漂亮的油画。\n 点击上图访问startpage3   Startpage4   Demo\n  Code Download\n  拥有关键词快捷搜索功能。功能最强大，最炫酷的，大邓正在使用的启动页。\n 点击上图访问startpage4   Startpage5   Demo\n  Code Download\n  拥有关键词快捷搜索功能。上方的黑色波浪是动画，实时变化。\n 点击上图访问startpage5   Startpage6   Demo\n  Code Download\n  拥有关键词快捷搜索功能。\n 点击上图访问startpage6   Startpage7   Demo\n  Code Download\n  注意，startpage7没有关键词快捷搜索功能。\n 点击上图访问startpage7   Startpage8   Demo\n  Code Download\n  注意，startpage8没有关键词快捷搜索功能。\n 点击上图访问startpage8   Startpage9   Demo\n  Code Download\n  拥有关键词快捷搜索功能。\n 点击上图访问startpage9   Code使用方法 下载code压缩文件夹，以startpage1文件夹为例， 使用浏览器打开文件夹中的index.html文件，浏览器就是如下效果。\n    ","permalink":"/blog/dengstartpage/","summary":"点击上方图片购买课程   Deng\u0026rsquo;s StartPage 最近一年多，大邓之前一直使用自己diy的浏览器启动页, 最初是被该启动页的关键词搜索功能所惊艳。但用久了人总会喜新厌旧，但是每次打开浏览器，呈现的网址链接效果太繁杂了。而且大多数都是僵尸链接，平常很少点击的，反而常用的链接都设置成了快捷键。\n 点击上图访问旧版启动页   \n经过一番搜索，找到以下9个启动页，除了startpage7和startpage8外，大多数启动页都具有快捷关键词搜索方法， 大家根据自己喜好进行选择。\n快捷关键词搜索方法 4个启动页基本拥有相同的快捷关键词搜索方法\n 点击时钟，弹出日期框和倒计时信息。 搜索框支持command/搜索语法. 例如  在搜索框输入scholar/ python回车，就能实现在谷歌学术中搜python相关信息。类似的功能还有。\n   搜索框命令 目标网站 例子 作用     scholar/ google scholar scholar/ python 在谷歌学术中搜python相关信息   book/ 豆瓣读书 book/ python 在豆瓣读书中搜python相关书籍信息   zhihu/ 知乎 zhihu/ python 在知乎网站搜python相关信息   youtube/ youtube youtube/ python 在youtube搜索python相关视频   taobao/ 淘宝 taobao/ python 在淘宝搜python相关商品服务   jd/ 京东 jd/ python 在京东搜python相关商品服务   bilibili/ B站 bilibili/ python 在B站搜索python相关视频   github/ github github/ python 在github上搜python相关仓库代码等信息   mail/ qq邮箱 mail/ 默认打开qq邮箱   medium/ Medium medium/ python 在medium中搜python相关内容   arxiv/ arxiv arxiv/ python 在arXiv中搜python相关论文   img/ unsplash图片网 img/ sun 在unsplash中搜sun相关的图片   scihub/ scihub scihub/ 论文的doi 在scihub中根据论文doi寻找论文pdf资源","title":"极简浏览器启动页StartPage分享"},{"content":" 点击上方图片购买课程   本文相关资料  Christian Homburg, Martin Klarmann, and Arnd Vomberg. 2022. Handbook of Market Research.\nHumphreys A. (2019) Automated Text Analysis. In: Homburg C., Klarmann M., Vomberg A. (eds) Handbook of Market Research. Springer, Cham. https://doi.org/10.1007/978-3-319-05542-8_26-1\nHumphreys, Ashlee, and Rebecca Jen-Hui Wang. \u0026ldquo;Automated text analysis for consumer research.\u0026rdquo; Journal of Consumer Research 44.6 (2018): 1274-1306.\n 摘要 在过去的二十年里，可供营销研究人员分析的文本数据量呈指数级增长。 然而，书面语言充满了复杂的含义、歧义和细微差别。 营销研究人员如何才能将这种丰富的语言表示转化为可量化的数据以进行统计分析和建模？ 本章介绍了文本分析各种方法。 在涵盖了文本分析的一些基础知识后，总结和探索了在营销研究中的应用，如情感分析、主题建模和研究组织沟通，包括对产品发布的口碑反应的案例研究。\n关键词   文本分析Text analysis\n  计算机辅助文本分析computer-assisted text analysis\n  自动内容分析automated content analysis\n  内容分析content analysis\n  主题建模topic modeling\n  情感分析sentiment analysis\n  LDA主题分析LDA\n  口碑word-of-mouth\n  一、引言 要了解自动文本分析(后文均简称文本分析)，首先要回顾一下它与传统内容分析的关系。内容分析是社会科学中用于系统地评估和分析消息内容的一种方法，通常以文本的形式，最早的内容分析传统可以追溯到 16 世纪的修道院生活，但现代内容分析是由 Max Weber (1924) 首次提出来研究新闻的。从那时起，社会学和传播学的学者就使用人类编码的内容分析来调查媒体内容的差异，描述传播随时间的趋势，揭示组织或个人关注的模式，并检查个人的态度、兴趣、意图或价值观或一组（例如，Berelson 1971；Gamson 和 Modigliani 1989）。\n传统的内容分析首先通过 Kassarjian (1977) 的方法大纲引入消费者行为领域，然后由 Kolbe 和 Burnett (1991) 进行再创新，以提高可靠性和客观性，主要关注计算编码间一致性的标准（参见也格雷森和锈 2001）。在消费者研究和营销中，传统的内容分析已被用于分析杂志广告（Belk 和 Pollay 1985）、直邮direct mail（Stevenson 和 Swayne 1999）、报纸文章（Garrett 1987）和口碑传播（Moore 2015；菲尔普斯等人 2004）。虽然文本分析可以提高传统内容分析的效率和可靠性，但它也有局限性。例如，计算机化的文本分析可能会遗漏文本中的细微之处，并且无法编码更精细的含义。\n文本分析并不是什么新鲜事，但自从个人计算机广泛采用以来，它已经变得更容易实现了。 General Inquirer (Stone 1966) 是最早用于消费者研究的计算机内容分析工具之一 (Kranz 1970)。 Kranz (1970) 对营销中内容分析涉及字典创建，但没有解决类别创建、有效性等。从那时起，在文本分析方面取得了长足的进步。\n二、文本分析的方法 在当前实践中，自动化文本分析基本上有词典法、机器学习法（分类方法、主题模型）。\n2.1 词典法 研究者测度文本中某些构念(概念)前，首先需要寻找到文本中存在的规律，通过构建单词列表或一组规则来完成(识别或)测量（Rayson 2009）。该方法已广泛用于社会科学，如消费者研究（Humphreys 和 Wang 2018）、心理学（Chung 和 Pennebaker 2013；Mehl 和 Gill 2008；Pennebaker 和 King 1999）、社会学（Van de Rijt 等人） . 2013) 和政治学 (Grimmer and Stewart 2013; Lasswell and Leites 1949)，因为词典法能够将理论构念转化为可测度的文本元素，并且算法具有可靠的透明度(相比而言，机器学习算法更像是黑箱)。另一方面，自下而上的方法在工程、计算机科学和营销科学中得到了更广泛的应用。营销策略借鉴了这两种方法，尽管基于字典的方法似乎更常见（Ertimur 和 CoskunerBalli 2015；Humphreys 2010；Ludwig 等人 2013；Packard 等人 2014）。\n基于字典的文本分析方法基于预先开发的单词列表或字典，用于计算文本中单词的出现次数。标准化词典可用于许多构造，例如情绪（例如，Hutto 和 Gilbert 2014）、与营销相关的构造，例如真实性和品牌个性（Kovács 等人 2013；Opoku 等人 2006），以及心理学中的许多标准概念(Pennebaker et al. 2001; Snefjella and Kuperman 2015) 和其他领域，如政治学 (Dunphy et al. 1974; Stone 1966)。除了使用标准字典外，许多研究人员选择创建自己的字典以适应特定的上下文，尽管只有在标准字典不可用时才应该这样做。\n字典创建最归纳的方法是根据研究问题和假设的相关类别，先从文档中按频率列出的所有单词和词组（Chung and Pennebaker 2013）。如果研究人员事先不知道哪些类别是相关的，则可以使用在词典开发之前，使用定性研究方法，编码过程中创建一组相关概念及对应的单词列表，（Humphreys 2010）。例如，为了研究报纸文章中与瑜伽行业有关的制度逻辑，Ertimur 和Coskuner-Balli (2015) 首先主轴编码了报纸文章和其他历史文本的数据集。通常，数据集中随机选取10-20% 的样本足以进行编码（Humphreys 和 Wang 2018），但研究人员应注意数据量，根据类别或时间段的不均匀性，相应地进行分层处理（Humphreys 2010）。\n字典创建的最演绎方法是从理论概念或类别创建一个词表。然而，应该注意研究人员和作家倾向于选择比文本数据中普遍存在的更抽象的词（Palmquist 等人，2009 年）。出于这个原因，仔细的后测验证是必要的，以确保词典结构的有效性。在清理和存储文本并创建字典后，研究人员使用 Python、Diction、LIWC、WordStat 或 R 等程序来执行计数。然后可以使用传统的统计包保存和分析数据。\n词典构建过程中，如果要进行后测验证，有很多方法检验方法。\n 彭内贝克等人 (2001) 推荐了一种验证字典的方法，但不推荐结果测量。在这里，三个研究助理将一个词视为该类别的代表或不代表，如果三个编码员中有两个同意，则保留该词。如果他们不这样做，则应从字典中删除该词。然后可以计算和报告字典类别的百分比协议，一般阈值与 Krippendorf 的 alpha 相似，高于 75%。 Weber (2005) 提出了一个饱和程序，研究人员从一个概念的 10 或 20 个实例中抽取样本，并让研究助理将它们编码为准确地代表类别（或不代表）。如果比率低于 80%，则应修改字典类别，直到达到阈值。 最后一种方法是将计算机编码的结果与来自两个或更多编码器的大量人工编码结果进行比较。为此，人们从数据集中选择一个随机样本（数量可能会因数据集的大小而异），然后人工编码人员根据类别描述对文本进行编码，并像在传统内容分析中一样计算可靠性。然后可以将其与计算机的附加“编码器”进行比较以产生相似度分数。尽管这种最终方法具有与传统内容分析比较的优势，但它并不总是必要的，并且在某些情况下会产生错误的结果。人类编码员能够理解计算机无法获得的微妙含义，同样，计算机能够一致且均匀地在整个数据集上对概念进行编码，而不会出现遗漏或偏见。出于这个原因，在某些情况下，将人类编码与计算机编码进行比较就像将苹果与橙子进行比较。  基于词典的分析已研究了很多领域的理论概念，例如情感emotion（Berger 和 Milkman 2012）、解释水平construal level（Snefjella 和 Kuperman 2015）、制度逻辑institutional logics（Ertimur 和 Coskuner-Balli 2015）、风险risk（Humphreys 和 Thompson 2014）、 言语行为speech acts（Ludwig et al. 2016; Villarroel Ordenes et al. 2017）和框架framing（Fiss and Hirsch 2005; Humphreys and Latour 2013; Jurafsky et al. 2014）。 可以通过基于词典的分析来探索各种上下文，例如产品和餐厅评论（Barasch 和 Berger 2014，Jurafsky 等人 2014；Kovács 等人 2013）、推文（Mogilner 等人 2010）、客户服务电话 (Packard et al. 2014)、博客 (Arsel and Bean 2013) 和新闻文章 (Humphreys 2010; Humphreys and Thompson 2014)。\n2.3 机器学习法 机器学习法又细分为分类算法和主题建模。\n2.3.1 分类方法 分类方法基于将文档分类为不同的“类型”，然后进一步描述（计算）文本中哪些元素为该条文本数据的成为某“类型”贡献了多少权重(可能性)。例如，Tirunillai 和 Tellis (2012) 使用分类来训练一个机器模型，以根据星级来识别正面和负面评论。研究者对训练数据集，使用朴素贝叶斯和支持向量机 (SVM) 分类器来找出哪些词可以预测星级，然后使用这些信息对整个评论集进行分类，达到精确度——这意味着他们的算法预测真阳性——68-85% 的时间，取决于产品类别。 Villarroel Ordenes 等人（2017 年）通过使用文本中显式和隐式情绪指标来衡量情绪和情绪强度，进一步完善情绪测量，还在 Tripadvisor、亚马逊和 Barnes and Noble 的一组星级评论上测试了他们的框架。分类模型算法的复杂程度各不相同；例如，这些方法的情绪准确性从 55% 到 96% 不等（Hutto and Gilbert 2014）。\n分类模型已被用于研究评论 (Tirunillai and Tellis 2012; Van Laer et al. 2017)、在线论坛 (Homburg et al. 2015)、电子邮件 (Ludwig et al. 2016) 和文学文本 (Boyd and Pennebaker 2015b; Plaisant 等人，2006 年）。例如，为了衡量留言板帖子的情绪，Homburg 等人（2015）对明确的正面和负面帖子的训练数据集进行分类。然后，他们使用情绪作为一个独立的衡量标准来了解公司参与实际上增加了多少积极的消费者情绪，发现参与的回报是递减的。\n2.3.2 主题建模 主题建模是一种方法，它首先将文本解析为离散的单词，然后假设单词出现是独立的情况下找到在统计上不太可能出现的共现模式（看不懂没关系，继续阅读）。通过这种方式，分析识别出可能由明显存在的词潜在表示的类别，然后标记这些词组以表示数据中有意义的概念或特征，就像在因子分析中所做的那样。例如，在酒店评论研究中，Mankad 等人。 (2016) 使用潜在狄利克雷分配 (LDA) 来识别用户 TripAdvisor 评论中出现的五个主题，将便利设施、位置、交易、价值和体验确定为评论者提到的关键主题。潜在语义分析 (LSA)、k-means 聚类 (Lee and Bradlow 2011)、概率潜在语义分析 (PLSA) 和 LDA (Blei et al. 2003) 都是主题建模的方法，其中 LDA 是最新和最常见的方法主题建模的分析方法。\nLDA 是一种分层贝叶斯模型，用于确定给定文档中存在的主题概率分布组合。 LDA主题建模前需要研究者设定主题的数量。假设主题的选择存在一定的概率分布，并且在该分布中选择表示该主题的词有一定的分布，LDA 会生成最终的主题列表（由该主题中的词列表表示）和给定主题在文档中的概率。尽管大多数方法都是基于单词或短语的，但 Büschken 和 Allenby (2016) 使用句子作为分析单位进行了 LDA 分析，并发现这产生的结果比基于单词的 LDA 更能预测评分。基于句子的模型假设句子中的所有单词都是同一主题的一部分，考虑到 Grice 的关系和方式准则（Grice 1975），这是合理的。 Büschken 和 Allenby (2016) 使用此模型从 Expedia 和 we8there.com 上的评论中识别意大利餐厅和酒店的主题。\nLDA 已在广泛的应用中使用（Büschken 和 Allenby 2016；Tirunillai 和 Tellis 2014）。与词典法一样，后测验证，在这种情况下，使用保留样本或其他预测技术（例如，外部 DV）是非常可取的。机器只会读取字面意思，因此同音异义词和包括讽刺在内的其他口语可能会出现问题，因为它们是过于笼统和过于具体的词。此外，仔细清理和准备文本可以减少错误，因为有时可以在数据收集期间添加文本标记（例如，页眉、页脚等）。\n三、文本分析的市场研究应用 3.1 情感分析 许多文本分析程序和从业者声称可以衡量情绪，但并不总是清楚这个关键指标的内涵。在讨论情感的文本分析之前，首先要讨论什么是情感、情感能体现文本中的什么信息。在大多数营销环境中，研究人员和从业者都对消费者对品牌、产品或服务的态度感兴趣。然而，态度是复杂的心理结构，不仅由情感组成，还包括认知信念和意图（Fishbein 和 Ajzen 1972）。此外，对于任何给定产品的最终购买态度和未来行为（如忠诚度）的重要性在很大程度上取决于上下文和参与（Petty 和 Cacioppo 1979）。人们在网上表达的态度可能并不能完全反映他们的潜在态度，他们选择表达的态度可能存在选择偏差，并且他们的行为也可能与他们所支持的态度不同。尽管如此，以情感表达的在线话语可以反映对品牌、产品或服务的某种潜在态度，并且重要的是可以影响其他消费者之间共享的社会共识。情绪已被证明可以预测电影销量（Krauss et al. 2008; Mestyán et al. 2013）和股票市场回报（Bollen et al. 2011; De Choudhury et al. 2008; Tirunillai and Tellis 2012）。\n情感得分的计算方法\n  大多数方法试图将文本分类或测量为具有积极、消极或有时是中性的情绪\n  另一些方法将其转化为净情绪，从积极的词中减去消极词（例如，Ludwig et al. 2013; Homburg et al. 2015 ）。\n  除了情感效价valence，情绪也可以有强度strength和确定性certainty。先前的研究使用了明确的、语义的情感指标以及隐含的、更实用的情感指标，如**言语行为speech acts（委托、断言和方向）**来成功测量情感强度（Villarroel Ordenes 等人，2017 年）。进一步研究表明，其他类型言语，如指示语 (Potts and Schwarz 2010) 和其他语用标记可以指示表达性内容，通常在产品评论中表达 (Constant et al. 2009)。\n使用预先开发的标准化词典是衡量跨上下文情绪的最可靠方法之一，因为这些词汇表已经开发并在广泛的文本数据上进行了测试。例如，VADAR(一种英文情感词典)使用带有基于规则的方法的字典来测量情绪。具体来说，Hutto 和 Gilbert (2014) 使用了基于以前标准化词典（如 LIWC 和 General Inquirer）的词典组合，但随后还开发了五个规则，这些规则考虑了句法和语法来衡量强度。使用词典法衡量情绪产生的准确率从 55% 到 96% 不等，具体取决于上下文（Hutto 和 Gilbert 2014）。 例如，Tirunillai 和 Tellis (2012) 使用星级来创建情绪分类系统，准确率为 68-85%。\n3.2 通过文本分析研究口碑 迄今为止，文本分析在营销研究中的主要用途是研究在线口碑传播。消费者总是通过人际交流来分享产品信息（Arndt 1967），这种交流已被证明比商业信息更有效（Brown 和 Reingen 1987；另见 Godes 和 Mayzlin 2004；Money 等人 1998）。然而，虽然口碑传播以前是通过面对面或电话进行的，但现在它可以在社交购物网站（Stephen 和 Toubia 2010）、社交媒体（Humphreys 2015）和第三方评论网站上看到并存档和平台。亚马逊上的产品评论、TripAdvisor 上的酒店评论和 Yelp 上的餐厅评论！都提供了营销见解，以更好地了解评级与销售额和股价之间的关系（Moe 和 Schweidel 2014；Schweidel 和 Moe 2014；Moe 和 Trusov 2011）。例如，Moe 和 Trusov (2011) 发现正面评论对销售有直接影响，但这种影响在某种程度上是短暂的，因为随着人们发布更多评分（即，帖子的社会动态导致评论变得相对更加负面）随着时间的推移）。此外，积极性可能因平台而异（Schweidel 和 Moe 2014；Villarroel Ordenes 等人 2017）。\n在线口碑可以通过测量情感效价、评论数量和评分分布的方差来表示（Godes 和 Mayzlin 2004）。评论数量和评分方差与现有的建模测量相对兼容，因为评论数可以聚合，评分的方差可以通过开始评级或其他用户输入来测量。情感效价虽然部分由星标衡量，但最好用情感衡量，这需要文本分析作为一种方法，将语言描述的非结构化数据转换为可纳入定量模型的数据。应该指出的是，除了情感效价之外，还有广泛的语言属性和语义内容可以为营销研究提供有用的信息（Humphreys and Wang 2018）。例如，Kovács 等人。 (2013) 表明，如果评论者在评论中提及真实性，即使在控制餐厅质量的情况下，餐厅的评分也会更高。\n情感在口碑传播中的作用是一个关键话题。在一项关于分享新闻文章的研究中，Berger 和 Milkman (2012) 发现积极情绪会增加病毒式传播，但文章中存在强烈的负面情绪（如愤怒或焦虑）也会增加病毒式传播。还通过使用代词的文本分析研究了发送者和言语上下文的影响。使用第一人称人称代词（“I”、“me”）的标准字典，Packard 和 Wooten（2013 年）发现，消费者通过口耳相传更多地自我提升，以表明对特定领域的了解。消费者也被证明通过在向大量观众广播时分享较少的负面情绪来进行自我展示，而不是对较小的观众进行窄播（Barasch 和 Berger 2014）。在像电影一样评估产品时，消费者在表达对品味的看法与对质量的看法时，更有可能使用指代自己的代词（Spiller 和 Belogolova 2016）。\n3.3 创建公司(产品)定位图、主题发现 文本分析可用于为品牌、公司或产品创建定位图，并根据特定类别中的属性可视化市场结构。**借助k-means 聚类算法或LDA 主题建模算法，可按一定的潜在逻辑(属性、品牌)，对文本中的常见词进行分组。**例如，为了从 Epinions.com 上的一组评论中创建相机市场结构的可视化，Lee 和 Bradlow (2011) 首先提取与特定属性（例如，电池寿命、照片质量）相关的短语，然后使用 k-means基于短语的相似性（计算为单词向量之间的余弦相似度）对短语进行聚类。分析发现消费者提到的和对消费者重要的属性存在差异，但在尺寸、设计和屏幕亮度等专家评论中却没有差异。同样，使用来自糖尿病论坛的文本数据，Netzer 等人。 (2012) 发现论坛上经常提到的几种副作用，但在 WebMD 之类的网站上却没有（例如，体重增加、肾脏问题）。\n主题模型与心理学理论之间是兼容的，例如语义记忆中的传播激活（Collins and Loftus 1975）。例如，人们是在一定的语义记忆中谈论相关的品牌。受到该想法启发，Netzer 等人 (2012) 使用 Edmunds.com 的评论为汽车品牌制作感知地图，并将其与使用销售(调查)数据测度的品牌转换感知地图进行比较。在此过程中，他们发现基于文本分析的结果与基于销售或调查数据的结果之间存在一些显着差异。例如，根据销售数据，韩国品牌的汽车与日本品牌没有关联。但是，根据文本数据，这些品牌被归为一类。这表明，虽然文本分析可以捕捉认知关联，但这些关联不一定会转化为品牌转换等行为（表 1）。\n   文本分析方法 数据源 应用领域 算法 相关案例     词典法 在线评论、论坛、新闻、公告、年报 情感(情绪)、心理(如解释水平)、品牌关注度、品牌价值、公司形象等 词频 Humphreys (2010), Berger and Milkman (2012), Packard et al. (2018)   分类法 在线评论、论坛、文献、推特、邮件 情感分析、欺诈识别、产品属性、市场结构 监督机器学习算法，如SVM、K近邻、朴素贝叶斯等 Homburg et al. (2015), Van Laer et al. (2018), Tirunillai and Tellis (2012)   主题模型 产品服务评论、在西安论坛 产品属性、定位图positioning、市场结构等 LDA、K-means Netzer et al. (2012), Lee and Bradlow (2006), Buschken and Allenby (2016)    3.4 组织和公司环境的测量 最后，文本分析可用于通过分析股东报告、新闻稿和其他营销传播来衡量组织关注度。这些研究主要基于基于词典的分析，并且经常创建词典而不是使用标准化词典来适应行业或原始背景和研究问题。例如，学者们开发了字典来研究 企业社会责任语言随时间的变化，以揭示发展中国家的差异（Gandolfo et al. 2016）。在对年度报告的分析中，Lee 等人 (2004) 发现，披露负面信息时，如果倾向于向内寻找原因，这类公司一年后的股价较高，这表明将责任归咎于公司控制因素的组织似乎比那些不责任的组织更有控制力，因此投资者对负面事件的印象更佳。\n企业环境也可以通过测量媒体，如报纸、杂志和贸易出版物来捕捉。例如，Humphreys (2010) 表明，制度和文化环境的变化使美国的赌场赌博业合法化。 Humphreys 和 Thompson（2014 年）研究了两次危机（埃克森和 BP 漏油）之后的风险认知环境，并发现媒体的叙述有助于遏制这些灾难之后的风险认知。 Ertimur 和 Coskuner-Balli（Ertimur 和 Coskuner-Balli 2015）追溯了瑜伽行业如何随着时间的推移而变化，形成了影响行业内品牌和定位的独特制度逻辑。\n3.5 处理文本数据的问题 尽管文本为分析消费者想法和市场战略领域研究提供了一个窗口，但在分析文本时仍有几个问题需要考虑。语言很少（如果有的话）遵循正态分布模式（Zipf 1932）。例如，像“a”、“he”和“there”这样的功能词在正常使用中占所有语言的 40% 左右。名词和动词等常用词占另外 59%，这些常用词中通常只有一小部分与研究问题相关。文本数据通常是左偏的（很多零），文档通常包含不同数量的单词，并且感兴趣的单词通常太少或太频繁出现而无法进行有意义的比较。由于这些原因，在计算出词频之后，研究人员通常会在统计分析之前对数据进行转换。此外，由于数据的非正态分布，许多检验（如 ANOVA）不适合。\n因此，文本信息几乎就是表示为文档中单词的百分比（例如，Ludwig et al. 2013），并且通常使用对数转换来解释偏度（Netzer et al. 2012），尽管使用了几种可能的转换（曼宁等人，2008 年）。 Tf-idf 是一种经常用于解释词频的度量，由整个数据集中单词的总体频率标准化（有关计算 tf*idf 的详细信息，请参阅 Salton 和 McGill 1983，以及伴随的转换选项）。\n用于测量共现的传统方法（例如 Pearson 相关性），必然导致一个问题，即数据集中存在大量的零（Netzer 等人，2012 年）。对此，研究人员经常使用余弦相似度或 Jaccard 距离来比较单词和文档。通常需要使用多种方法来计算共现的一系列稳健性检查，以确保结果不仅仅由于不经常或过于频繁出现的单词而出现（Monroe et al. 2009; Netzer et al. 2012）。例如，如果像“he他”这样的词很常见，那么与“airbag安全气囊”这样的不常见词相比，它可能与更多的词同时出现。然而，“安全气囊”这个词可能比“他”这样的人称代词更能概念可诊断性(信息量更大，更特别)。因为数据不是正态分布的，所以统计检验，例如 Mann-Whitney 检验，检验排名的显着性而不是绝对数，可以替代 ANOVA。\n四、扩展：专家和非专家之间，产品发布的口碑差异 本节介绍了一个文本分析案例，以词典法为例，将数据分析的过程分为六个阶段（转载自Humphreys and Wang (2018), Automated Text Analysis for Consumer Research, Journal of Consumer Research, 44(6), 1 (April), 1274–1306）。该案例研究消费者对 mp3 播放器/无线设备 Apple iTouch 产品发布的反应，在本文中只展示部分内容，展示从理论构念到文本分析大主要步骤。。\n   步骤 含义功能     1.识别研究问题 确定主题，以及与之对应的几个问题   2. 数据采集 识别数据源；\n在线数据库或新闻；对已有非文本数据(书籍、刊物)的数字化；网络爬虫；访谈   3. 定义构(概)念 定性分析数据的子样本; 为每个构念创建一个词典（单词列表）； 让编码人员检查和完善词典;初步实施字典以检查误报和漏报   4. 构念测量(计算) 对原始数据计算相关构念 ;\n根据研究问题，运行相关计算： 所有单词的百分比；\n时间段或类别中的单词百分比；所有编码单词的百分比； 二进制（“属于某构念”或“不属于某构念”）   5. 解读\u0026amp;分析 依文章、你那份对文本进行不同角度的分析；\n通过不同角度进行比较;\n对研究问题选择合适的统计方法:\n方差分析ANOVA；\n回归分析；相关分析；   6. 后测验证 提取子样本并由研究助理或研究人员编码，根据 Krippendorf 的 alpha 计算所构建的词典的优劣合格与否    Stage-1：提出研究问题 本研究提出了一个具体的问题：\n 在产品发布后，专家的反应与非专家的反应是否不同？ 此外，随着产品的扩散，专家组与非专家组的口碑反应如何变化？  专家的口口相传对产品采纳特别有影响，因此了解他们的观点会随着时间的推移以及与非专家群体的比较而发生变化是很重要的。 本研究选择的背景，即 Apple iTouch 的发布，是一个很好的研究案例，因为产品类别和评估产品的标准在推出时都是模棱两可的。\nStage-2: 数据收集 数据来自两个网站\n Amazon.com 亚马逊是一个销售从书籍到玩具的所有商品的网站，拥有广泛的受众； 来自Amazon的消费者评论被用来反映非专家或混合消费者的反应 CNET.com CNET 是一个专门用于技术的网站，并且可能拥有更专业的发帖人。来自CNET的用户评论被用来衡量专家的反应。  研究者收集了Amazon.com 和 CNET.com关于iTouch文本数据，采集的时间窗口从2007 年 9 月 5 日到 2009 年 11 月 6 日。“iPod Touch”的关键字搜索用于收集当时对该产品可用的所有客户评论的分析。对设备多个版本（第一代和第二代）的评论包括在分析中，并根据发布日期进行了细分。第一代 iPod Touch 于 2007 年 9 月 5 日发布，第二代于 2008 年 9 月 9 日发布。\n字段包括评论者(或发帖人)评论日期、发帖人姓名、评分、发帖人位置以及评论本身的文本都存储为单独的变量。从亚马逊收集了大约 204 个帖子，从 CNET 收集了 269 个帖子，产生的样本量足够高，可以在组之间进行统计比较。\nStage-3: 定义构念 信息处理领域的研究表明专家处理信息的方式与新手不同（Alba and Hutchinson 1987）。一般来说，\n 专家们更多地从认知角度看待产品，评估产品属性而不是好处或用途（Maheswaran 和 Sternthal 1990；Maheswaran 等人 1996；Sujan 1985）。 新手只使用刻板印象信息，专家则使用属性信息和刻板印象线索（Maheswaran 1994）。 专家能够同化吸收适应信息的类别模糊性，这意味着专家能更快地适应新产品（Meyers-Levy 和 Tybout 1989）。 专家还倾向于以抽象的、更高的解释水平来进行判断（Hong and Sternthal 2010）。  根据之前的研究，可以提出几个工作假设。我们希望进行的战略比较是关于专家与非专家如何评估产品以及这是否会随着时间而改变。首先，人们可能会期望专家会使用更多的认知语言，并且他们会更严格地评估设备。\nH1：专家会比新手使用更多的认知语言。\n其次，人们还期望专家会关注设备的功能，但非专家会更多地关注设备的使用（Maheswaran et al. 1996）。\nH2：专家会比非专家更多地讨论特征。\nH3：非专家会比专家更多地讨论好处和用途。\n第三，随着时间的推移，人们可能会预测专家将能够吸收模棱两可的产品功能(属性)，而非专家则不会。因为专家可以更容易地处理模棱两可的类别信息，并且由于他们具有更高的解释水平，所以人们会预测他们比新手更喜欢这种模棱两可的产品，并且会学会吸收模棱两可的信息。例如，在这种情况下，设备的存储空间使其难以分类（手机与 mp3 播放器）。人们会期望专家会更快地理解这种模糊性，并且随着时间的推移，他们对这一特征的阐述会减少。\nH4：随着时间的推移，专家将较少谈论模棱两可的属性（例如，存储空间），而非专家将继续讨论模棱两可的属性。\n最后，先前的研究表明，这些关注点的差异，专家在功能上和非专家在利益方面的差异，会对产品评级产生不同的影响.也就是说，非专家的评级将取决于对娱乐等福利的评估，但专家评级将更多地受到特征的影响。\nH5：评级将由非专家的利益驱动。\nH6：评级将由专家的特征驱动。\n这些只是在线口碑传播分析中可以探索的众多潜在假设中的一小部分。人们同样可以探索新技术的文化框架（Giesler 2008）或通过与博主进行产品评论来共同制作品牌传播（Kozinets 2010）。这里提出的问题——随着时间的推移，专家对新产品的反应是否与非专家不同？ – 旨在说明使用自动文本分析可以做什么，而不是对专业知识的心理属性进行严格测试。\n 在这个说明性案例中， H1 到 H6 的关键构念是已知的：专家和非专家、认知表达、情感、产品特征、收益。有一些构念的测量——认知语言和情感语言——可以通过已有的LIWC词典（Pennebaker et al. 2001）获得。然而，剩下的构念，如产品的特征和收益是特定于上下文的，需要专门构建字典。此外，可能还有其他特征将专家与非专家区分开来。因此，本研究的文本分析，我们采用词典法进行构念的测量。\nStage-4: 构念测量 对于此分析，Pennebaker 等人开发的标准 LIWC 词典。 (2001) 除了自定义字典外还使用了。Table3 显示了标准化和自定义词典中使用的类别。标准词典包括诸如“我”之类的人称代词的类别，诸如形容词之类的词类，诸如积极和消极情绪之类的心理测量学预先测试的类别，以及诸如休闲leisure、家庭family和与朋友相关的语言之类的内容相关类别。\n开发一个自定义词典来识别此处产品口碑数据的类别。研究人员不考虑不区分网站来源，从2个网站各选 10 条评论进行开放式编码。然后，从每个网站再选择 10 条评论并添加编码，直到达到饱和（Weber 2005）。总之，开发自定义词典所需的子样本是 60 条评论，每个网站有 30 条，约占所有评论的 11%。创建了十四个类别，每个类别平均包含六个单词。\n 这一步主要是构建与理论构念相适应的词典，通过不同构念的词表测量不同的构念。Table3中Category是不同的构念(Category)，对应的词表是Words，通过Words词语出现次数就能计算(测量)文本中不同构念(Category)。\n 评论的定性分析显示，发帖者倾向于从功能或美学角度谈论产品。因此，为与特征（例如 GPS、相机、硬盘、电池）和美学（例如，锐利、干净、性感、时尚）相关的词创建了字典类别。发帖人还反复关注设备的容量、产品的成本，并报告了他们在使用产品时遇到的问题。为这些问题中的每一个都创建了类别。因为可能有一些研究人员对产品用途的兴趣，并且因为发帖人经常提到娱乐和工作相关用途，所以为每种用途创建了类别。包括“大”与“小”的类别是因为先前的社会学理论表明 iPod 的成功来自其提供的过剩产品——大屏幕、过剩容量等（Sennett 2006）。当提到竞争产品时，创建了两个类别来计算，无论是在 Apple 品牌内部还是外部。\n字典类别由三位编码人员验证，他们建议包含和排除的单词。表 3 中可以找到每个字典类别的编码员之间的百分比一致性。alpha平均一致性为 90%。文本文件通过 LIWC 程序运行，首先使用标准字典，然后使用自定义字典。从三组数据创建了一个电子表格：(1) 直接从网站收集的评论数据（例如，发布日期、产品评级），(2) 标准字典的计算机结果， (3) 自定义词典计算结果。\n  例如测量评论文本的Social processes指标(词频)，实现计算的代码写法有很多种，以下仅为其中一种（代码仅供参考）\n#构建的自定义词典(词表) socialProcessWords= [\u0026#39;mate\u0026#39;, \u0026#39;talk\u0026#39;, \u0026#39;they\u0026#39;, \u0026#39;child\u0026#39;] #待分析的某条评论文本 comment = \u0026#39;Jim and Jam have a new iTouch.They talk the iTouch is wonderful.\u0026#39; #构念测量方法(统计评论文本中自定义词典词语出现的总次数) def calculate_SocialProcess(text): num = 0 words = text.lower().split(\u0026#39; \u0026#39;) for word in words: if word in socialProcessWords: num=num+1 return num #返回运行结果 socialProcessIndex = calculate_SocialProcess(text=comment) print(\u0026#34;social process index is {}\u0026#34;.format(socialProcessIndex)) Run\n2 最后 对这篇案例感兴趣的童鞋可以直接阅读原文, 对**python网络爬虫文本分析**感兴趣的童鞋，也可点击课程介绍。\n 点击上方图片购买课程   参考文献  Christian Homburg, Martin Klarmann, and Arnd Vomberg. 2022. Handbook of Market Research. Cham, Switzerland: Springer. https://search.ebscohost.com/login.aspx?direct=true\u0026amp;db=edsebk\u0026amp;AN=3112347\u0026amp;lang=zh-cn\u0026amp;site=eds-live.\nHumphreys A. (2019) Automated Text Analysis. In: Homburg C., Klarmann M., Vomberg A. (eds) Handbook of Market Research. Springer, Cham. https://doi.org/10.1007/978-3-319-05542-8_26-1\nHumphreys, Ashlee, and Rebecca Jen-Hui Wang. \u0026ldquo;Automated text analysis for consumer research.\u0026rdquo; Journal of Consumer Research 44.6 (2018): 1274-1306.\n ","permalink":"/blog/automatetextanalysisinmarket/","summary":"点击上方图片购买课程   本文相关资料  Christian Homburg, Martin Klarmann, and Arnd Vomberg. 2022. Handbook of Market Research.\nHumphreys A. (2019) Automated Text Analysis. In: Homburg C., Klarmann M., Vomberg A. (eds) Handbook of Market Research. Springer, Cham. https://doi.org/10.1007/978-3-319-05542-8_26-1\nHumphreys, Ashlee, and Rebecca Jen-Hui Wang. \u0026ldquo;Automated text analysis for consumer research.\u0026rdquo; Journal of Consumer Research 44.6 (2018): 1274-1306.\n 摘要 在过去的二十年里，可供营销研究人员分析的文本数据量呈指数级增长。 然而，书面语言充满了复杂的含义、歧义和细微差别。 营销研究人员如何才能将这种丰富的语言表示转化为可量化的数据以进行统计分析和建模？ 本章介绍了文本分析各种方法。 在涵盖了文本分析的一些基础知识后，总结和探索了在营销研究中的应用，如情感分析、主题建模和研究组织沟通，包括对产品发布的口碑反应的案例研究。\n关键词   文本分析Text analysis","title":"营销研究中文本分析应用概述(含案例及代码)"},{"content":"在科学研究中，数据的获取及分析是最重要的也是最棘手的三个环节！\n在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的三个问题：\n Python语法 解决 如何通过电脑自动化帮我们做事情？ 网络爬虫技术 解决 如何从网络世界中高效地 采集数据？ 文本分析技术 解决 如何从杂乱的文本数据中抽取文本信息(变量)？  使用说明 目前Python语法入门部分已免费开放，最近将相关教程代码视频整合到大邓的博客中，\n博客地址 https://hidadeng.github.io/\n点击Python语法入门进入语法学习界面，一共有15篇基础知识。大家按照顺序，从上往下学习即可。\n例如，点击Python是一种语言, 可以看到页面中\n 有B站视频 有课件下载地址 还有文档教程  此外，为了方便大家学习交流，博客开通了留言评论功能(有github账号的童靴才可以留言。)。建议大家注册个github账号(https://github.com/)，不止为了留言，更主要的是可以在github中找到自己需要的代码。\n\n教程纲要  课程目标： 掌握Python语法 核心知识点： 数据类型、逻辑语句、常用内置函数、常用内置库 环境配置: 安装anaconda，注意安装过程中勾选Add Anaconda to the system Path environment variable、Register Anaconda as the system python 3.x 课件资料： 本课程全部使用jupyter notebook文件作为课程课件，已全部上传至github中。  \nPython语法入门目录  Python跟英语一样是一门语言 环境配置  Mac配置 Win配置   数据类型-字符串 数据类型-列表元组集合 数据类型-字典 数据类型-布尔值、None 逻辑语句(if\u0026amp;for\u0026amp;tryexcept) 高级语法-列表推导式 高级语法-理解函数 常用内置函数 pathlib路径库 内置库csv文件库 正则表达式re库 常见错误汇总  \n 点击上方图片购买完整课程   ","permalink":"/blog/python%E5%9F%BA%E7%A1%80/","summary":"在科学研究中，数据的获取及分析是最重要的也是最棘手的三个环节！\n在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的三个问题：\n Python语法 解决 如何通过电脑自动化帮我们做事情？ 网络爬虫技术 解决 如何从网络世界中高效地 采集数据？ 文本分析技术 解决 如何从杂乱的文本数据中抽取文本信息(变量)？  使用说明 目前Python语法入门部分已免费开放，最近将相关教程代码视频整合到大邓的博客中，\n博客地址 https://hidadeng.github.io/\n点击Python语法入门进入语法学习界面，一共有15篇基础知识。大家按照顺序，从上往下学习即可。\n例如，点击Python是一种语言, 可以看到页面中\n 有B站视频 有课件下载地址 还有文档教程  此外，为了方便大家学习交流，博客开通了留言评论功能(有github账号的童靴才可以留言。)。建议大家注册个github账号(https://github.com/)，不止为了留言，更主要的是可以在github中找到自己需要的代码。\n\n教程纲要  课程目标： 掌握Python语法 核心知识点： 数据类型、逻辑语句、常用内置函数、常用内置库 环境配置: 安装anaconda，注意安装过程中勾选Add Anaconda to the system Path environment variable、Register Anaconda as the system python 3.x 课件资料： 本课程全部使用jupyter notebook文件作为课程课件，已全部上传至github中。  \nPython语法入门目录  Python跟英语一样是一门语言 环境配置  Mac配置 Win配置   数据类型-字符串 数据类型-列表元组集合 数据类型-字典 数据类型-布尔值、None 逻辑语句(if\u0026amp;for\u0026amp;tryexcept) 高级语法-列表推导式 高级语法-理解函数 常用内置函数 pathlib路径库 内置库csv文件库 正则表达式re库 常见错误汇总","title":"Python语法入门(含视频代码)"},{"content":" 这个周期表生成器的想法是创建一个关于 自然语言处理任务周期表 的博客。 在 Streamlit 的帮助下并受到此 Bokeh 图库示例 的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！\n大邓的作用仅仅是将其汉化，没有做布局上的新创新。\n下载 点击下载periodic-table-creator项目压缩文件夹\n下面是自定义的任务周期表示例。 在这种情况下：对于自然语言处理任务！\n安装\u0026amp;运行 打开命令行(终端),\npip3 install streamlit==1.8.1 pip3 install bokeh==2.4.1 #切换至项目文件夹periodic-table-creator cd periodic-table-creator #运行streamlit streamlit run periodic_table_creator.py 此时在命令行中会出现\n点击Local URL对应的链接，或者将该链接复制粘贴到浏览器，即可访问。\n导入数据 创建自己特有的任务周期表需要导入自由的csv数据。可以[点击这里] (periodic-table-creator/periodic_nlp.csv) 下载并查看数据格式，或者运行案例时， 点击按钮\u0026quot;Edit CSV text\u0026quot; 查看示例数据格式。\n 表的字符名(列名): atomicnumber;group;period;symbol;elementname;groupname;color;url;excerpt csv文件的分隔符使用英文格式下的 ;或, csv文件使用utf-8编码   点击上方图片购买课程   ","permalink":"/blog/periodic-table-creator/","summary":" 这个周期表生成器的想法是创建一个关于 自然语言处理任务周期表 的博客。 在 Streamlit 的帮助下并受到此 Bokeh 图库示例 的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！\n大邓的作用仅仅是将其汉化，没有做布局上的新创新。\n下载 点击下载periodic-table-creator项目压缩文件夹\n下面是自定义的任务周期表示例。 在这种情况下：对于自然语言处理任务！\n安装\u0026amp;运行 打开命令行(终端),\npip3 install streamlit==1.8.1 pip3 install bokeh==2.4.1 #切换至项目文件夹periodic-table-creator cd periodic-table-creator #运行streamlit streamlit run periodic_table_creator.py 此时在命令行中会出现\n点击Local URL对应的链接，或者将该链接复制粘贴到浏览器，即可访问。\n导入数据 创建自己特有的任务周期表需要导入自由的csv数据。可以[点击这里] (periodic-table-creator/periodic_nlp.csv) 下载并查看数据格式，或者运行案例时， 点击按钮\u0026quot;Edit CSV text\u0026quot; 查看示例数据格式。\n 表的字符名(列名): atomicnumber;group;period;symbol;elementname;groupname;color;url;excerpt csv文件的分隔符使用英文格式下的 ;或, csv文件使用utf-8编码   点击上方图片购买课程   ","title":"streamlit|任务周期表生成器"},{"content":" 点击上方图片购买课程   doccano doccano是开源的数据标注工具，可以简化数据标注的难度。需要注意，市面上的机器学习课程一般都默认数据已标注，在此基础上讲机器学习。\n  您还可以将 doccano 与您的脚本集成，因为它将功能公开为API。 doccano API是在局域网内的网址链接，多台设备可打开浏览、标注。\n一、标记流程 通过以下步骤开始和完成使用 doccano 的标签项目：\n 安装doccano。 运行doccano。 设置标签项目。 选择标签项目的类型， 配置项目设置。 导入数据集。 您还可以导入带标签的数据集。 给项目添加标注人员 给标志者定义标注工作文档说明 开始标记数据。 导出标记的数据集。  二、配置环境 2.1 安装 打开命令行（cmd、terminal）执行安装命令\npip3 install doccano \n2.2 运行doccano 在命令行（cmd、terminal）内依次执行\n#在电脑第一次运行的时候初始化doccano #只需设置一次，之后不用再运行该命令 doccano init #创建用户名及密码；例如现在有一个主管admin，两个标注员tom和jack #设置好用户，之后不用再运行该命令 doccano createuser --username admin --password pass doccano createuser --username tom --password pass doccano createuser --username jack --password pass #开启doccano服务 doccano webserver 完成上述操作后，另打开一个新的命令行，执行下列命令\ndoccano task \n三、案例 下面我们以外卖评论数据为例，对评论进行判断，标注为正、负面情感。点击下载data.csv\n3.1 创建项目 先登录用户名和密码，这里的admin是超级用户(权限最大)\n  为创建项目，如图点击Create按钮。 根据需要选择合适的项目类别,这里选择的Text Classification，\n填写项目信息，例如项目名情感标注，简介、标注类型\n  根据需要选择项目的功能需求，例如允许单标签，把数据打乱随机显示， 用户之间共享标注\n  3.2 上传数据 创建项目后，点击Dataset按钮，点击Import dataset导入数据。我这里准备的是csv文件，拥有review和label两个字段。\n      3.3 定义标签 点击左侧菜单中的“Labels”按钮来定义我们的标签。 我们应该看到标签编辑器页面。 在标签编辑器页面中，您可以通过指定标签文本、快捷键、背景颜色和文本颜色来创建标签。\n    同理，可以定义负面neg标签。现在有了pos和neg两个标签。\n  3.4 添加成员 点击左侧目录中的 Members 按钮，\n  然后，选择“Add”按钮以显示表单。 使用您要添加到项目中的用户名和角色填写此表单。 然后，选择“Save”按钮。\n  如果没有可供选择的成员，记得创建成员。形如doccano createuser --username tom --password pass\n3.5 开始标注 接下来，我们准备标注文本数据。 只需点击导航栏中的“Start annotation”按钮，我们就可以开始对文档进行批注了。\n  3.6 导出数据 在注释步骤之后，我们可以下载标注后的数据。 转到“Dataset”页面，然后单击“操作”菜单中的“Export dataset”按钮。 选择导出格式后，单击“Export”。 您应该看到以下屏幕：\n  到出的结果如下\nimport pandas as pd df = pd.read_csv(\u0026#39;all.csv\u0026#39;) df   3.7 导出数据 对了，当标注过程不同阶段，还看查看标注工作量等可视化信息\n  ","permalink":"/blog/doccano_text_anotation/","summary":"点击上方图片购买课程   doccano doccano是开源的数据标注工具，可以简化数据标注的难度。需要注意，市面上的机器学习课程一般都默认数据已标注，在此基础上讲机器学习。\n  您还可以将 doccano 与您的脚本集成，因为它将功能公开为API。 doccano API是在局域网内的网址链接，多台设备可打开浏览、标注。\n一、标记流程 通过以下步骤开始和完成使用 doccano 的标签项目：\n 安装doccano。 运行doccano。 设置标签项目。 选择标签项目的类型， 配置项目设置。 导入数据集。 您还可以导入带标签的数据集。 给项目添加标注人员 给标志者定义标注工作文档说明 开始标记数据。 导出标记的数据集。  二、配置环境 2.1 安装 打开命令行（cmd、terminal）执行安装命令\npip3 install doccano \n2.2 运行doccano 在命令行（cmd、terminal）内依次执行\n#在电脑第一次运行的时候初始化doccano #只需设置一次，之后不用再运行该命令 doccano init #创建用户名及密码；例如现在有一个主管admin，两个标注员tom和jack #设置好用户，之后不用再运行该命令 doccano createuser --username admin --password pass doccano createuser --username tom --password pass doccano createuser --username jack --password pass #开启doccano服务 doccano webserver 完成上述操作后，另打开一个新的命令行，执行下列命令\ndoccano task","title":"doccano|为机器学习建模做数据标注"},{"content":" 点击上方图片购买课程   说明 这个案例使用Streamlit 和 TimelineJS 制作， 通过时间线方式展示自然语言处理领域发展。大家可以将其改造为公司发展时间线、人生里程碑时间线等等。\n下载\u0026amp;运行  点击此处下载代码 https://hidadeng.github.io/blog/nlp-history-timeline/nlp-history-timeline.zip 解压nlp-history-timeline.zip文件夹，放置于桌面 打开命令行(终端)  #切换到nlp-history-timeline cd nlp-history-timeline #安装需要的包 pip3 install -r requirements.txt #运行timeline_app.py streamlit run timeline_app.py \n使用方式  点击打开案例网站  下面是网页的一个时间点\n自然语言处理发展时间线   你也可以浏览的原始数据文件，格式为json。下图可以看到json的是由\n 36个字典，即36个时间点 每个字典中有很多字段，如url图片链接、headline、year年份、text简介等。  时间线案例数据   ","permalink":"/blog/nlp-history-timeline/","summary":" 点击上方图片购买课程   说明 这个案例使用Streamlit 和 TimelineJS 制作， 通过时间线方式展示自然语言处理领域发展。大家可以将其改造为公司发展时间线、人生里程碑时间线等等。\n下载\u0026amp;运行  点击此处下载代码 https://hidadeng.github.io/blog/nlp-history-timeline/nlp-history-timeline.zip 解压nlp-history-timeline.zip文件夹，放置于桌面 打开命令行(终端)  #切换到nlp-history-timeline cd nlp-history-timeline #安装需要的包 pip3 install -r requirements.txt #运行timeline_app.py streamlit run timeline_app.py \n使用方式  点击打开案例网站  下面是网页的一个时间点\n自然语言处理发展时间线   你也可以浏览的原始数据文件，格式为json。下图可以看到json的是由\n 36个字典，即36个时间点 每个字典中有很多字段，如url图片链接、headline、year年份、text简介等。  时间线案例数据   ","title":"使用streamlit制作自然语言处理发展时间线页面"},{"content":"  作者：蘇宇暉（台科大管研所博士候選人）、羅凱揚（台科大企管系博士） 日期: 2020-12-14 绘图：彭煖蘋 出处: medium   “穿衣服是大学问”，不相信可以问问很多女生，每天出门前会不会为了今天要穿什麽衣服而伤脑筋？现在如果有一家公司帮您聘请一个专属的“穿衣顾问”，只在一开始收费120多元（二十块美金）的造型费，然后定期寄来已经帮您量身打造的时尚服饰，您愿意买单吗？不瞒您说，目前全世球已有三百五十万人接受美国一家叫做“Stitch Fix”的穿衣时尚订阅公司的服务。\n 点击浏览Stitch Fix网站   2011年6月，刚从哈佛大学商学院毕业的美日混血儿卡翠娜‧雷克（Katrina Lake），在美国旧金山成立时尚电商公司Stitch Fix。满脑子有趣想法的雷克，透过募集到的五十万美金，开始了她的创业之旅。短短不到七年的时间，到了2017年11月，Stitch Fix在美国Nasdaq上市。而卡翠娜‧雷克本人也成为2019年《福布斯》全美白手起家女富豪排行榜中的55名。\nStitch Fix的背后，其实是一家充分利用营销研究和营销数据科学，同时提供“穿衣时尚订阅”服务的新创公司。现在让我们来看看，Stitch Fix如何运作，如图-1所示。\n 图-1 StitchFix运作   消费者在登录Stitch Fix的网站首页时，不会看到像其他购物网站会有太多的商品展示，反而是介绍穿衣风格才是重点。而网站会有造型师来塑造消费者的风格，并且透过这种新的购物方式力邀消费者加入会员。因此，当消费者在Stitch Fix的网站注册时，Stitch Fix会请会员填答一份详细的问卷，包括顾客的基本资料、身高、尺码、喜欢的颜色、风格、经常出席的场合、甚至是预算等。\n接著，Stitch Fix每个月就会透过一个称为“订购盒子（Subscription Box）”的包裹，一次将五件服饰寄送给顾客。等到消费者收到包裹时，可以留下觉得满意的服饰，看不上眼或者不满意的服饰就再寄回给Stitch Fix。如果消费者将服饰全部留下，就会享受到折扣，反之，如果一件都不想买，就负担二十美元的包裹服务费。\n在美国，消费者要买衣服，往往得开车到购物中心或百货公司，买个两三件衣服总要花上半天时间。Stitch Fix一次寄来五件衣服（连同一张纸本问卷），其实也经过精算，因为如果一次寄太多件，消费者心理和预算上都难以承受。而Stitch Fix透过消费者所填答的电脑和纸本问卷，以及购买与退换货记录，利用机器学习算法对消费者喜好与需求进行预测，并结合设计师的搭配，给消费者定制化的建议。因为喜欢的衣服被留下，不喜欢的退回，Stitch Fix就很容易利用这些大量数据建立起消费者穿衣风格的“模型”。\n而为了进一步收集到更精准的数据，2017年，Stitch Fix推出了一款Style Shuffle的小游戏，让顾客针对不同的服饰或配件，简单回应喜爱或是不喜爱。借此更进一步收集消费者的偏好，并增加消费者的粘性。Stitch Fix后来并将触角伸向男性服饰以及儿童服饰。而大尺码的女性服饰更是其服务重点。\n通过收集大量消费者用户数据，以及不断优化的模型算法，并结合个人造型师和机器学习（AI）进行个性化推荐，让Stitch Fix的时尚订阅制服务，能够更精准地预测与满足消费者偏好的服饰及配件。据了解，截至2019年，该公司拥有8,000名员工，其中包括5,100名造型师和100多名数据科学家。\n从以上Stitch Fix的故事中，我们看到了营销研究与数据科学的完美搭配。\n 点击上方图片购买课程   ","permalink":"/blog/stitchfix/","summary":"  作者：蘇宇暉（台科大管研所博士候選人）、羅凱揚（台科大企管系博士） 日期: 2020-12-14 绘图：彭煖蘋 出处: medium   “穿衣服是大学问”，不相信可以问问很多女生，每天出门前会不会为了今天要穿什麽衣服而伤脑筋？现在如果有一家公司帮您聘请一个专属的“穿衣顾问”，只在一开始收费120多元（二十块美金）的造型费，然后定期寄来已经帮您量身打造的时尚服饰，您愿意买单吗？不瞒您说，目前全世球已有三百五十万人接受美国一家叫做“Stitch Fix”的穿衣时尚订阅公司的服务。\n 点击浏览Stitch Fix网站   2011年6月，刚从哈佛大学商学院毕业的美日混血儿卡翠娜‧雷克（Katrina Lake），在美国旧金山成立时尚电商公司Stitch Fix。满脑子有趣想法的雷克，透过募集到的五十万美金，开始了她的创业之旅。短短不到七年的时间，到了2017年11月，Stitch Fix在美国Nasdaq上市。而卡翠娜‧雷克本人也成为2019年《福布斯》全美白手起家女富豪排行榜中的55名。\nStitch Fix的背后，其实是一家充分利用营销研究和营销数据科学，同时提供“穿衣时尚订阅”服务的新创公司。现在让我们来看看，Stitch Fix如何运作，如图-1所示。\n 图-1 StitchFix运作   消费者在登录Stitch Fix的网站首页时，不会看到像其他购物网站会有太多的商品展示，反而是介绍穿衣风格才是重点。而网站会有造型师来塑造消费者的风格，并且透过这种新的购物方式力邀消费者加入会员。因此，当消费者在Stitch Fix的网站注册时，Stitch Fix会请会员填答一份详细的问卷，包括顾客的基本资料、身高、尺码、喜欢的颜色、风格、经常出席的场合、甚至是预算等。\n接著，Stitch Fix每个月就会透过一个称为“订购盒子（Subscription Box）”的包裹，一次将五件服饰寄送给顾客。等到消费者收到包裹时，可以留下觉得满意的服饰，看不上眼或者不满意的服饰就再寄回给Stitch Fix。如果消费者将服饰全部留下，就会享受到折扣，反之，如果一件都不想买，就负担二十美元的包裹服务费。\n在美国，消费者要买衣服，往往得开车到购物中心或百货公司，买个两三件衣服总要花上半天时间。Stitch Fix一次寄来五件衣服（连同一张纸本问卷），其实也经过精算，因为如果一次寄太多件，消费者心理和预算上都难以承受。而Stitch Fix透过消费者所填答的电脑和纸本问卷，以及购买与退换货记录，利用机器学习算法对消费者喜好与需求进行预测，并结合设计师的搭配，给消费者定制化的建议。因为喜欢的衣服被留下，不喜欢的退回，Stitch Fix就很容易利用这些大量数据建立起消费者穿衣风格的“模型”。\n而为了进一步收集到更精准的数据，2017年，Stitch Fix推出了一款Style Shuffle的小游戏，让顾客针对不同的服饰或配件，简单回应喜爱或是不喜爱。借此更进一步收集消费者的偏好，并增加消费者的粘性。Stitch Fix后来并将触角伸向男性服饰以及儿童服饰。而大尺码的女性服饰更是其服务重点。\n通过收集大量消费者用户数据，以及不断优化的模型算法，并结合个人造型师和机器学习（AI）进行个性化推荐，让Stitch Fix的时尚订阅制服务，能够更精准地预测与满足消费者偏好的服饰及配件。据了解，截至2019年，该公司拥有8,000名员工，其中包括5,100名造型师和100多名数据科学家。\n从以上Stitch Fix的故事中，我们看到了营销研究与数据科学的完美搭配。\n 点击上方图片购买课程   ","title":"营销科技 | 今天出门穿什么？时尚电商Stitch Fix"},{"content":" 点击上方图片购买课程    点击   使用altair绘制漂亮的股票价格趋势图, 直接上代码。\n安装 !pip3 install altair \n案例数据 这里使用vega_datasets中提供的数据做测试，返回的结果是dataframe类型的数据。\nfrom vega_datasets import data def get_data(): source = data.stocks() source = source[source.date.gt(\u0026#34;2004-01-01\u0026#34;)] return source get_data()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  symbol date price     49 MSFT 2004-02-01 21.77   50 MSFT 2004-03-01 20.46   51 MSFT 2004-04-01 21.45   52 MSFT 2004-05-01 21.53   53 MSFT 2004-06-01 23.44   ... ... ... ...   555 AAPL 2009-11-01 199.91   556 AAPL 2009-12-01 210.73   557 AAPL 2010-01-01 192.06   558 AAPL 2010-02-01 204.62   559 AAPL 2010-03-01 223.02    364 rows × 3 columns\n 完整代码 import altair as alt import pandas as pd from vega_datasets import data from vega_datasets import data def get_data(): source = data.stocks() source = source[source.date.gt(\u0026#34;2004-01-01\u0026#34;)] return source def get_chart(df): hover = alt.selection_single( fields=[\u0026#34;date\u0026#34;], nearest=True, on=\u0026#34;mouseover\u0026#34;, empty=\u0026#34;none\u0026#34;, ) lines = ( alt.Chart(df, title=\u0026#34;股票价格趋势\u0026#34;) .mark_line() .encode( x=\u0026#34;date\u0026#34;, y=\u0026#34;price\u0026#34;, color=\u0026#34;symbol\u0026#34;, # strokeDash=\u0026#34;symbol\u0026#34;, ) ) # Draw points on the line, and highlight based on selection points = lines.transform_filter(hover).mark_circle(size=65) # Draw a rule at the location of the selection tooltips = ( alt.Chart(df) .mark_rule() .encode( x=\u0026#34;yearmonthdate(date)\u0026#34;, y=\u0026#34;price\u0026#34;, opacity=alt.condition(hover, alt.value(0.3), alt.value(0)), tooltip=[ alt.Tooltip(\u0026#34;date\u0026#34;, title=\u0026#34;日期\u0026#34;), alt.Tooltip(\u0026#34;price\u0026#34;, title=\u0026#34;价格 (USD)\u0026#34;), ], ) .add_selection(hover) ) return (lines + points + tooltips).interactive() # Original time series chart. Omitted `get_chart` for clarity chart = get_chart(get_data()) # Input annotations ANNOTATIONS = [ (\u0026#34;Mar 01, 2008\u0026#34;, \u0026#34;Pretty good day for GOOG\u0026#34;), (\u0026#34;Dec 01, 2007\u0026#34;, \u0026#34;Something\u0026#39;s going wrong for GOOG \u0026amp; AAPL\u0026#34;), (\u0026#34;Nov 01, 2008\u0026#34;, \u0026#34;Market starts again thanks to...\u0026#34;), (\u0026#34;Dec 01, 2009\u0026#34;, \u0026#34;Small crash for GOOG after...\u0026#34;), ] # Create a chart with annotations annotations_df = pd.DataFrame(ANNOTATIONS, columns=[\u0026#34;date\u0026#34;, \u0026#34;event\u0026#34;]) annotations_df.date = pd.to_datetime(annotations_df.date) annotations_df[\u0026#34;y\u0026#34;] = 0 annotation_layer = ( alt.Chart(annotations_df) .mark_text(size=15, text=ticker, dx=ticker_dx, dy=ticker_dy, align=\u0026#34;center\u0026#34;) .encode( x=\u0026#34;date:T\u0026#34;, y=alt.Y(\u0026#34;y:Q\u0026#34;), tooltip=[\u0026#34;event\u0026#34;], ) .interactive() ) (chart + annotation_layer).interactive() Run\n代码下载 出处 https://share.streamlit.io/streamlit/example-app-time-series-annotation/main\n 点击上方图片购买课程   ","permalink":"/blog/time-series-annotation/","summary":"点击上方图片购买课程    点击   使用altair绘制漂亮的股票价格趋势图, 直接上代码。\n安装 !pip3 install altair \n案例数据 这里使用vega_datasets中提供的数据做测试，返回的结果是dataframe类型的数据。\nfrom vega_datasets import data def get_data(): source = data.stocks() source = source[source.date.gt(\u0026#34;2004-01-01\u0026#34;)] return source get_data()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  symbol date price     49 MSFT 2004-02-01 21.","title":"使用altair绘制漂亮的股票价格趋势图"},{"content":" 点击上方图片购买课程   Pandas非常善于处理大规模数据，支持将结果导出到CSV，Excel，HTML，json等文件中。 如果您想将 多种信息（excel、图片等）组合 到一个文档中，那么事情变得更加困难。 例如，如果要在一个Excel工作表上放置两个DataFrame，则需要使用相应的Excel库才能输出。 这当然是OK的，但走起来真不简单。 本文将介绍一种方法，将多种 信息（excel、图片等）组合 成一个 HTML模板 ，然后使用Jinja模板和WeasyPrint 再将其转换为独立的PDF文档。\n操作流程 使用Pandas将数据输出到Excel文件中的多个工作表或者用DataFrames创建多个Excel文件非常方便。 但是，如果您想将 多种信息（excel、图片等）组合 输出到一个文件中，那么直接从Pandas进行操作的方法并不多。 幸运的是，万能的python大法有很多选项可以帮助我们。\n在本文中，我将采用以下流程来创建多页PDF文档。\n  工具 我决定使用HTML作为模板语言，因为它可能是生成结构化数据最便捷的方法，支持各种格式数据（如图片、excel表）。我也认为每个人都知道（或可以弄清楚）足够的HTML知识来生成一个简单的报告。\n这个工作流程中最困难的部分是弄清楚如何将HTML呈现为PDF。我觉得还没有最佳的解决方案，但我选择了 WeasyPrint ，因为它仍然在积极维护，我发现我可以相对容易地使它工作。作为替代方案，我过去使用过xhtml2pdf，它的效果也很好，遗憾的是该库缺乏文档说明，但它已存在一段时间，并且确实可以从HTML生成PDF。\n数据 如上所述，我们将使用之前文章中的相同数据集。 为了使这一切成为一个独立的文章，下面是我如何导入数据,做描述性统计，及并生成关于CPU和软件销售的 数据透视表 。\n导入模块，并读入销售渠道信息。\nimport pandas as pd import numpy as np df = pd.read_excel(\u0026#39;salesfunnel.xlsx\u0026#39;) df.head() Run\n .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Account Name Rep Manager Product Quantity Price Status     0 714466 Trantow-Barrows Craig Booker Debra Henley CPU 1 30000 presented   1 714466 Trantow-Barrows Craig Booker Debra Henley Software 1 10000 presented   2 714466 Trantow-Barrows Craig Booker Debra Henley Maintenance 2 5000 pending   3 737550 Fritsch, Russel and Anderson Craig Booker Debra Henley CPU 1 35000 declined   4 146832 Kiehn-Spinka Daniel Hilton Debra Henley CPU 2 65000 won     对数据做透视表\nsales_report = pd.pivot_table(df, index=[\u0026#34;Manager\u0026#34;, \u0026#34;Rep\u0026#34;, \u0026#34;Product\u0026#34;], values=[\u0026#34;Price\u0026#34;, \u0026#34;Quantity\u0026#34;], aggfunc=[np.sum, np.mean], fill_value=0) sales_report.head() Run\n .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; }  \n     sum mean      Price Quantity Price Quantity   Manager Rep Product         Debra Henley Craig Booker CPU 65000 2 32500 1.0   Maintenance 5000 2 5000 2.0   Software 10000 1 10000 1.0   Daniel Hilton CPU 105000 4 52500 2.0   Software 10000 1 10000 1.0     模板 DataFrame拥有to_html()的方法，可以将dataframe数据转化为含有HTML格式的字符串。\n但是随着您的报告变得越来越复杂或您选择将Jinja模板用于您的网络应用，jinja的这些功能将为您提供良好的服务。Jinja的另一个不错的功能是它包含多个内置过滤器，这些过滤器允许我们以Pandas中难以做到的方式格式化我们的一些数据。\n为了在我们的应用程序中使用Jinja，我们需要做三件事：\n1. 创建一个模板 2. 将变量添加到模板上下文中 3. 将模板渲染为HTML \n这是一个非常简单的模板，我们称之为myreport.html：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Sales Funnel Report - National\u0026lt;/h2\u0026gt; {{ national_pivot_table }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 上面html代码中拥有 {{title}} 和 {{national_pivot_table }} 这两个关键词。这两个关键词用来接收需要渲染的数据，比如图片对象、dataframe对象等。\n要填充这些变量，我们需要创建一个Jinja环境并获取我们的模板对象：\nfrom jinja2 import Environment, FileSystemLoader env = Environment(loader=FileSystemLoader(\u0026#39;.\u0026#39;)) template = env.get_template(\u0026#39;myreport.html\u0026#39;) 在上面的示例中，我假设模板位于当前目录中，但您可以将完整路径放到模板位置。\n另一个关键组件是 env 的创建。 这个变量是我们将数据（或对象）填充给模板的方式。 我们创建了一个名为 template_var 的字典，其中包含我们想要传递给模板的所有变量。\n请注意变量的名称如何与我们的模板匹配。即名称要与myreport.html中的{{}}夹住的关键词一样。\ntemplate_vars = {\u0026#34;title\u0026#34; : \u0026#34;Sales Funnel Report - National\u0026#34;, \u0026#34;national_pivot_table\u0026#34;: sales_report.to_html()} 最后一步是将 template_vars 渲染到html模板中，并输出为html字符串，最终我们将使用该html字符串来生成pdf报告。\nhtml_out = template.render(template_vars) 为简洁起见，我不会显示完整的HTML，但您应该明白这一点。\n生成pdf pdf报告的生成部分相当简单，这里用到weasyprint库\nfrom weasyprint import HTML HTML(string=html_out).write_pdf(\u0026#34;report.pdf\u0026#34;)   但是打开的pdf样式很简单，白底黑字并不美观。之所以这样是因为我们没有使用自定义样式表css，但是咱们不熟悉css，有一种简单的办法就是用成熟的css，这里我用的typography.css 作为填充表格时的样式表。这个css的优点有：\n1. 相对较小且易于理解 2. 可以在PDF引擎中运行而不会抛出错误和警告 3. 能让表格表格看起来很美观 让我们尝试使用我们更新的样式表重新渲染它：\nHTML(string=html_out).write_pdf(\u0026#39;beautiful_report.pdf\u0026#39;, stylesheets=[\u0026#34;typography.css\u0026#34;])   添加了一个stylesheets参数就让输出结果瞬间变得高端大气上档次。\n更多 如果想更加丰富的输出pdf报告，大家回去需要查阅jinja文档，找一些css样式表。\n下载 点击这里下载本文需要的实验数据及代码\n","permalink":"/blog/weasyprint_auto_report/","summary":"点击上方图片购买课程   Pandas非常善于处理大规模数据，支持将结果导出到CSV，Excel，HTML，json等文件中。 如果您想将 多种信息（excel、图片等）组合 到一个文档中，那么事情变得更加困难。 例如，如果要在一个Excel工作表上放置两个DataFrame，则需要使用相应的Excel库才能输出。 这当然是OK的，但走起来真不简单。 本文将介绍一种方法，将多种 信息（excel、图片等）组合 成一个 HTML模板 ，然后使用Jinja模板和WeasyPrint 再将其转换为独立的PDF文档。\n操作流程 使用Pandas将数据输出到Excel文件中的多个工作表或者用DataFrames创建多个Excel文件非常方便。 但是，如果您想将 多种信息（excel、图片等）组合 输出到一个文件中，那么直接从Pandas进行操作的方法并不多。 幸运的是，万能的python大法有很多选项可以帮助我们。\n在本文中，我将采用以下流程来创建多页PDF文档。\n  工具 我决定使用HTML作为模板语言，因为它可能是生成结构化数据最便捷的方法，支持各种格式数据（如图片、excel表）。我也认为每个人都知道（或可以弄清楚）足够的HTML知识来生成一个简单的报告。\n这个工作流程中最困难的部分是弄清楚如何将HTML呈现为PDF。我觉得还没有最佳的解决方案，但我选择了 WeasyPrint ，因为它仍然在积极维护，我发现我可以相对容易地使它工作。作为替代方案，我过去使用过xhtml2pdf，它的效果也很好，遗憾的是该库缺乏文档说明，但它已存在一段时间，并且确实可以从HTML生成PDF。\n数据 如上所述，我们将使用之前文章中的相同数据集。 为了使这一切成为一个独立的文章，下面是我如何导入数据,做描述性统计，及并生成关于CPU和软件销售的 数据透视表 。\n导入模块，并读入销售渠道信息。\nimport pandas as pd import numpy as np df = pd.read_excel(\u0026#39;salesfunnel.xlsx\u0026#39;) df.head() Run\n .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }","title":"使用WeasyPrint自动生成pdf报告文件"},{"content":" 点击上方图片购买课程   Rembg Rembg可以去掉图片中的背景，效果如下\n安装 CPU版\npip install rembg GPU版\npip install rembg[gpu] \n快速上手 安装成功后，可以在命令行中调动Rembg。如果只对单个图片进行处理\nrembg i path/to/input.png path/to/output.png 对多个图片文件处理(批处理)，\nrembg p path/to/input path/to/output \n在Python中使用 把图片读取为二进制数据\nfrom rembg import remove #待处理的图片路径 input_path = \u0026#39;input.png\u0026#39; #处理后存储的图片路径 output_path = \u0026#39;output.png\u0026#39; with open(input_path, \u0026#39;rb\u0026#39;) as i: with open(output_path, \u0026#39;wb\u0026#39;) as o: input = i.read() output = remove(input) o.write(output) ","permalink":"/blog/rembg_remove_background_from_image/","summary":" 点击上方图片购买课程   Rembg Rembg可以去掉图片中的背景，效果如下\n安装 CPU版\npip install rembg GPU版\npip install rembg[gpu] \n快速上手 安装成功后，可以在命令行中调动Rembg。如果只对单个图片进行处理\nrembg i path/to/input.png path/to/output.png 对多个图片文件处理(批处理)，\nrembg p path/to/input path/to/output \n在Python中使用 把图片读取为二进制数据\nfrom rembg import remove #待处理的图片路径 input_path = \u0026#39;input.png\u0026#39; #处理后存储的图片路径 output_path = \u0026#39;output.png\u0026#39; with open(input_path, \u0026#39;rb\u0026#39;) as i: with open(output_path, \u0026#39;wb\u0026#39;) as o: input = i.read() output = remove(input) o.write(output) ","title":"Rembg库 | 可以去掉图片背景的"},{"content":" 点击上方图片购买课程   paperless-ngx https://github.com/paperless-ngx/paperless-ngx\nPaperless-ngx 是一个文档管理系统，可将您的文献资料转换为可搜索的本地在线存档。\n  ggpubr https://github.com/kassambara/ggpubr\nHadley Wickham 的 ggplot2 是一个出色且灵活的包，用于在 R 中进行优雅的数据可视化。但是，默认生成的图需要一些精巧的设计才能用于学术发表。 此外，要自定义 ggplot，语法不透明，这增加了没有高级 R 编程技能的研究人员的难度。\n\u0026lsquo;ggpubr\u0026rsquo; 包提供了一些易于使用的功能，用于创建和定制基于 \u0026lsquo;ggplot2\u0026rsquo; 的发布就绪图。\nggdotchart(dfm, x = \u0026#34;name\u0026#34;, y = \u0026#34;mpg_z\u0026#34;, color = \u0026#34;cyl\u0026#34;, # Color by groups palette = c(\u0026#34;#00AFBB\u0026#34;, \u0026#34;#E7B800\u0026#34;, \u0026#34;#FC4E07\u0026#34;), # Custom color palette sorting = \u0026#34;descending\u0026#34;, # Sort value in descending order add = \u0026#34;segments\u0026#34;, # Add segments from y = 0 to dots add.params = list(color = \u0026#34;lightgray\u0026#34;, size = 2), # Change segment color and size group = \u0026#34;cyl\u0026#34;, # Order by groups dot.size = 6, # Large dot size label = round(dfm$mpg_z,1), # Add mpg values as dot labels font.label = list(color = \u0026#34;white\u0026#34;, size = 9, vjust = 0.5), # Adjust label parameters ggtheme = theme_pubr() # ggplot2 theme )+ geom_hline(yintercept = 0, linetype = 2, color = \u0026#34;lightgray\u0026#34;)   ##svgwrite\nhttps://github.com/mozman/svgwrite\n使用Python生成svg图片\nDiploma PDF Generator https://github.com/streamlit/example-app-pdf-report\n使用streamlit建立的学习证书生成器，大家感兴趣可以使用一下。需要注意的是，python环境最好是3.7版本，3.8、3.9运行该代码会出Bug。\n  ","permalink":"/blog/techweekly15/","summary":"点击上方图片购买课程   paperless-ngx https://github.com/paperless-ngx/paperless-ngx\nPaperless-ngx 是一个文档管理系统，可将您的文献资料转换为可搜索的本地在线存档。\n  ggpubr https://github.com/kassambara/ggpubr\nHadley Wickham 的 ggplot2 是一个出色且灵活的包，用于在 R 中进行优雅的数据可视化。但是，默认生成的图需要一些精巧的设计才能用于学术发表。 此外，要自定义 ggplot，语法不透明，这增加了没有高级 R 编程技能的研究人员的难度。\n\u0026lsquo;ggpubr\u0026rsquo; 包提供了一些易于使用的功能，用于创建和定制基于 \u0026lsquo;ggplot2\u0026rsquo; 的发布就绪图。\nggdotchart(dfm, x = \u0026#34;name\u0026#34;, y = \u0026#34;mpg_z\u0026#34;, color = \u0026#34;cyl\u0026#34;, # Color by groups palette = c(\u0026#34;#00AFBB\u0026#34;, \u0026#34;#E7B800\u0026#34;, \u0026#34;#FC4E07\u0026#34;), # Custom color palette sorting = \u0026#34;descending\u0026#34;, # Sort value in descending order add = \u0026#34;segments\u0026#34;, # Add segments from y = 0 to dots add.","title":"TechWeekly-15 每周有趣有用的技术分享"},{"content":"  下载本文代码 如何计算地图中两点距离及角度 例如北京市北纬40.1，东经116.6； 哈尔滨市北纬45.7567, 东经126.6424\n感兴趣的童鞋也可去看问题出处\n https://stackoverflow.com/questions/3932502/calculate-angle-between-two-latitude-longitude-points/51415608\n 在回答中，看到有地理信息系统Python包geographiclib，可以计算两点距离和角度。\n安装geographiclib https://geographiclib.sourceforge.io/1.52/python/\n!pip3 install geographiclib==1.52 \n计算距离 注意，在接下来的计算中，将北纬、东经表示为正数。将南纬、西经表示为负数。\ndef distance(beiwei1, dongjing1, beiwei2, dongjing2): \u0026#34;\u0026#34;\u0026#34; beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。 dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负 beiwei2: 地点2的纬度数 dongjing2: 地点2的经度数 \u0026#34;\u0026#34;\u0026#34; from geographiclib.geodesic import Geodesic geod = Geodesic.WGS84 g = geod.Inverse(beiwei1, dongjing1, beiwei2, dongjing2) distance = g[\u0026#39;s12\u0026#39;]/1000 return distance #北京Beijing与哈尔滨harbin distance(40.1, 116.6, 45.7567, 126.6424) Run\n1031.617791888516    方位角azimuth 两个地点在地图中所处的相对位置，称之为方位角azimuth。方位角最大度数360度，\n 0度表示正北 90度表示正西 180度表示正南 270度表示正西 360度表示正北  def azimuth(beiwei1, dongjing1, beiwei2, dongjing2): \u0026#34;\u0026#34;\u0026#34; beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。 dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负 beiwei2: 地点2的纬度数 dongjing2: 地点2的经度数 \u0026#34;\u0026#34;\u0026#34; from geographiclib.geodesic import Geodesic geod = Geodesic.WGS84 l = geod.InverseLine(beiwei1, dongjing1, beiwei2, dongjing2) s12 = distance(beiwei1, dongjing1, beiwei2, dongjing2) g = l.Position(s12, Geodesic.STANDARD | Geodesic.LONG_UNROLL) return g[\u0026#39;azi2\u0026#39;] #北京 哈尔滨 azimuth(40.1, 116.6, 45.7567, 126.6424) 56.03961942267271  按照azimuth定义，56度的解读为 哈尔滨位于北京的东北方向。\n同理可以计算西安与杭州\n#西安， 杭州 azimuth(34.2658, 108.9541, 30.2741, 120.1552) 115.1506923699206  杭州位于西安的115度，即东南方向\n 点击上方图片购买课程   ","permalink":"/blog/%E5%9C%B0%E7%90%86%E8%AE%A1%E7%AE%97-%E7%BB%8F%E7%BA%AC%E5%BA%A6/","summary":"下载本文代码 如何计算地图中两点距离及角度 例如北京市北纬40.1，东经116.6； 哈尔滨市北纬45.7567, 东经126.6424\n感兴趣的童鞋也可去看问题出处\n https://stackoverflow.com/questions/3932502/calculate-angle-between-two-latitude-longitude-points/51415608\n 在回答中，看到有地理信息系统Python包geographiclib，可以计算两点距离和角度。\n安装geographiclib https://geographiclib.sourceforge.io/1.52/python/\n!pip3 install geographiclib==1.52 \n计算距离 注意，在接下来的计算中，将北纬、东经表示为正数。将南纬、西经表示为负数。\ndef distance(beiwei1, dongjing1, beiwei2, dongjing2): \u0026#34;\u0026#34;\u0026#34; beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。 dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负 beiwei2: 地点2的纬度数 dongjing2: 地点2的经度数 \u0026#34;\u0026#34;\u0026#34; from geographiclib.geodesic import Geodesic geod = Geodesic.WGS84 g = geod.Inverse(beiwei1, dongjing1, beiwei2, dongjing2) distance = g[\u0026#39;s12\u0026#39;]/1000 return distance #北京Beijing与哈尔滨harbin distance(40.1, 116.6, 45.7567, 126.6424) Run\n1031.617791888516    方位角azimuth 两个地点在地图中所处的相对位置，称之为方位角azimuth。方位角最大度数360度，\n 0度表示正北 90度表示正西 180度表示正南 270度表示正西 360度表示正北  def azimuth(beiwei1, dongjing1, beiwei2, dongjing2): \u0026#34;\u0026#34;\u0026#34; beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。 dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负 beiwei2: 地点2的纬度数 dongjing2: 地点2的经度数 \u0026#34;\u0026#34;\u0026#34; from geographiclib.","title":"使用Python计算地图中两点距离及方位角"},{"content":" 点击本图下载本文项目代码   下载项目数据代码 地理空间数据分析已成为数据科学中的一个常见领域。对于地理空间数据科学来说也不例外。支持 GeoPandas、Shapely 和 Rasterio 等项目的社区使 Python 成为地理空间分析的首选。\nGreppo：快速简单的地理空间仪表板构建方法 Greppo 是一个用于构建地理空间网络应用程序的开源 Python 框架。 它提供了可随时使用的前端和后端组件作为函数，充当前端交互组件和绑定的后端变量之间的 API。 要了解有关心智模型的更多信息，请参阅此页面。\n无需太多前端、后端、Web 开发经验，您就可以在 5 分钟内使用 Python 构建和部署功能齐全的 Web 应用程序。\n GitHub存储库：https://github.com/greppo-io/greppo 文档：https://docs.greppo.io/ 网站：https://greppo.io/   在本教程中，我们将使用 Greppo 在 Python 中构建地理空间仪表板。 我们将通过设置环境、安装、导入数据、为我们的仪表板放入组件并为其提供服务来工作。 您将需要了解 Python、GeoPandas 和地理空间分析的基础知识。 入门…\n 首先要做的是安装本文需要的 Python 第三方库。\npip install greppo geopandas 下载本教程所需的数据集。 本教程的所有数据和代码都可以在这个 GitHub 存储库中找到：greppo-demo/vector-demo（数据源：https://github.com/openpolis/geojson-italy）\n编写仪表板脚本 我们首先为项目设置文件夹结构。 我将使用以下项目文件夹结构：\n└── vector-demo ├── app.py ├── cities.geojson ├── regions.geojson └── roads.geojson 该应用程序的主控脚本是 app.py。\nStep 0：启动服务器 启动服务器，请打开**终端（windows对应的是命令行cmd）**并按照这些说明进行操作。\n首先，终端中执行cd vector_demo将工作目录切换为 (cd) 项目文件夹 vector_demo。\n然后，终端执行greppo serve app.py, 启动服务器。\n在命令行中启动服务器   然后，您将看到 Uvicorn 服务器在指定位置（类似于链接）运行。 复制网址链接，并将其粘贴到浏览器中。 然后它将加载应用程序。 如果您对 app.py 进行了任何更改，您将在浏览器页面上看到对您的应用的更新更改。\nStep 1：构建应用程序的基本脚手架。 即导入 greppo 包，并在地图中添加 base_layer。\nfrom greppo import app app.base_layer( name=\u0026#34;Open Street Map\u0026#34;, visible=True, url=\u0026#34;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0026#34;, subdomains=None, attribution=\u0026#39;(C) OpenStreetMap contributors\u0026#39;, ) app.base_layer(provider=\u0026#34;CartoDB Positron\u0026#34;) 您需要先从 greppo 导入应用程序。 此应用程序对象将用作您的应用程序前端的接口，并为前端和后端之间的 2 路通信提供 API。\n  要将 base_layer 添加到您的应用程序地图，只需使用带有所需参数的应用程序 API 方法 app.base_layer()。 请参阅文档以了解什么是必需的和什么是可选的。 base_layer 方法提供了两种方法来指定基本瓦片层。 一种是使用 name 和 url 属性。 另一种方法是使用提供者的名称。\nStep 2：导入数据集并将其显示为叠加层。 使用 geopandas，我们可以将矢量数据集作为 GeoDataFrame 导入。 然后可以使用 app.vector_layer() 方法在 Web 应用程序上的地图上对其进行可视化。 在这里，我要导入三个不同的数据集，每个数据集都有多边形（意大利不同地区的边界）、线（意大利的主要高速公路）和点（意大利的主要城市）。\nimport geopandas as gpd from greppo import app regions = gpd.read_file(\u0026#34;./regions.geojson\u0026#34;) roads = gpd.read_file(\u0026#34;./roads.geojson\u0026#34;) cities = gpd.read_file(\u0026#34;./cities.geojson\u0026#34;) app.vector_layer( data = regions, name = \u0026#34;Regions of Italy\u0026#34;, description = \u0026#34;Polygons showing the boundaries of regions of Italy.\u0026#34;, style = {\u0026#34;fillColor\u0026#34;: \u0026#34;#4daf4a\u0026#34;}, ) app.vector_layer( data = roads, name = \u0026#34;Highways in Italy\u0026#34;, description = \u0026#34;Lines showing the major highways in Italy.\u0026#34;, style = {\u0026#34;color\u0026#34;: \u0026#34;#377eb8\u0026#34;}, ) app.vector_layer( data = cities, name = \u0026#34;Cities of Italy\u0026#34;, description = \u0026#34;Points showing the cities in Italy.\u0026#34;, style = {\u0026#34;color\u0026#34;: \u0026#34;#e41a1c\u0026#34;}, visible = True, ) 使用方法 app.vector_layer() 作为前端的 API，我们可以显示矢量数据。 您需要传入名称，其他参数是可选的。 虽然，将颜色或填充颜色传递给样式是区分和识别每一层的好习惯。 由于前端基于 Leaflet，所有样式都符合 Leaflet 的规范，可以在文档中找到。\n  您可以在此处找到 vector_layer 和样式的所有信息。 注意：您也可以制作 Choropleth 地图。 可以在此处找到其文档。\nStep 3：显示应用内文本、应用标题和应用描述 为了使 Web 应用程序有用，它需要携带一些文本以向其用户提供一些指导和上下文。 这些可以显示在组件旁边的侧边栏上。 使用 app.display() 方法可以在 web-app 上显示降价文本。 使用相同的方法，可以设置应用程序的标题和描述。\nfrom greppo import app app.display(name=\u0026#39;title\u0026#39;, value=\u0026#39;Vector demo\u0026#39;) app.display(name=\u0026#39;description\u0026#39;, value=\u0026#39;A Greppo demo app for vector data using GeoJSON data.\u0026#39;) text_1 = \u0026#34;\u0026#34;\u0026#34; ## About the web-app The dashboard shows the boundaries of the regions of Italy as polygons, the major arterial higways as lines and the major cities of each region as points. \u0026#34;\u0026#34;\u0026#34; app.display(name=\u0026#39;text-1\u0026#39;, value=text_1) app.display() 接受两个参数 name 和 value 。 虽然 value 承载要显示的文本，但 name 必须是唯一的，并带有文本的标识符。 如果 name=\u0026lsquo;title\u0026rsquo; 传递的值是应用程序的标题，如果 name=\u0026lsquo;description\u0026rsquo; 传递的值是应用程序的描述。 如果没有这两者中的任何一个，该应用程序将带有其默认标题和描述。 鼓励设置应用程序的标题和描述。\n  Step 4：将数据显示为图表 数据应用程序几乎没有将数据显示为图表。 Greppo 还允许您将数据显示为图表。 可以在文档中找到有关图表及其用法的信息。 这里，作为一个例子，展示了一个条形图，app.bar_chart()。\nfrom greppo import app import geopandas as gpd regions = gpd.read_file(\u0026#34;./regions.geojson\u0026#34;) roads = gpd.read_file(\u0026#34;./roads.geojson\u0026#34;) cities = gpd.read_file(\u0026#34;./cities.geojson\u0026#34;) app.display(name=\u0026#39;text-2\u0026#39;, value=\u0026#39;The following displays the count of polygons, lines and points as a barchart.\u0026#39;) app.bar_chart(name=\u0026#39;Geometry count\u0026#39;, description=\u0026#39;A bar-cart showing the count of each geometry-type in the datasets.\u0026#39;, x=[\u0026#39;polygons\u0026#39;, \u0026#39;lines\u0026#39;, \u0026#39;points\u0026#39;], y=[len(regions), len(roads), len(cities)], color=\u0026#39;#984ea3\u0026#39;) 图表所需的参数是名称、x 和 y 值。 可以添加描述和颜色来为应用程序用户提供更好的上下文。 名称和描述与图表一起显示。\n  结论 让我们全面了解一下我们在这里所做的事情。 我们的目标是使用 Greppo 创建一个地理空间 web 应用程序，以显示一些 GIS 矢量数据，并添加组件以为应用程序的用户提供更好的上下文。 这是该应用程序的完整代码：\nfrom greppo import app import geopandas as gpd app.display(name=\u0026#39;title\u0026#39;, value=\u0026#39;Vector demo\u0026#39;) app.display(name=\u0026#39;description\u0026#39;, value=\u0026#39;A Greppo demo app for vector data using GeoJSON data.\u0026#39;) app.base_layer( name=\u0026#34;Open Street Map\u0026#34;, visible=True, url=\u0026#34;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0026#34;, subdomains=None, attribution=\u0026#39;(C) OpenStreetMap contributors\u0026#39;, ) app.base_layer( provider=\u0026#34;CartoDB Positron\u0026#34;, ) regions = gpd.read_file(\u0026#34;./regions.geojson\u0026#34;) roads = gpd.read_file(\u0026#34;./roads.geojson\u0026#34;) cities = gpd.read_file(\u0026#34;./cities.geojson\u0026#34;) app.vector_layer( data=regions, name=\u0026#34;Regions of Italy\u0026#34;, description=\u0026#34;Polygons showing the boundaries of regions of Italy.\u0026#34;, style={\u0026#34;fillColor\u0026#34;: \u0026#34;#4daf4a\u0026#34;}, ) app.vector_layer( data=roads, name=\u0026#34;Highways in Italy\u0026#34;, description=\u0026#34;Lines showing the major highways in Italy.\u0026#34;, style={\u0026#34;color\u0026#34;: \u0026#34;#377eb8\u0026#34;}, ) app.vector_layer( data=cities, name=\u0026#34;Cities of Italy\u0026#34;, description=\u0026#34;Points showing the cities in Italy.\u0026#34;, style={\u0026#34;color\u0026#34;: \u0026#34;#e41a1c\u0026#34;}, visible=True, ) text_1 = \u0026#34;\u0026#34;\u0026#34; ## About the web-app The dashboard shows the boundaries of the regions of Italy as polygons, the major arterial higways as lines and the major cities of each region as points. \u0026#34;\u0026#34;\u0026#34; app.display(name=\u0026#39;text-1\u0026#39;, value=text_1) app.display(name=\u0026#39;text-2\u0026#39;, value=\u0026#39;The following displays the count of polygons, lines and points as a barchart.\u0026#39;) app.bar_chart(name=\u0026#39;Geometry count\u0026#39;, description=\u0026#39;A bar-cart showing the count of each geometry-type in the datasets.\u0026#39;, x=[\u0026#39;polygons\u0026#39;, \u0026#39;lines\u0026#39;, \u0026#39;points\u0026#39;], y=[len(regions), len(roads), len(cities)], color=\u0026#39;#984ea3\u0026#39;) 运行效果如下\n 点击本图下载本文项目代码   下载项目数据代码  点击上方图片购买课程   ","permalink":"/blog/geospatial_with_greppo/","summary":"点击本图下载本文项目代码   下载项目数据代码 地理空间数据分析已成为数据科学中的一个常见领域。对于地理空间数据科学来说也不例外。支持 GeoPandas、Shapely 和 Rasterio 等项目的社区使 Python 成为地理空间分析的首选。\nGreppo：快速简单的地理空间仪表板构建方法 Greppo 是一个用于构建地理空间网络应用程序的开源 Python 框架。 它提供了可随时使用的前端和后端组件作为函数，充当前端交互组件和绑定的后端变量之间的 API。 要了解有关心智模型的更多信息，请参阅此页面。\n无需太多前端、后端、Web 开发经验，您就可以在 5 分钟内使用 Python 构建和部署功能齐全的 Web 应用程序。\n GitHub存储库：https://github.com/greppo-io/greppo 文档：https://docs.greppo.io/ 网站：https://greppo.io/   在本教程中，我们将使用 Greppo 在 Python 中构建地理空间仪表板。 我们将通过设置环境、安装、导入数据、为我们的仪表板放入组件并为其提供服务来工作。 您将需要了解 Python、GeoPandas 和地理空间分析的基础知识。 入门…\n 首先要做的是安装本文需要的 Python 第三方库。\npip install greppo geopandas 下载本教程所需的数据集。 本教程的所有数据和代码都可以在这个 GitHub 存储库中找到：greppo-demo/vector-demo（数据源：https://github.com/openpolis/geojson-italy）\n编写仪表板脚本 我们首先为项目设置文件夹结构。 我将使用以下项目文件夹结构：\n└── vector-demo ├── app.py ├── cities.geojson ├── regions.geojson └── roads.geojson 该应用程序的主控脚本是 app.","title":"在Python中使用Greppo构建的地理空间仪表板"},{"content":" 点击上方图片购买课程   LoveIt https://github.com/dillonzq/LoveIt\n比现在我用的PaperMod更简洁美观的hugo主题\n 点击上方图片,查看案例网站   DataWrapper https://www.datawrapper.de/\n可视化工具网站，操作简洁，好用\n 点击查看网站   frappe https://github.com/frappe/frappe\n消除 97.42%* 的软件开发工作\n 点击查看网站   Parrot_Paraphraser 每年上半年都是毕业季，学生都会为论文降重倍感煎熬。\n一个实用且功能丰富的句子改写（可以将低英文论文重复率）框架，以文本形式增强人类意图，为会话引擎构建健壮的 NLU 模型。 由 Prithiviraj Damodaran 创建。\nfrom parrot import Parrot import torch import warnings warnings.filterwarnings(\u0026#34;ignore\u0026#34;) \u0026#39;\u0026#39;\u0026#39; uncomment to get reproducable paraphrase generations def random_state(seed): torch.manual_seed(seed) if torch.cuda.is_available(): torch.cuda.manual_seed_all(seed) random_state(1234) \u0026#39;\u0026#39;\u0026#39; #Init models (make sure you init ONLY once if you integrate this to your code) parrot = Parrot(model_tag=\u0026#34;prithivida/parrot_paraphraser_on_T5\u0026#34;) phrases = [\u0026#34;Can you recommed some upscale restaurants in Newyork?\u0026#34;, \u0026#34;What are the famous places we should not miss in Russia?\u0026#34; ] for phrase in phrases: print(\u0026#34;-\u0026#34;*100) print(\u0026#34;Input_phrase: \u0026#34;, phrase) print(\u0026#34;-\u0026#34;*100) para_phrases = parrot.augment(input_phrase=phrase, use_gpu=False) for para_phrase in para_phrases: print(para_phrase) Run\n---------------------------------------------------------------------- Input_phrase: Can you recommed some upscale restaurants in Newyork? ---------------------------------------------------------------------- list some excellent restaurants to visit in new york city? what upscale restaurants do you recommend in new york? i want to try some upscale restaurants in new york? recommend some upscale restaurants in newyork? can you recommend some high end restaurants in newyork? can you recommend some upscale restaurants in new york? can you recommend some upscale restaurants in newyork? ---------------------------------------------------------------------- Input_phrase: What are the famous places we should not miss in Russia ---------------------------------------------------------------------- what should we not miss when visiting russia? recommend some of the best places to visit in russia? list some of the best places to visit in russia? can you list the top places to visit in russia? show the places that we should not miss in russia? list some famous places which we should not miss in russia? 中文不能直接用，不过也有解决思路。\n 先将中文转为英文 再使用parrot将英文转为多种英文表达 将多种英文表达转化为多种中文表达  Knot https://github.com/Lojii/Knot\nKnot 是一款iOS端抓包工具（没有其他的科学转发功能，单纯的抓包工具），包含所有完整代码(Network+UI)，使用MITM(中间人攻击)技术，用swift编写，目前实现了http(s)解析。已实现功能\n http、https流量抓取 流量解析、多格式导出、过程分析 可抓取局域网内其他设备与外界通信数据 CA证书安装、导出 中英文国际化 过滤规则配置、导出  pixel-punk-avatars https://github.com/pixegami/pixel-punk-avatars\n使用Python一键生成1000张nft样式的头像。\n  tabler https://github.com/tabler/tabler\nTabler 完全响应并与所有现代浏览器兼容。 由于其现代、用户友好的设计，您可以创建一个用户会喜欢的功能齐全的界面！ 选择您需要的布局和组件并对其进行自定义，以使您的设计一致且引人注目。 每个组件的创建都注重细节，使您的界面美观！ 给我演示\n  RPA-Python  点击查看rpa项目网站   RPA是英文机器人处理自动化（Robotic Process Automation）的简称。日常生活中有很多重复性的工作可以通过自动化脚本或软件实现。 我想起来大洋彼岸一位程序员。每次他的工作总是超额完成，多次在公司受到老板的表扬和提薪。\n知乎上有个类似的话题，\n 点击查看rpa项目网站   ","permalink":"/blog/techweekly14/","summary":"点击上方图片购买课程   LoveIt https://github.com/dillonzq/LoveIt\n比现在我用的PaperMod更简洁美观的hugo主题\n 点击上方图片,查看案例网站   DataWrapper https://www.datawrapper.de/\n可视化工具网站，操作简洁，好用\n 点击查看网站   frappe https://github.com/frappe/frappe\n消除 97.42%* 的软件开发工作\n 点击查看网站   Parrot_Paraphraser 每年上半年都是毕业季，学生都会为论文降重倍感煎熬。\n一个实用且功能丰富的句子改写（可以将低英文论文重复率）框架，以文本形式增强人类意图，为会话引擎构建健壮的 NLU 模型。 由 Prithiviraj Damodaran 创建。\nfrom parrot import Parrot import torch import warnings warnings.filterwarnings(\u0026#34;ignore\u0026#34;) \u0026#39;\u0026#39;\u0026#39; uncomment to get reproducable paraphrase generations def random_state(seed): torch.manual_seed(seed) if torch.cuda.is_available(): torch.cuda.manual_seed_all(seed) random_state(1234) \u0026#39;\u0026#39;\u0026#39; #Init models (make sure you init ONLY once if you integrate this to your code) parrot = Parrot(model_tag=\u0026#34;prithivida/parrot_paraphraser_on_T5\u0026#34;) phrases = [\u0026#34;Can you recommed some upscale restaurants in Newyork?","title":"TechWeekly-14 每周有趣有用的技术分享"},{"content":"如何辨别出开悟的人？ 闲来无事，刷到讲开悟的视频， 里面提到智慧与记忆的关系。\n 开悟的人（有智慧的人）与普通人都有喜怒哀乐、七情六欲。在视频中，萨古鲁在这个[视频](https://www.bilibili.com/video/BV1np4y187AF)里分享了为什么很多人无法开悟。 太多的人因为年龄和经历的增长滋生傲慢，本质上这类行为隐含假设是【把记忆错当智慧】，他们习以为常，把记忆形成的惯性当做智慧，认为反惯性就是愚蠢的反智慧的。\n男人和女人吃同样的食物，男人不会变成女人，女人不会变成男人。猴子和人吃同样的食物，人不会变成猴子，猴子不会变成人。可见，我们的身体拥有记忆。其实我们的记忆有生命记忆，基因记忆，元素记忆，原子记忆；有意识、无意识层面上的记忆；言辞上和非言辞上的记忆，我们本身就是记忆的集合体。\n开悟的人，与普通人的区别是，摆脱肉体记忆对意识的影响，能够就是论事，实事求是，而不流于窠臼默守陈规。\n启示 大家都说保守不好，有好奇心拥抱变化是好的，但自己胆子小，讨厌变化，不愿意离开舒适区。\n今天看到的这个视频，让我站在更高的位置看透自己过往，自己的过往是记忆而不是智慧，不要把自己所有的记忆惯性应用于当下的问题。\n 做人要勤于思考，听得住他人劝，吸取有益合理的成分。 做事也要勤于思考，要认识事物的本来（本质），套用太祖的智慧“实事求是”。 给别人讲道理，尽量不要加个人断言，因为这样会掺杂很多记忆，容易让听者感到自己的三观被蹂躏践踏，最好能讲事物的本来（本质）。   点击上方图片购买课程   ","permalink":"/blog/about_wisdom/","summary":"如何辨别出开悟的人？ 闲来无事，刷到讲开悟的视频， 里面提到智慧与记忆的关系。\n 开悟的人（有智慧的人）与普通人都有喜怒哀乐、七情六欲。在视频中，萨古鲁在这个[视频](https://www.bilibili.com/video/BV1np4y187AF)里分享了为什么很多人无法开悟。 太多的人因为年龄和经历的增长滋生傲慢，本质上这类行为隐含假设是【把记忆错当智慧】，他们习以为常，把记忆形成的惯性当做智慧，认为反惯性就是愚蠢的反智慧的。\n男人和女人吃同样的食物，男人不会变成女人，女人不会变成男人。猴子和人吃同样的食物，人不会变成猴子，猴子不会变成人。可见，我们的身体拥有记忆。其实我们的记忆有生命记忆，基因记忆，元素记忆，原子记忆；有意识、无意识层面上的记忆；言辞上和非言辞上的记忆，我们本身就是记忆的集合体。\n开悟的人，与普通人的区别是，摆脱肉体记忆对意识的影响，能够就是论事，实事求是，而不流于窠臼默守陈规。\n启示 大家都说保守不好，有好奇心拥抱变化是好的，但自己胆子小，讨厌变化，不愿意离开舒适区。\n今天看到的这个视频，让我站在更高的位置看透自己过往，自己的过往是记忆而不是智慧，不要把自己所有的记忆惯性应用于当下的问题。\n 做人要勤于思考，听得住他人劝，吸取有益合理的成分。 做事也要勤于思考，要认识事物的本来（本质），套用太祖的智慧“实事求是”。 给别人讲道理，尽量不要加个人断言，因为这样会掺杂很多记忆，容易让听者感到自己的三观被蹂躏践踏，最好能讲事物的本来（本质）。   点击上方图片购买课程   ","title":"如何辨别出开悟的人？"},{"content":"问题场景 当遇到特别大的csv文件，例如500M，pandas读取会很慢，在之前教程中要使用其他包另类的语法。现在只需更新pandas，加一个参数即可。\n在本文中，我们将介绍：\n Pandas 的默认 CSV读数据， v1.4 中引入的更快、更并行的 CSV解析器。 一种不同的方法可以使事情变得更快。 读取 CSV，默认方式  碰巧有一个 850MB 的 CSV 文件，这是使用 Pandas 加载它的默认方式：\n## 更新pandas !pip3 install --upgrade pandas import pandas as pd df = pd.read_csv(\u0026#34;large.csv\u0026#34;) 下面是旧的pandas版本代码读数据所消耗时间\n0m13.245s\n使用pyarrow读csv 2022年1月份，刚刚发布的pandas1.4版本增加了arrow库的csv解析器。对了，该功能仍然处于试验阶段，不是默认解析器，但是足够快。下面是新版本用法\nimport pandas as pd df = pd.read_csv(\u0026#34;large.csv\u0026#34;, engine=\u0026#34;pyarrow\u0026#34;) 新版本代码读数据所消耗时间\n0m6.507s\n   CSV解析器 CPU运行时间     默认C 13.2s   PyArrow 6.5s    需要注意，如果你的数据分析项目已经使用了并行加速数据的读取，那么今天的新教程（pyarrow）并不会特别显著改善代码运行速度（十几倍加速），但至少可能提供有意义的加速（一倍左右）。\n重新思考 加载 CSV 基本上是一项繁重的工作：\n 需要分成几行。 需要用逗号分隔每一行。 需要处理字符串引用。 需要猜测（！）列的类型，除非您明确地将它们传递给 Pandas。 需要将字符串转换为整数、日期和其他非字符串类型。  所有这些都需要 CPU 时间。\n如果您从第三方获取 CSV，并且只处理一次，那么您对此无能为力。但是，如果您多次加载同一个 CSV 文件怎么办？或者，如果您是在数据处理管道的其他部分生成输入文件的人，该怎么办？\n您可以读取其他一些处理速度更快的文件格式，而不是读取 CSV。让我们看一个例子，使用 Parquet 数据格式。 Parquet 文件旨在快速读取：您不必像使用 CSV 那样进行大量解析。与 CSV 不同，其中列类型在文件读取时无需编码，在 Parquet 中，列的类型存储在实际文件中。\n首先，我们将 CSV 文件转换为 Parquet 文件；我们禁用压缩，因此我们正在与 CSV 进行更多的苹果对苹果的比较。当然，如果您是第一个生成文件的人，则不需要转换步骤，您可以直接将数据写入 Parquet。\nimport pandas as pd df = pd.read_csv(\u0026#34;large.csv\u0026#34;) df.to_parquet(\u0026#34;large.parquet\u0026#34;, compression=None) 现在我们的数据存在于large.parquet中，再读取large.parquet看看读取时间\nimport pandas as pd df = pd.read_parquet(\u0026#34;large.parquet\u0026#34;, engine=\u0026#34;fastparquet\u0026#34;) 2.441s\n   CSV解析器 CPU运行时间     默认C 13.2s   PyArrow 6.5s   fastparquet 2.4s    纯粹由 CPU 衡量，fastparquet 是迄今为止最快的。 这只是一个例子。 但显然阅读 Parquet 格式的效率要高得多。\n最好的文件格式不是 CSV CSV 是一种糟糕的格式。 除了解析效率低下之外，缺少类型数据意味着解析总是比具有实际列类型的结构化文件格式更容易出错和模棱两可。 因此，如果可以，请避免使用 CSV 并使用更好的格式，尽量选择其他高效类型，如 Parquet。\n如果你被 CSV 卡住了，考虑在 Pandas 1.4 中使用新的 PyArrow CSV 解析器； 你会得到很好的加速，特别是如果你的程序当前没有利用多个 CPU。\n 点击上方图片购买课程   ","permalink":"/blog/read_csv_fast_with_pandas/","summary":"问题场景 当遇到特别大的csv文件，例如500M，pandas读取会很慢，在之前教程中要使用其他包另类的语法。现在只需更新pandas，加一个参数即可。\n在本文中，我们将介绍：\n Pandas 的默认 CSV读数据， v1.4 中引入的更快、更并行的 CSV解析器。 一种不同的方法可以使事情变得更快。 读取 CSV，默认方式  碰巧有一个 850MB 的 CSV 文件，这是使用 Pandas 加载它的默认方式：\n## 更新pandas !pip3 install --upgrade pandas import pandas as pd df = pd.read_csv(\u0026#34;large.csv\u0026#34;) 下面是旧的pandas版本代码读数据所消耗时间\n0m13.245s\n使用pyarrow读csv 2022年1月份，刚刚发布的pandas1.4版本增加了arrow库的csv解析器。对了，该功能仍然处于试验阶段，不是默认解析器，但是足够快。下面是新版本用法\nimport pandas as pd df = pd.read_csv(\u0026#34;large.csv\u0026#34;, engine=\u0026#34;pyarrow\u0026#34;) 新版本代码读数据所消耗时间\n0m6.507s\n   CSV解析器 CPU运行时间     默认C 13.2s   PyArrow 6.5s    需要注意，如果你的数据分析项目已经使用了并行加速数据的读取，那么今天的新教程（pyarrow）并不会特别显著改善代码运行速度（十几倍加速），但至少可能提供有意义的加速（一倍左右）。\n重新思考 加载 CSV 基本上是一项繁重的工作：","title":""},{"content":" 点击上方图片购买课程   astro https://github.com/withastro/astro\n构建高加载速度的网站，访问更快\nfocalboard https://github.com/mattermost/focalboard\nfocalboard是开源，本地使用目管理工具，可作为Notion的替代产品使用。\ntabby https://github.com/Eugeny/tabby\nTabby 是一名老外在 Github 开源的终端连接的工具，至今已经累积 20K+ star。\n 支持多平台，Windows、MacOS（Intel 芯片/M1 芯片）、Linux 都有对应的安装包的； 自带 SFTP 功能，能够与 Linux 系统传输文件； 炫酷的终端页面，简单易用，以及各种插件支持等  Echarts https://echarts.apache.org/examples/zh/index.html\n百度开发的，基于 JavaScript 的开源可视化图表库\n 点击上方图片购买课程   ","permalink":"/blog/techweekly13/","summary":" 点击上方图片购买课程   astro https://github.com/withastro/astro\n构建高加载速度的网站，访问更快\nfocalboard https://github.com/mattermost/focalboard\nfocalboard是开源，本地使用目管理工具，可作为Notion的替代产品使用。\ntabby https://github.com/Eugeny/tabby\nTabby 是一名老外在 Github 开源的终端连接的工具，至今已经累积 20K+ star。\n 支持多平台，Windows、MacOS（Intel 芯片/M1 芯片）、Linux 都有对应的安装包的； 自带 SFTP 功能，能够与 Linux 系统传输文件； 炫酷的终端页面，简单易用，以及各种插件支持等  Echarts https://echarts.apache.org/examples/zh/index.html\n百度开发的，基于 JavaScript 的开源可视化图表库\n 点击上方图片购买课程   ","title":"TechWeekly-13 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   DatasetSearch https://datasetsearch.research.google.com/\n可以轻松地使用关键词搜索数据集。 此外，还可按日期，数据格式和使用权限等筛选条件过滤查询。\nKaggle 数据集 https://www.kaggle.com/datasets\nKaggle 是世界领先的平台，涉及所有数据科学相关的编程。允许用户查找和发布数据集，更具吸引力的是提供了其他人对该数据集的数据分析代码，可以通过案例化快速学习数据挖掘技术。\ndata.world https://data.world/\ndata.world是一个很少提及的集合。 它与Google数据集搜索引擎非常相似。\n当输入关键词查询时，它不仅显示数据集，还显示所需数据的子文件。 当查找诸如人口统计信息和地理位置集合之类的辅助数据时，强烈建议您使用\u0026quot;数据世界\u0026quot;。\nfivethirtyeight https://fivethirtyeight.com/\n著名数据分析网站名称538取自美国总统大选最后选举人团的538张选票，也就是决定总统选举结果的538票。\n该github项目存放了538网站大量的数据及分析代码。下面是538风格的可视化案例\ncongress-legislators https://github.com/unitedstates/congress-legislators\n美国国会议员，1789 年至今，采用 YAML/JSON/CSV 格式，以及委员会、总统和副总统。\nOpenAddresses https://github.com/openaddresses/openaddresses\n地址、地籍宗地和建筑足迹数据源的全球集合，开放且免费使用。\ndatasette https://github.com/simonw/datasette\nDatasette 是一个探索和发布数据的开源多功能工具。 可以帮助人们获取任何形状或大小的数据，并将其作为交互式、可探索的网站和随附的 API 发布。\n主要面向数据记者、博物馆馆长、档案管理员、地方政府、科学家、研究人员以及任何拥有希望与世界分享数据的人。\nLektor https://www.getlektor.com/\nLektor是一个静态网站生成器， 具有用于创建网站的**内容管理系统 (CMS) **和Web 框架功能。大多数静态站点生成器（例如Pelican、Hugo）都是以程序员为主要用户构建的。Lektor 试图通过提供类似于 Django 或 Wordpress 的管理面板来创建和更新站点内容，从而使非程序员更容易访问。\n","permalink":"/blog/techweekly12/","summary":"点击上方图片购买课程   DatasetSearch https://datasetsearch.research.google.com/\n可以轻松地使用关键词搜索数据集。 此外，还可按日期，数据格式和使用权限等筛选条件过滤查询。\nKaggle 数据集 https://www.kaggle.com/datasets\nKaggle 是世界领先的平台，涉及所有数据科学相关的编程。允许用户查找和发布数据集，更具吸引力的是提供了其他人对该数据集的数据分析代码，可以通过案例化快速学习数据挖掘技术。\ndata.world https://data.world/\ndata.world是一个很少提及的集合。 它与Google数据集搜索引擎非常相似。\n当输入关键词查询时，它不仅显示数据集，还显示所需数据的子文件。 当查找诸如人口统计信息和地理位置集合之类的辅助数据时，强烈建议您使用\u0026quot;数据世界\u0026quot;。\nfivethirtyeight https://fivethirtyeight.com/\n著名数据分析网站名称538取自美国总统大选最后选举人团的538张选票，也就是决定总统选举结果的538票。\n该github项目存放了538网站大量的数据及分析代码。下面是538风格的可视化案例\ncongress-legislators https://github.com/unitedstates/congress-legislators\n美国国会议员，1789 年至今，采用 YAML/JSON/CSV 格式，以及委员会、总统和副总统。\nOpenAddresses https://github.com/openaddresses/openaddresses\n地址、地籍宗地和建筑足迹数据源的全球集合，开放且免费使用。\ndatasette https://github.com/simonw/datasette\nDatasette 是一个探索和发布数据的开源多功能工具。 可以帮助人们获取任何形状或大小的数据，并将其作为交互式、可探索的网站和随附的 API 发布。\n主要面向数据记者、博物馆馆长、档案管理员、地方政府、科学家、研究人员以及任何拥有希望与世界分享数据的人。\nLektor https://www.getlektor.com/\nLektor是一个静态网站生成器， 具有用于创建网站的**内容管理系统 (CMS) **和Web 框架功能。大多数静态站点生成器（例如Pelican、Hugo）都是以程序员为主要用户构建的。Lektor 试图通过提供类似于 Django 或 Wordpress 的管理面板来创建和更新站点内容，从而使非程序员更容易访问。","title":"TechWeekly-12 每周有趣有用的技术分享"},{"content":"接到大姐任务，要每天给小外甥出10以内的加减法习题。我寻思了下，还是写代码生成测试习题方便。\n为了自己偷懒，把习题和答案都生成，做完了让娃自己检查，我只检查他有没有做题就行了^_^\nimport random from datetime import datetime #加、减模板 add_formula = \u0026#39;{a}+ {b}= {c}\u0026#39; sub_formula = \u0026#39;{a}- {b}= {c}\u0026#39; formulas = set() for i in range(50): a=random.randint(0, 10) b=random.randint(0, 10) formulas.add(add_formula.format(a=a, b=b, c=a+b)) if a\u0026gt;=b: #小外甥这个岁数没有负数的概念，需要满足a\u0026gt;=b的减法 formulas.add(sub_formula.format(a=a, b=b, c=a-b)) #习题去重且有序，方便做题后自己检查对错 formulas = list(formulas) #保存到加减md中，方便导出pdf month = datetime.today().month day = datetime.today().day with open(\u0026#39;加减.md\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(\u0026#39;## {month}月{day}号 加减运算\\n\u0026#39;.format(month=month, day=day)) for fm in formulas: f.write(fm.split(\u0026#39;= \u0026#39;)[0] + \u0026#39; =\\n\\n\\n\u0026#39;) with open(\u0026#39;加减答案.md\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(\u0026#39;## {month}月{day}号 加减运算\\n\u0026#39;.format(month=month, day=day)) for fm in formulas: f.write(fm + \u0026#39;\\n\\n\u0026#39;) 然后共享到ipad内，刚刚开心了半个小时，小外甥做了10道题不到，我的pencil二代就完犊子了~~~~~\n 点击上方图片购买课程   ","permalink":"/blog/math_add_sub/","summary":"接到大姐任务，要每天给小外甥出10以内的加减法习题。我寻思了下，还是写代码生成测试习题方便。\n为了自己偷懒，把习题和答案都生成，做完了让娃自己检查，我只检查他有没有做题就行了^_^\nimport random from datetime import datetime #加、减模板 add_formula = \u0026#39;{a}+ {b}= {c}\u0026#39; sub_formula = \u0026#39;{a}- {b}= {c}\u0026#39; formulas = set() for i in range(50): a=random.randint(0, 10) b=random.randint(0, 10) formulas.add(add_formula.format(a=a, b=b, c=a+b)) if a\u0026gt;=b: #小外甥这个岁数没有负数的概念，需要满足a\u0026gt;=b的减法 formulas.add(sub_formula.format(a=a, b=b, c=a-b)) #习题去重且有序，方便做题后自己检查对错 formulas = list(formulas) #保存到加减md中，方便导出pdf month = datetime.today().month day = datetime.today().day with open(\u0026#39;加减.md\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(\u0026#39;## {month}月{day}号 加减运算\\n\u0026#39;.format(month=month, day=day)) for fm in formulas: f.write(fm.split(\u0026#39;= \u0026#39;)[0] + \u0026#39; =\\n\\n\\n\u0026#39;) with open(\u0026#39;加减答案.","title":"Python妙用|给小外甥生成10以内加减运算数学做作业"},{"content":" 点击上方图片购买课程   Python网络爬虫与文本分析 工作坊基本信息  2000元 2021年1月21-22日 小鹅通平台(线上直播） 每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑  报名咨询  17816181460（同微信）（汪老师） 单位：杭州国商智库信息技术服务有限公司 开户银行： 中国银行杭州大学城支行 银行账户：6232636200100260588  课程纲要  课程目标： 掌握Python语法、网络爬虫、文本分析、机器学习的核心知识点和分析思路 核心知识点： 爬虫原理及应用、 非结构化文本数据挖掘的思路及方法、机器学习应用等 环境配置: 安装anaconda，注意安装过程中勾选Add Anaconda to the system Path environment variable、Register Anaconda as the system python 3.x 课件资料： 本课程全部使用jupyter notebook文件作为课程课件，开课前会将代码数据等相关资料发给各位  课程特色  接地气： 以经管学术需求为导向， 将Python分为语法篇、采集数据篇、文本分析篇、机器学习篇四大部分 好理解： 知识点力求通俗易懂，少了晦涩的计算机术语，多了通俗易懂的使用场景和实战讲解 上手快： 所有知识点均有可重复使用的代码块，犹如一块块的积木，课后您可以根据分析需要，快速搭建出自己的Python代码  \n课程目录 在科学研究中，数据的获取及分析是最重要的也是最棘手的两个环节！\n在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题：\n 网络爬虫技术 解决 如何从网络世界中高效地 采集数据？ 文本分析技术 解决 如何从杂乱的文本数据中抽取文本信息(变量)？  \n一、Python语法入门  Python跟英语一样是一门语言 数据类型之字符串 数据类型之列表元组集合 数据类型之字典 数据类型之布尔值、None 逻辑语句(if\u0026amp;for\u0026amp;tryexcept) 列表推导式 理解函数 常用的内置函数 内置库os路径库 内置库csv文件库 常见错误汇总  二、数据采集  网络爬虫原理 寻找网址规律 获取网页-requests库 pyquery库解析html网页 案例 1：豆瓣/大众点评 json库解析json网页 案例 2： 知乎 案例 3： 百度地图POI地点检索 案例 4： 下载文档、多媒体文件 案例 5：上市公司定期报告pdf批量下载 简易爬虫库smartscraper（了解） 区分动态网站与静态网站  三、初识文本分析  文本分析在经管领域中的应用 读取文件中的数据(txt、xlsx、csv) 数据清洗re库-从文本中抽取姓名、年龄、电话、数字等各种信息 案例 6：将多个txt文件整理到一个excel中 jieba分词包 spacy包 案例 7：词频统计\u0026amp;制作词云图 案例 8：金融文本语调（正式、非正式）分析 案例 9： 扩展情感词典- 共现法 案例 10： 扩展情感词典- 词向量word2vec 案例 11： 文本情感分析 数据分析pandas库快速入门 案例 12：使用pandas对excel中的文本进行情感分析  四、机器学习与文本分析  了解机器学习 使用机器学习做文本分析的流程 scikit-learn机器学习库简介 文本特征工程-将文本转化为机器可处理的数字向量 认识词袋法、one-hot、tf-idf、word2vec 案例 13： 文本情感分析（带权重tf-idf\u0026amp;情感词典） 案例 14： 文本数据标注工具 案例 15： 在线评论文本分类 文本相似性计算 案例 15：使用文本相似性识别变化(政策连续性) 案例 16：Kmeans聚类算法 案例 17：LDA话题模型 案例 18：使用预训练BERT词向量模型做主题分析 案例 19: 识别图片中的文本 python爬虫、文本分析、机器学习等技术在论文中的应用赏析  工作坊基本信息  2000元 2021年1月21-22日 小鹅通平台(线上直播） 每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑  报名咨询  17816181460（同微信）（汪老师） 单位：杭州国商智库信息技术服务有限公司 开户银行： 中国银行杭州大学城支行 银行账户：6232636200100260588   点击上方图片购买课程   相关论文 参照论文的摘要，可以通过场景化等的方式帮助我们迅速理解上面两个问题。加粗内容是论文用到了python技术，在我们的课程中均有与之对应的知识点和代码。\n蔡庆丰,陈熠辉,林焜.信贷资源可得性与企业创新:激励还是抑制?——基于银行网点数据和金融地理结构的微观证据[J].经济研究,2020,v.55;No.637(10):124-140.\n 结合银行和企业的地理位置数据,运用Python编写的基于百度地图API的地理坐标匹配系统,获取上市公司办公地点周围的银行网点数量。\n 王伟,陈伟,祝效国,王洪伟.众筹融资成功率与语言风格的说服性——基于Kickstarter的实证研究[J].管理世界,2016(05):81-98.\n 摘要：众筹融资效果决定着众筹平台的兴衰。 众筹行为很大程度上是由投资者的主观因素决定的，而影响主观判断的一个重要因素就是语言的说服性。 而这又是一种典型的用 户产生内容（UGC），项目发起者可以采用任意类型的语言风格对项目进行描述。 不同的语 言风格会改变投资者对项目前景的感知，进而影响他们的投资意愿。 首先，依据 Aristotle 修 辞三元组以及 Hovland 说服模型，采用扎根理论，将众筹项目的语言说服风格分为 5 类：诉诸可信、诉诸情感、诉诸逻辑、诉诸回报和诉诸夸张。\n然后，借助文本挖掘方法，构建说服风格语料库，并对项目摘要进行分类。\n最后，建立语言说服风格对项目筹资影响的计量模型，并对 Kickstarter 平台上的 128345 个项目进行实证分析。 总体来说，由于项目性质的差异，不同 的项目类别对应于不同的最佳说服风格。\n 胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.\n 在可持续发展战略导向下，秉持长远理念是企业抵御外部环境威胁和拥有可持续经营能力的基 石。 然而，作为企业掌舵人的管理者并非都具有长远的目光。 本文基于高层梯队理论和社会心理学中的时间 导向理论，提出了管理者内在的短视主义特质与企业资本支出和研发支出的关系，并采用文本分析和机器学习技术构建出管理者短视主义指标从而对其进行实证检验。 研究结果发现，年报 MD\u0026amp;A 中披露的“短期视域” 语言 能够反映管理者内在的短视主义特质，管理者短视会导致企业减少资本支出和研发支出。 当公司治理水平、监督型机构投资者的持股比例以及分析师关注度越高时，管理者短视主义对这些长期投资的负向影响越易受到抑制。 最终，管理者短视主义导致的研发支出减少和资本投资效率降低会损害企业的未来绩效。 本文拓宽了管理者短视主义的行为后果分析，对企业高层次管理人才的聘任以及企业和政府的监管具有重要的实践启示。同时，本文将文本分析和机器学习方法引入管理者短视主义的研究，为未来该领域的研究提供了参考和借鉴。\n 姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.\n 金融文本的语调与情绪含有上市公司管理层以及个体投资者表达的情感信息 ， 并对股票市场产生影响 。 通过词典重组和深度学习算法构建了适用于正式文本 与 非正式文本的金融领域 中文情绪词典，并基于词典构建了上市公司的年报语调和社交媒体情绪指标构建的年报语调指标和社交媒体情绪指标能有效地预测上市公司股票的收益率 、成交量波动率和非预期盈余等市场因素 ， 并优于基于其他广泛使用情绪词典构建的指标。此外，年报语调指标和社交媒体情绪指标对上市公司的股价崩盘风险具有显著的预测作用。为文本大数据在金融市场的 应用提供了分析工具 ，也为大数据时代的金融市场预测和监管等活动提供了决策支持 。\n Wang, Quan, Beibei Li, and Param Vir Singh. \u0026ldquo;Copycats vs. original mobile apps: A machine learning copycat-detection method and empirical analysis.\u0026rdquo; Information Systems Research 29, no. 2 (2018): 273-291.\n 摘要: 尽管移动应用程序市场的增长为移动应用程序开发人员创新提供了巨大的市场机会和经济诱因，但它也不可避免地刺激了模仿者开发盗版软件。原始应用的从业人员和开发人员声称，模仿者窃取了原始应用的想法和潜在需求，并呼吁应用平台对此类模仿者采取行动。令人惊讶的是，很少有严格的研究来分析模仿者是否以及如何影响原始应用的需求。\n进行此类研究的主要威慑因素是缺乏一种客观的方法来识别应用程序是模仿者还是原创者。通过结合自然语言处理，潜在语义分析，基于网络的聚类和图像分析等机器学习技术，我们提出了一种将应用识别为原始或模仿者并检测两种模仿者的方法：欺骗性和非欺骗性。\n根据检测结果，我们进行了经济计量分析，以确定五年间在iOS App Store中发布的5,141个开发人员的10,100个动作游戏应用程序样本中，模仿应用程序对原始应用程序需求的影响。我们的结果表明，特定模仿者对原始应用需求的影响取决于模仿者的质量和欺骗程度。高质量的非欺骗性复制品会对原件产生负面影响。相比之下，低质量，欺骗性的模仿者正面影响了对原件的需求。\n结果表明，从总体上讲，模仿者对原始移动应用程序需求的影响在统计上是微不足道的。我们的研究通过提供一种识别模仿者的方法，并提供模仿者对原始应用需求的影响的证据，为越来越多的移动应用消费文献做出了贡献。\n  点击上方图片购买课程   相关论文汇总 [1]沈艳,陈赟,黄卓.文本大数据分析在经济学和金融学中的应用:一个文献综述[J].经济学(季刊),2019,18(04):1153-1186.\n[2]王伟,陈伟,祝效国,王洪伟. 众筹融资成功率与语言风格的说服性-基于Kickstarter的实证研究.管理世界.2016;5:81-98.\n[3]胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.\n[4]Kai Li, Feng Mai, Rui Shen, Xinyan Yan, Measuring Corporate Culture Using Machine Learning, The Review of Financial Studies,2020\n[5]Kenneth Benoit. July 16, 2019. “Text as Data: An Overview.” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. Handbook of Research Methods in Political Science and International Relations. Thousand Oaks: Sage.\n[6]Loughran T, McDonald B. Textual analysis in accounting and finance: A survey[J]. Journal of Accounting Research, 2016, 54(4): 1187-1230. Author links open overlay panelComputational socioeconomics\n[7]Berger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. \u0026ldquo;Uniting the tribes: Using text for marketing insight.\u0026rdquo; Journal of Marketing 84, no. 1 (2020): 1-25.\n[8]Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. \u0026ldquo;A review of best practice recommendations for text analysis in R (and a user-friendly app).\u0026rdquo; Journal of Business and Psychology 33, no. 4 (2018): 445-459.\n[9]Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. \u0026ldquo;Lazy prices.\u0026rdquo; The Journal of Finance 75, no. 3 (2020): 1371-1415.\n[10]孟庆斌, 杨俊华, 鲁冰. 管理层讨论与分析披露的信息含量与股价崩盘风险——基于文本向量化方法的研究[J]. 中国工业经济, 2017 (12): 132-150.\n[11]Wang, Quan, Beibei Li, and Param Vir Singh. \u0026ldquo;Copycats vs. Original Mobile Apps: A Machine Learning Copycat-Detection Method and Empirical Analysis.\u0026rdquo; Information Systems Research 29.2 (2018): 273-291.\n[12]Hoberg, Gerard, and Gordon Phillips. 2016, Text-based network industries and endogenous product differentiation,?Journal of Political Economy 124, 1423-1465\n[13]Loughran, Tim, and Bill McDonald. \u0026ldquo;When is a liability not a liability? Textual analysis, dictionaries, and 10‐Ks.\u0026rdquo; The Journal of Finance 66, no. 1 (2011): 35-65.\n[14]Fairclough, Norman. 2003. Analysing discourse: Textual analysis for social research (Psychology Press)\n[15]Grimmer, Justin, and Brandon M Stewart. 2013, Text as data: The promise and pitfalls of automatic content analysis methods for political texts, Political analysis21, 267-297.\n[16]Bollen, Johan, et al. \u0026ldquo;Historical language records reveal a surge of cognitive distortions in recent decades.\u0026rdquo; Proceedings of the National Academy of Sciences 118.30 (2021).\n[17]Markowitz, D. M., \u0026amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).\n[18]Bail, Christopher Andrew. \u0026ldquo;Combining natural language processing and network analysis to examine how advocacy organizations stimulate conversation on social media.\u0026rdquo; Proceedings of the National Academy of Sciences 113, no. 42 (2016): 11823-11828.\n[19]姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.\n","permalink":"/blog/2022workshop/","summary":"点击上方图片购买课程   Python网络爬虫与文本分析 工作坊基本信息  2000元 2021年1月21-22日 小鹅通平台(线上直播） 每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑  报名咨询  17816181460（同微信）（汪老师） 单位：杭州国商智库信息技术服务有限公司 开户银行： 中国银行杭州大学城支行 银行账户：6232636200100260588  课程纲要  课程目标： 掌握Python语法、网络爬虫、文本分析、机器学习的核心知识点和分析思路 核心知识点： 爬虫原理及应用、 非结构化文本数据挖掘的思路及方法、机器学习应用等 环境配置: 安装anaconda，注意安装过程中勾选Add Anaconda to the system Path environment variable、Register Anaconda as the system python 3.x 课件资料： 本课程全部使用jupyter notebook文件作为课程课件，开课前会将代码数据等相关资料发给各位  课程特色  接地气： 以经管学术需求为导向， 将Python分为语法篇、采集数据篇、文本分析篇、机器学习篇四大部分 好理解： 知识点力求通俗易懂，少了晦涩的计算机术语，多了通俗易懂的使用场景和实战讲解 上手快： 所有知识点均有可重复使用的代码块，犹如一块块的积木，课后您可以根据分析需要，快速搭建出自己的Python代码  \n课程目录 在科学研究中，数据的获取及分析是最重要的也是最棘手的两个环节！\n在前大数据时代，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题：\n 网络爬虫技术 解决 如何从网络世界中高效地 采集数据？ 文本分析技术 解决 如何从杂乱的文本数据中抽取文本信息(变量)？","title":"即将开班 | 2022Python数据挖掘寒假工作坊"},{"content":" 点击上方图片购买课程   用于从各种网站下载图像/视频/音乐/文本等的桌面实用程序。\n下载安装 App版，仅支持Win\nhttps://github.com/KurtBestor/Hitomi-Downloader/releases/tag/v3.7h Chrome浏览器插件\nhttps://github.com/KurtBestor/Hitomi-Downloader/wiki/Chrome-Extension\n操作演示 功能特色  🍰 简洁用户接口 🚀 加速下载 📜 支持用户diy脚本 🧲 支持BitTorrent \u0026amp; Magnet 🎞️ 支持 M3U8 \u0026amp; MPD 格式视频下载  支持的站点Sites    Site URL     AfreecaTV https://afreecatv.com   ArtStation https://artstation.com   AsianSister https://asiansister.com   AsmHentai https://asmhentai.com   Avgle https://avgle.com   baraag.net https://baraag.net   半次元 https://bcy.net   BDSMlr https://bdsmlr.com   bilibili https://bilibili.com   ComicWalker https://comic-walker.com   Coub https://coub.com   Danbooru https://danbooru.donmai.us   Kakao Webtoon http://webtoon.kakao.com   DeviantArt https://deviantart.com   E(x)Hentai Galleries https://e-hentai.org\nhttps://exhentai.org   Facebook https://facebook.com   FC2 Video https://video.fc2.com   Flickr https://flickr.com   Gelbooru https://gelbooru.com   Hameln https://syosetu.org   hanime.tv https://hanime.tv   Hentai Foundry https://hentai-foundry.com   Hitomi.la https://hitomi.la   Hiyobi.me https://hiyobi.me   Imgur https://imgur.com   Instagram https://instagram.com   Iwara https://iwara.tv\nhttps://ecchi.iwara.tv   Jmana https://jmana.net   カクヨム https://kakuyomu.jp   LHScan https://loveheaven.net   Likee https://likee.video   Luscious https://luscious.net   MyReadingManga https://myreadingmanga.info   Naver Blog https://blog.naver.com   Naver Post https://post.naver.com   Naver Webtoon https://comic.naver.com   Naver TV https://tv.naver.com   nhentai https://nhentai.net   nhentai.com https://nhentai.com   Niconico http://nicovideo.jp   ニジエ https://nijie.info   Pawoo https://pawoo.net   Pinterest https://pinterest.com   Pixiv https://pixiv.net   pixivコミック https://comic.pixiv.net   Pornhub https://pornhub.com\nhttps://pornhubpremium.com   Rule34.xxx https://rule34.xxx   Sankaku Complex https://www.sankakucomplex.com\nhttps://chan.sankakucomplex.com\nhttps://idol.sankakucomplex.com   Soundcloud https://soundcloud.com   小説家になろう https://syosetu.com   TOKYO Motion https://tokyomotion.net   Tumblr https://tumblr.com   Twitch https://twitch.tv   Twitter https://twitter.com   Vimeo https://vimeo.com   V LIVE https://vlive.tv   Weibo https://weibo.com   WikiArt https://www.wikiart.org   xHamster https://xhamster.com   XNXX https://xnxx.com   XVideos https://xvideos.com   Yande.re https://yande.re   Youku https://youku.com   YouTube https://youtube.com   and more\u0026hellip; [Supported sites by youtube-dl](http://ytdl-org.github.io/youtube-dl/supportedsites.html    ","permalink":"/blog/hitomi-downloader/","summary":"点击上方图片购买课程   用于从各种网站下载图像/视频/音乐/文本等的桌面实用程序。\n下载安装 App版，仅支持Win\nhttps://github.com/KurtBestor/Hitomi-Downloader/releases/tag/v3.7h Chrome浏览器插件\nhttps://github.com/KurtBestor/Hitomi-Downloader/wiki/Chrome-Extension\n操作演示 功能特色  🍰 简洁用户接口 🚀 加速下载 📜 支持用户diy脚本 🧲 支持BitTorrent \u0026amp; Magnet 🎞️ 支持 M3U8 \u0026amp; MPD 格式视频下载  支持的站点Sites    Site URL     AfreecaTV https://afreecatv.com   ArtStation https://artstation.com   AsianSister https://asiansister.com   AsmHentai https://asmhentai.com   Avgle https://avgle.com   baraag.net https://baraag.net   半次元 https://bcy.net   BDSMlr https://bdsmlr.com   bilibili https://bilibili.","title":"Hitomi|下载图像/视频/音乐/文本等的桌面实用程序"},{"content":" 点击上方图片购买课程   目前博客有以下几个功能特色\n Hugo 框架建站 PaperMod网站主题风格 MkDocs 生成技术文档 utterances 留言功能 浏览器首页 学术浏览器首页  网站仓库 博客的所有代码文件存储于hiDaDeng/hidadeng.github.io。大家如果想爬大邓的博客，速度还是太慢，可以直接从这里下载项目。 主题风格 博客之前换过很多种主题，有商务风、极客风，最后发现还是简单最好。而PaperMod不止简洁，还支持标签、搜索等功能。 技术文档 大邓课程培训Python快速入门基础教程，使用MkDocs框架生成技术文档，界面如图 留言功能 博客使用utterances调用github仓库资源，用于存储评论数据。评论系统有点慢，需要先有github账户才可以使用。日常大家如果对Python感兴趣，有什么好的想法、资料，欢迎在博客中留言。 学术浏览器首页 如果你也是经管背景，对Python感兴趣，可以点击收藏该学术首页\n如果想生成自己学科的学术首页，可以点击制作方法查看diy详情\n 点击上方图片购买课程   ","permalink":"/blog/blogcomments/","summary":" 点击上方图片购买课程   目前博客有以下几个功能特色\n Hugo 框架建站 PaperMod网站主题风格 MkDocs 生成技术文档 utterances 留言功能 浏览器首页 学术浏览器首页  网站仓库 博客的所有代码文件存储于hiDaDeng/hidadeng.github.io。大家如果想爬大邓的博客，速度还是太慢，可以直接从这里下载项目。 主题风格 博客之前换过很多种主题，有商务风、极客风，最后发现还是简单最好。而PaperMod不止简洁，还支持标签、搜索等功能。 技术文档 大邓课程培训Python快速入门基础教程，使用MkDocs框架生成技术文档，界面如图 留言功能 博客使用utterances调用github仓库资源，用于存储评论数据。评论系统有点慢，需要先有github账户才可以使用。日常大家如果对Python感兴趣，有什么好的想法、资料，欢迎在博客中留言。 学术浏览器首页 如果你也是经管背景，对Python感兴趣，可以点击收藏该学术首页\n如果想生成自己学科的学术首页，可以点击制作方法查看diy详情\n 点击上方图片购买课程   ","title":"博客已更新，现支持留言功能"},{"content":" 点击上方图片购买课程   doing_the_PhD https://github.com/shengyp/doing_the_PhD\n作者认为，博士旅程是一段围绕个人认知、能力与身心而开展的难得的修行。在这当中，内涵丰富、切实有效的指导性资源有益于将博士生们的独孤求索旅程带入新的境地，使其能够更有准备，更加勇敢，更持有信心地去面对随读博选择而伴生的不同研究任务与多方面的挑战，最终得以迭代升级，顺利修行。\n作者将上述提到的指导性资源划分为： [高考模式]、 [中美教育]、 [自救指南]、 [科学问题]、 [一个执着的决定]、 [如何开个好头]、 [好的研究想法如何产生]、 [如何读论文]、 [如何做实验]、 [如何写论文]、 [ArXiv]、 [如何投论文]、 [如何做Rebuttal]、 [如何审论文]、 [同行评审]、 [审稿状态]、 [如何做报告]、 [顶会存在的意义]、 [博士生的导师]、 [读博期间]、 [延期毕业问题]、 [博士学位的重要性]、 [博士学位论文]、 [学位论文答辩]、 [学位论文致谢]、 [毕业典礼]、 [高校排行榜]、 [名校光环]、 [学术界和工业界]、 [博士婚姻研究]、 [AI论文调研]、 [中文期刊]、 [期刊评价]、 [科研政策]、 [科研经费管理]、 [导师招生神奇要求]、 [我国博士研究生累积招生情况]、 [我国博士研究生培养结构]、 [有多“内卷”]、 [科研故事]、 [大厂经历]、 [灵魂拷问]、 [被博士后割韭菜了没]、 [洋博士们]、 [谁说科学没有国界]、 [毕业生的去向]、 [如何指导学生]、 [青椒的苦恼]、 [贤内助]、 [科技成果评价]、 [高校岗位设置与评价体制]、 [国家自然科学基金]、 [国家重点研发计划]、 [重大研究计划]、 [国家科技部政策]、 [重庆市科技政策]、 [教师法]、 [教师待遇]、 [谨慎破除“唯论文”现象]、 [把论文写在祖国大地上]、 [这些事不干]、 [毛主席话语]、 [严正声明]、 [症状]、 [英才陨落]、 [海里游荡]数个主题，期待更多的研究人员关注并给予建议。\nslidev https://cn.sli.dev/guide/why.html\n为开发者打造的演示文稿工具;Slidev 通过分离内容和视觉效果来弥补这一点。这使你能够一次专注于一件事，同时也能够重复使用社区中的主题。Slidev 并不寻求完全取代其他幻灯片制作工具。相反，它专注于迎合开发者社区的需求。\nbig_screen https://github.com/TurboWay/big_screen\n数据大屏可视化\n构建我的被动收入 https://www.bmpi.dev/\n博客主题是实现被动收入博主定下现在用25w长期投资15年达到200w；\n博主自己是全栈技术流，之前有金融行业从业经历。最惊艳的是博主的被动收入公式\n终身学习（认知杠杆）* 全栈技术（时间杠杆）* 投资理财（财务杠杆） =\u0026gt; 被动收入（人生杠杆） china_area_mysql https://github.com/kakuilan/china_area_mysql\n中国5级行政区域mysql库;\n全部共 758049 条\n 大陆数据共679237 条,其中  省/直辖市 31 市/州 342 县/区 3348 乡/镇 42757 村/社区 632759   港澳台数据共78812 条,其中  省/特区 3 港澳辖区 33 台湾市/县 23 台湾区/镇 371 台湾街道/村 78384    表结构 CREATETABLE`cnarea_2020`(`id`mediumint(7)unsignedNOTNULLAUTO_INCREMENT,`level`tinyint(1)unsignedNOTNULLCOMMENT\u0026#39;层级\u0026#39;,`parent_code`bigint(14)unsignedNOTNULLDEFAULT\u0026#39;0\u0026#39;COMMENT\u0026#39;父级行政代码\u0026#39;,`area_code`bigint(14)unsignedNOTNULLDEFAULT\u0026#39;0\u0026#39;COMMENT\u0026#39;行政代码\u0026#39;,`zip_code`mediumint(6)unsignedzerofillNOTNULLDEFAULT\u0026#39;000000\u0026#39;COMMENT\u0026#39;邮政编码\u0026#39;,`city_code`char(6)NOTNULLDEFAULT\u0026#39;\u0026#39;COMMENT\u0026#39;区号\u0026#39;,`name`varchar(50)NOTNULLDEFAULT\u0026#39;\u0026#39;COMMENT\u0026#39;名称\u0026#39;,`short_name`varchar(50)NOTNULLDEFAULT\u0026#39;\u0026#39;COMMENT\u0026#39;简称\u0026#39;,`merger_name`varchar(50)NOTNULLDEFAULT\u0026#39;\u0026#39;COMMENT\u0026#39;组合名\u0026#39;,`pinyin`varchar(30)NOTNULLDEFAULT\u0026#39;\u0026#39;COMMENT\u0026#39;拼音\u0026#39;,`lng`decimal(10,6)NOTNULLDEFAULT\u0026#39;0.000000\u0026#39;COMMENT\u0026#39;经度\u0026#39;,`lat`decimal(10,6)NOTNULLDEFAULT\u0026#39;0.000000\u0026#39;COMMENT\u0026#39;纬度\u0026#39;,PRIMARYKEY(`id`),UNIQUEKEY`uk_code`(`area_code`)USINGBTREE,KEY`idx_parent_code`(`parent_code`)USINGBTREE)ENGINE=MyISAMDEFAULTCHARSET=utf8COMMENT=\u0026#39;中国行政地区表\u0026#39;;\nmdvideo https://github.com/linqian02/mdvideo\nMDvideo，是一个桌面软件，自动将 Markdown 文档转成一段视频。 文档里面的视频、音频、图片网址，都会抓取后插入视频，还可以根据文字生成人工语音的旁白朗读。\nTR-Reading-List https://github.com/blcuicall/TR-Reading-List\n中英文文本可读性论文\u0026amp;工具列表\nawesome-seo https://github.com/madawei2699/awesome-seo\n不定期更新Google SEO学习及实战技术\n程序员应该访问的最佳网站中文版 https://github.com/tuteng/Best-websites-a-programmer-should-visit-zh\n在学习CS的时候有一些你必须知道的有用的站点来获取通知为了你的技术储备和学习新知识。这里是一个你应该访问的不是非常全面的一些站点的列表，这个列表会不断更新，只要我能得到链接，你也可以通过添加你知道的来为此做出贡献\nPersonGraphDataSet https://github.com/liuhuanyong/PersonGraphDataSet\n人物图谱数据集，近十万的人物关系图谱事实数据库，通过人物关系抽取算法抽取+人工整理得出，可用于人物关系搜索、查询、人物关系多跳问答，以及人物关系推理等场景提供基础数据。\nChainKnowledgeGraph https://github.com/liuhuanyong/ChainKnowledgeGraph\n产业链知识图谱包括A股上市公司、行业和产品共3类实体，包括上市公司所属行业关系、行业上级关系、产品上游原材料关系、产品下游产品关系、公司主营产品、产品小类共6大类。 上市公司4,654家，行业511个，产品95,559条、上游材料56,824条，上级行业480条，下游产品390条，产品小类52,937条，所属行业3,946条。\nEmail-newsletter-RSS https://github.com/alaskasquirrel/Email-newsletter-RSS\n邮箱 📧 newsletter RSS 荟萃\nnewsletter-list https://github.com/chasays/newsletter-list\n有趣，免费的 newsletter\nWorkingTime https://github.com/Robin970822/WorkingTime\n中国民间程序员自行搭建的作息数据平台，可了解各行业从业者的作息时间。\nSVG https://svgporn.com/\nSVG 意为可缩放矢量图形（Scalable Vector Graphics）,在放大或改变尺寸的情况下其图形质量不会有所损失。\n这个网站有常用的svg logo可供下载\n","permalink":"/blog/techweekly11/","summary":"点击上方图片购买课程   doing_the_PhD https://github.com/shengyp/doing_the_PhD\n作者认为，博士旅程是一段围绕个人认知、能力与身心而开展的难得的修行。在这当中，内涵丰富、切实有效的指导性资源有益于将博士生们的独孤求索旅程带入新的境地，使其能够更有准备，更加勇敢，更持有信心地去面对随读博选择而伴生的不同研究任务与多方面的挑战，最终得以迭代升级，顺利修行。\n作者将上述提到的指导性资源划分为： [高考模式]、 [中美教育]、 [自救指南]、 [科学问题]、 [一个执着的决定]、 [如何开个好头]、 [好的研究想法如何产生]、 [如何读论文]、 [如何做实验]、 [如何写论文]、 [ArXiv]、 [如何投论文]、 [如何做Rebuttal]、 [如何审论文]、 [同行评审]、 [审稿状态]、 [如何做报告]、 [顶会存在的意义]、 [博士生的导师]、 [读博期间]、 [延期毕业问题]、 [博士学位的重要性]、 [博士学位论文]、 [学位论文答辩]、 [学位论文致谢]、 [毕业典礼]、 [高校排行榜]、 [名校光环]、 [学术界和工业界]、 [博士婚姻研究]、 [AI论文调研]、 [中文期刊]、 [期刊评价]、 [科研政策]、 [科研经费管理]、 [导师招生神奇要求]、 [我国博士研究生累积招生情况]、 [我国博士研究生培养结构]、 [有多“内卷”]、 [科研故事]、 [大厂经历]、 [灵魂拷问]、 [被博士后割韭菜了没]、 [洋博士们]、 [谁说科学没有国界]、 [毕业生的去向]、 [如何指导学生]、 [青椒的苦恼]、 [贤内助]、 [科技成果评价]、 [高校岗位设置与评价体制]、 [国家自然科学基金]、 [国家重点研发计划]、 [重大研究计划]、 [国家科技部政策]、 [重庆市科技政策]、 [教师法]、 [教师待遇]、 [谨慎破除“唯论文”现象]、 [把论文写在祖国大地上]、 [这些事不干]、 [毛主席话语]、 [严正声明]、 [症状]、 [英才陨落]、 [海里游荡]数个主题，期待更多的研究人员关注并给予建议。","title":"TechWeekly-11| 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程    src: https://mp.weixin.qq.com/s/irYCS5gQVNu9vidqMy-WJA\n 有些时候，为了设定手机铃声或者发抖音视频，我们会耗费大量时间在剪辑音乐高潮部分上。那么这个音乐高潮的提取能不能自动化呢？当然可以。\n先来听听效果，孤芳自赏提取高潮后的部分：\n怎么样，是不是迫不及待想往下读了？不要急，让我们从原理开始慢慢讲起。\n原理简介 不知道大家有没有这样的体会，大部分时候，歌曲的高潮部分通常是重复次数最多的部分。因此我们可以根据这一个特征，提出我们的算法：\n 遍历整首歌曲。 将选定长度的部分与其他部分比较并计算相似度，以查看是否重复。 寻找重复次数较大、且间隔长的片段。  代码编写 为了避免造轮子，我们找到了别人已经做过的类似的项目：https://github.com/vivjay30/pychorus\n我们只需要分析这个源代码中最核心的部分，即求相似区段的源代码，就能知道它是不是符合我们的项目需求了：\n可以看到，这部分代码就是做了我们算法的第二步，进行了片段与片段之间的相似度计算。检测时用到的相似函数是这样的：\n这主要是因为歌曲由12个基本音符的帧的集合而组成，v1和v2是任意两段音乐的音符矢量，如果说两段音乐非常相似，那么右边的式子将接近于0. 如果说 1-右边的式子 得分非常高，则说明两段音乐非常相似。\n下面我们看看怎么使用这个项目求音乐高潮部分，其实非常简单。\n安装 pip3 install pychorus \n编写代码 实际上，这个包用起来可是相当简单，如果我们只是想单纯提取歌曲高潮部分：\nfrom pychorus import find_and_output_chorus chorus_start_sec = find_and_output_chorus(\u0026#34;你的音乐文件\u0026#34;, \u0026#34;提取结果的目标路径\u0026#34;, 要多少秒的高潮部分) 没错，两行代码就解决了。如果你想知道一些详细的细节，比如说输出相似矩阵或者结果可视化，建议阅读github中该项目的操作指令。下面让我们检验一下效果。\n效果检验 以《孤芳自赏》 为例，让我们试试这个提取器的功力。\n原曲：\n编写代码：\n# 提取音乐高潮部分 from pychorus import find_and_output_chorus input_file = \u0026#34;孤芳自赏.mp3\u0026#34; output_file = \u0026#34;孤芳自赏_high.wav\u0026#34; clip_length=40 chorus_start_sec = find_and_output_chorus(input_file, output_file, clip_length) ","permalink":"/blog/pychorus/","summary":" 点击上方图片购买课程    src: https://mp.weixin.qq.com/s/irYCS5gQVNu9vidqMy-WJA\n 有些时候，为了设定手机铃声或者发抖音视频，我们会耗费大量时间在剪辑音乐高潮部分上。那么这个音乐高潮的提取能不能自动化呢？当然可以。\n先来听听效果，孤芳自赏提取高潮后的部分：\n怎么样，是不是迫不及待想往下读了？不要急，让我们从原理开始慢慢讲起。\n原理简介 不知道大家有没有这样的体会，大部分时候，歌曲的高潮部分通常是重复次数最多的部分。因此我们可以根据这一个特征，提出我们的算法：\n 遍历整首歌曲。 将选定长度的部分与其他部分比较并计算相似度，以查看是否重复。 寻找重复次数较大、且间隔长的片段。  代码编写 为了避免造轮子，我们找到了别人已经做过的类似的项目：https://github.com/vivjay30/pychorus\n我们只需要分析这个源代码中最核心的部分，即求相似区段的源代码，就能知道它是不是符合我们的项目需求了：\n可以看到，这部分代码就是做了我们算法的第二步，进行了片段与片段之间的相似度计算。检测时用到的相似函数是这样的：\n这主要是因为歌曲由12个基本音符的帧的集合而组成，v1和v2是任意两段音乐的音符矢量，如果说两段音乐非常相似，那么右边的式子将接近于0. 如果说 1-右边的式子 得分非常高，则说明两段音乐非常相似。\n下面我们看看怎么使用这个项目求音乐高潮部分，其实非常简单。\n安装 pip3 install pychorus \n编写代码 实际上，这个包用起来可是相当简单，如果我们只是想单纯提取歌曲高潮部分：\nfrom pychorus import find_and_output_chorus chorus_start_sec = find_and_output_chorus(\u0026#34;你的音乐文件\u0026#34;, \u0026#34;提取结果的目标路径\u0026#34;, 要多少秒的高潮部分) 没错，两行代码就解决了。如果你想知道一些详细的细节，比如说输出相似矩阵或者结果可视化，建议阅读github中该项目的操作指令。下面让我们检验一下效果。\n效果检验 以《孤芳自赏》 为例，让我们试试这个提取器的功力。\n原曲：\n编写代码：\n# 提取音乐高潮部分 from pychorus import find_and_output_chorus input_file = \u0026#34;孤芳自赏.mp3\u0026#34; output_file = \u0026#34;孤芳自赏_high.wav\u0026#34; clip_length=40 chorus_start_sec = find_and_output_chorus(input_file, output_file, clip_length) ","title":"pychorus | 3行代码提取音乐高潮部分"},{"content":" 点击上方图片购买课程   用于读取和写入图像数据的 Python 库；\nImageio 提供了一系列 example images，可以通过使用 \u0026lsquo;\u0026lsquo;imageio:chelsea.png\u0026rsquo;\u0026rsquo; 之类的 URI 来使用。 如果您的系统上尚不存在这些图像，则会自动下载这些图像。 因此，下面的大多数示例应该可以正常工作。\n读取图片 最常用的读取图片功能\nimport imageio as iio im = iio.imread(\u0026#39;imageio:chelsea.png\u0026#39;) print(im.shape) 如果图片文件是gif动图(gif是由多个静态图片组成的动图)\nimport imageio as iio im = iio.get_reader(\u0026#39;cat.gif\u0026#39;) for frame in im: print(frame.shape) # Each frame is a numpy matrix 如果gif存储于内存中（二进制数）\nimport imageio as iio #image_bytes二进制数据 im = iio.get_reader(image_bytes, \u0026#39;.gif\u0026#39;) 读取网图 Imageio可以从文件名、文件对象、zip压缩文件夹、字节流、图片链接中读取图片\nimport imageio as iio import visvis as vv im = iio.imread(\u0026#39;http://upload.wikimedia.org/wikipedia/commons/d/de/Wikipedia_Logo_1.0.png\u0026#39;) vv.imshow(im)  注意: 有时候代码运行不出结果，可以尝试 imageio.imread(imageio.core.urlopen(url).read(), '.gif').\n 读取文件夹中的图片 一种常见的情况是您想要读取文件夹中的所有图像，例如 进行科学分析，或者因为这些都是您的训练示例。 假设该文件夹仅包含图像文件，您可以这样读取它\nimport imageio as iio from pathlib import Path images = list() for file in Path(\u0026#34;path/to/folder\u0026#34;).iterdir(): im = iio.imread(file) images.append(im) \n迭代视频中的图片 视频也是由图片组成的，通过每秒钟播放几十帧（视频由很多张图片组成），静态的图展示出视频效果。\nimport imageio as iio reader = iio.get_reader(\u0026#39;imageio:cockatoo.mp4\u0026#39;) #for循环迭代 for i, im in enumerate(reader): print(\u0026#39;Mean of frame %iis %1.1f\u0026#39; % (i, im.mean())) \n更多 更多功能请查看官方文档 https://github.com/imageio/imageio\n","permalink":"/blog/imageio/","summary":"点击上方图片购买课程   用于读取和写入图像数据的 Python 库；\nImageio 提供了一系列 example images，可以通过使用 \u0026lsquo;\u0026lsquo;imageio:chelsea.png\u0026rsquo;\u0026rsquo; 之类的 URI 来使用。 如果您的系统上尚不存在这些图像，则会自动下载这些图像。 因此，下面的大多数示例应该可以正常工作。\n读取图片 最常用的读取图片功能\nimport imageio as iio im = iio.imread(\u0026#39;imageio:chelsea.png\u0026#39;) print(im.shape) 如果图片文件是gif动图(gif是由多个静态图片组成的动图)\nimport imageio as iio im = iio.get_reader(\u0026#39;cat.gif\u0026#39;) for frame in im: print(frame.shape) # Each frame is a numpy matrix 如果gif存储于内存中（二进制数）\nimport imageio as iio #image_bytes二进制数据 im = iio.get_reader(image_bytes, \u0026#39;.gif\u0026#39;) 读取网图 Imageio可以从文件名、文件对象、zip压缩文件夹、字节流、图片链接中读取图片\nimport imageio as iio import visvis as vv im = iio.imread(\u0026#39;http://upload.wikimedia.org/wikipedia/commons/d/de/Wikipedia_Logo_1.0.png\u0026#39;) vv.","title":"Imageio | 读取和写入图像数据的Python库"},{"content":" 点击上方图片购买课程   Miller https://github.com/johnkerl/miller\nMiller 是一个命令行工具，用于查询、整形和重新格式化各种格式的数据文件，包括 CSV、TSV 和 JSON。\nTTS https://github.com/coqui-ai/TTS\nTTS 是一个用于高级文本到语音生成的库,可以根据你一段录音风格，迁移到其他任意语言文本，并将文本转为声音。\nexa https://the.exa.website/\n命令行ls的现代替代品。\nexa是一个改进的文件列表器，具有更多功能和更好的默认设置。它使用颜色来区分文件类型和元数据。它了解符号链接、扩展属性和Git。它很小，速度很快，只有一个二进制。\nLearn X in Y minutes https://learnxinyminutes.com/\n在 Y 分钟内学习 X; 来一次您最喜欢的语言的旋风之旅。\nDoodleCSS https://github.com/chr15m/DoodleCSS\n手绘风的html/css主题\nWiki https://www.modernwiki.app/\n现代维基百科, 重新设计的用户界面\nmatplotlib-cheatsheet 分初、中、高级，常用的matplotlib语法\n点击下载cheatsheet\nrssproxy https://rssproxy-v1.migor.org/\n将任意网址转为RSS源\nFluent-Reader 使用 Electron、React 和 Fluent UI 构建的现代桌面 RSS 阅读器\nhttps://github.com/yang991178/fluent-reader/\nddddocr https://github.com/sml2h3/ddddocr\n通用验证码识别OCR pypi版\nimport ddddocr ocr = ddddocr.DdddOcr(old=True) with open(\u0026#34;test.jpg\u0026#34;, \u0026#39;rb\u0026#39;) as f: image = f.read() res = ocr.classification(image) print(res) ","permalink":"/blog/techweekly10/","summary":"点击上方图片购买课程   Miller https://github.com/johnkerl/miller\nMiller 是一个命令行工具，用于查询、整形和重新格式化各种格式的数据文件，包括 CSV、TSV 和 JSON。\nTTS https://github.com/coqui-ai/TTS\nTTS 是一个用于高级文本到语音生成的库,可以根据你一段录音风格，迁移到其他任意语言文本，并将文本转为声音。\nexa https://the.exa.website/\n命令行ls的现代替代品。\nexa是一个改进的文件列表器，具有更多功能和更好的默认设置。它使用颜色来区分文件类型和元数据。它了解符号链接、扩展属性和Git。它很小，速度很快，只有一个二进制。\nLearn X in Y minutes https://learnxinyminutes.com/\n在 Y 分钟内学习 X; 来一次您最喜欢的语言的旋风之旅。\nDoodleCSS https://github.com/chr15m/DoodleCSS\n手绘风的html/css主题\nWiki https://www.modernwiki.app/\n现代维基百科, 重新设计的用户界面\nmatplotlib-cheatsheet 分初、中、高级，常用的matplotlib语法\n点击下载cheatsheet\nrssproxy https://rssproxy-v1.migor.org/\n将任意网址转为RSS源\nFluent-Reader 使用 Electron、React 和 Fluent UI 构建的现代桌面 RSS 阅读器\nhttps://github.com/yang991178/fluent-reader/\nddddocr https://github.com/sml2h3/ddddocr\n通用验证码识别OCR pypi版\nimport ddddocr ocr = ddddocr.DdddOcr(old=True) with open(\u0026#34;test.jpg\u0026#34;, \u0026#39;rb\u0026#39;) as f: image = f.read() res = ocr.","title":"TechWeekly-10| 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   Tool_Kits 工具箱大全,主要是Python项目。\n涵盖：\n 网络爬虫 数据库 数据分析 机器学习 可视化 文本分析 GUI 自动化办公 其他  网络爬虫  requests 最好用的网络爬虫访问库 smartscraper 最简单的网络爬虫访问\u0026amp;解析库 weibo_crawler 最简单的微博爬虫 崔庆才大神发布的测试站点 gerapy-auto-extractor 爬虫页面智能解析库 TikTok-Api 抖音国际站爬虫库 rpa Python自动化操纵包 celery 可以用于制作爬虫访问队列 BeautifulSoup 最简单的网页解析库 pyquery 最简洁网页解析库 scrapy 最流行的爬虫框架 pyspider 国人开发的爬虫框架 selenium 浏览器自动化测试框架，可以用于爬虫反爬 playwright 微软开源的浏览器自动化测试框架 scylla 智能IP代理池，用于反爬 shreport 上海证券交易所上市公司定期报告下载 newspaper 新闻爬虫库，根据提供的url可以抽取出新闻标题、作者、关键词、总结，部分功能支持中文 ddddocr 通用验证码识别OCR pypi版  Web  pelican Python静态网站生成库 flask 可以开发网站、分享rest-api接口;流行度top2的web框架 streamlit、PyWebIO对Python小白最友好的的web库 fastapi web框架，高性能，易于学习，快速编写代码； PyWebIO 不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。 mkdocs 制作文档网站   数据库  PyMySQL Sqlite3 轻量级sql数据库(python内置库) pymongo 非关系型MongoDB库 redis Redis数据库 py2neo 对接Neo4J数据库的python库 datasette 探索和发布数据的开源多功能工具，主要面向数据记者、博物馆馆长、档案管理员、地方政府、科学家、研究人员以及任何拥有希望与世界分享数据的人。  数据分析  pandas 必须Python数据分析库，读取文件、预处理数据、分析、存储 SciencePlots 科学绘图的Python工具包 Orchest 创建数据科学工作量的工具。Orchest是一款Web数据科学工具，可在文件系统上运行 statsmodels Python的统计计量统计库 linearmodels 添加线性模型，包括statsmodels中缺少的工具变量和面板数据模型。 streamlit 快速搭建本地数据分析类Web应用 modin pandas加速库，接口语法与pandas高度一致 dask pandas加速库，接口语法与pandas高度一致 plydata pandas管道语法库 networkx 社交网络分析库  ​\n机器学习  vowpal wabbit 机器学习的前沿库 scikit-learn 机器学习必学库，支持有监督、无监督多种算法，含文本分析功能 Orange3 点击操作的机器学习分析软件， 可文本分析 doccano 文本数据标注工具 label-studio 最牛掰的文本数据标注工具  可视化  streamlit 快速搭建本地数据分析类Web应用 matplotlib Python中最万能绘图库，很少有ta画不出来的图；但语法较难、静态图 matplotx Matplotlib扩展库，可以提供更多样式，简化样式设定 seaborn 基于matplotlib开发的简化版可视化库， 一般的图可以用ta绘制； 高度定制仍需要结合matplotlib进行样式定制；静态图 plotnine ggplot2语法的Python可视化库， 可与plydata 库结合使用 pyecharts 国人开发并封装的动态可视化图绘制库; 中文文档 plotly 动态可视化图绘制库 bokeh 动态可视化图绘制库 SciencePlots 科研论文绘图，基于matplotlib datapane 数据分析报告生成 superset 开源商务智能分析可视化库 pyplutchik 文本可视化，可将文本情感信息按照plutchik轮样式可视化  文本分析  nltk 自然语言分析套件，对中文不友好 skift 使用scikit-learn语法封装了fastText功能的包。 kwx Python 中基于 BERT、LDA 和 TFIDF 的关键字提取 spacy 工业级自然语言模型库，支持中文 jieba 中文文本分词库 snownlp 中文情感分析库 gensim 最好用、最全的话题模型 cntext 中文文本分析库，含词频统计、情感分析、可视化 label-studio 最牛掰的文本数据标注工具 doccano 文本数据标注工具 textstat 文本可读性计算包(算法全，但仅支持英文) texthero 文本预处理、展示、可视化库，仅支持英文 textpipe 文本分析流水线 textplot 词语网络图 shifterator 通过让您查看单词使用方式的变化，单词移位可以帮助您进行从根本上更可解释的情感，熵和散度分析。量化不同单词对两个文本差异做出的贡献，以及它们如何发挥作用。 GuidedLDA 半监督LDA主题模型 corex_topic 层次非监督、半监督话题模型 BERTopic BERT话题模型 whatlies 词向量可视化 TextDescriptives 文本描述性统计,不支持中文 pdfdocx pdf、docx读取库 OCRmyPDF 为扫描的 PDF 文件添加了 OCR 文本层，允许对其进行搜索 Top2Vec 主题建模和语义搜索的算法, 自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。 适用于短文本; TextNet textnet将文档集表示为文档和单词的网络,为文本分析与可视化提供了新的可能性。 taguette 免费开源的定性研究工具  GUI窗体软件开发  tkinter Python内置的gui库 PySimpleGUI 最简单的gui开发库 pyqt5、pyside 最牛掰的gui软件开发库 DearPyGui 易于使用且功能强大的Python GUI框架，它提供了DearImGui的包装。 PyWebIO 快速构建 Web 应用的 Python 工具 kivy star数高达14k的gui库   自动化办公  zmail 自动化收发邮件管理库 pywinauto Windows电脑自动化Python库 WeasyPrint 自动化生产pdf报告  对PDF文件读取、更改、添加信息 selenium 浏览器自动化框架，可以自动化点击浏览器，完成某些工作 mkdocx python-docx 创建、修改docx文件库 python-ppt 创建、修改ppt文件库 openpyxl xlsx文件库 PyWebIO 不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。  其他  hiresearch 丢弃繁杂收藏夹，定义简洁办公的浏览器首页 reveal.js 最流行的幻灯片 slidev 编程人员使用的幻灯片 mkdocs 制作文档网站 mockoon 帮我们快速搭建 API 服务图形化界面工具 codepng 把代码转为美观的截图的website toad 金融风险评分卡；覆盖了建模全流程，从 EDA、特征工程、特征筛选 到 模型验证和评分卡转化 best-resume-ever Latex项目， 基于 Web 的简历模板，可以生成网页简历，然后用浏览器打印成 PDF 文件。 pychorus 将音频文件中的高潮部分剪辑出来的python包 imageio 用于读取和写入图像数据的 Python 库； rich 让命令行输出更美观简洁的Python包 textual rich作者开发的文本用户界面用户  ​\n​\n","permalink":"/blog/pythontools/","summary":"点击上方图片购买课程   Tool_Kits 工具箱大全,主要是Python项目。\n涵盖：\n 网络爬虫 数据库 数据分析 机器学习 可视化 文本分析 GUI 自动化办公 其他  网络爬虫  requests 最好用的网络爬虫访问库 smartscraper 最简单的网络爬虫访问\u0026amp;解析库 weibo_crawler 最简单的微博爬虫 崔庆才大神发布的测试站点 gerapy-auto-extractor 爬虫页面智能解析库 TikTok-Api 抖音国际站爬虫库 rpa Python自动化操纵包 celery 可以用于制作爬虫访问队列 BeautifulSoup 最简单的网页解析库 pyquery 最简洁网页解析库 scrapy 最流行的爬虫框架 pyspider 国人开发的爬虫框架 selenium 浏览器自动化测试框架，可以用于爬虫反爬 playwright 微软开源的浏览器自动化测试框架 scylla 智能IP代理池，用于反爬 shreport 上海证券交易所上市公司定期报告下载 newspaper 新闻爬虫库，根据提供的url可以抽取出新闻标题、作者、关键词、总结，部分功能支持中文 ddddocr 通用验证码识别OCR pypi版  Web  pelican Python静态网站生成库 flask 可以开发网站、分享rest-api接口;流行度top2的web框架 streamlit、PyWebIO对Python小白最友好的的web库 fastapi web框架，高性能，易于学习，快速编写代码； PyWebIO 不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。 mkdocs 制作文档网站   数据库  PyMySQL Sqlite3 轻量级sql数据库(python内置库) pymongo 非关系型MongoDB库 redis Redis数据库 py2neo 对接Neo4J数据库的python库 datasette 探索和发布数据的开源多功能工具，主要面向数据记者、博物馆馆长、档案管理员、地方政府、科学家、研究人员以及任何拥有希望与世界分享数据的人。  数据分析  pandas 必须Python数据分析库，读取文件、预处理数据、分析、存储 SciencePlots 科学绘图的Python工具包 Orchest 创建数据科学工作量的工具。Orchest是一款Web数据科学工具，可在文件系统上运行 statsmodels Python的统计计量统计库 linearmodels 添加线性模型，包括statsmodels中缺少的工具变量和面板数据模型。 streamlit 快速搭建本地数据分析类Web应用 modin pandas加速库，接口语法与pandas高度一致 dask pandas加速库，接口语法与pandas高度一致 plydata pandas管道语法库 networkx 社交网络分析库  ​","title":"大邓整理的有用Python项目"},{"content":" 点击上方图片购买课程   代码下载 \ntomotopy简介？ tomotopy 是 tomoto（主题建模工具）的 Python 扩展，它是用 C++ 编写的基于 Gibbs 采样的主题模型库。支持的主题模型包括 LDA、DMR、HDP、MG-LDA、PA 和 HPA， 利用现代 CPU 的矢量化来最大化速度。\nhttps://github.com/bab2min/tomotopy\n下图中同样的数据集， tomotopy迭代200次，gensim迭代10次的情况下， tomotopy与gensim耗时对比图，由此可见tomotopy训练主题模型速度之快。 当前版本的 tomotopy 支持的主题模型包括\n 潜在狄利克雷分配（LDAModel） 标记的 LDA（LLDA 模型） 部分标记的 LDA（PLDA 模型） 监督LDA（SLDA模型） Dirichlet 多项回归 (DMRModel) 广义狄利克雷多项回归 (GDMRModel) 分层狄利克雷过程 (HDPModel) 分层LDA（HLDA模型） 多粒 LDA（MGLDA 模型） 弹珠盘分配（PAModel） 分层 PA (HPAModel) 相关主题模型（CTModel） 动态主题模型 (DTModel) 基于伪文档的主题模型（PTModel）。  安装 !pip3 install tomotopy==0.12.2 !pip3 install pyLDAvis==3.3.1 目前，tomotopy 可以利用 AVX2、AVX 或 SSE2 SIMD 指令集来最大程度利用PC的性能。\nimport tomotopy as tp tp.isa Run\n'avx2'  如果 tp.isa 返回 None，则训练过程可能需要很长时间。\n1. 导入数据 准备一个自己很熟悉的数据disaster_news.csv，一共有332条，话题数K=5，（正常情况下K是需要探索的）。\nimport pandas as pd df = pd.read_csv(\u0026#39;disaster_news.csv\u0026#39;) df.head() 2. 整理数据 分词、去除停用词\nimport re import jieba from cntext import STOPWORDS_zh def segment(text): words = jieba.lcut(text) words = [w for w in words if w not in STOPWORDS_zh] return words test = \u0026#34;云南永善县级地震已致人伤间民房受损中新网月日电据云南昭通市防震减灾局官方网站消息截至日时云南昭通永善县级地震已造成人受伤其中重伤人轻伤人已全部送医院救治民房受损户间倒塌户间个乡镇所学校不同程度受损目前被损毁电力交通通讯设施已全部抢通修复当地已调拨帐篷顶紧急转移万人月日时分云南昭通永善县发生里氏级地震震源深度公里当地震感强烈此外成都等四川多地也有明显震感\u0026#34; print(segment(test)) ['云南', '永善县', '级', '地震', '已致', '伤间', '民房', '受损', '中新网', '日电', '云南', '昭通市', '防震', '减灾', '局', '官方网站', '消息', '日时', '云南', '昭通', '永善县', '级', '地震', '造成', '受伤', '重伤', '轻伤', '送', '医院', '救治', '民房', '受损', '户间', '倒塌', '户间', '乡镇', '学校', '不同', '程度', '受损', '目前', '损毁', '电力', '交通', '通讯', '设施', '抢通', '修复', '调拨', '帐篷', '顶', '紧急', '转移', '万人', '时分', '云南', '昭通', '永善县', '发生', '里氏', '级', '地震', '震源', '深度', '公里', '震感', '强烈', '成都', '四川', '多地', '明显', '震感']  df[\u0026#39;words\u0026#39;] = df[\u0026#39;text\u0026#39;].apply(segment) df.head() 3. 找到最佳K 正常的步骤应该认真对待这步，在一定区间范围内，根据模型得分找到合理的K。这里使用tomotopy提供的主题一致性coherence得分假装找一下。\n我们期望的图应该的topic coherence随着 number of topics增加而增加，然后到某个topic值趋于平稳。\ntomotopy每次运行得到的图形状不一样，为了保证运行结果具有可比性，设置了随机种子seed为555，你也可以根据需要改为自己需要的随机状态。(这里有点像炼丹)\ndef find_k(docs, min_k=1, max_k=20, min_df=2): #min_df 词语最少出现在2个文档中 import matplotlib.pyplot as plt scores = [] for k in range(min_k, max_k): #seed随机种子，保证在大邓这里运行结果与你运行的结果一样 mdl = tp.LDAModel(min_df=min_df, k=k, seed=555) for words in docs: if words: mdl.add_doc(words) mdl.train(20) coh = tp.coherence.Coherence(mdl) scores.append(coh.get_score()) #x = list(range(min_k, max_k - 1)) # 区间最右侧的值。注意：不能大于max_k #print(x) #print() plt.plot(range(min_k, max_k), scores) plt.xlabel(\u0026#34;number of topics\u0026#34;) plt.ylabel(\u0026#34;coherence\u0026#34;) plt.show() find_k(docs=df[\u0026#39;words\u0026#39;], min_k=1, max_k=10, min_df=2) 4. 训练lda 使用tomotopy的LDA模型， 话题数K=5\nimport tomotopy as tp #初始化LDA mdl = tp.LDAModel(k=5, min_df=2, seed=555) for words in df[\u0026#39;words\u0026#39;]: #确认words 是 非空词语列表 if words: mdl.add_doc(words=words) #训练 mdl.train() #查看每个topic feature words for k in range(mdl.k): print(\u0026#39;Top 10 words of topic #{}\u0026#39;.format(k)) print(mdl.get_topic_words(k, top_n=10)) print(\u0026#39;\\n\u0026#39;) Run\nTop 10 words of topic #0 [(\u0026#39;一辆\u0026#39;, 0.02751251682639122), (\u0026#39;事故\u0026#39;, 0.021704642102122307), (\u0026#39;记者\u0026#39;, 0.018342189490795135), (\u0026#39;死亡\u0026#39;, 0.01650812290608883), (\u0026#39;造成\u0026#39;, 0.014062701724469662), (\u0026#39;人员\u0026#39;, 0.013909862376749516), (\u0026#39;现场\u0026#39;, 0.013451346196234226), (\u0026#39;受伤\u0026#39;, 0.012687151320278645), (\u0026#39;相撞\u0026#39;, 0.011922957375645638), (\u0026#39;货车\u0026#39;, 0.011922957375645638)] ​ ​ Top 10 words of topic #1 ​ [(\u0026#39;学生\u0026#39;, 0.02709135226905346), (\u0026#39;食物中毒\u0026#39;, 0.02498047426342964), (\u0026#39;出现\u0026#39;, 0.019175563007593155), (\u0026#39;医院\u0026#39;, 0.016185153275728226), (\u0026#39;事件\u0026#39;, 0.013546556234359741), (\u0026#39;调查\u0026#39;, 0.013194743543863297), (\u0026#39;年月日\u0026#39;, 0.012842929922044277), (\u0026#39;治疗\u0026#39;, 0.012667023576796055), (\u0026#39;症状\u0026#39;, 0.011787491850554943), (\u0026#39;名\u0026#39;, 0.011259771883487701)] ​ ​ Top 10 words of topic #2 ​ [(\u0026#39;现场\u0026#39;, 0.018848909065127373), (\u0026#39;发生\u0026#39;, 0.01677251048386097), (\u0026#39;医院\u0026#39;, 0.015015557408332825), (\u0026#39;起火\u0026#39;, 0.014216942712664604), (\u0026#39;原因\u0026#39;, 0.012140544131398201), (\u0026#39;目前\u0026#39;, 0.012140544131398201), (\u0026#39;救治\u0026#39;, 0.01150165218859911), (\u0026#39;进行\u0026#39;, 0.011022482998669147), (\u0026#39;名\u0026#39;, 0.009425252676010132), (\u0026#39;火势\u0026#39;, 0.009265529923141003)] ​ ​ Top 10 words of topic #3 ​ [(\u0026#39;发生\u0026#39;, 0.03348556533455849), (\u0026#39;爆炸\u0026#39;, 0.022389251738786697), (\u0026#39;造成\u0026#39;, 0.019663840532302856), (\u0026#39;死亡\u0026#39;, 0.01713310182094574), (\u0026#39;受伤\u0026#39;, 0.016938429325819016), (\u0026#39;年月日\u0026#39;, 0.016354413703083992), (\u0026#39;轿车\u0026#39;, 0.012655640952289104), (\u0026#39;警方\u0026#39;, 0.012460969388484955), (\u0026#39;袭击\u0026#39;, 0.012266295962035656), (\u0026#39;事件\u0026#39;, 0.011487606912851334)] ​ ​ Top 10 words of topic #4 ​ [(\u0026#39;地震\u0026#39;, 0.047826822847127914), (\u0026#39;发生\u0026#39;, 0.03555167838931084), (\u0026#39;火灾\u0026#39;, 0.03140682727098465), (\u0026#39;时分\u0026#39;, 0.020885275676846504), (\u0026#39;级\u0026#39;, 0.015783920884132385), (\u0026#39;时间\u0026#39;, 0.013870910741388798), (\u0026#39;公里\u0026#39;, 0.013711493462324142), (\u0026#39;人员伤亡\u0026#39;, 0.013073823414742947), (\u0026#39;记者\u0026#39;, 0.013073823414742947), (\u0026#39;震感\u0026#39;, 0.012276736088097095)] \n查看话题模型信息\nmdl.summary() Run\n\u0026lt;BasicInfo\u0026gt;|LDAModel(currentversion:0.12.2)|332docs,29749words|TotalVocabs:8428,UsedVocabs:2984|Entropyofwords:7.10665|Entropyofterm-weightedwords:7.10665|RemovedVocabs:\u0026lt;NA\u0026gt;|\u0026lt;TrainingInfo\u0026gt;|Iterations:10,Burn-insteps:0|OptimizationInterval:10|Log-likelihoodperword:-7.79934|\u0026lt;InitialParameters\u0026gt;|tw:TermWeight.ONE|min_cf:0(minimumcollectionfrequencyofwords)|min_df:2(minimumdocumentfrequencyofwords)|rm_top:0(thenumberoftopwordstoberemoved)|k:5(thenumberoftopicsbetween1~32767)|alpha:[0.1](hyperparameterofDirichletdistributionfordocument-topic,givenasasingle`float`incaseofsymmetricpriorandasalistwithlength`k`of`float`incaseofasymmetricprior.)|eta:0.01(hyperparameterofDirichletdistributionfortopic-word)|seed:555(randomseed)|trainedinversion0.12.2|\u0026lt;Parameters\u0026gt;|alpha(Dirichletpriorontheper-documenttopicdistributions)|[0.71433650.68525130.750896160.62046770.7040125]|eta(Dirichletpriorontheper-topicworddistribution)|0.01|\u0026lt;Topics\u0026gt;|#0 (6513) : 一辆 事故 记者 死亡 造成 |#1 (5655) : 学生 食物中毒 出现 医院 事件 |#2 (6231) : 现场 发生 医院 起火 原因 |#3 (5107) : 发生 爆炸 造成 死亡 受伤 |#4 (6243) : 地震 发生 火灾 时分 级 topic解读 根据每个话题top10的特征词，5个话题解读为\n 交通事故| #0 (6513) : 一辆 事故 记者 死亡 造成 食品安全| #1 (5655) : 学生 食物中毒 出现 医院 事件 火灾新闻| #2 (6231) : 现场 发生 医院 起火 原因 恐怖袭击| #3 (5107) : 发生 爆炸 造成 死亡 受伤 地震灾害| #4 (6243) : 地震 发生 火灾 时分 级  5. 可视化 使用pyLDAvis\nimport pyLDAvis import numpy as np import warnings warnings.filterwarnings(\u0026#39;ignore\u0026#39;, category=Warning) #在notebook显示 pyLDAvis.enable_notebook() #获取pyldavis需要的参数 topic_term_dists = np.stack([mdl.get_topic_word_dist(k) for k in range(mdl.k)]) doc_topic_dists = np.stack([doc.get_topic_dist() for doc in mdl.docs]) doc_topic_dists /= doc_topic_dists.sum(axis=1, keepdims=True) doc_lengths = np.array([len(doc.words) for doc in mdl.docs]) vocab = list(mdl.used_vocabs) term_frequency = mdl.used_vocab_freq prepared_data = pyLDAvis.prepare( topic_term_dists, doc_topic_dists, doc_lengths, vocab, term_frequency, start_index=0, # tomotopy话题id从0开始，pyLDAvis话题id从1开始 sort_topics=False #注意：否则pyLDAvis与tomotopy内的话题无法一一对应。  ) #可视化结果存到html文件中 #pyLDAvis.save_html(prepared_data, \u0026#39;ldavis.html\u0026#39;) #notebook中显示 pyLDAvis.display(prepared_data) 6. 预测 预测某文档的话题\nimport jieba from cntext import STOPWORDS_zh #预测 doc = \u0026#39;云南永善县级地震已致伤间民房受损中新网日电云南昭通市防震减灾局官方网站消息日时云南昭通永善县级地震造成受伤重伤轻伤送医院救治民房受损户间倒塌户间乡镇学校不同程度受损目前损毁电力交通通讯设施抢通修复调拨帐篷顶紧急转移万人时分云南昭通永善县发生里氏级地震震源深度公里震感强烈成都四川多地明显震感\u0026#39; words = [w for w in jieba.lcut(doc) if w not in STOPWORDS_zh] #构造tomotopy需要的数据 doc_inst = mdl.make_doc(words=words) topic_dist, ll = mdl.infer(doc_inst) print(\u0026#34;Topic Distribution for Unseen Docs: \u0026#34;, topic_dist) Topic Distribution for Unseen Docs: [0.11645161 0.10240361 0.5342029 0.03622254 0.21071935]  列表长度为5， 列表第三个数值(topic #2)数值最大，该文本最大的可能性是topic #2\n补充: 指定主题特征词 如果对数据比较了解，已经知道有一些主题，可以把比较明显的词语分配给指定的topic_id。\nmdl = tp.LDAModel(k=5, min_df=2, seed=555) for words in df[\u0026#39;words\u0026#39;]: if words: mdl.add_doc(words) #把word相撞 分配给topic_0, 权重设置为1， 其他topic权重设置为0.1 #注意这里的range(5) 5是对应的k值 mdl.set_word_prior(\u0026#39;相撞\u0026#39;, [1.0 if k == 0 else 0.1 for k in range(5)]) #把word地震 分配给topic_1, 权重设置为1， 其他topic权重设置为0.1 mdl.set_word_prior(\u0026#39;地震\u0026#39;, [1.0 if k == 1 else 0.1 for k in range(5)]) #把word火灾 分配给topic_2, 权重设置为1， 其他topic权重设置为0.1 mdl.set_word_prior(\u0026#39;火灾\u0026#39;, [1.0 if k == 2 else 0.1 for k in range(5)]) #把word中毒 分配给topic_3, 权重设置为1， 其他topic权重设置为0.1 mdl.set_word_prior(\u0026#39;中毒\u0026#39;, [1.0 if k == 3 else 0.1 for k in range(5)]) #把word袭击 分配给topic_4, 权重设置为1， 其他topic权重设置为0.1 mdl.set_word_prior(\u0026#39;袭击\u0026#39;, [1.0 if k == 4 else 0.1 for k in range(5)]) mdl.train() mdl.summary() \u0026lt;Basic Info\u0026gt; | LDAModel (current version: 0.12.2) | 332 docs, 29749 words | Total Vocabs: 8428, Used Vocabs: 2984 | Entropy of words: 7.10665 | Entropy of term-weighted words: 7.10665 | Removed Vocabs: \u0026lt;NA\u0026gt; | \u0026lt;Training Info\u0026gt; | Iterations: 10, Burn-in steps: 0 | Optimization Interval: 10 | Log-likelihood per word: -7.72251 | \u0026lt;Initial Parameters\u0026gt; | tw: TermWeight.ONE | min_cf: 0 (minimum collection frequency of words) | min_df: 2 (minimum document frequency of words) | rm_top: 0 (the number of top words to be removed) | k: 5 (the number of topics between 1 ~ 32767) | alpha: [0.1] (hyperparameter of Dirichlet distribution for document-topic, given as a single `float` in case of symmetric prior and as a list with length `k` of `float` in case of asymmetric prior.) | eta: 0.01 (hyperparameter of Dirichlet distribution for topic-word) | seed: 555 (random seed) | trained in version 0.12.2 | \u0026lt;Parameters\u0026gt; | alpha (Dirichlet prior on the per-document topic distributions) | [0.7106193 0.60264444 0.5734784 0.71375024 0.6234263 ] | eta (Dirichlet prior on the per-topic word distribution) | 0.01 | \u0026lt;Topics\u0026gt; | #0 (6599) : 一辆 事故 死亡 发生 造成 | #1 (6087) : 地震 发生 级 公里 年月日 | #2 (5892) : 火灾 发生 现场 大火 起火 | #3 (6402) : 医院 学生 食物中毒 出现 名 | #4 (4769) : 事件 发生 袭击 人员 工作 |  \n","permalink":"/blog/tomotopytopicmodel/","summary":"点击上方图片购买课程   代码下载 \ntomotopy简介？ tomotopy 是 tomoto（主题建模工具）的 Python 扩展，它是用 C++ 编写的基于 Gibbs 采样的主题模型库。支持的主题模型包括 LDA、DMR、HDP、MG-LDA、PA 和 HPA， 利用现代 CPU 的矢量化来最大化速度。\nhttps://github.com/bab2min/tomotopy\n下图中同样的数据集， tomotopy迭代200次，gensim迭代10次的情况下， tomotopy与gensim耗时对比图，由此可见tomotopy训练主题模型速度之快。 当前版本的 tomotopy 支持的主题模型包括\n 潜在狄利克雷分配（LDAModel） 标记的 LDA（LLDA 模型） 部分标记的 LDA（PLDA 模型） 监督LDA（SLDA模型） Dirichlet 多项回归 (DMRModel) 广义狄利克雷多项回归 (GDMRModel) 分层狄利克雷过程 (HDPModel) 分层LDA（HLDA模型） 多粒 LDA（MGLDA 模型） 弹珠盘分配（PAModel） 分层 PA (HPAModel) 相关主题模型（CTModel） 动态主题模型 (DTModel) 基于伪文档的主题模型（PTModel）。  安装 !pip3 install tomotopy==0.12.2 !pip3 install pyLDAvis==3.3.1 目前，tomotopy 可以利用 AVX2、AVX 或 SSE2 SIMD 指令集来最大程度利用PC的性能。","title":"tomotopy | 速度最快的LDA主题模型"},{"content":"dvt Distant Viewing Toolkit for the Analysis of Visual Culture\n视觉文化分析的Python工具包\nhttps://github.com/distant-viewing/dvt\n远程电视工具包由几个 Python 包组成，旨在促进视觉文化的计算分析。 开始使用该工具包的最简单方法是在 Google 的协作 (Colab) 环境中运行该工具包。 这是一项免费使用的服务，允许您以最少的设置在远程服务器上运行 Python 代码。 只需选择以下链接之一即可开始：\n COLAB 笔记本演 https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing  有关在您自己的机器上设置工具包的更多信息，请参阅 INSTALL.md。 以下页面提供了有关工具包和项目的更多信息：\n 搜索和发现界面示例：DVT 视频可视化 使用聚合元数据的示例分析：“两个网络时代情景喜剧的视觉风格” 项目理论：“远距离观察：分析大型视觉语料库”。 软件白皮书：用于分析视觉文化的 Python 包  示例 开发者提供的colab代码，我跑通了图片标注(例如识别不同身体部位)、视频转场(不同素材拼凑)\n   提示 本地配置难度极大，建议按照开发者提示，使用google colab环境。可能需要先配置好科学上网，才能使用\n COLAB 笔记本演 https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing   点击上方图片购买课程   ","permalink":"/blog/dvt/","summary":"dvt Distant Viewing Toolkit for the Analysis of Visual Culture\n视觉文化分析的Python工具包\nhttps://github.com/distant-viewing/dvt\n远程电视工具包由几个 Python 包组成，旨在促进视觉文化的计算分析。 开始使用该工具包的最简单方法是在 Google 的协作 (Colab) 环境中运行该工具包。 这是一项免费使用的服务，允许您以最少的设置在远程服务器上运行 Python 代码。 只需选择以下链接之一即可开始：\n COLAB 笔记本演 https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing  有关在您自己的机器上设置工具包的更多信息，请参阅 INSTALL.md。 以下页面提供了有关工具包和项目的更多信息：\n 搜索和发现界面示例：DVT 视频可视化 使用聚合元数据的示例分析：“两个网络时代情景喜剧的视觉风格” 项目理论：“远距离观察：分析大型视觉语料库”。 软件白皮书：用于分析视觉文化的 Python 包  示例 开发者提供的colab代码，我跑通了图片标注(例如识别不同身体部位)、视频转场(不同素材拼凑)\n   提示 本地配置难度极大，建议按照开发者提示，使用google colab环境。可能需要先配置好科学上网，才能使用\n COLAB 笔记本演 https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing   点击上方图片购买课程   ","title":"dvt库 |  视觉文化分析的Python工具包"},{"content":" 点击上方图片购买课程   代码下载 Stargazer库介绍 R语言有一个stargazer包，可用于创建漂亮的、可发表的多元回归表。如今有Python化的stargazer库也可做类似的事。\n下图是使用stargazer生成的没有任何样式的原始示例的示例：\n 什么时候会用到这些？ 人们倾向于使用R版本的stargazer的主要情况是在学术论文中报告回归结果。 它允许您轻松地比较多个回归结果，这有助于比较具有实验影响的模型与没有影响的模型之间的结果。 这允许用户轻松查看系数的差异、统计显着性以及实验引入的新变量的影响。\n它目前支持 LaTeX 和 HTML 输出，stargazer开发者最终最表是也支持 Markdown 和 ASCII 文本。\n项目地址 https://github.com/mwburke/stargazer\n该库实现了原始包中的许多自定义功能。大多数示例可以在示例 jupyter notebook 中找到，功能函数完整列表如下： Stargazer库的函数  show_header：显示或隐藏模型头数据 show_model_numbers：显示或隐藏型号 custom_columns：自定义模型名称和模型分组 significance_levels：更改统计显着性阈值 significant_digits：更改有效数字的数量 show_confidence_intervals：显示置信区间，而不是方差 dependent_variable_name：重命名因变量 rename_covariates: 重命名协变量 covariate_order：重新排序协变量 reset_covariate_order：将协变量顺序重置为原始顺序 show_degrees_of_freedom：显示或隐藏自由度 custom_note_label：表格底部的标签注释部分 add_custom_notes：将自定义注释添加到表格底部的部分 add_line：向表格中添加自定义行 append_notes：显示或隐藏统计显着性阈值  这些功能与渲染类型无关，无论用户以 HTML、LaTeX 等格式输出都将应用\n安装 !pip3 install stargazer \nOLS回归 import pandas as pd from sklearn import datasets import statsmodels.api as sm from stargazer.stargazer import Stargazer diabetes = datasets.load_diabetes() df = pd.DataFrame(diabetes.data) df.columns = [\u0026#39;Age\u0026#39;, \u0026#39;Sex\u0026#39;, \u0026#39;BMI\u0026#39;, \u0026#39;ABP\u0026#39;, \u0026#39;S1\u0026#39;, \u0026#39;S2\u0026#39;, \u0026#39;S3\u0026#39;, \u0026#39;S4\u0026#39;, \u0026#39;S5\u0026#39;, \u0026#39;S6\u0026#39;] df[\u0026#39;target\u0026#39;] = diabetes.target est = sm.OLS(endog=df[\u0026#39;target\u0026#39;], exog=sm.add_constant(df[df.columns[0:4]])).fit() est2 = sm.OLS(endog=df[\u0026#39;target\u0026#39;], exog=sm.add_constant(df[df.columns[0:6]])).fit() stargazer = Stargazer([est, est2]) /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only x = pd.concat(x[::order], 1)  #分析结果渲染成html from IPython.display import display, HTML raw_str = stargazer.render_html() html = HTML(raw_str) display(html)   #分析结果渲染成latex stargazer.render_latex()   ","permalink":"/blog/stargazer/","summary":"点击上方图片购买课程   代码下载 Stargazer库介绍 R语言有一个stargazer包，可用于创建漂亮的、可发表的多元回归表。如今有Python化的stargazer库也可做类似的事。\n下图是使用stargazer生成的没有任何样式的原始示例的示例：\n 什么时候会用到这些？ 人们倾向于使用R版本的stargazer的主要情况是在学术论文中报告回归结果。 它允许您轻松地比较多个回归结果，这有助于比较具有实验影响的模型与没有影响的模型之间的结果。 这允许用户轻松查看系数的差异、统计显着性以及实验引入的新变量的影响。\n它目前支持 LaTeX 和 HTML 输出，stargazer开发者最终最表是也支持 Markdown 和 ASCII 文本。\n项目地址 https://github.com/mwburke/stargazer\n该库实现了原始包中的许多自定义功能。大多数示例可以在示例 jupyter notebook 中找到，功能函数完整列表如下： Stargazer库的函数  show_header：显示或隐藏模型头数据 show_model_numbers：显示或隐藏型号 custom_columns：自定义模型名称和模型分组 significance_levels：更改统计显着性阈值 significant_digits：更改有效数字的数量 show_confidence_intervals：显示置信区间，而不是方差 dependent_variable_name：重命名因变量 rename_covariates: 重命名协变量 covariate_order：重新排序协变量 reset_covariate_order：将协变量顺序重置为原始顺序 show_degrees_of_freedom：显示或隐藏自由度 custom_note_label：表格底部的标签注释部分 add_custom_notes：将自定义注释添加到表格底部的部分 add_line：向表格中添加自定义行 append_notes：显示或隐藏统计显着性阈值  这些功能与渲染类型无关，无论用户以 HTML、LaTeX 等格式输出都将应用\n安装 !pip3 install stargazer \nOLS回归 import pandas as pd from sklearn import datasets import statsmodels.api as sm from stargazer.stargazer import Stargazer diabetes = datasets.","title":"Stargazer库 |  创建漂亮可发表的多元回归表"},{"content":" 点击上方图片购买课程    公众号-新智元\n编辑: 桃子 小咸鱼\n 女朋友提出分手，你是不是后悔没有早点察觉？\n这不，对于分手前的有关迹象，科学家给出了答案：聊天记录！\n近日，美国德克萨斯大学的研究人员发表的一篇论文表明，通过分析情侣的聊天记录，可以找到情侣即将分手的证据。\n这篇 Language left behind on social media exposes the emotional and cognitive costs of a romantic breakup 已于12月20日发表在国际顶刊PNAS。\n分手前三个月，聊天便不正常了\n基于已有的数据，研究人员对6800名Reddit用户发布的1027541个帖子进行了文本分析。\n这些帖子涵盖了用户在过去2年里的Reddit发帖数据，这些帖子的内容不仅仅与他们的感情关系有关，也涵盖了他们生活中各个方面的内容。\n语言标记 表示「即将分手」的「语言标记」在分手发生前3个月出现的频次非常高，在分手的那一周达到峰值，并在6个月后恢复到正常基线。\n在表示「即将分手」的「语言标记」中，出现次数比较多的是「我」、「我们」这类字眼，以及暗含认知过程（cognitive processing ）的词汇（常常表示抑郁、高度集中的注意力、探究意义等）。\n分手前后Reddit用户语言模式的变化。第0周是每个用户在分手时公开披露分手的时间点。\n此外，「语言标记」中有关「分析思考」（analytic thinking）的词汇的出现频次会下降，与「分析思考」相关的词汇往往包含更多以个人为中心和非正式的语言。\n研究人员还发现，即使人们在与分手这类话题无关的群组中发帖，上述这种「语言标记」模式仍然存在。\n要注意了！\n与偶尔发一次帖的人相比，那些经常发布分手信息的人在分手一年之后，适应能力会变得很差。\n83%的人都会以第一人称发送第一次分手的信息，并且这些帖子详细描述了分手过程，甚至导致分手的原因和分手的后果都有。\n例如，一位网友通过回忆来讲述自己分手的故事：\n “Hey breakups, going through a rough one this week. The girl I\u0026rsquo;ve been seeing the last 7 months left me last Friday due to us not having common interests. Our relationship seemed just awesome and thought we were happy. We did get into a \u0026ldquo;routine\u0026rdquo; pretty fast and I was happy with it. Cook dinner, sex, watch movies together. I knew going into this with her she was a free spirited outdoorsy type and I am admittedly the opposite. But we sparked, and formed a relationship after a few months of talking. Things seemed great. We lived maybe 45 minutes away from each other and had different work schedules, so we only saw each other maybe 3 times a week, so it was sometimes hard to see each other\u0026hellip;”\n 分析思考和认知过程 尽管许多情侣关系解体模型都强调了分手过程中固有的认知思维，但没有一项研究能够实时跟踪认知过程。\n同时，研究人员在研究认知过程的变化时面临着几个艰巨的挑战，包括如何识别和测量感兴趣的认知动态。\n研究人员最近的工作确定了两种基于语言的通用思维模式：一是分析思考，另一是认知过程。\n说话以「我」、「我们」为焦点\n回想下，排除第三者关系，女友和你提出分手前，是不是经常会说「我\u0026hellip;.」\n正如研究人员指出，当分手发生时，人们会向内去理解发生关系破裂的原因，这有时会让人陷入沉思和情绪困扰 。\n在与抑郁、自杀、情绪剧变、消极和心理困扰相关的报告中，「我」这个词是最常见的。这表明 「我」的使用能够捕获内部的焦点和个人内部的关注。\n同样，在情侣关系研究中，在分手之前、之中和之后查看「我」字的使用可能是一种不错的方法，来跟踪人们在整个分手过程中的对自我关注和调整。\n在分手期间，人们可能会深究对方的前任伴侣和两人间的关系。\n「我们」一词，揭示了情侣间的关系承诺、继续关系的意图和解决问题的行为等等信息。\n而情侣之间更多地使用「我们」一词突出了成功的浪漫关系背后靠的是情侣间的相互依存性。\n但是，如果情侣间的关系变坏呢？\n一些研究发现，经常分享分手故事的人，如果开始频繁地使用「我们」这个词，这种现象就预示着他和他伴侣间的关系会变得更差。\n分手后遗症 在人们的社交生活与其在线状态交织在一起的时代，研究分手和其他个人心情动荡出现了新的方法。\n通过研究社交媒体帖子，研究人员已经发现了与人们情绪和心理状态相关的语言模式，例如抑郁症、创伤后应激障碍诊断和注意缺陷多动障碍症状。\n通过对社交媒体平台中人们的语言进行分析，研究人员最终可以追踪人们在分手时不断演变的心理过程。\n正如研究者指出，真正分手后会持续6个月的心理影响。\n分手后遗症，你有吗？\n数据下载 4.8G,含代码\n 点击上方图片购买课程   ","permalink":"/blog/pnas_love_separate/","summary":"点击上方图片购买课程    公众号-新智元\n编辑: 桃子 小咸鱼\n 女朋友提出分手，你是不是后悔没有早点察觉？\n这不，对于分手前的有关迹象，科学家给出了答案：聊天记录！\n近日，美国德克萨斯大学的研究人员发表的一篇论文表明，通过分析情侣的聊天记录，可以找到情侣即将分手的证据。\n这篇 Language left behind on social media exposes the emotional and cognitive costs of a romantic breakup 已于12月20日发表在国际顶刊PNAS。\n分手前三个月，聊天便不正常了\n基于已有的数据，研究人员对6800名Reddit用户发布的1027541个帖子进行了文本分析。\n这些帖子涵盖了用户在过去2年里的Reddit发帖数据，这些帖子的内容不仅仅与他们的感情关系有关，也涵盖了他们生活中各个方面的内容。\n语言标记 表示「即将分手」的「语言标记」在分手发生前3个月出现的频次非常高，在分手的那一周达到峰值，并在6个月后恢复到正常基线。\n在表示「即将分手」的「语言标记」中，出现次数比较多的是「我」、「我们」这类字眼，以及暗含认知过程（cognitive processing ）的词汇（常常表示抑郁、高度集中的注意力、探究意义等）。\n分手前后Reddit用户语言模式的变化。第0周是每个用户在分手时公开披露分手的时间点。\n此外，「语言标记」中有关「分析思考」（analytic thinking）的词汇的出现频次会下降，与「分析思考」相关的词汇往往包含更多以个人为中心和非正式的语言。\n研究人员还发现，即使人们在与分手这类话题无关的群组中发帖，上述这种「语言标记」模式仍然存在。\n要注意了！\n与偶尔发一次帖的人相比，那些经常发布分手信息的人在分手一年之后，适应能力会变得很差。\n83%的人都会以第一人称发送第一次分手的信息，并且这些帖子详细描述了分手过程，甚至导致分手的原因和分手的后果都有。\n例如，一位网友通过回忆来讲述自己分手的故事：\n “Hey breakups, going through a rough one this week. The girl I\u0026rsquo;ve been seeing the last 7 months left me last Friday due to us not having common interests.","title":"PNAS | 情侣分手3个月前就有预兆！聊天记录还能反映分手后遗症"},{"content":" 点击上方图片购买课程    Author:小云哥哥\nSrc: https://zhuanlan.zhihu.com/p/386454664\n 历史语言学家有两个基本任务。第一个任务是追溯相关语言的源头——所谓的“原始语言”，说得通俗一点就是推测一下祖先们是怎么说话的。但其实除非有时光机器，否则我们不可能知道祖先的发音，构拟原始语言的最终目的是使用一个自洽的系统去解释现代亲属语言的差异。这个任务是技术活儿，需要硬功夫，语言学家必须对这些语言的各方面都了如指掌，通过多年的时间真正理解这些语言的运作（尤其是音系和形态），而不是一上来就开始尬比较。第二任务是第一个任务的衍生产品。当我们能够解释亲属语言的差异以后，我们自然而然会发现有的语言差异较小，有的语言差异较大，我们会希望知道每种差异发生的时间顺序，从而推断出亲属语言是因循什么轨迹从原始语言中分化出来的。这就是语言的谱系。\n虽然传统的历史语言学取得了非常大的成功，但是语言学家毕竟是人，他们用人力研究为数众多的语言、处理浩如烟海的语料，总会出现这样那样的问题。比如说我们会在不少著作中看到语言学家前后标准不一致，或者分析过程描述不清晰透明等现象。有时候这些问题并不是有意为之，而是因为人确实无法预估那么多的事情，出错在所难免。\n于是，一部分语言学家开始认识到，我们需要一个机器协助的、量化的转变。人的大脑爱耍小聪明，更擅长处理复杂而特殊的个案，而机器更像一个奴隶，可以帮人类用统一的方法处理繁多和重复的工作。那么，历史语言学家的两个任务，机器可以协助我们解决哪一个呢？原始语言的构拟还是语言的谱系？\n事实上，这两个任务都需要很多的小聪明。如果原始语言的构拟是简单的音位比较，那么机器也许可以很快做出来。但实际操作上要比这个绕很多的弯儿，需要语言学家综合知识的灵活运用。比如索绪尔的喉音理论，就需要对梵语动词变位的深入理解，从而比较不同变位模式的内在一致，并且对音变的类型学有融会贯通的了解。这一切的运作，可能在索绪尔的脑子里一秒钟就能形成，而机器则不可能在短时间内完成喉音的构拟。我们引入机器是为了提高效率，而不是降低效率。因此，语言学家把目光转向了第二个任务，语言的谱系。历史语言学确定谱系的唯一标准是共同创新，但辨认共同创新实际上也需要深厚的研究功底，机器很难按照人类的方式分析。一个比较可行的办法是偏离历史语言学的原则，使用统计学的方式，构造出在统计学意义上最可能的谱系。\n在这篇文章中，我就用流水账的方式梳理一下机器协助的语言谱系分析的相关历史，尤其专注于贝叶斯谱系分析。因为是流水账，所以不会分小节，我也会省去所有赶客的公式和理论描述。\n语言谱系分析 较早使用统计学处理语言谱系的研究可以追溯到十九世纪前叶。不过现代的尝试最值得提的是二十世纪二十年代开始的一系列操作。波兰人类学家Czekanowski[1]在1928年收集了二十多个音系、形态和词汇上的特点，研究了包括立陶宛语、古教会斯拉夫语、哥特语、古爱尔兰语、拉丁语、希腊语、吠陀梵语、阿维斯陀语和亚美尼亚语相互之间的关系。他们得出的结果其中一个错误是认为哥特语与波罗地-斯拉夫语更为接近，而不是意大利-凯尔特语。1937年，加州大学的Kroeber和Chrétien[2]在前人的基础上，添加了新的数据（主要是特征性的音变和形态变化方面的数据），使参与比较的特征达到了74个。下图是Kroeber and Chrétien (1937)的统计分析\n Kroeber和Chrétien就是通过判断每一个特征是否在各种语言中出现，列出矩阵计算出各语言的相似度。他们的结果，至少从这九种语言来看，基本上与历史语言学的结果相符。但由于数据本身的局限性，他们的方法并没有被大规模地使用，并且遭到了一些批评。我不知道他们的计算是否用了机器，但是从他们并不复杂的公式来看，可能是笔算的。\n虽然这些早期的尝试寿命并不长，但是也为量化历史语言学定下了统计学的基调，尽管在数据选取上，名义上是使用了历史语言学的结论，但是并没有使用历史语言学的分类标准，而是把这些结论转化成可以用于统计学的数据。这也是从这以后，直至现在将尽一个世纪的趋势。\n La linguistique est la science statistique type ; les statisticiens le savent bien ; la plupart des linguistes l\u0026rsquo;ignorent encore. (Guiraud 1959: 15[3]) 语言学就是典型的统计科学；统计学家心里很清楚，大部分语言学家却不知道。\n \u0026lt;比如\u0026gt;\n基于词汇的语言谱系分析 1950年代，有一个长得有点喜感的中年男人，叫Morris Swadesh。他是一个美国的语言学家。身为一个历史语言学家，他并不把关注的重点放在音系和形态的变化上，而是更专注于词汇。词汇相对于音系和形态，显然是更容易操作的东西，毕竟它们就像拼好的积木，能让人一眼就辨认出来。Morris Swadesh (1909-1967)\n Swadesh认为不同语言中词汇的重合度很可能与语系的演化有关。这点很符合我们的直觉，基因关系较远的语言中，非同源的词汇理应越多。而且，他还假设词汇系统是按一定的速率变化的，我们只要以这个速率为基础，然后比较亲属语言的同源词的多寡，就能得到语言的谱系，同时我们还可以算出亲属语言的分裂时间。Swadesh (1950)[4]认为词汇的变化速率是每过1000年，一种语言想对于原本形态的同源词就会降低到原来的85%。后来这个百分比又被改为81%。 这个数字大概是基于古英语和现代英语的词汇变化确定的。\n核心词汇 我们不可能穷尽所有的词汇，所以就需要选取一些具有代表性的词汇来简化我们的研究。Swadesh整理出一份100词的词表，现在我们称为“核心词汇”或者“基本词汇”，包括身体部位、数字、颜色、基本动作等类别，这些词汇被认为是最不容易被借用的，有较大的概率是本土词汇。\n语言断代学（词汇统计学） 这么一来，如果我们发现两种亲属语言在核心词汇表上有81%的同源词，那么我们就可以认为这两种语言的分化时间是1000年。如果它们有81%×81%=65.61%的同源词，那么它们的分化时间就是2000年。这个方法我们称为Glottochronology，汉语称作“语言断代学”，它也是“词汇统计学”（lexicostatistics）的最主要方法之一。\n为了让故事更连续，我在这里删除了其它的研究方法，比如计算词汇间Levenshtein距离，有关这方面的内容，可以看这个回答。\n总而言之，从Swadesh开始，量化历史语言学基本上就在词汇之间徘徊，人们开始想尽办法从词汇中找到语言发展的轨迹。当然， 也有从音系/形态上考虑的（Ringe et al 2002）[5]，还有从类型学上考虑的（Dunn et al 2008）[6]，但始终无法摆脱或者撼动以词汇为基础的大趋势。\n语言断代学虽然在语言谱系分析的量化上取得了较大的进展，但最终仍被认为是失败的方法。这是因为它强制规定词汇有着固定的变化速率。这一基本假设从直觉上就不符合语言的发展历程，而且没有靠谱的研究去证明，反而很容易被证伪。比如说，我们使用语言年代学的模型，我们会得到格鲁吉亚语和明格列尔语的分化年代距今约1000年左右。但实际上，它们两个的分化年代要远早于公元四到五世纪（Bergsland and Vogt 1962）[7]。Swadesh本人也觉得这个方法有问题。所以逐渐人们也就不再使用语言年代学了。\n语言断代学最大的贡献不在于它得出的结论有多正确，而是让人们看到为语言分化断代的希望，通过语言的年代来研究人类史前史成为了可能，历史语言学不再是自娱自乐地谈论古人怎么说话，而一跃成为了人类历史研究中最重要的学科之一。\n比如说，Gray and Jordan (2000)[8]使用简约分析（parsimony analysis）计算出南岛语的谱系，测试了有关南岛语系起源的两个假说，“快车假说（express-train）”和“岛屿纠缠假说（entangled bank）”。他们发现快车假说与南岛语谱系树惊人吻合，从而确认了南岛语是从台湾省起源，扩散到南部各个岛屿的。\n因为有了成功的希望，所以尽管有很多语言学家对语言的断代嗤之以鼻，另一部分语言学家仍旧在探索着新的道路。我们在这里将跳过一些不太受欢迎的研究方法，比如Ringe et al (2002)和Nakhleh et al (2005)[9]的“完全谱系”（perfect phylogenies）。他们跟二十世纪二三十年代的那帮人类似，使用了音系和形态方面的语料来计算，当然他们的统计学方法要先进得多。只不过，他们处理语料的方式跟前人一样，基本上就是看哪一些特征在哪一些语言中存在，并没有具体到确切的实例。\n语言变化的时钟-宽松时钟 谱系分析始终只是历史语言学家的其中一个任务，更多的历史语言学家喜欢智力游戏，在构拟上下的功夫比较多，对于机器处理的谱系分析的热情没那么高。正在这时，那一边厢，生物学家们正在努力地发展更有效的断代方法。美国亚利桑那大学的演化生物学家Michael Sanderson就是其中一个代表人物。他从1997到2002发表了一系列的论文[10][11]，研究了一些已知的谱系树分支的年龄，认为DNA序列的发展确实是有既定的速率，这个速率是它们内在的“时钟”决定的，在不同的分支中，时钟走动的快慢是有区别的。如果我们把这个思想代入到语言学中，我们就知道，按照Swadesh的语言年代学的方法，词汇的发展被认为有统一的“时钟”，或者叫“分子时钟”（molecular clock），我们称为“严格时钟”（strict clock），而分子生物学的最新假设则是引入了“宽松时钟”（relaxed clock），换成语言学，则是认为词汇在不同语支的替换速率并不统一，而是各有各的速率。顺便一提，Swadesh的语言年代学比分子生物学中的“分子时钟”的提出（Zuckerkandl and Pauling 1965）[12]要早十年左右，但是生物学家在接受新鲜事物和创新方面要比语言学家快得多。在贝叶斯谱系分析中，Thorne et al (1998)[13]和Drummond et al (2006)[14]等人都对严格时钟的框架进行了批评和测试，并发现宽松时钟确实可以更好地模拟真实的演化过程。\n历史语言学最终还是再次向生物学靠拢了。2003年，Gray and Atkinson (2003)[15]在Nature上发表了一篇文章，他们使用了贝叶斯谱系分析计算出了印欧语的谱系树，并如同之前测试南岛民族的演化历程一样，这次他们也用谱系树测试了印欧语起源的两种假说，并表示语言的谱系支持原始印欧人是安纳托利亚的农民这一种看法。下图是Gray and Atkinson (2003)的印欧语谱系树\n 谱系分析算法 那么，语言的贝叶斯谱系分析究竟是怎么进行的呢？就像我们之前说的，词汇仍旧是基础。我们选取一个核心词汇表，然后把词汇表中的词汇翻译成我们需要解决的诸语言。当然，这一切都是建立在我们有合理理由怀疑这些语言是同属一个语系的前提下，否则我们得到的结果就没有意义。把词汇翻译成各种语言以后，我们就开始辨别同源词。我们把每一个义项下的同源词找出来，并把它们配成对儿。下图是词源词典编辑工具Edictor界面下的同源词辨认\n 同一个义项下，不同的语言可能呈现不同的词汇。比如汉语中，表示“EAT”这个义项的词汇在粤语和闽南语中都是来自“食”的同源词（粤语：si̍k，闽南语chia̍h），而普通话中则用“吃”来替代。那么单凭这一个词，我们用人脑都可以算出来，粤语和闽南语应该归在一个分支下，而普通话则应该属于另一个分支。\n我们就这样把数十甚至上百种语言的同源词都标记出来，并且把它们转化为机器可读的形式。那么什么样的形式机器才可读呢？机器是不会管你每个词是怎么发音的，它只想知道某两个词是不是同源词。所以你只需要告诉它哪些词是同源词，哪些不是，就可以了。如果两个词是同源词，那么就标记一个“1”，如果不是就标记一个“0”。所以你就要做一个像下图一样的东西，全是0和1，咱们看不懂，但是机器很容易看懂：\n 看到这里，大家就明白了。贝叶斯谱系分析的数据是“同源关系”，而不是同源词本身。我们把数据喂给电脑，接下来就让电脑处理吧。\n马尔可夫链蒙特卡洛 很多传统语言学家诟病，电脑处理的这个部分不透明，像在黑盒里操作一样，不放心把一切交给程序。为了解除一部分疑虑，我在这里解释一下究竟机器是怎么算谱系树的，当然，为了不赶客，下文中不会出现深奥的东西。\n机器在得到我们这些充满0和1的数据后，会开始使用贝叶斯定理，计算出一棵谱系树的可能性。它会先随机生成一棵谱系树，这棵谱系树正确反映语言谱系的概率可想而知是非常低的，但机器就会根据输入的数据，把这个概率算出来，先记下。然后它就会改变原树的形状，生成一棵新的树，再计算出这棵树正确反映语言谱系的概率算出来，与前一棵树的概率比较。如果前一棵树的概率比较小，那么我们就保留新的这棵树。如果前一棵树的概率较大，那么说明新树比旧树还要差，因此我们就会计算前后两个概率的比值（用新的概率除以旧的概率），得到的就是接受这棵新树的概率。然后机器会一直生成新的树，一直重复着相同的比较和计算，一般我们会让机器重复上千万次的计算，从而保证生成的每一棵树的概率达到一个较为稳定的值。这个过程有个名字，叫马尔可夫链蒙特卡洛（Markov chain Monte Carlo，MCMC）。大家可以看以下这篇文章，对其中的数学做了详细介绍：\nhttps://zhuanlan.zhihu.com/p/420214359\n而今听雨：MCMC与贝叶斯推断简介：从入门到放弃111 赞同 · 16 评论文章\n共识树 计算完了上千万次的树以后，还要进行一个步骤。就是我们需要把前边那些低概率的树删掉一点，或者说“烧掉”（burn-in），这样我们就可以排除掉那些比较糟糕的树。最终留下的带有稳定较高概率的树的集合，就是机器为我们输出的结果。所以，我们在众多有关贝叶斯谱系分析论文中看到的树，都不是一棵树，而是成千上万棵具有相近概率的树相互妥协的结果，我们称为“共识树”（consensus tree）。\n机器计算出的每棵树的分支都有着不同的长度。这些长度跟每一个分支末端的语言年龄是成正比的。也就是说，单凭这些分支的长度，我们只能知道语言之间年龄的比值，而我们想知道的却是它们精确到年的真正年龄。这就需要我们找到一个参考点，或者一个称为prior的东西。Prior可以是对得出最佳谱系有利的任何参考数据，而针对语言谱系的年龄，最理想的prior就是语言被记录的时间。比如，我们知道书面藏语是1300多年前被记录的，那么我们就为书面藏语标记1300年的年龄。这样的信息越多，那么计算出来的年龄就会越准确。软件会结合分支的长度与我们给出的年龄信息，推算出其它语言的年龄。这样我们带有年龄的谱系树就产生了。\nDensitree 即便有了年龄，共识树还是共识树，我们不能把它看作一棵单一的谱系树，这也是许多人看这类文章的误区。其实，除了这棵共识树，机器还能给我们提供另一种树，叫做Densitree。Densitree可以把所有谱系树中冲突的部分可视化，让我们看到究竟哪里出了问题。Densitree看起来还是很美观的， 是无数线条的集合。下图中展示的Sagart et al (2019)[16]汉藏语谱系的Densitree，显示了计算过程中出现的非树形结构。一个完美的树形结构中，每一种语言应该只被一条线连接，但是我们看到在这棵树上，有不少语言被深浅不一的线群连接了，比如比较严重的有Chepang、Tshangla、Dulong等语言。存在这一类非树状信息的一大原因在于我们没有完全正确地辨认同源词，而是被部分表面现象骗了，把借词也算成同源词，也提醒我们重新审视我们的同源词判定。Sagart et al (2019)汉藏语谱系的Densitree\n 所以，我们除了看共识树以外，还要注意看densitree，densitree里有更多有用的信息。大部分人对于贝叶斯谱系分析，或者任何谱系分析的诟病都是基于最后的结论，极少注意到这些研究的数据结构和分析方法，甚至连结论都没有看全。因此，我呼吁大家除了看短短的正文，还要注意看文章的补充材料。\n贝叶斯谱系分析是不是语言学？ 语言学的贝叶斯谱系分析基本上就是如上述方式进行的，希望这样的描述足够通俗易懂。如果你们看懂了，你们可能会产生这一个疑问：究竟贝叶斯谱系分析跟传统历史语言学的结合有多紧密？这样子做出的语言谱系，究竟是不是语言学？\n首先，我们应该明确，至少在语言学上，谱系分析的作用不是告诉我们确切的谱系，而是给我们一个有关语言谱系的参考，是辅助历史语言学研究的工具，而不能代替历史语言学本身。比如说，我们推测出的汉藏语系的谱系可以帮我们确立今后汉藏语系历史语言学研究的大方向，因为我们知道了哪些语言更可能属于同一分支，那么我们就可以根据这些线索和思路有针对性的研究。\n贝叶斯语言谱系分析全过程中跟历史语言学有关的部分当然是前期的数据准备过程。这一过程需要历史语言学家判断同源词。如果研究对象是一个我们了解得比较深入的语系，比如印欧语系，我们判断同源词的标准当然是严格遵守历史语言学的原则的。但如果是像汉藏语系这种我们基本不了解的语系，判断同源词的时候很大程度上是靠猜测，有经验的语言学家比没有经验的一般人猜测的准确率自然会高出不少，但也不能完全保证准确。判断同源词的过程必须主要由人工处理。虽然现在也有不少判断同源词的工具和程序，但这些工具大部分基于词汇的相似性，但同源词、尤其是庞大语系下相距较远语言中的同源词往往不相似。比如拉丁语的duus和亚美尼亚语的erk是同源词，除非能把所有的音变告诉机器，否则机器是不可能把它们俩判断为同源词的。对于超级大的语系，判断同源词的工作可能长达数月，也需要好几个历史语言学家的商量与合作。做好同源词的数据后，我们就把一切复杂的计算交给电脑，等它算个几天，这一部分就脱离了传统语言学，进行纯粹统计学的计算了。\n在得到谱系树之后，我们还可以进行后续的历史语言学研究，并把历史语言学的结论与贝叶斯谱系树进行比较。比如说，Birchall et al (2016)[17]就为Chapacruan语系的语言做了一个贝叶斯谱系分析，并同时使用音变创新手动得出了另一个谱系树，并对两棵树进行了比较研究，发现贝叶斯谱系分析得出的结论与手动做出的谱系树还是比较吻合的。又比如，在Sagart et al (2019)的汉藏语谱系发表后，项目成员又发表了一些后续的历史语言学研究与其遥相呼应，比如Lai et al (2020)[18]对西夏语谱系地位的研究，以及Jacques et Pellard (2021)[19]对羌缅语的分析。\n虽然贝叶斯谱系分析的前前后后都少不了历史语言学的工作，但两者始终没有完全融合在一起，在整个研究中交集并不多，而是有着明显的分工。这一个弱点也经常被人们攻击。而且，贝叶斯谱系分析直到今天，都在使用语言学家们较为不喜欢的核心词汇作为基础，而词汇绝不能与生物学中的DNA序列相提并论，音系和形态才可以。\n那么为什么我们坚持使用词汇呢？我在这里谈两个原因。\n第一，词汇被认为可以涵盖历史语言学的大部分工作，并且容易操作。我们判断同源词的时候，自然要考虑到音变的规律性和对应关系，有时甚至要倒推形态，有时还要进行简单的构拟，这些工作都体现在同源词的判别中，因此我们选用词汇，并不是完全无视传统历史语言学，而是因为词汇的比较是传统历史语言学的“精华”。\n第二，词汇的替换是可以无限进行下去的，而且词汇替换的速率已经被证明可以用一定的模型去模拟。而音变则是比较有方向性的，有的音变一旦发生，可能就没办法回头了，比如p \u0026gt; f的音变很容易发生，而f \u0026gt; p的音变则极少发生。另外，音变可以很快，也可以很慢，它们究竟能不能模拟也是一大问题。\n因此，大部分语言学家在谱系分析时，都在如何更好地标记词汇上下功夫。以同源词关系为基础的谱系分析可以在较大的语系下取得成功，但如果我们要研究时间深度较浅的小分支，很可能就没那么得心应手了。\n比如我们要研究官话的谱系，大部分官话的核心词汇都差不多，词汇替换的现象比较少，那么我们喂给机器的数据库可能大部分都是“1”，这样我们可能会得到许多平行的分支，而不是一棵有结构的树。用贝叶斯谱系分析做出的官话谱系，可能不会比白一平（2006）[20]用最大简约法做出的官话谱系进步多少。再者，目前的贝叶斯分析也并非能对大语系完全掌控，比如说，Gray and Atkinson (2003)的印欧语谱系树最让人看不过眼的一点就是斯拉夫语的分类，大家可以自行上滑到他们的印欧语谱系树上，找找波兰语在哪里。\n再举一个极端的例子，假设两种语言互相不能通话（发生了重要的音变），但所有核心词汇都是同源词，没有发生词汇替换，那么机器将认为这两种语言是同一种语言。尽管这样极端的情况在现实世界中不会发生，尽管每一种研究方法都有它的不足之处，但我们应该事先考虑到突发状况的解决办法。这就是未来我们需要解决的问题。\n贝叶斯谱系分析在语言学上的应用已经差不多二十年了，但这二十年间，研究方法上的突破并不显著。人们当然知道这样的分析存在的问题，但是实际研究上，却很难去解决。比如在词汇替换中，有一种情况可能只有词汇的一部分被替换了，那么我们究竟是赋“1”呢，还是赋“0”呢？Hill and List (2017)[21]倒是提出了一个解决方案，他们开发了“部分同源词”（partial cognate）的标记方法，这种方法支持把一个词拆开，只标记同源的部分。如下图中，缅语支诸语言的“羽毛”一词，都可以分析称两个词素，我们可以把这两个词素拆开，分别标记同源关系。\n 部分同源词的标记实际上已经向基于形态的谱系分析迈进了一步，虽然它并没有真正触及到复杂的形态变化，但至少在尝试为合成词的问题寻求合理的解决方法。部分同源词的标记通过实验证明是可行的，但是目前并没有很多真枪实弹的研究成果发表出来。\n如果没有部分同源词的标记，贝叶斯谱系分析其实已经开始变得有点无聊，即便有了部分同源词标记，也并不能把它的有趣续命太久，毕竟这一步迈得也不大。当我们知道一个方法远没有达到理想的程度，但又不断原地打转时，我们就会自然而然地感到焦虑。\n未来的贝叶斯谱系分析的重点必然在于我们处理数据的方式，如何融入更多的历史语言学原则是我们需要思考的。在上文中，我们已经提到，目前声称把语言学和贝叶斯谱系结合在一起的研究无非就是分别用贝叶斯做一个，再用语言学做一个，然后再进行定性的比较。这种方法是绝不能让人满意的。我们需要更加无缝的衔接。\n另外，回归到1930年代或者Ringe et al (2002)和Nakhleh et al (2005)的“完全谱系”那种基于音系和形态特征的谱系分析似乎也是不可取的。因为这些研究对具体数据的处理完全不够，仅仅是从前人的作品里选出一部分可能对分类有用的特征进行计算，这中间仍会有许多不清晰的地方。\n最理想的情景是从语料入手，自然地融入同源词判定以及音系、形态上的创新，让机器根据各语言创新的情况来计算出谱系树。这样不仅仅能大大增加研究的客观性和透明性——单纯的同源词判定的主观因素占比非常严重，而使用创新为依据可以让读者更直接地找出潜在的问题，而且可以让谱系分析有更强大的理论背景。\n最后 恰好，昨天（2021年7月6日），我在我们所的部门会议上谈到了这个问题，Gray and Atkinson (2003)的作者之一，Russell Gray，也是我们的部门主任，也谈了他的想法。他非常愿意看到新的贝叶斯谱系的方案，不过他承认即便在印欧语的谱系研究中，完全融合语言各层面的数据也是极难做到的。我解释道我不是想完全放弃以词汇的同源关系为基础的谱系分析，而是希望能通过音系和形态，去检验词汇同源关系所无法得到的细节。我的预感是，如果我们融入了音系/形态的创新，得出的结果中，非树状信号会大大减少，并帮我们检查同源词判定究竟在哪里出现了问题。\n流水账就写到这里吧。我想大家在这篇流水账中看到的中心思想，是通过量化谱系分析的发展史，看到研究方法一步一步的变迁，以及它们遇到的困难和存在的问题。我们应该知道，评价这类研究的重点在于它们的方法，而不仅仅局限于结论——因为结论必然是有问题的，即便我们得到了一棵完美全对的谱系树，它仍旧是存在问题的，因为它并非完全基于历史语言学理论，而很大程度基于概率，它的完美只是概率问题（有时候太漂亮的结果，也是我们担心的来源之一）。只有对数据处理的方法不断地改进，才有可能把我们带向最真实的谱系分析。\n谱系分析是历史语言学研究中的一个强大的辅助，尤其是它自带断代的特征，可以让我们更好地追溯人类的历史。因此今后的历史语言学家对机器协助的谱系研究会更加上心，争取让既有的历史语言学理论与新兴的技术更加默契地配合。这也是我的愿望列表上的一项，在今后数年的研究中会作出各种各样的尝试。\n参考  Jan Czekanowski, Na Marginesie Recenzji P. K. Moszyiskiego o Ksigtce: Wstep do Historji Slowian. Lud, Series II, vol. VII (1928). Kroeber, A., \u0026amp; Chrétien, C. (1937). Quantitative Classification of Indo-European Languages. Language, 13(2), 83-103. doi:10.2307/408715 Guiraud, Pierre (1959), Problèmes et méthodes de la statistique linguistique, D. Reidel, Publishing Company, Dordrecht, Holland. Swadesh, M. (1950). Salish internal relationships. International Journal of American Linguistics, 16(4), 157-167. Ringe, D., Warnow, T., \u0026amp; Taylor, A. (2002). Indo‐European and computational cladistics. Transactions of the philological society, 100(1), 59-129. Dunn, M., Levinson, S. C., Lindström, E., Reesink, G., \u0026amp; Terrill, A. (2008). Structural phylogeny in historical linguistics: Methodological explorations applied in Island Melanesia. Language, 710-759. Bergsland, K., \u0026amp; Vogt, H. (1962). On the validity of glottochronology. Current anthropology, 3(2), 115-153. Gray, R. D., \u0026amp; Jordan, F. M. Language trees support the express-train sequence of Austronesian expansion, 2000. Nature, 405, 1052. Nakhleh, L., Ringe, D., \u0026amp; Warnow, T. (2005). Perfect phylogenetic networks: A new methodology for reconstructing the evolutionary history of natural languages. Language, 382-420. Sanderson, M. J. (1997). A nonparametric approach to estimating divergence times in the absence of rate constancy. Molecular biology and evolution, 14(12), 1218-1231. Sanderson, M. 2002 Estimating absolute rates of evo- lution and divergence times: a penalized likelihood approach. Mol. Biol. Evol. 19, 101–109. Zuckerkandl, E., \u0026amp; Pauling, L. (1965). Evolutionary divergence and convergence in proteins. In Evolving genes and proteins (pp. 97-166). Academic Press. Thorne, J. L., Kishino, H., \u0026amp; Painter, I. S. (1998). Estimating the rate of evolution of the rate of molecular evolution. Molecular biology and evolution, 15(12), 1647-1657. Drummond, A. J., Ho, S. Y. W., Phillips, M. J. \u0026amp; Rambaut, A. 2006 Relaxed phylogenies and dating with confidence. PLoS Biol. 4, e88. 699 – 710. (doi:10.1371/ journal.pbio.0040088) Gray, R. D., \u0026amp; Atkinson, Q. D. (2003). Language-tree divergence times support the Anatolian theory of Indo-European origin. Nature, 426(6965), 435-439. Sagart, L., Jacques, G., Lai, Y., Ryder, R. J., Thouzeau, V., Greenhill, S. J., \u0026amp; List, J. M. (2019). Dated language phylogenies shed light on the ancestry of Sino-Tibetan. Proceedings of the National Academy of Sciences, 116(21), 10317-10322. Birchall, J., Dunn, M., \u0026amp; Greenhill, S. J. (2016). A combined comparative and phylogenetic analysis of the Chapacuran language family. International Journal of American Linguistics, 82(3), 255-284. Lai, Yunfan., Gong, Xun., Gates, Jesse. P., \u0026amp; Jacques, Guillaume. (2020). Tangut as a West Gyalrongic language. Folia Linguistica Historica, 54(s41), 171-203. Jacques, G., \u0026amp; Pellard, T. (2021). Phylogenies based on lexical innovations refute the Rung hypothesis. Diachronica, 38(1), 1-24. Baxter, W. H. (2006). Mandarin dialect phylogeny. Cahiers de linguistique-Asie orientale, 35(1), 71-114. Hill, N. W., \u0026amp; List, J. M. (2017, September). Challenges of annotation and analysis in computer-assisted language comparison: A case study on Burmish languages. In Yearbook of the Poznan Linguistic Meeting (Vol. 3, No. 1, pp. 47-76). De Gruyter Open.  ","permalink":"/blog/quantlang/","summary":"点击上方图片购买课程    Author:小云哥哥\nSrc: https://zhuanlan.zhihu.com/p/386454664\n 历史语言学家有两个基本任务。第一个任务是追溯相关语言的源头——所谓的“原始语言”，说得通俗一点就是推测一下祖先们是怎么说话的。但其实除非有时光机器，否则我们不可能知道祖先的发音，构拟原始语言的最终目的是使用一个自洽的系统去解释现代亲属语言的差异。这个任务是技术活儿，需要硬功夫，语言学家必须对这些语言的各方面都了如指掌，通过多年的时间真正理解这些语言的运作（尤其是音系和形态），而不是一上来就开始尬比较。第二任务是第一个任务的衍生产品。当我们能够解释亲属语言的差异以后，我们自然而然会发现有的语言差异较小，有的语言差异较大，我们会希望知道每种差异发生的时间顺序，从而推断出亲属语言是因循什么轨迹从原始语言中分化出来的。这就是语言的谱系。\n虽然传统的历史语言学取得了非常大的成功，但是语言学家毕竟是人，他们用人力研究为数众多的语言、处理浩如烟海的语料，总会出现这样那样的问题。比如说我们会在不少著作中看到语言学家前后标准不一致，或者分析过程描述不清晰透明等现象。有时候这些问题并不是有意为之，而是因为人确实无法预估那么多的事情，出错在所难免。\n于是，一部分语言学家开始认识到，我们需要一个机器协助的、量化的转变。人的大脑爱耍小聪明，更擅长处理复杂而特殊的个案，而机器更像一个奴隶，可以帮人类用统一的方法处理繁多和重复的工作。那么，历史语言学家的两个任务，机器可以协助我们解决哪一个呢？原始语言的构拟还是语言的谱系？\n事实上，这两个任务都需要很多的小聪明。如果原始语言的构拟是简单的音位比较，那么机器也许可以很快做出来。但实际操作上要比这个绕很多的弯儿，需要语言学家综合知识的灵活运用。比如索绪尔的喉音理论，就需要对梵语动词变位的深入理解，从而比较不同变位模式的内在一致，并且对音变的类型学有融会贯通的了解。这一切的运作，可能在索绪尔的脑子里一秒钟就能形成，而机器则不可能在短时间内完成喉音的构拟。我们引入机器是为了提高效率，而不是降低效率。因此，语言学家把目光转向了第二个任务，语言的谱系。历史语言学确定谱系的唯一标准是共同创新，但辨认共同创新实际上也需要深厚的研究功底，机器很难按照人类的方式分析。一个比较可行的办法是偏离历史语言学的原则，使用统计学的方式，构造出在统计学意义上最可能的谱系。\n在这篇文章中，我就用流水账的方式梳理一下机器协助的语言谱系分析的相关历史，尤其专注于贝叶斯谱系分析。因为是流水账，所以不会分小节，我也会省去所有赶客的公式和理论描述。\n语言谱系分析 较早使用统计学处理语言谱系的研究可以追溯到十九世纪前叶。不过现代的尝试最值得提的是二十世纪二十年代开始的一系列操作。波兰人类学家Czekanowski[1]在1928年收集了二十多个音系、形态和词汇上的特点，研究了包括立陶宛语、古教会斯拉夫语、哥特语、古爱尔兰语、拉丁语、希腊语、吠陀梵语、阿维斯陀语和亚美尼亚语相互之间的关系。他们得出的结果其中一个错误是认为哥特语与波罗地-斯拉夫语更为接近，而不是意大利-凯尔特语。1937年，加州大学的Kroeber和Chrétien[2]在前人的基础上，添加了新的数据（主要是特征性的音变和形态变化方面的数据），使参与比较的特征达到了74个。下图是Kroeber and Chrétien (1937)的统计分析\n Kroeber和Chrétien就是通过判断每一个特征是否在各种语言中出现，列出矩阵计算出各语言的相似度。他们的结果，至少从这九种语言来看，基本上与历史语言学的结果相符。但由于数据本身的局限性，他们的方法并没有被大规模地使用，并且遭到了一些批评。我不知道他们的计算是否用了机器，但是从他们并不复杂的公式来看，可能是笔算的。\n虽然这些早期的尝试寿命并不长，但是也为量化历史语言学定下了统计学的基调，尽管在数据选取上，名义上是使用了历史语言学的结论，但是并没有使用历史语言学的分类标准，而是把这些结论转化成可以用于统计学的数据。这也是从这以后，直至现在将尽一个世纪的趋势。\n La linguistique est la science statistique type ; les statisticiens le savent bien ; la plupart des linguistes l\u0026rsquo;ignorent encore. (Guiraud 1959: 15[3]) 语言学就是典型的统计科学；统计学家心里很清楚，大部分语言学家却不知道。\n \u0026lt;比如\u0026gt;\n基于词汇的语言谱系分析 1950年代，有一个长得有点喜感的中年男人，叫Morris Swadesh。他是一个美国的语言学家。身为一个历史语言学家，他并不把关注的重点放在音系和形态的变化上，而是更专注于词汇。词汇相对于音系和形态，显然是更容易操作的东西，毕竟它们就像拼好的积木，能让人一眼就辨认出来。Morris Swadesh (1909-1967)\n Swadesh认为不同语言中词汇的重合度很可能与语系的演化有关。这点很符合我们的直觉，基因关系较远的语言中，非同源的词汇理应越多。而且，他还假设词汇系统是按一定的速率变化的，我们只要以这个速率为基础，然后比较亲属语言的同源词的多寡，就能得到语言的谱系，同时我们还可以算出亲属语言的分裂时间。Swadesh (1950)[4]认为词汇的变化速率是每过1000年，一种语言想对于原本形态的同源词就会降低到原来的85%。后来这个百分比又被改为81%。 这个数字大概是基于古英语和现代英语的词汇变化确定的。\n核心词汇 我们不可能穷尽所有的词汇，所以就需要选取一些具有代表性的词汇来简化我们的研究。Swadesh整理出一份100词的词表，现在我们称为“核心词汇”或者“基本词汇”，包括身体部位、数字、颜色、基本动作等类别，这些词汇被认为是最不容易被借用的，有较大的概率是本土词汇。\n语言断代学（词汇统计学） 这么一来，如果我们发现两种亲属语言在核心词汇表上有81%的同源词，那么我们就可以认为这两种语言的分化时间是1000年。如果它们有81%×81%=65.61%的同源词，那么它们的分化时间就是2000年。这个方法我们称为Glottochronology，汉语称作“语言断代学”，它也是“词汇统计学”（lexicostatistics）的最主要方法之一。\n为了让故事更连续，我在这里删除了其它的研究方法，比如计算词汇间Levenshtein距离，有关这方面的内容，可以看这个回答。\n总而言之，从Swadesh开始，量化历史语言学基本上就在词汇之间徘徊，人们开始想尽办法从词汇中找到语言发展的轨迹。当然， 也有从音系/形态上考虑的（Ringe et al 2002）[5]，还有从类型学上考虑的（Dunn et al 2008）[6]，但始终无法摆脱或者撼动以词汇为基础的大趋势。","title":"量化历史语言学-贝叶斯语言谱系分析"},{"content":" 点击上方图片购买课程   dvt https://github.com/distant-viewing/dvt\nThe Distant TV Toolkit 由几个 Python 包组成，旨在促进视觉文化的计算分析。 开始使用该工具包的最简单方法是在 Google 的协作 (Colab) 环境中运行该工具包。 这是一项免费使用的服务，允许您以最少的设置在远程服务器上运行 Python 代码。\n OpenPifPaf   OpenPifPaf：用于语义关键点检测和时空关联的复合字段\n  OpenPifPaf: Composite Fields for Semantic Keypoint Detection and Spatio-Temporal Association\n  许多图像分析任务需要准确了解人在图像框架内的位置。 我们可以通过使用关键点检测（远景工具包中包含的另一种算法）来获取有关帧中人物位置的更多信息。 在这里，我们检测图像中人物的关键点（与人体相关的点）\n sherlock https://github.com/sherlock-project/sherlock\n通过社交网络上的用户名追捕社交媒体帐户\nkivy https://github.com/kivy/kivy\n用 Python 编写的开源 UI 框架，可在 Windows、Linux、macOS、Android 和 iOS 上运行\n snscrape https://github.com/JustAnotherArchivist/snscrape\nPython 中的社交网络服务爬虫\npy-pkgs https://py-pkgs.org/\nPython 包是 Python 编程语言的核心元素，也是您在 Python 中创建有组织、可重用和可共享的代码的方式。 Python Packages 是一本开源书籍，描述了用于创建 Python 包的现代高效工作流程。\n cdlib https://github.com/GiulioRossetti/cdlib\nPython社区发现算法包\npapertime.app https://papertime.app/\n计算机科学论文摘要播音\nleafletjs https://leafletjs.com/\n网页html中可插入地图JS， 显示经纬度对应的地图\n","permalink":"/blog/techweekly09/","summary":"点击上方图片购买课程   dvt https://github.com/distant-viewing/dvt\nThe Distant TV Toolkit 由几个 Python 包组成，旨在促进视觉文化的计算分析。 开始使用该工具包的最简单方法是在 Google 的协作 (Colab) 环境中运行该工具包。 这是一项免费使用的服务，允许您以最少的设置在远程服务器上运行 Python 代码。\n OpenPifPaf   OpenPifPaf：用于语义关键点检测和时空关联的复合字段\n  OpenPifPaf: Composite Fields for Semantic Keypoint Detection and Spatio-Temporal Association\n  许多图像分析任务需要准确了解人在图像框架内的位置。 我们可以通过使用关键点检测（远景工具包中包含的另一种算法）来获取有关帧中人物位置的更多信息。 在这里，我们检测图像中人物的关键点（与人体相关的点）\n sherlock https://github.com/sherlock-project/sherlock\n通过社交网络上的用户名追捕社交媒体帐户\nkivy https://github.com/kivy/kivy\n用 Python 编写的开源 UI 框架，可在 Windows、Linux、macOS、Android 和 iOS 上运行\n snscrape https://github.com/JustAnotherArchivist/snscrape\nPython 中的社交网络服务爬虫\npy-pkgs https://py-pkgs.org/\nPython 包是 Python 编程语言的核心元素，也是您在 Python 中创建有组织、可重用和可共享的代码的方式。 Python Packages 是一本开源书籍，描述了用于创建 Python 包的现代高效工作流程。","title":"TechWeekly-09| 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   Introduction to Cultural Analytics \u0026amp; Python Designed by Melanie Walsh // Powered by Jupyter Book\n该项目仓库托管了在线教科书 Introduction to Cultural Analytics \u0026amp; Python 里的代码，主要面向人文社科人群设计的Python编程语言书\n这本书展示了如何使用 Python 来研究文化领域的数据，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。\n这些材料最初是为了支持“文化分析简介：数据、计算和文化”，这是康奈尔大学和华盛顿大学教授的本科课程。\n# 章节列表 ## 数据集 ## 命令行 Python语法  安装Python 如何使用Jupyter Notebook 变量 数据类型 字符串方法 比较逻辑运算 循环 函数 文件编码 常见Python错误 Jupyter使用技巧   数据分析  Pandas基本操作 合并数据   数据采集  法律风险 网络爬虫 API 案例-采集歌词 案例-twitter 案例-Reddit   文本分析  TF-IDf 情感分析 话题模型 命名实体识别 词性   网络分析  bokeh网络可视化   资料下载 https://github.com/hiDaDeng/Intro-Cultural-Analytics/archive/refs/heads/master.zip\n","permalink":"/blog/cultureanalysis/","summary":"点击上方图片购买课程   Introduction to Cultural Analytics \u0026amp; Python Designed by Melanie Walsh // Powered by Jupyter Book\n该项目仓库托管了在线教科书 Introduction to Cultural Analytics \u0026amp; Python 里的代码，主要面向人文社科人群设计的Python编程语言书\n这本书展示了如何使用 Python 来研究文化领域的数据，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。\n这些材料最初是为了支持“文化分析简介：数据、计算和文化”，这是康奈尔大学和华盛顿大学教授的本科课程。\n# 章节列表 ## 数据集 ## 命令行 Python语法  安装Python 如何使用Jupyter Notebook 变量 数据类型 字符串方法 比较逻辑运算 循环 函数 文件编码 常见Python错误 Jupyter使用技巧   数据分析  Pandas基本操作 合并数据   数据采集  法律风险 网络爬虫 API 案例-采集歌词 案例-twitter 案例-Reddit   文本分析  TF-IDf 情感分析 话题模型 命名实体识别 词性   网络分析  bokeh网络可视化   资料下载 https://github.","title":"Python与文化分析入门"},{"content":" 点击上方图片购买课程   文化分析\u0026amp;Python https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html\n本书对应于康奈尔大学和华盛顿大学教授的本科课程《文化分析简介：数据、计算和文化》，主要介绍了如何使用 Python 来研究文化材料，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。\n这些材料最初是为了支持“”，这是。\n 什么是文化分析？  文化分析是用计算方法研究文化。 文化是一个广义的术语，包括文学、历史、政治、艺术、音乐、社交媒体等等。 文化分析是数字人文和信息科学等领域不断发展的研究领域。\n 计算和推理思维:数据科学基础  Computational and Inferential Thinking: The Foundations of Data Science\n https://inferentialthinking.com/chapters/intro.html\n加州大学伯克利分校数据科学基础课程结合了三个观点：推理思维、计算思维和现实世界的相关性。 给定来自某些现实世界现象的数据，如何分析该数据以了解该现象？ 该课程教授计算机编程和统计推断方面的关键概念和技能，并结合对现实世界数据集的动手分析，包括经济数据、文档集、地理数据和社交网络。 它深入探讨了围绕数据分析的社会问题，例如隐私和设计。该课程是与伯克利数据科学部合作提供的。\n使用 PySAL 和 PyData 堆栈的地理数据科学¶ https://geographicdata.science/book/intro.html\n地理数据无处不在。总体而言，社会过程、物理环境和个人行为在其地理模式、结构和间隔方面表现出惊人的规律性。随着与这些系统相关的数据在范围、强度和深度上的增长，从位置等常见地理属性中提取有意义的见解变得更加重要，而且如何利用标准数据科学中不太常见的拓扑属性（例如关系）也变得更加重要。\n本书介绍了一种思考地理挑战的新方法， 如空间自相关(Spatial Autocorrelation)、点模式分析(Point Pattern Analysis)。使用地理分析和计算推理，它向读者展示了如何解开隐藏在数据中的新见解。本书围绕 Python 中可用的优秀数据科学环境构建，提供示例和工作分析供读者复制、适应、扩展和改进。\n 心理科学Python编程 https://lukas-snoek.com/introPy/index.html\n阿姆斯特丹大学为心理学硕士研究生开设的，是为期 4 周的“心理科学编程”课程的一部分，从两周的 R 编程开始，之后学生可以在剩下的两周内选择两个主题之一：高级 R 或 Python/PsychoPy（本课程） 。因此，本 Python/PsychoPy 课程假设学生熟悉基本的编程概念（例如条件、循环和函数）。 在本课程的第 1 周，我们将深入研究 Python 特定的主题（至少与 R 相比），例如面向对象编程和最重要的数据处理包（包括 pandas、numpy 和 matplotlib）。 在第 2 周，我们将讨论如何使用 PsychoPy 软件包通过其图形界面 (Builder) 和 Python 界面 (Coder) 创建实验。\nOpenPifPaf：用于语义关键点检测和时空关联的复合字段  OpenPifPaf: Composite Fields for Semantic Keypoint Detection and Spatio-Temporal Association   经济和金融领域的 Python 编程 https://quantecon.org/python-lectures/\n https://python.quantecon.org/intro.html\n 信用卡欺诈机器学习识别 https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html\nML 技术在支付卡欺诈检测系统中的集成大大提高了它们更有效地检测欺诈的能力，并协助支付处理中介识别非法交易。尽管近年来欺诈交易的数量不断增加，但欺诈造成的损失百分比在 2016 年开始下降，这是与 ML 解决方案越来越多地采用相关的反向趋势。 [rep19]。除了帮助节省资金外，实施基于机器学习的欺诈检测系统如今已成为机构和公司赢得客户信任的必要条件。\n在这个用于卡欺诈检测的机器学习新领域中，一个被广泛认可和反复出现的问题是关于该主题 [LJ20,PP19,PL18,ZAM+16] 发表的大多数研究工作缺乏可重复性。一方面，支付卡交易数据缺乏可用性，出于保密原因不能公开共享。另一方面，作者没有做出足够的努力来提供他们的代码并使他们的结果可重现。\n本书所介绍的一些技术，例如处理类别不平衡、模型集成或概念漂移的技术，被广泛认为是信用卡欺诈检测系统设计的重要组成部分。我们还涵盖了我们认为值得更多关注的记录较少的主题。其中包括建模过程的特定设计方面，例如性能指标和验证策略的选择，以及有前景的预处理和学习策略，例如特征嵌入、主动学习和迁移学习。虽然本书侧重于支付卡欺诈，但我们相信本书中介绍的大多数技术和讨论对从事更广泛的欺诈检测主题的其他从业者有用。\n音乐分类：超越监督学习，走向现实世界的应用 https://music-classification.github.io/tutorial/landing-page.html\n音乐分类是一项音乐信息检索 (MIR) 任务，其目标是对音乐语义的计算理解。 对于给定的歌曲，分类器预测相关的音乐属性。 根据任务定义，分类任务几乎是无限的——从流派、情绪和乐器到更广泛的概念，包括音乐相似性和音乐偏好。 检索到的信息可以进一步用于许多应用，包括音乐推荐、策展、播放列表生成和语义搜索。\n ","permalink":"/blog/course_recommendation/","summary":"点击上方图片购买课程   文化分析\u0026amp;Python https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html\n本书对应于康奈尔大学和华盛顿大学教授的本科课程《文化分析简介：数据、计算和文化》，主要介绍了如何使用 Python 来研究文化材料，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。\n这些材料最初是为了支持“”，这是。\n 什么是文化分析？  文化分析是用计算方法研究文化。 文化是一个广义的术语，包括文学、历史、政治、艺术、音乐、社交媒体等等。 文化分析是数字人文和信息科学等领域不断发展的研究领域。\n 计算和推理思维:数据科学基础  Computational and Inferential Thinking: The Foundations of Data Science\n https://inferentialthinking.com/chapters/intro.html\n加州大学伯克利分校数据科学基础课程结合了三个观点：推理思维、计算思维和现实世界的相关性。 给定来自某些现实世界现象的数据，如何分析该数据以了解该现象？ 该课程教授计算机编程和统计推断方面的关键概念和技能，并结合对现实世界数据集的动手分析，包括经济数据、文档集、地理数据和社交网络。 它深入探讨了围绕数据分析的社会问题，例如隐私和设计。该课程是与伯克利数据科学部合作提供的。\n使用 PySAL 和 PyData 堆栈的地理数据科学¶ https://geographicdata.science/book/intro.html\n地理数据无处不在。总体而言，社会过程、物理环境和个人行为在其地理模式、结构和间隔方面表现出惊人的规律性。随着与这些系统相关的数据在范围、强度和深度上的增长，从位置等常见地理属性中提取有意义的见解变得更加重要，而且如何利用标准数据科学中不太常见的拓扑属性（例如关系）也变得更加重要。\n本书介绍了一种思考地理挑战的新方法， 如空间自相关(Spatial Autocorrelation)、点模式分析(Point Pattern Analysis)。使用地理分析和计算推理，它向读者展示了如何解开隐藏在数据中的新见解。本书围绕 Python 中可用的优秀数据科学环境构建，提供示例和工作分析供读者复制、适应、扩展和改进。\n 心理科学Python编程 https://lukas-snoek.com/introPy/index.html\n阿姆斯特丹大学为心理学硕士研究生开设的，是为期 4 周的“心理科学编程”课程的一部分，从两周的 R 编程开始，之后学生可以在剩下的两周内选择两个主题之一：高级 R 或 Python/PsychoPy（本课程） 。因此，本 Python/PsychoPy 课程假设学生熟悉基本的编程概念（例如条件、循环和函数）。 在本课程的第 1 周，我们将深入研究 Python 特定的主题（至少与 R 相比），例如面向对象编程和最重要的数据处理包（包括 pandas、numpy 和 matplotlib）。 在第 2 周，我们将讨论如何使用 PsychoPy 软件包通过其图形界面 (Builder) 和 Python 界面 (Coder) 创建实验。","title":"免费社科类Python编程课程列表"},{"content":" 点击上方图片购买课程   OCRmyPDF https://github.com/ocrmypdf/OCRmyPDF\nOCRmyPDF 为扫描的 PDF 文件添加了 OCR 文本层，允许搜索或复制粘贴它们。\n matplotx https://github.com/nschloe/matplotx\nMatplotlib扩展库，可以提供更多样式，简化样式设定\n download https://github.com/choldgraf/download\n在线文件下载模块, 默认含进度条\nfrom download import download path = download(url, path, progressbar=True) \nbirdseye https://github.com/alexmojaki/birdseye\nBirdeye 是一个 Python 调试器，它记录函数调用中表达式的值，并让您在函数退出后轻松查看它们。 例如：\n python-pinyin https://github.com/mozillazg/python-pinyin\n汉语转拼音的 Python 库，将汉字转为拼音,可以用于汉字注音、排序、检索。\n\u0026gt;\u0026gt;\u0026gt; from pypinyin import pinyin, lazy_pinyin, Style \u0026gt;\u0026gt;\u0026gt; pinyin(\u0026#39;中心\u0026#39;) [[\u0026#39;zhōng\u0026#39;], [\u0026#39;xīn\u0026#39;]] \u0026gt;\u0026gt;\u0026gt; pinyin(\u0026#39;中心\u0026#39;, heteronym=True) # 启用多音字模式 [[\u0026#39;zhōng\u0026#39;, \u0026#39;zhòng\u0026#39;], [\u0026#39;xīn\u0026#39;]] \u0026gt;\u0026gt;\u0026gt; pinyin(\u0026#39;中心\u0026#39;, style=Style.TONE3, heteronym=True) [[\u0026#39;zhong1\u0026#39;, \u0026#39;zhong4\u0026#39;], [\u0026#39;xin1\u0026#39;]] \ntextnets https://github.com/jboynyc/textnets\n利用网络做文本分析，可以参考这篇技术文 PNAS | 文本网络分析\u0026amp;文化桥梁Python代码实现\n尽管网络分析通常用于描述人与人之间的关系——尤其是在社会科学中——但它也可以应用于词之间的关系。例如，网络关系可以通过文档中单个单词的共现来创建，或者可以使用双模式网络投影在文档之间创建关系。\n基于网络的自动文本分析方法的优点是\n 像社会群体一样，可以通过三元闭包更准确地测量词组的含义——或者任何两个词或术语相互的含义的原则如果将它们放在第三个词的上下文中，可以更准确地理解； 文本网络可以应用于任何长度的文档，这与通常需要大量单词才能正常运行的主题模型不同。在简短的社交媒体文本变得普遍的时代，这是一个显着的优势。 最后，这种方法受益于社区检测跨学科文献的最新进展，可以说它提供了更准确的单词分组方法，这些方法受益于网络内观察到的聚类，而不是词袋模型。    whoogle-search whoogle-search是一款可以自己架设，能够爬取谷歌搜索结果、无广告、不追踪、保护隐私的搜索引擎工具。\nwhoogle-search的安装部署方式非常丰富而且简单，可以通过Docker、Heroku、pip、手动等方式进行安装配置。\n安装之后配置相应的ip和端口就可以启动whoogle-search服务。\n以pip安装配置为例。\n安装\npip install whoogle-search 启动服务\nwhoogle-search --host \u0026lt;your ip\u0026gt; --port \u0026lt;your port\u0026gt;   poetry https://github.com/python-poetry/poetry\n类似于pip，可以对python的项目进行包管理。\nfuturecoder https://github.com/alexmojaki/futurecoder\n交互式学习Python，供人们自学 Python 编程，尤其是完全的编程初学者。 它经过精心设计，可减少挫折感并指导用户，同时确保他们学习如何解决问题。 目标是让尽可能多的人学习编程。\n attrs https://github.com/python-attrs/attrs\n没有样板的 Python 类, 主要目标是帮助您编写简洁且正确的软件，且不会减慢您的代码速度。案例引自\n 作者：小明 链接：https://zhuanlan.zhihu.com/p/34963159 来源：知乎\n class Product(object): def __init__(self, id, author_id, category_id, brand_id, spu_id, title, item_id, n_comments): self.id = id self.author_id = author_id self.category_id = category_id self.brand_id = brand_id self.spu_id = spu_id self.title = title self.item_id = item_id self.n_comments = n_comments 如果用attrs，代码会更简洁\nimport attr @attr.s(hash=True) class Product(object): id = attr.ib() author_id = attr.ib() brand_id = attr.ib() spu_id = attr.ib() title = attr.ib(repr=False, cmp=False, hash=False) item_id = attr.ib(repr=False, cmp=False, hash=False) n_comments = attr.ib(repr=False, cmp=False, hash=False) \nbacktrader https://github.com/mementum/backtrader\n投资测量Python回测框架\nfrom datetime import datetime import backtrader as bt class SmaCross(bt.SignalStrategy): def __init__(self): sma1, sma2 = bt.ind.SMA(period=10), bt.ind.SMA(period=30) crossover = bt.ind.CrossOver(sma1, sma2) self.signal_add(bt.SIGNAL_LONG, crossover) cerebro = bt.Cerebro() cerebro.addstrategy(SmaCross) data0 = bt.feeds.YahooFinanceData(dataname=\u0026#39;MSFT\u0026#39;, fromdate=datetime(2011, 1, 1), todate=datetime(2012, 12, 31)) cerebro.adddata(data0) cerebro.run() cerebro.plot() \nautopep8 https://github.com/hhatto/autopep8\n一种自动格式化 Python 代码以符合 PEP 8 样式指南的工具。\n","permalink":"/blog/techweekly08/","summary":"点击上方图片购买课程   OCRmyPDF https://github.com/ocrmypdf/OCRmyPDF\nOCRmyPDF 为扫描的 PDF 文件添加了 OCR 文本层，允许搜索或复制粘贴它们。\n matplotx https://github.com/nschloe/matplotx\nMatplotlib扩展库，可以提供更多样式，简化样式设定\n download https://github.com/choldgraf/download\n在线文件下载模块, 默认含进度条\nfrom download import download path = download(url, path, progressbar=True) \nbirdseye https://github.com/alexmojaki/birdseye\nBirdeye 是一个 Python 调试器，它记录函数调用中表达式的值，并让您在函数退出后轻松查看它们。 例如：\n python-pinyin https://github.com/mozillazg/python-pinyin\n汉语转拼音的 Python 库，将汉字转为拼音,可以用于汉字注音、排序、检索。\n\u0026gt;\u0026gt;\u0026gt; from pypinyin import pinyin, lazy_pinyin, Style \u0026gt;\u0026gt;\u0026gt; pinyin(\u0026#39;中心\u0026#39;) [[\u0026#39;zhōng\u0026#39;], [\u0026#39;xīn\u0026#39;]] \u0026gt;\u0026gt;\u0026gt; pinyin(\u0026#39;中心\u0026#39;, heteronym=True) # 启用多音字模式 [[\u0026#39;zhōng\u0026#39;, \u0026#39;zhòng\u0026#39;], [\u0026#39;xīn\u0026#39;]] \u0026gt;\u0026gt;\u0026gt; pinyin(\u0026#39;中心\u0026#39;, style=Style.TONE3, heteronym=True) [[\u0026#39;zhong1\u0026#39;, \u0026#39;zhong4\u0026#39;], [\u0026#39;xin1\u0026#39;]]","title":"TechWeekly-08| 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   使用文本相似度可以识别变化的时间点，先配置环境\n代码下载 配置环境 !pip3 install scikit-learn==1.0 !pip3 install cntext==1.2 # 安装pyecharts可视化 !pip3 install pyecharts==1.6.2 !pip3 install pyecharts-javascripthon==0.0.6 !pip3 install pyecharts-jupyter-installer==0.0.3 !pip3 install pyecharts-snapshot==0.2.0 \n1. 查看数据 本次使用sotu数据集，收集了从1790年至2018年国情咨文文本，这是漂亮国大统领每年发表的演讲，用于描述国家过去的成就和未来面临的挑战。\nimport pandas as pd df = pd.read_csv(\u0026#39;sotu.csv\u0026#39;) #text2是text向下顺移1位的结果 df[\u0026#39;text2\u0026#39;]=df[\u0026#39;text\u0026#39;].shift(1) #剔除空字符 df.dropna(inplace=True) df.tail(10)   两段文本的相似度可以通过cos计算\nfrom cntext.similarity import similarity_score text1 = \u0026#39;Mr. Speaker, Mr. Vice President, members of\u0026#39; text2 = \u0026#39;Thank you very much. Mr. Speaker, Mr. Vice\u0026#39; similarity_score(text1, text2) Run\n{'Sim_Cosine': 0.4629100498862757, 'Sim_Jaccard': 0.3, 'Sim_MinEdit': 16, 'Sim_Simple': 0.9619883040935673}  2. 相似度可视化 如果把很多个相邻文本(有时间先后顺序)依次计算相似度，可以绘制出曲线，我们根据自己的领域知识，就可以看出变化的时间点。\nfrom cntext.similarity import similarity_score cosines = [] for idx, row in df.iterrows(): text1 = df.loc[idx, \u0026#39;text\u0026#39;] text2 = df.loc[idx, \u0026#39;text2\u0026#39;] simi = similarity_score(text1, text2)[\u0026#39;Sim_Cosine\u0026#39;] cosines.append(simi) cosines Run\n[0.42767330405703097, 0.39821498388325544, 0.410744931596176, 0.3844380358041578, 0.4116242706522565, 0.4169268094228332, 0.4249719376001671, .... 0.39065212923423315, 0.3763764307701755, 0.35307484669994105, 0.4119319787659037, 0.43053043053064594, 0.45219743197249296, 0.421723837550935, 0.427904362863808] 紧接着\nfrom pyecharts.charts import Line from pyecharts import options as opts from pyecharts.globals import CurrentConfig, NotebookType CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_NOTEBOOK line = Line() line.add_xaxis(xaxis_data=[str(y) for y in df[\u0026#39;year\u0026#39;].values]) line.add_yaxis(\u0026#34;本期与上期的相似度\u0026#34;, cosines, label_opts=opts.LabelOpts(is_show=False)) line.set_global_opts(title_opts=opts.TitleOpts(title=\u0026#34;1790年至2018年国情咨文文本相似度\u0026#34;)) line.load_javascript() line.render(\u0026#39;1790年至2018年国情咨文文本相似度可视化.html\u0026#39;) line.render_notebook()   注意，横坐标显示的是当年报告 与 前一年报告 的对比相似度\n3. 图形解读 相似度越低，说明本期与前期相比，文本变化较大，在本场景中可能是漂亮国在大幅度调整政策。\n 在图中，我们最熟悉的时期是一战和二战，这个阶段在图中较长时间处于低位，漂亮国zf的政策处于战时状态。 漂亮国立国初期，相似度连线也长时间处于低位，体现了新国家正在探索为政之道。 漂亮国每4年选ju一次，那么换届年份，相似度也会比较低。   ","permalink":"/blog/textsim/","summary":"点击上方图片购买课程   使用文本相似度可以识别变化的时间点，先配置环境\n代码下载 配置环境 !pip3 install scikit-learn==1.0 !pip3 install cntext==1.2 # 安装pyecharts可视化 !pip3 install pyecharts==1.6.2 !pip3 install pyecharts-javascripthon==0.0.6 !pip3 install pyecharts-jupyter-installer==0.0.3 !pip3 install pyecharts-snapshot==0.2.0 \n1. 查看数据 本次使用sotu数据集，收集了从1790年至2018年国情咨文文本，这是漂亮国大统领每年发表的演讲，用于描述国家过去的成就和未来面临的挑战。\nimport pandas as pd df = pd.read_csv(\u0026#39;sotu.csv\u0026#39;) #text2是text向下顺移1位的结果 df[\u0026#39;text2\u0026#39;]=df[\u0026#39;text\u0026#39;].shift(1) #剔除空字符 df.dropna(inplace=True) df.tail(10)   两段文本的相似度可以通过cos计算\nfrom cntext.similarity import similarity_score text1 = \u0026#39;Mr. Speaker, Mr. Vice President, members of\u0026#39; text2 = \u0026#39;Thank you very much. Mr. Speaker, Mr. Vice\u0026#39; similarity_score(text1, text2) Run","title":"使用文本相似度可以识别变化的时间点"},{"content":" 点击上方图片购买课程   前段时间发现apachecn在github上翻译了一本和特征工程相关的书籍：《Feature Engineering for Machine Learning》，中文名为《面向机器学习的特征工程》。\nFeature_Engineering_for_Machine_Learning.pdf\n三、文本数据: 展开、过滤和分块  译者：@kkejili\n校对者：@HeYun\n 如果让你来设计一个算法来分析以下段落，你会怎么做？\nEmma knocked on the door. No answer. She knocked again and waited. There was a large maple tree next to the house. Emma looked up the tree and saw a giant raven perched at the treetop. Under the afternoon sun, the raven gleamed magnificently. Its beak was hard and pointed, its claws sharp and strong. It looked regal and imposing. It reigned the tree it stood on. The raven was looking straight at Emma with its beady black eyes. Emma felt slightly intimidated. She took a step back from the door and tentatively said, “hello?” 复制ErrorOK! 该段包含很多信息。我们知道它谈到了到一个名叫Emma的人和一只乌鸦。这里有一座房子和一棵树，艾玛正想进屋，却看到了乌鸦。这只华丽的乌鸦注意到艾玛，她有点害怕，但正在尝试交流。\n那么，这些信息的哪些部分是我们应该提取的显着特征？首先，提取主要角色艾玛和乌鸦的名字似乎是个好主意。接下来，注意房子，门和树的布置可能也很好。关于乌鸦的描述呢？Emma的行为呢，敲门，退后一步，打招呼呢？\n本章介绍文本特征工程的基础知识。我们从词袋（bags of words）开始，这是基于字数统计的最简单的文本功能。一个非常相关的变换是 tf-idf，它本质上是一种特征缩放技术。它将被我在（下一篇）章节进行全面讨论。本章首先讨论文本特征提取，然后讨论如何过滤和清洗这些特征。\nBag of X：把自然文本变成平面向量 无论是构建机器学习模型还是特征工程，其结果应该是通俗易懂的。简单的事情很容易尝试，可解释的特征和模型相比于复杂的更易于调试。简单和可解释的功能并不总是会得到最精确的模型。但从简单开始就是一个好主意，仅在绝对必要时我们可以增加其复杂性。\n对于文本数据，我们可以从称为 BOW 的字数统计开始。字数统计表中并没有特别费力来寻找\u0026quot;Emma\u0026quot;或乌鸦这样有趣的实体。但是这两个词在该段落中被重复提到，并且它们在这里的计数比诸如\u0026quot;hello\u0026quot;之类的随机词更高。对于此类简单的文档分类任务，字数统计通常比较适用。它也可用于信息检索，其目标是检索与输入文本相关的文档集。这两个任务都很好解释词级特征，因为某些特定词的存在可能是本文档主题内容的重要指标。\n词袋 在词袋特征中，文本文档被转换成向量。（向量只是 n 个数字的集合。）向量包含词汇表中每个单词可能出现的数目。 如果单词\u0026quot;aardvark\u0026quot;在文档中出现三次，则该特征向量在与该单词对应的位置上的计数为 3。 如果词汇表中的单词没有出现在文档中，则计数为零。 例如，“这是一只小狗，它是非常可爱”的句子具有如图所示的 BOW 表示\n 图 3-1 转换词成向量描述图\nBOW 将文本文档转换为平面向量。 它是“平面的”，因为它不包含任何原始的文本结构。 原文是一系列词语。但是词袋向量并没有序列；它只是记得每个单词在文本中出现多少次。 它不代表任何词层次结构的概念。 例如，“动物”的概念包括“狗”，“猫”，“乌鸦”等。但是在一个词袋表示中，这些词都是矢量的相同元素。\n 图 3-2 两个等效的词向量，向量中单词的排序不重要，只要它在数据集中的个数和文档中出现数量是一致的。\n重要的是特征空间中数据的几何形状。 在一个词袋矢量中，每个单词成为矢量的一个维度。如果词汇表中有 n 个单词，则文档将成为n维空间中的一个点。 很难想象二维或三维以外的任何物体的几何形状，所以我们必须使用我们的想象力。 图3-3显示了我们的例句在对应于“小狗”和“可爱”两个维度的特征空间中的样子。\n 图 3-3 特征空间中文本文档的图示\n 图 3-4 三维特征空间\n图 3-3 和图 3-4 描绘了特征空间中的数据向量。 坐标轴表示单个单词，它们是词袋表示下的特征，空间中的点表示数据点（文本文档）。 有时在数据空间中查看特征向量也是有益的。 特征向量包含每个数据点中特征的值。 轴表示单个数据点和点表示特征向量。 图 3-5 展示了一个例子。 通过对文本文档进行词袋特征化，一个特征是一个词，一个特征向量包含每个文档中这个词的计数。 这样，一个单词被表示为一个“一个词向量”。正如我们将在第 4 章中看到的那样，这些文档词向量来自词袋向量的转置矩阵。\n Bag-of-N-gram Bag-of-N-gram 或者 bag-of-ngram 是 BOW 的自然延伸。 n-gram 是 n 个有序的记号（token）。一个词基本上是一个 1-gram，也被称为一元模型。当它被标记后，计数机制可以将单个词进行计数，或将重叠序列计数为 n-gram。例如，\u0026quot;Emma knocked on the door\u0026quot;这句话会产生 n-gram，如\u0026quot;Emma knocked\u0026quot;，\u0026quot;knocked on\u0026quot;，\u0026quot;on the\u0026quot;，\u0026quot;the door\u0026quot;。 N-gram 保留了文本的更多原始序列结构，故 bag-of-ngram可以提供更多信息。但是，这是有代价的。理论上，用 k 个独特的词，可能有 k 个独立的 2-gram（也称为 bigram）。在实践中，并不是那么多，因为不是每个单词后都可以跟一个单词。尽管如此，通常有更多不同的 n-gram（n \u0026gt; 1）比单词更多。这意味着词袋会更大并且有稀疏的特征空间。这也意味着 n-gram 计算，存储和建模的成本会变高。n 越大，信息越丰富，成本越高。\n为了说明随着 n 增加 n-gram 的数量如何增加，我们来计算纽约时报文章数据集上的 n-gram。我们使用 Pandas 和 scikit-learn 中的CountVectorizer转换器来计算前 10,000 条评论的 n-gram。\n\u0026gt;\u0026gt;\u0026gt; import pandas \u0026gt;\u0026gt;\u0026gt; import json \u0026gt;\u0026gt;\u0026gt; from sklearn.feature_extraction.text import CountVectorizer # Load the first 10,000 reviews  \u0026gt;\u0026gt;\u0026gt; f = open(\u0026#39;data/yelp/v6/yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_review.json\u0026#39;) \u0026gt;\u0026gt;\u0026gt; js = [] \u0026gt;\u0026gt;\u0026gt; for i in range(10000): ... js.append(json.loads(f.readline())) \u0026gt;\u0026gt;\u0026gt; f.close() \u0026gt;\u0026gt;\u0026gt; review_df = pd.DataFrame(js) # Create feature transformers for unigram, bigram, and trigram.  # The default ignores single-character words, which is useful in practice because it trims  # uninformative words. But we explicitly include them in this example for illustration purposes.  \u0026gt;\u0026gt;\u0026gt; bow_converter = CountVectorizer(token_pattern=\u0026#39;(?u)\\\\b\\\\w+\\\\b\u0026#39;) \u0026gt;\u0026gt;\u0026gt; bigram_converter = CountVectorizer(ngram_range=(2,2), token_pattern=\u0026#39;(?u)\\\\b\\\\w+\\\\b\u0026#39;) \u0026gt;\u0026gt;\u0026gt; trigram_converter = CountVectorizer(ngram_range=(3,3), token_pattern=\u0026#39;(?u)\\\\b\\\\w+\\\\b\u0026#39;) # Fit the transformers and look at vocabulary size  \u0026gt;\u0026gt;\u0026gt; bow_converter.fit(review_df[\u0026#39;text\u0026#39;]) \u0026gt;\u0026gt;\u0026gt; words = bow_converter.get_feature_names() \u0026gt;\u0026gt;\u0026gt; bigram_converter.fit(review_df[\u0026#39;text\u0026#39;]) \u0026gt;\u0026gt;\u0026gt; bigram = bigram_converter.get_feature_names() \u0026gt;\u0026gt;\u0026gt; trigram_converter.fit(review_df[\u0026#39;text\u0026#39;]) \u0026gt;\u0026gt;\u0026gt; trigram = trigram_converter.get_feature_names() \u0026gt;\u0026gt;\u0026gt; print (len(words), len(bigram), len(trigram)) 26047 346301 847545 # Sneak a peek at the ngram themselves \u0026gt;\u0026gt;\u0026gt; words[:10] [\u0026#39;0\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;000\u0026#39;, \u0026#39;0002\u0026#39;, \u0026#39;00am\u0026#39;, \u0026#39;00ish\u0026#39;, \u0026#39;00pm\u0026#39;, \u0026#39;01\u0026#39;, \u0026#39;01am\u0026#39;, \u0026#39;02\u0026#39;] \u0026gt;\u0026gt;\u0026gt; bigram[-10:] [\u0026#39;zucchinis at\u0026#39;, \u0026#39;zucchinis took\u0026#39;, \u0026#39;zucchinis we\u0026#39;, \u0026#39;zuma over\u0026#39;, \u0026#39;zuppa di\u0026#39;, \u0026#39;zuppa toscana\u0026#39;, \u0026#39;zuppe di\u0026#39;, \u0026#39;zurich and\u0026#39;, \u0026#39;zz top\u0026#39;, \u0026#39;à la\u0026#39;] \u0026gt;\u0026gt;\u0026gt; trigram[:10] [\u0026#39;0 10 definitely\u0026#39;, \u0026#39;0 2 also\u0026#39;, \u0026#39;0 25 per\u0026#39;, \u0026#39;0 3 miles\u0026#39;, \u0026#39;0 30 a\u0026#39;, \u0026#39;0 30 everything\u0026#39;, \u0026#39;0 30 lb\u0026#39;, \u0026#39;0 35 tip\u0026#39;, \u0026#39;0 5 curry\u0026#39;, \u0026#39;0 5 pork\u0026#39;] 复制ErrorOK!   图3-6 Number of unique n-gram in the first 10,000 reviews of the Yelp dataset\n过滤清洗特征 我们如何清晰地将信号从噪声中分离出来？ 通过过滤，使用原始标记化和计数来生成简单词表或 n-gram 列表的技术变得更加可用。 短语检测，我们将在下面讨论，可以看作是一个特别的 bigram 过滤器。 以下是执行过滤的几种方法。\n停用词 分类和检索通常不需要对文本有深入的理解。 例如，在\u0026quot;Emma knocked on the door\u0026quot;一句中，\u0026quot;on\u0026quot;和\u0026quot;the\u0026quot;这两个词没有包含很多信息。 代词、冠词和介词大部分时间并没有显示出其价值。流行的 Python NLP 软件包 NLTK 包含许多语言的语言学家定义的停用词列表。 （您将需要安装 NLTK 并运行nltk.download()来获取所有的好东西。）各种停用词列表也可以在网上找到。 例如，这里有一些来自英语停用词的示例词\nSample words from the nltk stopword list a, about, above, am, an, been, didn’t, couldn’t, i’d, i’ll, itself, let’s, myself, our, they, through, when’s, whom, ... 复制ErrorOK! 请注意，该列表包含撇号，并且这些单词没有大写。 为了按原样使用它，标记化过程不得去掉撇号，并且这些词需要转换为小写。\n基于频率的过滤 停用词表是一种去除空洞特征常用词的方法。还有其他更统计的方法来理解“常用词”的概念。在搭配提取中，我们看到依赖于手动定义的方法，以及使用统计的方法。同样的想法也适用于文字过滤。我们也可以使用频率统计。\n高频词 频率统计对滤除语料库专用常用词以及通用停用词很有用。例如，纽约时报文章数据集中经常出现“纽约时报”和其中单个单词。“议院”这个词经常出现在加拿大议会辩论的Hansard语料库中的“众议院”一词中，这是一种用于统计机器翻译的流行数据集，因为它包含所有文档的英文和法文版本。这些词在普通语言中有意义，但不在语料库中。手动定义的停用词列表将捕获一般停用词，但不是语料库特定的停用词。\n表 3-1 列出了 Yelp 评论数据集中最常用的 40 个单词。在这里，频率被认为是它们出现在文件（评论）中的数量，而不是它们在文件中的数量。正如我们所看到的，该列表涵盖了许多停用词。它也包含一些惊喜。\u0026quot;s\u0026quot;和\u0026quot;t\u0026quot;在列表中，因为我们使用撇号作为标记化分隔符，并且诸如\u0026quot;Mary's\u0026quot;或\u0026quot;did not\u0026quot;之类的词被解析为\u0026quot;Mary s\u0026quot;和\u0026quot;didn t\u0026quot;。词\u0026quot;good\u0026quot;，\u0026quot;food\u0026quot;和\u0026quot;great\u0026quot;分别出现在三分之一的评论中。但我们可能希望保留它们，因为它们对于情感分析或业务分类非常有用。\n 最常用的单词最可以揭示问题，并突出显示通常有用的单词通常在该语料库中曾出现过多次。 例如，纽约时报语料库中最常见的词是“时代”。实际上，它有助于将基于频率的过滤与停用词列表结合起来。还有一个棘手的问题，即何处放置截止点。 不幸的是这里没有统一的答案。在大多数情况下截断还需手动确定，并且在数据集改变时可能需要重新检查。\n稀有词 根据任务的不同，可能还需要筛选出稀有词。对于统计模型而言，仅出现在一个或两个文档中的单词更像噪声而非有用信息。例如，假设任务是根据他们的 Yelp 评论对企业进行分类，并且单个评论包含\u0026quot;gobbledygook\u0026quot;这个词。基于这一个词，我们将如何说明这家企业是餐厅，美容院还是一间酒吧？即使我们知道在这种情况下的这种生意发生在酒吧，它也会对于其他包含\u0026quot;gobbledygook\u0026quot;这个词的评论来说，这可能是一个错误。\n不仅稀有词不可靠，而且还会产生计算开销。这套 160 万个 Yelp 评论包含 357,481 个独特单词（用空格和标点符号表示），其中 189,915 只出现在一次评论中，41,162 次出现在两次评论中。超过 60% 的词汇很少发生。这是一种所谓的重尾分布，在现实世界的数据中非常普遍。许多统计机器学习模型的训练时间随着特征数量线性地变化，并且一些模型是二次的或更差的。稀有词汇会产生大量的计算和存储成本，而不会带来额外的收益。\n根据字数统计，可以很容易地识别和修剪稀有词。或者，他们的计数可以汇总到一个特殊的垃圾箱中，可以作为附加功能。图3-7展示了一个短文档中的表示形式，该短文档包含一些常用单词和两个稀有词\u0026quot;gobbledygook\u0026quot;和\u0026quot;zylophant\u0026quot;。通常单词保留自己的计数，可以通过停用词列表或其他频率进一步过滤方法。这些难得的单词会失去他们的身份并被分组到垃圾桶功能中.\n 由于在计算整个语料库之前不会知道哪些词很少，因此需要收集垃圾桶功能作为后处理步骤。\n由于本书是关于特征工程的，因此我们将重点放在特征上。但稀有概念也适用于数据点。如果文本文档很短，那么它可能不包含有用的信息，并且在训练模型时不应使用该信息。\n应用此规则时必须谨慎。维基百科转储包含许多不完整的存根，可能安全过滤。另一方面，推文本身就很短，并且需要其他特征和建模技巧。\n词干解析（Stemming） 简单解析的一个问题是同一个单词的不同变体会被计算为单独的单词。例如，\u0026quot;flower\u0026quot;和\u0026quot;flowers\u0026quot;在技术上是不同的记号，\u0026quot;swimmer\u0026quot;，\u0026quot;swimming\u0026quot;和\u0026quot;swim\u0026quot;也是如此，尽管它们的含义非常接近。如果所有这些不同的变体都映射到同一个单词，那将会很好。\n词干解析是一项 NLP 任务，试图将单词切分为基本的语言词干形式。有不同的方法。有些基于语言规则，其他基于观察统计。被称为词形化的算法的一个子类将词性标注和语言规则结合起来。\nPorter stemmer 是英语中使用最广泛的免费词干工具。原来的程序是用 ANSI C 编写的，但是很多其他程序包已经封装它来提供对其他语言的访问。尽管其他语言的努力正在进行，但大多数词干工具专注于英语。\n以下是通过 NLTK Python 包运行 Porter stemmer 的示例。正如我们所看到的，它处理了大量的情况，包括将\u0026quot;sixties\u0026quot;和\u0026quot;sixty\u0026quot;转变为同一根\u0026quot;sixti\u0026quot;。但这并不完美。单词\u0026quot;goes\u0026quot;映射到\u0026quot;goe\u0026quot;，而\u0026quot;go\u0026quot;映射到它自己。\n\u0026gt;\u0026gt;\u0026gt; import nltk \u0026gt;\u0026gt;\u0026gt; stemmer = nltk.stem.porter.PorterStemmer() \u0026gt;\u0026gt;\u0026gt; stemmer.stem(\u0026#39;flowers\u0026#39;) u\u0026#39;lemon\u0026#39; \u0026gt;\u0026gt;\u0026gt; stemmer.stem(\u0026#39;zeroes\u0026#39;) u\u0026#39;zero\u0026#39; \u0026gt;\u0026gt;\u0026gt; stemmer.stem(\u0026#39;stemmer\u0026#39;) u\u0026#39;stem\u0026#39; \u0026gt;\u0026gt;\u0026gt; stemmer.stem(\u0026#39;sixties\u0026#39;) u\u0026#39;sixti\u0026#39; \u0026gt;\u0026gt;\u0026gt; stemmer.stem(\u0026#39;sixty\u0026#39;) u\u0026#39;sixty\u0026#39; \u0026gt;\u0026gt;\u0026gt; stemmer.stem(\u0026#39;goes\u0026#39;) u\u0026#39;goe\u0026#39; \u0026gt;\u0026gt;\u0026gt; stemmer.stem(\u0026#39;go\u0026#39;) u\u0026#39;go\u0026#39; 复制ErrorOK! 词干解析的确有一个计算成本。 最终收益是否大于成本取决于应用程序。\n含义的原子：从单词到 N-gram 到短语 词袋的概念很简单。但是，一台电脑怎么知道一个词是什么？文本文档以数字形式表示为一个字符串，基本上是一系列字符。也可能会遇到 JSON blob 或 HTML 页面形式的半结构化文本。但即使添加了标签和结构，基本单位仍然是一个字符串。如何将字符串转换为一系列的单词？这涉及解析和标记化的任务，我们将在下面讨论。\n解析和分词 当字符串包含的不仅仅是纯文本时，解析是必要的。例如，如果原始数据是网页，电子邮件或某种类型的日志，则它包含额外的结构。人们需要决定如何处理日志中的标记，页眉，页脚或无趣的部分。如果文档是网页，则解析器需要处理 URL。如果是电子邮件，则可能需要特殊字段，例如 From，To 和 Subject 需要被特别处理，否则，这些标题将作为最终计数中的普通单词统计，这可能没有用处。\n解析后，文档的纯文本部分可以通过标记。这将字符串（一系列字符）转换为一系列记号。然后可以将每个记号计为一个单词。分词器需要知道哪些字符表示一个记号已经结束，另一个正在开始。空格字符通常是好的分隔符，正如标点符号一样。如果文本包含推文，则不应将井号（#）用作分隔符（也称为分隔符）。\n有时，分析需要使用句子而不是整个文档。例如，n-gram 是一个句子的概括，不应超出句子范围。更复杂的文本特征化方法，如 word2vec 也适用于句子或段落。在这些情况下，需要首先将文档解析为句子，然后将每个句子进一步标记为单词。\n字符串对象 字符串对象有各种编码，如 ASCII 或 Unicode。纯英文文本可以用 ASCII 编码。 一般语言需要 Unicode。 如果文档包含非 ASCII 字符，则确保分词器可以处理该特定编码。否则，结果将不正确。\n短语检测的搭配提取 连续的记号能立即被转化成词表和 n-gram。但从语义上讲，我们更习惯于理解短语，而不是 n-gram。在计算自然语言处理中，有用短语的概念被称为搭配。用 Manning 和 Schütze（1999：141）的话来说：“搭配是一个由两个或两个以上单词组成的表达，它们对应于某种常规的说话方式。”\n搭配比其部分的总和更有意义。例如，\u0026quot;strong tea\u0026quot;具有超越\u0026quot;great physical strength\u0026quot;和\u0026quot;tea\u0026quot;的不同含义，因此被认为是搭配。另一方面，“可爱的小狗”这个短语恰恰意味着它的部分总和：“可爱”和“小狗”。因此，它不被视为搭配。\n搭配不一定是连续的序列。\u0026quot;Emma knocked on the door\u0026quot;一词被认为包含搭配\u0026quot;knock door\u0026quot;，因此不是每一个搭配都是一个 n-gram。相反，并不是每个 n-gram 都被认为是一个有意义的搭配。\n由于搭配不仅仅是其部分的总和，它们的含义也不能通过单个单词计数来充分表达。作为一种表现形式，词袋不足。袋子的 ngram 也是有问题的，因为它们捕获了太多无意义的序列（考虑\u0026quot;this is in the bag-of-ngram example\u0026quot;），而没有足够的有意义的序列。\n搭配作为功能很有用。但是，如何从文本中发现并提取它们呢？一种方法是预先定义它们。如果我们努力尝试，我们可能会找到各种语言的全面成语列表，我们可以通过文本查看任何匹配。这将是非常昂贵的，但它会工作。如果语料库是非常特定领域的并且包含深奥的术语，那么这可能是首选的方法。但是这个列表需要大量的手动管理，并且需要不断更新语料库。例如，分析推文，博客和文章可能不太现实。\n自从统计 NLP 过去二十年出现以来，人们越来越多地选择用于查找短语的统计方法。统计搭配提取方法不是建立固定的短语和惯用语言列表，而是依赖不断发展的数据来揭示当今流行的语言。\n基于频率的方法 一个简单的黑魔法是频繁发生的 n-gram。这种方法的问题是最常发生的，这种可能不是最有用的。 表 3-2 显示了整个 Yelp 评论数据集中最流行的 bigram（n=2）。 正如我们所知的，按文件计数排列的最常见的十大常见术语是非常通用的术语，并不包含太多含义。\n 用于搭配提取的假设检验 原始流行度计数（Raw popularity count）是一个比较粗糙的方法。我们必须找到更聪慧的统计数据才能够轻松挑选出有意义的短语。关键的想法是看两个单词是否经常出现在一起。回答这个问题的统计机制被称为假设检验。\n假设检验是将噪音数据归结为“是”或“否”的答案。它涉及将数据建模为从随机分布中抽取的样本。随机性意味着人们永远无法 100% 的确定答案；总会有异常的机会。所以答案附在概率上。例如，假设检验的结果可能是“这两个数据集来自同一分布，其概率为 95%”。对于假设检验的温和介绍，请参阅可汗学院关于假设检验和 p 值的教程。\n在搭配提取的背景下，多年来已经提出了许多假设检验。最成功的方法之一是基于似然比检验（Dunning，1993）。对于给定的一对单词，该方法测试两个假设观察的数据集。假设 1（原假设）表示，词语 1 独立于词语 2 出现。另一种说法是说，看到词语1对我们是否看到词语2没有影响。假设 2（备选假设）说，看到词 1 改变了看到单词 2 的可能性。我们采用备选假设来暗示这两个单词形成一个共同的短语。因此，短语检测（也称为搭配提取）的似然比检验提出了以下问题：给定文本语料库中观察到的单词出现更可能是从两个单词彼此独立出现的模型中生成的，或者模型中两个词的概率纠缠？\n这是有用的。让我们算一点。（数学非常精确和简洁地表达事物，但它确实需要与自然语言完全不同的分析器。）\n 似然函数L(Data; H)表示在单词对的独立模型或非独立模型下观察数据集中词频的概率。为了计算这个概率，我们必须对如何生成数据做出另一个假设。最简单的数据生成模型是二项模型，其中对于数据集中的每个单词，我们抛出一个硬币，并且如果硬币朝上出现，我们插入我们的特殊单词，否则插入其他单词。在此策略下，特殊词的出现次数遵循二项分布。二项分布完全由词的总数，词的出现次数和词首概率决定。\n似然比检验分析常用短语的算法收益如下。\n  计算所有单体词的出现概率：p(w)。\n  计算所有唯一双元的条件成对词发生概率：p(W2 × W1)\n  计算所有唯一的双对数似然比对数。\n  根据它们的似然比排序双字节。\n  以最小似然比值作为特征。\n  掌握似然比测试 关键在于测试比较的不是概率参数本身，而是在这些参数（以及假设的数据生成模型）下观察数据的概率。可能性是统计学习的关键原则之一。但是在你看到它的前几次，这绝对是一个令人困惑的问题。一旦你确定了逻辑，它就变得直观了。\n还有另一种基于点互信息的统计方法。但它对真实世界文本语料库中常见的罕见词很敏感。因此它不常用，我们不会在这里展示它。\n请注意，搭配抽取的所有统计方法，无论是使用原始频率，假设测试还是点对点互信息，都是通过过滤候选词组列表来进行操作的。生成这种清单的最简单和最便宜的方法是计算 n-gram。它可能产生不连续的序列，但是它们计算成本颇高。在实践中，即使是连续 n-gram，人们也很少超过 bi-gram 或 tri-gram，因为即使在过滤之后，它们的数量也很多。为了生成更长的短语，还有其他方法，如分块或与词性标注相结合。\n分块（Chunking）和词性标注（part-of-Speech Tagging） 分块比 n-gram 要复杂一点，因为它基于词性，基于规则的模型形成了记号序列。\n例如，我们可能最感兴趣的是在问题中找到所有名词短语，其中文本的实体，主题最为有趣。 为了找到这个，我们使用词性标记每个作品，然后检查该标记的邻域以查找词性分组或“块”。 定义单词到词类的模型通常是语言特定的。 几种开源 Python 库（如 NLTK，Spacy 和 TextBlob）具有多种语言模型。\n为了说明 Python 中的几个库如何使用词性标注非常简单地进行分块，我们再次使用 Yelp 评论数据集。 我们将使用 spacy 和 TextBlob 来评估词类以找到名词短语。\n\u0026gt;\u0026gt;\u0026gt; import pandas as pd \u0026gt;\u0026gt;\u0026gt; import json # Load the first 10 reviews  \u0026gt;\u0026gt;\u0026gt; f = open(\u0026#39;data/yelp/v6/yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_review.json\u0026#39;) \u0026gt;\u0026gt;\u0026gt; js = [] \u0026gt;\u0026gt;\u0026gt; for i in range(10): js.append(json.loads(f.readline())) \u0026gt;\u0026gt;\u0026gt; f.close() \u0026gt;\u0026gt;\u0026gt; review_df = pd.DataFrame(js) ## First we\u0026#39;ll walk through spaCy\u0026#39;s functions  \u0026gt;\u0026gt;\u0026gt; import spacy # preload the language model  \u0026gt;\u0026gt;\u0026gt; nlp = spacy.load(\u0026#39;en\u0026#39;) # We can create a Pandas Series of spaCy nlp variables  \u0026gt;\u0026gt;\u0026gt; doc_df = review_df[\u0026#39;text\u0026#39;].apply(nlp) # spaCy gives you fine grained parts of speech using: (.pos_)  # and coarse grained parts of speech using: (.tag_)  \u0026gt;\u0026gt;\u0026gt; for doc in doc_df[4]: print([doc.text, doc.pos_, doc.tag_]) Got VERB VBP a DET DT letter NOUN NN in ADP IN the DET DT mail NOUN NN last ADJ JJ week NOUN NN that ADJ WDT said VERB VBD Dr. PROPN NNP Goldberg PROPN NNP is VERB VBZ moving VERB VBG to ADP IN Arizona PROPN NNP to PART TO take VERB VB a DET DT new ADJ JJ position NOUN NN there ADV RB in ADP IN June PROPN NNP . PUNCT . SPACE SP He PRON PRP will VERB MD be VERB VB missed VERB VBN very ADV RB much ADV RB . PUNCT . SPACE SP I PRON PRP think VERB VBP finding VERB VBG a DET DT new ADJ JJ doctor NOUN NN in ADP IN NYC PROPN NNP that ADP IN you PRON PRP actually ADV RB like INTJ UH might VERB MD almost ADV RB be VERB VB as ADV RB awful ADJ JJ as ADP IN trying VERB VBG to PART TO find VERB VB a DET DT date NOUN NN ! PUNCT . # spaCy also does some basic noun chunking for us  \u0026gt;\u0026gt;\u0026gt; print([chunk for chunk in doc_df[4].noun_chunks]) [a letter, the mail, Dr. Goldberg, Arizona, a new position, June, He, I, a new doctor, NYC, you, a date] #####  ## We can do the same feature transformations using Textblob  \u0026gt;\u0026gt;\u0026gt; from textblob import TextBlob # The default tagger in TextBlob uses the PatternTagger, which is fine for our example.  # You can also specify the NLTK tagger, which works better for incomplete sentences.  \u0026gt;\u0026gt;\u0026gt; blob_df = review_df[\u0026#39;text\u0026#39;].apply(TextBlob) \u0026gt;\u0026gt;\u0026gt; blob_df[4].tags [(\u0026#39;Got\u0026#39;, \u0026#39;NNP\u0026#39;), (\u0026#39;a\u0026#39;, \u0026#39;DT\u0026#39;), (\u0026#39;letter\u0026#39;, \u0026#39;NN\u0026#39;), (\u0026#39;in\u0026#39;, \u0026#39;IN\u0026#39;), (\u0026#39;the\u0026#39;, \u0026#39;DT\u0026#39;), (\u0026#39;mail\u0026#39;, \u0026#39;NN\u0026#39;), (\u0026#39;last\u0026#39;, \u0026#39;JJ\u0026#39;), (\u0026#39;week\u0026#39;, \u0026#39;NN\u0026#39;), (\u0026#39;that\u0026#39;, \u0026#39;WDT\u0026#39;), (\u0026#39;said\u0026#39;, \u0026#39;VBD\u0026#39;), (\u0026#39;Dr.\u0026#39;, \u0026#39;NNP\u0026#39;), (\u0026#39;Goldberg\u0026#39;, \u0026#39;NNP\u0026#39;), (\u0026#39;is\u0026#39;, \u0026#39;VBZ\u0026#39;), (\u0026#39;moving\u0026#39;, \u0026#39;VBG\u0026#39;), (\u0026#39;to\u0026#39;, \u0026#39;TO\u0026#39;), (\u0026#39;Arizona\u0026#39;, \u0026#39;NNP\u0026#39;), (\u0026#39;to\u0026#39;, \u0026#39;TO\u0026#39;), (\u0026#39;take\u0026#39;, \u0026#39;VB\u0026#39;), (\u0026#39;a\u0026#39;, \u0026#39;DT\u0026#39;), (\u0026#39;new\u0026#39;, \u0026#39;JJ\u0026#39;), (\u0026#39;position\u0026#39;, \u0026#39;NN\u0026#39;), (\u0026#39;there\u0026#39;, \u0026#39;RB\u0026#39;), (\u0026#39;in\u0026#39;, \u0026#39;IN\u0026#39;), (\u0026#39;June\u0026#39;, \u0026#39;NNP\u0026#39;), (\u0026#39;He\u0026#39;, \u0026#39;PRP\u0026#39;), (\u0026#39;will\u0026#39;, \u0026#39;MD\u0026#39;), (\u0026#39;be\u0026#39;, \u0026#39;VB\u0026#39;), (\u0026#39;missed\u0026#39;, \u0026#39;VBN\u0026#39;), (\u0026#39;very\u0026#39;, \u0026#39;RB\u0026#39;), (\u0026#39;much\u0026#39;, \u0026#39;JJ\u0026#39;), (\u0026#39;I\u0026#39;, \u0026#39;PRP\u0026#39;), (\u0026#39;think\u0026#39;, \u0026#39;VBP\u0026#39;), (\u0026#39;finding\u0026#39;, \u0026#39;VBG\u0026#39;), (\u0026#39;a\u0026#39;, \u0026#39;DT\u0026#39;), (\u0026#39;new\u0026#39;, \u0026#39;JJ\u0026#39;), (\u0026#39;doctor\u0026#39;, \u0026#39;NN\u0026#39;), (\u0026#39;in\u0026#39;, \u0026#39;IN\u0026#39;), (\u0026#39;NYC\u0026#39;, \u0026#39;NNP\u0026#39;), (\u0026#39;that\u0026#39;, \u0026#39;IN\u0026#39;), (\u0026#39;you\u0026#39;, \u0026#39;PRP\u0026#39;), (\u0026#39;actually\u0026#39;, \u0026#39;RB\u0026#39;), (\u0026#39;like\u0026#39;, \u0026#39;IN\u0026#39;), (\u0026#39;might\u0026#39;, \u0026#39;MD\u0026#39;), (\u0026#39;almost\u0026#39;, \u0026#39;RB\u0026#39;), (\u0026#39;be\u0026#39;, \u0026#39;VB\u0026#39;), (\u0026#39;as\u0026#39;, \u0026#39;RB\u0026#39;), (\u0026#39;awful\u0026#39;, \u0026#39;JJ\u0026#39;), (\u0026#39;as\u0026#39;, \u0026#39;IN\u0026#39;), (\u0026#39;trying\u0026#39;, \u0026#39;VBG\u0026#39;), (\u0026#39;to\u0026#39;, \u0026#39;TO\u0026#39;), (\u0026#39;find\u0026#39;, \u0026#39;VB\u0026#39;), (\u0026#39;a\u0026#39;, \u0026#39;DT\u0026#39;), (\u0026#39;date\u0026#39;, \u0026#39;NN\u0026#39;)] \u0026gt;\u0026gt;\u0026gt; print([np for np in blob_df[4].noun_phrases]) [\u0026#39;got\u0026#39;, \u0026#39;goldberg\u0026#39;, \u0026#39;arizona\u0026#39;, \u0026#39;new position\u0026#39;, \u0026#39;june\u0026#39;, \u0026#39;new doctor\u0026#39;, \u0026#39;nyc\u0026#39; 复制ErrorOK! 你可以看到每个库找到的名词短语有些不同。spacy 包含英语中的常见单词，如\u0026quot;a\u0026quot;和\u0026quot;the\u0026quot;，而 TextBlob 则删除这些单词。这反映了规则引擎的差异，它驱使每个库都认为是“名词短语”。 你也可以写你的词性关系来定义你正在寻找的块。使用 Python 进行自然语言处理可以深入了解从头开始用 Python 进行分块。\n总结 词袋模型易于理解和计算，对分类和搜索任务很有用。但有时单个单词太简单，不足以将文本中的某些信息封装起来。为了解决这个问题，人们寄希望于比较长的序列。Bag-of-ngram 是 BOW 的自然概括，这个概念仍然容于理解，而且它的计算开销这就像 BOW 一样容易。\nBag of-ngram 生成更多不同的 ngram。它增加了特征存储成本，以及模型训练和预测阶段的计算成本。虽然数据点的数量保持不变，但特征空间的维度现在更大。因此数据密度更为稀疏。n 越高，存储和计算成本越高，数据越稀疏。由于这些原因，较长的 n-gram 并不总是会使模型精度的得到提高（或任何其他性能指标）。人们通常在n = 2或 3 时停止。较少的 n-gram 很少被使用。\n防止稀疏性和成本增加的一种方法是过滤 n-gram 并保留最有意义的短语。这是搭配抽取的目标。理论上，搭配（或短语）可以在文本中形成非连续的标记序列。然而，在实践中，寻找非连续词组的计算成本要高得多并且没有太多的收益。因此搭配抽取通常从一个候选人名单中开始，并利用统计方法对他们进行过滤。\n所有这些方法都将一系列文本标记转换为一组断开的计数。与一个序列相比，一个集合的结构要少得多；他们导致平面特征向量。\n在本章中，我们用简单的语言描述文本特征化技术。这些技术将一段充满丰富语义结构的自然语言文本转化为一个简单的平面向量。我们讨论一些常用的过滤技术来降低向量维度。我们还引入了 ngram 和搭配抽取作为方法，在平面向量中添加更多的结构。下一章将详细介绍另一种常见的文本特征化技巧，称为 tf-idf。随后的章节将讨论更多方法将结构添加回平面向量。\n参考文献 Dunning, Ted. 1993. “Accurate methods for the statistics of surprise and\ncoincidence.” ACM Journal of Computational Linguistics, special issue on using large corpora , 19:1 (61—74).\n“Hypothesis Testing and p-Values.” Khan Academy, accessed May 31,\n2016,https://www.khanacademy.org/math/probability/statistics-inferential/hypothesis-testing/v/hypothesis-testing-and-p-values.\nManning,Christopher D. and Hinrich Schütze. 1999. Foundations of StatisticalNatural Language Processing . Cambridge, Massachusettes: MIT Press.\nSometimes people call it the document “vector.” The vector extends from the original and ends at the specified point. For our purposes, “vector” and “point” are the same thing.\n","permalink":"/blog/textfeaturestutorial/","summary":"点击上方图片购买课程   前段时间发现apachecn在github上翻译了一本和特征工程相关的书籍：《Feature Engineering for Machine Learning》，中文名为《面向机器学习的特征工程》。\nFeature_Engineering_for_Machine_Learning.pdf\n三、文本数据: 展开、过滤和分块  译者：@kkejili\n校对者：@HeYun\n 如果让你来设计一个算法来分析以下段落，你会怎么做？\nEmma knocked on the door. No answer. She knocked again and waited. There was a large maple tree next to the house. Emma looked up the tree and saw a giant raven perched at the treetop. Under the afternoon sun, the raven gleamed magnificently. Its beak was hard and pointed, its claws sharp and strong.","title":"文本数据: 展开、过滤和分块"},{"content":" 点击上方图片购买课程   代码下载 现在一提到文本分析，除了词频统计、情感分析，就属话题分析最火，主流技术路线是使用LDA话题模型进行主题分析。但是LDA适合文档区分度大，文本档数较大。如果不满足这两点，LDA虽然能跑出模型，但是跑出的topic无法解读，没有意义。今天分享一个技术文，在看技术文之前，将技术文的背景文献稍微整理翻译了下，方便大家更好的理解textnets的应用场景。\n网络分析通常用于描述人与人之间的关系——尤其是在社会科学中——但它也可以应用于词之间的关系。例如，网络关系可以通过文档中单个单词的共现来创建，或者可以使用双模式网络投影在文档之间创建关系。\n基于网络的自动文本分析方法的优点是\n  像社会群体一样，可以通过三元闭包更准确地测量词组的含义——或者任何两个词或术语相互的含义的原则如果将它们放在第三个词的上下文中，可以更准确地理解；\n  文本网络可以应用于任何长度的文档，这与通常需要大量单词才能正常运行的主题模型不同。在简短的社交媒体文本变得普遍的时代，这是一个显着的优势。\n  最后，这种方法受益于社区检测跨学科文献的最新进展，可以说它提供了更准确的单词分组方法，这些方法受益于网络内观察到的聚类，而不是词袋模型。\n  背景-文化桥梁 文化信息传递理论和公共审议和计算技术。\n Markowitz, D. M., \u0026amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).\n 由于每天光顾此类论坛的人数迅速增加，社交媒体为倡导组织塑造公共辩论提供了有力的机会。 然而，社会科学家还没有解释为什么一些议题发起者能成功发起大规模的广泛参与性(公开辩论/广泛对话)，而大多数其他组织却没做到。 本文使用自动文本分析发现，如果组织方建立文化桥梁，在很少能一起讨论的议题领域内产生可连接的对话主题信息，这类信息不仅能引起多个受众的共鸣，而且还能让这些受众彼此进行对话，那么组织方更有可能激发新社交媒体受众的评论。 在控制这些因素的情况下，建立实质性文化桥梁的组织， 其所发布信息， 比那些没有建立实质性文化桥梁的组织， 得到的评论数多 2.52 倍。\n 社交网络分析通常用于描述个人之间的友谊或其他关系，但它也可通过参与者的消息或想法的类型来描述参与者之间的关系（如下图) 是“文化网络”中的一个小区域。\n 每个节点描述一个参与议题公开对话的参与者 节点间的边代表那些在社交媒体倡导领域内讨论类似议题的人。  PNAS2016这篇使用“自闭症谱系障碍ASD疾病的治病原因大讨论”做的数据分享，图中 t1 处的一类用户认为ASD致病可能跟疫苗有关，而另一类人可能认为ASD可能与遗传因素的有关。从图形看，t1这类议题发起方式，没有产生广泛参与性。而t2和t3，文化网络中因为文化桥梁的存在，产生了广泛参与性。\n假设的文化网络，其中节点代表参与有关议题的对话参与者，而节点之间的边则描述了其消息内容的相似性。议题广泛参与性，除了话题发起者影响力、话题投放资源等因素影响，还有一个因素就是发起的话题是否吸引了受众。对于参与者而言，最有吸引力的话题需要满足“新颖，且熟悉”。\n用TF-IDF刻画文化网络中的“新且熟悉” 在文本分析中有一个文本特征提取技术tf-idf\n tf指词语在某文档中出现的次数；从词语的角度，该值越大越熟悉 idf逆文档数，即词语出现在多少个文档中；从词语的角度，该值越小越新颖   本教程将引导您完成使用文本网络分析和可视化数据所需的所有步骤。 在解决与使用文本网络相关的其他杂项问题之前，本教程首先介绍了一个独立的示例。\n安装 pip3 install textnets \n1. 查看数据 pnas2016这篇的数据没有开源，通过文本构建文化网络、发现文化桥梁。这里使用一个特别特别小的新闻数据，关于人类第一次登月。如果我们使用textnets，准备的数据需要有两个列\n 议题参与者，类比报刊 议题参与者发布的内容，如评论等  import pandas as pd df = pd.read_csv(\u0026#39;test.csv\u0026#39;) df | | Unnamed: 0 | headlines | |---:|:------------------|:--------------------------------------------------------------------------| | 0 | The Guardian | 3:56 am: Man Steps On to the Moon | | 1 | New York Times | Men Walk on Moon -- Astronauts Land on Plain, Collect Rocks, Plant Flag | | 2 | Boston Globe | Man Walks on Moon | | 3 | Houston Chronicle | Armstrong and Aldrich \u0026#34;Take One Small Step for Man\u0026#34; on the Moon | | 4 | Washington Post | The Eagle Has Landed -- Two Men Walk on the Moon | | 5 | Chicago Tribune | Giant Leap for Mankind -- Armstrong Takes 1st Step on Moon | | 6 | Los Angeles Times | Walk on Moon -- That\\\u0026#39;s One Small Step for Man, One Giant Leap for Mankind | \n2. 导入corpus 使用textnets库的将数据导入为其特有的语料格式。从下方可以看到textnets可能会用spacy，如果要配置英文en_core_web_sm或中文zh_core_web_sm, 请查看该文 https://t.hk.uy/aCmr\nimport textnets as tn import pandas as pd #设置随机种子，保证代码可重复性 tn.params[\u0026#34;seed\u0026#34;] = 42 corpus = tn.Corpus.from_csv(\u0026#39;test.csv\u0026#39;) corpus   3. 构建网络 需要注意的是corpus.tokenized()是textnets特有的分词方法，如果所处理的新闻是中文，需要提前分词去停用词整理为像英文数据格式，用空格间隔单词。\ntextnets提供了构建网络的方法\ntn.Textnet(data, min_docs, connected, doc_attrs)\n data DataFrame类型, 三列，自己可以运行 corpus.tokenized() 查看样式 min_docs 一个词语存在于至少多少个文档中，默认为2。一个词至少出现在两个doc中，才会让两个doc产生连接 connected 仅保留网络的最大连接组件（默认值：False） doc_attrs 文档节点的属性，字典的字典(双层嵌套字典)  t = tn.Textnet(corpus.tokenized(), min_docs=1) 使用所有默认参数， textnets 会帮我们删除英文停用词，词干化(合并同类词)，并删除标点符号、数字、URL 等。\n但这里我们将破例将 min_docs 设置为1（因为数据只有几句话几十个单词，这里破例设置为1，正常这里至少是2）\nt.plot(label_nodes=True, #标记节点名(单词、媒体) show_clusters=True) #绘制簇的边界   show_clusters 使用 Leiden社区检测算法(Leiden community detection algorithm)找到了分区成簇，它似乎识别了同一主题(登月)下不同词之间的远近(相似的词在一个簇中，不同的词处于不同的簇中)。\n你可能会疑惑：为什么网络图中的单词: moon会自己漂移？ 那是因为moon这个词在每个文档中只出现一次，所以每个文档moon的tf-idf得分为0。\n让我们再次可视化相同的事情，但这次根据节点的 BiRank（二部网络的中心性度量）缩放节点，根据权重缩放边缘。\nt.plot(label_nodes=True, show_clusters=True, scale_nodes_by=\u0026#34;birank\u0026#34;, scale_edges_by=\u0026#34;weight\u0026#34;)   我们还可以只可视化报刊网络，不显示词语。这里设置node_type=\u0026lsquo;doc\u0026rsquo;\n#node_type有两种值， doc、term papers = t.project(node_type=\u0026#34;doc\u0026#34;) papers.plot(label_nodes=True)   和之前的双向网络一样，我们可以看到Houston Chronicle、 Chicago Tribune、 Los Angeles Times更紧密地聚集在一起。\n接下来，词网络：\nwords = t.project(node_type=\u0026#34;term\u0026#34;) words.plot(label_nodes=True, show_clusters=True)   除了可视化之外，我们还可以使用社交网络指标分析我们的语料库。 例如，具有教高介数中心性betweenness centrality的文档可能将主题不同簇联系起来，起到文化桥梁的作用，从而刺激跨越符号鸿沟的交流(Bail,2016)。\npapers.top_betweenness() Los Angeles Times 7.0 Boston Globe 0.0 Chicago Tribune 0.0 Houston Chronicle 0.0 New York Times 0.0 The Guardian 0.0 Washington Post 0.0 dtype: float64  words.top_betweenness() walk 72.00 man 18.00 step 16.00 small 12.75 land 6.00 giant 6.00 leap 6.00 mankind 6.00 armstrong 3.25 plain 0.00 dtype: float64  这是因为New York Times在其标题中使用了“walk”一词，将“one small step”簇与“man on moon”簇联系起来。\n我们可以再次生成词网络图，这次根据节点的中介中心性缩放节点，并使用“骨干提取”从网络中修剪边缘：cite:pSerrano2009。\n我们还可以使用 color_clusters（而不是 show_clusters）根据节点的分区为节点着色。\n我们可以过滤节点标签，只标记那些中间中心性betweenness centrality分数高于中位数的节点。 这在高阶网络中特别有用，其中标记每个节点会导致视觉混乱。\nwords.plot(label_nodes=True, scale_nodes_by=\u0026#34;betweenness\u0026#34;, color_clusters=True, alpha=0.5, edge_width=[10*w for w in words.edges[\u0026#34;weight\u0026#34;]], edge_opacity=0.4, node_label_filter=lambda n: n.betweenness() \u0026gt; words.betweenness.median())   其他textnets案例资料 https://www.jboy.space/blog/enemies-foreign-and-partisan.html\n","permalink":"/blog/culturebridges/","summary":"点击上方图片购买课程   代码下载 现在一提到文本分析，除了词频统计、情感分析，就属话题分析最火，主流技术路线是使用LDA话题模型进行主题分析。但是LDA适合文档区分度大，文本档数较大。如果不满足这两点，LDA虽然能跑出模型，但是跑出的topic无法解读，没有意义。今天分享一个技术文，在看技术文之前，将技术文的背景文献稍微整理翻译了下，方便大家更好的理解textnets的应用场景。\n网络分析通常用于描述人与人之间的关系——尤其是在社会科学中——但它也可以应用于词之间的关系。例如，网络关系可以通过文档中单个单词的共现来创建，或者可以使用双模式网络投影在文档之间创建关系。\n基于网络的自动文本分析方法的优点是\n  像社会群体一样，可以通过三元闭包更准确地测量词组的含义——或者任何两个词或术语相互的含义的原则如果将它们放在第三个词的上下文中，可以更准确地理解；\n  文本网络可以应用于任何长度的文档，这与通常需要大量单词才能正常运行的主题模型不同。在简短的社交媒体文本变得普遍的时代，这是一个显着的优势。\n  最后，这种方法受益于社区检测跨学科文献的最新进展，可以说它提供了更准确的单词分组方法，这些方法受益于网络内观察到的聚类，而不是词袋模型。\n  背景-文化桥梁 文化信息传递理论和公共审议和计算技术。\n Markowitz, D. M., \u0026amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).\n 由于每天光顾此类论坛的人数迅速增加，社交媒体为倡导组织塑造公共辩论提供了有力的机会。 然而，社会科学家还没有解释为什么一些议题发起者能成功发起大规模的广泛参与性(公开辩论/广泛对话)，而大多数其他组织却没做到。 本文使用自动文本分析发现，如果组织方建立文化桥梁，在很少能一起讨论的议题领域内产生可连接的对话主题信息，这类信息不仅能引起多个受众的共鸣，而且还能让这些受众彼此进行对话，那么组织方更有可能激发新社交媒体受众的评论。 在控制这些因素的情况下，建立实质性文化桥梁的组织， 其所发布信息， 比那些没有建立实质性文化桥梁的组织， 得到的评论数多 2.52 倍。\n 社交网络分析通常用于描述个人之间的友谊或其他关系，但它也可通过参与者的消息或想法的类型来描述参与者之间的关系（如下图) 是“文化网络”中的一个小区域。\n 每个节点描述一个参与议题公开对话的参与者 节点间的边代表那些在社交媒体倡导领域内讨论类似议题的人。  PNAS2016这篇使用“自闭症谱系障碍ASD疾病的治病原因大讨论”做的数据分享，图中 t1 处的一类用户认为ASD致病可能跟疫苗有关，而另一类人可能认为ASD可能与遗传因素的有关。从图形看，t1这类议题发起方式，没有产生广泛参与性。而t2和t3，文化网络中因为文化桥梁的存在，产生了广泛参与性。\n假设的文化网络，其中节点代表参与有关议题的对话参与者，而节点之间的边则描述了其消息内容的相似性。议题广泛参与性，除了话题发起者影响力、话题投放资源等因素影响，还有一个因素就是发起的话题是否吸引了受众。对于参与者而言，最有吸引力的话题需要满足“新颖，且熟悉”。","title":"PNAS | 文本网络分析\u0026文化桥梁Python代码实现"},{"content":" 点击上方图片购买课程   textgenrnn是在Keras/Tensorflow基础上搭建的Python包，特性:\n 有现代的神经网络架构，使用注意力权重和嵌入Embedding来加速训练和提升模型质量 支持字符级别和单词级别的训练 可设置RNN尺寸、RNN层数、是否使用双向RNN 可支持对任意输入文本的训练，包括大文件 可以使用GPU训练，使用CPU生成文本 提供基于GPU的cuDNN，以加速模型训练 使用情景标签训练模型，更快的学习，产出更好的效果。  安装 pip3 install textgenrnn \n快速上手 from textgenrnn import textgenrnn textgen = textgenrnn() textgen.generate() Run\n[Spoiler] Anyone else find this post and their person that was a little more than I really like the Star Wars in the fire or health and posting a personal house of the 2016 Letter for the game in a report of my backyard. \n使用新文本训练新模型也很简单\ntextgen.train_from_file(\u0026#39;hacker_news_2000.txt\u0026#39;, num_epochs=1) textgen.generate() Run\nProject State Project Firefox \n生成3个论文标题按照疯狂程度的增加顺序（temperature越高，生成算法偏离学习概率分布的程度越大)\ntextgen.generate(3, temperature=1.0) Run\nWhy we got money “regular alter” Urburg to Firefox acquires Nelf Multi Shamn Kubernetes by Google’s Bern ","permalink":"/blog/textgenrnn/","summary":"点击上方图片购买课程   textgenrnn是在Keras/Tensorflow基础上搭建的Python包，特性:\n 有现代的神经网络架构，使用注意力权重和嵌入Embedding来加速训练和提升模型质量 支持字符级别和单词级别的训练 可设置RNN尺寸、RNN层数、是否使用双向RNN 可支持对任意输入文本的训练，包括大文件 可以使用GPU训练，使用CPU生成文本 提供基于GPU的cuDNN，以加速模型训练 使用情景标签训练模型，更快的学习，产出更好的效果。  安装 pip3 install textgenrnn \n快速上手 from textgenrnn import textgenrnn textgen = textgenrnn() textgen.generate() Run\n[Spoiler] Anyone else find this post and their person that was a little more than I really like the Star Wars in the fire or health and posting a personal house of the 2016 Letter for the game in a report of my backyard.","title":"神经网络textgenrnn库生成文本"},{"content":" 点击上方图片购买课程   30天入门Python，需要你耐得住寂寞，又能静下心来敲代码，不要惧怕英文的Python教程，其实敲代码运行代码的过程与玩游戏无异。\n引言 Python 是一种用于通用编程的高级编程语言。它是一种开源的、解释性的、面向对象的编程语言。 Python 是由荷兰程序员 Guido van Rossum 创建的。 Python 编程语言的名称来源于英国的小品喜剧系列，Month Python\u0026rsquo;s Flying Circus。第一个版本于 1991 年 2 月 20 日发布。这个为期 30 天的 Python 挑战将帮助您逐步学习最新版本的 Python3。这些主题分为 30 天，每天包含几个主题，带有易于理解的解释、真实示例、许多动手练习和项目。\n这个挑战是为想要学习 Python 编程语言的初学者和专业人士设计的。完成挑战可能需要30到100天，积极参与电报群的人完成挑战的概率很高。\nWhy Python ? 它是一种非常接近人类语言的编程语言，因此易于学习和使用。 Python 被各种行业和公司（包括 Google）使用。 它已被用于开发 Web 应用程序、桌面应用程序、系统管理和机器学习库。 Python 是数据科学和机器学习社区中高度接受的语言。 我希望这足以说服你开始学习 Python。 Python 正在吞噬世界，而你在它吃掉你之前就应该杀了它。\n目录    # Day Topics     01 引言   02 变量,内置函数   03 四则运算   04 字符串   05 列表   06 元组   07 集合   08 字典   09 条件语句   10 循环语句   11 函数   12 魔窟   13 列表生成式   14 高级函数   15 类型错误   16 日期   17 异常处理语句   18 正则表达式   19 文件读写   20 包管理   21 类\u0026amp;对象   22 网络爬虫   23 虚拟环境   24 统计   25 Pandas   26 Web开发   27 MongoDB数据库   28 API接口   29 搭建API   30 总结    Welcome 恭喜决定参加 30 天的 Python 编程挑战。 在这个挑战中，您将学习成为 Python 程序员所需的一切以及整个编程概念。 在挑战结束时，您将获得 30DaysOfPython 编程挑战证书。\n如果您想积极参与挑战，可以加入30DaysOfPython 挑战(https://t.me/ThirtyDaysOfPython) 电报群。\n下载课件 https://github.com/Asabeneh/30-Days-Of-Python/archive/refs/heads/master.zip\n","permalink":"/blog/30-days-of-python/","summary":"点击上方图片购买课程   30天入门Python，需要你耐得住寂寞，又能静下心来敲代码，不要惧怕英文的Python教程，其实敲代码运行代码的过程与玩游戏无异。\n引言 Python 是一种用于通用编程的高级编程语言。它是一种开源的、解释性的、面向对象的编程语言。 Python 是由荷兰程序员 Guido van Rossum 创建的。 Python 编程语言的名称来源于英国的小品喜剧系列，Month Python\u0026rsquo;s Flying Circus。第一个版本于 1991 年 2 月 20 日发布。这个为期 30 天的 Python 挑战将帮助您逐步学习最新版本的 Python3。这些主题分为 30 天，每天包含几个主题，带有易于理解的解释、真实示例、许多动手练习和项目。\n这个挑战是为想要学习 Python 编程语言的初学者和专业人士设计的。完成挑战可能需要30到100天，积极参与电报群的人完成挑战的概率很高。\nWhy Python ? 它是一种非常接近人类语言的编程语言，因此易于学习和使用。 Python 被各种行业和公司（包括 Google）使用。 它已被用于开发 Web 应用程序、桌面应用程序、系统管理和机器学习库。 Python 是数据科学和机器学习社区中高度接受的语言。 我希望这足以说服你开始学习 Python。 Python 正在吞噬世界，而你在它吃掉你之前就应该杀了它。\n目录    # Day Topics     01 引言   02 变量,内置函数   03 四则运算   04 字符串   05 列表   06 元组   07 集合   08 字典   09 条件语句   10 循环语句   11 函数   12 魔窟   13 列表生成式   14 高级函数   15 类型错误   16 日期   17 异常处理语句   18 正则表达式   19 文件读写   20 包管理   21 类\u0026amp;对象   22 网络爬虫   23 虚拟环境   24 统计   25 Pandas   26 Web开发   27 MongoDB数据库   28 API接口   29 搭建API   30 总结    Welcome 恭喜决定参加 30 天的 Python 编程挑战。 在这个挑战中，您将学习成为 Python 程序员所需的一切以及整个编程概念。 在挑战结束时，您将获得 30DaysOfPython 编程挑战证书。","title":"30天Python编程学习挑战"},{"content":" 点击上方图片购买课程   [论文下载The predictive utility of word familiarity for online engagements and funding.pdf](The predictive utility of word familiarity for online engagements and funding.pdf)\n Markowitz, D. M., \u0026amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).\n 摘要 处理流畅性等元认知框架通常表明人们对简单和通用的语言的反应比复杂和技术语言更有利。与复杂的信息相比，人们更容易处理简单和非技术性的信息，因此会更多地与目标进行互动。在涵盖 12 个现场样本（总 n = 1,064,533）的两项研究中，我们通过展示人们在付出时间和注意力时更多地使用非技术语言（例如，简单的在线语言往往会获得更多社交信息）来建立并复制这种越简单越好的现象订婚）。然而，人们在捐款时会对复杂的语言做出反应（例如，慈善捐赠活动和赠款摘要中的复杂语言往往会收到更多的钱）。这一证据表明，人们根据时间或金钱目标以不同的方式使用复杂语言的启发式方法。这些结果强调语言是社会和心理过程的镜头，以及大规模测量文本模式的计算方法。\n processing fluency field studies automated text analysis common words jargon  ## 研究背景-复杂词汇的负面效应 术语（jargon），是复杂的、技术的、专业的语言，与日常语言相比，加工难度更大、更不流畅。许多关于加工流畅度（processing fluency）的研究都发现了使用术语的负面结果： 由于术语会给予人们不熟悉、加工困难的感觉，从而导致其较难理解。使用术语来描述手术过程的医生可能导致病人关于健康风险的错误估计；阅读了关于一项技术的复杂描述的人们（与阅读简单描述的人们相比）对该技术的理解更差并高估其风险。因此，不常用的、技术性的词汇通常不被看好，因为人们对其不熟悉而感觉较难加工，并给人们带来理解上的挑战。\n然而，对于复杂词汇的影响，以往研究基本基于实验室结果，效应的强度、健壮性、对真实行为的预测性等仍不清楚。此外，以往大多数关于加工流畅度（processing fluency）的研究都依赖于人们的主观判断，即通过询问被试对于简单或复杂文本的感受来判断效应的大小。该研究则弥补了这两点不足，将加工流畅度操作性定义为词法流畅度（lexical fluency，即所用的词汇为通用词汇还是复杂词汇），并考察复杂词汇对人们在真实世界中行为的影响。\n工具性启发法 工具性启发法（instrumentality heuristic）认为，如果一个感觉很困难的经历是有助于达到特定目标的，人们会给予这个经历更高的评价。由此，如果工具性目标被激活，那么加工流畅性低的复杂文本，反而可能会被给予更高的评价。对此，该研究同时考察了复杂词汇对于线上参与度（社会参与度）和资金筹集的影响。\n研究假设  假设一：没有工具性目标被激活时，人们更喜欢简单的语言，表现为更高的社会参与度 假设二：工具性目标被激活时，人们更喜欢复杂的语言，表现为更多的资金支持  实验结果支持这两个假设：通用词汇与更多的线上支持（高社会参与度）相关，复杂词汇则与更多的资金支持相关。\n数据 研究一的数据包括：   来自左倾（纽约时报）、右倾（福克斯新闻）、中立（美联社）的新闻媒体的推特\n  随机选择来自上述三个组织的的记者/名人的个人推特\n  共和党政治家和特朗普手下的推特\n  Reddit文章标题\n  科学论文（来自PLoS One）的标题和、摘要\n  TED演讲标题、内容\n  研究二的数据包括：  三个慈善平台   a) Kickstarter，主要是关于对创意项目的投资\n b) Indiegogo，主要是关于对创意项目和初创企业的投资\n c) GoFundMe，时要是关于生活事件的筹募（医疗、事故等）\nNIH基金申请书的摘要  数据分析 自动文本分析工具：研究使用自动文本分析工具LIWC（Linguistic Inquiry and Word Count）来对文本进行分析。LIWC词典是一个经过专家和统计分析认证的工具，其包含了6400个代表“非正式、非专业”的英语单词。研究者把通用词汇的比例操作性定义为文本中LIWC词典中词汇的比例。\n混合效应回归分析：使用混合效应回归分析的方法对数据进行分析。其中，回归模型中的控制变量主要有5类，分别是信息源（如新闻来源、演讲者、作者），时间（如年份、视频长度、发帖距今时间、发表时间），主题（如社会/政治等），金钱（如申请成功与否、货币类型）和投入程度（如出资人的数量、股份的数量）。\n数据转换：\n  研究一中，由于发表时间更长的信息更可能有更高的线上参与度，因此计算中所有参与度指标均除以了数据提取日期与发表日期之间的时间距离（数据提取-发表日期）。此外，对于考察的社会参与度指标，均进行了log转换。下文（表XX）中的点赞率、转发率等，均指代经过了上述转换后的点赞数、转发数等。\n  对研究一参与度相关指标求和时（如推特点赞率与转发率之和），对各指标标准化后再求和。\n  研究二中的因变量（各数据集中的所得资金数额）亦均进行了log转换。\n  ","permalink":"/blog/textfluency/","summary":"点击上方图片购买课程   [论文下载The predictive utility of word familiarity for online engagements and funding.pdf](The predictive utility of word familiarity for online engagements and funding.pdf)\n Markowitz, D. M., \u0026amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).\n 摘要 处理流畅性等元认知框架通常表明人们对简单和通用的语言的反应比复杂和技术语言更有利。与复杂的信息相比，人们更容易处理简单和非技术性的信息，因此会更多地与目标进行互动。在涵盖 12 个现场样本（总 n = 1,064,533）的两项研究中，我们通过展示人们在付出时间和注意力时更多地使用非技术语言（例如，简单的在线语言往往会获得更多社交信息）来建立并复制这种越简单越好的现象订婚）。然而，人们在捐款时会对复杂的语言做出反应（例如，慈善捐赠活动和赠款摘要中的复杂语言往往会收到更多的钱）。这一证据表明，人们根据时间或金钱目标以不同的方式使用复杂语言的启发式方法。这些结果强调语言是社会和心理过程的镜头，以及大规模测量文本模式的计算方法。\n processing fluency field studies automated text analysis common words jargon  ## 研究背景-复杂词汇的负面效应 术语（jargon），是复杂的、技术的、专业的语言，与日常语言相比，加工难度更大、更不流畅。许多关于加工流畅度（processing fluency）的研究都发现了使用术语的负面结果： 由于术语会给予人们不熟悉、加工困难的感觉，从而导致其较难理解。使用术语来描述手术过程的医生可能导致病人关于健康风险的错误估计；阅读了关于一项技术的复杂描述的人们（与阅读简单描述的人们相比）对该技术的理解更差并高估其风险。因此，不常用的、技术性的词汇通常不被看好，因为人们对其不熟悉而感觉较难加工，并给人们带来理解上的挑战。","title":"PNAS|词汇熟悉度对线上参与和资金筹集的预测性效用"},{"content":" 点击上方图片购买课程   PyWebIO https://github.com/pywebio/PyWebIO\n快速构建 Web 应用的 Python 工具。通过该项目你可在不写 HTML、CSS、JS 代码的前提下，仅用 Python 快速完成一个包含数据展示、表单的小型 Web 应用页面\n{{ \u0026lt; figure src=\u0026ldquo;img/PyWebIO.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\npottery https://github.com/brainix/pottery\n以 Python 的方式操作 Redis 的库。忘记那些 Redis 命令吧，只要你知道如何使用 Python 字典，那么你就会用这个库操作 Redis\n\u0026gt;\u0026gt;\u0026gt; from pottery import RedisList \u0026gt;\u0026gt;\u0026gt; tel = RedisDict({\u0026#39;jack\u0026#39;: 4098, \u0026#39;sape\u0026#39;: 4139}, redis=redis, key=\u0026#39;tel\u0026#39;) \u0026gt;\u0026gt;\u0026gt; tel[\u0026#39;guido\u0026#39;] = 4127 \u0026gt;\u0026gt;\u0026gt; tel RedisDict{\u0026#39;jack\u0026#39;: 4098, \u0026#39;sape\u0026#39;: 4139, \u0026#39;guido\u0026#39;: 4127} \u0026gt;\u0026gt;\u0026gt; tel[\u0026#39;jack\u0026#39;] 4098 \u0026gt;\u0026gt;\u0026gt; squares = RedisList([1, 4, 9, 16, 25], redis=redis, key=\u0026#39;squares\u0026#39;) \u0026gt;\u0026gt;\u0026gt; squares RedisList[1, 4, 9, 16, 25] \u0026gt;\u0026gt;\u0026gt; squares[0] 1 \nspider-flow https://github.com/ssssssss-team/spider-flow\n新一代爬虫平台，以图形化方式定义爬虫流程，不写代码即可完成爬虫。\n{{ \u0026lt; figure src=\u0026ldquo;img/spiderflow.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nPaddleSpeech https://github.com/PaddlePaddle/PaddleSpeech\n百度飞浆开源的语音工具包，可实现端到端语音同声翻译， 文本转声音等。\n{{ \u0026lt; figure src=\u0026ldquo;img/PaddleSpeech.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nPaddleGAN https://github.com/PaddlePaddle/PaddleGAN\n百度飞浆开源的GAN项目，图片的变脸卡通化、视频图片的修复。。。挺好玩的，感兴趣可以试试\n{{ \u0026lt; figure src=\u0026ldquo;img/PaddleGAN.jpeg\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nlatexcv https://github.com/jankapunkt/latexcv\n一组用 LaTeX 编写的简历和简历模板。\n{{ \u0026lt; figure src=\u0026ldquo;img/latexcv1.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n{{ \u0026lt; figure src=\u0026ldquo;img/latexcv2.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nMockingBird https://github.com/babysor/MockingBird\nAI拟声: 5秒内克隆您的声音并生成任意语音内容 https://www.bilibili.com/video/BV17Q4y1B7mY/\n{{ \u0026lt; figure src=\u0026ldquo;img/MockingBird.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nTextNet https://github.com/jboynyc/textnets\ntextnet将文档集表示为文档和单词的网络,为文本分析与可视化提供了新的可能性。\n{{ \u0026lt; figure src=\u0026ldquo;img/textnet.svg\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nfinetuner https://github.com/jina-ai/finetuner\nFinetuner 可调整任何深度神经网络的权重，以便更好地嵌入搜索任务。\n  专为微调而设计\n  强大而直观：您只需要finetuner.fit()\n  与框架无关：承诺在 PyTorch、Tensorflow/Keras 和 PaddlePaddle 深度学习后端提供相同的 API 和用户体验。\n  Jina 集成：与 Jina 平滑集成，减少实验和生产之间的上下文切换成本。\n  {{ \u0026lt; figure src=\u0026ldquo;img/finetuner.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\ntaguette https://github.com/remram44/taguette\n免费开源的定性研究工具——MIRROR OF GITLAB REPOSITORY\n{{ \u0026lt; figure src=\u0026ldquo;img/taguette.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n##covid19-daily-newsletter\nhttps://github.com/edoriggio/covid19-daily-newsletter\n每日电子邮件以跟踪 COVID-19 的传播, 该项目有价值的地方是我们可以借鉴搭建自己的newsletter平台。\n{{ \u0026lt; figure src=\u0026ldquo;img/newsletter1.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n{{ \u0026lt; figure src=\u0026ldquo;img/newsletter2.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nvizzu https://github.com/vizzuhq/vizzu-lib\n一个 JS 的数据可视化动画库，功能很强，可以用来制作数据图表的动画。\n{{ \u0026lt; figure src=\u0026ldquo;img/vizzu.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nCrimeKgAssitant https://github.com/liuhuanyong/CrimeKgAssitant\n罪名法务智能项目,内容包括856项罪名知识图谱, 基于280万罪名训练库的罪名预测,基于20W法务问答对的13类问题分类与法律资讯问答功能.\n","permalink":"/blog/techweekly07/","summary":"点击上方图片购买课程   PyWebIO https://github.com/pywebio/PyWebIO\n快速构建 Web 应用的 Python 工具。通过该项目你可在不写 HTML、CSS、JS 代码的前提下，仅用 Python 快速完成一个包含数据展示、表单的小型 Web 应用页面\n{{ \u0026lt; figure src=\u0026ldquo;img/PyWebIO.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\npottery https://github.com/brainix/pottery\n以 Python 的方式操作 Redis 的库。忘记那些 Redis 命令吧，只要你知道如何使用 Python 字典，那么你就会用这个库操作 Redis\n\u0026gt;\u0026gt;\u0026gt; from pottery import RedisList \u0026gt;\u0026gt;\u0026gt; tel = RedisDict({\u0026#39;jack\u0026#39;: 4098, \u0026#39;sape\u0026#39;: 4139}, redis=redis, key=\u0026#39;tel\u0026#39;) \u0026gt;\u0026gt;\u0026gt; tel[\u0026#39;guido\u0026#39;] = 4127 \u0026gt;\u0026gt;\u0026gt; tel RedisDict{\u0026#39;jack\u0026#39;: 4098, \u0026#39;sape\u0026#39;: 4139, \u0026#39;guido\u0026#39;: 4127} \u0026gt;\u0026gt;\u0026gt; tel[\u0026#39;jack\u0026#39;] 4098 \u0026gt;\u0026gt;\u0026gt; squares = RedisList([1, 4, 9, 16, 25], redis=redis, key=\u0026#39;squares\u0026#39;) \u0026gt;\u0026gt;\u0026gt; squares RedisList[1, 4, 9, 16, 25] \u0026gt;\u0026gt;\u0026gt; squares[0] 1","title":"TechWeekly-07| 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   cntext更新至1.1 版本 本次更新了共现矩阵的计算函数。\n更新方法\npip3 install cntext --upgrade 或指定版本安装\npip3 install cntext==1.1 \nco_occurrence_matrix 词共现矩阵\nfrom cntext.dictionary import co_occurrence_matrix documents = [\u0026#34;I go to school every day by bus .\u0026#34;, \u0026#34;i go to theatre every night by bus\u0026#34;] co_occurrence_matrix(documents, window_size=2, lang=\u0026#39;english\u0026#39;)   documents2 = [\u0026#34;编程很好玩\u0026#34;, \u0026#34;Python是最好学的编程\u0026#34;] co_occurrence_matrix(documents2, window_size=2, lang=\u0026#39;chinese\u0026#39;)   \n","permalink":"/blog/cntext_upgrade/","summary":"点击上方图片购买课程   cntext更新至1.1 版本 本次更新了共现矩阵的计算函数。\n更新方法\npip3 install cntext --upgrade 或指定版本安装\npip3 install cntext==1.1 \nco_occurrence_matrix 词共现矩阵\nfrom cntext.dictionary import co_occurrence_matrix documents = [\u0026#34;I go to school every day by bus .\u0026#34;, \u0026#34;i go to theatre every night by bus\u0026#34;] co_occurrence_matrix(documents, window_size=2, lang=\u0026#39;english\u0026#39;)   documents2 = [\u0026#34;编程很好玩\u0026#34;, \u0026#34;Python是最好学的编程\u0026#34;] co_occurrence_matrix(documents2, window_size=2, lang=\u0026#39;chinese\u0026#39;)","title":"共词矩阵 | cntext更新至1.1"},{"content":" 点击上方图片购买课程   音素 音素是构成语音的基本声音，音节和单词建立在音节上。在与语音和语言处理相关的各种应用（例如文本到语音系统）中，将文本从其拼写形式转录为语音字母表是一项重要要求。\nPhonemizer 是一个精确寻址的 Python 包, 它将文本从其拼写表示转录为语音表示。 该包设计用户友好的，并公开了一个高级音素化函数， 支持大约100种不同的语言。phonemizer 使用的默认后端是 eSpeak （Dunn \u0026amp; Vitolins，2019 年），一种基于语言专业知识和手写转录规则的文本转语音软件。它将文本转录成国际音标，并支持一百多种语言。使用 MBROLA 声音（Tits \u0026amp; Vitolins，2019），eSpeak 后端可用于大约 35 种语言，以 SAMPA 计算机可读语音字母表转录文本。\n安装 安装phonemizer前需要配置espeak-ng，\n win https://github.com/espeak-ng/espeak-ng/releases下载对应的msi文件点击安装 mac 首先配置好homebrew，之后命令行brew install espeak  pip3 install phonemizer 音素化phonemize from phonemizer import phonemize\nphonemize(text, language=\u0026lsquo;en-us\u0026rsquo;, prepend_text=False, preserve_punctuation=False, with_stress=False, njobs=1)\n text 文本列表 language 语言。\u0026ldquo;en-us\u0026quot;美国英语， \u0026ldquo;zh\u0026quot;中文 prepend_text 输出结果保留输入的文本，默认False preserve_punctuation 输出结果保留标点符号，默认False with_stress 标记重读，默认False njobs 并行运算核数，默认使用cpu的1个核。  from phonemizer import phonemize texts = [\u0026#39;hello, my name is david\u0026#39;, \u0026#39;nice to meet you!\u0026#39;] # Do this: phonemized = phonemize(texts, language=\u0026#39;en-us\u0026#39;) phonemized Run\n['həloʊ maɪ neɪm ɪz deɪvɪd ', 'naɪs tə miːt juː ']  但上面的用法速度较慢， 更高效的写法应该为\nfrom phonemizer.backend import EspeakBackend backend = EspeakBackend(language=\u0026#39;en-us\u0026#39;) texts = [\u0026#39;hello, my name is david\u0026#39;, \u0026#39;nice to meet you!\u0026#39;] phonemized = backend.phonemize(texts) phonemized Run\n142 µs ± 851 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)  给每个单词构造音素，输出结果为字典样式\nfrom phonemizer.backend import EspeakBackend from phonemizer.punctuation import Punctuation from phonemizer.separator import Separator backend = EspeakBackend(\u0026#39;en-us\u0026#39;) text = \u0026#39;It amused him to think that they were probably talking about him at that very moment\u0026#39; words = [word for word in text.lower().split(\u0026#39; \u0026#39;)] # 忽略词语边界，音素之间用空格间隔 separator = Separator(phone=\u0026#39; \u0026#39;, word=None) lexicon = {word: backend.phonemize([word], separator=separator, strip=True)[0] for word in words} lexicon Run\n{'it': 'ɪ t', 'amused': 'ɐ m j uː s d', 'him': 'h ɪ m', 'to': 't uː', 'think': 'θ ɪ ŋ k', 'that': 'ð æ t', 'they': 'ð eɪ', 'were': 'w ɜː', 'probably': 'p ɹ ɑː b ə b l i', 'talking': 't ɔː k ɪ ŋ', 'about': 'ɐ b aʊ t', 'at': 'æ t', 'very': 'v ɛ ɹ i', 'moment': 'm oʊ m ə n t'}  中文的音素化 text_zhs = [\u0026#39;你好我的名字是大卫\u0026#39;, \u0026#39;很高兴认识你\u0026#39;] phonemized_zhs = phonemize(text_zhs, language=\u0026#39;zh\u0026#39;) phonemized_zhs Run\n[\u0026#39;ni2 xɑu2 wo2 tə1 miɜŋ tsi̪5 s.i.5 tɑ5 wei5 \u0026#39;, \u0026#39;xə2n kɑu5 ɕi5ŋ ʐə5n s.i.1 ni2 \u0026#39;] \nfrom phonemizer.backend import EspeakBackend from phonemizer.punctuation import Punctuation from phonemizer.separator import Separator import re text = \u0026#39;想到他们可能在那个时候谈论他，他觉得好笑\u0026#39; words = re.findall(\u0026#39;[\\u4e00-\\u9fa5]\u0026#39;, text) backend = EspeakBackend(\u0026#39;zh\u0026#39;) separator = Separator(phone=\u0026#39; \u0026#39;, word=None) # 构建每个汉字一个对应的音素表达，输出结果为字典样式 lexicon = {word: backend.phonemize([word], separator=separator, strip=True)[0] for word in words} lexicon Run\n{'想': 'ɕ iɑ2 ŋ ', '到': 't ɑu5 ', '他': 'th ɑ5 ', '们': 'm ə1 n ', '可': 'kh o2 ', '能': 'n əɜ ŋ ', '在': 'ts ai5 ', '那': 'n ɑ5 ', '个': 'k o1 ', '时': 's. i.ɜ ', '候': 'x ou5 ', '谈': 'th aɜ n ', '论': 'l uə5 n ', '觉': 'tɕ yɛɜ ', '得': 't ə1 ', '好': 'x ɑu2 ', '笑': 'ɕ j ɑu5 '}  心理学相关概念 这个包用起来比较简单，但是想到一个场景，说不定可以多个角度去分析文本。\n经常看文本的时候，脑海里不自觉的读出声音，这种现象今天查了下叫做“听觉表象”，听觉表象产生于语言的视觉区和语言的运动区——角回和布洛卡区。通过听觉，听出相应的字的声音，我们就可以领会到这句话的意思。从常人的生长发育的过程，我们都是先牙牙学语，通过声音理解内容的含义，而后经过十数教育学会语言书面文字，掌握文字系统，此时我们的神经回路是“视觉(听觉)~记忆~理解”\n对一个东西的“知觉”在心理学上叫做这个东西的“知觉表征”，相当于是把这个东西转码为了一个，用于后续在心理上对这个东西进行加工。这个心理符号的编码与这个东西本身的特征以及最初的感觉通道有关——一个真正的苹果常会被以视觉的方式编码，成为一个视觉知觉表征，可以简单理解成这个苹果的图像；一个词“苹果”常会被以听觉的方式编码，成为一个AVL单元，可以简单地理解成把“苹果”这两个字和“ping’guo”这个读音打包在一起的一个文件。\n感觉代码被经过某些处理后储存在记忆当中，当有一天需要用的时候再被从记忆里提取出来。这个时候的提取，本身是一种建构，也就是与将感觉处理后存储起来的一个相反的过程——所以心理学上把我们所提取（建构）的这个代码就称为表象。表象和知觉是机能等价的（Neisser，1972），可以简单理解为表象就是是一种基于过去经验的知觉。这也解释了我们默读词汇的时候，这个AVL单元里“语音”的部分是哪里来的了——这是我们基于对自己声音的了解而建构的一种听觉表象。简单来说这个语音就是根据我们对自己声音的认识，来“想象”的读出来的声音。\n 知乎回答-心理学哈士奇\nConrad R (1963). Acoustic confusions and memory span for words. Nature, 197: 1029-1030.\nNeisser U (1972). Changing conception of imagery. In P W Sheehan (ED), The Function and Nature of Imagery. London: Achademic Press. 知乎回答-心理学哈士奇\n 引用格式 Bernard, M. and Titeux, H. (2021). Phonemizer: Text to phones transcription for multiple languages in python. Journal of Open Source Software, 6(68):3958.\n@article{Bernard2021, doi = {10.21105/joss.03958}, url = {https://doi.org/10.21105/joss.03958}, year = {2021}, publisher = {The Open Journal}, volume = {6}, number = {68}, pages = {3958}, author = {Mathieu Bernard and Hadrien Titeux}, title = {Phonemizer: Text to Phones Transcription for Multiple Languages in Python}, journal = {Journal of Open Source Software} } ","permalink":"/blog/phonemizer/","summary":"点击上方图片购买课程   音素 音素是构成语音的基本声音，音节和单词建立在音节上。在与语音和语言处理相关的各种应用（例如文本到语音系统）中，将文本从其拼写形式转录为语音字母表是一项重要要求。\nPhonemizer 是一个精确寻址的 Python 包, 它将文本从其拼写表示转录为语音表示。 该包设计用户友好的，并公开了一个高级音素化函数， 支持大约100种不同的语言。phonemizer 使用的默认后端是 eSpeak （Dunn \u0026amp; Vitolins，2019 年），一种基于语言专业知识和手写转录规则的文本转语音软件。它将文本转录成国际音标，并支持一百多种语言。使用 MBROLA 声音（Tits \u0026amp; Vitolins，2019），eSpeak 后端可用于大约 35 种语言，以 SAMPA 计算机可读语音字母表转录文本。\n安装 安装phonemizer前需要配置espeak-ng，\n win https://github.com/espeak-ng/espeak-ng/releases下载对应的msi文件点击安装 mac 首先配置好homebrew，之后命令行brew install espeak  pip3 install phonemizer 音素化phonemize from phonemizer import phonemize\nphonemize(text, language=\u0026lsquo;en-us\u0026rsquo;, prepend_text=False, preserve_punctuation=False, with_stress=False, njobs=1)\n text 文本列表 language 语言。\u0026ldquo;en-us\u0026quot;美国英语， \u0026ldquo;zh\u0026quot;中文 prepend_text 输出结果保留输入的文本，默认False preserve_punctuation 输出结果保留标点符号，默认False with_stress 标记重读，默认False njobs 并行运算核数，默认使用cpu的1个核。  from phonemizer import phonemize texts = [\u0026#39;hello, my name is david\u0026#39;, \u0026#39;nice to meet you!","title":"Phonemizer音素化 Python文本语音表征包"},{"content":" 点击上方图片购买课程    Omnizart 是一个 Python 库，是自动音乐转录的简化解决方案。该库收集了音乐与文化技术实验室(https://sites.google.com/view/mctl/home)的研究成果，分析和弦音乐并转录乐器的音符 、和弦 、drum events、帧级人声旋律、音符级人声旋律。\nOmnizart 提供构建基于深度学习的音乐转录生命周期的主要功能，涵盖从数据集下载、特征预处理、模型训练、转录和声音化。还提供了预先训练的检查点，以便立即使用转录。该论文可以从 Journal of Open Source Software (JOSS) 中找到。\n演示 Colab 使用 Colab notebook https://bit.ly/OmnizartColab几乎可以立即转录您最喜欢的歌曲！\n声音样本 原声\n\n和弦转录\n 鼓点转录\n 音符级人声转录\n 帧级语音转录\n Source files can be downloaded here. You can use Audacity to open the files.\n","permalink":"/blog/omnizart/","summary":"点击上方图片购买课程    Omnizart 是一个 Python 库，是自动音乐转录的简化解决方案。该库收集了音乐与文化技术实验室(https://sites.google.com/view/mctl/home)的研究成果，分析和弦音乐并转录乐器的音符 、和弦 、drum events、帧级人声旋律、音符级人声旋律。\nOmnizart 提供构建基于深度学习的音乐转录生命周期的主要功能，涵盖从数据集下载、特征预处理、模型训练、转录和声音化。还提供了预先训练的检查点，以便立即使用转录。该论文可以从 Journal of Open Source Software (JOSS) 中找到。\n演示 Colab 使用 Colab notebook https://bit.ly/OmnizartColab几乎可以立即转录您最喜欢的歌曲！\n声音样本 原声\n\n和弦转录\n 鼓点转录\n 音符级人声转录\n 帧级语音转录\n Source files can be downloaded here. You can use Audacity to open the files.","title":"OMNIZART: 音乐转录变得容易"},{"content":" author:cj1128\nGithub: https://github.com/cj1128\nBlog: https://cjting.me/\nsrc: https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/\n 印象中使用的第一个 PC 音乐播放器是「千千静听」，大概是 08 年左右。我还清楚地记得它自带了一首梁静茹的歌「Love is everything」，动听的旋律至今萦绕耳旁。\n 千千静听的左上角有一组随着音乐跳动的柱子，我想大家都习以为常了，很多播放器都有这功能。但是其实有没有想过，这是怎么实现的？\n要理解这个问题，我们首先要理解声音是什么。\n波 中学物理有介绍过，声音是由物体振动产生的，这个振动经由介质传导到我们的耳朵中引起耳膜振动从而让我们听见声音。\n我们可以用波形来描述振动，其中横轴是时间，纵轴是振动的位移，也就是离开原点的距离。\n振动的两个关键属性是频率和振幅，频率是指一秒钟振动多少次，对应于音高，频率越高声音越尖锐刺耳。\n振幅则表示最大的位移值，对应于音量，振幅越大声音越响。\n 上图是用 matplotlib 绘制的一个正弦波，可以看出在 0.01s 内振动了 2 次，因此频率是 200，振幅是 1。\nfrom matplotlib import pyplot as plt import numpy as np def sin_wave(hz): x = np.linspace(0, 0.01, 1000, endpoint=False) y = np.sin(x * hz * 2 * np.pi) plt.plot(x, y) plt.xlabel(\u0026#34;Time\u0026#34;) plt.axhline(y=0, color=\u0026#39;k\u0026#39;) plt.show() sin_wave(200) 这种最简单的波形对应的声音叫做 pure tone，顾名思义，非常的简单而且纯粹。\n下面是用 scipy 生成的 200hz 的声音，大家可以听听看。\n import scipy.io.wavfile as wav SAMPLE_RATE = 44100 DURATION = 5 def write_wav(hz): x = np.linspace(0, DURATION, SAMPLE_RATE * DURATION, endpoint=False) tone = np.sin(x * hz * 2 * np.pi) normalized_tone = np.int16((tone / tone.max()) * 32767) wav.write(f\u0026#34;{hz}hz.wav\u0026#34;, SAMPLE_RATE, normalized_tone) write_wav(200) 这是 800hz 的声音，可以明显感觉到，声音更加尖锐了。\n 现实世界中我们听到的声音不会是 pure tone，而是各种 pure tone 叠加的结果。\n下图中蓝色是 200hz，黄色是 800hz，而绿色则是它们叠加的结果，已经不再是一个 pure tone 了。\n 下面是绿色曲线听起来的效果。\n 总结一下：\n 我们可以用一个波形图来表示声音，其中 X 轴是时间，Y 轴是振动的位移 最简单的正弦波对应的声音叫做 pure tone 日常中我们听到的声音都是各种 pure tone 叠加的结果  Tip:\n如果想了解一点乐理，LIGHTNOTE 非常不错。\n它的网页做得很棒，通过互动的形式讲述基本的乐理知识，包括音阶、和弦，十二平均律等。\n采样 因为声音是一个随时间变化的连续函数，任意一段间隔内都有无穷多个值，而无穷多的数据是没办法存储在计算机中的。\n想要存储，我们就需要将它离散化变成离散序列，具体的方法就是采样，使用固定的间隔对函数进行求值。\n这是原始的声音。\n 这是采样后的结果。\n 通过采样，我们将一个无尽序列变成了一个有限序列，其中每一个值叫做样本，这样就可以方便地在计算机中存储了。\n采样的关键参数有两个，分别是采样频率和采样深度。\n采样频率是指每秒钟采样多少次，很明显，采样频率越高，样本越多，数据量越大，同时也更接近原始的声音。\n采样深度是指用多少比特去存储采样得到的值，使用的比特越多，还原得到的声音越细腻，和图片的色彩深度是一个道理。\n假设我们用 16bit 采样深度和 44100 的采样频率，那么一段一秒钟的声音就变成了一个 44100 大小的 int16 数组。\n得到采样值数组以后，接下来如何存储这个数组就是编码的范畴了。我们可以直接存，也可以采用某种算法压缩以后再存。各种各样的办法，对应着各种各样的音频格式，比如 MP3, AAC, WAV 等。\n这其中 AAC 和 MP3 格式是有损的，也就是存储以后再读出来，得到的样本和原始的会有一些区别，但这些区别很细微，可以忽略。有损的特点就是在基本不影响最终播放效果的情况下，大幅度减少文件体积。\n而 WAV 则是无损的，输入是什么，读出来就是什么，缺点自然是体积要大很多。\n我们可以通过 scipy 来读取 WAV 音频。\nimport scipy.io.wavfile as wav rate, all_samples = wav.read(\u0026#34;xxx.wav\u0026#34;) print(rate, len(all_samples), all_samples.dtype) # 44100 10639873 int16 # 上面分别是：采样率，样本总数，以及样本值的类型 # int16 说明每一个样本是 16bit 整数 print(all_samples[:20]) # [-41 -51 -49 -41 -28 -15 -20 -33 -32 -38 -54 -54 -44 -30 -8 10 11 2 # -14 -36] # 可以看到样本就是一组数字 可以看出，采样频率是 44100，一共有 10639873 个样本，使用 int16 进行存储，计算可知这首歌的时间是 241 秒。\n傅里叶变换 给定一个 200hz 的波形和一个 800hz 的波形，计算它们叠加以后的结果非常简单，没有任何难度。\n 但是，如果给到叠加以后的结果呢？\n 能看出上面的绿色曲线是 200hz+800hz 叠加得到的吗？完全看不出来，甚至，这样的逆推真的可行吗？还是说和永动机一样在原理上就是不可行的？\n答案是可行的，通过傅里叶变换，我们可以将一个复合波形拆解为构成它的简单波形。\n想想都觉得不可思议，这是怎么做到的？傅里叶又是怎么想到的？不得不说十八世纪的法国数学家傅里叶是一个天才，让人仰望。\nTip: 3Blue1Brown 有一个视频介绍傅里叶变换的原理，非常棒：形象的介绍：什么是傅里叶变换？\n接下来我们来看看怎样通过傅里叶变换来拆解复合波形。\n我们可以认为傅里叶变换是一个函数，它的输入为 N 个实数，代表采样值，输出为 N 个复数，代表不同频率的分量，这里我们忽略复数的实部和虚部，只关心它的模，也就是绝对值。\nTip: 这里关于傅里叶变换的说法并不完整，比如傅里叶变换的输入也可以是复数。但是对我们来说理解到这一层面就够了。如果想要深入研究，可以去学习数字信号处理相关的课程。\n我们使用 scipy 来实际进行一下傅里叶变换。\nfrom scipy.fft import fft, fftfreq # 这是即将进行变换的采样值: [0, 1, 2, 3, 4, 5, 6, 7] samples = np.arange(8) # 这是傅里叶变换的结果 y = fft(samples) for i in y: print(i) # 变换结果为 8 个复数 # (28-0j) # (-3.9999999999999996+9.65685424949238j) # (-4+4j) # (-4+1.6568542494923797j) # (-4-0j) # (-4-1.6568542494923797j) # (-4-4j) # (-3.9999999999999996-9.65685424949238j) # x 是上面每个结果对应的频率 # 这里 fftfreq 函数的第一个参数为样本数量 # 第二个参数为 采样率的 倒数，我们假定采样率为 8 x = fftfreq(len(samples), 1 / 8) print(x) # [ 0. 1. 2. 3. -4. -3. -2. -1.] # 这里意味着 y[0] 对应的频率是 0，y[1] 对应的频率是 1 # 负数频率是什么含义？我们可以不管，忽略 上面的代码我们构造了 8 个数字进行傅里叶变换，并假定这组样本是使用采样率 8 进行采样得到的。\n变换的结果是 8 个复数，这 8 个复数对应 8 个频率，我们可以看出，正频率和负频率对应的变换结果是一样的，也就是变换后的结果是对称的。\n上面得到的结果意义不大，因为输入没什么意义。现在我们使用傅里叶变换处理一下 200hz+800hz 叠加后的波形，看看是否能还原回 200hz 和 800hz。\nimport numpy as np from matplotlib import pyplot as plt from matplotlib.pyplot import figure from scipy.fft import fft, fftfreq figure(figsize=(14, 6), dpi=80) DURATION = 0.01 SAMPLE_RATE = 44100 def gen_sine_wave(freq): x = np.linspace(0, DURATION, int(DURATION * SAMPLE_RATE), endpoint=False) y = np.sin(x * freq * 2 * np.pi) return y hz200 = gen_sine_wave(200) hz800 = gen_sine_wave(800) # 叠加后的采样数据 # 这里每个样本不是 int16，而是 float，无关紧要 total = hz200 + hz800 y = fft(total) x = fftfreq(len(total), 1 / SAMPLE_RATE) # 此时横轴是频率，纵轴是该频率的分量 # 使用 np.abs 计算复数的模 plt.plot(x, np.abs(y)) plt.show() 图中我们可以看出，首先输出结果是左右对称的，我们忽略掉负频率部分，只关注正频率。\n其次，傅里叶变换告诉我们该输入信号由 2 个频率组成，程序运行时鼠标放上去可以看出是 200 和 800。也就是说，通过傅里叶变换，我们将复合波形拆解为了简单波形。\n或者说，通过傅里叶变换，我们将一个信号拆解为了一组不同频率的正弦波，将它从时域变换到了频域。信号还是这个信号，只不过换个角度去看它。\n总结一下：\n 傅里叶变换是一个函数，输入一串数字代表样本值，输出一串复数代表频率分量 每个数字具体代表的频率可以根据样本数量和采样频率计算得知 我们不关心复数的方向，我们只关心复数的模 傅里叶输出的结果是左右对称的，因此只有一半的信息有价值  因为输出结果是对称的，只有一半的信息有价值，因此有一个变体叫做 rfft，只返回一半的信息，计算速度可以更快一些。\nimport numpy as np from scipy.fft import rfft, rfftfreq SAMPLE_RATE = 8 samples = np.arange(8) # 此时 x 和 y 都是 5 个值 y = rfft(samples) x = rfftfreq(len(samples), 1 / SAMPLE_RATE) # y[0] 表示频率 0 的分量 # y[1] 表示频率 1 的分量 print(x) # [0. 1. 2. 3. 4.] for i in y: print(i) # 和之前 fft/fftfreq 的输出对比，可以发现结果是一样的，只不过去掉了对称的冗余信息 # (28+0j) # (-3.9999999999999996+9.65685424949238j) # (-4+4j) # (-4+1.6568542494923797j) # (-4+0j) \n音频可视化 到了这里所有实现音频可视化所需要的知识都备齐了。\n首先我们可以猜到，随音乐跳动的每个柱子，对应的是一个频率或一组频率，而柱子的高度则是频率的分量大小，这两个信息傅里叶变换都能给到。\n现在剩下的问题则是输入是什么？我们不可能把一首歌曲的所有样本作为输入进行傅里叶变换，如果这样做，我们只能得到一份频率数据。\n我们希望得到的频率数据随着音乐在变化，因此这里要选择一个窗口大小（FFT_SIZE），比如 2048。随着音乐的播放，我们每次都从当前播放位置选择 2048 个样本然后进行傅里叶变换。\n现在我们的初步音频可视化方案就确定了：\n 解析音频文件得到 allSamples 每次绘图时，从当前 sample 开始选择 FFT_SIZE 个 sample 对这些 sample 进行傅里叶变换 对变换得到的复数求模 把结果变换到 0 ~ 1 然后绘图  接下来我们用 Web 来实现一个简单的音频可视化工具。\n首先，解析音频文件得到 allSamples 我们可以使用 WebAudio 的 API。\n// 得到某个音频文件的二进制数据 const ab = fetch(\u0026#34;xxx.mp3\u0026#34;).then(res =\u0026gt; res.arrayBuffer()) // 新建 WebAudio context const audioCtx = new AudioContext() // 解析 arrayBuffer const audioBuffer = audioCtx.decodeAudioData(ab) console.log(audioBuffer) // AudioBuffer {length: 10639872, duration: 241.2669387755102, sampleRate: 44100, numberOfChannels: 2} // duration: 241.2669387755102 // length: 10639872 // numberOfChannels: 2 // sampleRate: 44100 // [[Prototype]]: AudioBuffer  // 一般来说音频都有多个声道，用于立体声播放 // 这里我们选第一个声道就可以了 const allSamples = audioBuffer.getChannelData(0) // allSamples 就是我们要的样本数组，每一个样本值是浮点数 console.log(allSamples.slice(0, 10)) // Float32Array(10) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 接下来，我们使用 requestAnimationFrame 来进行绘制。\n每次绘制的时候，需要先获取当前的播放位置。audioBuffer 中有音频的总时间，通过 audioCtx.currentTime 我们可以得知当前的播放时间，两个相除便是播放位置。\n// 用户点击播放时 const onPlay = () =\u0026gt; { // 记录下播放的开始时间  const startTime = audioCtx.currentTime const draw = () =\u0026gt; { requestAnimationFrame(draw) // 目前播放了多少时间 (seconds)  const cur = audioCtx.currentTime - startTime // 播放的进度是多少  const per = cur / audioBuffer.duration const startIndex = Math.floor(allSamples.length * per) // 从 startIndex 开始切割 FFT_SIZE 个 sample 出来  // 此时要进行傅里叶变换的 samples 就准备好了  const samples = allSamples.slice(startIndex, startIndex + FFT_SIZE) } requestAnimationFrame(draw) } 接下来就是傅里叶变换了，这里我找了一下，JS 相关的库很少，不过验证下来 fft.js 是可用的。\nTip: 不得不说科学计算还是 Python 方便，numpy 和 scipy 真的太好用了。\n经过 FFT 以后，我们得到了 1025 个复数，对这些复数取模，得到 1025 个实数。\n// JS 没有复数，我们自行定义一个 class Complex { constructor(real, imag) { this.real = real this.imag = imag } abs() { return Math.sqrt(this.real * this.real + this.imag * this.imag) } } const rfft = (samples) =\u0026gt; { const f = new FFTJS(samples.length) const out = f.createComplexArray() const N = samples.length / 2 + 1 f.realTransform(out, samples) const value = [] for(let i = 0; i \u0026lt; N; i++) { value[i] = new Complex(out[2*i+0], out[2*i+1]) } return value } // 此时我们得到了一组实数 const y = rfft(samples).map(c =\u0026gt; c.abs()) Tip:\n其实这里还有一个过程，我们不会直接把 samples 进行 FFT 变换，而是会先应用一个 Window Function，这样做的目的如果感兴趣可以自行了解。\n对于我们来说，Window Function 就是一个 number[] -\u0026gt; number[] 的函数。\n接下来就是将这些数字变换到 0 ~ 1 区间，这一步比较简单，观察一下最大最小值做个线性变换就行了。\nconst result = y.map(v =\u0026gt; (v + 20) / 80) 有了一组 0 ~ 1 的数字以后，我们就可以使用 Canvas 进行绘图了。\nconst W = 800 // canvas width const H = 600 // canvas height  const draw = (spectrum) =\u0026gt; { ctx.clearRect(0, 0, W, H) const barWidth = W / spectrum.length for(let i = 0; i \u0026lt; spectrum.length; i++) { const v = spectrum[i] const x = i * barWidth const height = v * H const y = H - height ctx.fillRect(x, y, barWidth, height) } } 然后我们来看看结果，打开 audio-vis-demo，选择一个音频文件，取消勾选 “Smooth”，点击播放，然后我们会发现，柱子可以正常地绘制出来，但是它们”跳跃“得非常厉害，不够平稳。\n这是因为我们漏了一步，叫做 Time smoothing。\n具体的机理我并不理解，所以就不再说明了，对我们的目标来说，这部分当做黑盒处理就可以了。\n这里我想说明一下，在我看来，学习任何知识都是分层的，学到自己感兴趣的层级即可，对下一层有一个定性的认识，需要的时候可以再去细究。\n我们可以认为 Time smoothing 就是对当前的 result 和上一个 result 进行某种操作，然后输出一组值。\n下面是具体的算法，代码非常简单，但是效果非常明显。\nconst smoothConstantDown = 0.08 const smoothConstantUp = 0.8 if(lastY != null) { for(let i = 0; i \u0026lt; lastY.length; i++) { if(y[i] \u0026lt; lastY[i]) { lastY[i] = y[i] * smoothConstantDown + lastY[i] * (1 - smoothConstantDown) } else { lastY[i] = y[i] * smoothConstantUp + lastY[i] * (1 - smoothConstantUp) } } } else { lastY = y } 我们在 Demo 中勾选上 “Smooth” 启用这个算法，然后就会发现图像马上变得不再跳动了，整体结果已经和其他播放器很接近了。\n注意，这里我们是为了学习底层的步骤和细节，所以很多操作都自己来做。如果真的需要开发相关功能，使用 WebAudio 的 API 是更合理的选择。\n我在 audio-vis-demo 中也基于 WebAudio 的 API 进行了实现，主要是为了对比和参考。\n到这里，我们完整地实现了从一组数字到可视化图形的全过程，深切地感受到了数学的魅力。这里的编码一点也不难，难的，或者是让人赞叹的，是背后的数学，人类智慧皇冠上最灿烂的明珠。\n 点击上方图片购买课程   ","permalink":"/blog/voice2pic/","summary":"author:cj1128\nGithub: https://github.com/cj1128\nBlog: https://cjting.me/\nsrc: https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/\n 印象中使用的第一个 PC 音乐播放器是「千千静听」，大概是 08 年左右。我还清楚地记得它自带了一首梁静茹的歌「Love is everything」，动听的旋律至今萦绕耳旁。\n 千千静听的左上角有一组随着音乐跳动的柱子，我想大家都习以为常了，很多播放器都有这功能。但是其实有没有想过，这是怎么实现的？\n要理解这个问题，我们首先要理解声音是什么。\n波 中学物理有介绍过，声音是由物体振动产生的，这个振动经由介质传导到我们的耳朵中引起耳膜振动从而让我们听见声音。\n我们可以用波形来描述振动，其中横轴是时间，纵轴是振动的位移，也就是离开原点的距离。\n振动的两个关键属性是频率和振幅，频率是指一秒钟振动多少次，对应于音高，频率越高声音越尖锐刺耳。\n振幅则表示最大的位移值，对应于音量，振幅越大声音越响。\n 上图是用 matplotlib 绘制的一个正弦波，可以看出在 0.01s 内振动了 2 次，因此频率是 200，振幅是 1。\nfrom matplotlib import pyplot as plt import numpy as np def sin_wave(hz): x = np.linspace(0, 0.01, 1000, endpoint=False) y = np.sin(x * hz * 2 * np.pi) plt.plot(x, y) plt.xlabel(\u0026#34;Time\u0026#34;) plt.axhline(y=0, color=\u0026#39;k\u0026#39;) plt.show() sin_wave(200) 这种最简单的波形对应的声音叫做 pure tone，顾名思义，非常的简单而且纯粹。","title":"音频可视化：采样、频率和傅里叶变换"},{"content":" 点击上方图片购买课程    Bollen, Johan, et al. \u0026ldquo;Historical language records reveal a surge of cognitive distortions in recent decades.\u0026rdquo; Proceedings of the National Academy of Sciences 118.30 (2021).\n 摘要 患有抑郁症的人容易出现适应不良的思维模式，即认知扭曲，他们以过于消极和不准确的方式思考自己、世界和未来。 这些扭曲与个人情绪、行为和语言的显着变化有关。 我们假设社会可以经历类似的集体心理变化，这些变化会反映在语言使用的历史记录中。我们调查了过去 125 年超 1400 万本书中认知扭曲（congnition disorder）的文本标记的流行情况，并观察到自 1980 年代以来它们的流行程度激增，达到超过大萧条和两次世界大战的水平。 这种模式似乎不是由词义、出版和写作标准或 Google 图书样本的变化驱动的。 我们的研究结果发现，通过语言分析最近的社会转向与认知扭曲和内化障碍相关。\n正文 抑郁症与独特且可识别的适应不良思维模式有关，称为认知扭曲，其中个人以不准确和过于消极的方式思考自己、未来和世界 (9-12)。例如，当个体用消极的、绝对主义的术语（例如，“I am a loser”）给自己贴上标签时，就会出现在抑郁症中看到的认知扭曲。他们可能会用二分法、极端的术语谈论未来事件（例如，“My meeting will be a complete disaster”）或对别人的心态做出毫无根据的假设（例如，“Everybody will think that I am a failure”）。\n认知扭曲的类型通常区分许多部分重叠的类型，例如“灾难化”、“二分推理”、“否定积极的”、“情感推理”、“算命”、“标记和错误标记”、“放大和最小化”、“心理过滤”、“读心术”、“过度概括”、“个性化”和“应该陈述”。\n**认知行为疗法 (cognitive-behavioral therapy，CBT) ** 是治疗抑郁症和其他内化障碍的黄金标准 (13)，其基础理论认为认知扭曲与内化障碍有关； 它们反映了环境压力下的负面情感和回避行为模式 (14, 15)。 语言与这种动态密切相关。 事实上，最近的研究表明，患有内化障碍的个体在他们的语言中表现出明显更高水平的认知扭曲 (16, 17)，以至于他们的患病率可能被用作抑郁症易感性的指标 (18, 19)。\n我们分析了过去 125 年中大量以英语、西班牙语和德语出版的超过 1400 万本书籍（谷歌图书）中的大量认知扭曲标记的流行情况。具体来说，我们正在研究由 CBT 专家、计算语言学家和双语母语人士组成的团队设计的数百个 1 到 5 个单词 (n-gram)、 标记的认知失真图式 (cognitive distortion schemata,CDS) 的纵向流行情况，以及由 CBT 专家小组外部验证，以捕捉 12 种认知扭曲的表达 (9)。 CDS n-gram 被设计为简短、明确和独立的语句，使用频率很高的术语表达特定认知扭曲类型的核心（图 1 和 SI 附录，表 S1-S3）。例如，3-gram 的“I am a”捕获了标签和错误标签失真，而不管其上下文或所涉及的精确标签（“女士”、“尊贵的人”、“失败者”等）。这些相同的 n-gram 在早期的研究中被证明显着更多。\nCDS流行度测量  CDS n-gram 显示在灰色框内的示例，周围是合理的上下文词，这些词可能会有所不同，而不会影响 n-gram 是否标记给定类型的认知扭曲的表达（例如，读心术Mindreading、情感推理Emotiona lReasoning、标记Labeling和错误标记Mislabeling） . CDS 是由 CBT 专家、语言学家和母语使用者组成的团队设计的，用于捕捉特定认知扭曲类型的表达，而不管其特定的词汇上下文。 对于英语（美国）、西班牙语和德语，专家团队分别定义了 241、435 和 296 个 n-gram 来标记 12 种常见的认知扭曲类型。 请注意，我们的流行度测量只计算 CDS n-gram 的出现，而不管上下文（“每个人都在思考”、“仍然感觉”和“我是一个”）。 按失真类型提供的所有 CDS n-gram 的完整列表在SI Appendix, Tables S1–S3.\n (A-C) 美国英语 (A)、西班牙语 (B) 和德语 (C) 从 1855 年到 2020 年 (125 y) 的 CDS n-gram 流行时间序列的中值 z 分数，其中添加了年份标记 对于重大历史事件。 在 20 世纪的大部分时间里，所有时间序列都显示出稳定或下降的水平，随后在过去的 30 年里认知扭曲急剧增加。\n美国英语从 1899 年到 1978 年呈下降趋势，在 1914 年和 1940 年（第一次世界大战和第二次世界大战）以及特别是 1968 年出现小高峰。随后是 CDS 流行率从 1978 年开始激增，并持续到 2019 年。\n对于西班牙语 我们发现从 1895 年到 1980 年代初期的稳定水平，在这一点上出现了一个趋势，即 CDS 患病率水平高于之前观察到的任何水平。\n德国表现出稳定的 CDS 流行水平，除了第一次世界大战和第二次世界大战前后和之后的强劲高峰，直到 2007 年突然激增。\nData 研究数据谷歌已经开源，开源下载哦\nhttps://storage.googleapis.com/books/ngrams/books/datasetsv3.html\n CDS ngram词表 该论文CDS ngram词表\n 代码 ngram代码实现\nfrom nltk.util import ngrams from nltk.tokenize import word_tokenize sentence = \u0026#34;Historical language records reveal a surge of cognitive distortions in recent decades\u0026#34; words = word_tokenize(sentence) print(\u0026#39;分词结果: \u0026#39;, words) #2-gram two_grams = [\u0026#39; \u0026#39;.join(tw) for tw in ngrams(words, 2)] print(\u0026#39;2-gram处理结果: \u0026#39;, two_grams) #3-gram three_grams = [\u0026#39; \u0026#39;.join(tw) for tw in ngrams(words, 3)] print(\u0026#39;3-gram处理结果: \u0026#39;, three_grams) Run\n分词结果: [\u0026#39;Historical\u0026#39;, \u0026#39;language\u0026#39;, \u0026#39;records\u0026#39;, \u0026#39;reveal\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;surge\u0026#39;, \u0026#39;of\u0026#39;, \u0026#39;cognitive\u0026#39;, \u0026#39;distortions\u0026#39;, \u0026#39;in\u0026#39;, \u0026#39;recent\u0026#39;, \u0026#39;decades\u0026#39;] 2-gram处理结果: [\u0026#39;Historical language\u0026#39;, \u0026#39;language records\u0026#39;, \u0026#39;records reveal\u0026#39;, \u0026#39;reveal a\u0026#39;, \u0026#39;a surge\u0026#39;, \u0026#39;surge of\u0026#39;, \u0026#39;of cognitive\u0026#39;, \u0026#39;cognitive distortions\u0026#39;, \u0026#39;distortions in\u0026#39;, \u0026#39;in recent\u0026#39;, \u0026#39;recent decades\u0026#39;] 3-gram处理结果: [\u0026#39;Historical language records\u0026#39;, \u0026#39;language records reveal\u0026#39;, \u0026#39;records reveal a\u0026#39;, \u0026#39;reveal a surge\u0026#39;, \u0026#39;a surge of\u0026#39;, \u0026#39;surge of cognitive\u0026#39;, \u0026#39;of cognitive distortions\u0026#39;, \u0026#39;cognitive distortions in\u0026#39;, \u0026#39;distortions in recent\u0026#39;, \u0026#39;in recent decades\u0026#39;] 统计统计CDS-ngram与ngram频数，进而计算出CDS流行度。\n","permalink":"/blog/historicallanguage/","summary":"点击上方图片购买课程    Bollen, Johan, et al. \u0026ldquo;Historical language records reveal a surge of cognitive distortions in recent decades.\u0026rdquo; Proceedings of the National Academy of Sciences 118.30 (2021).\n 摘要 患有抑郁症的人容易出现适应不良的思维模式，即认知扭曲，他们以过于消极和不准确的方式思考自己、世界和未来。 这些扭曲与个人情绪、行为和语言的显着变化有关。 我们假设社会可以经历类似的集体心理变化，这些变化会反映在语言使用的历史记录中。我们调查了过去 125 年超 1400 万本书中认知扭曲（congnition disorder）的文本标记的流行情况，并观察到自 1980 年代以来它们的流行程度激增，达到超过大萧条和两次世界大战的水平。 这种模式似乎不是由词义、出版和写作标准或 Google 图书样本的变化驱动的。 我们的研究结果发现，通过语言分析最近的社会转向与认知扭曲和内化障碍相关。\n正文 抑郁症与独特且可识别的适应不良思维模式有关，称为认知扭曲，其中个人以不准确和过于消极的方式思考自己、未来和世界 (9-12)。例如，当个体用消极的、绝对主义的术语（例如，“I am a loser”）给自己贴上标签时，就会出现在抑郁症中看到的认知扭曲。他们可能会用二分法、极端的术语谈论未来事件（例如，“My meeting will be a complete disaster”）或对别人的心态做出毫无根据的假设（例如，“Everybody will think that I am a failure”）。\n认知扭曲的类型通常区分许多部分重叠的类型，例如“灾难化”、“二分推理”、“否定积极的”、“情感推理”、“算命”、“标记和错误标记”、“放大和最小化”、“心理过滤”、“读心术”、“过度概括”、“个性化”和“应该陈述”。\n**认知行为疗法 (cognitive-behavioral therapy，CBT) ** 是治疗抑郁症和其他内化障碍的黄金标准 (13)，其基础理论认为认知扭曲与内化障碍有关； 它们反映了环境压力下的负面情感和回避行为模式 (14, 15)。 语言与这种动态密切相关。 事实上，最近的研究表明，患有内化障碍的个体在他们的语言中表现出明显更高水平的认知扭曲 (16, 17)，以至于他们的患病率可能被用作抑郁症易感性的指标 (18, 19)。","title":"PNAS | 历史语言记录揭示了近几十年来认知扭曲的激增"},{"content":" 点击上方图片购买课程   RPA for Python 简单而强大的自动化套件！ 您可以使用它快速实现自动化操作网站、自动化处理桌面应用程序上的重复性耗时任务。\n安装 !pip3 install rpa \n快速上手 首次运行下方代码会，提示安装200M左右的配置文件，建议选择状况较好的网络环境。\nimport rpa as r r.init() #操控Chrome打开某个链接 r.url(\u0026#39;https://www.google.com\u0026#39;) #定位搜索框，输入decentralization，回车执行搜索 r.type(\u0026#39;//*[@name=\u0026#34;q\u0026#34;]\u0026#39;, \u0026#39;decentralization[enter]\u0026#39;) #定位结果页的统计信息。 print(r.read(\u0026#39;result-stats\u0026#39;)) #截屏 r.snap(\u0026#39;page\u0026#39;, \u0026#39;results.png\u0026#39;) r.close() 找到约 1,590,000,000 条结果 （用时 0.39 秒） True  需要注意的是 //*[@name=\u0026quot;q\u0026quot;] 与 result-stats 都是网页的定位表达式，建议大家稍微学一下html选择器 selector。 咱们爬虫课程中的pyquery部分讲的主要是selector，感兴趣可以付下一下。\n再试一下 这里我给大家操作一下，通过开发者工具Element面板选定并复制的方法构造selector。\nimport rpa as r r.init() r.url(\u0026#39;https://www.baidu.com\u0026#39;) r.type(\u0026#39;#kw\u0026#39;, \u0026#39;大邓和他的Python[enter]\u0026#39;) print(r.read(\u0026#39;//*[@id=\u0026#34;tsn_inner\u0026#34;]/div[2]\u0026#39;)) r.snap(\u0026#39;page\u0026#39;, \u0026#39;results.png\u0026#39;) r.close() 搜索工具百度为您找到相关结果约1,920,000个 True  ","permalink":"/blog/rpa/","summary":" 点击上方图片购买课程   RPA for Python 简单而强大的自动化套件！ 您可以使用它快速实现自动化操作网站、自动化处理桌面应用程序上的重复性耗时任务。\n安装 !pip3 install rpa \n快速上手 首次运行下方代码会，提示安装200M左右的配置文件，建议选择状况较好的网络环境。\nimport rpa as r r.init() #操控Chrome打开某个链接 r.url(\u0026#39;https://www.google.com\u0026#39;) #定位搜索框，输入decentralization，回车执行搜索 r.type(\u0026#39;//*[@name=\u0026#34;q\u0026#34;]\u0026#39;, \u0026#39;decentralization[enter]\u0026#39;) #定位结果页的统计信息。 print(r.read(\u0026#39;result-stats\u0026#39;)) #截屏 r.snap(\u0026#39;page\u0026#39;, \u0026#39;results.png\u0026#39;) r.close() 找到约 1,590,000,000 条结果 （用时 0.39 秒） True  需要注意的是 //*[@name=\u0026quot;q\u0026quot;] 与 result-stats 都是网页的定位表达式，建议大家稍微学一下html选择器 selector。 咱们爬虫课程中的pyquery部分讲的主要是selector，感兴趣可以付下一下。\n再试一下 这里我给大家操作一下，通过开发者工具Element面板选定并复制的方法构造selector。\nimport rpa as r r.init() r.url(\u0026#39;https://www.baidu.com\u0026#39;) r.type(\u0026#39;#kw\u0026#39;, \u0026#39;大邓和他的Python[enter]\u0026#39;) print(r.read(\u0026#39;//*[@id=\u0026#34;tsn_inner\u0026#34;]/div[2]\u0026#39;)) r.snap(\u0026#39;page\u0026#39;, \u0026#39;results.png\u0026#39;) r.close() 搜索工具百度为您找到相关结果约1,920,000个 True  ","title":"Python自动化利器RPA爬数据so easy"},{"content":" 点击上方图片购买课程   想知道什么时候网站有新的变动(新消息)\u0026hellip;\n 政府部门更新（更改通常只在他们的网站上） 地方政府有新闻了（变化往往只在他们的网站上） 当您不在他们的邮件列表中时，新软件发布、安全建议。 有变化的节日 房地产上市变化 来自政府网站的 COVID 相关新闻 检测和监控 JSON API 响应的变化 API 监控和警报  其实超级简单，一个命令即可！\n安装 pip3 install changedetection.io 假设项目文件夹存放于桌面，在桌面新建一个monitordetection\n#mac changedetection.io -d desktop/monitordetection -p 5000 #win changedetection.io -d Desktop/monitordetection -p 5000 然后访问 http://127.0.0.1:5000 ，您现在应该可以访问 UI。\n ","permalink":"/blog/changedetection/","summary":" 点击上方图片购买课程   想知道什么时候网站有新的变动(新消息)\u0026hellip;\n 政府部门更新（更改通常只在他们的网站上） 地方政府有新闻了（变化往往只在他们的网站上） 当您不在他们的邮件列表中时，新软件发布、安全建议。 有变化的节日 房地产上市变化 来自政府网站的 COVID 相关新闻 检测和监控 JSON API 响应的变化 API 监控和警报  其实超级简单，一个命令即可！\n安装 pip3 install changedetection.io 假设项目文件夹存放于桌面，在桌面新建一个monitordetection\n#mac changedetection.io -d desktop/monitordetection -p 5000 #win changedetection.io -d Desktop/monitordetection -p 5000 然后访问 http://127.0.0.1:5000 ，您现在应该可以访问 UI。\n ","title":"changedetection|自动追踪网站更新"},{"content":" 点击上方图片购买课程   rpa Python自动化操纵包\nhttps://github.com/tebelorg/RPA-Python\n{{ \u0026lt; figure src=\u0026ldquo;img/tagui_python.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nCrunch https://github.com/chrissimpkins/Crunch 疯狂（缓慢但非常好）PNG 图像优化 {{ \u0026lt; figure src=\u0026ldquo;img/header-arrow.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} VS可视化 https://github.com/hiDaDeng/vs 将 google 的自动完成功能可视化为图表。 {{ \u0026lt; figure src=\u0026ldquo;img/huawei.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} {{ \u0026lt; figure src=\u0026ldquo;img/python.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} {{ \u0026lt; figure src=\u0026ldquo;img/digitalazition.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} jupyter-text2code https://github.com/deepklarity/jupyter-text2code 在jupyter notebook内，可将英语查询转换为相关的 Python 代码 {{ \u0026lt; figure src=\u0026ldquo;img/jupyter-text2code-demo.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nautoscraper https://github.com/alirezamika/autoscraper\n一个用于 Python 的智能、自动、快速和轻量级的 Web 爬虫\n{{ \u0026lt; figure src=\u0026ldquo;img/autoscraper.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} newscatcher https://github.com/kotartemiy/newscatcher\n以编程方式从（几乎）任何网站收集规范化新闻。\n{{ \u0026lt; figure src=\u0026ldquo;img/newscatcher.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} fusuma https://github.com/hiroppy/fusuma Fusuma 使用 Markdown 轻松制作幻灯片。 halo https://github.com/halo-dev/halo 一款优秀的开源博客发布应用。 {{ \u0026lt; figure src=\u0026ldquo;img/halo.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} 己思 https://dinorss.org/ 一个简单、高效、开源的RSS阅读器服务 {{ \u0026lt; figure src=\u0026ldquo;img/己思1.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} {{ \u0026lt; figure src=\u0026ldquo;img/己思2.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} ","permalink":"/blog/techweekly06/","summary":"点击上方图片购买课程   rpa Python自动化操纵包\nhttps://github.com/tebelorg/RPA-Python\n{{ \u0026lt; figure src=\u0026ldquo;img/tagui_python.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nCrunch https://github.com/chrissimpkins/Crunch 疯狂（缓慢但非常好）PNG 图像优化 {{ \u0026lt; figure src=\u0026ldquo;img/header-arrow.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} VS可视化 https://github.com/hiDaDeng/vs 将 google 的自动完成功能可视化为图表。 {{ \u0026lt; figure src=\u0026ldquo;img/huawei.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} {{ \u0026lt; figure src=\u0026ldquo;img/python.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} {{ \u0026lt; figure src=\u0026ldquo;img/digitalazition.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} jupyter-text2code https://github.com/deepklarity/jupyter-text2code 在jupyter notebook内，可将英语查询转换为相关的 Python 代码 {{ \u0026lt; figure src=\u0026ldquo;img/jupyter-text2code-demo.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nautoscraper https://github.com/alirezamika/autoscraper\n一个用于 Python 的智能、自动、快速和轻量级的 Web 爬虫\n{{ \u0026lt; figure src=\u0026ldquo;img/autoscraper.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} newscatcher https://github.","title":"TechWeekly-06 | 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   Top2Vec 是一种用于主题建模和语义搜索的算法。**我个人从理解代码和使用代码难度来看， 对于Python小白，BERTopic更适合直接用预训练词向量，而Top2Vec更适合对小规模数据训练词向量后做主题建模。**它自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。训练 Top2Vec 模型后，您可以：\n 获取检测到的主题数。 获取话题。 获取主题大小。 获取分层主题。 按关键字搜索主题。 按主题搜索文档。 按关键字搜索文档。 找出相似的词。 查找类似的文档。 使用 RESTful-Top2Vec 公开模型 有关其工作原理的更多详细信息，请参阅论文。  亮点\n 自动查找主题数。 不需要停用词列表。 不需要词干/词形还原。 适用于短文本。 创建联合嵌入的主题、文档和词向量。 内置搜索功能。  它是如何工作的？\n该算法做出的假设是，许多语义相似的文档都表明了一个潜在的主题。\n第一步是创建文档和词向量的联合嵌入。一旦文档和单词被嵌入到一个向量空间中，算法的目标就是找到密集的文档集群，然后确定哪些单词将这些文档吸引到一起。每个密集区域是一个主题，将文档吸引到密集区域的词就是主题词。\n!pip3 install top2vec \n1. 导入数据 使用某灾难数据集，这里是存在标注的标签，但是我们假设不用label的，仅作为评判Top2vec运行效果的标准。点击cnews.csv下载\nfrom IPython.display import display from cntext import STOPWORDS_zh from top2vec import Top2Vec import pandas as pd import jieba df = pd.read_csv(\u0026#39;cnews.csv\u0026#39;) df.head()   df.label.value_counts() 时政 120 科技 106 时尚 106 财经 105 家居 103 教育 97 娱乐 96 体育 95 房产 87 游戏 85 Name: label, dtype: int64  2. 清洗数据 一般而言，作中文文本分析，需要把中文分词构造成类西方语言(空格间隔词语的文本)风格。在此期间，顺便将停用词剔除。其实在用top2vec时，不剔除停用词影响也不大。\ndef clean_text(text): words = jieba.lcut(text) words = [w for w in words if w not in STOPWORDS_zh] return \u0026#39; \u0026#39;.join(words) df[\u0026#39;cleantext\u0026#39;] = df.text.apply(clean_text) df.head()   3. 训练模型 Top2vec有一下四个常用参数\nTop2vec(documents, min_count, speed, workers)\n documents: 文档列表 min_count: 词语最少出现次数。低于min_count的词不加入模型中 speed: 训练速度，参数默认\u0026quot;learn\u0026quot;  \u0026ldquo;fast-learn\u0026rdquo; 速度最快，训练效果最差 \u0026ldquo;learn\u0026rdquo; 速度，训练效果中等 \u0026ldquo;deep-learn\u0026rdquo; 速度最慢，训练效果最佳   workers: 并行运行数，该值最大取值为电脑CPU的核数。  model = Top2Vec(documents=df[\u0026#39;cleantext\u0026#39;].to_list(), min_count=10, speed=\u0026#34;deep-learn\u0026#34;, workers=8) 2021-12-14 20:21:10,318 - top2vec - INFO - Pre-processing documents for training 2021-12-14 20:21:10,871 - top2vec - INFO - Creating joint document/word embedding 2021-12-14 20:25:06,082 - top2vec - INFO - Creating lower dimension embedding of documents 2021-12-14 20:25:14,645 - top2vec - INFO - Finding dense areas of documents 2021-12-14 20:25:14,683 - top2vec - INFO - Finding topics  # 话题个数 model.get_num_topics() 11  # 各话题数量 topic_sizes, topic_nums = model.get_topic_sizes() {\u0026#34;topic_sizes\u0026#34;:topic_sizes, \u0026#34;topic_ids\u0026#34;:topic_nums} {'topic_sizes': array([116, 108, 105, 104, 100, 97, 95, 94, 89, 74, 18]), 'topic_ids': array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])}  4. get_topics 用pyecharts词云图显示话题信息， 为了简化代码，将该功能封装为函数\ndef gen_wordcloud(topic_words, word_scores, topic_id): \u0026#34;\u0026#34;\u0026#34; topic_words: 主题词列表 word_scores: 主题特征词的权重得分(词语表征主题的能力) topic_id: 主题id \u0026#34;\u0026#34;\u0026#34; import pyecharts.options as opts from pyecharts.charts import WordCloud from IPython.display import display data = [(word, str(weight)) for word, weight in zip(topic_words, word_scores)] wc = WordCloud() wc.add(series_name=\u0026#34;\u0026#34;, data_pair=data, word_size_range=[6, 88]) wc.set_global_opts( title_opts=opts.TitleOpts(title=\u0026#34;Topic_{topic_id}\u0026#34;.format(topic_id=topic_id), title_textstyle_opts=opts.TextStyleOpts(font_size=23)), tooltip_opts=opts.TooltipOpts(is_show=True)) display(wc.render_notebook()) topic_wordss, word_scoress, topic_ids = model.get_topics(11) for topic_words, word_scores, topic_id in zip(topic_wordss, word_scoress, topic_ids): gen_wordcloud(topic_words, word_scores, topic_id)      5. get_documents_topics get_documents_topics(doc_ids, num_topics=1)\n doc_ids: 待查询文档id列表 num_topics: 返回某文档可能归属话题的个数   # 查第一条文档的 model.get_documents_topics(doc_ids=[0], num_topics=1) (array([9]), array([0.13393445], dtype=float32), array([['留学', '学生', '申请', '签证', '大学', '学费', '本科', '名校', '留学生', '加拿大', '课程', '申请者', '院校', '学校', '移民', '英国', '高等教育', '教育', '录取', '高中生', '出国', '人数', '高中', '学位', '就读', '生活费', '家长', '澳大利亚', '申请人', '预科', '美国', '该国', '新政', '招生', '文凭', '学士学位', '公立', '私立', '攻读', '高校', '绿卡', '升学', '学历', '雅思', '入学', '资助', '移民部', '技术移民', '万至', '学期']], dtype='\u0026lt;U9'), array([[0.6926953 , 0.6242467 , 0.5911637 , 0.5618203 , 0.54714125, 0.54360884, 0.5397957 , 0.5385162 , 0.53832144, 0.5268167 , 0.5255044 , 0.52232724, 0.52129036, 0.5149227 , 0.49912092, 0.46216848, 0.46023563, 0.45987687, 0.45913237, 0.45762828, 0.45715228, 0.45121962, 0.45040804, 0.44802257, 0.44495288, 0.44481775, 0.44124833, 0.43432242, 0.43391675, 0.43311685, 0.4321192 , 0.4318304 , 0.43135592, 0.42906424, 0.42849895, 0.42731148, 0.42642018, 0.420944 , 0.417553 , 0.41722208, 0.41120926, 0.4068325 , 0.40628856, 0.4049462 , 0.40243787, 0.40150112, 0.39927092, 0.3964286 , 0.3903596 , 0.38602734]], dtype=float32))  6. search_topics 根据关键词搜索话题，查某词是否属于某话题，属于该主题的概率 search_topics(keywords, num_topics, keywords_neg=None)\n keywords: 关键词列表 num_topics: 返回话题个数，按照语义相似度从高到低排序 keywords_neg: 反义词列表  def gen_wordcloud2(query_word, topic_words, word_scores, topic_id, topic_probability): \u0026#34;\u0026#34;\u0026#34; query_word: 待查询词 topic_words: 主题词列表 word_scores: 主题特征词的权重得分(词语表征主题的能力) topic_id: 主题id topic_probability: 主题概率 \u0026#34;\u0026#34;\u0026#34; import pyecharts.options as opts from pyecharts.charts import WordCloud from IPython.display import display data = [(word, str(weight)) for word, weight in zip(topic_words, word_scores)] wc = WordCloud() wc.add(series_name=\u0026#34;\u0026#34;, data_pair=data, word_size_range=[6, 88]) title = \u0026#34;\u0026#34;\u0026#34;Word{query_word}\\nTopic_{topic_id}\\nProbability:{probability:.2f}\u0026#34;\u0026#34;\u0026#34;.format(query_word=query_word, topic_id=topic_id, probability=topic_probability) wc.set_global_opts( title_opts=opts.TitleOpts(title=title, title_textstyle_opts=opts.TextStyleOpts(font_size=18)), tooltip_opts=opts.TooltipOpts(is_show=True)) display(wc.render_notebook()) query_word = \u0026#34;电影\u0026#34; topic_wordss, word_scoress, topic_scores, topic_ids = model.search_topics(keywords=[query_word], num_topics=4) for topic_words, word_scores, topic_score, topic_id in zip(topic_wordss, word_scoress, topic_scores, topic_ids): if topic_score\u0026gt;0.5: gen_wordcloud2(query_word=query_word, topic_words=topic_words, word_scores=word_scores, topic_id=topic_id, topic_probability=topic_score)   7. query_topics 根据一段文本寻找最符合该文本的话题 query_topics(query, num_topics)\n query: 查询文本，注意是用空格间隔词语的文本 num_topics: 返回的话题数  返回话题特征词列表， 话题特征词权重， 话题概率， 话题id\nquerytext = \u0026#39;刘晓庆 55 岁 近日 颁奖礼 刘晓庆 一袭 宝蓝色 超低 胸 V 领 长裙 亮相 轻薄 蕾丝 奢华 皮草 艳丽 色彩 翠绿\u0026#39; topic_words, word_scores, topic_scores, topic_ids = model.query_topics(query=querytext, num_topics=2) print(\u0026#39;可能归属的话题有: \u0026#39;, topic_ids) print(\u0026#39;归属于该话题的概率\u0026#39;, topic_scores) 可能归属的话题有: [1 4] 归属于该话题的概率 [0.3688392 0.21418373]  8. search_documents_by_keywords 根据关键词，筛选文档\nsearch_documents_by_keywords(keywords, num_docs, keywords_neg=None, return_documents=True)\n#文档， 语义相关性， 文档id docs, scores, doc_ids = model.search_documents_by_keywords(keywords=[\u0026#39;搭配\u0026#39;], num_docs=3, keywords_neg=None, return_documents=True) for doc, score, doc_id in zip(docs, scores, doc_ids): print(f\u0026#34;Document: {doc_id}, Semantic similarity: {score}\u0026#34;) print(doc) print(\u0026#39;----------\u0026#39;) print() Document: 870, Semantic similarity: 0.46936729550361633 组图 看达人 演绎 豹纹 军装 风 导语 懂得 潮流 总是 知道 适合 今冬 流行 亮点 太 军装 豹纹 类似 民族风情 想要 知道 搭配 快 看看 时尚 达 穿 军绿色 宽松 款 大衣 不失 俏皮 味道 高腰 设计 短裙 有效 提升 腰线 衬托出 修长 美腿 豹纹 今年 冬季 抢眼 搭配 元素 加上 驼色 针织衫 灰色 围巾 暖 棕色 手 挎包 整体 色调 统一 迷人 棕色 蓝色 结合能 眼前一亮 简洁 款式 依然 突显 独特 品味 宽松 针织 外套 衬托出 优美 身形 搭配 同样 沉闷 黑色 包包 性感 丝袜 装扮 依然 透露 出 迷人 气息 立领 衬衫 加上 深黄 高腰 裤 摩登 感 十足 随意 披上 外套 更显 慵懒 个性 法式 风情 ---------- Document: 450, Semantic similarity: 0.46842482686042786 街 拍 爱 招摇过市 毛茸茸 ( 组图 ) 导语 皮草 每个 冬天 可能 丢弃 每个 需要 温暖 早些 相比 人造皮 草比 真皮 草 风头 更劲 时尚 环保 大牌 秀 场上 超模 一个个 穿着 人造皮 草 “ 招摇过市 ” 之后 街头 潮人 没有 理由 拒绝 外形 酷酷 这件 气场 皮草 单品 配合默契 摇滚 风 配饰 搭配 黑色 皮草 长 背心 更显 利落 酷酷 黑色 皮草 搭配 蓝色 衬衣 不同 感觉 加上 下半身 底裤 时髦 包包 颜色 提亮 整身 装扮 抹胸 式 皮草 特点 高贵典雅 适合 搭配 连衣裙 装饰 增添 时尚 美感 复古 圆点 连衣裙 搭配 宽松 棕色 皮草 衣 名媛 感觉 典雅 淑女 短款 黑色 皮草 搭配 贴身 仔裤 搭配 长靴 潇洒 帅气 茸茸 帽子 增添 不少 甜美 感 ---------- Document: 665, Semantic similarity: 0.45364660024642944 组图 韩国 明星 街 拍 各显 本色 魅力 导语 很多 迷 韩剧 剧中 女星 逐渐 变成 家喻户晓 红人 韩 剧中 靓丽 女星 示范 想 靓丽 成为 众人 瞩目 焦点 摆脱 荧幕 光环 现实 中是 李孝利 韩国 有人 气 女歌手 走红 速度 之快 成为 影视 歌 多方面 艺人 街 拍图 成为 众相 追捧 对象 身 装扮 休闲 个性 典型 风格 棒球帽 字母 T恤 简单 活力 下身 裙裤 透露 出 少女 气息 搭配 毛线 靴 青春 气息 迎面而来 想 卫衣 穿 出 时尚 感 学学 拼接 色 卫衣 搭配 牛仔 短裤 帅气 亮面 底裤 更显 腿部 线条 打造 野性 装扮 一件 豹纹 外套 搞定 下身 搭配 短裤 短裙 露出 性感美 腿 挎 一个 ----------  9. search_documents_by_topic 根据指定的topic_id， 显示该主题前num_docs个文档，显示的文档是根据概率从高到低降序显示\n#查看topic4的前5条文档 topic_id = 4 documents, document_scores, document_ids = model.search_documents_by_topic(topic_num=topic_id, num_docs=5) for doc, score, doc_id in zip(documents, document_scores, document_ids): print(f\u0026#34;Document: {doc_id}, Semantic similarity: {score}\u0026#34;) print(\u0026#34;-----------\u0026#34;) print(doc) print(\u0026#34;-----------\u0026#34;) print() Document: 91, Semantic similarity: 0.4055505692958832 ----------- 遍地 狼烟 场面 恢弘 打造 精良 狙击枪 战 类型 片 新浪 娱乐 讯 电影 遍地 狼烟 12 2 上映 该片 何润东 ( 微博 ) 宋佳 ( 微博 ) 梁家辉 何晟铭 ( 微博 ) 主演 展现 狙击手 不为人知 一面 何润东 日前 透露 拍摄 该片 苦练 身材 希望 电影 能够 看起来 “ 够 爷们 ” 狙击 题材 枪战 片 遍地 狼烟 取材 狙击手 创作 初衷 导演 胡 大为 表示 “ 狙击手 生活 远远 不像 想像 简单 辛苦 危险 曾经 一位 狙击手 朋友 等待 目标 潜伏 树上 达 一周 久 枪法 百发百中 之外 狙击手 需要 经受 常人 难以忍受 痛苦 ” 希望 借由 遍地 狼烟 狙击手 不为人知 一面 呈现 观众 面前 何润东 ” ----------- Document: 392, Semantic similarity: 0.38211899995803833 ----------- 组图 大S 新片 腿 夹 色诱 古天乐 动作 搞笑 情色 新浪 娱乐 讯 大S 古天乐 结戏缘 电影 大内 密探 灵灵狗 饰演 夫妻 使出 浑身解数 色诱 古天乐 露出 性感 香肩 双脚 夹紧 画面 相当 搞笑 剧中 打斗 戏 不断 牺牲 形象 引诱 大S 挑战 笑 非常 紧张 平常 懂 搔首弄姿 如今 勾引 古天乐 不知 尴尬 ----------- Document: 265, Semantic similarity: 0.376071572303772 ----------- 危险 关系 开机 章子怡 荐 张柏芝 演 坏女孩 ( 图 ) 章子怡 推荐 张柏芝 周 冬雨 ( 微博 ) 这部 法国 经典小说 蓝本 电影 改编 多次 许秦豪 介绍 吸引 执导 该片 原因 改编 剧本 复杂 人物 关系 “ 故事 背景 选在 1930 年代 上海 里面 有人 爱情 游戏 有人 爱情 生命 关系 发展 吸引 ” 戏中 人物 到底 复杂 原来 三位 主演 饰演 女孩 坏女孩 花花公子 角色 章子怡 介绍 剧本 爱 杜芬玉 纯情 女孩 “ 剧本 感动 爱情故事 选择 女孩 修养 经历 特别 爱情 路上 坎坷 一次 心灵 挑战 到时候 知道 选 ” 制片人 陈伟明 现场 透露 原来 章子怡 推荐 张柏芝 出演 莫 婕妤 “ 坏女孩 ” 角色 对此 章子怡 坦陈 希望 演员 出演 这部 电影 推荐 过周 冬雨 演 “ 贝贝 ” “ 推荐 柏芝 是因为 合适 制片人 投资人 沟通 商量 毕竟 希望 希望 这是 一部 聚集 演员 国际化 影片 想 推荐 周 冬雨 演贝贝 角色 听说 上学 ” 张柏芝 称 爱情 “ 危险 ” 发布会 身穿 黑色 ----------- Document: 729, Semantic similarity: 0.37136194109916687 ----------- 陈小春 缺席 宝马 狂想曲 活动 熊乃谨 谈 感情 戏 新浪 娱乐 讯 10 21 电影 宝马 狂想曲 合肥 举行 观众 见面会 男主角 陈小春 ( 微博 ) 缺席 活动 女主角 熊乃谨 表示 之前 刚刚 伴娘 身份 出席 陈小春 应 采儿 ( 微博 ) 婚礼 朋友 老公 演起 感情 戏 不得不 拍 一段 闺蜜 报告 熊乃谨 好友 老公 谈恋爱 宝马 狂想曲 一部 黑色幽默 题材 电影 该片 陈小春 婚后 出演 首部 作品 饰演 极度 热爱 宝马 忠实 fans 黄德斌 梁家仁 李健仁 饰演 贼匪 团伙 进行 几度 精彩 抢夺 宝马 ----------- Document: 562, Semantic similarity: 0.36686939001083374 ----------- 黄百鸣 称用 张柏芝 值得 新片 吴君如 擦肩 ( 组图 ) 新浪 娱乐 讯 肥妈 玛利亚 担任 主席 公司 收购 10 28 香港 举行 签约 仪式 到场 嘉宾 包括 狄波拉 老公 徐小明 夫妇 黄百鸣 王晶 夏韶声 亢帅克 肥妈 表示 公司 包括 mv 制作 经理人 公司 饮食 频道 之后 开拍 一套 青春 歌舞片 并会 联络 巨星 参与 演出 支持 下一代 黄百鸣 请来 张柏芝 拍摄 贺岁片 柏芝 产后 复出 头炮 表示 这部 戏 下周 开拍 柏芝 状态 甚勇 是否 柏芝 五千万 片酬 黄百鸣 表示 合理 觉得 值得 开拍 贺岁片 少 吴君如 解释 之前 误会 君如 怀孕 接 甘国 亮 新片 TUNGSTAR / 文并 图 -----------  documents, document_scores, document_ids = model.search_documents_by_keywords(keywords=[\u0026#34;搭配\u0026#34;, \u0026#34;高跟鞋\u0026#34;], num_docs=5) for doc, score, doc_id in zip(documents, document_scores, document_ids): print(f\u0026#34;Document: {doc_id}, Semantic similarity: {score}\u0026#34;) print(\u0026#34;-----------\u0026#34;) print(doc) print(\u0026#34;-----------\u0026#34;) print() Document: 727, Semantic similarity: 0.5883481502532959 ----------- 组图 冷气 办公室 连衣裙 配小 坎肩 美国 设计师 Diane Von Furstenberg 曾经 感觉 女人 穿 连衣裙 女人 找到 一件 适合 dream dress 重要 无需 费神 搭配 单穿 连身 优雅 飞扬 裙摆 似乎 告诉 女 连衣裙 玩起 High Fashion 变脸 游戏 DKNY 绿色 连衣裙 新品 未 定价 H \u0026amp; M 黑色 外套 新品 未 定价 Agatha 配件 新品 未 定价 C . Banner 高跟鞋 新品 未 定价 低 V 领 连衣裙 秀出 属于 性感 更好 展现出 颈部 线条 搭配 修身 剪裁 西装 短款 皮手套 极具 欧美 明星 范儿 细 高跟鞋 更好 突出 双腿 长度 整体 显得 轻盈 不少 On \u0026amp; on 米色 连衣裙 新品 未 定价 Asobio 针织 外套 RMB 449 Kookai 金色 腰带 Jc ----------- Document: 435, Semantic similarity: 0.5440454483032227 ----------- 组图 秋冬 优雅 妖娆 女星 爱 裸 色系 导语 裸色 优雅 代名词 女星 近来 誓 裸色 进行 到底 无论是 徐若 ? 性感 乐基儿 气质 搭配 各色 礼服 赏心悦目 娇俏 款式 更是 大饱眼福 徐若 ? 飘逸 丝带 立刻 彰显 天王 嫂 贵妇 气质 袁咏仪 翻领 西装 气质 非凡 裸色 短款 紧身 西装 皮质 面料 彰显 个性 夹带 一点 蕾丝 装饰 女性 柔美 油然而生 搭配 碎花 蛋糕 裙 气质 非凡 ----------- Document: 870, Semantic similarity: 0.523485541343689 ----------- 组图 看达人 演绎 豹纹 军装 风 导语 懂得 潮流 总是 知道 适合 今冬 流行 亮点 太 军装 豹纹 类似 民族风情 想要 知道 搭配 快 看看 时尚 达 穿 军绿色 宽松 款 大衣 不失 俏皮 味道 高腰 设计 短裙 有效 提升 腰线 衬托出 修长 美腿 豹纹 今年 冬季 抢眼 搭配 元素 加上 驼色 针织衫 灰色 围巾 暖 棕色 手 挎包 整体 色调 统一 迷人 棕色 蓝色 结合能 眼前一亮 简洁 款式 依然 突显 ----------- Document: 522, Semantic similarity: 0.4756317138671875 ----------- 女星 争当 蓝色妖姬 \u0026amp; nbsp ; 英国 气质 女演员 瑞切尔 ・ 薇 兹 时尚 点评 英国 气质 女演员 瑞切尔 · 薇 兹 ( Rachel Weisz ) 美貌 非常 头脑 修身 印花 连衣裙 搭配 抢眼 棕红色 短 夹克 非常 好看 搭配 黑色 罗马 feel 高跟鞋 特别 有潮味 时尚 点评 身材 不算 瘦 女星 Lea Michele 搭配 起来 非常 特色 一味 地瘦 风格 满是 褶皱 裙子 非常 修身 亮眼 颜色 非常 ----------- Document: 707, Semantic similarity: 0.47334203124046326 ----------- 组图 黑丝 短裙 上阵 5 旬 女星 胜过 90 红星 导语 气温 越来越低 女星 不畏 严寒 纷纷 穿着 短裙 透视装 出席 活动 一番 比拼 不难 发现 气质 年轻 难得 厉害 一起 看看 刘晓庆 55 岁 近日 颁奖礼 刘晓庆 一袭 宝蓝色 超低 胸 V 领 长裙 亮相 轻薄 蕾丝 奢华 皮草 艳丽 色彩 翠绿 首饰 配上 短小 精炼 波波 头 瞬间 减龄 15 岁 张曼玉 46 岁 一向 气质 型 美女 著称 反倒 少 繁琐 修饰 刻意 打扮 超级 简单 Lanvin for H \u0026amp; M 斜肩 礼裙 搭配 一双 皮质 手套 -----------  10. get_topic_hierarchy 对话题进行分类，需要\n 先执行model.hierarchical_topic_reduction 再执行model.get_topic_hierarchy。  # 将话题分为2类 model.hierarchical_topic_reduction(num_topics=2) model.get_topic_hierarchy() [[6, 4, 1, 3, 8, 5], [7, 2, 10, 9, 0]]  11. similar_words 查找相似词， 该方法其实也可以用于扩充词典。\nsimilar_words(keywords, num_words, keywords_neg=None)\n keywords: 待查询关键词列表 num_words: 返回相似词个数 keywords_neg: 指定反义词列表  # 查找【增进】的最相似的10个词 model.similar_words(keywords=[\u0026#34;增进\u0026#34;], num_words=10, keywords_neg=None) (array(['两国关系', '王刚', '友好', '会见', '两国', '东盟', '温家宝', '中美', '伙伴', '双方'], dtype='\u0026lt;U4'), array([0.5130112 , 0.50116096, 0.47922852, 0.46926211, 0.46253758, 0.4395747 , 0.43768376, 0.42893141, 0.41960889, 0.41416299]))  12. save 训练不易， 记得保存模型。\nmodel.save(\u0026#39;随便起个名字.pkl\u0026#39;) ","permalink":"/blog/top2vec/","summary":"点击上方图片购买课程   Top2Vec 是一种用于主题建模和语义搜索的算法。**我个人从理解代码和使用代码难度来看， 对于Python小白，BERTopic更适合直接用预训练词向量，而Top2Vec更适合对小规模数据训练词向量后做主题建模。**它自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。训练 Top2Vec 模型后，您可以：\n 获取检测到的主题数。 获取话题。 获取主题大小。 获取分层主题。 按关键字搜索主题。 按主题搜索文档。 按关键字搜索文档。 找出相似的词。 查找类似的文档。 使用 RESTful-Top2Vec 公开模型 有关其工作原理的更多详细信息，请参阅论文。  亮点\n 自动查找主题数。 不需要停用词列表。 不需要词干/词形还原。 适用于短文本。 创建联合嵌入的主题、文档和词向量。 内置搜索功能。  它是如何工作的？\n该算法做出的假设是，许多语义相似的文档都表明了一个潜在的主题。\n第一步是创建文档和词向量的联合嵌入。一旦文档和单词被嵌入到一个向量空间中，算法的目标就是找到密集的文档集群，然后确定哪些单词将这些文档吸引到一起。每个密集区域是一个主题，将文档吸引到密集区域的词就是主题词。\n!pip3 install top2vec \n1. 导入数据 使用某灾难数据集，这里是存在标注的标签，但是我们假设不用label的，仅作为评判Top2vec运行效果的标准。点击cnews.csv下载\nfrom IPython.display import display from cntext import STOPWORDS_zh from top2vec import Top2Vec import pandas as pd import jieba df = pd.read_csv(\u0026#39;cnews.csv\u0026#39;) df.head()   df.label.value_counts() 时政 120 科技 106 时尚 106 财经 105 家居 103 教育 97 娱乐 96 体育 95 房产 87 游戏 85 Name: label, dtype: int64  2.","title":"Top2Vec|主题建模和语义搜索库"},{"content":" 点击上方图片购买课程    Src:https://github.com/ruanyf/weekly/blob/master/docs/issue-175.md\nAuthor: 阮一峰\n 上一期谈到，“特长程序员”比“全能程序员”吃香。\n网友发给我一个网址，国外有人已经谈过这个话题。\n 国外作者画了一张图，将世界上的程序员比喻成三种形状。\n（1）大饼型：拥有知识广度，但没有知识深度。\n（2）竹竿型：拥有知识深度，但没有知识广度。\n（3）T 型：介于前两者之间。\n那篇文章也认为，通常情况下，竹竿型程序员的出路最好，雇主愿意为知识深度买单。因为现代社会高度分工，越是大公司，岗位职责越明确，需要的是领域专家，而不是多面手。\n但是作者提到，有一种情况例外，知识广度有明显优势，那就是确定项目路线的时候。\n 请看上图，右上角有一个黑点，那是公司的目标。当前位置在左下角的原点，两点之间没有现成的道路，需要自己寻找实现路径。\n这时，知识广度就发挥作用了，了解的信息越广泛，知道的情况越多，就越可能具备洞察力，能够在多条路径里面，选出最合适的道路。知识面狭窄的人，由于不了解其它道路，不管遇到什么问题，可能都选择他会的那一条路，比如 Java。\n这就是全能程序员的优势，判断正确的仰角 θ，使得两点之间距离最短；特长程序员的优势是前进速度 r，可以在既定道路上做到快速前进。所以，知识的广度能告诉你什么是正确的方向，知识的深度则可以让你在该方向上快速前进。\n对于长期而艰巨的项目，走得快固然重要，但更重要的是走对方向。如果仰角 θ 不对，走得再快也没用，因为一开始就走错方向，后期必须停下来校正方向，甚至可能永远到达不了目标，白白浪费了生命。\n 因此，全能型的人才比较适合确定项目方向，担任团队领导。 乔布斯、马斯克就是这样的人，强在知识的广度，而不是知识的深度。他们既懂技术，又懂市场和管理，还了解人文（“我喜欢站在人文和技术的交叉点”），一旦掌握资源，就能带领团队，做出创新的产品。但是，如果让他们担任工程师，绝对是糟糕的工程师，会被开除。\n不过话说回来，现实中，谁会因为你知道的事情多，就让你担任团队领导呢？反而是因为你克服了技术难题，才有机会来领导团队。乔布斯和马斯克都是自己创业才出头的，恐怕不是偶然。\n总结一下，对于公司来说，如果有明确的技术方向，那么就需要聘请特长程序员，帮助加快开发速度。如果是刚刚诞生的创业公司，方向还在摸索之中，那么全能程序员也许更有价值。\n","permalink":"/blog/widevsbroden/","summary":"点击上方图片购买课程    Src:https://github.com/ruanyf/weekly/blob/master/docs/issue-175.md\nAuthor: 阮一峰\n 上一期谈到，“特长程序员”比“全能程序员”吃香。\n网友发给我一个网址，国外有人已经谈过这个话题。\n 国外作者画了一张图，将世界上的程序员比喻成三种形状。\n（1）大饼型：拥有知识广度，但没有知识深度。\n（2）竹竿型：拥有知识深度，但没有知识广度。\n（3）T 型：介于前两者之间。\n那篇文章也认为，通常情况下，竹竿型程序员的出路最好，雇主愿意为知识深度买单。因为现代社会高度分工，越是大公司，岗位职责越明确，需要的是领域专家，而不是多面手。\n但是作者提到，有一种情况例外，知识广度有明显优势，那就是确定项目路线的时候。\n 请看上图，右上角有一个黑点，那是公司的目标。当前位置在左下角的原点，两点之间没有现成的道路，需要自己寻找实现路径。\n这时，知识广度就发挥作用了，了解的信息越广泛，知道的情况越多，就越可能具备洞察力，能够在多条路径里面，选出最合适的道路。知识面狭窄的人，由于不了解其它道路，不管遇到什么问题，可能都选择他会的那一条路，比如 Java。\n这就是全能程序员的优势，判断正确的仰角 θ，使得两点之间距离最短；特长程序员的优势是前进速度 r，可以在既定道路上做到快速前进。所以，知识的广度能告诉你什么是正确的方向，知识的深度则可以让你在该方向上快速前进。\n对于长期而艰巨的项目，走得快固然重要，但更重要的是走对方向。如果仰角 θ 不对，走得再快也没用，因为一开始就走错方向，后期必须停下来校正方向，甚至可能永远到达不了目标，白白浪费了生命。\n 因此，全能型的人才比较适合确定项目方向，担任团队领导。 乔布斯、马斯克就是这样的人，强在知识的广度，而不是知识的深度。他们既懂技术，又懂市场和管理，还了解人文（“我喜欢站在人文和技术的交叉点”），一旦掌握资源，就能带领团队，做出创新的产品。但是，如果让他们担任工程师，绝对是糟糕的工程师，会被开除。\n不过话说回来，现实中，谁会因为你知道的事情多，就让你担任团队领导呢？反而是因为你克服了技术难题，才有机会来领导团队。乔布斯和马斯克都是自己创业才出头的，恐怕不是偶然。\n总结一下，对于公司来说，如果有明确的技术方向，那么就需要聘请特长程序员，帮助加快开发速度。如果是刚刚诞生的创业公司，方向还在摸索之中，那么全能程序员也许更有价值。","title":"知识广度 vs 知识深度"},{"content":" 点击上方图片购买课程   经常有朋友咨询可否提供有偿服务，目前可接文本数据分析，常见的分析支持\n 词频统计 情感分析 LDA话题分析 文本分类 带趋势的相似度分析 其他  为了提高沟通效率，需要您提供需求文档，需要说明两部分信息\n1、数据说明  是否已拥有数据 数据的文件格式(pdf、txt、excel类等) 数据量(文件数或多少M)  2、数据分析  列出需要计算的指标（列出计算方法） 分析结果的存储格式及字段样式(建议excel格式)  提示 我自己时间精力有限，服务肯定没有全职数据分析师做的好，更建议大家付费购买课程自学，技术上打铁还需自身硬。常见的数据分析都已形成课程，价格也不贵。\n 点击上方图片购买课程   咨询方式 准备好需求文档后，可加微信18373154668（微信手机同号）\n 中午12:00-14:00 晚间22:00-24:00  ","permalink":"/blog/%E6%95%B0%E6%8D%AE%E8%AF%B4%E6%98%8E/","summary":" 点击上方图片购买课程   经常有朋友咨询可否提供有偿服务，目前可接文本数据分析，常见的分析支持\n 词频统计 情感分析 LDA话题分析 文本分类 带趋势的相似度分析 其他  为了提高沟通效率，需要您提供需求文档，需要说明两部分信息\n1、数据说明  是否已拥有数据 数据的文件格式(pdf、txt、excel类等) 数据量(文件数或多少M)  2、数据分析  列出需要计算的指标（列出计算方法） 分析结果的存储格式及字段样式(建议excel格式)  提示 我自己时间精力有限，服务肯定没有全职数据分析师做的好，更建议大家付费购买课程自学，技术上打铁还需自身硬。常见的数据分析都已形成课程，价格也不贵。\n 点击上方图片购买课程   咨询方式 准备好需求文档后，可加微信18373154668（微信手机同号）\n 中午12:00-14:00 晚间22:00-24:00  ","title":"有偿数据分析服务"},{"content":" 点击上方图片购买课程   爱企查 想搜集企业信息，可以使用爱企查网站，例如通过该网站，搜”华为“，，可以获得与关键词华为相关的很多企业名信息  设计网络爬虫步骤\n 使用开发者工具network面板审查网站的网址规律urls 对单个网址url尝试访问 确定网站是html或json类型 从网页中解析定位需要的数据。   使用pyquery解析html页面数据； 或使用json解析json页面数据  存储到csv 重复2-5  尝试访问第一页  经过开发者工具network，可以使用requests对其进行访问。\n需要注意的是，headers中需要加入Referer参数，该参数作用是告诉服务器\n 兄弟，我是经过Referer介绍的，不然我也不可能知道 https://aiqicha.baidu.com/s/advanceFilterAjax?q=%E5%8D%8E%E4%B8%BA\u0026amp;t=\u0026amp;p=1\u0026amp;s=10\u0026amp;o=0\u0026amp;f=%7B%7D 这个网址啊\n import requests from urllib.parse import quote query = \u0026#39;华为\u0026#39; url = \u0026#39;https://aiqicha.baidu.com/s/advanceFilterAjax?q={q}\u0026amp;t=\u0026amp;p=1\u0026amp;s=10\u0026amp;o=0\u0026amp;f=%7B%7D\u0026#39;.format(q=quote(query)) headers = {\u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.55 Safari/537.36\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;https://aiqicha.baidu.com/s?q={q}\u0026amp;t=0\u0026#39;.format(q=quote(query))} resp = requests.get(url, headers=headers) resp \u0026lt;Response [200]\u0026gt;  解析网页数据   通过开发者工具可以看到，这个网站采用的json类型网页数据。\n  好在这类网页的解析定位比较简单。\nfor com in resp.json()[\u0026#39;data\u0026#39;][\u0026#39;resultList\u0026#39;][:3]: print(com) print() Run\n{\u0026#39;pid\u0026#39;: \u0026#39;31360200662522\u0026#39;, \u0026#39;entName\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;技术有限公司\u0026#39;, \u0026#39;entType\u0026#39;: \u0026#39;有限责任公司(自然人投资或控股的法人独资)\u0026#39;, \u0026#39;validityFrom\u0026#39;: \u0026#39;1896-08-14\u0026#39;, \u0026#39;domicile\u0026#39;: \u0026#39;深圳市龙岗区坂田\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;总部办公楼\u0026#39;, \u0026#39;entLogo\u0026#39;: \u0026#39;https://zhengxin-pub.cdn.bcebos.com/logopic/67e739bf0e47768f4a1f542daf3f7f42_fullsize.jpg\u0026#39;, \u0026#39;openStatus\u0026#39;: \u0026#39;开业\u0026#39;, \u0026#39;legalPerson\u0026#39;: \u0026#39;赵明路\u0026#39;, \u0026#39;tags\u0026#39;: {\u0026#39;laTaxer\u0026#39;: \u0026#39;\u0026lt;span class=\u0026#34;zx-ent-tag laTaxer\u0026#34;\u0026gt;A级纳税人(2020)\u0026lt;/span\u0026gt;\u0026#39;}, \u0026#39;logoWord\u0026#39;: \u0026#39;华为技术\u0026#39;, \u0026#39;titleName\u0026#39;: \u0026#39;华为技术有限公司\u0026#39;, \u0026#39;titleLegal\u0026#39;: \u0026#39;赵明路\u0026#39;, \u0026#39;titleDomicile\u0026#39;: \u0026#39;深圳市龙岗区坂田华为总部办公楼\u0026#39;, \u0026#39;levelAtaxer\u0026#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], \u0026#39;regCap\u0026#39;: \u0026#39;5,035,113.2万\u0026#39;, \u0026#39;scope\u0026#39;: \u0026#39;一般经营项目是:程控交换机、传输设备、数据通信设备、宽带多媒体设备、电源、无线通信设备、微电子产品、软件、系统集成工程、计算机及配套设备、终端设备及相关通信信息产品、数据中心机房基础设施及配套产品(含供配电、空调制冷设备、智能管理监控等)的开发、生产、销售、技术服务、工程安装、维修、咨询、代理、租赁;信息系统设计、集成、运行维护;集成电路设计、研发;统一通信及协作类产品,服务器及配套软硬件产品,存储设备及相关软件的研发、生产、销售;无线数据产品(不含限制项目)的研发、生产、销售;通信站点机房基础设施及通信配套设备(含通信站点、通信机房、通信电源、机柜、天线、通信线缆、配电、智能管理监控、锂电及储能系统等)的研发、生产、销售;能源科学技术研究及能源相关产品的研发、生产、销售;大数据产品、物联网及通信相关领域产品的研发、生产、销售;汽车零部件及智能系统的研发、生产、销售及服务;建筑工程;设计、制作、发布、代理各类广告;通信设备租赁(不含限制项目);培训服务;技术认证服务;信息咨询(不含限制项目);企业管理咨询(不含限制项目);进出口业务;国内商业、物资供销业业务(不含专营、专控、专卖商品);对外经济技术合作业务;房屋租赁业务(持许可经营证);以及其他法律法规不禁止的经营活动(依法须经批准的项目,经相关部门批准后方可开展经营活动)。,许可经营项目是:增值电信业务经营。\u0026#39;, \u0026#39;regNo\u0026#39;: \u0026#39;815503001822039217\u0026#39;, \u0026#39;hitReason\u0026#39;: [{\u0026#39;品牌项目\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;\u0026#39;}, {\u0026#39;商标名称\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;\u0026#39;}, {\u0026#39;企业名称\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;技术有限公司\u0026#39;}, {\u0026#39;网站名称\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;应用平台1\u0026#39;}, {\u0026#39;地址\u0026#39;: \u0026#39;深圳市龙岗区坂田\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;总部办公楼\u0026#39;}], \u0026#39;labels\u0026#39;: {\u0026#39;opening\u0026#39;: {\u0026#39;text\u0026#39;: \u0026#39;开业\u0026#39;, \u0026#39;style\u0026#39;: \u0026#39;blue\u0026#39;, \u0026#39;fontColor\u0026#39;: \u0026#39;#1EA930\u0026#39;, \u0026#39;bgColor\u0026#39;: \u0026#39;#EBF6EC\u0026#39;}}, \u0026#39;personTitle\u0026#39;: \u0026#39;法定代表人\u0026#39;, \u0026#39;personId\u0026#39;: \u0026#39;a9f275934f59110096757b656ba41382\u0026#39;} {\u0026#39;pid\u0026#39;: \u0026#39;28610144220343\u0026#39;, \u0026#39;entName\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;终端(深圳)有限公司\u0026#39;, \u0026#39;entType\u0026#39;: \u0026#39;有限责任公司(外商投资、非独资)\u0026#39;, \u0026#39;validityFrom\u0026#39;: \u0026#39;2003-12-25\u0026#39;, \u0026#39;domicile\u0026#39;: \u0026#39;深圳市龙岗区坂田\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;基地B区2号楼\u0026#39;, \u0026#39;entLogo\u0026#39;: \u0026#39;https://zhengxin-pub.cdn.bcebos.com/logopic/a638462a7a48ab79f84b7db2c0e64230_fullsize.jpg\u0026#39;, \u0026#39;openStatus\u0026#39;: \u0026#39;开业\u0026#39;, \u0026#39;legalPerson\u0026#39;: \u0026#39;赵明路\u0026#39;, \u0026#39;tags\u0026#39;: {\u0026#39;laTaxer\u0026#39;: \u0026#39;\u0026lt;span class=\u0026#34;zx-ent-tag laTaxer\u0026#34;\u0026gt;A级纳税人(2020)\u0026lt;/span\u0026gt;\u0026#39;}, \u0026#39;logoWord\u0026#39;: \u0026#39;华为终端\u0026#39;, \u0026#39;titleName\u0026#39;: \u0026#39;华为终端(深圳)有限公司\u0026#39;, \u0026#39;titleLegal\u0026#39;: \u0026#39;赵明路\u0026#39;, \u0026#39;titleDomicile\u0026#39;: \u0026#39;深圳市龙岗区坂田华为基地B区2号楼\u0026#39;, \u0026#39;levelAtaxer\u0026#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], \u0026#39;regCap\u0026#39;: \u0026#39;1,598,080.8万\u0026#39;, \u0026#39;scope\u0026#39;: \u0026#39;一般经营项目是：开发、生产、销售通信电子产品及配套产品，并提供技术咨询和售后服务。进出口业务（不含分销)。，许可经营项目是：\u0026#39;, \u0026#39;regNo\u0026#39;: \u0026#39;815503006447640305\u0026#39;, \u0026#39;hitReason\u0026#39;: [{\u0026#39;企业名称\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;终端(深圳)有限公司\u0026#39;}, {\u0026#39;网站名称\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;HARMONYOS网站\u0026#39;}, {\u0026#39;地址\u0026#39;: \u0026#39;深圳市龙岗区坂田\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;基地B区2号楼\u0026#39;}], \u0026#39;labels\u0026#39;: {\u0026#39;opening\u0026#39;: {\u0026#39;text\u0026#39;: \u0026#39;开业\u0026#39;, \u0026#39;style\u0026#39;: \u0026#39;blue\u0026#39;, \u0026#39;fontColor\u0026#39;: \u0026#39;#1EA930\u0026#39;, \u0026#39;bgColor\u0026#39;: \u0026#39;#EBF6EC\u0026#39;}}, \u0026#39;personTitle\u0026#39;: \u0026#39;法定代表人\u0026#39;, \u0026#39;personId\u0026#39;: \u0026#39;a9f275934f59110096757b656ba41382\u0026#39;} {\u0026#39;pid\u0026#39;: \u0026#39;30140456955334\u0026#39;, \u0026#39;entName\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;终端有限公司\u0026#39;, \u0026#39;entType\u0026#39;: \u0026#39;有限责任公司(外商投资企业法人独资)\u0026#39;, \u0026#39;validityFrom\u0026#39;: \u0026#39;2012-11-23\u0026#39;, \u0026#39;domicile\u0026#39;: \u0026#39;广东省东莞市松山湖园区新城路2号\u0026#39;, \u0026#39;entLogo\u0026#39;: \u0026#39;https://zhengxin-pub.cdn.bcebos.com/logopic/cc662a5d573b793e9c5b84031350ced0_fullsize.jpg\u0026#39;, \u0026#39;openStatus\u0026#39;: \u0026#39;开业\u0026#39;, \u0026#39;legalPerson\u0026#39;: \u0026#39;赵明路\u0026#39;, \u0026#39;tags\u0026#39;: {\u0026#39;laTaxer\u0026#39;: \u0026#39;\u0026lt;span class=\u0026#34;zx-ent-tag laTaxer\u0026#34;\u0026gt;A级纳税人(2020)\u0026lt;/span\u0026gt;\u0026#39;}, \u0026#39;logoWord\u0026#39;: \u0026#39;华为终端\u0026#39;, \u0026#39;titleName\u0026#39;: \u0026#39;华为终端有限公司\u0026#39;, \u0026#39;titleLegal\u0026#39;: \u0026#39;赵明路\u0026#39;, \u0026#39;titleDomicile\u0026#39;: \u0026#39;广东省东莞市松山湖园区新城路2号\u0026#39;, \u0026#39;levelAtaxer\u0026#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], \u0026#39;regCap\u0026#39;: \u0026#39;70,000.0万\u0026#39;, \u0026#39;scope\u0026#39;: \u0026#39;开发、生产、销售：通信及电子产品、计算机、卫星电视接收天线、高频头、数字卫星电视接收机及前述产品的配套产品，并提供技术咨询和售后服务；开发、生产、销售：医疗器械（第一类、第二类、第三类医疗器械），并提供技术咨询和售后服务；增值电信业务经营；佣金代理；货物或技术进出口（国家禁止或涉及行政审批的货物和技术进出口除外）。(依法须经批准的项目，经相关部门批准后方可开展经营活动)\u0026#39;, \u0026#39;regNo\u0026#39;: \u0026#39;815518000494355853\u0026#39;, \u0026#39;hitReason\u0026#39;: [{\u0026#39;企业名称\u0026#39;: \u0026#39;\u0026lt;em\u0026gt;华为\u0026lt;/em\u0026gt;终端有限公司\u0026#39;}], \u0026#39;labels\u0026#39;: {\u0026#39;opening\u0026#39;: {\u0026#39;text\u0026#39;: \u0026#39;开业\u0026#39;, \u0026#39;style\u0026#39;: \u0026#39;blue\u0026#39;, \u0026#39;fontColor\u0026#39;: \u0026#39;#1EA930\u0026#39;, \u0026#39;bgColor\u0026#39;: \u0026#39;#EBF6EC\u0026#39;}}, \u0026#39;personTitle\u0026#39;: \u0026#39;法定代表人\u0026#39;, \u0026#39;personId\u0026#39;: \u0026#39;a9f275934f59110096757b656ba41382\u0026#39;} \n完整爬虫 经过刚刚的几个步骤，我们现在只需要\nimport csv import requests import time query = \u0026#39;华为\u0026#39; max_pages = 10 #获取前10页的企业信息数据 #存储数据 csvf = open(\u0026#39;企业信息.csv\u0026#39;, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, newline=\u0026#39;\u0026#39;) fieldnames = [\u0026#39;titleName\u0026#39;, \u0026#39;titleDomicile\u0026#39;, \u0026#39;titleLegal\u0026#39;, \u0026#39;validityFrom\u0026#39;, \u0026#39;regCap\u0026#39;, \u0026#39;regNo\u0026#39;, \u0026#39;scope\u0026#39;] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() #访问 for page in range(1, max_pages): url = \u0026#39;https://aiqicha.baidu.com/s/advanceFilterAjax?q={q}\u0026amp;t=\u0026amp;p={p}\u0026amp;s=10\u0026amp;o=0\u0026amp;f=%7B%7D\u0026#39;.format(q=quote(query), p=page) headers = {\u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.55 Safari/537.36\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;https://aiqicha.baidu.com/s?q={q}\u0026amp;t=0\u0026#39;.format(q=quote(query))} resp = requests.get(url, headers=headers) #解析数据 for com in resp.json()[\u0026#39;data\u0026#39;][\u0026#39;resultList\u0026#39;]: data = dict() for fieldname in fieldnames: data[fieldname] = com[fieldname] #写入csv writer.writerow(data) csvf.close() \n运行结果 采集10页的爬虫运行结束后，尝试读取 企业信息.csv\nimport pandas as pd df= pd.read_csv(\u0026#39;企业信息.csv\u0026#39;) df.head()   ","permalink":"/blog/%E7%88%B1%E4%BC%81%E6%9F%A5/","summary":"点击上方图片购买课程   爱企查 想搜集企业信息，可以使用爱企查网站，例如通过该网站，搜”华为“，，可以获得与关键词华为相关的很多企业名信息  设计网络爬虫步骤\n 使用开发者工具network面板审查网站的网址规律urls 对单个网址url尝试访问 确定网站是html或json类型 从网页中解析定位需要的数据。   使用pyquery解析html页面数据； 或使用json解析json页面数据  存储到csv 重复2-5  尝试访问第一页  经过开发者工具network，可以使用requests对其进行访问。\n需要注意的是，headers中需要加入Referer参数，该参数作用是告诉服务器\n 兄弟，我是经过Referer介绍的，不然我也不可能知道 https://aiqicha.baidu.com/s/advanceFilterAjax?q=%E5%8D%8E%E4%B8%BA\u0026amp;t=\u0026amp;p=1\u0026amp;s=10\u0026amp;o=0\u0026amp;f=%7B%7D 这个网址啊\n import requests from urllib.parse import quote query = \u0026#39;华为\u0026#39; url = \u0026#39;https://aiqicha.baidu.com/s/advanceFilterAjax?q={q}\u0026amp;t=\u0026amp;p=1\u0026amp;s=10\u0026amp;o=0\u0026amp;f=%7B%7D\u0026#39;.format(q=quote(query)) headers = {\u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.55 Safari/537.36\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;https://aiqicha.baidu.com/s?q={q}\u0026amp;t=0\u0026#39;.format(q=quote(query))} resp = requests.get(url, headers=headers) resp \u0026lt;Response [200]\u0026gt;  解析网页数据   通过开发者工具可以看到，这个网站采用的json类型网页数据。","title":"案例实战 | 企业信息数据采集"},{"content":" 点击上方图片购买课程   摘 要：\n在数字化生活背景下, 传统的管理变成或正在变成数据的管理, 传统的决策变成或正在变成基于数据分析的决策.从大数据的数据特征、问题特征和管理决策特征出发, 讨论管理决策研究和应用的范式转变.大数据驱动范式可以从外部嵌入、技术增强和使能创新三个角度来审视, 并体现出“数据驱动+模型驱动”的“关联+因果”含义.此外, 围绕大数据特征和重要研究方向, 阐述了全景式PAGE框架及其要素.\n关键词： 大数据 ； 管理决策 ； 研究范式 ； 全景式 PAGE 框架\n信息科技的飞速发展和深度融合开启了数字化生活的新篇章, 把人们带入了大数据 (big data) 时代.一方面, 随着各种感应探测技术、智能终端以及移动互联的广泛应用, 使得社会经济生活的方方面面以更细粒度的数据形式呈现, 进而整个社会的“像素”得到显著提升;另一方面, 社会“像素”的提升促进了数字“成像”的发展, 使得通过数据世界可以更清晰地描绘社会经济活动情境, 进而基于数据的商务分析 (business analytics, BA) 正在成为使能创新的核心竞争力.在此背景下, 传统的管理变成或正在变成数据的管理, 传统的决策变成或正在变成基于数据分析的决策.\n近年来, 大数据成为学界、政界和业界持续关注的热点.在学术界, 早在2008年和2011年, 《Nature》与《Science》杂志分别从互联网技术、互联网经济学、超级计算、环境科学以及生物医药等多方面讨论大数据的处理与应用45此后, 大数据在各个学科领域包括医学、经济学、管理学以及公共管理等领域得到了广泛的探讨与研究6789同时, 大数据也引起世界各国高度重视, 美国、欧盟、澳大利亚以及日本等国部署了一系列大数据相关战略和关键领域。在产业界, 国内外大批知名企业掀起了技术产业创新浪潮, 通过收购与合作构建和提升大数据技术与应用能力, 布局和开拓相关的业态和市场.\n我国政府对大数据高度重视并有一系列前瞻性洞见和部署.2015年十八届五中全会提出实施国家大数据战略 , 国务院发布《促进大数据发展行动纲要》 , 指出大数据是国家基础性战略资源, 旨在全面推进我国大数据发展和应用, 加快建设数据强国.2017年十九大报告进一步强调要推动互联网、大数据、人工智能和实体经济深度融合.通过国家需求、政策支持、产业结合以及企业研发等形式, 近些年来涌现出一大批重大规划和政产学研项目, 包括国家自然科学基金委员会 (NSFC) 于2015年9月启动的“大数据驱动的管理与决策研究”重大研究计划 (简称NSFC大数据重大研究计划, 参见附注) .\n大数据在给社会经济生活带来深刻变革的同时, 也对管理与决策研究带来一系列新的重要课题.从信息技术 (IT) 范畴来看, 可以从两个视角来认识大数据, 即大数据的“造”与“用”视角 (如图1所示) .这和产品的属性类似, 一方面, 人们关心产品是如何设计和制造出来的;另一方面, 人们关心产品是如何使用和有用的.大数据以IT的形式呈现, 通常可以概括为数据和系统 (包括算法、应用、平台等) .从造的视角出发, 涉及的主要问题包括大数据分析 (如画像、学习、推断等) 和大数据系统建设 (如体系、功能、集成等) .从用的视角出发, 涉及的主要问题包括大数据使用行为 (如采纳、影响、管理等) 和大数据使能创新 (如要素、价值、市场等) .\n 值得一提的是, 大数据相关的研究不仅需要对相关领域的理论与应用进行探索和创新, 也需要对许多惯常的认识视角和方法论范式进行审视和发展.同时, 我国学者和研究人员也面临着“严谨 (rigor) 与相关 (relevance) ” (学术规范与实践影响) 和“世界与中国” (国际视野与中国根基) 既分野又统一的挑战, 当然应对这些挑战也为创新机遇开拓了广袤的空间.\n大数据特征 概括说来, 大数据的特征可以从三个方面来描述:数据特征, 问题特征和管理决策特征, 分别刻画大数据具有的数据属性、大数据问题的特点、以及管理决策大数据问题的视角.\n1.1 大数据的数据特征 大数据作为数据, 具有体量大、多样性、 (价值) 密度低、速率高等属性特征 (即4V等特征）.第一, 数字化生活各要素的数据生成和交互加速了数据的海量积累, 使得数据规模剧增.体量大可以从超规模 (即超出传统规模) 和问题领域角度来理解, 因为规模是与问题领域相关, 而不是拘泥于统一量纲标准.例如, 市场营销领域的客户满意度调查的传统方式是问卷和访谈, 那么进一步考虑海量网上购物评论和社交媒体体验分享的用户生成内容 (user generated content, UGC) 就构成了一个大数据情境.第二, 数字化生活各要素的数据生成和交互丰富了数据类型, 使得数据多样性成为常态.多样性强调数据的多源异构和富媒体 (如文本、语音、图片、视频等) 特点.例如, 社交网络上的公众声音、智慧交通平台上的影像信息等均为富媒体形态且来源广泛.第三, 数字化生活各要素的数据生成和交互在加速海量积累的同时也减少了价值数据的占比, 使得价值发现的难度提升.价值密度低意味着数据挖掘和商务分析是大数据应用的关键.例如, 对于在线企业或服务平台来讲, 随着网络访问的增加和业务活动的扩展, 识别高价值的潜在用户变得相对困难, 也凸显出大数据分析的重要性.第四, 数字化生活各要素的数据生成和交互强化了流数据形态和即时性, 使得数据传输和交换速率显著升高.速率高对平滑流通和连续商务提出了更高要求.例如, 智能手机客户端应用软件 (Apps) 的使用需要在服务内容和效果方面 (包括相关内容的浏览、下载、上传、响应、展现等) 有良好的临场感和实时体验.\n1.2 大数据的问题特征 在各类研究和应用问题中, 有一类问题可以归为大数据问题.大数据问题应至少具有以下三个特点:粒度缩放、跨界关联和全局视图.首先, 粒度缩放是指问题要素的数据化, 并能够在不同粒度层级间进行缩放.这需要通过数据感知、连接和采集获得足够细的粒度性, 同时对于不同层级间的粒度转换具有分解和聚合能力.其次, 跨界关联是指问题的要素空间外拓.这需要扩展惯常的要素约束和领域视角, 强调“外部性”和“跨界”, 在问题要素空间中通过引入外部视角与传统视角联动, 将内部数据 (如个体自身、企业组织和行业等内部数据) 与外部数据 (如社会媒体内容等) 予以关联.最后, 全局视图是指问题定义与求解的全局性, 强调对相关情境的整体画像及其动态演化的把控和诠释.这需要基于数据分析和平台集成的全景式“成像”能力.\n在数字化生活的背景下, 具有粒度缩放、跨界关联和全局视图特点的应用问题不断涌现, 进而激发了大量创新并催生了许多新模式、新业态.例如, 在医疗健康领域, 传统疾病诊疗中的病人就医关系正在被扩展为融合院外检测、干预、康复数据的新型诊疗模式.其中, 不仅涉及传统意义上的生化、影像和诊疗等医院内部数据, 也涉及医院外病人和社区相关的体征、体验、社会关系、环境等外部数据.这里, 需要获取相关生化组织、疾病、人、社区、环境等微观宏观粒度信息;同时进行视角拓展和关联, 包括从科室内外到医院内外的跨界融合;进而, 可以在全局层面进行更为有效的诊疗决策和管理.此外, 近年来发展迅速的新型医疗健康服务平台, 通过整合社会和行业资源, 连接医生、公众、医院以及相关上下游企业提供信息咨询、诊疗链入、健康指导等服务产品, 形成了一类新业态并呈现显著的大数据问题特征.再如, 在新型商务领域, 共享单车体现了大数据问题的粒度缩放、跨界关联和全局视图特点.通过车载传感器、定位系统以及智能手机终端等设备获得调度和管理需要的“人—车—路”粒度信息;同时, 打通导航、支付、通讯、商铺以及餐饮等诸多业务功能, 实现跨界联动;进而, 企业和平台可以从全局出发形成整体画像, 并优化布局和运作以做出相应的管理决策.\n1.3 大数据管理决策特征 一般而言, 管理者在业务活动中通常有三个关注:发生了什么 (what) , 为什么发生 (why) 以及将发生什么 (will) .在大数据问题特征的情境下, 这三个关注可以从业务层面、数据层面和决策层面进行刻画, 进而形成管理决策大数据问题的特征框架 (如图2所示) .\n 首先, 对于发生了什么 (what) 的关注, 业务层面需要反映业务的状态, 即已经发生或者正在发生的事件和活动 (如市场份额、交易现状、KPI表现等) ;数据层面需要体现业务环节的数据粒度, 即现有的数据能否足够支撑管理者对不同粒度层级的业务状态进行了解和把握 (如感知、采集、解析、融合等) ;决策层面需要构建问题的全局视角, 即定期整合汇总以及随需要素展现 (如:按时统计报表、实时信息查询等) .\n接着, 对于为什么会发生 (why) 的关注, 业务层面需要反映业务及其要素之间的联系, 即业务特定状态的发生与哪些环节和要素有关联;数据层面需要体现不同业务数据路径的连接, 即不同粒度层级和跨界关联的业务数据是否有效融通, 并能够支持对数据的分析处理 (如多维、切分、回溯等) ;决策层面需要发现关联业务/要素之间的因果关系, 即厘清业务逻辑和状态转换机理.在此, 特别需要指出的是, 在很多情形下, 尤其在管理决策领域, 大数据需要既讲关联也讲因果.对于许多管理问题而言, 如果决策者对事件之间的因果关系没有准确的分析与判断, 则难以做出有效的决策, 当管理者面临重大决策时更是如此 (如投融资、进入新市场、业务转型、结构重组等) .\n进而, 对于将发生什么 (will) 的关注, 业务层面需要反映业务发展轨迹, 即勾勒出由决策或变化导致的业务走向;数据层面需要体现数据的动态演化情况, 即对于相关事件进行不确定性动态建模并能够支持智能学习和推断 (如模拟、预测、人工智能等) ;决策层面需要提升前瞻性和风险洞见, 即获得决策情境映现和趋势预判能力.\n大数据驱动范式 系统化管理理论的产生及其发展, 包括行为理论、决策理论、权变理论和战略管理等理论体系和管理模型的研究[19], 在提炼管理思想、诠释管理模式和指导管理实践方面发挥了重要作用.长期以来, 管理学研究一直以模型驱动范式为领域主流.在模型驱动范式下, 研究者基于观察抽象和理论推演建立概念模型和关联假设, 再借助解析手段 (例如运筹学和博弈论等分析工具) 对模型进行求解和优化, 或利用相关数据 (包括仿真数据、调研数据、观测数据、系统记录数据等) 对假设进行统计检验.此外, 建立在归纳逻辑基础上的扎根理论等研究范式, 传统上强调从文献概括、实地调研、深度访谈中进行定性推演形成理论和认识.\n但是, 在大数据背景下, 一些新的挑战正在涌现[20,21].这里, 以传统的行为模型或计量模型 (简称传统模型) 为例.第一, 传统模型基于观察抽象、理论推演以及经验提炼确定变量 (或构念) 组合, 以此构建变量关系和理论假设, 并通过数据实证进行模型检验.然而, 在大数据背景下, 常常需要检验大量的变量组合 (如指数级组合数) , 这就使得逐一构建传统模型并进行检验成为难以完成的任务.第二, 有些重要潜在影响因素和隐变量没有被意识到, 因而没有被考虑到传统模型的变量组合中, 这常常导致传统模型的假设与数据的适配性不强, 模型解释力不高.第三, 虽然知道有些影响因素和变量是重要的, 但是由于这些因素和变量在传统意义上不可测或不可获 (如文本、图像、语音等富媒体数据) , 难以容纳到传统模型变量组合中, 进而造成模型解释力不理想.第四, 当样本数据规模大幅增加时, 对一些变量的显著性检验有效性下降, 可能出现联系缺失或拟合过度等情形.\n面对上述挑战, 数据驱动范式的优势不断凸显.概括说来, 数据驱动范式的作用有两个:一是直接发现特定变量关系模式, 形成问题解决方案;二是与模型驱动范式进行补充扩展, 形成融合范式.值得指出的是, 数据驱动范式发现的一类重要关系模式是关联 (association) 及其扩展形式 (如关联规则、层次关联、数量关联、时态关联、类关联、模式关联等) , 并广泛应用到许多领域 (如搜索、推荐、模式识别等) [22].然而, 许多管理决策情形不仅需要关联也需要因果, 这在一定程度上催生了融合范式及其应用.例如, 首先利用数据驱动范式的关联挖掘方法发现变量间的关联, 以缩减变量空间和组合规模;进而利用模型驱动范式的行为方法辨识构念影响路径, 或计量方法解析变量间的因果关系.这是一个“数据驱动+模型驱动”思路, 体现“关联+因果”的诉求, 这对于管理决策尤为重要.这里, 与传统模型相比一个重要区别是, 此时的变量空间中可能存在着一些新颖且潜在的变量及其关联, 在进一步融合运用模型驱动方法构建变量关系时存在困难, 因为已有的理论知识和领域经验不能直接支持相关的建模逻辑和关系形式.这就需要在更深 (包括间接、潜隐) 层面上探寻新的变量影响机理和理论, 并在方法论上另辟新径 (如通过步进/层次/迭代的试错和启发建模方式) .\n特别地, 当数据具有4V等特征并且面对管理决策大数据问题时, 考虑数据驱动与模型驱动的结合、管理决策的关联因果特点、使能创新等元素的一类新型范式 (在此称作大数据驱动范式) 应运而生, 并在深入研究与应用过程中得到进一步发展完善.一般而言, 大数据驱动范式具有“数据驱动+模型驱动”的“关联+因果”性质.具体说来, 大数据驱动范式的框架可从三个角度来审视:外部嵌入、技术增强以及使能创新 (如图3所示) .前两个角度主要涉及方法论层面, 后一个角度主要涉及价值创造层面.\n 2.1 外部嵌入 外部嵌入指外部视角引入, 即将传统模型视角之外的一些重要变量 (包括构念、因素等) 引入到模型中.假设自变量集合为X'={x1, x2, …, xm, xm+1, …, xn}, 其中x1, x2, …, xm为传统建模变量, xm+1, …, xn为通过数据驱动方法新引入的变量 (多为富媒体形态) .如果没有变量引入 (n=m) , 传统模型的变量关系是Y=f (X) , X={x1, x2, …, xm}.在跨界关联情境下 (n\u0026gt;m) , 将形成新变量关系Y'=f' (X') .换句话说, Y=f (X) 可以是Y'=f' (X') 的特例;一般意义上讲, X'≠X, f'≠f, Y'≠Y.显然, 新变量关系的构建面临着深刻的挑战, 既有新变量空间的发现, 又有新视角的洞察, 也有新变量关系的辨识和新理论的生成.当然, 对于研究和应用来讲, 这些挑战同时也是创新的机遇.例如, 在金融领域, 可以考虑引入搜索平台上的股票关注数据变量以及社交媒体平台上的相关公共事件数据变量等, 以构建新型股价预测模型;在商务领域, 可以考虑引入购物平台上的评论数据变量以及朋友圈中的体验和口碑数据变量等, 以构建新型商品营销模型;在医疗健康领域, 可以考虑引入院外病友智能检测终端数据变量以及区域环境诱因数据变量等, 以构建新型呼吸疾病预防诊疗模型;在公共管理领域, 可以考虑引入社交平台上的受众意见数据变量以及相关领域联动影响数据变量等, 以构建新型公共政策模型.\n2.2 技术增强 对于传统模型来讲, 通过外部嵌入而引入的变量多为富媒体、潜隐性、不可测或不可获, 通常需要利用数据驱动方法和技术.可以说, 数据和技术意识及其能力是大数据背景下研究和应用的核心竞争力, 也是大数据驱动范式的关键要素.技术增强旨在提升这样的能力与要素水平.\n从大数据的“用”与“造”视角出发, 技术增强具有两方面含义.一方面, “用”的视角要求管理模型驱动的研究和应用能够增强对外部大数据的敏感性, 引入外部变量并构建其关系;同时, 能够增强对大数据分析技术的敏感性, 构建方法和工具的获取和使用能力.研究和应用创新通常体现在通过新型范式开发新的变量关系, 进而形成新的管理学模型和应用 (如面向管理问题的新型行为模型或计量模型) , 以获得更深入和更具解释力的管理决策洞见和策略.\n另一方面, “造”的视角要求数据驱动的研究和应用能够增强对于管理决策问题的敏感性, 构建面向管理决策问题的方法和技术.研究和应用创新通常体现在根据管理决策问题特点及其数据属性开发相关性质、测度和策略, 以获得新颖有效的算法和解决方案.值得指出的是, 这里许多算法 (特别是启发式算法和近似解法) 需要经过实验数据的验证以评估其效率和效果.\n多年来, 不管是“用”的视角还是“造”的视角在数据的使用标准上也经历了一个不断升级的过程, 从模拟数据到标杆数据, 再到相当规模的实际数据, 形成一个逐步丰富和叠加的验证实践.在大数据情境下, 实际数据的规模化得到了进一步强化.此外, 在算法比较中, 更关注算法带来的实用效果提升的显著性, 特别在涉及相关用户的场景中, 通常需要进行用户行为实验及其效果感知评测.\n在数据类型方面, 富媒体形态 (如文本、图像、音频、视频等) 成为主流.其中, 音频数据、视频数据具有时间连续性特点.由于计算机中通常采用编码、采样等方式表示富媒体数据, 因而数据变换成为大数据分析的重要内容.常用的数据变换方法包括文本处理的向量空间模型 (VSM) [23]、主题模型 (topic model) [24], 图像处理的尺度不变特征转换 (SIFT) [25], 音频处理的短时傅里叶变换 (STFT) [26], 视频处理的时空兴趣点检测 (STIP) [27]等方法.近年来, 随着大数据平台化运算能力的显著提升, 基于深度神经网络的相关方法进一步发展, 并在富媒体数据变换上展现出良好的应用效果和发展前景.例如, 用于文本数据的单词嵌入 (word embedding) [28], 用于图像数据的卷积神经网络 (CNN) [29]和胶囊神经网络 (capsnet) [30], 用于音视频等具有时间序列特征数据的循环神经网络 (RNN) [31]、长短时记忆神经网络 (LSTM) [32]等.其他较新的数据变换方法还包括多层感知机 (MLP) 、自学习编码器 (AE) 、受限制玻尔兹曼机 (RBM) 、深度语义相似模型 (DSSM) 、神经自回归分布估计 (NADE) 、生成对抗网络 (GAN) 等[33,34].\n2.3 使能创新 大数据驱动的一个重要含义是大数据使能 (enabling) .大数据能力主要包括大数据战略、大数据基础设施、大数据分析 (6) 方法与技术等.大数据使能是指大数据能力带动的价值创造.例如, 从研究和应用范式角度看, 外部嵌入是一种使能情形, Y'=f' (X') 中, 大数据能力通过自变量X'体现, 创造的价值通过因变量Y'体现, 使能转换方式通过f'体现.从研究和应用情境角度看, 企业的价值创造可以体现在其价值链的环节上, 既包括价值链的主环节及其活动, 也包括价值链的支持环节及其活动[35].在企业内外部大数据环境下, 企业使能创新是通过构建大数据能力, 带动新洞察、新模式、新机会的发现, 进而推动产品/服务创新和商业模式创新, 以实现企业的价值创造 (如图4所示) .\n 综上所述, 大数据驱动范式通过技术增强引入了新视角, 进而推动了新型变量关系、要素机理和理论模型构建, 并提升了大数据使能创新的价值创造.这对于应对新型商务形态的进一步发展机遇和挑战具有重要意义.简单说来, 新型商务可以通过两个阶段予以描述.第一个阶段称作数据商务 (digital business或data-centric business) , 即“数据化+商务分析 (BA) ”.此时通过细化数据粒度使得商务要素的“像素”显著提升, 并在此基础上进行商务分析, 针对不同管理场景和层次进行“成像”和决策.第二个阶段称作算法商务 (algorithmic business) , 即“商务分析+”.此时, 在已有的商务高像素基础上, 成像算法成为关注重点, 旨在获得面对新模式、新业态、新人群[3]的发展策略和竞争优势.这里, “商务分析+”包括BA算法创新和BA使能创新.\n近年来, 人工智能 (artificial intelligence, AI) 的研究和应用得到了快速发展, 并受到各界的广泛重视.人工智能自二十世纪50年代以来的发展起起伏伏[36], 虽然在相关思想、模型和方法等方面取得了许多重要进展和成果, 但是由于常常受限于数据基础以及计算能力的不足, 其学习、进化以及推理等方面的能力难以得到发挥, 应用效果也受到影响.直至进入大数据时代, 人工智能的许多成果得到了工程化和产品化实现, 开始在深度和广度上渗透到社会经济活动中, 并引发人们对于未来产业和人类生存的遐想和担忧.机器人和智能产品早期用于替代人类简单重复体力性工作, 现在则可以开始尝试用于替代不少复杂并具有智力的工作, 诸如围棋[37]、翻译[38]、绘画[39,40]、作曲[40]、作诗[41]、无人驾驶[42]、人脸识别[42]、意念控制[43,44]等等.人工智能在管理领域的应用也初见端倪, 比如财务机器人[45]、自动金融交易[42,45]、竞争智能[46]、客户服务[45,47]、人力资源管理[48]、市场营销[42,45]等等.毫无疑问, 人工智能将在新型商务中发挥着越来越重要的角色.另一方面, 伴随着从弱人工智能到强人工智能乃至超人工智能的进阶, 人们对于人工智能应用在隐私和伦理方面的担忧也在不断加重[49].此外, 人工智能理论和技术发展也面临众多挑战 (如“黑盒子”特点、学习机理、语义理解等) , 这些对于强调“关联+因果”的管理决策领域尤为重要.\n最后, 管理学是一门融合了“科学”与“艺术”的学科.在大数据背景下, “科学”层面的可测性、程式化和可重复性等要素正在越来越多地被数据和算法表达;而“艺术”层面的情感、心理以及认知等要素也开始被不断“量化”, 包括借助一些感知技术 (affective technologies) (如眼动、脑电技术等) .未来的管理学在探究组织内外“任务”与“人”有机结合的过程中, 数据驱动特征将愈加凸显, 相关范式转变也将进一步深化.\n全景式PAGE框架 全景式PAGE框架是融合大数据特征和重要研究方向的要素矩阵, 旨在刻画大数据驱动的“全景式”管理决策框架.全景式PAGE框架具有三个要件:大数据问题特征、PAGE内核、领域情境 (如图5所示) .大数据问题特征涵盖粒度缩放、跨界关联和全局视图, 并作为管理决策背景下的特征视角映射到研究内容方向上.PAGE内核是指四个研究方向, 即理论范式 (paradigm) 、分析技术 (analytics) 、资源治理 (governance) 以及使能创新 (enabling) .领域情境是指针对具体行业/领域 (如商务、金融、医疗健康和公共管理等) 进行集成升华.\n 围绕PAGE内核, 在大数据问题特征映射下可以形成一个4×3的要素矩阵.在理论范式 (P) 研究方向上, 重点关注管理决策范式转变机理与理论.传统的管理决策正在从以管理流程为主的线性范式逐渐向以数据为中心的新型扁平化互动范式转变, 管理决策中各参与方的角色和相关信息流向更趋于多元和交互.概括说来, 新型管理决策范式呈现出大数据驱动的全景式特点.进而, 由于全景式的多维交互动态性以及全要素参与特点, 在研究上需要采用新型的研究范式 (即大数据驱动范式) .具体说来, 在粒度缩放方面, 需要决策要素在宏观和微观层面可测可获;在跨界关联方面, 需要引入外部要素并形成内外要素互动;在全局视图方面, 需要多维整合并能够针对不同决策环境进行情境映现和评估.\n在分析技术 (A) 研究方向上, 重点关注管理决策问题导向的大数据分析方法和支撑技术.在粒度缩放方面, 需要数据的感知与采集, 并能够在不同维度和层次上进行分解与聚合;在跨界关联方面, 需要捕捉数据关系及其动态变化, 并能够进行针对多源异构的内外数据融合;在全局视图方面, 需要体系构建和平台计算能力, 并能够形成各类画像以及开展智能应用.\n在资源治理 (G) 研究方向上, 重点关注大数据资源治理机制设计与协同管理.在粒度缩放方面, 需要进行资源要素的数据化, 并明确数据标准和权属;在跨界关联方面, 需要刻画资源流通的契约关系, 并形成有效协调共享模式;在全局视图方面, 需要建立资源管理机制, 并制定组织的资源战略.\n在使能创新 (E) 研究方向上, 重点关注大数据使能的价值创造与模式创新.在粒度缩放方面, 需要提升业务价值环节的像素, 并把握业务状态;在跨界关联方面, 需要梳理业务逻辑和联系, 并辨识影响业务状态的因果关系;在全局视图方面, 需要提升大数据使能创新能力, 并促进组织发展与价值创造.\n围绕领域情境, 可以对PAGE相关研究和应用进行凝练、整合和升华.以NSFC大数据重大研究计划集成平台构建为例, 一般来讲, 集成平台由三个部件组成, 分别是平台体系、内置部件、整合部件.作为简化示例, 对于商务领域集成平台, 平台体系由一个商务管理决策相关的数据池, 以及相应的数据管理和应用管理平台系统 (包括模型、方法、工具库) 等组成;内置部件由针对特定行业 (如汽车) 和特定领域 (如营销) 的研究成果及示范系统组成;整合部件由商务领域内 (不限于内置部件领域) 其它相关项目成果在平台体系框架下经过提炼升华汇集而成.对于金融领域集成平台, 平台体系由一个金融监测预警服务平台, 以及相应的数据管理和应用管理平台系统 (包括模型、方法、工具库) 等组成;内置部件由针对特定行业 (如互联网金融) 和特定领域 (如征信评估、风险预警等) 的研究成果及示范系统组成;整合部件由金融领域内 (不限于内置部件领域) 其它相关项目成果在平台体系框架下经过提炼升华汇集而成.\n结束语 面向管理决策研究和应用的大数据驱动范式通过技术增强引入了新视角, 进而推动了新型变量关系、要素机理和理论模型构建, 并提升了大数据使能创新的价值创造.这对于应对新型商务形态的进一步机遇和挑战具有重要意义.此外, 全景式PAGE框架刻画了在粒度缩放、跨界关联和全局视图特征视角映射下的理论范式、分析技术、资源治理、使能创新等重要研究方向.\n附注:国家自然科学基金委员会“大数据驱动的管理与决策研究”重大研究计划是一个具有统一目标的项目集群, 旨在充分发挥管理、信息、数理、医学等多学科交叉合作研究的优势, 以全景式PAGE框架作为总体思路框架, 坚持“有限目标、稳定支持、集成升华、跨越发展”的原则, 围绕学科领域趋势、理论应用特点, 注重基础性、前瞻性和交叉性研究创新.自2015年底至2017年底, 此重大研究计划部署了包括培育项目、重点项目和集成项目等一系列项目.其后续的项目部署将在全景式PAGE框架下, 进一步突出凝练、整合与升华, 强调与总体思路框架内容的契合性和贡献度.\n本文素材部分来自国家自然科学基金委“大数据驱动的管理与决策研究”重大研究计划相关的系列研讨.由衷感谢不同学科领域专家学者 (包括NSFC大数据重大研究计划指导专家组、顾问专家组、管理工作组等专家学者) 的真知灼见和思想贡献!\n","permalink":"/blog/%E7%AE%A1%E7%90%86%E5%86%B3%E7%AD%96%E6%83%85%E5%A2%83%E4%B8%8B%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E7%9A%84%E7%A0%94%E7%A9%B6%E5%92%8C%E5%BA%94%E7%94%A8%E6%8C%91%E6%88%98/","summary":"点击上方图片购买课程   摘 要：\n在数字化生活背景下, 传统的管理变成或正在变成数据的管理, 传统的决策变成或正在变成基于数据分析的决策.从大数据的数据特征、问题特征和管理决策特征出发, 讨论管理决策研究和应用的范式转变.大数据驱动范式可以从外部嵌入、技术增强和使能创新三个角度来审视, 并体现出“数据驱动+模型驱动”的“关联+因果”含义.此外, 围绕大数据特征和重要研究方向, 阐述了全景式PAGE框架及其要素.\n关键词： 大数据 ； 管理决策 ； 研究范式 ； 全景式 PAGE 框架\n信息科技的飞速发展和深度融合开启了数字化生活的新篇章, 把人们带入了大数据 (big data) 时代.一方面, 随着各种感应探测技术、智能终端以及移动互联的广泛应用, 使得社会经济生活的方方面面以更细粒度的数据形式呈现, 进而整个社会的“像素”得到显著提升;另一方面, 社会“像素”的提升促进了数字“成像”的发展, 使得通过数据世界可以更清晰地描绘社会经济活动情境, 进而基于数据的商务分析 (business analytics, BA) 正在成为使能创新的核心竞争力.在此背景下, 传统的管理变成或正在变成数据的管理, 传统的决策变成或正在变成基于数据分析的决策.\n近年来, 大数据成为学界、政界和业界持续关注的热点.在学术界, 早在2008年和2011年, 《Nature》与《Science》杂志分别从互联网技术、互联网经济学、超级计算、环境科学以及生物医药等多方面讨论大数据的处理与应用45此后, 大数据在各个学科领域包括医学、经济学、管理学以及公共管理等领域得到了广泛的探讨与研究6789同时, 大数据也引起世界各国高度重视, 美国、欧盟、澳大利亚以及日本等国部署了一系列大数据相关战略和关键领域。在产业界, 国内外大批知名企业掀起了技术产业创新浪潮, 通过收购与合作构建和提升大数据技术与应用能力, 布局和开拓相关的业态和市场.\n我国政府对大数据高度重视并有一系列前瞻性洞见和部署.2015年十八届五中全会提出实施国家大数据战略 , 国务院发布《促进大数据发展行动纲要》 , 指出大数据是国家基础性战略资源, 旨在全面推进我国大数据发展和应用, 加快建设数据强国.2017年十九大报告进一步强调要推动互联网、大数据、人工智能和实体经济深度融合.通过国家需求、政策支持、产业结合以及企业研发等形式, 近些年来涌现出一大批重大规划和政产学研项目, 包括国家自然科学基金委员会 (NSFC) 于2015年9月启动的“大数据驱动的管理与决策研究”重大研究计划 (简称NSFC大数据重大研究计划, 参见附注) .\n大数据在给社会经济生活带来深刻变革的同时, 也对管理与决策研究带来一系列新的重要课题.从信息技术 (IT) 范畴来看, 可以从两个视角来认识大数据, 即大数据的“造”与“用”视角 (如图1所示) .","title":"管理决策情境下大数据驱动的研究和应用挑战"},{"content":" 点击上方图片购买课程    冉雅璇，李志强，刘佳妮，张逸石．大数据时代下社会科学研究方法的拓展 ——基于词嵌入技术的文本分析的应用.南开管理评论. https://kns.cnki.net/kcms/detail/12.1288.F.20210905.1337.002.html\n 大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用\n摘要：\n在大数据时代的背景下，基于大数据的分析处理技术为以“数据驱动”的社会科学研究创造了新的发 展契机。其中，词嵌入(Word Embeddings)技术借势大数据浪潮，以其高效的词表征能力和强大的迁移学习 能力在文本分析领域受到越来越多的关注。不同于传统的文本分析路径，词嵌入技术不仅实现了对非结构 化文本数据的表征，还保留了丰富的语义信息，可以实现对跨时间、跨文化文本中深层次文化信息的挖掘， 极大丰富了传统的社会科学实证的研究方法。文章总结了词嵌入技术的基本原理及特点，系统地梳理了词 嵌入技术的六大应用主题：社会偏见、概念联想、语义演变、组织关系、文本情感和个体决策机制。随后， 文章归纳了词嵌入技术的基本应用流程。词嵌入技术还面临文本数据的选择、中文文本的分词处理、单词 语义信息的表征层次三种挑战，文章归纳了相应的应对思路与方法。最后，基于词嵌入技术的强大适应能 力，未来研究可以进一步关注该技术在管理领域的应用前景，包括政策效应评估、用户推荐系统、品牌管理、企业关系管理、组织内部管理、中国传统智慧与管理问题六个方面。\n关键词： 词嵌入；自然语言处理；文本分析；社会科学；管理领域应用\n作者信息\n 冉雅璇，中南财经政法大学工商管理学院副教授、博士，研究方向为消费者行为 与大数据营销； 李志强，中南财经政法大学工商管理学院硕士研究生，研究方向为营销智能 与文本分析； 刘佳妮，中南财经政法大学工商管理学院硕士研究生，研究方向为营销模型与 因果推断； 张逸石，武汉理工大学管理学院教授、博士，研究方向为大数据营销与营销模型。  引言 作为人类开展文化交流和情感沟通的基本载体，语言承担了重要的信息交换功能。借助 于各类语言表达形式，人们将诸如知觉、思维、态度和情感等复杂的心理活动转化成特定的 语言。 而作为语言的典型载体之一，文本既能够在个体层面上反映人们的内心活动，也能 够在组织和社会层面上反映集体文化。 因此，从文本内容挖掘个体深层次的心理活动和 人类社会的文化沿革是社会科学的基本研究路径。\n长期以来，在社会科学尤其是管理学和心理学等领域，实证研究多以针对实验、问卷和 结构化的二手数据的量化分析为主导，而对于非结构化的文本材料(如访谈记录)仍以质性分 析为主。[5] 在大数据时代，“数据+行为+交叉学科”已成为社会科学发展的必然方向。而计 算社会科学的兴起则为我们理解人类行为、探讨社会现象提供了新的研究素材、视角和手段。[6] 随着互联网技术的飞速发展，人们在网络上发表大量包含思维、情感、观点的文本信息，这些井喷式爆发的文本为“以数据驱动”的社会科学研究提供了可及的信息来源。若能对之加 以利用，无疑将拓宽社会科学研究的方法。[7 - 9] 然而，社会科学领域的传统文本研究方法以 人工编码为主，其时间投入过大、成本较高、客观性相对较弱等不足极大地限制了文本数据 [10] 在实证研究中的应用。 所幸的是，以自然语言处理(Natural Language Processing; NLP)为核 心的计算机文本分析技术(Computerized Text Analysis)的发展为大数据文本在社会科学领域 中的应用带来了契机。 “词”作为文本的最小单元，是计算机进行文本分析的基础。在自然语言处理领域，“词” 主要以向量(vector)的形式表示。而词嵌入(Word Embeddings)技术，即是一种可以把高维词 向量映射进低维向量空间，以此来实现词义理解的计算机文本分析技术。相较于其他自然语 言技术，词嵌入技术不仅展现出了高效的学习能力，而且允许计算机从更高的意义单元(即 目标词的上下文)出发理解词义、刻画“词”之间的相对关系，因此逐渐成为了自然语言处理的重要工具，在管理学、心理学等社会科学领域取得了丰富的研究进展。相比于传统的以人工编码和词频统计为主导的文本分析方式，词嵌入的独特优势 在于：(1)借助计算机分析技术，可以在短时间内、以较低成本，实现对大规模文本数据的 高效处理；(2)在挖掘文本特征和理解文本内容时，更多地依赖文本自身的分布规律，具有较强的客观性，其背后“数据驱动”的分析逻辑也使这一技术在探索性研究中具有较大的应用优势；(3)面对跨时间、跨文化比较的研究话题、以及在挖掘社会学、行为学变量及变量关系等领域展现出广阔的应用前景。\n词嵌入技术已在社会科学领域得到了广泛的应用，主要包括：社会偏见 、概念联想[14] 、关系网络 和判断机制[16] 等六大主题，大量研究见诸 Nature、Science、Proceedings of theNational Academy of Sciences、Academy Management Journal、American Sociological Review、 Management Science 等国际期刊。反观国内的社会科学领域，词嵌入方法的应用价值还未得到足够重视和讨论。据此，本文通过介绍词嵌入技术的基本原理、梳理国外社会科学领域对词嵌入的应用情况，以期帮助国内社会科学研究者了解该技术独特的应用价值，推动词嵌入技术在大数据时代背景下对我国社会科学研究方法的丰富和推动。具体而言，本文：\n (1)梳理了词嵌入技术原理，以帮助学者深入了解词嵌入在文本分析方面的技术优势； (2)梳理了现有文献中社会科学研究者们利用这一技术的相关应用研究，展现了在面对实际问题时可以如何利用词嵌入技术进行实证分析，以帮助学者了解该技术的适用领域； (3)总结词嵌入技术的基本应用流程，提供方法指引； (4)归纳了词嵌入技术面临的三方面挑战 ——文本数据的选择、中文文本的分词处理、语义信息表征，并提出了相应的应对思路； (5)从政策效应 评估、用户推荐系统、品牌管理、企业关系管理、组织管理与中国传统智慧和管理问题这六个方面出发，探讨词嵌入技术在以管理为代表的社会科学研究中的应用潜力和价值，以期丰富大数据时代背景下我国的管理科学研究方法。  一、词嵌入技术的基本原理 不同于基于词频统计的文本分析方法，词嵌入技术的核心特征在于从文本的全局语义信息出发对“词”进行表征学习， 即利用大规模文本中“词”的上下文信息，将文本词汇映射至高维向量空间以实现词的向量化表示，使得词向量之间既保留着“词”在语义层面的关联，又满足向量所适用的代数运算性质。 在此基础上，通过度量词向量之间的几何关系(即“距 离”)便能够刻画“词”在现实语义中的关系。 进一步地，我们利用词与词之间这种可被量化的语义关系来探讨社会科学领域下的概念之间的相似性或相关性，并由此反映特定的社会文化和认知现象，乃至刻画社会、心理变量与其它行为变量间的相关关系。因此，词嵌入技术的应用主要包含两大步骤，即首先利用词嵌入模型从文本数据中获得对“词”的向量表征，再计算词向量距离进行相关性分析。\n1. “词”的向量表征 “词”的向量化表征是计算机进行文本分析的基础，也是词嵌入技术的本质属性。纵观计算机文本分析的历史，词向量的表征方法主要经历了以下两个发展阶段：第一个阶段是从词典出发、基于词频统计规则对“词”的离散型表征。例如，热向量编码(one-hot vector)通过建立基于目标文本(“猫很可爱，狗也很可爱”)的分词词典({“猫”: 0，“狗”: 1，“也”: 2，“很”: 3，“可爱”: 4})，将每个“词”都表示为一个向量，使其维度与词典长度相当，且每个元素取值为0 或 1(“猫” = (1, 0, 0, 0, 0)，“狗” = (0, 1, 0, 0, 0)，“也” = (0, 0, 1, 0, 0)，“很” = (0, 0, 0, 1, 0)，“可爱” = (0, 0, 0, 0, 1))。这一类词表征方法虽然简单直观，但是在面对大规模文本时，词典长度的激增易造成参数空间的“维度灾难”问题(Curse of Dimension)① 。并且，粗糙的信息表征思路忽视了“词”的频率、上下文以及“词”之间的关联，使得这一类词向量无法反映“词”的语义信息。为了提升词向量的表征质量，Deerwester 等[20] 主张从更高的文本意义单元理解文本词汇的含义。\n由此，分布式表征(distributional representation)[18] 成为了第二阶段的词表征方法。分布式假(distributional hypothesis)是分布式表征方法的理论支撑，也是词嵌入技术背后的核心逻辑基础——即上下文相似的“词”拥有相似的或相关的语义，它能够反映了人类的语言使用习惯，也符合人的现实认知逻辑。[16,18,21] 人们倾向于对具有相似或者相关特征的对象产生认知关联，体现在文本层面则是相近的语言表达或高度的共现频率，即相似的上下文语境。基于此，通过分析目标词与其上下文词汇之间的统计分布规律可以学习到目标词的众多文本信息，使得词表征结果囊括文本语境的特征。因此，分布式表征的思想被广泛应用于后续的语义学习中，成为了词嵌入技术的基本逻辑。\n其中，较为出色且经典的是 Mikolov 等人在 2013 年提出的 Word2Vec 模型，[18] 它标志 着 词 嵌 入 模 型 的 正 式 诞 生 。 Word2Vec 词 嵌 入 模 型 包 含 了 两 种 神 经 网 络 结 构 ——CBOW(Continues Bag-of-Words)和 SG(Skip-gram)。如图 1 所示，二者均由三个部分构 成——输入层(Input Layer)、输出层(Output Layer)和隐藏层(Hidden Layer)，且算法逻辑基本 一致。其中，CBOW 模型用于中心词 wi 的预测任务，SG 模型则利用中心词 wi 对其上下文 词汇进行推断。通过隐藏层的特征学习“机器”，即参数矩阵 wV∗N，将该中心词的上下文词 向量 xik(由热向量编码表示)转化为低维实值向量(即词向量表征结果)，最终输出中心词 wi 的概率分布。其中，参数矩阵 wV∗N 集合了“词”的 n 项关键特征维度，并且特征维数可自由 设置，例如，“n=300”表示提取目标词在 300 个维度层面的特征信息。在此模型中，目标词 的特征信息依赖于其与上下文词汇的共现模式，因而“词”的文本分布越相似，其对应的词向 量具有更加相近的特征。由于“猫”和“狗”在上述语境中具有相似的上下文环境，这两个词对应的词向量间也具有更加相近的空间距离(如，“猫” = (0.23, 0.17, 0.05)，“狗” = (0.25, 0.14, 0.07))。因此，Word2Vec 模型既可以通过特征的提取实现词向量的降维，还可以反映语义信息。\n 除了 Word2Vec 词嵌入模型外， Pennington 等 [23] 提出了同样具有高效学习能力的 GloVe(Global Vectors for Word Representation)学习框架，通过对词共现矩阵的矩阵分解，实 现对“词”的表征。此外，为了提升训练速度、适应海量文本学习，后续学者进一步提出了诸 多对于词的分布式表征的改进算法，包括：fastText 算法、 谷歌的 ELMo(Embedding from Language Models)语言模型[25] 和 BERT(Bidirectional Encoder Representation from Transform) 语言模型[26] 等。\n在将文本信息嵌入进每一个“词”之后，我们获得了“词”的向量表示，即在词向量空间中 的位置，而词与词之间的语义关联可以通过向量空间中点与点的位置距离来反映。词嵌入技 [27,28] 术下的向量具有两项重要的几何性质——“聚类”(clustering)和“并行”(parallel)。 其中，“聚 类”性质是指，现实语义相近的“词”在向量空间中的位置也相近。 例如， “挪威”与“瑞 典”的词向量更接近，而“意大利”和“德国”的词向量更接近。 而“并行”性质是指，向量空 间中的词向量之间满足基本的代数运算性质，且这种运算逻辑基本符合“词”的现实语义逻辑。[18] 例如，从语义逻辑来看，“国王(King)”和“王后(Queen)”的区别平行于“男人(Man)”和“女人 (Woman)”的区别，反映到对应词向量上即可以得到“King−Man+Woman=Queen”的代数形 式。 综合以上内容可知，词嵌入虽然聚焦在“词”这一最小的文本单位上，但是看到的是 丰富的全局文本语义信息在“词”上的投射和体现。这不仅与传统的、基于词频的文本分析方 法在逻辑上有着本质的区别，更能够为文本分析提供更深刻、更生动的洞察，构成了词嵌入 文本分析技术在大数据时代的社会科学领域相关研究中的独特应用优势。\n2. 词向量的距离计算 在词嵌入领域，词向量间的“距离”是词与词之间相关程度的度量指标，是分析概念之间 的相关性的基础。词嵌入技术将文本中的“词”映射为 N 维欧式空间中的“点”，“词”在空间中 的位置坐标即用其对应的 N 维向量来标识。由于点的位置反映了词语的语义，因而点与点 之间的空间距离即反映了词与词之间的语义相似性，对词向量进行特定的代数运算(如加减、 内积等)能够用以度量词与词之间、概念与概念之间乃至文档与文档之间的相关性。\n####（1）词与词之间的距离\n设在 n 维语义空间中，单词 A 和 B 分别对应词向量 vA=vA1,\u0026hellip;, vAn 和 vB=vB1,\u0026hellip;, vBn， vA 与 vB 之间的距离计算方式主要有以下两种：\n①余弦相似度(cosine similarity)： simvA,vB=vA∙vBvA∗vB=i=1nvAi×vBii=1nvAi2×i=1nvBi2。余弦相似度衡量词向量 vA 和 vB 之间的向量夹角的余弦值，其取值范围为[-1,1]。余弦相似度取值为 0，则代表单词 A 和 B 之间不存在语义关系；而取值越靠近 1，表明单词 A 和 B 之间具有正相关性；反之，取值越 靠近-1，则表明单词 A 和 B 之间具有负相关性。余弦相似度主要从词向量的方向上区分差 异，是高维向量空间下最为常用的一种度量方式。[28]\n②欧式距离(euclidean distance)：disvA,vB=2i=1nvAi−vBi2。欧式距离越小表明单词 A 和单词 B 在词向量空间中的位置越近，之间的语义关系越强；反之，欧式距离越大表明单 词 A 和 B 语义关系越弱。\n####（2）概念与概念之间的距离\n在词嵌入分析领域，一个概念是由一系列“相关词”组合而成，例如，“女性”概念可以通过“女人”、“女生”、“母亲”等名词来表达。而在对比不同属性概念(如“女性”vs.“男性”与“智慧”)之间的相关性时，需要逐个计算概念间的相对距离(“女性”与“智慧”的距离 vs.“男性”与“智慧”的距离)。Garg 等[13] 、Caliskan 等[17] 分别构建了以下两种相对距离的计算方法，并为众多后续研究所采用：\n①相对范数差函数(relative norm distance)：\nvm∈Mvm−vA−vm−vB\n该函数用于衡量两项目标词概念与某一项特征概念的相对距离。其中，M 代表特征概念(如“智慧”)，vm 为所属概念的相关词向量(如“聪明”)；vA 和 vB 分别代表两类目标词向量(如“男性”vs.“女性”)。该函数的含义为：在“男性”和“女性”两类群体中，哪一类群体与“智慧”这一概念更相关。若函数值为正，则代表“女性”与“智慧”更相近；若函数值为负，则代表“男性”与“智慧”更相近；若函数值靠近 0，则表明“智慧”不存在明显的性别偏向。\n②词嵌入相关性检验 (Word Embeddings Association Test; WEAT)：\ns(X,Y,A,B)=vx∈Xs(vx,A,B)−vy∈Ys(vy,A,B)\ns(vw,A,B)=meanva∈Acos(vw,va)−meanvb∈Bcos(vw,vb)\n该框架用于衡量两组目标词 X,Y(Target Words，如“男性”vs.“女性”)与两组属性词 A,B(Attribute Words，如“事业”vs.“家庭”)在语义上的相对距离差异，其中 vw 为所属概念的相关词向量(如在描述“男性”概念时，人们往往会使用“男生”、“父亲”、“男人”等词语)。s(vw,A,B)表示单词 vw 与两类属性词 A 和 B 的相对距离，正值代表其与 A 属性距离更近、语义更相关，反之则反；而 s(X,Y,A,B)则衡量了两项目标词 X,Y 和两项属性词 A,B 相对距离的差异，即在 “ 男性 ” 和 “ 女性 ” 两类群体中， 哪一类群体与 “ 事业 ” 或 “ 家庭 ” 的文化概念更相关。 若s(X,Y,A,B)为正值，则表明相比于“女性”，“男性”与“事业”的语义相关性更高，反之则表明“女性”与“事业”的语义相关性更高。此外，WEAT 框架还提供了相应结果的显著性检验方式以及效应量指标。\n（3）文档与文档之间的距离——词移距离(Word Mover’s Distance) minT≥0i,j=1nTij∙ci,j, s.t. jnTij=di , ∀iϵ1,\u0026hellip;,n\n除了概念间的相关性分析，我们可以通过文档间的相似性来探讨如文本主题、个体及组 织之间的相关性问题，Kusner 等[31] 提出“词移距离”这一计算方法能够实现文档间的相似 性度量。词移距离即一个向量空间移动到另一向量空间所需的最小距离，通过对两个向量语 义空间中所有词向量间的欧式距离进行加权求和，以此来衡量两个文本间的相似性，如上式 所示。其中，c(i, j)为词向量间的欧式距离；Tij 为词向量之间的权重(由 TF-IDF② 计算加权值)。 函数值越大代表两个文本的相关程度越低，反之越高。\n二、词嵌入技术的优势 传统的社会科学研究通常需要借助科学实验、社会调查和人工编码等方法，依赖于专家 学者的领域知识和实践直觉，存在主观性较强、耗时、耗资源的缺点。 另外，传统的社 会科学研究局限于小样本数据和历史数据的不足，通常关注当下的、有限范围的社会情景， 难以进行跨时间、跨文化的分析。 反观，以词嵌入为代表的计算机化的文本分析(1)可处 理大文本数据，不仅极大地节省人力和时间投入，而且可以拓宽现有社会科学研究的素材； (2)能够利用现有数据和先验知识改进学习算法，可拓展性和重复性强；(3)能依据文本内在 的分布规律和领域知识，挖掘人们内隐层面的认知信息，结果更加客 观真实；(4)能够从大 规模文本中挖掘代表整体社会的认知，尤其擅长进行跨时间、跨文化的文本研究，结论不仅 具有广泛的样本代表性，而且可以展示相关文化概念、思想观念等研究对象的纵向历时演化。 这些优点极大地丰富了社会科学的研究方法，拓展了社会科学的研究视野。传统的社会科学 研究方法与词嵌入技术的具体区别见表 1。\n  三、词嵌入技术在社会科学领域的应用话题 基于词嵌入技术的社会科学研究路径 数据来源广泛，能够熟练处理包括会议记录、网络文本、 新闻书籍等非结构化的文本数据；在处理大规模、跨文化、 跨时间的文本数据时有极大的优势 允许研究者直接挖掘文本所反映的内隐社会认知；研究较 多从社会、集体层面的文本范围着手，结论具有较强的代 表性和普适性 针对大数据文本的无监督训练、时间人力投入小；客观性 较强；结论的可复现性较强\n1. 社会偏见/刻板印象 文本语言能够反映人类对世界的认知和态度，基于词嵌入的文本分析方法可以有效地挖 掘社会偏见和刻板印象。Garg 等[13] 采用词嵌入技术分析了来自纽约时报、谷歌新闻、谷歌 图书及美国历史文本库(Corpus of Historical American English; COHA③ )的文本数据，揭示了 1900～1990 年间美国社会在性别和种族两大议题上的刻板印象及其历史变化。Garg 等[13] 首 先以十年为单位将文本数据分为 9 份，并针对每一份文本数据使用词嵌入技术，以获得“词” 的向量表征。然后，他们整理了相应概念的单词列表，其中包括：与“性别”维度相关的“男 性”词汇[如 he]和“女性”词汇[如 she]；“白人”词汇[如 Harris]、“亚裔”词汇[如 Huang]和“拉丁 裔”词汇[如 Ruiz]。进一步，他们构建了相对范数差(relative norm difference)函数，用以计算 一组词向量(如“男性”vs.“女性”)与目标词(如专业工作)的相对距离，以此度量社会刻板印象 的程度。Garg 等[13] 发现近百年间在美国社会的认知中始终存在着较为明显的性别偏见和种 族偏见。例如，“女性”往往和护士、保洁、舞者、秘书等职业联系更为紧密，而与工程师、 木匠、技术人员等职业更为疏远。此外，亚裔姓名和教授、科学家、化学家和工程师等学术 职位联系更紧密，白人姓名往往与警察、统计学家、摄影家等职位联系更紧密。通过纵向分 析概念间距离随时间推移的动态演化，Garg 等[13] 发现，这两类刻板印象随着时间呈减弱势 态，结合相关社会科学理论和历史事件，他们进一步提出 60、70 年代的美国民权运动是改 善刻板印象的关键事件，而基于词嵌入的概念间相对距离也如实地反映了美国民权运动对于 国民性别、种族认知的深刻影响。\n作为文化的产物之一，歌曲也能反映社会认知中的偏见/刻板印象。Boghrati 和 Berger[12] 利用 Word2Vec 词嵌入技术，挖掘了自 1965 年至 2018 年的近 60 年间美国公告榜(Billboard) 上流行歌曲歌词文本中所隐含的性别偏见。一方面，他们在流行音乐中发现了显著的“厌女 症(misogyny)”刻板印象(如图 2)，相比“男性”词汇，人们更少将“女性”词汇和“能力/ 成功/热情”等具有积极属性的词汇相关联。但另一方面，歌曲中所反映的性别偏见随时间的推移呈现逐渐减弱的趋势。进一步地，Boghrati 和 Berger[12] 通过控制歌曲创作者的性别因 素，发现男性作词人是影响歌曲“厌女症”现象变化的关键因素。\n 为了检测词嵌入技术是否能够有效挖掘文本中的社会偏见，Caliskan 等[17] 对比了词嵌入 模型和内隐联想测试(Implicit Association Test; IAT)④ ——一种社会科学领域中最常用的社会 偏见/刻板印象等内隐认知的测量方法——的差异。虽然 IAT 能够有效捕捉个体的社会偏见 的内隐认知，但是该方法需要严格的实验环境、耗时较长且测量样本往往受到时间和空间的 局限。Caliskan 等[17] 利用 GloVe 词嵌入模型构建了 WEAT(Word Embedding Association Test) 分析框架，并利用这一框架研究了 8 项内隐认知，如“科学-男性”和“艺术-女性”，并将其与 基于 IAT 的研究结果进行了对比。[17] 他们的研究表明，基于词嵌入技术的结论与基于 IAT 的结论具有高度且稳定的一致性。Caliskan 等[17] 进一步指出，在未来的内隐态度研究中，词 嵌入技术不仅能够作为 IAT 测量方法的补充，更能够在样本代表性、研究成本和研究视野 等方面展现出 IAT 所不具备的独特优势。\n除了探讨社会偏见与刻板印象的跨时特征之外，词嵌入技术还适用于跨文化的对比分析。 Defranza 等 [33] 利用词嵌入技术探讨了不同地域在性别偏见方面的程度差异。 他们利用 fastText 模型和 WEAT 分析框架， 从 49 类不同语种的文本中分别挖掘不同社会文化下的 性别偏见现象。 结果显示，当一个地区的性别语言(Gendered language)——即语言中更加 区分词汇的性别属性和使用者的性别身份(如泰语、芬兰语)更强时，该地区的性别偏见更加 明显(图 3)，具体表现为男性与积极属性词汇的关联性更强，而女性与积极属性的联系更弱。 这一结果在一定程度上验证了萨皮尔-沃夫假说(Sapir-Whorf hypothesis)，即语言能够塑造人 的思维和认知。\nIAT 是基于生理的神经网络模型，以被试的“反应时长”为指标，用于测量被试对特定概念间的相关性的 潜在认知。每一个参与 IAT 的被试都会被分配若干组的分类任务，并被要求要以尽可能快的速度完成它们。 如果该分类任务符合被试的内隐态度，则被试将会表现出更快的反应速度；反之则会更慢。通过对比被试 在面对不同任务时的反应时长的差异，研究者即可探知到个体的内隐态度。\n 2. 文化认知 历史无法复刻，但承载历史痕迹的文本资料能够帮助人们窥探特定时代背景下的文化内 涵。Kozlowski 等[28] 利用词嵌入技术分析了自 1900～1999 年来 100 余年间公开发表的书籍， 探讨了 20 世纪美国社会对七大等级文化(财富、道德、职业、性别、教育、品味、身份地位) 的共识和演变规律。首先，作者利用 Word2Vec 模型，构建了一系列标度等级文化维度(如“贫 穷-富有”、“道德-不道德”、“男性-女性”等)的词向量空间(如“性别-财富”、“职业-道德”、“品 味-职业”、“教育-地位”等)。进一步，作者将一系列目标词分别映射进相应的等级维度空间， 以此标度这些目标词的多元等级属性。例如，在被映射进如图 4 所展示的“性别—财富”等级 维度空间后，“volleyball(排球运动)”一词表现出更靠近“feminine(女性气质)”和“rich(富有)”的 等级特征。此外，标度不同等级维度的向量之间的夹角也具有一定的社会文化含义。例如， “教育”与“道德”和“品味”的相关性较强且保持历时的稳定性，但与“职业”这一维度的相关性 相对较弱，这说明教育水平的提升能够提升人的修养和品味，但对职位状态和等级(如“失业” 和“就业”)的影响较小。Kozlowski 等[28] 的研究结果表明，词向量不仅可以反映特定概念间的 语义关联和相互作用，还能够用于探讨多元文化维度之间的语义结构，从而推动实现更高层 次构念的表征。\n 作为文化概念的关键形式，社会认知(social cognition)是人们对各种社会刺激的综合加工 过程， 是人们的社会动机系统和社会情感系统形成变化的基础 。 社会认知 包括社会信念 (social belief)和社会态度(social attitude)两部分。而根据内隐—外显双系统理论， 社会认知 可进一步分为外显社会认知(explicit social cognition)和内隐社会认知(implicit social cognition) 两类，前者强调个体可以通过自省的方式(如问卷法)报告的社会认知，后者则描述个体无法 内省的、潜意识层面的社会认知。然而，受限于现有对内隐认知的挖掘手段，有关内隐信念 (Implicit belief，如“亚洲人很聪明”)和内隐态度(Implicit attitude，如“我喜欢亚洲人”)的关系，已有研究要么将其混为一谈，要么将其作为互不干涉的独立构念。为了厘清该问题，Kurdi 等[14] 利用基于预训练的 fastText 词嵌入技术，分析了内隐态度和内隐信念的关联，并对比其 与外显态度和外显信念的差异。具体而言，基于被试自我报告的实验结果显示，个体的外显 态度与外显信念存在方向上的不一致性，例如，亚裔群体常被白人给予负面的评价(外显态 度)，但在智商、能力方面被认为有突出优势(外显信念)；而基于词嵌入技术的分析结果则表 明内隐态度与内隐信念具有一致性，内隐态度驱使内隐信念的产生。[14 ] 例如，白人群体有 较高的自我评价(内隐态度)，也认为本群体的智商高于亚裔群体(内隐信念)。另外，Kurdi 等[14] 发现人们对同一类属性词的认知也存在差异，例如，人们倾向于认为“book-smart(有学 问的)”优于“street-smart(生存力强的)”。综合可知，词嵌入技术可以作为挖掘文化概念认知以 及社会认知的有效工具。\n3. 语义内涵演变 语言的涵义会随着时代发生改变，而词嵌入技术的一大突出优势即表现为处理跨时段的 大文本数据。文本语言的运用具有系统规律性，[35] 词嵌入模型训练生成的词向量能够有效 表征词的语义信息，通过针对来自不同历史时段的文本训练词嵌入模，有助于学者在时间维 度上分析词义演变。Hamilton 等[36] 通过测量目标词的向量表示的时间位移值，来描述历史 文本中高频词汇与多义词汇的词义历时变化。例如，如图 5 所示，“gay”作为一个多义词， 在 1900 年代的文本中和“cheerful(开心)”和“frolicsome(玩闹)”词义更接近，而到 1990 年代则 与“homosexual(同性恋)”、“lesbian(女性同性恋)”等更接近。进一步，Hamilton 等[36] 依据词嵌 入技术的分析结果，提出了两条语义演化法则：(1)一致性，高频词汇会保持词义相对一致 的历时演化规律；(2)新颖性，多义词汇的语义演化会更加快速。\n 除了对普遍意义上的词汇含义的演变规律进行探讨，某些具体词汇的演化情况同样引起 了学者们的关注，尤其是那些能反映特定文化背景或时代发展的词汇。 Rodman 等[11] 基于 1855～2016 年间的纽约时报、路透社报道、美联社报道三大新闻文本集，挖掘并追踪了美 国一个多世纪以来围绕“平等”一词的词义演变，其中包含了使用环境、指代对象等。他们发 现，在上世纪 50 年代之前，即美国民权运动前，“平等”的词义与“社会”话题相关的词汇的 关联度整体较高，但随着历史发展呈现减弱趋势，这一结果与美国民权运动前普遍存在的社 会不公平现象相符合(如种族歧视)。而自上世纪 70 年代，即民权运动基本结束以来，“社会” 与“经济”、“教育”等概念下的词汇的关联程度不断增强，反映了本世纪以来美国社会对“教 育公平”，“经济公平”等热门话题的高度关注。 可见，基于词嵌入的文本分析能够敏锐地 捕捉到社会文化演变的信息线索，并能为社会、文化等领域的运动发展提供预示。\n4. 文本情感分析 文本信息不仅包含词义，还表达情感。现有部分词嵌入模型在关注语义语法层面的表征 的同时，还进一步关注了词的情感信息，尤其是某些单词具有相似的上下文环境但所含的情 感态度截然相反 ( 如 “good” 和 “bad”) 。 例如， Tang 等 [37] 提出了 情感嵌入模型 (Sentiment Embeddings)，该模型不仅可以如词嵌入模型一样反映词义信息，还能识别词所包含的情感 信息，进而可以对文本(如在线评论)中的情感信息做出推断。\n情感的丰富性和语言的灵活性使得单词在不同文本环境下会呈现出差异化的情感特征。 例如，“I’m gonna put something offensive to some people.”中的“offensive(冒犯)”一词在该句话 中带有消极负面的情绪；而“#FSU offensive coordinator Sanders coached for Tennessee 1st [37] #BCS title game.”中的“offensive(矛盾)”一词则不含明显的情感信息。 Xiang 和 Zhou[38] 藉此 指出，在推断词的情感信息时加入对文本 主题(topic)的考量将有效提高情感推断的准确性。 Ren 等[39] 基于 Word2Vec 词嵌入模型，结合主题模型(Latent Dirichlet Allocation; LDA)的方法， 提出了主题增强的词嵌入模型(Topic-Enhanced Word Embeddings; TEWE)。作者使用支持向 量机(Support Vector Machine; SVM)作为文本情感分类器，发现 TEWE 模型在文本情感分类 任务有突出表现。 例如，该模型能更有效地区分含有负面情感态度的词汇(如 insane)与正 面情感词汇(如 sane)的差异。在此基础上，Xiong 等[40] 进一步考虑了文本情感信息的多元化 特征 ， 构建了多元层次情感词嵌入模型 (Multi-level Sentiment-enriched Word Embeddings; MSWE)。他们发现，在标注“积极[#happy; :-)]—消极[#angry; :-(]”的情感标签任务中，MSWE 情感嵌入模型能够实现 85.75%的分类水平，表明基于词的情感表征能够更有效地挖掘文本 背后的情感。\n5. 组织关系分析 词嵌入技术在挖掘社会内隐认知方面展现出强大的效力，因而词嵌入技术可用于挖掘不 同组织在价值观和意识形态层面的关联，以此作为组织关系的推断依据。在此思路基础上， Spirling 和 Rodriguez[41] 采用 GloVe 和 Word2Vec 的词嵌入模型，分析了美国共和党和民主党 两大政党在其各自的公开发言稿中对部分政治议题的所表达的态度。例如，对于“堕胎”议题， 两政党的理解存在较大争议：民主党认为“堕胎”是一种自愿选择，而共和党认为“堕胎”与“绝 育”、“公平”的话题相关；对于“税收”议题，两政党的理解则存在更多共识。由此可见，词 嵌入技术不仅可以帮助我们了解政党组织在哪些政治议题上存在冲突，还可进一步衡量不同 党派的政治关系。\nRheault 和 Cochrane[42] 分析了英国、加拿大和美国 20 世纪以来的议会记录文本，并依 据政党派别关系构建了“党派嵌入”(Party Embeddings)模型。学者利用词嵌入模型量化了不同 党派在不同年代的议会观点中与特定“意识形态”维度(如自由 vs.保守、北部 vs.南部)的相关 性，从而对比不同党派组织的意识形态差异。从整体上看，美国民主党的意识形态更靠近自 由派思想(如“民权”、“种族”、“枪支管控”)，而美国共和党的意识形态更具保守派和南部 [42] 州色彩(如“官僚”、“果农”、“烟草”)，且两党的意识形态差异随着时间不断扩大。 同样地， 对于加拿大，新民主党派与联盟党在意识形态上的政治冲突最为严重，魁北克政团与联邦主 [42] 义政团在事关“联盟”的政治议题上观点不同。 Pomeroy 等[15] 利用 GloVe 词嵌入模型分析了 各个国家在联合国论坛的公开演讲文本，并使用词移距离(Word Mover’s Distance)来量化国 家讲演文本间的总体相似性，以此来反映国家立场及偏好的相似性。 作者发现，基于词嵌入技术的分析结果能够很好地反映国家间的政治关系。例如，虽然土耳其和希腊两国在投 票议程中表现出态度相似性(即一致的国家关系)，但实则两国在当年发生了边境军事冲突， 而这一冲突能从两国的联合国讲演文本中捕捉到线索。本研究指出，有关词嵌入在主体网络 关系的应用集中于党派关系和国际关系的研究，未来研究还可以考虑分析其他情景下的主体 关系，如社交网络关系、品牌竞争关系、组织内部关系等。\n6. 个体的判断与决策心理 决策结果和决策信息线索之间具有表征关系，因而词嵌入技术能够通过挖掘概念间的内 在关联，在一定程度上揭示个体在决策任务中的思维过程和决策依据。Bhatia[16] 在自然语言 处理的框架下，验证了以往决策研究中的相关性判断机制，即人们在进行判断性任务(如：“A 多大可能属于 B?”)时，会出于直觉性心理去思考问题与选项间的相关性或相似性，并以此 作为判断依据。具体而言，作者综合 Word2Vec、CCA、GloVe 几项词嵌入技术，基于谷歌 新闻和 GigaWord 文本库⑤ 训练生成词向量。进一步，作者通过对句子中每个“词”的向量求 取平均值，分别对判断问题(如“在以下的两座德国城市中，哪一个人口最多？”)与选项(如“汉 堡”和“科隆”)实现表征。作者依据两者间的语义相关性来预测答案选项的概率分布，并据此 模拟一般决策者的选择。例如，针对上述问题，基于词嵌入模型的预测结果为“汉堡”，与被 试的选择高度相似。此外，词嵌入模型在其它测试任务(如经典的“Linda 问题”⑥ )下也预测了 [16] 决策者的选择倾向， 这一现象与代表性启发理论(representativeness heuristic)——一种依赖 人的相关性感知进行识别和判断的心理决策过程——相符。这说明词嵌入模型在很大程度上 能够解释人的相关性判断机制， 甚至对 其 中常见的认知 偏差 ， 如 合取谬误 (conjunction fallacy)⑦ 、基础概率忽略(base rate neglect)⑧ 也能够予以反映。[16] 实证结果表明，词嵌入技术 为我们理解人的直觉性判断心理提供了信息参考，能够帮助实现相对精准的决策预测。\n另外，个体的风险感知和风险判断也是个体决策研究中的重要组成部分。Bhatia[43] 利用 词嵌入技术探讨了人们面对各类风险源时的风险评估机制。作者通过基于谷歌新闻文本的预 训练 Word2Vec 模型，量化了不同风险源(技术性风险源：“新兴技术”、“能源”等；活动性风 险源：“运动”、“职业”等)与相关概念的语义联系，进一步 揭示了人们进行风险评估时的知 识表征内容(即内隐联想)。例如，当评估药物风险时，人们在潜意识里会联想到“毒品(drug)”、 “无序(disorder)”等具有高风险含义的概念(如图 6a 的词云图)；而评估运动风险时，人们容易 联想到“碰撞(crash)”、“斗争(combat)”等风险事件(如图 6b)。作者弥补了以往有关风险评估 的研究方法中难以预测样本外数据(如新型风险源)的缺陷，展现了词嵌入技术在理解和预测 个体判断决策机制中的应用优势。\n     四、词嵌入分析的基本流程 词向量的表征学习存在两条路径：一是采用本地化的训练模型(local-trained model)。二 是使用预训练的词嵌入模型(pre-trained model)。针对第一条路径，通常需要经历如下预处理 和模型训练步骤(见图 7)：(1)选择合适的语料库(corpus)。语料库是用于训练词嵌入模型的文 本集，“词”的表征效果以及后续的相关性分析依赖于训练文本的规模、质量及其所处的语言 环境。对文本语料的选择需严格依研究者的具体问题而定，使研究主题/情景与文本主题/情 景相对应，[41] 进而推动单词间的语义关系聚焦于特定的领域和视角上。例如，以探讨社会 文化现象的研究可以选择新闻时报、社交媒体动态等社会文本作为主要语料；探讨消费者心 理及行为的研究则可以将线上评论等商业沟通文本作为语料；关注组织行为的研究则以会议 记录、公司年报等组织内部的官方文本为主。文本数据的获取主要有以下三种途径：第一， 国内外由政府、企业及其他组织或个人提供的公开的、已初步整理规范的文本数据库。如， 人民日报文本集(1946 年至今) ⑬ 、谷歌图书(包含 1500 年～2012 年期间公开出版的书籍，约 占人类历史所有出版书目总数的 6%) ⑭ 、亚马逊评论集(包含 1996 年～2018 年亚马逊平台用 户对近 30 个产品品类的超过 2 亿条评论) ⑮ 、维基百科数据库(包含来自 400 多万篇文章的近 19 亿个单词的维基百科全文) ⑯ 等。第二，借助“爬虫”程序收集文本数据。根据研究需要， 研究者可以在特定的网站上爬取一定的文本。例如，众筹平台的项目申报文本材料、微博平 台的历时推文、论坛用户间的互动文本、企业员工在 Glassdoor ⑰ 等职业资讯网的日志评论等 文本。第三，纸质版文本转换成电子文本。必要时，研究者还可以将纸质文本录入为电子文 本形式，如员工日记、会议记录、线下心理咨询文稿等。(2)语料预处理(pre-processing)。常 规的预处理流程包括：删除与文本内容无关的标点符号、特殊字符(如：数字，空格符，分行符，“©”)和其它停用词(如：代词、连词)。此外，中文文本的预处理中还需要对文本分词 (segmentation)，从而将语料处理成由“词”这一最小的文本分析单位所构成的列表(如将语 句“我很开心”分词为“我”/“很”/“开心”)。现今常用的中文分词工具有“Jieba”、“HanLP”、 “THULAC”、“TopWORDS”等。 (3)模型训练。在预处理后的语料文本中训练词嵌入模 型，最终实现文本词的向量表征。当前主流的词嵌入模型有 Word2Vec、GloVe、fastText 等， 而在 Python 环境下，大量与自然语言处理相关的成熟的开源工具包(如，Gensim)中提供了 相关的算法模块，并允许研究者对相关参数(词向量的维度、单词上下文的观测窗口的大小 等)进行调整。\n此外，基于词嵌入模型的迁移学习能力，也可直接使用预训练的词嵌入模型(如，谷歌 的 GloVe 和 BERT )，从而获得基于其它大型语料库充分训练得到的词向量表示，并根 据自身的文本特征对模型或表征结果进行微调(finetune)。但无论采用何种词向量表征路径， 在正式的词向量相关性分析之前，都有必要对词嵌入模型的训练结果，即词向量的表征效度进行评估。常见的评估方式是通过与人工标注的词相关性评分进行对比，检验二者是否一致， 以此判断词嵌入模型是否能够捕捉一般化的语义关系。目前，已有大量成熟的针对“词对” (word pairs)相似性的人工标注的测试集，如 MEN-3000(英文)[47] 、Wordsim240/297(中文)[4 8 ] 。\n词嵌入模型训练完成后，可以进一步依据研究目的进行词向量间的“距离”的几何计算， 主要包括词列表构建、相关性计算、有效性检验和稳健性检验四个步骤 。(1)构建词列表。 在词嵌入的文本分析中，特定概念通常由一系列近义词或同属性词列表构成。例如，在 Garg 等[13] 的研究中，他们构建的“男性”概念词列表包括“male”、“men”、“father”、“brother”等 20 个单词。(2)计算词向量的相关性。针对具体研究问题，衡量“词”或者概念之间的语义关联(即 词向量间的“距离”)，主要包括余弦相似度(cosine similarity)、欧式距离(euclidean distance)两 种基本的计算方法(详见上文第一部分内容)。(3)有效性检验。针对词嵌入的分析结果，我们 有必要进行进一步的检验，以保证结论的可靠性以及方法的有效性。具体包括两类检验方法： ①与对应年代的相关社会调查数据 (如，社会职业性别占比调查、社会偏见大调查 ) [13,49-51] 进行比对，以检验词与词的相关程度、变化是否与相应的指标数据、社会事件相吻合； ②与其它研究方法进行对比，如内隐联想测试(IAT)、主题模型(LDA)，以检验词嵌入模型能 否重复已有研究结果。[11,14] (4)稳健性检验。作为一种无监督的探索性分析方法，词嵌入的 分析结果会因文本、模型等因素的不同而产生差异。通过变换词嵌入模型、参数、文本语料 或相关性计算方法，以检验研究结果的一致性。稳健性程度越高则代表基于词嵌入分析方法 的结论可靠性越高。\n 五、词嵌入分析方法的挑战与应对 作为一种计算机化的文本分析方法，词嵌入技术在文本数据的预处理、文本表征效果等 方面有一定的条件限制，因而该技术面临着以下几个方面的挑战。学界一直致力于词嵌入分 析方法的完善，并就下述问题提出了针对性的应对方案和解决思路，详见表 3。\n(1)词嵌入技术的分析效果依赖于文本数据的体量、质量和语言环境。 ①通常来说，文 本数据规模越大越有利于词嵌入学习和提取更充分的语义信息，[11] 而体量较小的文本，可 能会限制词嵌入模型的训练效果，难以将文本的全局语义信息嵌入到单词上。[11,18] 对此， Rodman[11] 提出了两种解决思路：一是采用预训练的词嵌入模型。预训练词向量通常基于超 大型文本数据训练而来， 使模型具备较好且广泛的语义表征能力。 二是采取“自举法” (Bootstrapping)⑱ 。通过该方法生成规模更大的文本数据集，并针对不同的抽样过程生成不同 的词向量结果，随后求取其平均值以增强词向量的稳定性和有效性。\n②除此以外，文本语料的选择应考虑到其依存的文本情景、社会文化环境等背景信息。 文本所依存的语言环境、文化观念和观点立场在很大程度上影响着文本词汇的分布方式(即 单词上下文)，因此利用不同文化背景的文本训练词嵌入模型，可能会产生不同的研究结论。 正如 Spirling 和 Rodriguez[41] 对美国国会议事文本的分析所示，不同的党派组织对同一政治 议题的理解存在“冲突”(如，“堕胎(abortion)” \u0026amp; “福利(welfare)”)。再如，在研究组织员工的 幸福观时，企业的官方书面文本(更具指导性和应然性)以及员工的口述文本(更具真实性)可 能潜藏不同的结论。然而，如何权衡和选择合适的语料、如何处理不同文本下的结论不一致 等问题仍缺乏统一的解决标准。就学者的普遍实践来看，文本选择需要“有的放矢”，即依据 研究问题对文本的背景信息(如，表达视角、代表阶层、文本性质 )进行必要地分析和筛选， 在扩大语料库规模和类型的同时也要尽可能使之聚焦在同一视角和语境上。[11,28,41]\n(2)“词”是词嵌入分析的基本单位，中文文本的分析需要预先进行“分词”处理。对于某些 特定领域的文本而言，如专业学术文章、古代汉语文本等，由于其文本内容及结构与标准的 训练语料存在较大差异，[46] 使得文本分词的过程存在一定困难。近年来，大量学者就优化 文本预处理技术展开了探讨，例如，Deng 等[46] 开发了“TopWORDS”分词软件，在小型训练 文本中实现了部分低频词的精确识别，亦能处理含有大量未知专业语汇的文本，该方法的有 效性在古汉语文本的分词任务上得到了进一步验证。在突破文本预处理中的困难后，可以应 用词嵌入的实践流程对文言文展开分析，探讨古代社会文背景下的社会科学课题，如围绕权 力、阶层、性别、宗教等的社会规范以及其它社会价值观念的演变。\n(3)在由“词”构成的文本结构中，词与词之间的组合搭配能够创造出更加丰富且抽象的 语义信息，这一类信息难以通过词向量间简单的结构化公式运算来体现。 词嵌入技术对 文本中的“词”展开语义分析，所建构的是词与词之间的关联，侧重于表达“单词级别”的语义 信息。因此，基于词向量的简单几何计算难以直接反映 “单词级别”以外的语义信息，[18,5 2 ] 如词组概念、段落含义、文本主题等。学界也在积极探索“组合式分布语义”的实现方法，即 如何利用词表征的组合实现对短语、段落和文档的有效表示。[18,5 3 ] 在自然语言处理领域，以 LDA 为代表的主题模型从整个语言系统分布中学习“词”的含义，侧重于建模词与文档的关 系，体现的是词的主题信息。相比于词嵌入模型下的单词之间的关联，包含主题特征的词向 量之间能够反映相对丰富的语义关联。 鉴于词嵌入模型具有较强的扩展能力，大量学者针对词嵌入模型的算法和训练过程进行 优化，即将有关文本整体特征的信息或其他的领域知识融入词嵌入的学习过程。例如，Liu 等[54] 基于 Word2Vec 词嵌入模型，并结合 LDA 算法，使词向量包含更多的主题特征，如 “apple(苹果)”在电子产品的背景信息下表示“苹果公司”，而在食品背景信息下表示“苹果”这 类水果。此外，词嵌入技术的基本原理在文本表征领域也得到了长足发展。例如， Le 和 Mikolov[55] 将 Word2Vec(skip-gram)的算法运用至句子和短文本的表征学习；词嵌入模型界的 新秀——BERT 模型，能够有效表征句子等“单词级别”以上的文本语义概念，推动了对更 高文本单位的关系层面的理解。\n(4)传统的社会科学研究方法具备词嵌入技术所无法提供的分析视角，尤其是相对于“文 本细读法(close reading)”，词嵌入这一计算机化的分析方法难以捕捉更加细微的语义差别。 [12] 基于上下文分布来表示单词的方法也难以学习单词的细粒度语义， 例如，同义词、反 义词、多义词、上下位词等词义的区分和表征还有待优化。据此，相关学者提出利用有监督 的学习过程，在词嵌入的算法层面引入某些先验知识库(如，描述词义关联信息的“WordNet” 语义网[57 ] )，帮助模型更好地捕捉单词多元的属性信息，从而有助于避免词嵌入表征词义的 逻辑偏离实践认知。[19]\n 六、词嵌入技术在管理学领域的应用展望 1. 政策效应评估 已有政策效应评估主要采用定量分析工具(如，双差分法)分析显性的数据指标(如，人均收入)，而对于政策的隐式效应(如，社会心理、文化认知)的判断还较为局限。本研究提出， 词嵌入技术可以结合因果推断，[58 ] 分析公共政策的有效性。具体而言，词嵌入技术可以研 究：①政策对社会文化认知的影响，如“2020 年禁塑令”实施对公民“环保”、“健康”等概念的 认知的影响；“2021 年惠游湖北”政策对武汉城市污名化的缓释作用等。②衡量政策创新性， 探讨政策带来的创新性影响。例如，Perren 和 Sapsed[59 ] 分析了英国在过去近 50 年间的议会 记录，发现在其实施“国家创新计划”之后，“创新”这一概念在社会文本的出现频率显著上升， 有关科技领域的词汇与“创新”一词的共现频率显著增加。未来研究可以利用词嵌入技术来挖 掘“创新”与具体领域，例如，“知识”、“科技”、“法律”的相关度，并比对其在政策实施节点 前后的变化。\n2. 用户推荐系统 以往的线上推荐系统多基于用户行为数据来判断个体偏好， 以矩阵分解 (Matrix Factorization)和协同过滤(Collaborative Filtering)为代表的技术被广泛应用于线上推荐场景。 然而相比上述几项技术，词嵌入能实现更高水平的用户偏好预测， [ 60 , 61 ] 这意味着文本数据 将是我们了解用户的重要渠道。现如今，电商评论和社交媒体的动态文本记录了大量消费者 认知、态度及其它表现个人特征的信息。利用词嵌入技术，平台能够挖掘用户对特定领域话 题的偏好、对产品的偏好和评价，以及用户之间的相似特征等。例如，通过计算“产品/品牌” 与积极、消极属性词汇的相对“距离”，[13] 来衡量个体用户的内隐偏好和真实的消费感受，并 据此展开产品推荐和广告投放。\n3. 数“智”品牌管理 鉴于词嵌入技术在挖掘社会内隐认知上的突出表现，因而能用于刻画企业—消费者关系， 辅助企业的品牌管理战略。 借助词嵌入的分析方法， 企业可以透过用户生成文本 (user-generated content)(如，社交媒体、网络论坛和线上评论)纵观消费者对企业品牌形象的 态度、评价，也可以用于挖掘影响消费者满意度的关键因素和市场潜在需求。[8, 62 ] 作为品牌 形象的内核，企业品牌个性(brand personality)及其历时演变同样也可以使用词嵌入的分析方 法对其进行挖掘，[12] 从不同时期的社会文本中测量相应的语义关系，即品牌与个性维度间 的相关性(如，品牌与“真诚型”vs.“粗犷型”)。在跨文化视角下，词嵌入技术能够帮助企业考 察不同文化背景下的市场对其品牌的认知差异，并据此助推企业品牌的形象定位与国际化进 程。[63 ] 再如，利用词嵌入技术能够帮助企业动态追踪新产品的市场评价，为企业评估产品 的市场表现提供新的分析工具。其它的相关话题，诸如品牌依恋(brand attachment)、品牌文 化(brand culture)和品牌联想(brand association)等研究也将受益于词嵌入的分析方法。\n4. 企业关系管理 文本作为企业对外传达信息、价值观，以及企业间进行交流的重要载体之一，蕴含了大 量的、足以表征企业特征的信息。以往从文本层面探讨企业关系的研究相对较少，而利用词 嵌入的基本原理，未来研究可以考虑利用文本来刻画企业间的关系(如竞争、合作、信任等)， 进而更有效地描绘企业在网络中的嵌入式角色(embedded role)。例如，学界一直致力于研究 企业间关系网络的结构特点及其对企业绩效、企业间联合研发效率的潜在影响，探讨了社会 网络嵌入视角下的企业组织的合作范式。例如，基于知识理论视角，企业合作网络的形成及 演变动机在很大程度上取决于知识的互补性与相似性特征。[64 ] 未来研究可以利用文本刻画 企业的关系网络及其节点特征，探索企业的合作策略和市场战略。尤其在信息不对称的商业环境下，基于文本的社会关系分析能够为企业的战略伙伴选择、市场表现等提供新的分析路 径和信息参考。\n5. 组织内部管理 在管理学领域，有关组织行为的研究大多依赖于问卷访谈和自然观察等形式的调查方法， 以及基于组织管理目标开展特定的田野实验。这些研究路径在理解和预测个体行为的过程中 存在较强的主观性和外显性，难以挖掘组织成员真实的内隐认知。此外，以往对组织场景内 的文本分析在很大程度上受限于专家学者的领域知识和实践经验，耗时、低效且准确率低。 本研究提出，词嵌入技术可以用于分析组织内成员的心理及行为规律，通过挖掘组织内的文 本(如会议记录、员工评述、领导讲演文本)，揭示员工的内隐认知信息(如动机、信念、情绪)， 甚至包括领导力(leadership)、员工创新力、员工的组织支持感(organizational support)和企业 文化等主题。\n6. 中国传统智慧与管理问题 社会科学研究者不仅需要关注当下的社会情景，也需要从历史中洞察现象、以史为鉴。 中国社会文化背景下的众多管理问题、思想乃至组织行为领域的话题，均能够从历史事件中 窥知和借鉴。例如，Huang 等[6 5 ] 基于《资治通鉴》这一古籍中的记载，探讨了中国家族式企 业内的领导—员工关系。他们以古代的皇帝与太子间的关继承案例作为样本，并在长时间的 人工阅读和变量编码后发现，家庭组织在权力转移的过程中，子女继任的可能性与其父母在 位者对其的压制行为存在“U 型”关系。同样地，词嵌入技术可以挖掘在位者对继任者的评价， 以此判断与继任可能性之间的关系。此外，通过对《二十四史》展开词嵌入分析，也能帮助 学者了解中国各个朝代的管理层在应对人事、外部环境、组织治理等方面的管理思想与策略。 对此，本文展望利用词嵌入方法对中华古籍文本展开必要的分析，挖掘诸如组织领导风格、 组织文化、组织竞争力、管理者与下属间关系、人员激励政策等研究话题，进而探索中国本 土的管理智慧和组织话题。[65 ]\n","permalink":"/blog/%E5%9F%BA%E4%BA%8E%E8%AF%8D%E5%B5%8C%E5%85%A5%E6%8A%80%E6%9C%AF%E7%9A%84%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90%E7%9A%84%E5%BA%94%E7%94%A8/","summary":"点击上方图片购买课程    冉雅璇，李志强，刘佳妮，张逸石．大数据时代下社会科学研究方法的拓展 ——基于词嵌入技术的文本分析的应用.南开管理评论. https://kns.cnki.net/kcms/detail/12.1288.F.20210905.1337.002.html\n 大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用\n摘要：\n在大数据时代的背景下，基于大数据的分析处理技术为以“数据驱动”的社会科学研究创造了新的发 展契机。其中，词嵌入(Word Embeddings)技术借势大数据浪潮，以其高效的词表征能力和强大的迁移学习 能力在文本分析领域受到越来越多的关注。不同于传统的文本分析路径，词嵌入技术不仅实现了对非结构 化文本数据的表征，还保留了丰富的语义信息，可以实现对跨时间、跨文化文本中深层次文化信息的挖掘， 极大丰富了传统的社会科学实证的研究方法。文章总结了词嵌入技术的基本原理及特点，系统地梳理了词 嵌入技术的六大应用主题：社会偏见、概念联想、语义演变、组织关系、文本情感和个体决策机制。随后， 文章归纳了词嵌入技术的基本应用流程。词嵌入技术还面临文本数据的选择、中文文本的分词处理、单词 语义信息的表征层次三种挑战，文章归纳了相应的应对思路与方法。最后，基于词嵌入技术的强大适应能 力，未来研究可以进一步关注该技术在管理领域的应用前景，包括政策效应评估、用户推荐系统、品牌管理、企业关系管理、组织内部管理、中国传统智慧与管理问题六个方面。\n关键词： 词嵌入；自然语言处理；文本分析；社会科学；管理领域应用\n作者信息\n 冉雅璇，中南财经政法大学工商管理学院副教授、博士，研究方向为消费者行为 与大数据营销； 李志强，中南财经政法大学工商管理学院硕士研究生，研究方向为营销智能 与文本分析； 刘佳妮，中南财经政法大学工商管理学院硕士研究生，研究方向为营销模型与 因果推断； 张逸石，武汉理工大学管理学院教授、博士，研究方向为大数据营销与营销模型。  引言 作为人类开展文化交流和情感沟通的基本载体，语言承担了重要的信息交换功能。借助 于各类语言表达形式，人们将诸如知觉、思维、态度和情感等复杂的心理活动转化成特定的 语言。 而作为语言的典型载体之一，文本既能够在个体层面上反映人们的内心活动，也能 够在组织和社会层面上反映集体文化。 因此，从文本内容挖掘个体深层次的心理活动和 人类社会的文化沿革是社会科学的基本研究路径。\n长期以来，在社会科学尤其是管理学和心理学等领域，实证研究多以针对实验、问卷和 结构化的二手数据的量化分析为主导，而对于非结构化的文本材料(如访谈记录)仍以质性分 析为主。[5] 在大数据时代，“数据+行为+交叉学科”已成为社会科学发展的必然方向。而计 算社会科学的兴起则为我们理解人类行为、探讨社会现象提供了新的研究素材、视角和手段。[6] 随着互联网技术的飞速发展，人们在网络上发表大量包含思维、情感、观点的文本信息，这些井喷式爆发的文本为“以数据驱动”的社会科学研究提供了可及的信息来源。若能对之加 以利用，无疑将拓宽社会科学研究的方法。[7 - 9] 然而，社会科学领域的传统文本研究方法以 人工编码为主，其时间投入过大、成本较高、客观性相对较弱等不足极大地限制了文本数据 [10] 在实证研究中的应用。 所幸的是，以自然语言处理(Natural Language Processing; NLP)为核 心的计算机文本分析技术(Computerized Text Analysis)的发展为大数据文本在社会科学领域 中的应用带来了契机。 “词”作为文本的最小单元，是计算机进行文本分析的基础。在自然语言处理领域，“词” 主要以向量(vector)的形式表示。而词嵌入(Word Embeddings)技术，即是一种可以把高维词 向量映射进低维向量空间，以此来实现词义理解的计算机文本分析技术。相较于其他自然语 言技术，词嵌入技术不仅展现出了高效的学习能力，而且允许计算机从更高的意义单元(即 目标词的上下文)出发理解词义、刻画“词”之间的相对关系，因此逐渐成为了自然语言处理的重要工具，在管理学、心理学等社会科学领域取得了丰富的研究进展。相比于传统的以人工编码和词频统计为主导的文本分析方式，词嵌入的独特优势 在于：(1)借助计算机分析技术，可以在短时间内、以较低成本，实现对大规模文本数据的 高效处理；(2)在挖掘文本特征和理解文本内容时，更多地依赖文本自身的分布规律，具有较强的客观性，其背后“数据驱动”的分析逻辑也使这一技术在探索性研究中具有较大的应用优势；(3)面对跨时间、跨文化比较的研究话题、以及在挖掘社会学、行为学变量及变量关系等领域展现出广阔的应用前景。","title":"基于词嵌入技术的文本分析的应用"},{"content":" 点击上方图片购买课程   plotnine https://github.com/has2k1/plotnine\nPython版的ggplot2可视化包\n{{ \u0026lt; figure src=\u0026ldquo;img/plotnine.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nGeoPy https://github.com/geopy/geopy\n{{ \u0026lt; figure src=\u0026ldquo;img/GeoPy.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n地理数据计算包\nZettlr https://www.zettlr.com/\n科研助手/笔记软件：一款功能全面而出色的笔记/学术写作软件Zettlr\n{{ \u0026lt; figure src=\u0026ldquo;img/Zettlr.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nBeeware https://beeware.org/\n厉害了，BeeWare 帮助您编写跨平台本机 GUI 应用程序。\n{{ \u0026lt; figure src=\u0026ldquo;img/beeware.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nbig_screen https://github.com/hiDaDeng/big_screen 数据大屏生成工具，后端使用 flask。只要传一下数据，就可以制作出数据大屏，适合不了解前端的数据工作者。 {{ \u0026lt; figure src=\u0026ldquo;img/corp.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} screely https://www.screely.com/\nmimestream https://mimestream.com/\n前苹果邮件客户端工程师 Neil Jhaveri 推出的 Gmail macOS 原生客户端，外观简洁大方，十分契合原生风格，参考介绍文章。\n{{ \u0026lt; figure src=\u0026ldquo;img/mimestream.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n","permalink":"/blog/techweekly05/","summary":"点击上方图片购买课程   plotnine https://github.com/has2k1/plotnine\nPython版的ggplot2可视化包\n{{ \u0026lt; figure src=\u0026ldquo;img/plotnine.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nGeoPy https://github.com/geopy/geopy\n{{ \u0026lt; figure src=\u0026ldquo;img/GeoPy.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n地理数据计算包\nZettlr https://www.zettlr.com/\n科研助手/笔记软件：一款功能全面而出色的笔记/学术写作软件Zettlr\n{{ \u0026lt; figure src=\u0026ldquo;img/Zettlr.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nBeeware https://beeware.org/\n厉害了，BeeWare 帮助您编写跨平台本机 GUI 应用程序。\n{{ \u0026lt; figure src=\u0026ldquo;img/beeware.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nbig_screen https://github.com/hiDaDeng/big_screen 数据大屏生成工具，后端使用 flask。只要传一下数据，就可以制作出数据大屏，适合不了解前端的数据工作者。 {{ \u0026lt; figure src=\u0026ldquo;img/corp.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} screely https://www.screely.com/\nmimestream https://mimestream.com/\n前苹果邮件客户端工程师 Neil Jhaveri 推出的 Gmail macOS 原生客户端，外观简洁大方，十分契合原生风格，参考介绍文章。\n{{ \u0026lt; figure src=\u0026ldquo;img/mimestream.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}","title":"TechWeekly-05 | 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   DaDengAndHisPython博客改版上线了\n博客网站改版了，将之前黑暗风改为极简风，内容相对整洁，无广告，会不定期更新Python数据分析内容。\n博客有主页、推文列表栏、搜索栏、标签栏、联系页等。\n欢迎页  推文列表页  搜索页  标签页   点击左下角”阅读原文“进入博客网站\n","permalink":"/blog/papermod/","summary":"点击上方图片购买课程   DaDengAndHisPython博客改版上线了\n博客网站改版了，将之前黑暗风改为极简风，内容相对整洁，无广告，会不定期更新Python数据分析内容。\n博客有主页、推文列表栏、搜索栏、标签栏、联系页等。\n欢迎页  推文列表页  搜索页  标签页   点击左下角”阅读原文“进入博客网站","title":"高质量的Newsletter汇总"},{"content":" 点击上方图片购买课程    本文原载《法学家》2021年第6期。\n作者 | 周翔（法学博士，浙江大学光华法学院特聘副研究员）\n来源 |《法学家》2021年第6期“主题研讨二：跨学科法学研究的方法论检视”栏目。\n 因篇幅较长，已略去原文注释。\n目录  一、前大数据时代的法律实证研究 二、大数据技术运用的各个节点 三、大数据技术对于实证研究而言是一场接力 四、大数据技术对于规范研究而言是一种助力 结　语  　中国法学正在迎来“大数据”“人工智能”的研究热潮。“数字法学”“计算法学”等各类新词汇层出不穷，但研究者们却并不都是在同一内涵和外延下使用这些概念。因此，本文有必要在开篇之初先设置一套分类法，对既有的学术研究成果加以归类，从而明确本文在既有研究中的坐标位置。笔者将既有的相关研究分为如下四大类：\n第一类称作“学科论”，此类研究看待技术的视角最广，其目标是希望厘清法学+数字技术的最大学科边界；\n第二类称作“对象论”，是把“大数据”“人工智能”等视为法律规制和法学研究的对象，此类文章占了当前本领域研究成果中的大多数；\n第三类称作“工程论”，这类研究关注到数字技术可以被引入执法、司法等各个场景当中，赋能法治的各环节；\n第四类才是“方法论”，是从学术研究方法的视角看待大数据技术，探讨其能为学术活动提供哪些新契机。本文的研究侧重于第四类，亦即集中讨论大数据分析技术作为学术活动的工具，能够给法学研究提供何种新方法。\n　本文旨在回答大数据技术如何才能成为法学研究的方法，如何与法律实证研究、规范研究这两大传统的方法实现有效的互动。关于此，左卫民在《迈向大数据法律研究》一文（以下简称为“左文”）中较早地提出了“大数据技术如何作为法学研究方法”这一命题，在“方法论”层面为将大数据技术引入法学研究当中起到了重要的推动作用。同时，笔者认为，以下方面仍值得进一步探讨：\n第一，“左文”中提到“从研究范式看，大数据法律研究可能推动实证研究的跨越式发展，特别是机器学习方式的引入，会使法学研究从法教义学、社科法学和实证法律研究等范式转向数据科学式的法学研究”。“范式”一词在托马斯·库恩（Thomas Kuhn）那里，是指“一个成熟的科学共同体在某段时间内所认可的研究方法、问题领域和解题标准的源头活水”。形成一个范式，是任何一个学科在发展中达到成熟的标志。“数据科学式”的法学研究已经是一种成熟的范式了么？它与“左文”中提到的法教义学、社科法学等既有的法学研究范式之间又是什么样的关系？\n第二，“左文”中提到“需要将小数据社科研究中已普遍运用和相对成熟的数据分析方法……运用到大数据分析中”。社会科学中开展定量研究，是以统计学原理为根基的，这和大数据技术联系密切的机器学习方法之间有何差异？法学研究又能够吸取大数据技术中的哪些优势？\n第三，左文中还提到“一些大数据法律研究缺乏必要的问题意识，主要是描述式研究，沦为‘调查报告式’的数据展示”。这涉及的是大数据分析技术应用现状的问题。\n上述三个方面，围绕大数据技术对法学研究的主要贡献展开，清晰地定位了大数据技术在既有的法学研究方法体系中的地位。\n　上述延伸和思考，一方面是对话，另一方面是形成本文研究的路径。本文的基本立足点在于：大数据分析技术如果对法学研究有影响的话，那么主要是使得法学更加社会科学化、更重视实证的方法、更习惯从大数据中探索法律世界的规律。这些贡献决定了大数据技术在法学研究方法体系中的位置，其既是对以统计学为基础的法律实证研究的接力，更是对以法教义学、立法论研究为核心的传统规范研究的助力。在这一基本立场之下，本文首先对前大数据时代的实证研究方法、研究对象作一番回顾；接着结合笔者担任大数据分析师的经历，针对技术细节作梳理；然后在这些基础之上，就如何实现大数据技术、定量的实证研究、规范的法教义学研究三者间的互动提出一套初步的方案；最后，鉴于当前学界在相关概念上存在较多的混用现象，本文就此作一些观点上的澄清。\n一、前大数据时代的法律实证研究 　关于什么是实证研究，目前虽然尚无统一定论，但在“基于模型和数据的方法”这一点上则有比较明确的共识。包括法学在内的各个社会科学学科之所以都对定量方法感兴趣，是因为“定量的方法，乃一切科学进程的核心”。只要是跨越个案地探寻案件平均水平、共性特征、要素相关性的研究，都将被本文纳入前大数据时代法律实证研究的范畴。下文对此类法律实证研究的回顾和梳理，主要是从研究的方法、测量的工具、样本量的大小等三个维度展开。\n（一）以统计为主的研究方法 　从研究方法来看，既有的法律实证研究均奉统计学为同宗。通常认为，统计学的方法有描述性统计和相关性分析两大类。结合法学研究的特点，这里稍作更细致的划分。根据笔者的概括，以往的研究成果主要利用了如下三种方法。\n　方法一：多案例分析。对案例的运用，如果不是针对法条进行解释、对立法提出建议，那么在笔者看来即为一种实证研究的路径。例如陈杭平关于民事诉讼标的的研究，为案件类型化设定了一套分类标准，即诉讼标的的不同含义，纵轴根据不同学说见解区分为三个版本，横轴以诉讼标的的不同领域或场景为标准。从多个案例中挖掘某些规律性信息，是一种超越个案、试图通过案件类型化获得研究结论的方法尝试。\n　方法二：描述性统计。前述的多案例分析，还很难称得上是严格意义上的实证分析。左卫民的一系列文章有力地推动了法律实证研究向前发展，其主要采用的便是描述性统计方法。例如，他关于审判委员会的研究，统计了某地区的三级法院审判委员会委员的审判经验与学历背景，并将讨论的议题细化到宏观指导议题和个案议题，分别进行统计和分析；再比如，他另一份关于中国刑事法律援助的研究，通过调研和考察某省的三家法院，统计了各类型辩护的人数和占比，并由此回答“究竟应当在多大范围内推行并构建当代中国的法律援助制度”这一问题。\n　方法三：相关性分析。白建军等人的研究则在描述性统计之基础上，迈向了相关性分析这一相对复杂的层次。相关性研究也被称为推论统计，是将统计学手法与概率理论相融合，对“‘无法整体把握的大的对象’或‘还未发生而未来会发生的事情’进行推测”。白建军等人开始关注引起某一现象的原因，试图建立自变量和因变量之间统计学意义上的相关性，所采用的回归模型主要为多元线性回归、logistics回归等常见模型。例如，白建军迄今为止在中国知网上下载量最高的一篇论文，是通过相关系数、多元线性回归来研究犯罪率的社会成因；又如，李本森关于速裁程序的研究，则以诉讼效率、量刑均衡和诉讼权利作为其关心的因变量，采用的是多元线性回归模型。\n　在线性回归、logistics回归这两大常用的回归模型之基础上，法律实证研究方法也根据议题之需推陈出新。首先表现为统计方法趋于高级，例如白建军在其一贯的相关性分析之基础上，对无法观察的变量作了科学处理，将中国民众的刑法偏好这一因变量，拆解为犯罪圈大小、刑罚轻重、罪刑均衡程度等三个可通过问卷调查测量的因子，以打分取值的形式获得该变量的数值；其次是结果呈现方法上的创新，例如单勇关于盗窃罪的回归分析结果，用GIS作图的方法实现可视化，选取建筑物、停车场等10类空间因素为自变量，用于说明因变量和空间变量的地理联系；最后是体现在用于分析的软件工具之更新上，过去的法律实证研究以使用SPSS软件为多，而近来的研究很多提及使用了Stata、R等工具。当然，使用更高级的软件进行分析，其效果未必就一定更好，但上述变化至少标志着学者们在工具利用方面的水平提升，且有些回归模型是初阶工具所无法胜任的。\n（二）多元测量工具并存 　测量工具是指获得数据的方法。数据搜集在统计学中是重要的一环，“所有统计数据追踪其初始来源，都是来自调查或实验”。统计学上根据是否为直接获得第一手数据，区分直接来源和间接来源。法学实证研究多以一手的直接来源为主，主要的测量工具包括如下几种。\n　工具一：问卷调查。这种测量工具与传统的社会科学方法保持一致，通过设置问题、受调查者回答的方式收集受访者的信息。此种方法在获取受访者主观态度方面效果明显，为学界所常用。例如，程金华在研究过程中为了解检察人员针对检察人员分类改革的认识而发放问卷；胡铭关于司法公信力的研究，通过向社会公众和司法官分别发放问卷，比较和审视“对于影响司法公信力的要素的认知与评判”。\n　工具二：模拟实验。“实验大多是对自然现象而言的”，但在近年来的法学研究中也时常出现。司法裁判一般不具有可再现性，同一个案件在真实场景下只可能出现一次。模拟实验是一种对司法裁判过程的模拟再现，借此可发现一些影响裁判结果的变量。目前中国法学界的模拟实验主要是对一些经典案例裁判过程的复盘，以验证某些观点。例如李学尧等人关于案卷材料阅读流畅度与裁判尺度之关系的研究，通过问卷字体大小、是否斜体、是否加重、行间距以及案件数量的变化来操纵阅读流畅度的变化。\n　工具三：文本摘录。法律中的文本，其典型形态为裁判文书。在裁判文书大量公开上网后，有人认为数据法学的春天即将到来。的确，裁判文书是记录诉讼过程最终的、有法律效力的、体系最完整的文本。对裁判文书的利用，比如文姬关于信用卡诈骗罪的研究当中有很多维度的信息挖掘，包括审级、行为人出生年等16个变量。文本的种类近年来也出现不少创新，比如习超等人关于证券监管的研究采用的是对上市公司执法事件的披露信息。\n　工具四：实地/田野调查。倘若只是单纯采取个案式的访谈记录，则在方法论上一般将之归入定性研究的范畴。但如果是在田野调查中对多个样本进行观察或访谈，采取结构化的方式收集数据，最终对数据进行跨越个案的量化分析，那么也可以被视为实证研究的测量工具之一。此种方式在国内法学研究中不乏实例，比如一份关于当事人法律意识的研究，所主要利用的素材就是在某法院传达室对一百多位当事人进行访谈所收集的数据；再比如左卫民在研究基层法院的财政制度、法官的工作时间分配等问题时，课题组前往实地调研、观察记录收集数据资料。\n　除了采用上述工具之一，实证研究还可以多种测量工具结合、定量和定性方法混用。比如胡铭关于庭审实质化的研究就不仅利用了判决文书，且还通过观摩庭审直播并记录的方式收集数据。\n（三）万级以下的样本量 　实证研究的论文中约定俗成要报告样本量，而之所以特别指出研究所用的样本量大小，是由于样本量直接关系到根据小样本得出的结论能否推及至更大的范围，因此抽样是统计学中很重要的概念。建立一个好样本的关键，是尽量选择最符合总体的样本，如果样本具有代表性，那么表明样本与总体有十分相似的特性，进而可以通过样本预测出总体具有哪种规律。\n　法律实证研究中的样本量过去以百级、千级为主，比如文姬关于信用卡诈骗罪的研究所利用的裁判文书样本有2103份，习超等人对证券监管“旋转门”的研究则采用了7103个监管事件作为样本。样本量大小是个相对的概念，还要考虑“全体”的规模大小。当我们确定研究的问题后，从理论上讲“全体”的范围就固定了。若以裁判文书为测量工具，则有三个层次的案件范围，依次分别是客观真实发生的案件总数、裁判文书网上公开的案件数、用于实际研究的案件样本数。前大数据时代的法律实证研究，是在公开的裁判文书范围内选取一定的样本进行分析，距公开的案件“全体”和真实客观的案件“全体”相去甚远，正因如此，不少研究受到样本代表性不足的质疑。\n　除了抽样和样本的代表性问题外，前述提及的那些研究基本没有交待如何实现样本的数据结构化。根据笔者自身的数据分析经验，以传统方式处理样本耗时巨大。如果以阅读裁判文书并摘取的形式处理样本，那么一天工作8小时也只能阅读20—40份裁判文书，如此来算，处理千量级的裁判文书样本就得花费数月时间。如果再安排专人抽查数据录入的质量，那么工时还得另计。\n（四）留待提升的不足 　在研究方法上，相关性分析方法之后难有新的突破；在分析工具上，研究者虽试图推陈出新，但总体变化不大。以构建回归模型做研究为例，中国法学界目前用过的回归算法种类屈指可数。某些研究虽然其方法有一定的创新，比如采用决策树的方法，但又和机器学习的决策树算法相去较远。另一个问题在于分析软件，小样本时代没有使用分析软件的明显障碍，但在大样本时代则要考虑借助的分析工具是否恰当，能否高效运行。上述两个方面，大数据技术都可能给其带来变革。\n　测量工具上，以往较强依赖于社会资源的协调能力。中国法学界当前使用的测量工具中，问卷调查、模拟实验的应用较为普遍，而上述二法的共同局限在于严重依赖研究者的社会资源协调能力。很多研究并不避讳利用了作者的挂职身份、承担横向课题的机会、本省司法资源的便利条件等。就数据获取而言，即使只是选择几个投放点，也要付出很大的成本，且若没有较大经费支持则难以做到。上述列举的那些研究成果，因此往往是知名学者的作品。这也造就了一个怪圈：是先成名后做实证研究，还是因实证研究而成名？而在大数据时代，研究者将在一定程度上不再依靠外部资源的协调能力。\n　以往样本量太小，使得据其发现的规律的代表性不足。前文已经提及，样本量关乎结论的普遍性，统计分析的根本目标在于“推论”。样本量越小，对抽样的随机性要求就越高，而抽样始终是一个难题。造成抽样偏差的成因很复杂，比如抽样空间条目不齐全、抽样单位不正确等，无法穷举。如何克服抽样的难题？换个角度试想一下，研究的样本如果就是公开的“全体”，那么抽样的重要性将被极大淡化，而基于公开的全体案例作分析，在大数据技术的赋能下是能够实现的。\n二、大数据技术运用的各个节点 　从实证研究的过程来看，在选择议题、提出假设和设计变量等步骤中，数据的收集和分析是大数据技术最相关的两个环节。其中，数据的收集又包括语料的获取、语料转为数据和数据清洗等步骤。本文认为，大数据分析技术正是借助数据的收集和分析这两点，助力法律实证研究向更高阶段发展。从已有大数据分析的实践经验来看，可大致分为以下几个步骤。\n（一）语料的获取 　语料获取是应用大数据技术的第一个环节。凡是对立法活动、司法实践有所记录的载体，都可作为实证研究的原始语料。当然，文本仍是当前法律大数据分析主要的语料类型，大数据技术目前还比较难以有效处理图片、音视频等数据。所幸的是，法律文书本来就是记录法律活动最重要的、也是表达相对准确的语言形式。\n　当前的语料获取问题，应重点聚焦于如何便利地获取法律类文书。研究者作为个体要想获得供研究之用的文本，除逐一复制或下载外，还有两条路径值得重视：一是采取网络爬虫的方式，从数据源自动爬取，业内有句话叫作“可见即可得”，其意思是只要有该网站的访问权限，那么便可获得该数据，包括一般性的网页、API资源、文件资源和媒体资源；二是与拥有法律文书数据的公司进行合作，后者一般掌握较为完整的法律文书库。\n　网络上的其他数据资源也不可被忽视。在传统的法学研究中，我们便已看到许多研究者用到法律年鉴、地方志等信息，而此类信息如今已基本实现无纸化、网络化。我们可从以下几个渠道收集与自己研究有关的语料：一是国家及地方各公立机构的官方网站，比如图书馆、档案馆、财政局等行政事业单位；二是各行业的商业机构网站，比如上市公司财务报表的披露网站、各行业的商业情报网站等；三是一些人气活跃的社区论坛，比如在司法公信力、媒体和司法之关系等研究议题中，我们关心的案件舆情就在论坛社区中有丰富的表达。网络资源可有效弥补裁判文书这一测量工具的局限性，因为法治事件的真实场景变量复杂，法律文书只能反映其中的一小部分。\n（二）语料转为数据 　传统的实证研究是统计学思维，处理的是阿拉伯数字。这一点在大数据的语境下没有本质变化，即机器学习仍然难以根据文本直接构建模型，数据分析的对象仍是结构化数据。遗憾的是，法律领域的语料主要是自然语言，以数字形式呈现、直接可用的信息少之又少。因此，在获取与我们研究议题相关的文本语料后，还将面临如何将语料转为结构化数据的问题。前述提及的那些实证研究成果也用到文本，并主要采取人工摘录的方式进行处理，而大数据获取技术中的文本挖掘技术，通过计算机就可实现数据结构化。\n　将语料转为数据的过程，本质上是将自然语言转化为机器语言。处理自然语言的工具，大致可分为基于概率和基于规则两类。前者是通过人工标注一定的语料，再由机器模型识别剩余部分的语料，得到的是一个结果的分布概率；后者的典型代表是正则表达式，因其结果更为准确，故而成为当前适用广泛的提取方法。学术研究要求较高的准确性，因此基于规则的方法更为现实可取。正则表达式，在技术书中被定义为“一门袖珍编程语言的通用模式表示法，赋予使用者描述和分析文本的能力”，这里也可将其通俗地理解为高级版的关键词检索。正则表达式可将我们关心的、希望提取的某一要素，通过计算机能理解的方式表达出来。不过其具有的缺陷是，如果编写者未能预见同一意思下全部的汉语表达方式，那么该正则表达式也将无法识别出全部包含该意思的文书。\n　语言表达方式虽然具有多样性，但也并非无穷无尽，常见的文字表达类型是可以由正则表达式囊括的。实践中的通常做法为：先人工阅读一部分文书，枚举语言表述的类型→通过正则表达出每种类型→正则遍历文书，筛选出被命中的文书→再次阅读部分未经匹配的文书→优化正则表达式→再次遍历剩余未被命中的文书。多次循环后，正则表达式将会得到很大的改进，信息提取的准确性也会随之提高。数据的获取任务至此完成，这也是大数据技术相较于传统实证研究在技术上的巨大变革之处，即数据的获取不再高度依赖于外部资源的多寡，只要研究者掌握了一定的编程能力，那么就可以从最大的数据资源库即互联网中获取自己想要的各类数据。\n（三）数据清洗 　数据清洗面临两种情形，一种是从文本到数据的过程中存在信息的遗漏，另一种是有些文书信息虽然被提取了出来，但存在错别字或其他不当之处。处理信息残缺的方法，至少有以下几种：第一种是根据信息有残缺的文书编号，追溯至该份文书，人工阅读发现原因并修正提取的方法。这和上文提及的不断优化正则、扩大匹配的范围的做法很接近。第二种是统计学中处理残缺值的传统方法，比如用平均值替代、剔除该样本等。第三种是借助Excel表格中的工具、pandas等第三方库对数据逐一进行修正，通过人工的个别修正使数据回归正常。例如裁判文书中存在诸多错别字、语病等错误需要清洗，笔者曾遇到过某一罪名在裁判文书中，有十余种错误的文字表述、八种不同的“零”写法，这些均属于若无人工预判则机器便无法自动识别的情形。\n　数据清洗，主要面对的是如何处理自然语言中不同词汇的相同意思（同义问题），以及一个词汇在不同背景中有不同的意思（多义问题）。在数据清洗的实践中，可以发现存在如下几种规律：（1）词汇类型有限的数据项，需要清洗的脏数据比较少。例如提取裁判文书中的法院审级，一般文书落款中有“中级”“高级”“最高”等关键词，正则很容易匹配成功；而当鉴别机构的名称时，由于全国各地的命名方式不一，便会出现很多数据空缺需要填补的问题。（2）数据的清洗和人工的投入量基本成正比。无论是用人工标签+机器学习的方法，还是用正则表达式提取，都需要人工阅读并发现数据错误，添加惩罚项或修改正则来减少脏数据。（3）数据清洗要适可而止，因为数据清洗需要耗费大量的人工成本。一些简单且明显的错误，比如审判员人数提取为“2人”，能够及时返查并纠正，但人工清洗全部的脏数据是不可能的。现阶段在计算机还没有能力自查和纠错的情况下，学术共同体对待数据获取环节的准确性只能给予更多的包容。\n（四）数据分析 　若要从数据中产生规律性的知识，则还要依赖于数据分析的工具。以统计学思维看待数据分析的方法，主要有描述性分析和相关性分析两大类。\n　大数据时代的分析环节，仍有运用描述性统计的必要。大数据时代虽然样本量呈几何式增长，但试图把握司法实践之一般规律的需求并未改变。而描述性分析是最有利于把握案件整体情况、聚焦重点案件类型的方法。\n　关于相关性分析，大数据技术主要借助于机器学习，“根据训练数据是否拥有标记信息，学习任务可大致划分为两大类：‘监督学习’和‘无监督学习’”。有监督的机器学习，其建模方法为研究者提供了一种新思路，即把样本一分为二，区分训练集和测试集，用训练集拟合参数，用测试集评估数据模型的准确性。机器学习与统计学中的回归建模方法之间最大的一点差异，在于检验模型参数的可靠性上，机器学习采用交叉检验的方法，而统计学上则主要采用假设检验的方法，其典型者如t检验。无监督的机器学习事前不作标记，通过对无标记训练样本的学习，来揭示数据的内在性质及规律。以统计学视角来看，即事前不设置因变量。通过该项技术，可以从中探索我们所关心的研究议题，从而确定因变量。\n　用大数据的机器学习方法建模，最好采取Python语言编写程序。该语言可调用各类第三方库，statsmodels、scikit-learn等第三方库中已内置有大部分的常用算法，调用接口即可满足现有的研究需要。在大数据时代，获取的数据样本量将轻松突破万级，例如研究某些社会高度关注的案件的网络舆情，从微博、论坛中获取的评论数甚至可以很轻松地突破百万条。自己编写程序做大数据分析，在面对大样本时，能更好地满足个性化的研究需求。\n（五）前述流程的局限 　大数据技术并非没有局限性，它是一把双刃剑。“技术不是敌人，我们的敌人是寄居在技术里的浪漫又革命的‘解决问题兽’”。因此，人们要保持独立思考的能力，用批判性的眼光去接受、采用技术。在看待大数据技术在法学研究中的应用前景时，同样应重视可能存在的一些局限性。\n　第一个局限在于，大数据技术更难以关照到个案的细节之处。这也是左文中提到的大数据时代的一个特点，即样本量变大后，做不到人工查看每个样本。此为一个明显的缺陷。大数据分析所反映的只是数据间的相关性，但要解释此种相关性，还要依靠外部其他角度的素材。当回答为什么出现数据间存在显著相关性这一问题时，特别离不开对一些典型个案作具体的剖析。如前所述，大数据技术不再要求人工逐一阅读，便可将文本信息转为数据信息，但是小样本时代，逐一阅读案例，恰恰是发现有价值细节、启发研究灵感的历程。因此，大数据时代的法学研究，在用数据说话的同时，仍然少不了要深入到对典型个案的阅读中。\n　第二个局限在于，计算机技术的使用门槛较高，许多研究者面临着计算机技术有关知识匮乏的挑战。首先，在数据获取上，研究者最好能够掌握一些网络爬虫的技巧。从笔者的实战经验来看，爬取一般网站论坛上的数据相对容易，但爬取微博、微信公众号等数据就比较困难，这是因为后者设置了很多反爬虫的措施。再以法学研究常用的裁判文书为例，中国裁判文书网为确保正常访问，采取了一系列的加密措施，而这意味着研究者根本无法一劳永逸地解决数据获取的问题。其次，当前在研究成果发表时，法学期刊通常并不要求同步公开研究所依据的数据样本，也就是说，同行无法获知所采集的数据库详情、数据清洗的程度等。这是大数据法学研究早期阶段的特点。在大数据法学研究的成熟阶段，各研究者可能反复使用同一批大数据，并有一系列量化的模型衡量指标。\n　第三个局限在于，机器学习所用的部分算法，在变量参数和影响路径的可解释性上，不如那些简单的统计学算法。这部分是由于一些自身原理所造成的，比如机器学习中可能嵌套多层级函数，其目的是提高模型的拟合度。以神经网络的一般模型为例，有（d+l+1）*q+l个参数需确定，d、l、q分别代表输入、输出、隐层的神经元个数，神经网络的学习过程，就是根据训练数据来调整神经元之间的连接权，即参数值。这还只是一个隐层的情形，“容量”越大的深度学习，参数就越复杂，对法学研究而言的可解释性也越弱。如果认为法律实证研究主要是社会科学意义上的追求现象间相关性的分析，那么越是过程复杂的机器学习算法，越不能透过模型发现变量间的关系。\n　综上，笔者对待大数据技术的整体态度是，获取更大规模、更多类型的数据，对外部资源的依赖程度降低，是其最主要的贡献点，同时也要警惕研究过程中脱离个案细节、技术门槛提高、复杂模型的可解释性弱等风险。有效化解上述风险的策略包括：在跨越技术门槛上，可考虑借鉴其他学科团队式研究的模式，吸纳技术人员参与，改变过去一些法学期刊所认为的合署论文便有“搭便车”嫌疑的前见；在克服脱离个案细节这一问题上，则可以多采取混合研究的方法，即定性的方法和定量的方法相结合，实证研究和规范研究相结合；在数据分析时的算法选择上，则应尽可能选择一些原理简单、可解释性强的算法。\n三、大数据技术对于实证研究而言是一场接力 　大数据技术对于实证研究而言有一种接力的价值，两者的共性大于差异。大数据技术主要应定位于加强实证研究的某些环节，但并不改变实证研究基本的方法论框架。本文认为，大数据技术的接力作用，主要体现为：（1）降低了数据获取的难度，作为本文第一节中介绍过的那五种测量工具之外单独的一种数据获取途径，以网络爬虫、文本挖掘为代表的大数据技术，在获取数据上具有时间成本和经济成本更为低廉的优势。（2）加强了描述性统计的能力，适合探索性的量化研究。若对实证研究作描述性分析和相关性分析的二分，则大数据技术更擅长概览式地描述研究对象。（3）拓展了可量化研究的议题，使得某些议题的论证更加充分和有说服力。\n（一）拓新数据获取的重要渠道 　任何定量研究均离不开信度可靠、效度可行的数据来源。对大样本的追求，在统计学上称为“一致性”，费希尔（Stanley Fischer）用数学公式说明了“你得到的数据越多，你计算出的统计量越有可能接近参数真值”。在本文前一节的大数据技术应用详解中，所提及的第一步便是大数据的获取技术，若能掌握大数据的获取技术，或者吸纳有相关技术能力的合作者参与，则将大大拓展数据获取的渠道，互联网将成为一种新的测量工具。本节结合一些国内外较新的关于应用大数据技术的文献，深入探讨互联网这一大数据的来源，以此说明大数据技术在获取数据时的优势。\n　首先，把互联网视为数据获取的来源时，主要是将互联网视为一个“知识库”。互联网沉淀了人类活动的大量数据，其中一些是与法律有关的行为数据，例如裁判文书是对司法过程和结果的一种记录，网友针对某一热点案件的留言是司法民意的表达。这些数据的特点是它们的产生最初并非为了供研究之用，故而只能提供有限的数据项，研究者需迁就网络数据可用的数据维度进行研究设计。利用裁判文书开展大数据分析就十分典型，裁判文书的数据维度并不是为研究所设计的，因此在选题时，就要充分考虑裁判文书中所体现的信息是否足够用于回答该问题、有无其他数据源可作补充。\n　其次，进一步拓宽数据获取的思路，还可以把互联网视为形成数据的“实验室”和“协作平台”。大数据技术可以把互联网作为提问数据和实验数据的来源，即前述实证研究测量工具中的实验方法、问卷和田野等方法也可以在互联网中大规模使用。通过网络发送调查问卷，在学术界目前已经有一些成功的研究案例。例如，在一项针对累犯成因机制的研究中，通过给刑满释放的研究对象发放智能手机，大数据采集平台每天向研究对象发送问卷收集数据，并与定位数据、短信数据等数据源相结合，分析再犯罪的成因机制。借助互联网还可以开展随机对照实验，例如一项在二手交易网络商城开展的实验，通过在商品详情描述中改变卖家手持商品的手背肤色、手臂是否有文身、出价和商品介绍的质量等变量，分析这些变量与商品成交价的相关性，从而实证分析商品交易中存在的种族歧视问题。甚至还可以设计一个研究任务分包的网站，将数据的收集、标注等任务进行拆解，让更多的人参与到结构化数据库的建设中来。例如在一份关于国外政党之竞选政策立场的研究文献中，研究者事先将政党宣言作出类型化的定义，然后在网站上分包，最终从1500名工人处收集到20万条的分类数据，而分类的结果经过事后的验证，与专家分类的结果高度吻合。此类对文本、图片的信息采集和分类工作，如果能够分拆为不需要大量专业训练且答案较明确的任务，那么通过互联网的方式，就可以实现低成本的大数据采集和处理。\n（二）提高实证研究的描述分析能力 　社会科学所立足的成熟的研究范式，目前仍是提出假设、并用定量的统计方法加以验证的过程，这一套研究的基本方法在引入大数据技术后，并没有发生实质性改变。在数据分析的描述性和相关性之二分法中，大数据分析技术主要加强的是描述性部分，相关性分析仍主要沿用实证研究中倚赖的统计学算法。要想用好大数据分析技术，还应注意区分商业利用和学术研究的不同侧重点，商业领域的分析技术，不一定都能直接迁移至法学研究中来。\n　首先，大数据分析技术主要提高了研究对象的整体描述能力。实证研究中的描述性分析，针对研究对象设计变量，统计平均值、方差等。除这些外，大数据分析技术还有其他可供选择的方法，比如通过词频的计算提炼文本的关键词、通过情感分析的技术反映某些文本的正负情感及强度、通过文本摘要的技术浓缩海量文本的内容，分析的结果可以用词云、动图等多样的可视化方法来呈现。这些技术与实证分析中的描述性分析非常接近，只是起到丰富描述分析工具箱的作用。\n　其次，现有以统计学为基础的相关性分析，所用的算法仍将保持主流地位。统计学中最基本的线性回归、对数回归等模型，仍是当前最为成熟、较适合社会科学研究使用的方法。这并非法律实证研究特定阶段的现象，例如对美国在政治学、社会学领域最权威的6本期刊于2001—2010年间发表的实证研究论文所采用的方法进行统计后发现，最小二乘法（OLS）和logit回归的方法之和占比最高，达到六成。作为大数据分析的主要技术，机器学习在吸收统计学的基本算法后，通过模型的嵌套演变出神经网络、深度学习等高级算法，同时损失了算法的可解释性。而可解释性的本质是输入变量（即自变量）的参数、影响输出变量（即因变量）的路径透明可见，机器学习中的很多算法，在这方面其实不如过去实证研究中常用的统计学算法。\n　最后，应清醒地认识到，某些大数据分析技术之所以难以引入到实证研究中，是因为大数据技术的发展动力来自商业市场的需求，其初衷不是为学术研究而开发的。因此，要区别大数据技术在工程领域和在学术领域的使用差别。工程领域要求大数据模型有较强的结果预测能力，不太重视输入变量与输出结果间发生联系的路径。这使得技术开发的着力点在于如何能够准确预测未来，例如市场中多款量刑辅助的产品提供给办案人员的，是一个案件未来可能判处的刑期结果，而不是提供充分的说理。而学术研究更关心法律现象背后的社会成因机制，希望揭示出现象背后的原因。上述二者虽有共同点（进行精准预测的前提，也要有一个基于历史案件的模型），但考核模型表现优劣的标准是极为不同的。知晓此种差异后，研究者才能对当前眼花缭乱的大数据分析技术有所甄别，优先选择那些具有较好可解释性的机器学习算法。\n（三）加强某些议题的论证力度 　数据源和样本量的扩大，分析能力的增强，使得某些研究议题有机会变换新的角度、充实更有力的论据、得出更有说服力的结论。大数据技术作为一种方法并不直接产生新议题，但是能够增强旧有议题的论证能力，为原先难以量化研究的重要议题开启新的篇章。本节选取“法治中国”这一研究议题，尝试构想一个引入大数据技术后的学术发展新空间。\n　“法治中国”在近年来备受关注，是我国法学研究中的一个重要议题。一般认为，“‘法治中国’的内涵比‘法治国家’更加丰富、更加深刻、更具中国特色”，关于“法治中国”的主体、客体、竞争力等，都是“法治中国”之科学含义研究中的重要子课题。“法治中国”同时是一个有待进一步发展的议题，自党的十八届四中全会提出该口号后，关于“法治中国”的核心价值和精神元素是什么、具体的模式如何这些问题，虽然已经有一些研究成果，但还要继续丰富其内涵。在一些知名法学家的带领下，亟待更多法学青年学者的跟进，特别是作为一个与我国法治实践紧密联系的议题，“法治中国”应首先从国家、社会的各个实践侧面做出事实的归纳。\n　大数据技术可以在归纳中国法治实践中发挥大作用。具体可勾连几个看似不相关但实则联系密切的议题。一是近年来强调“中国问题”的学术反思。2011年举办的“中国法学研究之转型”研讨会上，诸多学者曾呼吁法学研究范式应该转变，认为“当前对中国特有的问题关注不够，缺乏中国问题意识”。具体而言，中国问题是在中国的政治建构、区域发展的极不平衡、社会在转型期中的急剧变化、社会治理资源的多元化等背景下形成的。本文认为，地域间、时间跨度中的中国法治实践差异，可通过大数据的时间序列、地理坐标图等各种形式予以呈现，法学研究要逐渐习惯于用数字化的方法发现并解释中国法治实践中的问题。二是与大数据技术直接关联的“法治评估”，这是关于立法、执法、司法等各领域的评估，其最大特色在于将指标构建技术和统计方法作为工具。笔者认为法治评估的相关研究，主要不在于实现地区间法治状况的可比性（这的确是提出法治评估的原因之一），而是旨在强调各国治理结构的差别，总结不同国家间某问题的不同法治方案。在西方学界过往的法治评估中，“所有实行西方政治制度的国家的得分必定高”。法治中国的研究要想有说服力地破除上述迷局，既要讲道理，更要摆事实，特别是利用好大数据所呈现的事实。\n四、大数据技术对于规范研究而言是一种助力 　法学实证研究和传统的规范研究间如何衔接和对话，是一个困扰研究者和期刊编辑的共同问题。有期刊编辑抱怨说，很多看似眼花缭乱的定量研究，最终得出的结论却不那么新奇，其言外之意是不需如此费劲，读者也早已知道这样的结论。还有学者坦言，实证研究和传统的规范研究间缺少对话，存在“平行线”难题，法学实证研究存在“叫好不叫座”的现象，即便高质量的实证研究，其被引用率也不高。数字法学时代到来后，上述问题能否有所改善？笔者以为，与其勉为其难地与规范研究直接对话，不如以“提供给规范研究一定启示”的姿态，定位大数据技术的贡献。此种贡献主要是便于研究者更自主、低成本地了解法律实践的运行状况，它是一种助力的功能。\n（一）拓宽了解释论的问题边界 　法律规范之所以需要解释，其原因在于“制定法的真实含义不只是隐藏在法条文字中，而且隐藏在具体的生活事实中”，生活事实的不断变化，使得法条一直有予以解释的必要性。换言之，这是一种来自司法实践中法条适用的困难所延伸出来的需求。但是，法教义学的规范研究，其传统重镇在高校，科研人员的作业模式与司法实践间隔较远，真正熟悉办案一线的学者并不多。这使得他们在发现哪个法条的哪个关键词存在司法适用困难、故而具有研究必要性上颇费周折。而哪怕是具有司法实践经验的研究者，在这个问题上的表现往往也好不到哪里去，因为他们的经验只是来自直接或间接经办过的案件，是一种主观的、个案式的感受。司法大数据的引入，有望改变上述局面。开展规范研究的学者可通过多个地区的法律案件文书，把文本向数据转换、提取文本背后的有用信息，进而全面获得实践中的裁判观点。波斯纳（Richard A. Posner）对此有过恰当的评论，他认为“法律决定和教义全都由事实驱动，而不是由理论驱动”。\n　首先，法律大数据所挖掘的信息，为规范研究提供了问题意识，为解释设定了起点。规范之所以需要解释，是因为存在疑义。此种疑义并非凭空而来，而是在法律的具体适用中凸显。在过去，此种凸显主要依靠典型案例的被发现而引起学术界的重视。如今，大数据技术的兴起，缩短了该种疑义被发现的进程，并克服了主观选择案例的片面性。这是因为，研究者可不再依赖于司法机关筛选出的指导案例，或者主观随意地挑选案件，而是通过公开的裁判文书进行全样本的大数据分析，挖掘出研究者所关心的司法实践的某一侧面情况。在评价中国的法教义学之缺陷时，有学者指责在中国看不到“法学与司法之间的深入对话”，进而强调中国学者应当虚心、耐心和诚心地向中国法官学习。面对面交流自然是学习的方式之一，但其成本太高。更有效的方式是跨越个案地、基于海量样本地分析法官所写的裁判文书（裁判文书是法官裁判观点的浓缩精华）。\n　其次，大数据方法赋能后的实证研究，为研究者提供了法律概念的社会语境。解释的最终目标是达致“裁定之案件获得公平的处理”，这种公平处理首先要具体化为探寻某一规则的立法目的。目的解释在某些学者眼里是指“探求法律在今日法秩序的标准意义”。那么，今日法秩序的理想图景又从何获知？学术研究者、法律适用者面临探寻这一出处的难题。以往的学理解释，一般是从部门法的基本价值出发解释法条，例如刑法的解释总是要考虑罪刑法定、罪刑均衡、法益保护、保障人权等，又如诉讼法中强调程序参与、诉讼效率、纠纷解决等。在学理解释者看来，这些基本就是衡量解释是否恰当的主要标准。而在具体法律适用者（例如面临个案裁判需要的法官）那里，还可能有其他社会、经济甚至政治的因素要加以考量。大数据的实证分析技术，为解释这些“关键词”提供了上述维度的信息参考，例如可利用大数据分析某个条款在不同案件背景下的不同解释结论，这些背景包括年代、当地的社会经济背景、原被告双方的身份等。以往的实证研究当中并非没有此类尝试，但毫无疑问，在大样本中分析裁判观点的社会语境，所得出的结论将更具有普适性。\n　当然，法教义学同样也给大数据分析以有价值的课题，规范研究者可以将其感兴趣的问题传递给法律大数据的分析者。如此一来，“这些学科的研究对象和知识兴趣就受到教义学的影响了，或者，也会引发交叉学科的研究课题的产生”。\n（二）为立法论提供效果评估工具 　2011年3月，时任全国人大常委会委员长吴邦国在十一届全国人大四次会议第二次全体会议上宣布“中国特色社会主义法律体系已经形成”。在此之后，学界有过一种观点，亦即认为我们的学术研究将从立法中心主义转向司法中心主义。另一种更谨慎的观点则认为，就中国特色社会主义法律体系这一宏大工程而言，上述时间节点是一个终点，但更是一个起点。在此后的七八年里，现实更加验证的似乎是后一种观点，即立法并没有消退，经济发展、社会转型向法律制度提出了新的要求。实证研究亦表明，立法中心主义的研究氛围始终存在。既然立法论的研究从未消失，我们更应当重视此类研究推动的立法质量和效果。法律体系形成及其规模的持续扩大，并不表明法律体系已经完备或能够自动产生实效，更不意味着立法必然合乎社会需要。就立法进行事前和事后的评估，这不只是立法机关的工作职责，同时也是借此反思立法论研究的良好契机。\n　这里主要探讨立法评估的方法，重点考察大数据技术是否有助于提升立法评估的广度和精度。当前的立法评估方式包括征集公众意见、问卷调查、实地走访等。例如在一份对地方法规的评估中，其研究者主要是在政府机构的主导下，通过第三方评估机构，推动各部门和区县自查、设计和布置调查问卷、文献梳理、重点走访和调研等方式，来完成评估。评估的方法当前“主要运用的是定性分析方法，很少运用定量分析方法及运用影响分析方法”，而这从评估的精确性来讲是不够的。毕竟，现代国家的管理是“数目字”管理，在现代政府的协调性行政控制中，对这些“官方数据”的例行监测是不可或缺的。大数据技术在立法评估中有如下两方面可能的贡献。\n　首先，大数据技术有助于更好地收集来自社会各界的反馈。笔者在研究中访问了全国人大和多个地方人大的网站，发现它们目前都还停留于前大数据时代的意见收集模式。大数据时代很注重对信息的标签化收集和处理，产业界将此称为“打标签”。若能在信息收集环节按照大数据分析的需要进行改造，增加备选的、对立法评估有价值的“标签”供用户勾选，则将有助于提高所收集的信息之质量。而互联网的发展，为利益相关者尤其是公众参与立法评估提供了手段。\n　其次，在立法有关材料的文本清洗和分类中，大数据技术也将提供更多的工具。在各地的立法评估实践中，会面对大量的文字材料。根据某省立法部门的反映，他们缺乏的是针对各方面立法意见的信息汇总和分类的能力。立法机关当前仍然停留于通过传统的“人工看、人工做统计”的方式来获悉各方面的反馈。大数据技术中的词频统计、主题分析、情感分析等相关技术，可以对庞杂的立法建议作清洗、聚类，而这些立法意见的文本处理能力是可积累和可复用的，根据过往的立法意见所构建的筛选模型，例如征集到的立法反馈有哪些意见类型、主要针对立法的哪部分提出意见、意见提出者的身份等，通过机器学习，可以应用于今后对立法意见的高效筛选之中。\n　最后，就立法评估的时间节点而言，大数据技术更能发挥作用的应该是立法后的评估。立法前评估与立法后评估的区别在于，立法前评估主要评估立法的必要性、合法性、协调性和可操作性，而立法后评估则重在考察法律法规对经济、社会和环境的实际影响。影响评估和成本—收益分析是两种不同的方法。成本—收益法是一种法经济学的路径，该方法之所以在立法前评估中经常被使用，是因为在立法之前一切影响都是估计的，并无立法产生的实际影响可以测量。较之事前的估计，关于事后的立法影响，其有关信息显然更多，数据分析也将更有应用的空间。因此，大数据技术和法经济学的方法，在立法前、后的评估中将体现出不同的分工。\n　上述主要讨论立法部门引入大数据技术展开立法评估，此外，大数据技术还应赋能学者的立法论研究，为研究提供检验成效、提示风险的能力。在一些西方学者看来，实证研究的前提为认同法律乃是一种工具，且由此对它可以用一种实证性的方法来加以检验。又由于法律规范对于维持社会秩序具有极大的重要性，社会变革一般不允许像其他科学领域中那样被“视为一种迭代过程”，因此，“在公共事务领域，失败是一个典型的只能在私下里低声讨论的事情”。但是，对某一制度的变革方案之效果进行大数据分析，绝对是有意义的，哪怕实证分析的结论不完全公开、仅供特定人参阅。例如陈卫东等人的课题组将某些改革举措限定在局部区域进行自然实验时，其中就用到大量的统计数据，该研究若能增加数据的维度和样本的数量，则其论证的效果也许会更好。此种对法律制度立法效果的大数据评估，已经在学术界得到一定的认可，例如在一项对精神损害赔偿发生机制的研究中，其研究者就意识到实证研究可以大幅度提高立法预测个体行动的精确性。\n结　语 　揭开大数据技术的面纱，我们可以看到，作为法学研究的一种新方法，大数据技术增强了我们获取数据、分析数据的能力，使得在更大时空范围内研究法治实践的规律成为了可能。\n　笔者认为，“数字技术+法学”应区分不同的细分场景展开讨论，不同的法律场景具有不同的特点。例如，首先应区别工程和学术，在学术研究中引入大数据技术，模型设计有充裕的时间，过程的可解释性要求较高。其次应区别学科和学术，作为法学研究方法的大数据技术，只是学科论中的内容之一。有学者认为，“计算法学的研究方法中最主要、最具特点的方法还是本文所指的运用计算机科学智能化处理大量法律数据以解决法律问题的方法”。本文的见解与其相近，同时认为这套大数据的方法不只适用于计算法学，而是全面覆盖法学的各个二级学科。最后是研究中具体方法的细分，如果将法学研究的方法区分为规范研究和实证研究，那么大数据技术方法和法学研究的结合点主要是在实证研究上。有学者认为，“计算法学可归属为实证法学的基本范畴”，“计算法学通过兼收并蓄的统合吸纳了定性研究和定量研究各自的优长”。本文主张狭义地将大数据技术定位为是对定量研究产生的变革，这并不妨碍与定性研究的彼此互鉴。在我国法学界，实证研究将与规范研究长期并存、共同发展。若对此心存疑虑，则不妨回顾一下美国法学研究在20世纪60年代所谓的“跨学科”研究方法之转向，以及90年代对此的二次转向，还有我国法学界在2005年前后也出现了一次“中国法学向何处去”的热烈讨论，便可以发现规范研究和各种跨学科法学研究方法间存在着难舍难分、始终共存的关系。\n","permalink":"/blog/%E4%BD%9C%E4%B8%BA%E6%B3%95%E5%AD%A6%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/","summary":"点击上方图片购买课程    本文原载《法学家》2021年第6期。\n作者 | 周翔（法学博士，浙江大学光华法学院特聘副研究员）\n来源 |《法学家》2021年第6期“主题研讨二：跨学科法学研究的方法论检视”栏目。\n 因篇幅较长，已略去原文注释。\n目录  一、前大数据时代的法律实证研究 二、大数据技术运用的各个节点 三、大数据技术对于实证研究而言是一场接力 四、大数据技术对于规范研究而言是一种助力 结　语  　中国法学正在迎来“大数据”“人工智能”的研究热潮。“数字法学”“计算法学”等各类新词汇层出不穷，但研究者们却并不都是在同一内涵和外延下使用这些概念。因此，本文有必要在开篇之初先设置一套分类法，对既有的学术研究成果加以归类，从而明确本文在既有研究中的坐标位置。笔者将既有的相关研究分为如下四大类：\n第一类称作“学科论”，此类研究看待技术的视角最广，其目标是希望厘清法学+数字技术的最大学科边界；\n第二类称作“对象论”，是把“大数据”“人工智能”等视为法律规制和法学研究的对象，此类文章占了当前本领域研究成果中的大多数；\n第三类称作“工程论”，这类研究关注到数字技术可以被引入执法、司法等各个场景当中，赋能法治的各环节；\n第四类才是“方法论”，是从学术研究方法的视角看待大数据技术，探讨其能为学术活动提供哪些新契机。本文的研究侧重于第四类，亦即集中讨论大数据分析技术作为学术活动的工具，能够给法学研究提供何种新方法。\n　本文旨在回答大数据技术如何才能成为法学研究的方法，如何与法律实证研究、规范研究这两大传统的方法实现有效的互动。关于此，左卫民在《迈向大数据法律研究》一文（以下简称为“左文”）中较早地提出了“大数据技术如何作为法学研究方法”这一命题，在“方法论”层面为将大数据技术引入法学研究当中起到了重要的推动作用。同时，笔者认为，以下方面仍值得进一步探讨：\n第一，“左文”中提到“从研究范式看，大数据法律研究可能推动实证研究的跨越式发展，特别是机器学习方式的引入，会使法学研究从法教义学、社科法学和实证法律研究等范式转向数据科学式的法学研究”。“范式”一词在托马斯·库恩（Thomas Kuhn）那里，是指“一个成熟的科学共同体在某段时间内所认可的研究方法、问题领域和解题标准的源头活水”。形成一个范式，是任何一个学科在发展中达到成熟的标志。“数据科学式”的法学研究已经是一种成熟的范式了么？它与“左文”中提到的法教义学、社科法学等既有的法学研究范式之间又是什么样的关系？\n第二，“左文”中提到“需要将小数据社科研究中已普遍运用和相对成熟的数据分析方法……运用到大数据分析中”。社会科学中开展定量研究，是以统计学原理为根基的，这和大数据技术联系密切的机器学习方法之间有何差异？法学研究又能够吸取大数据技术中的哪些优势？\n第三，左文中还提到“一些大数据法律研究缺乏必要的问题意识，主要是描述式研究，沦为‘调查报告式’的数据展示”。这涉及的是大数据分析技术应用现状的问题。\n上述三个方面，围绕大数据技术对法学研究的主要贡献展开，清晰地定位了大数据技术在既有的法学研究方法体系中的地位。\n　上述延伸和思考，一方面是对话，另一方面是形成本文研究的路径。本文的基本立足点在于：大数据分析技术如果对法学研究有影响的话，那么主要是使得法学更加社会科学化、更重视实证的方法、更习惯从大数据中探索法律世界的规律。这些贡献决定了大数据技术在法学研究方法体系中的位置，其既是对以统计学为基础的法律实证研究的接力，更是对以法教义学、立法论研究为核心的传统规范研究的助力。在这一基本立场之下，本文首先对前大数据时代的实证研究方法、研究对象作一番回顾；接着结合笔者担任大数据分析师的经历，针对技术细节作梳理；然后在这些基础之上，就如何实现大数据技术、定量的实证研究、规范的法教义学研究三者间的互动提出一套初步的方案；最后，鉴于当前学界在相关概念上存在较多的混用现象，本文就此作一些观点上的澄清。\n一、前大数据时代的法律实证研究 　关于什么是实证研究，目前虽然尚无统一定论，但在“基于模型和数据的方法”这一点上则有比较明确的共识。包括法学在内的各个社会科学学科之所以都对定量方法感兴趣，是因为“定量的方法，乃一切科学进程的核心”。只要是跨越个案地探寻案件平均水平、共性特征、要素相关性的研究，都将被本文纳入前大数据时代法律实证研究的范畴。下文对此类法律实证研究的回顾和梳理，主要是从研究的方法、测量的工具、样本量的大小等三个维度展开。\n（一）以统计为主的研究方法 　从研究方法来看，既有的法律实证研究均奉统计学为同宗。通常认为，统计学的方法有描述性统计和相关性分析两大类。结合法学研究的特点，这里稍作更细致的划分。根据笔者的概括，以往的研究成果主要利用了如下三种方法。\n　方法一：多案例分析。对案例的运用，如果不是针对法条进行解释、对立法提出建议，那么在笔者看来即为一种实证研究的路径。例如陈杭平关于民事诉讼标的的研究，为案件类型化设定了一套分类标准，即诉讼标的的不同含义，纵轴根据不同学说见解区分为三个版本，横轴以诉讼标的的不同领域或场景为标准。从多个案例中挖掘某些规律性信息，是一种超越个案、试图通过案件类型化获得研究结论的方法尝试。\n　方法二：描述性统计。前述的多案例分析，还很难称得上是严格意义上的实证分析。左卫民的一系列文章有力地推动了法律实证研究向前发展，其主要采用的便是描述性统计方法。例如，他关于审判委员会的研究，统计了某地区的三级法院审判委员会委员的审判经验与学历背景，并将讨论的议题细化到宏观指导议题和个案议题，分别进行统计和分析；再比如，他另一份关于中国刑事法律援助的研究，通过调研和考察某省的三家法院，统计了各类型辩护的人数和占比，并由此回答“究竟应当在多大范围内推行并构建当代中国的法律援助制度”这一问题。\n　方法三：相关性分析。白建军等人的研究则在描述性统计之基础上，迈向了相关性分析这一相对复杂的层次。相关性研究也被称为推论统计，是将统计学手法与概率理论相融合，对“‘无法整体把握的大的对象’或‘还未发生而未来会发生的事情’进行推测”。白建军等人开始关注引起某一现象的原因，试图建立自变量和因变量之间统计学意义上的相关性，所采用的回归模型主要为多元线性回归、logistics回归等常见模型。例如，白建军迄今为止在中国知网上下载量最高的一篇论文，是通过相关系数、多元线性回归来研究犯罪率的社会成因；又如，李本森关于速裁程序的研究，则以诉讼效率、量刑均衡和诉讼权利作为其关心的因变量，采用的是多元线性回归模型。\n　在线性回归、logistics回归这两大常用的回归模型之基础上，法律实证研究方法也根据议题之需推陈出新。首先表现为统计方法趋于高级，例如白建军在其一贯的相关性分析之基础上，对无法观察的变量作了科学处理，将中国民众的刑法偏好这一因变量，拆解为犯罪圈大小、刑罚轻重、罪刑均衡程度等三个可通过问卷调查测量的因子，以打分取值的形式获得该变量的数值；其次是结果呈现方法上的创新，例如单勇关于盗窃罪的回归分析结果，用GIS作图的方法实现可视化，选取建筑物、停车场等10类空间因素为自变量，用于说明因变量和空间变量的地理联系；最后是体现在用于分析的软件工具之更新上，过去的法律实证研究以使用SPSS软件为多，而近来的研究很多提及使用了Stata、R等工具。当然，使用更高级的软件进行分析，其效果未必就一定更好，但上述变化至少标志着学者们在工具利用方面的水平提升，且有些回归模型是初阶工具所无法胜任的。\n（二）多元测量工具并存 　测量工具是指获得数据的方法。数据搜集在统计学中是重要的一环，“所有统计数据追踪其初始来源，都是来自调查或实验”。统计学上根据是否为直接获得第一手数据，区分直接来源和间接来源。法学实证研究多以一手的直接来源为主，主要的测量工具包括如下几种。\n　工具一：问卷调查。这种测量工具与传统的社会科学方法保持一致，通过设置问题、受调查者回答的方式收集受访者的信息。此种方法在获取受访者主观态度方面效果明显，为学界所常用。例如，程金华在研究过程中为了解检察人员针对检察人员分类改革的认识而发放问卷；胡铭关于司法公信力的研究，通过向社会公众和司法官分别发放问卷，比较和审视“对于影响司法公信力的要素的认知与评判”。\n　工具二：模拟实验。“实验大多是对自然现象而言的”，但在近年来的法学研究中也时常出现。司法裁判一般不具有可再现性，同一个案件在真实场景下只可能出现一次。模拟实验是一种对司法裁判过程的模拟再现，借此可发现一些影响裁判结果的变量。目前中国法学界的模拟实验主要是对一些经典案例裁判过程的复盘，以验证某些观点。例如李学尧等人关于案卷材料阅读流畅度与裁判尺度之关系的研究，通过问卷字体大小、是否斜体、是否加重、行间距以及案件数量的变化来操纵阅读流畅度的变化。\n　工具三：文本摘录。法律中的文本，其典型形态为裁判文书。在裁判文书大量公开上网后，有人认为数据法学的春天即将到来。的确，裁判文书是记录诉讼过程最终的、有法律效力的、体系最完整的文本。对裁判文书的利用，比如文姬关于信用卡诈骗罪的研究当中有很多维度的信息挖掘，包括审级、行为人出生年等16个变量。文本的种类近年来也出现不少创新，比如习超等人关于证券监管的研究采用的是对上市公司执法事件的披露信息。\n　工具四：实地/田野调查。倘若只是单纯采取个案式的访谈记录，则在方法论上一般将之归入定性研究的范畴。但如果是在田野调查中对多个样本进行观察或访谈，采取结构化的方式收集数据，最终对数据进行跨越个案的量化分析，那么也可以被视为实证研究的测量工具之一。此种方式在国内法学研究中不乏实例，比如一份关于当事人法律意识的研究，所主要利用的素材就是在某法院传达室对一百多位当事人进行访谈所收集的数据；再比如左卫民在研究基层法院的财政制度、法官的工作时间分配等问题时，课题组前往实地调研、观察记录收集数据资料。\n　除了采用上述工具之一，实证研究还可以多种测量工具结合、定量和定性方法混用。比如胡铭关于庭审实质化的研究就不仅利用了判决文书，且还通过观摩庭审直播并记录的方式收集数据。\n（三）万级以下的样本量 　实证研究的论文中约定俗成要报告样本量，而之所以特别指出研究所用的样本量大小，是由于样本量直接关系到根据小样本得出的结论能否推及至更大的范围，因此抽样是统计学中很重要的概念。建立一个好样本的关键，是尽量选择最符合总体的样本，如果样本具有代表性，那么表明样本与总体有十分相似的特性，进而可以通过样本预测出总体具有哪种规律。\n　法律实证研究中的样本量过去以百级、千级为主，比如文姬关于信用卡诈骗罪的研究所利用的裁判文书样本有2103份，习超等人对证券监管“旋转门”的研究则采用了7103个监管事件作为样本。样本量大小是个相对的概念，还要考虑“全体”的规模大小。当我们确定研究的问题后，从理论上讲“全体”的范围就固定了。若以裁判文书为测量工具，则有三个层次的案件范围，依次分别是客观真实发生的案件总数、裁判文书网上公开的案件数、用于实际研究的案件样本数。前大数据时代的法律实证研究，是在公开的裁判文书范围内选取一定的样本进行分析，距公开的案件“全体”和真实客观的案件“全体”相去甚远，正因如此，不少研究受到样本代表性不足的质疑。\n　除了抽样和样本的代表性问题外，前述提及的那些研究基本没有交待如何实现样本的数据结构化。根据笔者自身的数据分析经验，以传统方式处理样本耗时巨大。如果以阅读裁判文书并摘取的形式处理样本，那么一天工作8小时也只能阅读20—40份裁判文书，如此来算，处理千量级的裁判文书样本就得花费数月时间。如果再安排专人抽查数据录入的质量，那么工时还得另计。","title":"周翔：作为法学研究方法的大数据技术 | 主题研讨二"},{"content":" 点击上方图片购买课程   本文档不定期更新，碰到比较好的 Newsletter 就会加进来。\n同时欢迎自荐、推荐你觉得不错的 Newsletter，请点击这里提交 issue！\n写作 Newsletter 工具或者平台，排名不分先后。\n Substack Start a paid newsletter，国外比较成功的一个 Newsletter 平台 Getrevue An editorial newsletter tool for writers and publishers Hedwig 一个简单可靠的邮件 Newsletter 创作平台，邀请码 hedwigpub 知园 取自一个小众概念“数字花园” 竹白 支持多种订阅方式的 newsletter 平台，且支持微信订阅。 语雀 新一代云端知识库，也不支持邮件订阅 podletter podletter汇总  编程技术  阮一峰科技周刊 经济学博士，IT大佬，分享的内容精彩非常 大邓和他的Python 自荐，不定期更新Python及数据分析相关内容  互联网和科技  科技爱好者周刊 从 2018 年初开始发布，记录每周值得分享的科技内容，周五发布。个人觉得是中文科技 Newsletter 最好之一，最喜欢的板块是「本周话题」。 hackernewsletter 每周发布一份关于创业、技术、编程等方面的文章。目前已有 60000 多个用户订阅。 The Quibbler 这是一份关于互联网、科技领域的 Newsletter，每月一期，偶尔提前。 商业内观一份穿梭在人类用思维构建的商业世界里，却一心想去往 2500 年前轴心时代的Newsletter。 海上星光产品通讯 关注产品、设计、科技的整理和思考。 湾区日报 关注创业与技术，每天推送 3~5 篇优质英文文章。 产品沉思录 关注互联网产品的设计与运营等内容，每周精选四篇推荐，并附上独立的观点，以期为你拓展视野的边界。  成长和思考  The 3-2-1 Newsletter 超过 100万 用户订阅，3 个简短思考、2 个引用、 1 个思考问题 DAVID PERELL 超过 4万 用户订阅，Monday Musings 和 Friday Finds，有读者反馈，有趣而且是从未见过的内容。 事不过三 每周三推送，文章分为 3 个板块：认识自己，好好学习，好好生活。截止到 2021 年 10 月，已经推送了 46 期了。 类地行星 会有一个世界，和地球有一点像，也有一点不像。 小胖’s Daily Note 记录我日常发现的一些东西。 自说自话\t没有记录就没有发生，而记录本身就已是一种反抗。 知更鸟文档 一份关于「 Thought」，「 Tools」和「Creativity」的所见分享。 光明王 加入你的网上邻居，一起阅读新闻，一起奇思妙想，一起欢度时光。 熊言熊语 关注学习分享和知识科普的播客栏目，我们希望用声音记录改变与成长。聊学习工作、聊科研科普。 生活奇旅 探寻如何更好地生活。 声波微步 有关泛社会议题的观察、解读和生活方式分享。 反向连接 You only connect dots by looking backward. 独来读趣 read to the infinity and beyond. 世俗的理想主义青年 专注于探讨与输出Martech营销技术、泛商业领域以及流行文化的日常产品思考。 Futurow 未来派 爱捣鼓者的日常，软件、开源、运营、阅读，什么有趣捣鼓什么。  工具和效率  Ali Abdaal 主理人是一名医生，超过 12 万用户订阅，分享可行的生产力提升，实际的生活建议，高品质的见解。 地心引力 关注效率工具与生活方式，一起脱离重力束缚。 happy letter 每个工作日发送简短实用的效率方法，健康习惯，思维模式。订阅人数已超 2000。 Sustainable Curiosity 日间碎片化阅读的批注和观点的集散地，关注领域：互联网、商业纪实、效率工具和数字化管理提升。 潦草学者 分享日常思考。长期关注互联网商业，效率工具。  多才多艺 Miscellaneous  新闻实验室 主理人是方可成，作者是香港中文大学社会科学院新闻传播学院的一名助理教授，站在行业变动的前沿，把握媒体变革的脉搏。用学术眼光理解新闻传播现象背后的逻辑，并用平易的语言进行解释。 推播助栏 每月推荐7集类型多样的播客节目，和你一起听见这个世界。 Random Lab 投资行业从业，内容包括商业观察、品牌出海、读书笔记，以及奢侈品行业二三事。 唯理通讯 推荐精选自互联网的深度文本。希望这些内容传播富有思考的声音，并促进订阅者对社会议题的关注。 精选日报 一文了解天下事。 刻意体会 Time takes the time time takes. Steve说每周通讯 内容来自Steve和朋友们每周精选的优质内容。 Λ-Reading （兰布达阅读）是一份智识阅读通讯（Newsletter），每周 1-2 期。(包含免费和付费) 逆流Upstream 专注观察中美流媒体与创作者经济赛道。每周/隔周原创更新，解析1个创业公司、推荐2档优质节目、传播3个行业观点。 一份全面的RSS和Newsletter 和 中文Podcast  ","permalink":"/blog/newsletter-list/","summary":"点击上方图片购买课程   本文档不定期更新，碰到比较好的 Newsletter 就会加进来。\n同时欢迎自荐、推荐你觉得不错的 Newsletter，请点击这里提交 issue！\n写作 Newsletter 工具或者平台，排名不分先后。\n Substack Start a paid newsletter，国外比较成功的一个 Newsletter 平台 Getrevue An editorial newsletter tool for writers and publishers Hedwig 一个简单可靠的邮件 Newsletter 创作平台，邀请码 hedwigpub 知园 取自一个小众概念“数字花园” 竹白 支持多种订阅方式的 newsletter 平台，且支持微信订阅。 语雀 新一代云端知识库，也不支持邮件订阅 podletter podletter汇总  编程技术  阮一峰科技周刊 经济学博士，IT大佬，分享的内容精彩非常 大邓和他的Python 自荐，不定期更新Python及数据分析相关内容  互联网和科技  科技爱好者周刊 从 2018 年初开始发布，记录每周值得分享的科技内容，周五发布。个人觉得是中文科技 Newsletter 最好之一，最喜欢的板块是「本周话题」。 hackernewsletter 每周发布一份关于创业、技术、编程等方面的文章。目前已有 60000 多个用户订阅。 The Quibbler 这是一份关于互联网、科技领域的 Newsletter，每月一期，偶尔提前。 商业内观一份穿梭在人类用思维构建的商业世界里，却一心想去往 2500 年前轴心时代的Newsletter。 海上星光产品通讯 关注产品、设计、科技的整理和思考。 湾区日报 关注创业与技术，每天推送 3~5 篇优质英文文章。 产品沉思录 关注互联网产品的设计与运营等内容，每周精选四篇推荐，并附上独立的观点，以期为你拓展视野的边界。  成长和思考  The 3-2-1 Newsletter 超过 100万 用户订阅，3 个简短思考、2 个引用、 1 个思考问题 DAVID PERELL 超过 4万 用户订阅，Monday Musings 和 Friday Finds，有读者反馈，有趣而且是从未见过的内容。 事不过三 每周三推送，文章分为 3 个板块：认识自己，好好学习，好好生活。截止到 2021 年 10 月，已经推送了 46 期了。 类地行星 会有一个世界，和地球有一点像，也有一点不像。 小胖’s Daily Note 记录我日常发现的一些东西。 自说自话\t没有记录就没有发生，而记录本身就已是一种反抗。 知更鸟文档 一份关于「 Thought」，「 Tools」和「Creativity」的所见分享。 光明王 加入你的网上邻居，一起阅读新闻，一起奇思妙想，一起欢度时光。 熊言熊语 关注学习分享和知识科普的播客栏目，我们希望用声音记录改变与成长。聊学习工作、聊科研科普。 生活奇旅 探寻如何更好地生活。 声波微步 有关泛社会议题的观察、解读和生活方式分享。 反向连接 You only connect dots by looking backward.","title":"高质量的Newsletter汇总"},{"content":" 点击上方图片购买课程   领域知识图谱的数据集，当前还比较缺失，而作为构建难度最大的产业链图谱领域更为空白。产业链作为产业经济学中的一个概念，是各个产业部门之间基于一定的技术经济关联，并依据特定的逻辑关系和时空布局关系客观形成的链条式关联关系形态。从本质上来说，产业链的本质是用于描述一个具有某种内在联系的企业群结构，产业链中大量存在着上下游关系和相互价值的交换，上游环节向下游环节输送产品或服务，下游环节向上游环节反馈信息。\n作者已经先后发布两大领域的实体图谱数据： 1、情报领域【武器装备知识图谱】，地址：https://github.com/liuhuanyong/QAonMilitaryKG\n2、医疗领域【医疗知识图谱】，地址： https://github.com/liuhuanyong/QASystemOnMedicalKG\n当前，为了进一步推动产业发展，本文围绕金融领域，推出面向上市公司的产业链图谱。\n项目地址：\n 一、项目构成 产业链知识图谱包括A股上市公司、行业和产品共3类实体，包括上市公司所属行业关系、行业上级关系、产品上游原材料关系、产品下游产品关系、公司主营产品、产品小类共6大类。\n通过数据处理、抽取，最终建成图谱规模数十万，其中包括上市公司4,654家，行业511个，产品95,559条、上游材料56,824条，上级行业480条，下游产品390条，产品小类52,937条，所属行业3,946条。  二、项目构建 1、实体构建\n1）上市公司\n目前上市公司已经达到四千多家，是我国重要的公司代表与行业标杆，本图谱选取上市公司作为基础实体之一。通过交易所公开信息中，可以得到上市公司代码、全称、简称、注册地址、挂牌等多个信息。\n 2）行业分类\n行业是产业链图谱中另一个核心内容，也是承载产业、公司及产品的一个媒介，通过这一领携作用，可以生产出大量的行业指数、热点行业等指标。\n目前关于行业，已经陆续出现多个行业规范，代表性的有申万三级行业分类、国民经济行业分类等。中国上市公司所属行业的分类准则是依据营业收入等财务数据为主要分类标准和依据，所采用财务数据为经过会计事务所审计并已公开披露的合并报表数据。\n2021年6月，申万发布了2021版的行业分类规范，将1级行业从28个调整至31个、2级行业从104个调整至134个、3级行业从227个调整至346个，新增1级行业美容护理等，新增2级行业，并将上市公司进行了归属。本图谱选用申万行业作为基础数据。\n 3）业务产品 业务产品主要指公司主营范围、经营的产品，用于对一个公司的定位。可以从公司的经营范围、年报等文本中进行提取得到。\n 2、关系构建 1）公司所属行业 通过公开的上市公司行业分类表，可以得到上市公司所对应的行业分类数据。  2）行业上级关系 通过公开的行业三级分类情况，可以通过组合的形式得到行业之间的上级关系数据。  3）公司主营产品关系\n上市公司的经营产品数据可以从两个方面来获得，一个是从公司简介中的经营范围中结合制定的规则进行提取，另一个是从公司每年发布的半年报、年报中进行提取。这些报告中会有按经营业务、经营产品、经营地域等几个角度对公司的营收占比进行统计，也可以通过制定规则的方式进行提取。第二种方法中，由于已经有统计数据，所以我们可以根据占比数据大小，对主营产品这一关系进行赋值。\n 4）产品之间的上下游关系\n产品之间的上下游关系，是展示产品之间传导逻辑关系的一个重要方法，包括上游原材料以及下游产品两大类。我们可以多种来获取：\n一种是基于规则模式匹配的方式进行抽取，如抽取上游原材料这一关系可以由诸如\u0026quot;a是b的原料/原材料/主要构件/重要原材料/ 上游原料\u0026quot;的模式进行抽取\u0026quot;，而下游产品，则同理可以通过\u0026quot;A是B的下游成品/产品\u0026quot;等模式进行提取。\n另一种是基于序列标注的提取。还有一种是基于现有结构化知识图谱的提取，例如已经结构化好的百科知识三元组，可以通过设定谓词及其扩展进行过滤。\n 5）产品之间的小类关系\n对于一个产品而言，其是有大小层级分类的，在缺少大类产品名称的时候，可以通过计算小类产品来得到相应指标。与产品之间的上下游数据类似，可以通过启发式规则的方式进行提取，如“A是一种B”，也可以通过字符之间的组成成分进行匹配生成，如“螺纹钢”是“精细螺纹钢”的一个大类。\n 三、项目运行 1、data文件夹下包括了本项目的数据信息：\n1)company.json:公司实体数据\n2)industry.json:行业实体数据 3)product.json:产品实体数据 4)company_industry.json:公司-行业关系数据 5)industry_industry.json:行业-行业关系数据 6)product_product.json:产品-产品数据 7)company_product.json:公司-产品数据\n2、项目运行:\npython build_graph.py\n四、项目总结 产业链图谱是众多领域知识图谱中较为棘手的一种，本项目通过现有的数据，借助数据处理、结构化提取方式，设计、构建并形成了一个节点100,718，关系边169,153的十万级别产业链图谱。就产业链图谱的构建而言，我们需要至少从以上三个方面加以考虑：\n 其一，产业链的主观性与标准性。产业链的主观性较强，不同的人对产业链的构建、产业链节点、关系的类型，产业链的颗粒度问题都有不同的理解。不同的设定会直接导致不同的应用结果。正如我们所看到的，目前存在不同的行业标准，不同的网站、机构也将公司归为不同的行业。 其二，产业链的动态性和全面性。产业链需要具备足够大的复用性和扩展性，几千家上市公司实际上是冰山一角。国内有几千万家公司，而且不断会有新增，如何将新增的公司融入到这个额产业链中，也是一个很大挑战。此外，产业本身是动态的， 随着行业的发展，不断会有新的行业出现。如何捕捉这种行业的变化，使得整个图谱变得与时俱进，也是需要考量的点。 其三，产业链的定量推理特性。单纯定性的构建产业链知识图谱，如果没有足够的参数，仅有知识表达是无法进行推理的，推理要求知识图谱Schema具备节点间推理传导的必备参数，以及影响推理传导的其他关键参数。对于必备参数来说，从公司到产品必须有主营占比、市场占比、产能占比等数据，从产品到产品必须有成本占比和消耗占比等数据。  参考数据来源 1、申万行业：http://www.swsindex.com\n2、深交所: http://www.szse.cn\n3、上交所: http://www.sse.com.cn\nIf any question about the project or me ,see https://liuhuanyong.github.io/\n如有自然语言处理、知识图谱、事理图谱、社会计算、语言资源建设等问题或合作，可联系我： 1、我的github项目介绍：https://liuhuanyong.github.io\n2、我的csdn博客：https://blog.csdn.net/lhy2014\n3、about me:刘焕勇，lhy_in_blcu@126.com. 4、我的技术公众号:老刘说NLP,扫码一键关注：\n","permalink":"/blog/chainknowledgegraph/","summary":"点击上方图片购买课程   领域知识图谱的数据集，当前还比较缺失，而作为构建难度最大的产业链图谱领域更为空白。产业链作为产业经济学中的一个概念，是各个产业部门之间基于一定的技术经济关联，并依据特定的逻辑关系和时空布局关系客观形成的链条式关联关系形态。从本质上来说，产业链的本质是用于描述一个具有某种内在联系的企业群结构，产业链中大量存在着上下游关系和相互价值的交换，上游环节向下游环节输送产品或服务，下游环节向上游环节反馈信息。\n作者已经先后发布两大领域的实体图谱数据： 1、情报领域【武器装备知识图谱】，地址：https://github.com/liuhuanyong/QAonMilitaryKG\n2、医疗领域【医疗知识图谱】，地址： https://github.com/liuhuanyong/QASystemOnMedicalKG\n当前，为了进一步推动产业发展，本文围绕金融领域，推出面向上市公司的产业链图谱。\n项目地址：\n 一、项目构成 产业链知识图谱包括A股上市公司、行业和产品共3类实体，包括上市公司所属行业关系、行业上级关系、产品上游原材料关系、产品下游产品关系、公司主营产品、产品小类共6大类。\n通过数据处理、抽取，最终建成图谱规模数十万，其中包括上市公司4,654家，行业511个，产品95,559条、上游材料56,824条，上级行业480条，下游产品390条，产品小类52,937条，所属行业3,946条。  二、项目构建 1、实体构建\n1）上市公司\n目前上市公司已经达到四千多家，是我国重要的公司代表与行业标杆，本图谱选取上市公司作为基础实体之一。通过交易所公开信息中，可以得到上市公司代码、全称、简称、注册地址、挂牌等多个信息。\n 2）行业分类\n行业是产业链图谱中另一个核心内容，也是承载产业、公司及产品的一个媒介，通过这一领携作用，可以生产出大量的行业指数、热点行业等指标。\n目前关于行业，已经陆续出现多个行业规范，代表性的有申万三级行业分类、国民经济行业分类等。中国上市公司所属行业的分类准则是依据营业收入等财务数据为主要分类标准和依据，所采用财务数据为经过会计事务所审计并已公开披露的合并报表数据。\n2021年6月，申万发布了2021版的行业分类规范，将1级行业从28个调整至31个、2级行业从104个调整至134个、3级行业从227个调整至346个，新增1级行业美容护理等，新增2级行业，并将上市公司进行了归属。本图谱选用申万行业作为基础数据。\n 3）业务产品 业务产品主要指公司主营范围、经营的产品，用于对一个公司的定位。可以从公司的经营范围、年报等文本中进行提取得到。\n 2、关系构建 1）公司所属行业 通过公开的上市公司行业分类表，可以得到上市公司所对应的行业分类数据。  2）行业上级关系 通过公开的行业三级分类情况，可以通过组合的形式得到行业之间的上级关系数据。  3）公司主营产品关系\n上市公司的经营产品数据可以从两个方面来获得，一个是从公司简介中的经营范围中结合制定的规则进行提取，另一个是从公司每年发布的半年报、年报中进行提取。这些报告中会有按经营业务、经营产品、经营地域等几个角度对公司的营收占比进行统计，也可以通过制定规则的方式进行提取。第二种方法中，由于已经有统计数据，所以我们可以根据占比数据大小，对主营产品这一关系进行赋值。\n 4）产品之间的上下游关系\n产品之间的上下游关系，是展示产品之间传导逻辑关系的一个重要方法，包括上游原材料以及下游产品两大类。我们可以多种来获取：\n一种是基于规则模式匹配的方式进行抽取，如抽取上游原材料这一关系可以由诸如\u0026quot;a是b的原料/原材料/主要构件/重要原材料/ 上游原料\u0026quot;的模式进行抽取\u0026quot;，而下游产品，则同理可以通过\u0026quot;A是B的下游成品/产品\u0026quot;等模式进行提取。\n另一种是基于序列标注的提取。还有一种是基于现有结构化知识图谱的提取，例如已经结构化好的百科知识三元组，可以通过设定谓词及其扩展进行过滤。\n 5）产品之间的小类关系\n对于一个产品而言，其是有大小层级分类的，在缺少大类产品名称的时候，可以通过计算小类产品来得到相应指标。与产品之间的上下游数据类似，可以通过启发式规则的方式进行提取，如“A是一种B”，也可以通过字符之间的组成成分进行匹配生成，如“螺纹钢”是“精细螺纹钢”的一个大类。\n 三、项目运行 1、data文件夹下包括了本项目的数据信息：\n1)company.json:公司实体数据\n2)industry.json:行业实体数据 3)product.json:产品实体数据 4)company_industry.json:公司-行业关系数据 5)industry_industry.json:行业-行业关系数据 6)product_product.json:产品-产品数据 7)company_product.json:公司-产品数据\n2、项目运行:\npython build_graph.py\n四、项目总结 产业链图谱是众多领域知识图谱中较为棘手的一种，本项目通过现有的数据，借助数据处理、结构化提取方式，设计、构建并形成了一个节点100,718，关系边169,153的十万级别产业链图谱。就产业链图谱的构建而言，我们需要至少从以上三个方面加以考虑：\n 其一，产业链的主观性与标准性。产业链的主观性较强，不同的人对产业链的构建、产业链节点、关系的类型，产业链的颗粒度问题都有不同的理解。不同的设定会直接导致不同的应用结果。正如我们所看到的，目前存在不同的行业标准，不同的网站、机构也将公司归为不同的行业。 其二，产业链的动态性和全面性。产业链需要具备足够大的复用性和扩展性，几千家上市公司实际上是冰山一角。国内有几千万家公司，而且不断会有新增，如何将新增的公司融入到这个额产业链中，也是一个很大挑战。此外，产业本身是动态的， 随着行业的发展，不断会有新的行业出现。如何捕捉这种行业的变化，使得整个图谱变得与时俱进，也是需要考量的点。 其三，产业链的定量推理特性。单纯定性的构建产业链知识图谱，如果没有足够的参数，仅有知识表达是无法进行推理的，推理要求知识图谱Schema具备节点间推理传导的必备参数，以及影响推理传导的其他关键参数。对于必备参数来说，从公司到产品必须有主营占比、市场占比、产能占比等数据，从产品到产品必须有成本占比和消耗占比等数据。  参考数据来源 1、申万行业：http://www.swsindex.com","title":"中文金融领域知识图谱的数据集ChainKnowledgeGraph"},{"content":" 点击上方图片购买课程   ChineseSemanticKB ChineseSemanticKB,chinese semantic knowledge base, 面向中文处理的12类、百万规模的语义常用词典，包括34万抽象语义库、34万反义语义库、43万同义语义库等，可支持句子扩展、转写、事件抽象与泛化等多种应用场景。\n项目介绍 语义知识库是自然语言处理中十分重要的一个基础资源，与学术界追求算法模型不同，工业界的自然语言处理对于底层的词汇知识库、语义知识库等多种资源依赖度很高，具体体现在：\n1、具有落地场景的自然语言处理任务都是业务高度相关，一个业务需求刚进去，需要解决的是业务的词汇问题，无基础词库，无项目冷启动；\n2、规则和正则启动下的工业级应用，规则的扩展、泛化都需要底层的词汇网络做支撑；\n3、目前包括搜索、问答、舆情监控、事件分析等应用，与标签体系的运作关系密切，而这与先验的底层词汇库依赖性很强；\n4、自然语言场景越来越关注推理层面，即所谓的“认知”层面，认知背后的各种逻辑关系库，是驱动这一决策的根本途径；\n5、当前，面向中文开源词库的工作存在少量、分散的状态，无论从规模，还是质量，都需要进一步聚合；\n因此，我从过往的开源工作中进一步抽离和整理，形成了中文处理的12类、百万规模的语义常用词典，包括34万抽象语义库、34万反义语义库、43万同义语义库等，用于相关下游任务。\n项目放于dict当中，可直接下载，不建议二次建库共享，尊重开源。\n词库的类别    词库类型 词库规模 词库举例 词库应用     抽象关系库 346,048 座椅,抽象,家具 事件抽象与泛化，人民币贬值到货币贬值，再到美元贬值，可支持查询扩展、推荐等任务   反义关系库 34,380 开心@苦恼 可用于句子改写，开心改苦恼，支持数据增强，句子生成   同义关系库 424,826 开心@高兴 可用于查询扩展、数据增强，也可结合抽象关系库完成推荐等任务   简称关系库 136,081 北京大学@北大 可用于句子标准化、句子改写、实体消歧等任务   程度副词 222 极其,2.0 可用于情感强度计算，带情感色彩的句子生成   否定词 586 不,无,没有 可用于情感计算等任务   节日时间词 54 春节、五四节 可用于时间词识别等任务   量比词 7 占比、环比、同比 可用于金融领域指标类数据提取任务   数量介词 24 大约、达到、超过 可用于金融事件抽象或主干化的搭配词处理任务   停用词 3,861 ？、的、着 常规的文本特征提取等任务   修饰副词 222 所、有所 可结合程度副词完成情感强度计算等任务   情态词 77 肯定、应该、大概 可用于句子主观性计算、舆情与可信度计算    总结 1、本项目开源了一个目前可用于事件处理以及工业舆情的12类语义词库，总规模数目一百余万；\n2、本项目开源的34万抽象语义库、34万反义语义库、43万同义语义库，在作者的实际工作中【事件处理、事理抽取、事件推理】等有重要用途;\n3、中文常用语义常用词典，均来源于公开文本+人工整理+机器抽取形成，其中若有质量不高之处，可积极批评指正;\n4、中文开源事业还是要坚持做下去，尽可能地缩短自然语言处理学术界和工业界之间的鸿沟。\n If any question about the project or me ,see https://liuhuanyong.github.io/.\n如有自然语言处理、知识图谱、事理图谱、社会计算、语言资源建设等问题或合作，可联系我： 1、我的github项目介绍：https://liuhuanyong.github.io 2、我的csdn技术博客：https://blog.csdn.net/lhy2014 3、我的联系方式: 刘焕勇，中国科学院软件研究所，lhy_in_blcu@126.com. 4、我的共享知识库项目：刘焕勇，数据地平线，http://www.openkg.cn/organization/datahorizon.\n5、我的工业项目：刘焕勇，数据地平线，大规模实时事理学习系统：https://xueji.datahorizon.cn. 6、我的工业项目：刘焕勇，数据地平线，面向事件和语义的自然语言处理工具箱：https://nlp.datahorizon.cn\n ","permalink":"/blog/chinesesemantickb/","summary":"点击上方图片购买课程   ChineseSemanticKB ChineseSemanticKB,chinese semantic knowledge base, 面向中文处理的12类、百万规模的语义常用词典，包括34万抽象语义库、34万反义语义库、43万同义语义库等，可支持句子扩展、转写、事件抽象与泛化等多种应用场景。\n项目介绍 语义知识库是自然语言处理中十分重要的一个基础资源，与学术界追求算法模型不同，工业界的自然语言处理对于底层的词汇知识库、语义知识库等多种资源依赖度很高，具体体现在：\n1、具有落地场景的自然语言处理任务都是业务高度相关，一个业务需求刚进去，需要解决的是业务的词汇问题，无基础词库，无项目冷启动；\n2、规则和正则启动下的工业级应用，规则的扩展、泛化都需要底层的词汇网络做支撑；\n3、目前包括搜索、问答、舆情监控、事件分析等应用，与标签体系的运作关系密切，而这与先验的底层词汇库依赖性很强；\n4、自然语言场景越来越关注推理层面，即所谓的“认知”层面，认知背后的各种逻辑关系库，是驱动这一决策的根本途径；\n5、当前，面向中文开源词库的工作存在少量、分散的状态，无论从规模，还是质量，都需要进一步聚合；\n因此，我从过往的开源工作中进一步抽离和整理，形成了中文处理的12类、百万规模的语义常用词典，包括34万抽象语义库、34万反义语义库、43万同义语义库等，用于相关下游任务。\n项目放于dict当中，可直接下载，不建议二次建库共享，尊重开源。\n词库的类别    词库类型 词库规模 词库举例 词库应用     抽象关系库 346,048 座椅,抽象,家具 事件抽象与泛化，人民币贬值到货币贬值，再到美元贬值，可支持查询扩展、推荐等任务   反义关系库 34,380 开心@苦恼 可用于句子改写，开心改苦恼，支持数据增强，句子生成   同义关系库 424,826 开心@高兴 可用于查询扩展、数据增强，也可结合抽象关系库完成推荐等任务   简称关系库 136,081 北京大学@北大 可用于句子标准化、句子改写、实体消歧等任务   程度副词 222 极其,2.0 可用于情感强度计算，带情感色彩的句子生成   否定词 586 不,无,没有 可用于情感计算等任务   节日时间词 54 春节、五四节 可用于时间词识别等任务   量比词 7 占比、环比、同比 可用于金融领域指标类数据提取任务   数量介词 24 大约、达到、超过 可用于金融事件抽象或主干化的搭配词处理任务   停用词 3,861 ？、的、着 常规的文本特征提取等任务   修饰副词 222 所、有所 可结合程度副词完成情感强度计算等任务   情态词 77 肯定、应该、大概 可用于句子主观性计算、舆情与可信度计算    总结 1、本项目开源了一个目前可用于事件处理以及工业舆情的12类语义词库，总规模数目一百余万；","title":"中文语义常用词典ChineseSemanticKB"},{"content":" 点击上方图片购买课程   ashares 代码非原创，是对项目Ashare的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。\n功能特点  双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年 双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。 全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理 和其他行情库（tushare等）比的优点是什么？ \u0026ndash; 简单 轻量 便携 开源 Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 get_price() 看完下面例子就会了 Ashare可以用在任何需要量化研究，量化分析的场合  安装 pip install akshares \n快速上手 from ashares import get_price, # 证券代码兼容多种格式 通达信，同花顺，聚宽 # sh000001 (000001.XSHG) sz399006 (399006.XSHE) sh600519 ( 600519.XSHG )  df=get_price(\u0026#39;sh000001\u0026#39;, frequency=\u0026#39;1d\u0026#39;, count=5) #默认获取今天往前5天的日线实时行情 print(\u0026#39;上证指数日线行情\\n\u0026#39;,df) df=get_price(\u0026#39;000001.XSHG\u0026#39;,frequency=\u0026#39;1d\u0026#39;,count=5,end_date=\u0026#39;2021-04-30\u0026#39;) #可以指定结束日期，获取历史行情 print(\u0026#39;上证指数历史行情\\n\u0026#39;,df) df=get_price(\u0026#39;000001.XSHG\u0026#39;,frequency=\u0026#39;1w\u0026#39;,count=5,end_date=\u0026#39;2018-06-15\u0026#39;) #支持\u0026#39;1d\u0026#39;日, \u0026#39;1w\u0026#39;周, \u0026#39;1M\u0026#39;月  print(\u0026#39;上证指数历史周线\\n\u0026#39;,df) df=get_price(\u0026#39;sh600519\u0026#39;,frequency=\u0026#39;15m\u0026#39;,count=5) #分钟线实时行情，可用\u0026#39;1m\u0026#39;,\u0026#39;5m\u0026#39;,\u0026#39;15m\u0026#39;,\u0026#39;30m\u0026#39;,\u0026#39;60m\u0026#39; print(\u0026#39;贵州茅台15分钟线\\n\u0026#39;,df) df=get_price(\u0026#39;600519.XSHG\u0026#39;,frequency=\u0026#39;60m\u0026#39;,count=6) #分钟线实时行情，可用\u0026#39;1m\u0026#39;,\u0026#39;5m\u0026#39;,\u0026#39;15m\u0026#39;,\u0026#39;30m\u0026#39;,\u0026#39;60m\u0026#39; print(\u0026#39;贵州茅台60分钟线\\n\u0026#39;,df) Run\n#上证指数日线行情---------------------------------------------------- open close high low volume 2021-06-07 3597.14 3599.54 3600.38 3581.90 303718677.0 2021-06-08 3598.75 3580.11 3621.52 3563.25 304491470.0 2021-06-09 3576.80 3591.40 3598.71 3572.64 298323296.0 2021-06-10 3587.53 3610.86 3624.34 3584.13 318174808.0 2021-06-11 3614.11 3589.75 3614.40 3587.15 360554970.0 #贵州茅台60分钟线---------------------------------------------------- open close high low volume 2021-06-10 14:00:00 2237.00 2224.16 2245.00 2222.00 4541.53 2021-06-10 15:00:00 2222.21 2238.48 2240.34 2222.21 4146.88 2021-06-11 10:30:00 2239.00 2220.00 2244.00 2197.86 12030.00 2021-06-11 11:30:00 2220.01 2210.18 2231.80 2200.18 4868.00 2021-06-11 14:00:00 2210.10 2223.35 2224.48 2206.01 4544.00 2021-06-11 15:00:00 2223.33 2178.81 2226.80 2178.81 12529.00 \n更多   B站:大邓和他的python\n  公众号：大邓和他的python\n  知乎专栏：数据科学家\n  ","permalink":"/blog/ashares/","summary":"点击上方图片购买课程   ashares 代码非原创，是对项目Ashare的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。\n功能特点  双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年 双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。 全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理 和其他行情库（tushare等）比的优点是什么？ \u0026ndash; 简单 轻量 便携 开源 Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 get_price() 看完下面例子就会了 Ashare可以用在任何需要量化研究，量化分析的场合  安装 pip install akshares \n快速上手 from ashares import get_price, # 证券代码兼容多种格式 通达信，同花顺，聚宽 # sh000001 (000001.XSHG) sz399006 (399006.XSHE) sh600519 ( 600519.XSHG )  df=get_price(\u0026#39;sh000001\u0026#39;, frequency=\u0026#39;1d\u0026#39;, count=5) #默认获取今天往前5天的日线实时行情 print(\u0026#39;上证指数日线行情\\n\u0026#39;,df) df=get_price(\u0026#39;000001.XSHG\u0026#39;,frequency=\u0026#39;1d\u0026#39;,count=5,end_date=\u0026#39;2021-04-30\u0026#39;) #可以指定结束日期，获取历史行情 print(\u0026#39;上证指数历史行情\\n\u0026#39;,df) df=get_price(\u0026#39;000001.XSHG\u0026#39;,frequency=\u0026#39;1w\u0026#39;,count=5,end_date=\u0026#39;2018-06-15\u0026#39;) #支持\u0026#39;1d\u0026#39;日, \u0026#39;1w\u0026#39;周, \u0026#39;1M\u0026#39;月  print(\u0026#39;上证指数历史周线\\n\u0026#39;,df) df=get_price(\u0026#39;sh600519\u0026#39;,frequency=\u0026#39;15m\u0026#39;,count=5) #分钟线实时行情，可用\u0026#39;1m\u0026#39;,\u0026#39;5m\u0026#39;,\u0026#39;15m\u0026#39;,\u0026#39;30m\u0026#39;,\u0026#39;60m\u0026#39; print(\u0026#39;贵州茅台15分钟线\\n\u0026#39;,df) df=get_price(\u0026#39;600519.XSHG\u0026#39;,frequency=\u0026#39;60m\u0026#39;,count=6) #分钟线实时行情，可用\u0026#39;1m\u0026#39;,\u0026#39;5m\u0026#39;,\u0026#39;15m\u0026#39;,\u0026#39;30m\u0026#39;,\u0026#39;60m\u0026#39; print(\u0026#39;贵州茅台60分钟线\\n\u0026#39;,df) Run\n#上证指数日线行情---------------------------------------------------- open close high low volume 2021-06-07 3597.","title":"ashares库|A股市场历史行情数据"},{"content":" 点击上方图片购买课程   大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。\nPyCatFlow PyCatFlow 是一个 Python 包，用于可视化类别数据的时间变化。它的灵感来自 Bernhard Rieder 的可视化工具 RankFlow，它允许将排名列表随着时间的推移进行可视化，例如，Google 或 YouTube 上查询的搜索结果的变化。在我看来，尽管它的用户界面极简,RankFlow 是一个非常有用的工具，而且我很难为其准备数据。事实证明，这些困难主要源于“滥用”RankFlow，或者用更积极的术语来说，它源于将 RankFlow 用于其设计目的以外的其他目的。\n背景：了解RankFlow RankFlow 允许比较排名列表（随着时间的推移）。 在最简单的形式中，它需要以每列代表一个排名列表的方式排列表格数据。\nTime 1,Time 2,Time 3,Time 4 Item 1,Item 1,Item 1,Item 2 Item 2,Item 4,Item 2,Item 1 Item 3,Item 2,Item 4,Item 4 Item 4,Item 3,Item 5,Item 5 每个排名列表都可以通过权重进行补充，从而为数据添加另一层信息。 例如，如果我们采用 YouTube 搜索结果数据，则可以将观看次数、赞成票数或赞成票反对率用作权重信息。 为简单起见，示例数据仅由排名列表组成，并在以下流程图中显示结果。\n 为了加快图表的后处理速度，我决定创建一个类似于 RankFlow 的可视化工具，它非常适合不包含显式排名信息但可能包含额外分类数据的时间数据。\nPyCatFlow快速上手  如果我们用两种不同颜色，灰色和绿色分别表示男生和女生，然后每一个格子表示一类电影，横轴是男生和女生随着时间推移看的不同的电影，这样我们就可以一目了然男生和女生的喜好的变化，真的是太直观了！ PyCatFlow大大方便了我们对于类别特征随着时间变化的分析。\n准备数据\nimport pandas as pd df = pd.read_csv(\u0026#34;data/sample_data_ChatterBot_Requirements.csv\u0026#34;, sep=\u0026#39;\\t\u0026#39;) df.head(5)     column items category column order     0 2015-09-08 fuzzywuzzy A_Requirements 1   1 2015-09-08 requests A_Requirements 1   2 2015-09-08 requests-oauthlib A_Requirements 1   3 2015-09-08 pymongo A_Requirements 1   4 2015-09-08 jsondatabase A_Requirements 1    import pycatflow as pcf # Load and parse data from file fname=\u0026#34;data/sample_data_ChatterBot_Requirements.csv\u0026#34; data = pcf.read_file(fname, columns=\u0026#34;column\u0026#34;, nodes=\u0026#34;items\u0026#34;, categories=\u0026#34;category\u0026#34;, column_order=\u0026#34;column order\u0026#34;) \u0026#39;\u0026#39;\u0026#39; visualize(data, spacing=50, node_size=10, width=None, height=None, minValue=1, maxValue=10, node_scaling=\u0026#34;linear\u0026#34;, connection_type=\u0026#34;semi-curved\u0026#34;, color_startEnd=True, color_categories=True, nodes_color=\u0026#34;gray\u0026#34;, start_node_color=\u0026#34;green\u0026#34;, end_node_color=\u0026#34;red\u0026#34;, palette=None, show_labels=True, label_text=\u0026#34;item\u0026#34;, label_font=\u0026#34;sans-serif\u0026#34;, label_color=\u0026#34;black\u0026#34;, label_size=5, label_shortening=\u0026#34;clip\u0026#34;, label_position=\u0026#34;nodes\u0026#34;, line_opacity=0.5, line_stroke_color=\u0026#34;white\u0026#34;, line_stroke_width=0.5, line_stroke_thick=0.5, legend=True, sort_by=\u0026#34;frequency\u0026#34;) \u0026#39;\u0026#39;\u0026#39; viz = pcf.visualize(data, spacing=20, width=800, maxValue=20, minValue=2) #save visualization to files viz.savePng(\u0026#39;sample_viz.png\u0026#39;) viz.saveSvg(\u0026#39;sample_viz.svg\u0026#39;) #show visualization viz   # Another option is to visualize the graph with curved connections. # The implementation of this connection type draws on https://github.com/bernorieder/RankFlow viz = pcf.visualize(data, spacing=20, width=800, maxValue=20, minValue=2, connection_type=\u0026#39;curved\u0026#39;) viz   # The third option are straight connections between nodes viz = pcf.visualize(data, spacing=20, width=800, maxValue=20, minValue=2, connection_type=\u0026#39;straight\u0026#39;) # show visualization viz   代码下载 https://github.com/bumatic/PyCatFlow\n","permalink":"/blog/pycatflow/","summary":"点击上方图片购买课程   大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。\nPyCatFlow PyCatFlow 是一个 Python 包，用于可视化类别数据的时间变化。它的灵感来自 Bernhard Rieder 的可视化工具 RankFlow，它允许将排名列表随着时间的推移进行可视化，例如，Google 或 YouTube 上查询的搜索结果的变化。在我看来，尽管它的用户界面极简,RankFlow 是一个非常有用的工具，而且我很难为其准备数据。事实证明，这些困难主要源于“滥用”RankFlow，或者用更积极的术语来说，它源于将 RankFlow 用于其设计目的以外的其他目的。\n背景：了解RankFlow RankFlow 允许比较排名列表（随着时间的推移）。 在最简单的形式中，它需要以每列代表一个排名列表的方式排列表格数据。\nTime 1,Time 2,Time 3,Time 4 Item 1,Item 1,Item 1,Item 2 Item 2,Item 4,Item 2,Item 1 Item 3,Item 2,Item 4,Item 4 Item 4,Item 3,Item 5,Item 5 每个排名列表都可以通过权重进行补充，从而为数据添加另一层信息。 例如，如果我们采用 YouTube 搜索结果数据，则可以将观看次数、赞成票数或赞成票反对率用作权重信息。 为简单起见，示例数据仅由排名列表组成，并在以下流程图中显示结果。\n 为了加快图表的后处理速度，我决定创建一个类似于 RankFlow 的可视化工具，它非常适合不包含显式排名信息但可能包含额外分类数据的时间数据。\nPyCatFlow快速上手  如果我们用两种不同颜色，灰色和绿色分别表示男生和女生，然后每一个格子表示一类电影，横轴是男生和女生随着时间推移看的不同的电影，这样我们就可以一目了然男生和女生的喜好的变化，真的是太直观了！ PyCatFlow大大方便了我们对于类别特征随着时间变化的分析。\n准备数据\nimport pandas as pd df = pd.read_csv(\u0026#34;data/sample_data_ChatterBot_Requirements.csv\u0026#34;, sep=\u0026#39;\\t\u0026#39;) df.","title":"PyCatFlow库|类别数据时间序列可视化库"},{"content":" 点击上方图片购买课程   Backtrader是用于量化回测的python框架，作者是德国人Daniel Rodriguez。相比于zipline等量化回测平台，backtrader是一个易懂、易上手的量化投资框架，今天我们试着用Backtrader进行简单的均线买入卖出量化策略回溯，即5日均线上穿20日均线，则表示股票处于强势，买入。反之，处于弱势，卖出。\n安装 pip3 install backtrader \n快速入门   买入：MA5上穿MA20， 即五日价格移动平均线(MA5)和二十日价格移动平均线(MA20)， 最近处于涨势\n  卖出：MA20下穿MA5， 即五日价格移动平均线(MA5)和二十日价格移动平均线(MA20)， 最近处于涨势\n  import datetime import backtrader as bt if __name__ == \u0026#34;__main__\u0026#34;: #初始化 cerebro = bt.Cerebro() #设定初始资金 cerebro.broker.setcash(100000.0) #策略执行前的资金 print(\u0026#39;启动资金: {}\u0026#39;.format(cerebro.broker.getvalue())) #策略执行 cerebro.run() #策略执行前的资金 print(\u0026#39;启动资金: {}\u0026#39;.format(cerebro.broker.getvalue())) 启动资金: 100000.0 启动资金: 100000.0  每次股票交易，证券经纪人会收取一定的佣金，如万三（每一万元交易收三元）即0.003\ncerebro.broker.setcommission(0.003) 交易会有最小的购买/卖出份额，一般一手100股\ncerebro.addsizer(bt.sizers.FixedSize, stake=100) \n加载数据   前复权：保持当前价格不变，将历史价格进行增减，从而使股价连续。 前复权用来看盘非常方便，能一眼看出股价的历史走势，叠加各种技术指标也比较顺畅，是各种行情软件默认的复权方式。 这种方法虽然很常见，但也有两个缺陷需要注意。\n 为了保证当前价格不变，每次股票除权除息，均需要重新调整历史价格，因此其历史价格是时变的。 这会导致在不同时点看到的历史前复权价可能出现差异。 对于有持续分红的公司来说，前复权价可能出现负值。    后复权 ：保证历史价格不变，在每次股票权益事件发生后，调整当前的股票价格。 后复权价格和真实股票价格可能差别较大，不适合用来看盘。 其优点在于，可以被看作投资者的长期财富增长曲线，反映投资者的真实收益率情况。\n  在量化投资研究中普遍采用后复权数据，使用 https://github.com/mpquant/Ashare 下载的股票数据\nBacktrader将数据集称作数据流Data Feeds, 默认数据集是yahoo的股票数据，通过以下代码即可加载:\n# 创建数据 data = bt.feeds.YahooFinanceCSVData( dataname=\u0026#39;sz000725.csv\u0026#39;, datetime=0, open=1, high=2, low=3, close=4, volume=5, dtformat=(\u0026#39;%Y-%m-%d\u0026#39;), fromdate = datetime.datetime(2014, 7, 11), todate = datetime.datetime(2021, 12, 1) ) \n添加指标 backtrader中内置了许多计算值表，比如移动平滑线、MACD、RSI等等， 我们这一篇文章仅需要移动平均线MA， 设置方法如下\nself.sma5 = bt.indicators.MovingAverageSimple(self.datas[0], period=5) self.sma20 = bt.indicators.MovingAverageSimple(self.datas[0], period=20) datas[0]是第一个数据集， period是指多少天的移动平均线，比如5，则返回MA5的相关数据。\n构建策略 使用backtrader构建策略是一件很简单的事情， 继承backtrader的策略类，并重写部分方法，就能实现策略。比如\n 重写属于我们自己的log函数 均线金叉死叉策略  class TestStrategy(bt.Strategy): \u0026#34;\u0026#34;\u0026#34; 继承并构建自己的策略 \u0026#34;\u0026#34;\u0026#34; def log(self, txt, dt=None, doprint=False): \u0026#34;日志函数，用于统一输出日志格式\u0026#34; if doprint: dt = dt or self.datas[0].datetime.date(0) print(\u0026#39;{}, {}\u0026#39;.format(dt.isoformat(), txt)) def __init__(self): # 初始化相关数据 self.dataclose = self.datas[0].close self.order = None self.buyprice = None self.buycomm = None # 移动平均线初始化 self.sma5 = bt.indicators.MovingAverageSimple(self.datas[0], period=5) self.sma20 = bt.indicators.MovingAverageSimple(self.datas[0], period=20) def notify_order(self, order): \u0026#34;\u0026#34;\u0026#34; 订单状态处理 Arguments: order {object}-- 订单状态 \u0026#34;\u0026#34;\u0026#34; if order.status in [order.Submitted, order.Accepted]: # 如订单已被处理，则不用做任何事情 return # 检查订单是否完成 if order.status in [order.Completed]: if order.isbuy(): self.buyprice = order.executed.price self.buycomm = order.executed.comm self.bar_executed = len(self) # 订单因为缺少资金之类的原因被拒绝执行 elif order.status in [order.Canceled, order.Margin, order.Rejected]: self.log(\u0026#39;Order Canceled/Margin/Rejected\u0026#39;) # 订单状态处理完成，设为空 self.order = None def notify_trade(self, trade): \u0026#34;\u0026#34;\u0026#34; 交易成果 Arguments: trade {object}-- 交易状态 \u0026#34;\u0026#34;\u0026#34; if not trade.isclosed: return # 显示交易的毛利率和净利润 self.log(\u0026#39;OPERATION PROFIT, GROSS {}, NET {}\u0026#39;.format(trade.pnl, trade.pnlcomm), doprint=True) def next(self): \u0026#39;\u0026#39;\u0026#39; 下一次执行 \u0026#39;\u0026#39;\u0026#39; # 记录收盘价 self.log(\u0026#39;Close, {}\u0026#39;.format(self.dataclose[0])) # 是否正在下单，如果是的话不能提交第二次订单 if self.order: return # 是否已经买入 if not self.position: # 还没买，如果 MA5 \u0026gt; MA10 说明涨势，买入 if self.sma5[0] \u0026gt; self.sma20[0]: self.order = self.buy() else: # 已经买了，如果 MA5 \u0026lt; MA10 ，说明跌势，卖出 if self.sma5[0] \u0026lt; self.sma20[0]: self.order = self.sell() #def stop(self): #self.log(u\u0026#39;(金叉死叉有用吗) Ending Value {}\u0026#39;.format(self.broker.getvalue()), doprint=True) \n策略回测 为了验证我们开头提到的策略，咱使用了 京东方sz000725 在2014年7月11日至今2021年12月3日的股票数据，将数据命名为sz000725.csv, 我们先用pandas审查下csv\nimport pandas as pd df = pd.read_csv(\u0026#39;data/sz000725.csv\u0026#39;) df.head() | | Unnamed: 0 | date | open | high | low | close | volume | |---:|-------------:|------------:|-------:|-------:|------:|--------:|------------:| | 0 | 0 | 2.01407e+07 | 2.17 | 2.2 | 2.16 | 2.19 | 7.49341e+07 | | 1 | 1 | 2.01407e+07 | 2.18 | 2.2 | 2.17 | 2.2 | 8.10931e+07 | | 2 | 2 | 2.01407e+07 | 2.19 | 2.21 | 2.18 | 2.2 | 8.19694e+07 | | 3 | 3 | 2.01407e+07 | 2.2 | 2.21 | 2.19 | 2.21 | 7.96481e+07 | | 4 | 4 | 2.01407e+07 | 2.2 | 2.21 | 2.19 | 2.21 | 8.75106e+07 | 在backtrader中，使用GenericCSVData函数来加载csv，需要注明日期始末、open/high/low/close/volume等字段在csv中的列数(第几列，从0开始，0表示第一列)\nimport backtrader as bt import datetime if __name__ == \u0026#34;__main__\u0026#34;: # 初始化模型 cerebro = bt.Cerebro() init_cash = 100000.0 fromdate = datetime.datetime(2014, 7, 11) todate = datetime.datetime(2021, 12, 3) #构建策略 strategy = cerebro.addstrategy(TestStrategy) #每次买100股 cerebro.addsizer(bt.sizers.FixedSize, stake=100) #加载数据到模型 data = bt.feeds.GenericCSVData( dataname=\u0026#39;data/sz000725.csv\u0026#39;, fromdate=fromdate, todate=todate, dtformat=\u0026#39;%Y%m%d\u0026#39;, datetime=1, open=2, high=3, low=4, close=5, volume=6 ) cerebro.adddata(data) # 设定初始资金和佣金 cerebro.broker.setcash(init_cash) cerebro.broker.setcommission(0.003) print(\u0026#39;会不会玩了个寂寞？\u0026#39;) #策略执行前的资金 print(\u0026#39;启动资金: {}\u0026#39;.format(cerebro.broker.getvalue())) #策略执行 cerebro.run() #策略结束时的资金 print(\u0026#39;策略结束时资金: {}\u0026#39;.format(cerebro.broker.getvalue())) duration_year = (todate-fromdate).days/360 end_value = cerebro.broker.getvalue() roi = pow(end_value/init_cash, 1/duration_year)-1 print(\u0026#39;策略年华收益率: {}%\u0026#39;.format(roi*100)) 会不会玩了个寂寞？ 启动资金: 100000.0 2014-08-27, OPERATION PROFIT, GROSS -3.000000000000025, NET -4.365000000000025 2014-10-28, OPERATION PROFIT, GROSS 10.999999999999988, NET 9.568999999999988 2014-11-24, OPERATION PROFIT, GROSS -4.0000000000000036, NET -5.584000000000003 2015-01-15, OPERATION PROFIT, GROSS 52.0, NET 50.242 2015-05-08, OPERATION PROFIT, GROSS 113.00000000000003, NET 110.82500000000003 2015-07-02, OPERATION PROFIT, GROSS 25.0, NET 22.075 2015-08-25, OPERATION PROFIT, GROSS -96.0, NET -98.076 2015-11-03, OPERATION PROFIT, GROSS -8.999999999999986, NET -10.760999999999985 2015-11-30, OPERATION PROFIT, GROSS -16.000000000000014, NET -17.812000000000015 2015-12-31, OPERATION PROFIT, GROSS -8.999999999999986, NET -10.820999999999986 2016-03-14, OPERATION PROFIT, GROSS -10.999999999999988, NET -12.514999999999988 2016-04-14, OPERATION PROFIT, GROSS 0.0, NET -1.548 2016-06-16, OPERATION PROFIT, GROSS -6.000000000000005, NET -7.404000000000005 2016-07-28, OPERATION PROFIT, GROSS 0.0, NET -1.404 2016-09-08, OPERATION PROFIT, GROSS 8.000000000000007, NET 6.566000000000007 2016-12-19, OPERATION PROFIT, GROSS 31.999999999999986, NET 30.421999999999986 2017-02-10, OPERATION PROFIT, GROSS 14.000000000000012, NET 12.110000000000012 2017-02-20, OPERATION PROFIT, GROSS -4.999999999999982, NET -6.940999999999982 2017-03-06, OPERATION PROFIT, GROSS -10.999999999999988, NET -12.976999999999988 2017-05-12, OPERATION PROFIT, GROSS 44.99999999999997, NET 42.86699999999997 2017-06-01, OPERATION PROFIT, GROSS -22.00000000000002, NET -24.38200000000002 2017-07-13, OPERATION PROFIT, GROSS -14.000000000000012, NET -16.406000000000013 2017-09-18, OPERATION PROFIT, GROSS -2.9999999999999805, NET -5.31899999999998 2017-11-27, OPERATION PROFIT, GROSS 153.00000000000003, NET 150.12900000000002 2018-01-08, OPERATION PROFIT, GROSS -8.000000000000007, NET -11.360000000000007 2018-02-01, OPERATION PROFIT, GROSS 2.000000000000046, NET -1.6419999999999533 2018-03-23, OPERATION PROFIT, GROSS -25.0, NET -28.303 2018-08-07, OPERATION PROFIT, GROSS -12.00000000000001, NET -14.124000000000011 2018-09-04, OPERATION PROFIT, GROSS -27.0, NET -29.115000000000002 2018-11-26, OPERATION PROFIT, GROSS -14.000000000000012, NET -15.668000000000012 2019-01-29, OPERATION PROFIT, GROSS -4.999999999999982, NET -6.598999999999982 2019-03-15, OPERATION PROFIT, GROSS 70.00000000000001, NET 67.90000000000002 2019-04-12, OPERATION PROFIT, GROSS -15.99999999999997, NET -18.35799999999997 2019-04-29, OPERATION PROFIT, GROSS -14.999999999999991, NET -17.34299999999999 2019-06-06, OPERATION PROFIT, GROSS -5.000000000000027, NET -7.043000000000027 2019-06-19, OPERATION PROFIT, GROSS 4.999999999999982, NET 2.9509999999999823 2019-08-07, OPERATION PROFIT, GROSS 36.999999999999964, NET 34.84299999999996 2019-08-30, OPERATION PROFIT, GROSS -10.999999999999988, NET -13.282999999999987 2019-09-27, OPERATION PROFIT, GROSS -41.99999999999995, NET -44.35799999999995 2020-02-04, OPERATION PROFIT, GROSS 30.00000000000003, NET 27.67200000000003 2020-03-06, OPERATION PROFIT, GROSS 9.999999999999964, NET 7.017999999999965 2020-05-28, OPERATION PROFIT, GROSS -25.0, NET -27.301000000000002 2020-07-21, OPERATION PROFIT, GROSS 54.999999999999986, NET 52.25499999999999 2020-09-14, OPERATION PROFIT, GROSS 52.999999999999936, NET 50.002999999999936 2020-10-19, OPERATION PROFIT, GROSS -5.999999999999961, NET -8.98199999999996 2020-12-10, OPERATION PROFIT, GROSS 2.000000000000046, NET -1.083999999999954 2021-02-02, OPERATION PROFIT, GROSS 66.00000000000001, NET 62.454000000000015 2021-03-03, OPERATION PROFIT, GROSS -13.000000000000078, NET -16.67500000000008 2021-03-11, OPERATION PROFIT, GROSS -33.999999999999986, NET -37.64199999999999 2021-05-12, OPERATION PROFIT, GROSS 31.00000000000005, NET 27.12700000000005 2021-07-06, OPERATION PROFIT, GROSS -33.00000000000001, NET -36.717000000000006 2021-07-26, OPERATION PROFIT, GROSS -34.999999999999964, NET -38.70499999999996 2021-09-17, OPERATION PROFIT, GROSS -21.999999999999975, NET -25.467999999999975 2021-11-22, OPERATION PROFIT, GROSS -7.000000000000028, NET -9.979000000000028 策略结束时资金: 100120.964 策略年华收益率: 0.016108152552885002%  策略可视化 from backtrader_plotting import Bokeh from backtrader_plotting.schemes import Tradimo b = Bokeh(style=\u0026#39;bar\u0026#39;, plot_mode=\u0026#39;single\u0026#39;, scheme=Tradimo()) cerebro.plot(b)    ","permalink":"/blog/backtrader%E5%88%9D%E6%8E%A2/","summary":"点击上方图片购买课程   Backtrader是用于量化回测的python框架，作者是德国人Daniel Rodriguez。相比于zipline等量化回测平台，backtrader是一个易懂、易上手的量化投资框架，今天我们试着用Backtrader进行简单的均线买入卖出量化策略回溯，即5日均线上穿20日均线，则表示股票处于强势，买入。反之，处于弱势，卖出。\n安装 pip3 install backtrader \n快速入门   买入：MA5上穿MA20， 即五日价格移动平均线(MA5)和二十日价格移动平均线(MA20)， 最近处于涨势\n  卖出：MA20下穿MA5， 即五日价格移动平均线(MA5)和二十日价格移动平均线(MA20)， 最近处于涨势\n  import datetime import backtrader as bt if __name__ == \u0026#34;__main__\u0026#34;: #初始化 cerebro = bt.Cerebro() #设定初始资金 cerebro.broker.setcash(100000.0) #策略执行前的资金 print(\u0026#39;启动资金: {}\u0026#39;.format(cerebro.broker.getvalue())) #策略执行 cerebro.run() #策略执行前的资金 print(\u0026#39;启动资金: {}\u0026#39;.format(cerebro.broker.getvalue())) 启动资金: 100000.0 启动资金: 100000.0  每次股票交易，证券经纪人会收取一定的佣金，如万三（每一万元交易收三元）即0.003\ncerebro.broker.setcommission(0.003) 交易会有最小的购买/卖出份额，一般一手100股\ncerebro.addsizer(bt.sizers.FixedSize, stake=100) \n加载数据   前复权：保持当前价格不变，将历史价格进行增减，从而使股价连续。 前复权用来看盘非常方便，能一眼看出股价的历史走势，叠加各种技术指标也比较顺畅，是各种行情软件默认的复权方式。 这种方法虽然很常见，但也有两个缺陷需要注意。\n 为了保证当前价格不变，每次股票除权除息，均需要重新调整历史价格，因此其历史价格是时变的。 这会导致在不同时点看到的历史前复权价可能出现差异。 对于有持续分红的公司来说，前复权价可能出现负值。    后复权 ：保证历史价格不变，在每次股票权益事件发生后，调整当前的股票价格。 后复权价格和真实股票价格可能差别较大，不适合用来看盘。 其优点在于，可以被看作投资者的长期财富增长曲线，反映投资者的真实收益率情况。","title":"backtrader库|简单均线买入卖出策略"},{"content":" 点击上方图片购买课程   Dataspell——一个专为数据科学家制作的IDE。 一方面，您拥有 Jupyter 以实现最大的交互性，另一方面拥有 PyCharm 作为专业环境。\n什么是DataSpell？ Dataspell 是专为数据科学家制作的 IDE（集成开发环境）。 它由 Jetbrains ( IntelliJ Idea 和 PyCharm 背后的一家公司)开发，支持所有主要操作系统平台，包括 ARM (M1) Mac。\nDataSpell亮点：\n 原生notebook体验——如果你使用过 Jupyter 会有宾至如归的感觉。 智能代码辅助 - 有点像 Jupyter 和 PyCharm 生了孩子。 Markdown 和 JavaScript — 根据需要设置notebook样式并嵌入数据可视化。 交互式外壳 - REPL 控制台 + 语法检查。 SQL 数据库支持 — 连接到数据库、直观地检查数据、导入/导出数据等。  打开dataspell，很像PyCharm\n 创建你的第一个notebook 该过程几乎与任何其他 Jetbrains 产品相同。 点击根目录，进入新建——Jupyter Notebook：\n 我将其命名为 first_notebook.ipynb。\n 样式是个人喜好的东西，但你不能说设计不是一流的。\n在创建笔记本时，您可能已经看到创建 R 脚本和 Markdown 文件的选项。 一旦 Python 正常运行，Dataspell 将同时支持 R 和 Julia（来源）。\n现在让我们探索基本的 Python 和数据科学库是如何工作的。 下图显示了 Numpy 数组和 Pandas DataFrame：\n 正如预期的那样。 我喜欢 Numpy 数组打印为 Pandas 系列的方式，但这只是个人喜好。 Matplotlib 呢？ 这是一个真正简单的散点图：\n 我更喜欢出版物可视化的白色背景，但在晚上工作时眼睛无法长时间工作，夜晚我喜欢黑色背景。 干得好，Dataspell。\n接下来，让我们探索每个 IDE 必须具备的功能——智能编码辅助。\n智能编码辅助 我不喜欢 JupyterLab 的是缺乏编码帮助。 确实有插件，但它们的帮助远不及专业的 IDE。 我不喜欢 IDE 的是缺乏交互性。 希望 Dataspell 将是两全其美的。\n让我们尝试导入 Numpy，看看会发生什么：\n 支持自动代码提示——它完美无缺； 也支持代码未正确编写时的警告/错误，例如函数add_integers 应该返回一个整数，但它故意返回一个浮点数：\n 支持markdown 首先，将鼠标悬停在单元格上方并单击添加 Markdown 单元格：\n 另一种方法是单击代码下拉列表并将单元格类型切换为 Markdown。\n下面是一些 Markdown 代码供您尝试：\n 这是运行单元格时的样子：\n 支持数据库 作为数据科学家，您几乎每天都必须建立和管理数据库连接。 当 SQL 写成字符串时，调试很长的 SQL 行并不容易。 Dataspell 有一个解决方案。以下是使用 sqlite3 包建立连接、创建数据库和表的方法：\n 您现在可以像往常一样插入数据：\n Dataspell 的特别之处在于无需离开 IDE 或编写不必要的查询即可浏览数据库的选项。 只需双击数据库，就会打开一个新的侧窗口。从那里，您可以轻松单击任何感兴趣的表格，在单独的选项卡中浏览它：\n ","permalink":"/blog/dataspell%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%BC%96%E8%BE%91%E5%99%A8/","summary":"点击上方图片购买课程   Dataspell——一个专为数据科学家制作的IDE。 一方面，您拥有 Jupyter 以实现最大的交互性，另一方面拥有 PyCharm 作为专业环境。\n什么是DataSpell？ Dataspell 是专为数据科学家制作的 IDE（集成开发环境）。 它由 Jetbrains ( IntelliJ Idea 和 PyCharm 背后的一家公司)开发，支持所有主要操作系统平台，包括 ARM (M1) Mac。\nDataSpell亮点：\n 原生notebook体验——如果你使用过 Jupyter 会有宾至如归的感觉。 智能代码辅助 - 有点像 Jupyter 和 PyCharm 生了孩子。 Markdown 和 JavaScript — 根据需要设置notebook样式并嵌入数据可视化。 交互式外壳 - REPL 控制台 + 语法检查。 SQL 数据库支持 — 连接到数据库、直观地检查数据、导入/导出数据等。  打开dataspell，很像PyCharm\n 创建你的第一个notebook 该过程几乎与任何其他 Jetbrains 产品相同。 点击根目录，进入新建——Jupyter Notebook：\n 我将其命名为 first_notebook.ipynb。\n 样式是个人喜好的东西，但你不能说设计不是一流的。\n在创建笔记本时，您可能已经看到创建 R 脚本和 Markdown 文件的选项。 一旦 Python 正常运行，Dataspell 将同时支持 R 和 Julia（来源）。","title":"DataSpell数据挖掘编辑器"},{"content":" 点击上方图片购买课程    参考自阮一峰技术周刊\nsrc:https://github.com/ruanyf/weekly\n freepn https://www.freepn.org/ 免费点对点的科学上网 {{ \u0026lt; figure src=\u0026ldquo;img/freepn.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} Sharkle 点击圆圈，随机打开一个有趣的网站。\n{{ \u0026lt; figure src=\u0026ldquo;img/Sharkle.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n免费的 Python 书籍 https://github.com/pamoroso/free-python-books\n这个仓库收集网上的 Python 免费书籍（英文）。\nCharts.css https://chartscss.org/\n一个只使用 CSS 的图形库（不需要 JS），可以把\u0026lt;table\u0026gt;标签变成折线图、直方图或其他图形。\n{{ \u0026lt; figure src=\u0026ldquo;img/charts.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nfocalboard https://www.focalboard.com/\n桌面的看板软件，类似 Trello，可以用来管理待办事项。\n{{ \u0026lt; figure src=\u0026ldquo;img/focalboard.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nbuzzing https://www.buzzing.cc/\n用中文浏览国外社交媒体里的热门讨论。母语快速导读， 感兴趣再进原文深度阅读\n数据显示：使用母语导读比直接浏览英文导读更容易快速找到感兴趣的内容，继而有效提升英文阅读量。\n{{ \u0026lt; figure src=\u0026ldquo;img/buzzing.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nray https://ray.so/\n可以生成漂亮的代码截图，颜色、阴影、背景都可以调整。\n{{ \u0026lt; figure src=\u0026ldquo;img/raycode.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nArchivy https://github.com/archivy/archivy/\n开源的知识库软件，可以自己本地架设，管理个人笔记。\nmultiavatar https://multiavatar.com/\n{{ \u0026lt; figure src=\u0026ldquo;img/multiavatar.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} 一个在线工具，可以根据输入的文字，生成用户头像图片（ avatar）。\nbest-resume-ever https://github.com/salomonelli/best-resume-ever\n基于 Web 的简历模板，可以生成网页简历，然后用浏览器打印成 PDF 文件。\n配置好该项目后，可以一键同时生成多种风格的简历 {{ \u0026lt; figure src=\u0026ldquo;img/best-resume-ever.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\npersonal-management-system https://github.com/Volmarg/personal-management-system\n一个 Web 开源应用，可以自己搭建服务，将个人信息（笔记、代码事项、密码、日程安排、联系人等等）放在一个地方管理。\n{{ \u0026lt; figure src=\u0026ldquo;img/personalmanagement.jpeg\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nLinkAce https://github.com/Kovah/LinkAce/ 自托管的网络书签应用。 {{ \u0026lt; figure src=\u0026ldquo;img/linkace.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\npap.er https://paper.meiyuan.in/ 一个 Mac 电脑的桌面应用，每天获取来自全球的新鲜精美壁纸。 {{ \u0026lt; figure src=\u0026ldquo;img/paper.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nSVG Favicon Maker https://formito.com/tools/favicon\n在线制作 SVG 格式的 Favicon {{ \u0026lt; figure src=\u0026ldquo;img/svgmaker.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\ncodedmails https://codedmails.com/\n提供邮件html模板下载 {{ \u0026lt; figure src=\u0026ldquo;img/codedmails.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n","permalink":"/blog/techweekly04/","summary":"点击上方图片购买课程    参考自阮一峰技术周刊\nsrc:https://github.com/ruanyf/weekly\n freepn https://www.freepn.org/ 免费点对点的科学上网 {{ \u0026lt; figure src=\u0026ldquo;img/freepn.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}} Sharkle 点击圆圈，随机打开一个有趣的网站。\n{{ \u0026lt; figure src=\u0026ldquo;img/Sharkle.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\n免费的 Python 书籍 https://github.com/pamoroso/free-python-books\n这个仓库收集网上的 Python 免费书籍（英文）。\nCharts.css https://chartscss.org/\n一个只使用 CSS 的图形库（不需要 JS），可以把\u0026lt;table\u0026gt;标签变成折线图、直方图或其他图形。\n{{ \u0026lt; figure src=\u0026ldquo;img/charts.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nfocalboard https://www.focalboard.com/\n桌面的看板软件，类似 Trello，可以用来管理待办事项。\n{{ \u0026lt; figure src=\u0026ldquo;img/focalboard.gif\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nbuzzing https://www.buzzing.cc/\n用中文浏览国外社交媒体里的热门讨论。母语快速导读， 感兴趣再进原文深度阅读\n数据显示：使用母语导读比直接浏览英文导读更容易快速找到感兴趣的内容，继而有效提升英文阅读量。\n{{ \u0026lt; figure src=\u0026ldquo;img/buzzing.png\u0026rdquo; width=\u0026ldquo;800\u0026rdquo; \u0026gt;}}\nray https://ray.so/\n可以生成漂亮的代码截图，颜色、阴影、背景都可以调整。\n{{ \u0026lt; figure src=\u0026ldquo;img/raycode.","title":"TechWeekly-04 | 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程     最近在google搜Python在经管中的内容，意外发现专著： 在会计研究中使用Python进行文本分析，内容特别新，专著中含有Python代码，也有会计领域文本分析的应用成果。跟 视频专栏课| Python网络爬虫文本分析 结合起来，特别适合会计领域python初学者，将文本分析应用于会计研究中。\n Vic Anand, Khrystyna Bochkay, Roman Chychyla and Andrew Leone (2020 isbn), “Using Python for Text Analysis in Accounting Research (forthcoming)”, Foundations and Trends ® in Accounting: Vol. xx, No. xx, pp 1–18. DOI: 10.1561/XXXXXXXXX.\n http://dx.doi.org/10.1561/1400000062\n摘要 会计研究中文本数据的重要性显着增加。为了帮助研究人员理解和使用文本数据，本专著定义和描述了文本数据的常用度量，然后演示了使用 Python 编程语言收集和处理文本数据。该专著充满了示例代码，这些代码复现了最近研究论文中的文本分析任务。\n在专著的第一部分，我们提供了 Python 入门指南。我们首先描述 Anaconda，它是 Python 的一个发行版，它提供了文本分析所需的库及其安装。然后，我们介绍了 Jupyter notebook，这是一种改进研究工作流程并促进可复制研究的编程环境。接下来，我们将教授 Python 编程的基础知识，并演示使用 Pandas 包中的表格数据的基础知识。\n专著的第二部分侧重于会计研究中常用的具体文本分析方法和技术。我们首先介绍正则表达式，这是一种用于在文本中查找模式的复杂语言。然后我们将展示如何使用正则表达式从文本中提取特定部分。接下来，我们介绍将文本数据（非结构化数据）转换为表示感兴趣变量（结构化数据）的数值度量的想法。具体来说，我们介绍了基于字典的方法\n 测量文档情绪， 计算文本复杂度， 识别前瞻性句子和风险披露， 收集文本中的信息量，以及 计算不同文本片段的相似度。  对于这些任务中的每一个，我们引用相关论文并提供代码片段来实现这些论文中的相关指标。\n最后，专著的第三部分侧重于自动化文本数据的收集。我们介绍了网页抓取并提供了从 EDGAR 下载文件的代码。\n关键词 文本分析，数据收集，Python，自然语言处理\nUsing Python for Text Analysis in Accounting Research (forthcoming)目录 1. 引言 2. 在电脑中配置Python  2.1 Python包的作用 2.2 Anaconda软件版本 2.3 安装Anaconda 2.4 Anaconda的使用  3. Jupyter Notebook  3.1 案例 JupyterLab: Jupyter Notebook的开发版(最新版) 如何启动JupyterLab 在JupyterLab中写代码 Markdown标记语言与格式化文本代码块  4. Python编程语言简要介绍  4.1 基础知识 4.2 变量与数据类型 4.3 操作 4.4 print函数 4.5 控制流 4.6 函数 4.7 集合类型数据-list、tuple、dictionaries 4.8 处理字符串  5. 处理表数据： Pandas包  5.1 Pandas使用场景 5.2 导入import 声明 5.3 加载数据、导出数据 5.4 在pandas中查看数据 5.5 筛选数据 5.6 创建新列（字段） 5.7 删除列（字段）、列（字段）名重命名 5.8 对数据排序 5.9 合并数据  6 正则表达式介绍  6.1 查看文本中的模式 6.2 字符与字符集 6.3 Regex的定位与边界 6.4 模式匹配次数限定 6.5 分组 \u0026hellip;  7. 基于字典法 的文本分析  7.1 字典法文本分析的优势 7.2 理解字典 7.3 识别文本中的词语与句子 7.4 词干化、词形还原 7.5 词语权重 7.6 基于词典法的词频统计函数  8. 量化文本复杂度  8.1 理解文本复杂度 8.2 计算文本字符长度 8.3 使用Fog指数测量文本可读性 8.4 使用BOG指数测量文本可读性  9. 句子结构与分类  9.1 识别前瞻性陈述forward-looking sentences 9.2 使用字典法做文本分类 9.3 识别句子的主语与宾语 9.4 识别命名实体 9.5 词性标注与命名实体识别任务  10. 测量文本相似度  10.1 使用相似度比较文本 10.2 长文本使用cosine相似度计算相似度 10.3 短文本使用Levenshtein距离计算相似度 10.4 使用word2vec词嵌入计算语义相似度  11. 识别文本中的具体信息  11.1 文本识别与抽取 11.2 案例: 从10-k filing中提取出MD\u0026amp;A 11.3 案例: 从10-k html网页文件中提取处MD\u0026amp;A 11.4 从XBRL金融报告中抽取文本  12. 从网络中收集数据  12.1 在互联网中采集数据 12.2 证券交易委员会的EDGAR数据 12.3 网络爬虫 12.4 关于api接口  致谢 参考文献(部分)  Bentley, J. W., T. E. Christensen, K. H. Gee, and B. C. Whipple. 2018. “Disentangling managers’ and analysts’ non-GAAP reporting”. Journal of Accounting Research. 56(4): 1039–1081.\nBlankespoor, E. 2019. “The impact of information processing costs on ﬁrm disclosure choice: Evidence from the XBRL mandate”. Journal of Accounting Research. 57(4): 919–967.\nBochkay, K., R. Chychyla, and D. Nanda. 2019. “Dynamics of CEO disclosure style”. The Accounting Review. 94(4): 103–140.\nBochkay, K., J. Hales, and S. Chava. 2020. “Hyperbole or reality? Investor response to extreme language in earnings conference calls”. The Accounting Review. 95(2): 31–60.\nBochkay, K. and C. B. Levine. 2019. “Using MD\u0026amp;A to improve earnings forecasts”. Journal of Accounting, Auditing \u0026amp; Finance. 34(3): 458482.\nBonsall, S. B., A. J. Leone, B. P. Miller, and K. Rennekamp. 2017. “A plain English measure of ﬁnancial reporting readability”. Journal of Accounting and Economics. 63(2): 329–357.\nBozanic, Z., D. T. Roulstone, and A. Van Buskirk. 2018. “Management earnings forecasts and other forward-looking statements”. Journal of Accounting and Economics. 65(1): 1–20.\nChychyla, R., A. J. Leone, and M. Minutti-Meza. 2019. “Complexity of ﬁnancial reporting standards and accounting expertise”. Journal of Accounting and Economics. 67(1): 226–253.\nGow, I. D., D. F. Larcker, and A. A. Zakolyukina. 2019. “Non-answers during conference calls”. Chicago Booth Research Paper. (19-01). Guay, W., D. Samuels, and D. Taylor. 2016. “Guiding through the Fog:Financial statement complexity and voluntary disclosure”. Journal of Accounting and Economics. 62(2): 234–269.\nHeitmann, M., C. Siebert, J. Hartmann, and C. Schamp. 2020. “More Than a Feeling: Benchmarks for Sentiment Analysis Accuracy”. Working Paper, https://papers.ssrn.com/sol3/papers.cfm?abstract_ id=3489963.\n 本书下载 https://github.com/hiDaDeng/DaDengAndHisPython/blob/master/Using_Python_For_Text_Analysis_In_Accounting_Research.pdf\n","permalink":"/blog/%E5%9C%A8%E4%BC%9A%E8%AE%A1%E7%A0%94%E7%A9%B6%E4%B8%AD%E4%BD%BF%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/","summary":"点击上方图片购买课程     最近在google搜Python在经管中的内容，意外发现专著： 在会计研究中使用Python进行文本分析，内容特别新，专著中含有Python代码，也有会计领域文本分析的应用成果。跟 视频专栏课| Python网络爬虫文本分析 结合起来，特别适合会计领域python初学者，将文本分析应用于会计研究中。\n Vic Anand, Khrystyna Bochkay, Roman Chychyla and Andrew Leone (2020 isbn), “Using Python for Text Analysis in Accounting Research (forthcoming)”, Foundations and Trends ® in Accounting: Vol. xx, No. xx, pp 1–18. DOI: 10.1561/XXXXXXXXX.\n http://dx.doi.org/10.1561/1400000062\n摘要 会计研究中文本数据的重要性显着增加。为了帮助研究人员理解和使用文本数据，本专著定义和描述了文本数据的常用度量，然后演示了使用 Python 编程语言收集和处理文本数据。该专著充满了示例代码，这些代码复现了最近研究论文中的文本分析任务。\n在专著的第一部分，我们提供了 Python 入门指南。我们首先描述 Anaconda，它是 Python 的一个发行版，它提供了文本分析所需的库及其安装。然后，我们介绍了 Jupyter notebook，这是一种改进研究工作流程并促进可复制研究的编程环境。接下来，我们将教授 Python 编程的基础知识，并演示使用 Pandas 包中的表格数据的基础知识。\n专著的第二部分侧重于会计研究中常用的具体文本分析方法和技术。我们首先介绍正则表达式，这是一种用于在文本中查找模式的复杂语言。然后我们将展示如何使用正则表达式从文本中提取特定部分。接下来，我们介绍将文本数据（非结构化数据）转换为表示感兴趣变量（结构化数据）的数值度量的想法。具体来说，我们介绍了基于字典的方法\n 测量文档情绪， 计算文本复杂度， 识别前瞻性句子和风险披露， 收集文本中的信息量，以及 计算不同文本片段的相似度。  对于这些任务中的每一个，我们引用相关论文并提供代码片段来实现这些论文中的相关指标。","title":"在会计研究中使用Python进行文本分析"},{"content":" 点击上方图片购买课程   多媒体文件的下载包括\n 图片 音频 视频 文件  代码非常简单，只要准备好多媒体文件链接url和存储路径file即可，代码如下\nimport requests def download(url, file): \u0026#34;\u0026#34;\u0026#34; 下载多媒体及文件 url： 多媒体文件链接（结尾有文件格式名） file: 存储文件的路径（结尾有文件格式名） \u0026#34;\u0026#34;\u0026#34; resp = requests.get(url) #获取到二进制数据 binarydata = resp.content #以二进制形式将数据流存入fname中 with open(file, \u0026#39;wb\u0026#39;) as f: f.write(binarydata) 案例数据 视频由于体积太大未能上传至我的博客服务器，我为大家准备了音频、pdf文件、图片文件三种数据类型。其实不论什么类型，只要是文件，均可使用上面的download函数下载。\npics = [\u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/about-page.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/about-us.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/AI_Knowledge_intro.png\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/banner-1.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/blog-post-1.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/blog-post-2.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/blog-post-3.jpg\u0026#39;] pdfs=[\u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/网络爬虫.pdf\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/相似度.pdf\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/中文可读性.pdf\u0026#39;] musics=[\u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/Elastic.mp3\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/HAPPYBEL.WAV\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/MU14.WAV\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/typing.wav\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/Water.mp3\u0026#39;] \n批量下载 以pdf为例\nimport requests pdfs=[\u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/网络爬虫.pdf\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/相似度.pdf\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/中文可读性.pdf\u0026#39;] def download(url, file): resp = requests.get(url) binarydata = resp.content with open(file, \u0026#39;wb\u0026#39;) as f: f.write(binarydata) for link in pdfs: #注意，代码运行前所在文件夹内新建一个data文件夹 filepath=\u0026#39;data/\u0026#39;+url.spit(\u0026#39;/\u0026#39;)[-1] download(url=link, file=filepath) ","permalink":"/blog/multimediaexamples/","summary":"点击上方图片购买课程   多媒体文件的下载包括\n 图片 音频 视频 文件  代码非常简单，只要准备好多媒体文件链接url和存储路径file即可，代码如下\nimport requests def download(url, file): \u0026#34;\u0026#34;\u0026#34; 下载多媒体及文件 url： 多媒体文件链接（结尾有文件格式名） file: 存储文件的路径（结尾有文件格式名） \u0026#34;\u0026#34;\u0026#34; resp = requests.get(url) #获取到二进制数据 binarydata = resp.content #以二进制形式将数据流存入fname中 with open(file, \u0026#39;wb\u0026#39;) as f: f.write(binarydata) 案例数据 视频由于体积太大未能上传至我的博客服务器，我为大家准备了音频、pdf文件、图片文件三种数据类型。其实不论什么类型，只要是文件，均可使用上面的download函数下载。\npics = [\u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/about-page.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/about-us.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/AI_Knowledge_intro.png\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/banner-1.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/blog-post-1.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/blog-post-2.jpg\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pic/blog-post-3.jpg\u0026#39;] pdfs=[\u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/网络爬虫.pdf\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/相似度.pdf\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/中文可读性.pdf\u0026#39;] musics=[\u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/Elastic.mp3\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/HAPPYBEL.WAV\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/MU14.WAV\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/typing.wav\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/music/Water.mp3\u0026#39;] \n批量下载 以pdf为例\nimport requests pdfs=[\u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/网络爬虫.pdf\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/相似度.pdf\u0026#39;, \u0026#39;https://hidadeng.github.io/blog/multimediaexamples/pdf/中文可读性.pdf\u0026#39;] def download(url, file): resp = requests.","title":"使用Python采集多媒体文件数据"},{"content":" 点击上方图片购买课程   pyjanitor是参照R语言janitor包语法，为Python量身定制的数据清洗包,即可清洗数据，又可让代码简洁干净。\n安装 !pip3 install pyjanitor \n为什么用janitor？ 数据预处理通常由一系列步骤组成，这些步骤涉及将原始数据转换为可理解/可用的格式。这一系列的步骤需要按照一定的顺序运行才能成功。我们以基础数据文件为起点，对其执行操作，例如删除空行/空行、用其他值替换它们、添加/重命名/删除数据列、过滤行等。更正式地说，这些步骤以及它们的关系和依赖关系通常被称为有向无环图 (DAG)。\npandas API 对 Python 数据科学生态系统非常宝贵，它实现了方法子集的方法链作为 API 的一部分。例如，重置索引 (.reset_index())、删除空值 (.dropna()) 等都是通过适当的 pd.DataFrame 方法调用来完成的。\n受 R 统计语言生态系统 dplyr 包的易用性和表达能力的启发，我们将 pyjanitor 开发为语法包，用于为 Pandas 用户表达数据处理 DAG。\n为了实现这一点，我们需要调用声明式的操作 替换为允许 逻辑顺序的方法链。让我们看看下面带注释的示例。首先，这里是数据清理路径的文字描述：\n 创建一个dataframe。 删除一列。 删除两个特定列中具有空值的行。 重命名另外两列。 添加一个新列。  让我们导入一些库并从本示例的一些示例数据开始：\n# Libraries import numpy as np import pandas as pd import janitor # Sample Data curated for this example company_sales = { \u0026#39;SalesMonth\u0026#39;: [\u0026#39;Jan\u0026#39;, \u0026#39;Feb\u0026#39;, \u0026#39;Mar\u0026#39;, \u0026#39;April\u0026#39;], \u0026#39;Company1\u0026#39;: [150.0, 200.0, 300.0, 400.0], \u0026#39;Company2\u0026#39;: [180.0, 250.0, np.nan, 500.0], \u0026#39;Company3\u0026#39;: [400.0, 500.0, 600.0, 675.0] } \n常见的Pandas实现方式 下面是传统的Pandas方式\n# The Pandas Way # 1. 创建一个dataframe df = pd.DataFrame(company_sales) # 2.删除一列。 Say \u0026#39;Company1\u0026#39; del df[\u0026#39;Company1\u0026#39;] # 3. 删除两个特定列中具有空值的行。 \u0026#39;Company2\u0026#39; and \u0026#39;Company3\u0026#39; df = df.dropna(subset=[\u0026#39;Company2\u0026#39;, \u0026#39;Company3\u0026#39;]) # 4. 重命名另外两列。 将\u0026#39;Company2\u0026#39; 改为 \u0026#39;Amazon\u0026#39;； 将 \u0026#39;Company3\u0026#39; 改为 \u0026#39;Facebook\u0026#39; df = df.rename({\u0026#39;Company2\u0026#39;: \u0026#39;Amazon\u0026#39;, \u0026#39;Company3\u0026#39;: \u0026#39;Facebook\u0026#39;}, axis=1) # 5. 添加一个新列 \u0026#39;Google\u0026#39; df[\u0026#39;Google\u0026#39;] = [450.0, 550.0, 800.0] df | | SalesMonth | Amazon | Facebook | Google | | ---: | :--------- | -----: | -------: | -----: | | 0 | Jan | 180 | 400 | 450 | | 1 | Feb | 250 | 500 | 550 | | 3 | April | 500 | 675 | 800 | \n稍微高级一点Pandas实现方式 稍微高级一点的用户可能会利用函数式 API：\ndf = ( pd.DataFrame(company_sales) .drop(columns=\u0026#34;Company1\u0026#34;) .dropna(subset=[\u0026#34;Company2\u0026#34;, \u0026#34;Company3\u0026#34;]) .rename(columns={\u0026#34;Company2\u0026#34;: \u0026#34;Amazon\u0026#34;, \u0026#34;Company3\u0026#34;:\u0026#34;Facebook\u0026#34;}) .assign(Google=[450.0, 550.0, 800.0]) ) df | | SalesMonth | Amazon | Facebook | Google | | ---: | :--------- | -----: | -------: | -----: | | 0 | Jan | 180 | 400 | 450 | | 1 | Feb | 250 | 500 | 550 | | 3 | April | 500 | 675 | 800 | \nPyJanitor实现方式 借助pyjanitor库，我们可以使用方法名链式代码\ndf = ( pd.DataFrame(company_sales) .remove_columns([\u0026#39;Company1\u0026#39;]) .dropna(subset=[\u0026#34;Company2\u0026#34;, \u0026#34;Company3\u0026#34;]) .rename_column(\u0026#34;Company2\u0026#34;, \u0026#34;Amazon\u0026#34;) .rename_column(\u0026#34;Company3\u0026#34;, \u0026#34;Facebook\u0026#34;) .add_column(\u0026#34;Google\u0026#34;, [450.0, 550.0, 800.0]) ) df | | SalesMonth | Amazon | Facebook | Google | | ---: | :--------- | -----: | -------: | -----: | | 0 | Jan | 180 | 400 | 450 | | 1 | Feb | 250 | 500 | 550 | | 3 | April | 500 | 675 | 800 | 因此，pyjanitor 的词源与“清洁度”有双重关系。 首先，它是关于使用方便的数据清理例程扩展 Pandas。 其次，它是关于为常见的 Pandas 例程提供更清晰、方法链接、基于动词的 API。\npyjanitor更多功能  清理列名（多索引是可能的！） 删除空行和列 识别重复条目 将列编码为分类 将数据拆分为特征和目标（用于机器学习） 添加、删除和重命名列 将多列合并为一列 日期转换（从 matlab、excel、unix）到 Python 日期时间格式 将具有分隔的分类值的单个列扩展为虚拟编码变量 基于分隔符连接和分离列 用于根据列上的查询过滤数据框的语法糖 金融、生物、化学、工程和 pyspark 的实验子模块  代码下载 https://github.com/hiDaDeng/DaDengAndHisPython/blob/master/20211125pyjanitor学习.ipynb\n","permalink":"/blog/pyjanitor%E5%AD%A6%E4%B9%A0/","summary":"点击上方图片购买课程   pyjanitor是参照R语言janitor包语法，为Python量身定制的数据清洗包,即可清洗数据，又可让代码简洁干净。\n安装 !pip3 install pyjanitor \n为什么用janitor？ 数据预处理通常由一系列步骤组成，这些步骤涉及将原始数据转换为可理解/可用的格式。这一系列的步骤需要按照一定的顺序运行才能成功。我们以基础数据文件为起点，对其执行操作，例如删除空行/空行、用其他值替换它们、添加/重命名/删除数据列、过滤行等。更正式地说，这些步骤以及它们的关系和依赖关系通常被称为有向无环图 (DAG)。\npandas API 对 Python 数据科学生态系统非常宝贵，它实现了方法子集的方法链作为 API 的一部分。例如，重置索引 (.reset_index())、删除空值 (.dropna()) 等都是通过适当的 pd.DataFrame 方法调用来完成的。\n受 R 统计语言生态系统 dplyr 包的易用性和表达能力的启发，我们将 pyjanitor 开发为语法包，用于为 Pandas 用户表达数据处理 DAG。\n为了实现这一点，我们需要调用声明式的操作 替换为允许 逻辑顺序的方法链。让我们看看下面带注释的示例。首先，这里是数据清理路径的文字描述：\n 创建一个dataframe。 删除一列。 删除两个特定列中具有空值的行。 重命名另外两列。 添加一个新列。  让我们导入一些库并从本示例的一些示例数据开始：\n# Libraries import numpy as np import pandas as pd import janitor # Sample Data curated for this example company_sales = { \u0026#39;SalesMonth\u0026#39;: [\u0026#39;Jan\u0026#39;, \u0026#39;Feb\u0026#39;, \u0026#39;Mar\u0026#39;, \u0026#39;April\u0026#39;], \u0026#39;Company1\u0026#39;: [150.","title":"pyjanitor数据分析清洁包"},{"content":" 点击上方图片购买课程   这是北京语言大学智能计算机辅助语言学习（ICALL）研究组维护的文本可读性阅读清单。\n   目录     1. 综述   2. 相关研究   2.1 中文可读性   2.2 其他语言可读性   3. 可读性分析工具   4 中文数据    1. 综述   Klare, G. R. (1974–1975). Assessing readability. Reading Research Quarterly.\n  吴思远, 蔡建永, 于东, 江新. 2018. 文本可读性的自动分析研究综述. 中文信息学报.\n  郭凯、金檀、陆小飞. 2018. 文本难度调控的研究与实践——从可读公式、多维特征到智能改编. 外语测试与教学.\n  2. Related Task 2.1 Research on Chinese Readability   Yao-Ting Sung, Tao Hsing Chang. 2016. CRIE: An automated analyzer for Chinese texts. Behavior Research Methods.\n  Yao-Ting Sung, Weic Lin, SB Dyson, Kuoen Chang. 2015. Leveling L2 Texts Through Readability: Combining Multilevel Linguistic Features with the CEFR. *The Modern Language Journal.\n  LAU Tak Pang. 2006. Chinese Readability Analysis and its Applications on the Internet. Master\u0026rsquo;s thesis, The Chinese University of Hong Kong.\n  Yu Qiaona. 2016.Defining and Assessing Chinese Syntactic Complexity via TC-Units. Doctor\u0026rsquo;s thesis, University of Hawaii at Manoa.\n  2.2 Research on Readability in Other Languages   Arthur C. Graesser, Danielle S. McNamara. 2004. Coh-Metrix: Analysis of text on cohesion and language. Behavior Research Methods, Instruments, \u0026amp; Computers.\n  Arthur C. Graesser, Danielle S. McNamara. 2011. Coh-Metrix: Providing multilevel analysis of text characteristic. Educational Researcher.\n  Xiaofei Lu. 2010. Automatic analysis of syntactic complexity in second language writing. International Journal of Corpus Linguistics.\n  Xiaofei Lu. 2013. A corpus-based comparison of syntactic complexity in NNS and NS university students’ writing. Automatic Treatment and Analysis of Learner Corpus Data\n  陆小飞, 许琪. 2016. 二语句法复杂度分析器及其在二语写作研究中的应用. 外语教学与研究\n  Xiaofei Lu. 2017. Automated measurement of syntactic complexity in corpus-based L2 writing research and implications for writing assessment. Language Testing. Language Testing\n  Jin, T., Lu, X., \u0026amp; Ni, J. (2020). Syntactic complexity in adapted teaching materials: Differences among grade levels and implications for benchmarking. The Modern Language Journal\n  Menglin Xia ,Ekaterina Kochmar ,Ted Briscoe. 2016. Text Readability Assessment for Second Language Learners. Proceedings of the 11th Workshop on Innovative Use of NLP for Building Educational Applications\n  Xiaobin Chen, Detmar Meurers. 2016. CTAP: A Web-Based Tool Supporting Automatic Complexity Analysis. Proceedings of the Workshop on Computational Linguistics for Linguistic Complexity.\n  Chen, X. 2018. Automatic Analysis of Linguistic Complexity and Its Application in Language Learning Research, PhD thesis in computational linguistics, Eberhard Karls Universität Tübingen.\n  Nadezda Okinina, Jennifer-Carmen Frey. CTAP for Italian: Integrating Components for the Analysis of Italian into a Multilingual Linguistic Complexity Analysis Tool.\n  Zarah Weiss, Z. 2017. Using Measures of Linguistic Complexity to Assess German L2 Proficiency in Learner Corpora under Consideration of Task-Effects. M.A. Thesis in Computational Linguistics.\n  Weiss Z, Meurers D. 2019. Broad Linguistic Modeling is Beneficial for German L2 Proficiency Assessment. Widening the Scope of Learner Corpus Research, Selected Papers from the Fourth Learner Corpus Research Conference.\n  S Tonelli, KT Manh, E Pianta. 2012. Making readability indices readable. Proceedings of the First Workshop on Predicting and Improving Text Readability for target reader populations.\n  Lijun Feng. 2010. Automatic Readability Assessment. *Doctor\u0026rsquo;s thesis, City University of New York.\n  3. Readability Analysis Tools   Lu Xiaofei (2010). Automatic analysis of syntactic complexity in second language writing. International Journal of Corpus Linguistics. (Web-based L2 Syntactical Complexity Analyzer (L2SCA))\n  Yao-Ting Sung, Tao Hsing Chang. 2016. CRIE: An automated analyzer for Chinese texts. Behavior Research Methods. (文本可读性指标自动化分析系统(Chinese Readability Index Explorer, CRIE))\n  Arthur C. Graesser, Danielle S. McNamara . 2011. Coh-Metrix: Providing multilevel analysis of text characteristic. Educational Researcher. (中文文本自动化分析系统: Coh-Metrix)\n  Xiaobin Chen, Detmar Meurers. 2016. CTAP: A Web-Based Tool Supporting Automatic Complexity Analysis. Proceedings of the Workshop on Computational Linguistics for Linguistic Complexity (CL4LC)). (CTAP)\n  金檀、陆小飞、郭凯、李百川. 2018. Eng-Editor: An online English text evaluation and adaptation system. 广州：语言数据网(languagedata.net/tester). ( 英语阅读分级指难针 )\n  4. Chinese Data Resources  汉语词法难度分级表 汉语句法难度分级表 国际汉语教师语法教学手册 国际汉语教师中级语法教学手册  ","permalink":"/blog/%E6%96%87%E6%9C%AC%E5%8F%AF%E8%AF%BB%E6%80%A7textreadability/","summary":"点击上方图片购买课程   这是北京语言大学智能计算机辅助语言学习（ICALL）研究组维护的文本可读性阅读清单。\n   目录     1. 综述   2. 相关研究   2.1 中文可读性   2.2 其他语言可读性   3. 可读性分析工具   4 中文数据    1. 综述   Klare, G. R. (1974–1975). Assessing readability. Reading Research Quarterly.\n  吴思远, 蔡建永, 于东, 江新. 2018. 文本可读性的自动分析研究综述. 中文信息学报.\n  郭凯、金檀、陆小飞. 2018. 文本难度调控的研究与实践——从可读公式、多维特征到智能改编. 外语测试与教学.\n  2. Related Task 2.","title":"文本可读性研究及应用清单"},{"content":" 点击上方图片购买课程   Python 科学可视化领域是巨大的，由无数工具组成，从最通用和最广泛使用的工具到更专业和机密的工具。其中一些工具是基于社区的，而另一些则是由公司开发的。有些是专门为 Web 制作的，有些仅适用于桌面，有些处理 3D 和大数据，而有些则针对完美的 2D 渲染。\n在这个图景中，Matplotlib 有着非常特别的地方。\n 它是一个多功能且功能强大的库，可让您设计非常高质量的图形，适用于科学出版。 它还提供了一个简单直观的界面以及一个面向对象的架构，允许您调整图形中的任何内容。 最后，它可以用作常规图形库以设计非科学图形。  本书章节四个部分   第一部分 Matplotlib 库的基本原理。\n这包括回顾构成图形的不同部分、不同的坐标系、可用的比例和投影，我们还将介绍一些与排版和颜色相关的概念。\n  第二部分 图形涉及实践。\n在介绍了一些生成更好图形的简单规则之后，我们将继续解释 Matplotlib 默认值和样式系统，然后再深入研究图形布局组织。然后我们将探索可用的不同类型的情节，看看如何用不同的元素装饰一个人物。\n  第三部分 更高级的概念\n即 3D 图形、优化和动画。第四部分也是最后一部分是展示集合。\n  美图展览     案例代码  import numpy as np import matplotlib.pyplot as plt from matplotlib.textpath import TextPath from matplotlib.patches import PathPatch from matplotlib.collections import PolyCollection from matplotlib.font_manager import FontProperties from matplotlib import font_manager as fm, rcParams import matplotlib.pyplot as plt fig, ax = plt.subplots() #更改字体，支持中文。 prop = FontProperties(fname=\u0026#39;fonts/Alibaba-PuHuiTi-Bold.otf\u0026#39;, weight=100) red = np.array([233, 77, 85, 255]) / 255 darkred = np.array([130, 60, 71, 255]) / 255 fig = plt.figure(figsize=(14.8 / 2.54, 21 / 2.54)) ax = fig.add_axes([0, 0, 1, 1], aspect=1, xlim=[-10, 10], ylim=[-14.2, 14.2]) ax.axis(\u0026#34;off\u0026#34;) # Text path path = TextPath((0, 0), \u0026#34;MATPLOTLIB库\u0026#34;, size=2, prop=prop) # Text centering V = path.vertices xmin, xmax = V[:, 0].min(), V[:, 0].max() ymin, ymax = V[:, 1].min(), V[:, 1].max() V -= (xmin + xmax) / 2 + 1, (ymin + ymax) / 2 # Compute shadow by iterating over text path segments polys = [] for (point, code) in path.iter_segments(curves=False): if code == path.MOVETO: points = [point] elif code == path.LINETO: points.append(point) elif code == path.CLOSEPOLY: points.append(points[0]) points = np.array(points) for i in range(len(points) - 1): p0, p1 = points[i], points[i + 1] polys.append([p0, p1, p1 + (+20, -20), p0 + (+20, -20)]) # Display shadow collection = PolyCollection( polys, closed=True, linewidth=0.0, facecolor=darkred, zorder=-10 ) ax.add_collection(collection) # Display text patch = PathPatch(path, facecolor=\u0026#34;white\u0026#34;, edgecolor=\u0026#34;none\u0026#34;, zorder=10) ax.add_artist(patch) # Transparent gradient to fade out shadow I = np.zeros((200, 1, 4)) + red ax.imshow(I, extent=[-11, 11, -15, 15], zorder=-20, clip_on=False) I[:, 0, 3] = np.linspace(0, 1, len(I)) ax.imshow(I, extent=[-11, 11, -15, 15], zorder=0, clip_on=False) ax.text( 6.5, -1.75, \u0026#34;一个多功能的科学可视化库\u0026#34;, color=\u0026#34;white\u0026#34;, ha=\u0026#34;right\u0026#34;, va=\u0026#34;baseline\u0026#34;, size=10, #family=\u0026#34;Pacifico\u0026#34;, zorder=30, fontproperties=prop ) # Save and show result plt.savefig(\u0026#34;text-shadow.pdf\u0026#34;) plt.savefig(\u0026#34;text-shadow.png\u0026#34;, dpi=600) plt.show() \n电子书下载 您可以阅读 PDF（95Mo，首选站点）这本书，该书是开放访问的，托管在 HAL 上，HAL 是一个面向学术界的法国开放档案馆。最新版本也可以在 GitHub 上找到。本书的来源（包括代码示例）可在 github.com/rougier/scientific-visualization-book 上找到。\n代码下载 https://github.com/hiDaDeng/DaDengAndHisPython/tree/master/matplotlib绘图支持中文\n","permalink":"/blog/%E7%A7%91%E5%AD%A6%E7%BB%98%E5%9B%BEmatplotlib/","summary":"点击上方图片购买课程   Python 科学可视化领域是巨大的，由无数工具组成，从最通用和最广泛使用的工具到更专业和机密的工具。其中一些工具是基于社区的，而另一些则是由公司开发的。有些是专门为 Web 制作的，有些仅适用于桌面，有些处理 3D 和大数据，而有些则针对完美的 2D 渲染。\n在这个图景中，Matplotlib 有着非常特别的地方。\n 它是一个多功能且功能强大的库，可让您设计非常高质量的图形，适用于科学出版。 它还提供了一个简单直观的界面以及一个面向对象的架构，允许您调整图形中的任何内容。 最后，它可以用作常规图形库以设计非科学图形。  本书章节四个部分   第一部分 Matplotlib 库的基本原理。\n这包括回顾构成图形的不同部分、不同的坐标系、可用的比例和投影，我们还将介绍一些与排版和颜色相关的概念。\n  第二部分 图形涉及实践。\n在介绍了一些生成更好图形的简单规则之后，我们将继续解释 Matplotlib 默认值和样式系统，然后再深入研究图形布局组织。然后我们将探索可用的不同类型的情节，看看如何用不同的元素装饰一个人物。\n  第三部分 更高级的概念\n即 3D 图形、优化和动画。第四部分也是最后一部分是展示集合。\n  美图展览     案例代码  import numpy as np import matplotlib.pyplot as plt from matplotlib.textpath import TextPath from matplotlib.patches import PathPatch from matplotlib.collections import PolyCollection from matplotlib.","title":"科学绘图matplotlib"},{"content":" 点击上方图片购买课程    参考自阮一峰技术周刊\nsrc:https://github.com/ruanyf/weekly\n 音乐可视化 https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/\n音频可视化：采样、频率和傅里叶变换，含Python代码。\n如果对乐理感兴趣，可以前往 https://www.lightnote.co/music-theory/pentatonic 学习\n风险评分卡 https://github.com/amphibian-dev/toad\nToad 是专为工业界模型开发设计的Python工具包，特别针对评分卡的开发。Toad 的功能覆盖了建模全流程，从 EDA、特征工程、特征筛选 到 模型验证和评分卡转化。Toad 的主要功能极大简化了建模中最重要最费时的流程，即特征筛选和分箱。\n Hora 用于搜索近似的文本或图形, 支持Java、 Python 和 JavaScript ，特点是搜素速度非常快。\nhttps://horasearch.com/\n Top2vec https://github.com/ddangelov/Top2Vec\nTop2Vec 是一种用于主题建模和语义搜索的算法。 它自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。 训练 Top2Vec 模型后，您可以：\n 获取检测到的主题数 获取话题 获取分层主题 按关键字搜索主题 按主题搜索文档。 按关键字搜索文档 找出相似的词 查找类似的文档 使用 RESTful-Top2Vec 公开模型  优点\n 自动查找主题数。 不需要停用词列表。 不需要词干/词形还原。 适用于短文本。 创建联合嵌入的主题、文档和词向量。 内置搜索功能。    短视频简历 《纽约时报》报道，越来越多的美国年轻人拍一段自己的短视频，放在 TikTok 上面求职，请求看到的人转发。\n这比 A4 纸的简历效果好多了，值得借鉴。大家完全可以在简历上印一个自己视频的二维码。\nhttps://medium.com/@ashaxshaxlow/job-hunters-have-you-posted-your-r%C3%A9sum%C3%A9-on-tiktok-7c97c0965b4f\n moviepy https://zulko.github.io/moviepy/gallery.html\n视频编辑的 Python 库，基于 ffmpeg, 可以方便地编写脚本，进行各种神剪辑。\n WiFi连接卡 打印一张带有 WiFi 详细信息的登录卡片，把它贴到冰箱上、放到你的钱包里\u0026hellip;\n您的 WiFi 信息永远不会发送到服务端。本网站不使用追踪、分析或指纹识别。\n 一纸简历 https://cv.devtool.tech/app\n支持模板与实时预览，可以导出为 PDF 文件\n ","permalink":"/blog/techweekly03/","summary":"点击上方图片购买课程    参考自阮一峰技术周刊\nsrc:https://github.com/ruanyf/weekly\n 音乐可视化 https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/\n音频可视化：采样、频率和傅里叶变换，含Python代码。\n如果对乐理感兴趣，可以前往 https://www.lightnote.co/music-theory/pentatonic 学习\n风险评分卡 https://github.com/amphibian-dev/toad\nToad 是专为工业界模型开发设计的Python工具包，特别针对评分卡的开发。Toad 的功能覆盖了建模全流程，从 EDA、特征工程、特征筛选 到 模型验证和评分卡转化。Toad 的主要功能极大简化了建模中最重要最费时的流程，即特征筛选和分箱。\n Hora 用于搜索近似的文本或图形, 支持Java、 Python 和 JavaScript ，特点是搜素速度非常快。\nhttps://horasearch.com/\n Top2vec https://github.com/ddangelov/Top2Vec\nTop2Vec 是一种用于主题建模和语义搜索的算法。 它自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。 训练 Top2Vec 模型后，您可以：\n 获取检测到的主题数 获取话题 获取分层主题 按关键字搜索主题 按主题搜索文档。 按关键字搜索文档 找出相似的词 查找类似的文档 使用 RESTful-Top2Vec 公开模型  优点\n 自动查找主题数。 不需要停用词列表。 不需要词干/词形还原。 适用于短文本。 创建联合嵌入的主题、文档和词向量。 内置搜索功能。    短视频简历 《纽约时报》报道，越来越多的美国年轻人拍一段自己的短视频，放在 TikTok 上面求职，请求看到的人转发。\n这比 A4 纸的简历效果好多了，值得借鉴。大家完全可以在简历上印一个自己视频的二维码。","title":"TechWeekly-03 | 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   案例文献 胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.\n摘要： 在可持续发展战略导向下，秉持长远理念是企业抵御外部环境威胁和拥有可持续经营能力的基 石。然而，作为企业掌舵人的管理者并非都具有长远的目光。本文基于高层梯队理论和社会心理学中的时间导向理论，提出了管理者内在的短视主义特质与企业资本支出和研发支出的关系，并采用文本分析和机器学习技术构建出管理者短视主义指标从而对其进行实证检验。研究结果发现，年报 MD\u0026amp;A 中披露的“短期视域” 语言 能够反映管理者内在的短视主义特质，管理者短视会导致企业减少资本支出和研发支出。当公司治理水平、监督型机构投资者的持股比例以及分析师关注度越高时，管理者短视主义对这些长期投资的负向影响越 易受到抑制。最终，管理者短视主义导致的研发支出减少和资本投资效率降低会损害企业的未来绩效。本文拓宽了管理者短视主义的行为后果分析，对企业高层次管理人才的聘任以及企业和政府的监管具有重要的实践启示。同时，本文将文本分析和机器学习方法引入管理者短视主义的研究，为未来该领域的研究提供了参考和借鉴**。**\n关键词： 管理者短视 长期投资 文本分析 机器学习\n变量测量论证 语言能够反映人的认知、偏好和个性（Webb et al.，1966），研究者可通过分析实验对象语言中使用的词语类型和词频来捕捉人的特质（Miller and Ross，1975；Pennebaker et al.，2003）。如一个人的语言中越强调“过去”、“ 曾经”等词汇，反映其越关注过去；一个人的语言中越强调“将来”、“ 可能”、“ 要去”等词汇，反映其越关注未来（Pennebaker et al.，2003）。基于此研究范式，本文结合已有的英文“短期视域”词集、MD\u0026amp;A 中文语料特点以及 Word2Vec 机器学习制定出能够反映管理者“短期视域”的中文词集，随后通过词典法构建出管理者的短视主义指标。\nMD\u0026amp;A 是管理者对报告期内企业经营状况的回顾以及对下一年度经营计划以及企业未来发展所面临的机遇、挑战和各种风险的阐述。已有利用 MD\u0026amp;A 等文本刻画管理者特质的研究成果在一定程度上证实了其可靠性（Li，2012；蒋艳辉、冯楚建，2014）。如\n Li（2012）利用美国上市公司 MD\u0026amp;A 文本来刻画管理者的 自我归因偏差。 蒋艳辉和冯楚建（2014）利用 MD\u0026amp;A 中“我们”、“ 我公司”、“ 我们公司”等词语出现的频率刻画管理者的自我指涉度，从而衡量管理层对公司的认知和努力程度。 同时，国外文献表明 CEO 对企业的经营决策起着绝对的主导作用，能够直接影响企业未来的发展方向和命运（Chandler，1962；Finkelstein and Hambrick，1996）。CEO 的特质如自恋程度、学历和任期等都会极大影响公司的信息披露特点（Marquez Illescas et al.，2019；Lewis et al.，2019），因此年报披露的文本信息更多地反映了 CEO 的意思。而在我国，上市公司的董事长更像发达国家的 CEO（姜付秀等，2009；陈传明、孙俊华，2008；李健等，2012）。  因此，我们从 MD\u0026amp;A 中捕获的管理者短视主义特质更多反映的是董事长的短视主义特质，本文的管理者指的是企业的董事长。\n指标构建过程 具体来讲**，管理者短视主义指标**的构建过程如下。\n 借鉴 Brochet 等（2015）的英文“短期视域”词集与 Li（2010）构建文本指标的思路，我们阅读了 500 份 MD\u0026amp;A 语料以获取中文文本信息的特点，制定出中文 MD\u0026amp;A 中有关“短期视域”的种子词集，包括直接和间接 两大类。直接短期视域大类包括：“ 天内”、“ 数月”、“ 年内”、“ 尽快”、“ 立刻”、“ 马上”；间接****短期视域大类包括：“ 契机”、“ 之际”、 “压力”、“ 考验”。 针对同一概念或者事物，表达者往往使用多个语义相似的词汇进行描述，因此需要对种子词集进行相似词扩充。本文采用 Word2Vec 中的 CBOW 模型（Continuous Bag-of-words Model）对中文年度财务报告语料进行训练。 我们通过邀请 3 名业界和学术界专家以及对比 MD\u0026amp;A 文本样例对指标词集进行核验，最终确定词集包含 43 个“短期视域”词汇（词集和语句示例详见《管理世界》网络发行版附录 2）。随后，本文基于词典法计算 “短期视域”词汇总词频占 MD\u0026amp;A 总词频的比例，乘以 100 后得到管理者短视主义指标。该指标值越大，表明管理者越短视。  技术分析  纯技术讨论，非论文内容\n 这篇管理世界的论文，主要难点有两个：\n  如何构建 短视主义词典(集) ？\n   根据对研究和数据的了解，人工摘选一些 短视主义词典(集)种子词；人工，不需要python编程 使用Word2Vec技术扩充 短视主义词典(集)；需要python编程    如何使用 短视主义词典(集) 计算 短视主义指标？\n   需要使用Python编程语言，根据 词典法 实现短视主义指标的计算。    python学习与实现 难点主要可在掌握 视频专栏课| Python网络爬虫与文本分析 后，结合以下两个技能点实现\n 扩充词集可以用到之前分享的wordexpansion库 https://github.com/DataPlusCommunity/wordexpansion 计算短视主义指标，即词典法可以用到cnsenti库 https://github.com/DataPlusCommunity/cnsenti  ","permalink":"/blog/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%9C%A82021%E7%AE%A1%E7%90%86%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","summary":"点击上方图片购买课程   案例文献 胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.\n摘要： 在可持续发展战略导向下，秉持长远理念是企业抵御外部环境威胁和拥有可持续经营能力的基 石。然而，作为企业掌舵人的管理者并非都具有长远的目光。本文基于高层梯队理论和社会心理学中的时间导向理论，提出了管理者内在的短视主义特质与企业资本支出和研发支出的关系，并采用文本分析和机器学习技术构建出管理者短视主义指标从而对其进行实证检验。研究结果发现，年报 MD\u0026amp;A 中披露的“短期视域” 语言 能够反映管理者内在的短视主义特质，管理者短视会导致企业减少资本支出和研发支出。当公司治理水平、监督型机构投资者的持股比例以及分析师关注度越高时，管理者短视主义对这些长期投资的负向影响越 易受到抑制。最终，管理者短视主义导致的研发支出减少和资本投资效率降低会损害企业的未来绩效。本文拓宽了管理者短视主义的行为后果分析，对企业高层次管理人才的聘任以及企业和政府的监管具有重要的实践启示。同时，本文将文本分析和机器学习方法引入管理者短视主义的研究，为未来该领域的研究提供了参考和借鉴**。**\n关键词： 管理者短视 长期投资 文本分析 机器学习\n变量测量论证 语言能够反映人的认知、偏好和个性（Webb et al.，1966），研究者可通过分析实验对象语言中使用的词语类型和词频来捕捉人的特质（Miller and Ross，1975；Pennebaker et al.，2003）。如一个人的语言中越强调“过去”、“ 曾经”等词汇，反映其越关注过去；一个人的语言中越强调“将来”、“ 可能”、“ 要去”等词汇，反映其越关注未来（Pennebaker et al.，2003）。基于此研究范式，本文结合已有的英文“短期视域”词集、MD\u0026amp;A 中文语料特点以及 Word2Vec 机器学习制定出能够反映管理者“短期视域”的中文词集，随后通过词典法构建出管理者的短视主义指标。\nMD\u0026amp;A 是管理者对报告期内企业经营状况的回顾以及对下一年度经营计划以及企业未来发展所面临的机遇、挑战和各种风险的阐述。已有利用 MD\u0026amp;A 等文本刻画管理者特质的研究成果在一定程度上证实了其可靠性（Li，2012；蒋艳辉、冯楚建，2014）。如\n Li（2012）利用美国上市公司 MD\u0026amp;A 文本来刻画管理者的 自我归因偏差。 蒋艳辉和冯楚建（2014）利用 MD\u0026amp;A 中“我们”、“ 我公司”、“ 我们公司”等词语出现的频率刻画管理者的自我指涉度，从而衡量管理层对公司的认知和努力程度。 同时，国外文献表明 CEO 对企业的经营决策起着绝对的主导作用，能够直接影响企业未来的发展方向和命运（Chandler，1962；Finkelstein and Hambrick，1996）。CEO 的特质如自恋程度、学历和任期等都会极大影响公司的信息披露特点（Marquez Illescas et al.，2019；Lewis et al.，2019），因此年报披露的文本信息更多地反映了 CEO 的意思。而在我国，上市公司的董事长更像发达国家的 CEO（姜付秀等，2009；陈传明、孙俊华，2008；李健等，2012）。  因此，我们从 MD\u0026amp;A 中捕获的管理者短视主义特质更多反映的是董事长的短视主义特质，本文的管理者指的是企业的董事长。\n指标构建过程 具体来讲**，管理者短视主义指标**的构建过程如下。\n 借鉴 Brochet 等（2015）的英文“短期视域”词集与 Li（2010）构建文本指标的思路，我们阅读了 500 份 MD\u0026amp;A 语料以获取中文文本信息的特点，制定出中文 MD\u0026amp;A 中有关“短期视域”的种子词集，包括直接和间接 两大类。直接短期视域大类包括：“ 天内”、“ 数月”、“ 年内”、“ 尽快”、“ 立刻”、“ 马上”；间接****短期视域大类包括：“ 契机”、“ 之际”、 “压力”、“ 考验”。 针对同一概念或者事物，表达者往往使用多个语义相似的词汇进行描述，因此需要对种子词集进行相似词扩充。本文采用 Word2Vec 中的 CBOW 模型（Continuous Bag-of-words Model）对中文年度财务报告语料进行训练。 我们通过邀请 3 名业界和学术界专家以及对比 MD\u0026amp;A 文本样例对指标词集进行核验，最终确定词集包含 43 个“短期视域”词汇（词集和语句示例详见《管理世界》网络发行版附录 2）。随后，本文基于词典法计算 “短期视域”词汇总词频占 MD\u0026amp;A 总词频的比例，乘以 100 后得到管理者短视主义指标。该指标值越大，表明管理者越短视。  技术分析  纯技术讨论，非论文内容","title":"文本分析方法在2021管理世界中的应用"},{"content":" 点击上方图片购买课程    翻译自\nBerger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. \u0026ldquo;Uniting the tribes: Using text for marketing insight.\u0026rdquo; Journal of Marketing (2019): 0022242919873106.\n 论文作者们的报告视频已上传到B站(下图)，感兴趣的童鞋可以先收藏再收看\nJourmal of Marketing Webinar｜2019市场营销\n摘要 语言文字是营销场景中最常用的交互方式，比如在线评论、消费者服务热线、新闻发布、营销传播等活动都创造了有价值的文本数据。但营销研究者如何用好这些数据？本文回顾了文本分析相关研究，并详细介绍了如何用文本数据做市场研究。作者讨论了文本如何反映文本生产者， 文本信息如何影响信息接受者。\n接下来，本文讨论了文本如何预测并理解文本背后的信息，回顾了文本分析的方法和测量指标(metrics),提供了一整套的文本分析操作流程。最后，作者提到文本分析内部信度和外部效度问题，研究者如何解决。本文讨论营销各个领域可能存在的研究机会，虽然目前市场营销的研究问题大都是跨学科的，但是营销的各个子领域经常都是孤立，借助文本分析可能架构起连接营销各个子领域的桥梁。\n关键词  计算语义学coputational linguistics 机器学习machine learning 市场洞察marketing insight 跨学科interdisciplinary 自然语言处理natural language processing 文本分析text analysis 文本挖掘 text mining  无所不在文本 之前的研究认为，尽管投资者一次对包含重大变化的财务报\n交流沟通是营销的重要组成部分，消费者、企业、消费者投资者、社会，不同水平或者统一水平都有信息交流与沟通。而信息交流的过程中往往会产生或者转化为文本数据。\n最简单的的文本数据世界模型是生产者与消费者。模型内生产者和接受者都可能是消费者、企业、投资者和社会。消费者书写在线评论，公司制作会计年报，文化生产者代表社会意义制作出书籍、影片和艺术品（Table 1）\n在此情形下，研究者可能选择文本如何反映或如何影响？\n How text reflects its producer？ How text impacts its receiver？  尤其是文本可以反映一定的信息，这些信息是可以帮助营销人员洞察市场规律，进而利用规律影响文本信息的接受者。\n 文本反映生产者 首先，文本可以反映了个人的一些信息。例如“在社交媒体某推特上写着某人谈论着上周他们做了什么。”这句话有很多待挖掘的信息，比如他们这些人什么情况，是内向还是外向、神经质还是严肃认真、他们感觉如何、某时刻他们想了什么(Moon and Kamakura 2017)。总之，文本可以看作指纹或签名(Pennebaker 2011)。\n通过文本也可以用于理解领导人、机构或者文化精英。例如领导人用词表达会反映出其领导风格，对利益相关方的态度。透过广告、网站或者消费者服务商(consumer service agent)的言语，人们会了解公司的品牌个性(Opoku, Abratt, and Pitt 2006)，公司是如何看待消费者(Packard and Berger 2019a)，管理层对终端用户的定位(Molner, Prabhu, and Yadav 2019)。年报也会有未来业绩表现的有价值线索(Loughran and McDonald 2016)。\n除了单独分析个人或组织的言语，也可以对多个内容生产者合并起来进行更大层面的研究。透过人群或组织产生的文本，我们可以更好理解他们的本质。例如，分析微博，可以得出老年人和年轻人之间如何看待幸福(as excitement vs. peacefulness; Mogilner, Kamvar, and Aaker 2011)。消费者们在品牌社区的言语能更深的投射出消费者对品牌的态度(Homburg, Ehm, and Artz 2015)。\n而更宏大的层面，文本也能反映出文化差异。如美国人的表达相比东亚人具有更高的唤醒水平(Tsai 2007)，更喜欢用“我”而不是“我们”，也透露着崇尚个人主义，而不是集体主义。\n透过时间，研究者也可以监测美国国民情绪是否在911恐怖袭击前后发生变化(Cohn, Mehl, and Pennebaker 2004)。透过新闻报告、歌词等内容也可以帮助研究者了解社会态度和社会规范，分析有关对女性、少数族裔(Boghrati and Berger 2019; Garg et al. 2018)和特定产业态度的时代变迁(Humphreys 2010)。\n虽然文本分析并不容易，但企业和组织可以使用社交网络倾听民声。了解消费者是否喜欢新产品，消费者如何看待品牌，消费者最看重什么(Lee and Bradlow 2011; Netzer et al. 2012)。监管机构可以确定什么药物有不良部反映(Feldman et al. 2015; Netzer et al. 2012),公共卫生部门可以提前了解流感今年爆发最严重的地区(Alessa and Faezipour 2018),投资者可以预测股价涨跌 (Bollen, Mao, and Zeng 2011; Tirunillai and Tellis 2012).\n文本作用于消费者 文本不止可以反映生产者的信息，也可以知道文本如何影响消费者，消费者会有什么样的行为和选择。广告会塑造消费者的消费行为(Stewart and Furse 1986),报纸用语会改变消费者的态度(Humphreys and LaTour 2013), 消费者杂志会扭曲消费者产品分类感知(e.g., Rosa et al. 1999),电影剧本会影响观众的反应(Berger, Kim, and Meyer 2019; Eliashberg, Hui, and Zhang 2014; Reagan et al. 2016),等等。\n需要注意的是文本的反映reflects和影响impacts并不是非此即彼，往往会同时起作用，尽管如此，研究人员倾向于使用文本差异来研究它俩。\n当研究文本的reflects时，倾向于将reflects当作因变量，试图挖掘文本生产者的个性personality或属于什么社会团体。\n当研究文本的impacts时，倾向于将impacts看作自变量，检验文本是否以及如何导致消费者诸如购买、分享和卷入行为。在本框架中，文本信息潜藏着某些潜在的影响力，是被当作诱因，对后续或者其他主体有作用力的。\n文本内容也会被客观条件影响 文本内容还可以被客观条件所塑造，如\n 技术限制和社会文化基因(社会规范) 文本信息生产者与消费者之间的领域知识 先前客观历史  首先，不同题材因社会规范，表达内容和方式有所不同。例如观点陈述时，新闻不如报告来的客观(Ljung 2000).酒店评论卡和其他反馈主要被极端观点占据。在Snapchat和其他SNS平台的推文达多较短，且昙花一现；而自在线评论经常较长且可以回溯到多年以前。\n技术和物理也会改变文本表达。推特只能发少于280字符的推文。移动电话在键入方面受到限制，并且可能会影响人们在其上产生的文本（Melumad，Inman和Pham 2019; Ransbotham，Lurie和Liu 2019）。\n其次，信息生产者和消费者之间的关系会影响说什么，怎么说。当生产者和消费者彼此很熟悉，文本表达会更非正式(Goffman 1959)，导致第三方很难通过直接明确的信息了解生产者与消费者之间的对话的态度。\n这些因素对于解读文本信息至关重要，消费者给好朋友分享什么往往跟其他不同。企业可能会因为特定的冬季，其年报中可能会含有利好市场的信息。\n最后，历史可能也会影响文本的内容。在留言板上，以前的帖子可能会影响以后的帖子；如果有人在先前的帖子中提出了要点，则被访者很可能会在以后的帖子中提及该要点。如果转发的帖子含有自己的分析，其内容会偏离大多数的帖子。更广泛地说，＃metoo或#blacklivesmatter之类的媒体框架可能使某些概念或事实更容易被演讲者使用，因此即使看起来似乎无关，它们也更可能出现在文本中（McCombs\u0026amp;Shaw 1972; Xiong，Cho\u0026amp;Boatwright 2019）。\n使用文本预测与理解 文本除了reflects 和 impacts之外，还有predict和understanding。\n## 预测 某些文本研究出发点是做预测\n 什么消费者最喜欢贷款(Netzer, Lemaire, and Herzenstein 2019)? 什么电影会大火(Eliashberg et al. 2014)? 未来股市走向(Bollen, Mao, and Zeng 2011; Tirunillai and Tellis 2012)?  类似上面的研究，会使用很多文本特征来做机器学习和预测，研究人员不怎么关系任意的文本特质，他们更关心预测的表现。\n用文本做预测的主要难点是，文本数据可以生成成千上万的特征(相当于变量x1，x2\u0026hellip;xn)，而文本数据记录数甚至可能少于特征数。为了解决这个为题，使用新的特征分类方法，减少特征数量，又有可能存在拟合问题。\n## 理解 预测之外的研究主要是理解文本\n 消费者怎样表达会如何影响口碑(Packard and Berger 2017)? 为何某些推文会被挑中分享？ 歌曲为何变火？ 品牌如何让消费者忠诚？  理解的目标是理解为什么事情发生以及如何发生的。这类研究往往会用到心理学、社会学的方法，旨在理解文本的什么特征会导致什么后续结果，以及为什么产生这样的后果。\n用文本做理解的难点是找出观测数据背后的因果关系。相应的，该领域的工作可能会强调实验数据，以允许对关键的独立变量进行操作。另一个挑战是解释文本特征之间的关系。使用第二人称的歌曲往往较火(Packard and Berger 2019b),但是为什么使用第二人称会火，单纯的文本数据很难挖掘出来作用机制。\n在prediction领域，研究人员利用 文本的reflects方面 来预测 生产者的状态、特性、满意度、性格等。研究人员利用 *文本impacts方面 * 来预测 消费者的阅读、分享和购买行为。\n在understand领域，研究人员利用 文本的reflects方面 来理解为什么当人们压抑的时候会使用特殊人称。利用 *文本impacts方面 * 来理解为何带有情绪的文本会更容易被阅读和分享。\n粘合营销各领域 尽管有reflects vs impacts， prediction vs understanding之分，做文本分析需要整合多种技能·技术和不同营销领域的相关知识。\n就拿消费者行为学来说，在行为经济学大放异彩之前，假设情景操纵是存在争议的。实验可重复性问题，研究者开始寻找试图增强信度、效度的新工具。使用二手数据经常受限于只能做“是什么”的研究，不能做“为什么”的研究。但文本数据提供了做为什么的可能。例如在线评论可以用来理解为何某人购买了此商品的决策，尽管人们可能并不总是知道为什么要做某事，但他们的语言常常提供解释的痕迹（Pennebaker 2011），甚至超出了他们有意识地表达的范围。\n定量建模人员一直在寻找新的数据源和工具来解释和预测行为。非结构化数据提供了一组丰富的预测变量，这些预测变量通常可以随时大规模获得，并且可以与结构化度量一起作为因变量或自变量组合。通过产品评论，用户驱动的社交媒体活动以及公司驱动的营销活动，文本可以实时提供可以阐明消费者需求/偏好的数据。这提供了对传统营销研究工具的替代或补充。在许多情况下，文本可以追溯到个人，从而可以区分个人差异和动态。\n营销策略研究人员希望企业能实现其营销目标，并更好地理解影响组织成功的因素。文本分析提供了一种客观而系统的解决方案，以评估可能更有效的自然数据（例如，致股东的信，新闻稿，专利文本，营销信息，与分析师的电话会议）中可能的因素，如了解客户、合作伙伴和员工关系性质以及品牌情感强度(Kubbler，Colicev和Pauwels2017）使用词典和支持向量机方法来提取情绪并将其与消费者心态指标相关联。\n也有学者借鉴人口和社会学领域，使用定性和内容分析研究文本数据。消费者文化领域，研究者对字里行间的意义、规范和价值观更感兴趣。文本分析提供了事物变化或比较不同事物的量化指标。文本分析为营销学者解锁了非结构化数据的开锁姿势，提供了文本的定性与定量研究的新疆界。\n文本分析工具、方法和指标 给予前任做的文本数据驱动的洞察，有学者可能好奇如何开启文本研究之路。在本节会评述文本分析相关研究，包括\n 构念如何用文本数据构建 将提取的文本信息整合到后续建模和分析中所需的过程  本节目的是提供综合的入门指导，而是把可用的技术路线留给各位\n 讨论各种方法如何恰当的使用 各种方法在使用时应该注意什么  文本处理分析包括的步骤有\n 数据预处理 文本信息提取 常用的文本分析指标  数据预处理 文本数据是非结构化的脏数据。在任何常规数据分析之前，都要先将文本数据预先清洗处理，进而产生出类似excel表的干净的数据。常用的工具有R语言和Python语言，两种编程语言都有一套易用的数据预处理包。使用某些软件，如Linguistic Inquiry and Word Count (LIWC; Tausczik and Pennebaker 2010) 和WordStat (Peladeau 2016)之前，文本数据需要做少量的预处理。预处理可见Table 2和 Table 3 。\n  1. 数据获取 巧妇难为无米之炊，做文本研究的第一步就是采集数据，文本存在于邮件、公司年报、在线评论之中，无所不在，浩瀚无比。可以用人工手动复制粘贴到excel之中，但是效率太低，我们可以使用python设计网络爬虫采集数据。常见访问库requests、数据解析库pyquery和BeautifulSoup、数据存储库csv。\n2. 分词 将文本分词(切词)，数据尺度从章节段落拆解成颗粒度更小的词语层面，方便进行分析。但是要注意，英文是用空格间隔词语，而中文没有空格，还要注意粒度分的不能太细，如“the U. S.”按照空格分词会分出“the”、“U.” 和“S.”，导致美国这个实体被切分消失。\n3. 清洗 网络爬虫在采集数据阶段，采集的并不是干净的文本数据，还有一些像HTML标签、图片、链接等字符，需要采集时清除掉。\n4. 剔除停止词 文本中有很多经常出现的无意义或者意义微乎其微的词，如\u0026quot;a\u0026quot;、the\u0026quot;、\u0026ldquo;is\u0026rdquo; 等。一般情况下，这些词是需要剔除的。但是当研究的是书写者的语言风格，这些无意义词语往往含有千丝万缕的写作习惯信息，所以此时不能剔除。(e.g., Packard, Moore, and McFerran 2018；Pennebaker 2011).\n5. 拼写 一般情况下，还需要将错误书写的词正确修改过来。但是当研究者对错误率感兴趣的时候，这时候就不要更正拼写问题。(e.g., Netzer, Lemaire, and Herzenstein 2019).\n6. 词干化 词干化是为了将相同或者相近意思的词合并为一个词，如“car” ` “cars” 统一识别为 “car,”\n文本信息提取  1. 命名实体抽取 这是文本分析最基础、最简单、最常用的部分。例如姓名、地址、品牌、产品属性、情绪、词性等等都可以看作一种实体信息。实体抽取可以用来\n 监测啥叫媒体讨论，商业竞争情报 也可用作机器学习中的特征（预测指标），预测是否是欺诈信息 构建更复杂的文本表达方式的度量指标，如情感、情绪、写作风格  这部分一般需要强大的编程语言，如Python和R；当然有些情况下不用编程，使用WordStat也能做实体抽取。大多数情况下实体抽取经常伴随着专业词典或词表的使用，如(概念、品牌、分类、地址等)。通用的词典包括LIWC(Pennebaker et al. 2015)， EL 2.0 (Rocklage, Rucker, and Nordgren 2018), Diction 5.0 或General Inquirer for psychological states and traits (Berger and Milkman [2012]; Ludwig et al. [2013]; Netzer, Lemaire, and Herzenstein [2019]).\n情感词典，如Hedonometer (Dodds et al. 2011), VADER (Hutto and Gilbert 2014), 和LIWC能计算出文本中含有的情感信息。情感分析经常使用词袋法（Bag of Words）计算文本中的情感。但是该方法不考虑词语在文本中的顺序，而顺序是能影响情感信息的。尽管词典法对构建构念和比较构念比较简单，但基于人工编码的机器学习方法(e.g.,Borah and Tellis 2016; Hartmann et al. 2018; Hennig-Thurau, Wiertz, and Feldhaus 2015)更适合做精准概念的度量(Hartmannetal.2019)，尤其是这个领域是不常见或者比较复杂。\n如果研究者想挖掘出实体之间的关系就用到word2vec或者词嵌入word embedding (Mikolov et al. 2013)，这两种方法都把每一个词分配一个长度固定的向量，我们知道向量可以在空间中比较，如cos余弦计算词语之间的相似度。\n2. 话题模型 实体抽取有两个大问题:\n 维度太高，经常能从文本数据中抽取出数千个实体 实体的解读与解释  话题模型更多的是对文本的解释，而非预测(e.g., Berger and Packard 2018; Tirunillai and Tellis 2014)。话题模型最常见的是LDA，某个词以一定的概率属于话题，文本以多种话题按照一定的概率分布。\nLDA是无监督学习，需要事先指定话题数，输出的结果是不同的类分布，需要研究者解读每一个话题到底是什么题材内容。话题区间范围一般建议结合统计分布和研究者经验确定话题数目。\n3. 关系抽取 关系抽取可以用实体共现性来捕捉(e.g., Boghrati and Berger 2019; Netzer et al. 2012; Toubia and Netzer 2017).但营销学者对诸如产品、属性和情感之间的关系感兴趣。例如，研究者对评论中是否提及某个产品属性的问题。Feldman et al. (2015) and Netzer et al. (2012) 提供了药物与不良反应之间的关系来识别问题药物。\n关系抽取用的实现大多思路不难，多是一些人工规则的设计，如产品“Ford”、属性“oid consumption”和问题“excessive”共现性来捕捉福特车耗油。然而这样的方法需要手写复杂的规则，现在变得慢慢不流行。\n更通用的方法是机器学习法，人工标注相关的数据，训练机器学习模型。这类实现方法需要大量的人工标注，一种可用的工具是Stanford Sentence and Grammatical Dependency Parser (http://nlp.stanford.edu:8080/parser/) 。该工具可以识别词语依存关系，如“the hotel was very nice,” ，“nice” 与 “hotel”相关联，说明这个hotel挺nice的。\n当然，也可以扩文本之间做比较，这里不过多赘述。\n文本分析指标 早起市场营销，如在线评论领域的文本分析指标多为\n 数量(e.g., Godes and Mayzlin 2004; Moe and Trusov2011) 效价，评论评分t (e.g., Godes and Silva 2012; Moe and Schweidel 2012; Ying, Feinberg and Wedel 2006)· 方差，如信息墒(e.g., Godes and Mayzlin 2004).  然而如今这些指标经常忽略了文本的丰富度。以下几种是更好用的指标\n1. count measure 使用相应的词典，统计实体出现次数，这样可以对不同实体进行比较(Berger and Milkman 2012; Borah and Tellis 2016; Pennebaker et al. 2015; Schweidel and Moe 2014; Tirunillai and Tellis 2014)。缺点是更长的文本通常含有更多的实体(的数量)，还有一个局限就是某些实体会比其他实体更多的出现，如“电脑”商品的在线评论中“电脑”出现次数会远多于其他词。\n2. 相似度 在某些情况下，研究者更对文档之间的相似度感兴趣(e.g., Ludwig et al. 2013).。两个广告之间的相似程度如何？两首歌的歌词相似程度多少？相似度的计算方法有cos余弦相似、jaccard相似 (e.g., Toubia and Netzer 2017)\n3. 可读性 同样的意思可以用不同的难度的词汇去表达，造成阅读的难易程度。可读性反映了作者的内容复杂度和读者的阅读难度。(e.g., Ghose and Ipeirotis 2011)。\n常见的可读性算法有Flesch–Kincaid和the simple measure of gobbledygook (SMOG)。可阅读性经常将得分设置到1-12分之间，在美国学校里阅读理解成绩水平得分就是1-12分。\n未来营销研究新机会 1. 借鉴融合 文本分析在营销界中可以起到促进各个子领域交叉授粉，避免同质化学术繁殖。品牌社群是最早被来自社会学背景的研究者发现和研究的(Mun˜iz and O’Guinn 2001)。随后，定性和定量范式研究者逐渐界定了概念、识别了社群中的地位和作用(e.g., Mathwick, Wiertz, and De Ruyter 2007)。文本分析可以让学者研究如何在更大尺度层面去量化社群中的消费者沟通行为。例如，社群中不同权利地位的人使用的语言是否存在差异，使用不同动态指标预测社群产出情况(e.g., Manchanda, Packard, and Pattabhitamaiah 2015)。研究人员也可以追踪到底哪类用户发明新用语，又是哪些人跟随使用这些新用语。研究可以检查人们是否随着时间的开始使用社群语言，并根据他们对群体语言的适应程度来预测哪些人可能会留下或离开(Danescu-Niculescu-Mizil et al. 2013; Srivastava and Goldberg 2017)。定量或机器学习的研究人员可能会发现社群中最常讨论的主题，以及这些主题如何随着社群的发展而动态变化。阐述性范式的研究人员可能会研究这些话语在概念上如何关联，以找到是哪些潜在社区准则促成成员留下。然后，营销战略领域的研究人员可能会使用或开发词典来将这些社区与公司绩效联系起来，并为公司提供有关如何保持不同品牌社区（或环境）成员参与度的指导。\n不同子领域的营销学者会使用不同的技能集，研究不同的文本传播类型。消费者与消费者(consumer-to-consumer)之间的沟通主要研究的是两者间的行为，而营销战略学者倾向于研究企业与消费者、企业与企业之间的沟通。不同营销子领域的学者间的合作，能帮助他们结合不同的文本数据源。\n它山之石可以攻玉，例如营销战略学者借鉴经济学领域的交易理论(代理理论)来研究企业间的关系，但现在营销战略相关发现可以用于研究消费者之间的沟通行为。\n2. 扩展文本领域研究 我们希望看到更多的消费者-企业间的沟通的研究(e.g., Packard and Berger 2019a; Packard, Moore, and McFerran 2018)，这些沟通经常都是非约束非的，这其中蕴涵着有价值的关系数据，可以有很多应用价值。\n而在企业间沟通方面，大多数侧重于沟通(Communication)的角色(e.g., Palmatier, Dant, and Grewal 2007)。然而在文本数据上，在词语层面上，有相关研究很少。例如很少有研究销售人员与消费者之间的信息交换类型。\n类似的，在会计金融领域有很多人采用年报作为数据源(for a review, see Loughran and McDonald [2016])，但营销学者很少注意到公司与投资者之间的存在的研究机会。大多数学者只是用来研究如何预测公司股价或者开发新的公司市值估值模型。鉴于最近有兴趣将营销相关活动与公司估值联系起来（例如McCarthy和Fader 2018），这可能是一个需要进一步追求的领域。公司的所有沟通，包括年度报告等必需的文件，或广告和销售互动等任意形式的沟通，都可以用做观测变量，例如市场定位，营销能力，营销领导风格，甚至公司的品牌个性。\n在消费者、企业、社会之间也存在着大量的研究机会。有关企业文化(规范)的数据，例如新闻媒体和政府报告，可能有助于阐明影响市场的力量。例如，要了解Uber这样的公司如何抵抗市场变化，可以研究市政厅会议的笔录和其他听取并回答市民意见的政府文件。诸如#metoo和#blacklivesmatter之类的社会运动形式的外来冲击影响了营销传播和品牌形象。未来研究的一种潜在途径是采用文化品牌化方法（Holt，2016年），研究不同公众如何定义，塑造和倡导市场中的特定含义。公司及其品牌并不是凭空存在的，它们独立于其经营所在的社会。但是，在市场营销方面的有限研究已经考虑了如何使用文本在社会层面上得出公司的意图和行为。例如，学者们展示了诸如locavores（这类人只食用当地产的食品；Thompson和Coskuner-Balli，2007年），时尚达人（Scaraboto和Fischer，2012年）以及博主（McQuarrie，Miller和Phillips，2012年），这几类人群塑造了市场。通过文本分析，可以衡量和更好地理解这些社会群体的意图对市场的影响。\n未来研究的另一个机会是使用文本数据来研究文化和文化成功。跨学科研究了文化传播，艺术变革和创新传播等主题，目的是理解某些产品为何成功而其他产品却失败的原因(Bass 1969; Boyd and Richerson 1986; Cavalli-Sforza and Feldman 1981; Rogers 1995; Salganik, Dodds, and Watts 2006; Simonton 1980). While success may be random (Bielby and Bielby 1994; Hirsch 1972),可能的原因是没把握好消费者的口味偏好 (Berger and Heath 2005)。\n通过在大范围更快速度地量化书籍、电影或其他文化物品，研究人员可以测量具体的叙事是否更具吸引力，更具情感波动性的电影是否更成功，使用某些语言特征的歌曲是否更有可能登上广告牌榜首 ，以及唤起特定情感的书籍是否售出更多。尽管没有像社交媒体数据那样广泛可用，但最近越来越多的文化项目数据可用。诸如Google Books语料库（Akpinar\u0026amp;Berger 2015），歌曲歌词网站或电影脚本数据库等数据集可提供大量信息。此类数据可以使叙事结构分析，以识别\u0026quot;基本情节\u0026quot;'(Reagan et al 2016; Van Laer et al2019）。\n3. 用文本测量关键构念 在个体层面上，情感和满意度可能是最常用的测量变量(e.g., Bu¨schken and Allenby, 2016; Homburg, Ehm, and Artz 2015; Herhausen et al. 2019; Ma, Baohung, and Kekre 2015; Schweidel and Moe 2014)其他从文本数据中提取的测量变量包括语言的真实性authenticity和情绪性emotion(e.g., Mogilner, Kamvar, and Aaker 2011; Van Laer et al. 2019)。也有心理学测量变量，如性格类型presonality type和建构水平construal level(Kern et al. 2016; Snefjella and Kuperman 2015),这都是潜在的可以借鉴应用到消费者话语研究的。\n未来个体层面的研究会考虑社会认同和社会参与度， 研究人员目前对消费者已经可以测量情绪的积极或消极，但他们才刚刚开始探索重点（Rocklage\u0026amp;Fazio 2015），信任，承诺和其他模式属性。为此，利用语用学的语言理论并研究语义学上的阶段性可能是有用的（Villarroel et al2017）。一旦开展了此类工作，我们建议研究人员仔细验证建议的方法，以按照上述方法测量此类构念。\n在公司层面，已在公司生产的文本（例如年度报告和新闻稿）中确定了一些构念。诸如市场定位、广告目标、未来定位、欺骗意图、公司重点和创新定位均已使用此材料进行了测量和验证（详见Web Appendix Table 1)。未来企业层面的营销研究需要重新界定和丰富战略定位的测量(创新定位、市场驱动vs市场驱动定位)。组织文化、结构和能力由于难于测量，可以从企业、雇员和外部利益相关者的文本数据来测量(see Molner, Prabhu, and Yadav [2019])。类似的，企业领导层的思维和管理风格可以从他们怎么说来侦测(see Yadav, Prabhu, and Chandy [2007])。公司的绩效指标可以通过之前的公司相关文本数据进行预测(e.g., Herhausen et al. 2019)。从这个角度看，我们有很多使用数据的新机会。例如，从企业内部员工的相关信息(LinkedIn 和 Glassdoor)可以测量基于员工的品牌价值。最后，企业语言的更多微妙属性，如冲突、歧义、开放性都可以为管理学增加新发现。再比如，使用一些非正式文本数据，如员工邮件记录、销售通话记录或消费者服务中心通话记录。\n营销工作较少在社会或文化层面上衡量结构，但这种工作趋向于集中于公司如何适应现有意义和规范的文化结构。例如，制度逻辑和合法性是通过分析媒体文本来衡量的，Berger等人的品牌公众崛起也增加了文化中对品牌的讨论（Arvidsson and Caliandro 2016）。在文化层面，营销研究可能会继续关注企业如何适应文化环境，但也可能会关注文化环境如何影响消费者。例如，对文化不确定性，风险，敌意和变化的测量可以理解文化对消费者和企业影响。通过文本衡量开放性和多样性也是适时探索的主题，并且可能会促进测量方面的创新，例如侧重于语言多样性。通过文本分析，也可以更好地理解重要的文化论述，例如围绕债务和信用的语言。与性别和种族有关的语言的测量可能有助于探索多样性和包容性，从而使公司和消费者对来自不同作家的文本做出反应。\n机遇与挑战 本节是从技术角度出发探讨文本分析方法的新机遇与挑战。\n1. 机遇 虽然我们的讨论集中于文本内容，但文本只是非结构化数据的一个示例，而音频，视频和图像则是其他示例。社交媒体帖子通常将文字与图片或视频结合在一起。平面广告通常会在精心构造的视觉效果上覆盖文字。尽管电视广告可能不会在屏幕上包含文本，但它可能具有音频轨道，其中包含与视频同步进行的文本。\n直到最近，文本数据一直受到最多关注，这主要是由于存在提取有意义特征的工具。也就是说，诸如Praat（Boersma 2001）之类的工具允许研究人员从音频中提取信息（Van Zant和Berger 2019）。音频数据相对于文本数据的优势之一是，它以音调和语音标记的形式提供了丰富的内容，可以添加到所表达的实际单词中（Xiao，Kim和Ding 2013）。这使研究人员不仅可以研究说的内容，还可以研究说的方式，检查音调，语气以及其他声音或副语言特征如何塑造行为。\n同样，最近的研究开发了分析图像的方法（Liu，Xuan等人2018），既可以表征图像的内容，也可以识别图像中的特征。文本和图像组合的影响的研究很少（例如Hartmann等人2019）。例如，可以根据图像的颜色来描述图像。在印刷广告的上下文中，当与特定调色板的图像结合使用时，文本内容的说服力可能会降低，而其他调色板可能会增强文本的说服力。与简单的图像结合使用，文本的重要性可能会非常明显。但是，当文本与复杂的图像配对时，观看者可能会主要关注图像，从而减少了文本的影响。在这种情况下，作为广告精美图片一部分的法律披露可能不会引起受众的注意。\n当文本加到视频中时，其扮演的角色也引发了类似的问题。研究已经提出了表征视频内容的方法（例如Liu等人2018）。除了包含视频脚本之外，文本还可能在视觉上出现。除了在其中显示文本的音频上下文之外，其影响可能还取决于同时显示的视觉效果。也可能是其在视频中相对于视频开头的位置可能会降低其效果。例如，由于多种原因，在视频中稍后说出的情感性文字内容可能缺乏说服力（例如，观众在讲出文字时可能已经不再注意了）。或者，与音频配对的视觉效果可能对观众更具吸引力，或者视频的先前内容可能耗尽了观众的注意力资源。正如我们对图像和视频的讨论所暗示的那样，文本只是营销传播的一个组成部分。未来的研究必须调查其与其他特征的相互作用，不仅包括其出现的内容，还包括其出现的时间（Kanuri，Chen和Sridhar 2018），以及在哪种媒体上。\n2. 挑战 尽管机会众多，但文本数据也带来了各种挑战。首先是面临可解释性的挑战。在某些方面，文本分析似乎提供了衡量行为过程的更客观的方法。例如，一个人可以计算第一人称“ I”和第二人称“ you”。第一人称在文本中越多，说明这个人更关心自己 （Berger 2014），这种量化词语数量的方法提供看起来更像很客观像真理的东西。但是，尽管该过程的一部分肯定是更客观的（例如，不同类型的代词的数量），但此类度量与基础过程（即，关于口碑传播者的说法）之间的联系仍然需要一定程度的解释。其他潜在的行为方式甚至更难以计数。例如，虽然某些词（例如“love”）通常是积极的，但它们的积极性可能在很大程度上取决于特质个体差异和上下文。\n更普遍地，在理解文本信息出现的上下文中存在挑战和机遇。例如，餐厅评论可能包含很多否定词，但这是否意味着该人更讨厌食物，服务或餐厅？包含更多第二人称代词（“ you”）的歌曲可能会更成功（Packard and Berger 2019b），但要了解原因，了解歌词是否使用“ you”作为句子的主语或宾语是有帮助的。上下文提供了含义，而且越多的人不仅了解正在使用的单词，而且还了解如何使用它们，则越容易获得新知识新洞察。基于词典工具特别容易对使用场景变化特别敏感，建议尽可能使用针对特定研究环境创建的词典（例如，Loughran和McDonald [2016]开发的财务情感工具）。\n数据隐私挑战是一个重大问题。研究通常使用从网站上抓取的在线产品评论和销售排名数据（Wang，Mai和Chiang 2013）或从社交媒体平台上抓取的消费者的活动数据（Godes和Mayzlin 2004；Tirunillai和Tellis 2012）。尽管这种方法很普遍，但是法律问题已经开始出现。LinkedIn未能成功阻止一家初创公司抓取用户公共资料中发布的数据（Rodriguez，2017）。虽然根据法律可能允许收集公共数据，但它可能与那些拥有研究人员感兴趣的数据的平台的服务条款相冲突。\n随着从数字化文本和其他形式的数字化内容（例如图像，视频）中提取见解的兴趣日益浓厚，研究人员应确保他们已获得进行工作的适当权限。不这样做可能导致开展此类项目变得更加困难。一种潜在的解决方案是创建一个学术数据集，例如Yelp提供的数据集（https://www.yelp.com/dataset），该数据集可能包含过时或经过清理的数据，以确保不会产生 公司的运营或用户隐私风险。\n对数字化文本以及其他用户创建的内容的收集和分析，也引发了有关用户对隐私的期望的问题。随着欧盟《通用数据保护条例》的发布以及有关Cambridge Analytica从Facebook收集用户数据的能力的启示，研究人员必须注意其工作的潜在滥用。我们还应考虑超出用户生成内容的预期用途的程度。例如，尽管用户可能会理解，Facebook采取的行动可能会导致他们针对与其互动的品牌进行专门的广告宣传，但他们可能无法预期其Facebook和Instagram活动的全部内容都将被用于构建其他品牌可能使用的心理特征。了解消费者关于其在线行为及其提供的文字的隐私偏好可以为从业者和研究人员提供重要的指导。未来研究的另一个亮点是可以提高营销的精确度，同时最大限度地减少对隐私的侵犯（Provost et al 2009）。\n总结 沟通是营销的重要方面，涵盖组织与合作伙伴之间，企业与消费者之间以及消费者之间的沟通。文本数据包含这些交流的详细信息，并且通过自动文本分析，研究人员已准备好将这种原始材料转换成有价值的见解。文本数据使用方面的许多最新进展是在营销之外的领域开发的。当我们展望未来和营销人员的角色时，这些最新进展应作为示例。营销人员在消费者，公司和组织之间的接口上处于有利位置，可以利用和改进工具来提取文本信息，以解决当今企业和社会所面临的一些关键问题，例如错误的信息滥用。营销提供了一种宝贵的观点，对这次对话至关重要，但这只有通过更广阔的视野，打破理论和方法论的孤岛，并与其他学科合作，我们的研究才能吸引尽可能多的受众来影响公众话语。我们希望这个框架能够鼓励人们对界定营销的界限进行反思，并为未来的突破性见解开辟道路。\n","permalink":"/blog/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90%E5%9C%A8%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E7%A0%94%E7%A9%B6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","summary":"点击上方图片购买课程    翻译自\nBerger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. \u0026ldquo;Uniting the tribes: Using text for marketing insight.\u0026rdquo; Journal of Marketing (2019): 0022242919873106.\n 论文作者们的报告视频已上传到B站(下图)，感兴趣的童鞋可以先收藏再收看\nJourmal of Marketing Webinar｜2019市场营销\n摘要 语言文字是营销场景中最常用的交互方式，比如在线评论、消费者服务热线、新闻发布、营销传播等活动都创造了有价值的文本数据。但营销研究者如何用好这些数据？本文回顾了文本分析相关研究，并详细介绍了如何用文本数据做市场研究。作者讨论了文本如何反映文本生产者， 文本信息如何影响信息接受者。\n接下来，本文讨论了文本如何预测并理解文本背后的信息，回顾了文本分析的方法和测量指标(metrics),提供了一整套的文本分析操作流程。最后，作者提到文本分析内部信度和外部效度问题，研究者如何解决。本文讨论营销各个领域可能存在的研究机会，虽然目前市场营销的研究问题大都是跨学科的，但是营销的各个子领域经常都是孤立，借助文本分析可能架构起连接营销各个子领域的桥梁。\n关键词  计算语义学coputational linguistics 机器学习machine learning 市场洞察marketing insight 跨学科interdisciplinary 自然语言处理natural language processing 文本分析text analysis 文本挖掘 text mining  无所不在文本 之前的研究认为，尽管投资者一次对包含重大变化的财务报\n交流沟通是营销的重要组成部分，消费者、企业、消费者投资者、社会，不同水平或者统一水平都有信息交流与沟通。而信息交流的过程中往往会产生或者转化为文本数据。\n最简单的的文本数据世界模型是生产者与消费者。模型内生产者和接受者都可能是消费者、企业、投资者和社会。消费者书写在线评论，公司制作会计年报，文化生产者代表社会意义制作出书籍、影片和艺术品（Table 1）\n在此情形下，研究者可能选择文本如何反映或如何影响？\n How text reflects its producer？ How text impacts its receiver？  尤其是文本可以反映一定的信息，这些信息是可以帮助营销人员洞察市场规律，进而利用规律影响文本信息的接受者。","title":"文本分析在市场营销研究中的应用"},{"content":"\n 点击上方图片购买课程   在大数据的今天，通过互联网超文本链接，无数的个人、团体、公司、政府等不同组织形态的主体均深深嵌入到互联网世界，在网络世界中留下了大量的文本。社会、管理、经济、营销、金融等不同学科，均可以研究网络上海量的文本，扩宽的研究对象和研究领域。下面大部分内容是三份文档翻译汇总而来，我觉得讲的挺明白的，其中加入了我的一点点理解和扩充。\n一、文本产生及其作用方式  How text reflects its producer？ How text impacts its receiver？  graph LR Text_Producer --\u0026gt; Text Text --\u0026gt; Text_Receiver Text_Receiver --\u0026gt;Text Text --\u0026gt; Text_Producer 文本信息的==生产者producer== 与 ==消费者receiver==，涵盖 ==个人、公司(组织)、国家(社会)==三个层面。\ngraph LR Consumers --\u0026gt; Firms Consumers --\u0026gt; Investors Consumers --\u0026gt; Society Firms --\u0026gt; Consumers Firms --\u0026gt; Investors Investors --\u0026gt; Firms Investors --\u0026gt; Society Firms --\u0026gt; Society Society --\u0026gt; Investors Society --\u0026gt; Consumers  需要注意的是文本的==反映Reflects==和==影响Impacts==并不是非此即彼，往往会同时起作用。\n    \u0026mdash; 研究目的 自变量 因变量 因变量     Reflects 文本可以反映producer的一些信息，帮助研究者理解producer。\n例如试图挖掘producer的个性personality或属于什么社会团体。 了解公司的品牌个性；\n年报也会有未来业绩表现的有价值线索；\n消费者们在品牌社区的言语能更深的投射出消费者对品牌的态度；\n而更宏大的层面，文本也能反映出文化差异。\n了解消费者是否喜欢新产品，消费者如何看待品牌，消费者最看重什么 文本 文本   Affects 知道文本如何影响receiver，receiver会有什么样的行为和选择。 检验文本是否以及如何导致消费者诸如购买、分享和卷入行为。\n广告会塑造消费者的消费行为\n消费者杂志会扭曲消费者产品分类感知\n电影剧本会影响观众的反应 文本消费者 文本消费者    \n二、如何使用文本数据    \u0026mdash; Reflects Affects 目的 应用 难点     Predict 预测 producer的状态、特性、性格等 预测 receiver阅读、分享和购买行为 研究人员不怎么关系任意的文本特质，他们更关心预测的表现。 什么消费者最喜欢贷款;\n什么电影会大火;\n未来股市走向;\n 文本数据可以生成成千上万的特征(相当于变量x1，x2\u0026hellip;xn)，而文本数据记录数甚至可能少于特征数。\n为了解决这个为题，使用新的特征分类方法，减少特征数量，又有可能存在拟合问题。   Understanding 为什么当人们压抑的时候会使用特殊人称。 来理解为何带有情绪的文本会更容易被阅读和分享 理解为什么事情发生以及如何发生的这类研究往往会用到心理学、社会学的方法，旨在理解文本的什么特征会导致什么后续结果，以及为什么产生这样的后果。 消费者怎样表达会如何影响口碑;\n为何某些推文会被挑中分享？\n歌曲为何变火？\n品牌如何让消费者忠诚？ 找出观测数据背后的因果关系。相应的，该领域的工作可能会强调实验数据，以允许对关键的独立变量进行操作。\n另一个挑战是解释文本特征之间的关系。    \n三、文本信息的指标 粗略的分，文本信息可以分为定性与定量两种类型\n   定性/量 分析方法 优点 缺点     定性（text as text） 质性（扎根） 依靠研究者领域知识，可以对少量的数据做出深刻洞见。 难以应对大规模数据；\n编码过程并不能保证唯一；   定量 textual data(text as data) 明显的文本特征，如词频、可阅读性 标准如一;\n适合大规模文本挖掘；\n纷繁复杂中涌现出潜在规律 需要破坏文本的结构，丧失了部分信息量    早先的营销领域，如在线评论文本分析指标多为\n 数量，如文本长度(e.g., Godes and Mayzlin 2004; Moe and Trusov2011) **情感得分(效价，评论评分) **(e.g., Godes and Silva 2012; Moe and Schweidel 2012; Ying, Feinberg and Wedel 2006)· 方差，如信息墒(e.g., Godes and Mayzlin 2004).  然而如今这些指标经常忽略了文本的丰富度。以下几种是更好用的指标\n   指标 功能 补充     实体词词频 使用相应的实体词典，统计实体出现次数，这样可以对不同实体进行比较 更长的文本通常含有更多的实体(的数量)；\n还有一个局限就是某些实体会比其他实体更多的出现，如“电脑”商品的在线评论中“电脑”出现次数会远多于其他词。   相似度 文档之间的相似度感兴趣。\n如两个广告之间的相似程度如何？\n两首歌的歌词相似程度多少？ 相似度的计算方法有\ncos余弦相似\njaccard相似   可读性 同样的意思可以用不同的难度的词汇去表达，造成阅读的难易程度。可读性反映了作者的内容复杂度和读者的阅读难度。 常见的可读性算法有Flesch–Kincaid和the simple measure of gobbledygook (SMOG)。\n可阅读性经常将得分设置到1-12分之间，在美国学校里阅读理解成绩水平得分就是1-12分。    \n四、文本分析步骤    序号 步骤 解释 中文 英文     1 读取数据 数据一般存储于不同的文件夹不同文件内，需要将其导入到计算机     2 分词 导入到计算的文本是字符串数据，需要整理为更好用的列表 例如“我爱你中国”分词后\n得到[\u0026ldquo;我\u0026rdquo;, \u0026ldquo;爱\u0026rdquo;, \u0026ldquo;你\u0026rdquo;, \u0026ldquo;中国\u0026rdquo;] \u0026ldquo;I love China\u0026quot;分为\n[\u0026ldquo;I\u0026rdquo;, \u0026ldquo;love\u0026rdquo;, \u0026ldquo;China\u0026rdquo;]   3 剔除符号和无意义的停止词 为了降低计算机运行时间，对分析结果影响较小的字符，诸如符号和无意义的词语需要剔除掉 如“的”，“她”， ”呢”， “了” \u0026ldquo;is\u0026rdquo; , \u0026ldquo;a\u0026rdquo;, \u0026ldquo;the\u0026rdquo;   4 字母变小写，词干化 同义词归并，同主体词归并 “中铁”，“中国铁建”，“中铁集团”都可以归并为“中铁” 先变为小写，这样“I”和“i”都归并为“i”；\n“was”，“are”，“is”都归并为“be”   5 构建文档词频矩阵 使用一定的编码方式，即用某种方式表示文本。常见的有词袋法、tf-idf；\n可以使用scikit-learn构建文档词频矩阵，但中英文略有区别，需要注意 “我爱你中国”需要先整理为“我 爱 你 中国” “I love China”    \n五、文本分析技术对比 从左向右，自动化程度越来越高，人工介入的越来越少\n   技术 描述 优点 缺点 常被应用(领域) 软件     主题分析Thematic analysis 需要有经验的人员基于自身经验和李俊杰，对研究的数据进行挖掘。编码过程为迭代进行 使用参与者自己的话语或者构念来挖掘数据，对少量文本理解的更深入 属于时间、劳动密集型任务，不适合大规模数据。\n由于不同的编码人员有不同的经历和偏好，编码过程的标准不可靠 社会学、管理学 Nvivo；   内容分析/基于字典方法 统计文本中词语/词组的出现频率 允许对研究的数据进行定量分析 采用的词典应尽量与研究问题适应，词典适配性问题突出 管理学 LIWC、Nvivo、DICTION；   词袋法（Bag of words） 将文本字符串转为计算机能理解的数字化向量 编码标准稳定简单，具有统计学特性，扩展性强 编码过程忽略词语的先后顺序 管理学 Python的scikit-learn、gensim、nltk等；R   监督学习(Supervise models),如SVM、Bayes、Logistic Regression 研究者要知道输入数据X和标签y；需要核实的模型需要X和y之间的关系和规律 允许事先定义编码规则(如选择词袋法还是tfidf)；逻辑简单 需要高质量的标注数据(工作量大)；you与特征词太多，训练的模型很容易过拟合。 计算机学、政治学、管理学 Python的scikit-learn、gensim、nltk等；R（topicmodels， stm）   无监督学习(Kmeans、 LDA话题模型) 使用聚类、话题分析，让计算机自动对数据进行分组 在没有人工标注的情况下，加速了数据的“标注”或“分类” “标注”是机器按照数字特征进行的分组，需要研究者解读才可以赋予“标准“意义；训练过程需要大量的调参 计算机学、政治学、管留学 Python的scikit-learn、gensim、nltk等；R（topicmodels， stm）   自然语言处理 按照人类对语言的理解进行建模，考虑词语顺序 计算机自动化；可分析语义 大多数模型是人类无法解读的黑箱；\n虽然代码编程量小，但训练代码耗时巨大 计算科学；市场营销；心理学 pytorch、tensorflow    据被压缩成词组频数，定性的文本数据转化为定量的频数。本课程中会涉及到的内容\n Thematic Analysis 定性 Content Analysis Dictionary Bag of words 词袋法 Supervised ，监督学习 文本分类问题 Unsupervised，如非监督LDA话题模型 Natural language processing  \n应用案例 众筹融资成功率与语言风格的说服性-基于Kickstarter的实证研究 摘要：众筹融资效果决定着众筹平台的兴衰。 众筹行为很大程度上是由投资者的主观因素决定的，而影响主观判断的一个重要因素就是语言的说服性。 而这又是一种典型的用 户产生内容（UGC），项目发起者可以采用任意类型的语言风格对项目进行描述。 不同的语 言风格会改变投资者对项目前景的感知，进而影响他们的投资意愿。\n首先，依据 Aristotle 修 辞三元组以及 Hovland 说服模型，采用扎根理论，将众筹项目的语言说服风格分为 5 类：诉诸可信、诉诸情感、诉诸逻辑、诉诸回报和诉诸夸张。\n然后，==借助文本挖掘方法，构建说服风格语料库，并对项目摘要进行分类。==\n最后，建立语言说服风格对项目筹资影响的计量模型，并 对 ==Kickstarter 平台上的 128345 个项目进行实证分析==。 总体来说，由于项目性质的差异，不同 的项目类别对应于不同的最佳说服风格。\n关键词：众筹 融资 语言风格 说服性 投资意愿\nCopycats vs. Original Mobile Apps 摘要: 尽管移动应用程序市场的增长为移动应用程序开发人员创新提供了巨大的市场机会和经济诱因，但它也不可避免地刺激了模仿者开发盗版软件。原始应用的从业人员和开发人员声称，模仿者窃取了原始应用的想法和潜在需求，并呼吁应用平台对此类模仿者采取行动。令人惊讶的是，很少有严格的研究来分析模仿者是否以及如何影响原始应用的需求。\n==进行此类研究的主要威慑因素是缺乏一种客观的方法来识别应用程序是模仿者还是原创者。通过结合自然语言处理，潜在语义分析，基于网络的聚类和图像分析等机器学习技术，我们提出了一种将应用识别为原始或模仿者并检测两种模仿者的方法：欺骗性和非欺骗性。==\n根据检测结果，我们进行了经济计量分析，以确定五年间在iOS App Store中发布的==5,141个开发人员的10,100个动作游戏应用程序==样本中，模仿应用程序对原始应用程序需求的影响。我们的结果表明，特定模仿者对原始应用需求的影响取决于模仿者的质量和欺骗程度。高质量的非欺骗性复制品会对原件产生负面影响。相比之下，低质量，欺骗性的模仿者正面影响了对原件的需求。\n结果表明，从总体上讲，模仿者对原始移动应用程序需求的影响在统计上是微不足道的。==我们的研究通过提供一种识别模仿者的方法==，并提供模仿者对原始应用需求的影响的证据，为越来越多的移动应用消费文献做出了贡献。\nLAZY PRICES 摘要: 使用1995年-2014年所有美国公司季度和年度申报的完整历史记录，研究发现当公司对报告进行积极更改时，这种行为蕴含着公司未来运营的重要信号。\n财务报告的语言和结构的变化也对公司的未来收益产生重大影响：做空\u0026quot;变化\u0026quot;的公司（持有的公司，如果其报告发生变化的，做空该公司股票），买入“不变化”的公司，使用这样的投资组合策略，在2006年的每月alpha值高达1.88%的收益（每年超过22％）。报告中涉及执行官（CEO和CFO）团队的话语风格的变化，或者有关诉讼(风险部分)的话语的变化，都对投资的未来收益有重要作用。\n研究发现，对10-K的变化可以预测未来的收益、获利能力、未来的新闻公告，甚至未来的公司破产。同时，不做任何变化的公司将获得显著的异常收益。与资产价格典型的反应不足研究不同，我们发现没有任何与这些变化相关的公告效应–仅在后来通过新闻，事件或收益披露信息时才产生回报–暗示投资者并未注意到整个公众领域的这些变化。\n 纽约时报在2010年4月23日发了一条FDA将有对输液泵(infusion pumps)更严格对审批管理规定的新闻，新闻中提到了Baxter公司。新闻公布当天，Baxter股价大跌。\n10天后的（2010年5月4日），Baxter宣布召回问题的输液泵产品，股价当天再次大跌。\n 相关文献  [1]Berger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. \u0026ldquo;Uniting the tribes: Using text for marketing insight.\u0026rdquo; Journal of Marketing (2019): 0022242919873106.\n[2]Kenneth Benoit. July 16, 2019. “[Text as Data: An Overview](https://kenbenoit.net/pdfs/28 Benoit Text as Data draft 2.pdf).” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. Handbook of Research Methods in Political Science and International Relations. Thousand Oaks: Sage.\n[3]Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. \u0026ldquo;A review of best practice recommendations for text analysis in R (and a user-friendly app).\u0026rdquo; Journal of Business and Psychology 33, no. 4 (2018): 445-459.\n[4]王伟,陈伟,祝效国,王洪伟. 众筹融资成功率与语言风格的说服性-基于Kickstarter的实证研究.管理世界.2016;5:81-98.\n[5]Wang, Quan, Beibei Li, and Param Vir Singh. \u0026ldquo;Copycats vs. original mobile apps: A machine learning copycat-detection method and empirical analysis.\u0026rdquo; Information Systems Research 29, no. 2 (2018): 273-291.\n[6]Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. \u0026ldquo;Lazy prices.\u0026rdquo; The Journal of Finance 75, no. 3 (2020): 1371-1415.\n ","permalink":"/blog/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90%E5%9C%A8%E7%BB%8F%E7%AE%A1%E9%A2%86%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0/","summary":"点击上方图片购买课程   在大数据的今天，通过互联网超文本链接，无数的个人、团体、公司、政府等不同组织形态的主体均深深嵌入到互联网世界，在网络世界中留下了大量的文本。社会、管理、经济、营销、金融等不同学科，均可以研究网络上海量的文本，扩宽的研究对象和研究领域。下面大部分内容是三份文档翻译汇总而来，我觉得讲的挺明白的，其中加入了我的一点点理解和扩充。\n一、文本产生及其作用方式  How text reflects its producer？ How text impacts its receiver？  graph LR Text_Producer --\u0026gt; Text Text --\u0026gt; Text_Receiver Text_Receiver --\u0026gt;Text Text --\u0026gt; Text_Producer 文本信息的==生产者producer== 与 ==消费者receiver==，涵盖 ==个人、公司(组织)、国家(社会)==三个层面。\ngraph LR Consumers --\u0026gt; Firms Consumers --\u0026gt; Investors Consumers --\u0026gt; Society Firms --\u0026gt; Consumers Firms --\u0026gt; Investors Investors --\u0026gt; Firms Investors --\u0026gt; Society Firms --\u0026gt; Society Society --\u0026gt; Investors Society --\u0026gt; Consumers  需要注意的是文本的==反映Reflects==和==影响Impacts==并不是非此即彼，往往会同时起作用。","title":"文本分析在经管领域中的应用概述"},{"content":"\n 点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/在Rmarkdown中调用Python代码.zip\nPython和R是一对数据科学两大语言，在互联互通的路上，我感觉R更加的积极。还记得之前 Python中调用R的库-rpy2， 在Python使用R语言语法还是有些不自然。在R中调用Python体验十分棒，一起跟我看看吧。\nreticulate包是可以让R语言非常流畅自然联通Python的关键。\nRmarkdown预备知识\nRmarkdown很像jupyter notbeook和markdown的结合。\n 代码块 markdon文本  代码块 在Rmarkdown中的代码块的开始都是以三引号、{}和语言名为标志，以三引号结尾。\nlibrary(ggplot2) ggplot(mpg, aes(x=displ, y=cty))+ geom_point() library(ggplot2) ggplot(mpg, aes(x=displ, y=cty))+ geom_point()   后面设置好reticulate包后，就可以在Rmarkdown中使用python代码块，\nimport pandas as pd df = pd.read_csv(\u0026#39;test.csv\u0026#39;) df.head() markdown文本 文本部分全部支持markdown语法，这里不做赘述。\n安装 install.packages(\u0026#34;reticulate\u0026#34;) 环境设置 当我们在R代码块中设置好Python环境，就可以在Rmarkdown中跑Python代码。\n查询Python 首先我们需要知道Python安装路径，可以在命令行中逐行执行下面代码\npython3 import sys sys.executable 我的mac电脑的Python安装路径为\n/Library/Frameworks/Python.framework/Versions/3.7/bin/python3 指定Python 执行下方的代码(路径改为自己的Python安装路径)\nlibrary(reticulate) ## Warning: package \u0026#39;reticulate\u0026#39; was built under R version 3.6.2 use_python(\u0026#39;/Library/Frameworks/Python.framework/Versions/3.7/bin/python3\u0026#39;) 执行代码后，我们就可以愉快的使用Python代码\n运行Python代码 在Rmarkdown中写Python代码块\n作图 import numpy as np import matplotlib.pyplot as plt # 计算正弦曲线上点的 x 和 y 坐标 x = np.arange(0, 3 * np.pi, 0.1) y = np.sin(x) plt.title(\u0026#34;sine wave form\u0026#34;) # 使用 matplotlib 来绘制点 plt.plot(x, y) plt.show()   读取csv import pandas as pd df = pd.read_csv(\u0026#34;test.csv\u0026#34;, encoding=\u0026#34;gbk\u0026#34;) df.head() ## birthday name text age gender height weight ## 0 1985/10/08 Alice 我很开心，每天都这么快乐，我很幸福 35 female 175 55 ## 1 95.07.07 Mary 我很难过 25 female 165 50 ## 2 01-11-10 Mike 唉，真难受 19 male 180 75 ## 3 90/2/8 Smith 无所谓开心还是难过 30 male 175 70 ## 4 93-1-5 Henry 每天赚一万，真爽！ 27 male 185 80 返回的df是Python对象，我们可以看到表格不好看，这是R中的Python对象。\n在R代码块中调用Python变量(对象) 刚刚讲的都是在Rmakdown中运行Python代码块，并不是在R代码块中运行Python代码或者调用Python变量。\npy$python_variable_name R代码块中调用Python方法\npy$python_variable_name\n py相当于Python中的对象 $ 相当于Python中的点 python_variable_name 是Python代码块中的变量名  比如在上文中Python的变量df，在R中调用\npy$df   现在调用Python对象df时，R会默认将其转为R对象，所以内容一样，样式似乎变好看了。\nR代码块中导入Python库 使用os库的listdir函数查询当前项目文件夹内的文件列表\nimport os os.listdir() ## [\u0026#39;reticulate学习.md\u0026#39;, \u0026#39;test.csv\u0026#39;, \u0026#39;test.py\u0026#39;, \u0026#39;reticulate学习.html\u0026#39;, \u0026#39;reticulate学习_files\u0026#39;, \u0026#39;reticulate.pdf\u0026#39;, \u0026#39;reticulate学习.Rmd\u0026#39;, \u0026#39;data.py\u0026#39;] 在R代码块中实现上方的Python功能，如下，很简单\nlibrary(reticulate) #导入库 os \u0026lt;- import(\u0026#34;os\u0026#34;) #os库的listdir函数 os$listdir() ## [1] \u0026#34;reticulate学习.md\u0026#34; \u0026#34;test.csv\u0026#34; \u0026#34;test.py\u0026#34; ## [4] \u0026#34;reticulate学习.html\u0026#34; \u0026#34;reticulate学习_files\u0026#34; \u0026#34;reticulate.pdf\u0026#34; ## [7] \u0026#34;reticulate学习.Rmd\u0026#34; \u0026#34;data.py\u0026#34; 可以发现\n import(\u0026quot;os)代替了import os $代替了. \u0026lt;- 代替了 =  再熟悉一下\nlibrary(reticulate) pd \u0026lt;- import(\u0026#34;pandas\u0026#34;) df2 \u0026lt;- pd$read_csv(\u0026#34;test.csv\u0026#34;, encoding=\u0026#34;gbk\u0026#34;) df2   需要注意的是，在R代码块中执行Python代码时，默认会将Python对象转为R对象。\nsource_python() 使用reticulate包中的source_python(\u0026lsquo;py文件路径\u0026rsquo;)可以导入py文件中的变量，这样就可以在R代码块中使用外部变量。例如我在data.py中准备A和B两个字符串\nA = \u0026#39;我是张三,\u0026#39; B = \u0026#39;来自河北\u0026#39; 在R代码块中运行data.py\nlibrary(reticulate) source_python(\u0026#34;data.py\u0026#34;) print(A) ## [1] \u0026#34;我是张三,\u0026#34; print(B) ## [1] \u0026#34;来自河北\u0026#34; paste0(A, B) ## [1] \u0026#34;我是张三,来自河北\u0026#34; py_run_file() 在R代码块中运行项目文件夹中的test.py文件\nlibrary(reticulate) py_run_file(\u0026#34;test.py\u0026#34;) 数据类型对比    R Python Examples     Single-element vector Scalar 1, 1L, TRUE, \u0026quot;foo\u0026quot;   Multi-element vector List c(1.0, 2.0, 3.0), c(1L, 2L, 3L)   List of multiple types Tuple list(1L, TRUE, \u0026quot;foo\u0026quot;)   Named list Dict list(a = 1L, b = 2.0), dict(x = x_data)   Matrix/Array NumPy ndarray matrix(c(1,2,3,4), nrow = 2, ncol = 2)   Data Frame Pandas DataFrame data.frame(x = c(1,2,3), y = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;))   Function Python function function(x) x + 1   NULL, TRUE, FALSE None, True, False NULL, TRUE, FALSE    ","permalink":"/blog/%E5%9C%A8rmarkdown%E4%B8%AD%E8%B0%83%E7%94%A8python%E4%BB%A3%E7%A0%81/","summary":"点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/在Rmarkdown中调用Python代码.zip\nPython和R是一对数据科学两大语言，在互联互通的路上，我感觉R更加的积极。还记得之前 Python中调用R的库-rpy2， 在Python使用R语言语法还是有些不自然。在R中调用Python体验十分棒，一起跟我看看吧。\nreticulate包是可以让R语言非常流畅自然联通Python的关键。\nRmarkdown预备知识\nRmarkdown很像jupyter notbeook和markdown的结合。\n 代码块 markdon文本  代码块 在Rmarkdown中的代码块的开始都是以三引号、{}和语言名为标志，以三引号结尾。\nlibrary(ggplot2) ggplot(mpg, aes(x=displ, y=cty))+ geom_point() library(ggplot2) ggplot(mpg, aes(x=displ, y=cty))+ geom_point()   后面设置好reticulate包后，就可以在Rmarkdown中使用python代码块，\nimport pandas as pd df = pd.read_csv(\u0026#39;test.csv\u0026#39;) df.head() markdown文本 文本部分全部支持markdown语法，这里不做赘述。\n安装 install.packages(\u0026#34;reticulate\u0026#34;) 环境设置 当我们在R代码块中设置好Python环境，就可以在Rmarkdown中跑Python代码。\n查询Python 首先我们需要知道Python安装路径，可以在命令行中逐行执行下面代码\npython3 import sys sys.executable 我的mac电脑的Python安装路径为\n/Library/Frameworks/Python.framework/Versions/3.7/bin/python3 指定Python 执行下方的代码(路径改为自己的Python安装路径)\nlibrary(reticulate) ## Warning: package \u0026#39;reticulate\u0026#39; was built under R version 3.6.2 use_python(\u0026#39;/Library/Frameworks/Python.framework/Versions/3.7/bin/python3\u0026#39;) 执行代码后，我们就可以愉快的使用Python代码","title":"在Rmarkdown中调用Python代码"},{"content":" 点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/SciencePlot科研绘图.zip\n安装 !pip3 install SciencePlots Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple/ Collecting SciencePlots Using cached https://pypi.tuna.tsinghua.edu.cn/packages/c2/44/7b5c0ecd6f2862671a076425546f86ac540bc48c1a618a82d6faa3b26f58/SciencePlots-1.0.9.tar.gz (10 kB) Installing build dependencies ... \u001b[?25l/  tips:\nSciencePlots库需要电脑安装LaTex，其中\n MacOS电脑安装MacTex https://www.tug.org/mactex/ Windows电脑安装MikTex https://miktex.org/  初始化绘图样式 在SciencePlots库中科研绘图样式都是用的science\nimport matplotlib.pyplot as plt plt.style.use(\u0026#39;science\u0026#39;) 当然你也可以同时设置多个样式\nplt.style.use([\u0026#39;science\u0026#39;, \u0026#39;ieee\u0026#39;]) 在上面的代码中， ieee 会覆盖掉 science 中的某些参数（列宽、字号等）， 以达到符合 IEEE论文的绘图要求\n如果要临时使用某种绘图样式，科研使用如下语法\n#注意，此处是语法示例， #如要运行， 请提前准备好x和y的数据 with plt.style.context([\u0026#39;science\u0026#39;, \u0026#39;ieee\u0026#39;]): plt.figure() plt.plot(x, y) plt.show() 案例 定义函数曲线， 准备数据\nimport numpy as np import matplotlib.pyplot as plt def function(x, p): return x ** (2 * p + 1) / (1 + x ** (2 * p)) pparam = dict(xlabel=\u0026#39;Voltage (mV)\u0026#39;, ylabel=\u0026#39;Current ($\\mu$A)\u0026#39;) x = np.linspace(0.75, 1.25, 201) science样式 with plt.style.context([\u0026#39;science\u0026#39;]): fig, ax = plt.subplots() for p in [10, 15, 20, 30, 50, 100]: ax.plot(x, function(x, p), label=p) ax.legend(title=\u0026#39;Order\u0026#39;) ax.autoscale(tight=True) ax.set(**pparam) fig.savefig(\u0026#39;figures/fig1.pdf\u0026#39;) fig.savefig(\u0026#39;figures/fig1.jpg\u0026#39;, dpi=300)   science+ieee样式 针对IEEE论文准备的science+ieee样式\nwith plt.style.context([\u0026#39;science\u0026#39;, \u0026#39;ieee\u0026#39;]): fig, ax = plt.subplots() for p in [10, 20, 40, 100]: ax.plot(x, function(x, p), label=p) ax.legend(title=\u0026#39;Order\u0026#39;) ax.autoscale(tight=True) ax.set(**pparam) # Note: $\\mu$ doesn\u0026#39;t work with Times font (used by ieee style) ax.set_ylabel(r\u0026#39;Current (\\textmu A)\u0026#39;) fig.savefig(\u0026#39;figures/fig2a.pdf\u0026#39;) fig.savefig(\u0026#39;figures/fig2a.jpg\u0026#39;, dpi=300)   science+scatter样式 IEEE 要求图形以黑白打印时必须可读。 ieee 样式还可以将图形宽度设置为适合IEEE论文的一列。\nwith plt.style.context([\u0026#39;science\u0026#39;, \u0026#39;scatter\u0026#39;]): fig, ax = plt.subplots(figsize=(4, 4)) ax.plot([-2, 2], [-2, 2], \u0026#39;k--\u0026#39;) ax.fill_between([-2, 2], [-2.2, 1.8], [-1.8, 2.2], color=\u0026#39;dodgerblue\u0026#39;, alpha=0.2, lw=0) for i in range(7): x1 = np.random.normal(0, 0.5, 10) y1 = x1 + np.random.normal(0, 0.2, 10) ax.plot(x1, y1, label=r\u0026#34;$^\\#${}\u0026#34;.format(i+1)) ax.legend(title=\u0026#39;Sample\u0026#39;, loc=2) xlbl = r\u0026#34;$\\log_{10}\\left(\\frac{L_\\mathrm{IR}}{\\mathrm{L}_\\odot}\\right)$\u0026#34; ylbl = r\u0026#34;$\\log_{10}\\left(\\frac{L_\\mathrm{6.2}}{\\mathrm{L}_\\odot}\\right)$\u0026#34; ax.set_xlabel(xlbl) ax.set_ylabel(ylbl) ax.set_xlim([-2, 2]) ax.set_ylim([-2, 2]) fig.savefig(\u0026#39;figures/fig3.pdf\u0026#39;) fig.savefig(\u0026#39;figures/fig3.jpg\u0026#39;, dpi=300)   dark_background +science+high-vis 您还可以将这些样式与Matplotlib随附的其他样式结合使用。 例如，dark_background +science+high-vis样式：\nwith plt.style.context([\u0026#39;dark_background\u0026#39;, \u0026#39;science\u0026#39;, \u0026#39;high-vis\u0026#39;]): fig, ax = plt.subplots() for p in [10, 15, 20, 30, 50, 100]: ax.plot(x, function(x, p), label=p) ax.legend(title=\u0026#39;Order\u0026#39;) ax.autoscale(tight=True) ax.set(**pparam) fig.savefig(\u0026#39;figures/fig5.pdf\u0026#39;) fig.savefig(\u0026#39;figures/fig5.jpg\u0026#39;, dpi=300)   ","permalink":"/blog/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BEscienceplots/","summary":"点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/SciencePlot科研绘图.zip\n安装 !pip3 install SciencePlots Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple/ Collecting SciencePlots Using cached https://pypi.tuna.tsinghua.edu.cn/packages/c2/44/7b5c0ecd6f2862671a076425546f86ac540bc48c1a618a82d6faa3b26f58/SciencePlots-1.0.9.tar.gz (10 kB) Installing build dependencies ... \u001b[?25l/  tips:\nSciencePlots库需要电脑安装LaTex，其中\n MacOS电脑安装MacTex https://www.tug.org/mactex/ Windows电脑安装MikTex https://miktex.org/  初始化绘图样式 在SciencePlots库中科研绘图样式都是用的science\nimport matplotlib.pyplot as plt plt.style.use(\u0026#39;science\u0026#39;) 当然你也可以同时设置多个样式\nplt.style.use([\u0026#39;science\u0026#39;, \u0026#39;ieee\u0026#39;]) 在上面的代码中， ieee 会覆盖掉 science 中的某些参数（列宽、字号等）， 以达到符合 IEEE论文的绘图要求\n如果要临时使用某种绘图样式，科研使用如下语法\n#注意，此处是语法示例， #如要运行， 请提前准备好x和y的数据 with plt.style.context([\u0026#39;science\u0026#39;, \u0026#39;ieee\u0026#39;]): plt.figure() plt.plot(x, y) plt.show() 案例 定义函数曲线， 准备数据\nimport numpy as np import matplotlib.","title":"科研绘图SciencePlots库"},{"content":" 点击上方图片购买课程   代码下载 点击跳转到下载链接页面\nR语言的ggplot2绘图能力超强，python虽有matplotlib，但是语法臃肿，使用复杂，入门极难，seaborn的出现稍微改善了matplotlib代码量问题，但是定制化程度依然需要借助matplotlib，使用难度依然很大。\n好消息是python中有一个plotnine包，可以实现绝大多数ggplot2的绘图功能，两者语法十分相似，R和Python的语法转换成本大大降低。\n plotnine文档 https://plotnine.readthedocs.io/en/latest/ R语言ggplot2文档 https://ggplot2.tidyverse.org/reference/index.html  安装 !pip3 install plotnine 准备数据 from plotnine.data import mpg #dataframe mpg.head()     manufacturer model displ year cyl trans drv cty hwy fl class     0 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact   1 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact   2 audi a4 2 2008 4 manual(m6) f 20 31 p compact   3 audi a4 2 2008 4 auto(av) f 21 30 p compact   4 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact    快速作图qplot 我们先直接看最简单好用的快速作图函数qplot(x, y, data)\n 横坐标displ 纵坐标cty 数据mpg  from plotnine import qplot qplot(x=\u0026#39;displ\u0026#39;, y=\u0026#39;cty\u0026#39;, data=mpg)   ggplot图层 qplot是快速作图函数，如果想让图更好看，进行私人订制，那么我们需要进行图层设计\n首先设置ggplot图层（相当于买了一个高级画布），\n 数据mpg 横坐标x轴为displ 纵坐标y轴cty  在plotnine中，变量所对应的数据均可通过字段名调用\nfrom plotnine import ggplot, geom_point, aes ggplot(aes(x=\u0026#39;displ\u0026#39;, y=\u0026#39;cty\u0026#39;), mpg)   图层叠加 我们可以看到，已经绘制出一个空的ggplot图层，x轴为displ，y轴为cty。\n接下来我们给这个图层上加上数据对应的散点，使用geom_point()直接追加在ggplot图层之上即可。\n(ggplot(aes(x=\u0026#39;displ\u0026#39;, y=\u0026#39;cty\u0026#39;), mpg) + geom_point() )   color 在上图中，散点是没有区分每辆车的气缸数cyl。\n在geom_point()中，我们可以按照气缸数cyl分门别类，按照颜色显示出来\n(ggplot(aes(x=\u0026#39;displ\u0026#39;, y=\u0026#39;cty\u0026#39;), mpg) + geom_point(aes(color=\u0026#39;cyl\u0026#39;)) )   上图挺好看的，有时候需要绘制的字段是离散型数值，但是上色后可能不够明显，需要声明该字段为离散型。这时候用factor()来告诉plotnine，这个字段是离散型数值\n(ggplot(aes(x=\u0026#39;displ\u0026#39;, y=\u0026#39;cty\u0026#39;), mpg) + geom_point(aes(color=\u0026#39;factor(cyl)\u0026#39;)) )   size 有时候为了增加可视化显示的维度数，还可以考虑加入点的大小size\n(ggplot(aes(x=\u0026#39;displ\u0026#39;, y=\u0026#39;cty\u0026#39;), mpg) + geom_point(aes(size=\u0026#39;hwy\u0026#39;)) )   梯度色 如果你想自己设置颜色的梯度，可以通过scale_color_gradient设置\nfrom plotnine import scale_color_gradient (ggplot(aes(x=\u0026#39;displ\u0026#39;, y=\u0026#39;cty\u0026#39;), mpg) + geom_point(aes(color=\u0026#39;hwy\u0026#39;)) + scale_color_gradient(low=\u0026#39;blue\u0026#39;, high=\u0026#39;red\u0026#39;) )   条形图 plotnine中可绘制的图有很多，刚刚已经讲了散点图，接下来我们看看plotnine中的条形图。\n首先准备一下数据\nimport pandas as pd df = pd.DataFrame({ \u0026#39;variable\u0026#39;: [\u0026#39;gender\u0026#39;, \u0026#39;gender\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;income\u0026#39;, \u0026#39;income\u0026#39;, \u0026#39;income\u0026#39;, \u0026#39;income\u0026#39;], \u0026#39;category\u0026#39;: [\u0026#39;Female\u0026#39;, \u0026#39;Male\u0026#39;, \u0026#39;1-24\u0026#39;, \u0026#39;25-54\u0026#39;, \u0026#39;55+\u0026#39;, \u0026#39;Lo\u0026#39;, \u0026#39;Lo-Med\u0026#39;, \u0026#39;Med\u0026#39;, \u0026#39;High\u0026#39;], \u0026#39;value\u0026#39;: [60, 40, 50, 30, 20, 10, 25, 25, 40], }) df[\u0026#39;variable\u0026#39;] = pd.Categorical(df[\u0026#39;variable\u0026#39;], categories=[\u0026#39;gender\u0026#39;, \u0026#39;age\u0026#39;, \u0026#39;income\u0026#39;]) df[\u0026#39;category\u0026#39;] = pd.Categorical(df[\u0026#39;category\u0026#39;], categories=df[\u0026#39;category\u0026#39;]) df     variable category value     0 gender Female 60   1 gender Male 40   2 age 1-24 50   3 age 25-54 30   4 age 55+ 20   5 income Lo 10   6 income Lo-Med 25   7 income Med 25   8 income High 40    from plotnine import ggplot, aes, geom_text, position_dodge, geom_point #调整文本位置 dodge_text = position_dodge(width=0.9) # new (ggplot(df, aes(x=\u0026#39;variable\u0026#39;, y=\u0026#39;value\u0026#39;, fill=\u0026#39;category\u0026#39;)) #类别填充颜色 + geom_col(position=\u0026#39;dodge\u0026#39;, show_legend=False) # modified + geom_text(aes(y=-.5, label=\u0026#39;category\u0026#39;), # new position=dodge_text, color=\u0026#39;gray\u0026#39;, #文本颜色 size=8, #字号 angle=30, #文本的角度 va=\u0026#39;top\u0026#39;) + lims(y=(-5, 60)) # new )   from plotnine.data import economics_long economics_long.head()     date variable value value01     0 1967-07-01 00:00:00 pce 507.4 0   1 1967-08-01 00:00:00 pce 510.5 0.000266001   2 1967-09-01 00:00:00 pce 516.3 0.00076368   3 1967-10-01 00:00:00 pce 512.9 0.000471937   4 1967-11-01 00:00:00 pce 518.1 0.000918132    from plotnine import ggplot, aes, geom_line (ggplot(economics_long, aes(x=\u0026#39;date\u0026#39;, y=\u0026#39;value01\u0026#39;, color=\u0026#39;variable\u0026#39;)) + geom_line() )   plotnine目前已经支持绝大多数ggplot2，但是文档方面没有ggplot2全，所以学习plotnine时可以参考ggplot2。\n plotnine文档 https://plotnine.readthedocs.io/en/latest/ R语言ggplot2文档 https://ggplot2.tidyverse.org/reference/index.html  ","permalink":"/blog/plotnine%E5%8C%85%E5%AD%A6%E4%B9%A0/","summary":"点击上方图片购买课程   代码下载 点击跳转到下载链接页面\nR语言的ggplot2绘图能力超强，python虽有matplotlib，但是语法臃肿，使用复杂，入门极难，seaborn的出现稍微改善了matplotlib代码量问题，但是定制化程度依然需要借助matplotlib，使用难度依然很大。\n好消息是python中有一个plotnine包，可以实现绝大多数ggplot2的绘图功能，两者语法十分相似，R和Python的语法转换成本大大降低。\n plotnine文档 https://plotnine.readthedocs.io/en/latest/ R语言ggplot2文档 https://ggplot2.tidyverse.org/reference/index.html  安装 !pip3 install plotnine 准备数据 from plotnine.data import mpg #dataframe mpg.head()     manufacturer model displ year cyl trans drv cty hwy fl class     0 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact   1 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact   2 audi a4 2 2008 4 manual(m6) f 20 31 p compact   3 audi a4 2 2008 4 auto(av) f 21 30 p compact   4 audi a4 2.","title":"plotnine绘图 | python的ggplot2语法绘图包"},{"content":" 点击上方图片购买课程   一、文本的作用 文本涉及两个主体，即文本生产者和文本消费者：\n 文本生产者: 生成文本的主体；传递生产者想表达的内容，可能也会潜在蕴含着生产者的一些特质属性 文本消费者: 阅读文本的主体；消费者阅读这段文本时，文本又对消费者认知活动产生影响。  在大数据的今天，通过互联网超文本链接，无数的个人、团体、公司、政府等不同组织形态的主体均深深嵌入到互联网世界，在网络世界中留下了大量的文本。社会、管理、经济、营销、金融等不同学科，均可以研究网络上海量的文本，扩宽的研究对象和研究领域。下面大部分内容是从政治学和经管领域的两份文档翻译来，我觉得讲的挺明白的，其中加入了我的一些理解和扩充。\n二、 理解文本  text as text 原始的文本，定性的文本 textual data(text as data) 量化后的文本数据，可定量  2.1 text as text  text as text 原始的文本，定性的文本\n 文本的重点是传递着某种东西，从某种意义上说，所有形式的文本都包含可以被视为数据形式的信息。因此，文本总是以某种方式提供信息（即使我们不了解如何操作）。但是，言语活动的主要目标不是记录信息，而是进行交流：传达思想，指令，查询等。我们可以记录下来并将其视为数据，但是将我们的想法或思想表达为单词和句子的目的主要是交流，而不是将我们的想法或思想记录为数据形式。大多数数据是这样的：它表征的活动与数据本身完全不同。\n例如，在经济学中，可能是我们想要刻画的经济交易（使用价值媒介交换商品或服务），而数据是以某种聚合形式对这些交易进行抽象，这有助于我们理解交易的意义。通过就抽象的相关特征达成共识，我们可以记录并分析人类活动，例如制造业，服务业或农业。从通信行为中提取文本数据特征的过程遵循相同的过程，但有一个主要区别：由于原始文本可以直接通过记录的语言与我们交谈，因此文本首先不需要进行处理或抽象化待分析。但是，我在这里的论点是，特征抽象的过程是将文本视为数据而不是直接将其视为文本的方法的独特之处。\n具有讽刺意味的是，只有当我们破坏了直接理解文本的能力时，才有可能利用文本的数据获取洞察力。为了使它作为数据有用，我们必须消除原始文本的结构，将文本转换为结构化的表格数据。定量分析是理解非语言数据的起点；另一方面，非结构的文本变成丑陋表格数据的过程，出于统计分析或机器学习目的，我们经常质疑这一过程丢失了什么信息。\n机器是愚蠢的，但是将文本视为数据意味着让愚蠢的机器处理并可能分析我们的文本。关键是，为了将文本作为数据 而不是文本仅仅是文本，我们必须破坏原始文本的直接可解释性，但目的是从其样式化特征中进行更系统，更大规模的推断。我们应该坚定不移地认识到这一过程，但也不要因此而寝食不安，因为将文本作为数据进行分析的重点永远不是解释数据而是挖掘其深层次的模式。数据挖掘是一个破坏性的过程-随便问问哪个矿山-为了开采其宝贵资源，开采矿产资源不可避免会破坏地表形态和环境。\n2.2 Latent versus manifest characteristics from textual data  textual data(text as data) 量化后的文本数据，可定量的数据。所以小标题我翻译为“量化后的文本数据隐藏的信息vs直观可见的信息”，\n 在政治学领域，我们通常最感兴趣的不是文本本身，而是文本透漏给我们有关作者的一些隐藏特性。在政治（以及心理学）研究中，我们有关政治和社会行为者的一些重要理论，很多时候直接观察行为活动很难观察到其内在的品质。\n例如，意识形态是研究政治竞争和政治偏好的基础，但是我们没有直接的衡量工具来记录个人或政党有关“社会和道德自由政策与保守政策”的相对偏好。其他偏好，包括支持或反对特定政策，如1846年废除了英国的《玉米法》（Schonhardt-Bailey，2003年）；在关于《莱肯公约》的辩论中支持或反对进一步的欧洲一体化（Benoit等，2005）；再比如支持或反对不信任运动（Laver和Benoit，2002年）。\n这些偏好是作为政治行为者的内部状态而存在的，无论这些行为者是立法者，政党，代表还是候选人，都无法直接观察。非言语行为指标也可用于推断这些信息，但事实表明，政治行为者所说的话比其他行为形式更为真诚。\n因此，文本数据（Textual data）可能包含有关取向和信念的重要信息，对于这些取向和信念，非语言形式的行为可能会充当不良指标。长期以来，心理学领域也一直将言语行为作为可观察到的潜在兴趣状态的暗示，例如人格特质（例如Tausczik和Pennebaker，2010年）。缺少增强的询问技术或头脑阅读技术来识别政治和社会行为者的偏好，信念，意图，偏见或个性，下一个最佳选择是根据其说话或书写的内容来收集和分析数据。关注的对象不是文本包含的内容，而是其内容作为有关潜在特征的数据所揭示的内容，这些潜在特征为其提供了可观察的含义。最后一句话比较难理解，可以理解为万事万物有联系，通过联系思维来挖掘文本中的信息。\n文本数据(Textual data)还可能具有较为明显的特征，例如，政治传播的许多领域都与文本所指出的潜在特征无关，而与文本本身所包含的传播形式和性质有关。举一个经典的例子，在一个著名的政治局委员对斯大林诞辰70周年之际的文章的研究中，莱特斯，伯努特和加索夫（1951）能够衡量各团体在共产主义意识形态方面的差异。在这一政治事件中，这些信息不仅预示了潜在的方向，而且还预示了在可预见的斯大林死后事件中有关领导权斗争的某种政治动作。这些信息本身是重要的，这些信息只能从每个政治局委员撰写的公开文章中搜集而来，它们必须充分了解将在党和苏联苏维埃新闻，并由其他政权参与者解释为信号。再举一个例子，如果我们对一个政治演说家是使用民粹主义还是种族主义语言感兴趣，那么该语言将直接以民粹主义或种族主义术语或参考形式出现在文本中，而要紧的是它们是否被使用。与其说这些术语代表什么，不如说是什么。例如Jagers和Walgrave（2007）在研究比利时政党的政党政治广播时，发现极右翼政党Vlaams Blok所使用的民粹词语远比其他比利时政党丰富的多。\n在实践中，从文本可观察到的明显特征与潜在特征之间的特征的有时候这两个概念区分的并不明显。举例来说，文体风格可以用一些明显的特征词对文本进行量化，体现出作者的一些写作偏好。例如，在使用适用于政治文本的可读性度量改编的研究中，我们可能会对政治成熟度的潜在水平感兴趣，这可以用来衡量说话者的意图或说话者的特征，这一点从观察到的文本样本中可以看出。或者，我们可能会对它们在可读性上的明显差异感兴趣，这是传播媒介更直接指标。例如，在对英国议会历史演讲的研究中，Spirling（2016）将19世纪末期向简单语言的转变归因于广播扩展特许经营的民主化效应。Benoit，Munger和Spirling（2019）使用类似的措施，比较了同一位总统当天在同一天发表的美国总统国情咨文演讲的样本，但其口头和书面形式均表明口头形式使用的语言较为简单。前一项研究可能对语言的易用性感兴趣，该语言的易用性是政治代表制更潜在的特征的指标，而后一项分析可能更侧重于交付媒介的明显后果。对于许多使用文本数据的研究设计而言，区别更多是研究目标的问题，而不是结构化和分析文本数据的某些内在方式。\n2.3 文本分析的步骤  完整的文本分析步骤包括:\n 读取数据 分词(中文必须有这一步，由于英文是空格间隔的语言，英文有时候不需要分词） 剔除符号和无意义的停止词 字母变小写，词干化 使用一定的编码方式构建文档词频矩阵     序号 步骤 解释 中文 英文     1 读取数据 数据一般存储于不同的文件夹不同文件内，需要将其导入到计算机     2 分词 导入到计算的文本是字符串数据，需要整理为更好用的列表 例如“我爱你中国”分词后\n得到[\u0026ldquo;我\u0026rdquo;, \u0026ldquo;爱\u0026rdquo;, \u0026ldquo;你\u0026rdquo;, \u0026ldquo;中国\u0026rdquo;] \u0026ldquo;I love China\u0026quot;分为\n[\u0026ldquo;I\u0026rdquo;, \u0026ldquo;love\u0026rdquo;, \u0026ldquo;China\u0026rdquo;]   3 剔除符号和无意义的停止词 为了降低计算机运行时间，对分析结果影响较小的字符，诸如符号和无意义的词语需要剔除掉 如“的”，“她”， ”呢”， “了” \u0026ldquo;is\u0026rdquo; , \u0026ldquo;a\u0026rdquo;, \u0026ldquo;the\u0026rdquo;   4 字母变小写，词干化 同义词归并，同主体词归并 “中铁”，“中国铁建”，“中铁集团”都可以归并为“中铁” 先变为小写，这样“I”和“i”都归并为“i”；\n“was”，“are”，“is”都归并为“be”   5 构建文档词频矩阵 使用一定的编码方式，即用某种方式表示文本。常见的有词袋法、tf-idf；\n可以使用scikit-learn构建文档词频矩阵，但中英文略有区别，需要注意 “我爱你中国”需要先整理为“我 爱 你 中国” “I love China”    三、常见的文本分析技术有  主题分析(Thematic analysis) 内容分析(content analysis) 基于词典的方法(dictionary analysis) 文本向量化(Bag-of-words) 监督学习如SVM、Bayes和Regression 无监督学习，如LDA话题模型 自然语言处理  上述文本分析技术，按照人与机器参与程度，绘制在下图。一般来说，越向右，文本分析技术的自动化程度越高，需要注意的是自动化越高，并不代表人的工作量就越少。\n  3.1 主题分析Thematic Analysis 主题分析(Thematic analysis)是一种专家方法，一般与扎根理论方法相结合(Baumer, Mimno, Guha, Quan, \u0026amp; Gay, 2017)。扎根理论与主题分析的理念是基于专家自身经验和对世界的理解，做出对数据的见解，从而构建新理论。主题分析常见于组织科学和传播学(Gioia, Corley, \u0026amp; Hamilton, 2013; Strauss \u0026amp; Corbin, 1998)。\n主题分析涉及一个反复迭代的过程，在此过程中，研究人员将开发出一系列源自文本的代码和类别。除非要精炼理论，否则一般在分析开始之前尚不知道类别。在这种情况下，数据分析需要对文献和数据进行不断的比较。\n 研究人员从参与者自己的语言开始（称为“一阶编码”或“开放式编码”；Gioia等人，2013；Strauss＆Corbin，1998） 然后将相似的代码归为一类（称为“二阶代码”或“主轴编码”；Strauss＆Corbin，1998）。  诸如NVivo和ATLAS.ti之类的计算机软件可以帮助简化上述过程，但文本的分类通常依赖于人类编码衍生的类别的操作定义，计算机自动化的程度依旧很低，分析的数据量通常不大。而且编码过程对编码者的要求严格，通常是对该领域有较深理解的人才适合做此类工作。\n3.2 内容分析/基于词典的方法法 内容分析 和 其他基于字典的方法 通常是通过对特定文本中 单词/词组 的频率计数进行的（Reinard，2008；Short，Broberg，Cogliser＆Brigham，2010）。因为按照这种方法，文本数据被压缩成词组频数，定性的文本数据转化为定量的频数，索引可用于回答更多以定量为导向的研究问题（McKenny等，2016；Reinard，2008）。\n比如进行文本情感分析，我们可以用很简单的思路。即统计文本中正面词出现的总数和负面词出现的总数，得出文本的情感值。而在此分析过程中，我们需要事先拥有一个正面词词典和负面词词典。\n是否有成熟的领域词典、或者构建领域词典，这需要研究者对研究问题和研究的数据有一定的领域知识，工作量也会因是否有词典而不同。一般有现成的成熟的词典，计算机自动化程度高，人工工作量低。\n与主题分析类似，计算机软件可以协助内容分析过程。像DICTION这样的程序会使用 分类字典 自动对文本评分（即，根据单词或n-gram而非操作定义确定主题）。可以与主题分析类似地使用其他程序，例如NVivo或ATLAS.ti，在主题分析中，通过软件的帮助手动进行编码和分类，以组织数据。\n3.3 词袋法Bag-of-words  文本数据是非结构化的定性数据，计算机并不能直接使用。我们需要按照计算机容易理解的方式去组织数据，类似于上图的第一步骤,四段英文文本被组织成一个文档特征矩阵（document-feature-matrix），矩阵中\n 每一行代表一个英文文档 每一个列代表一个特征词  3.3.1 词袋法 vs 主题分析中的编码者 为了理解词袋法，可以类比主题分析 中的编码者。我们可以将词袋法看做是一个死板的，不知变通的人，脑子很简单，只知道统计特征词在每个文档中出现的词频。那么据此我们就知道词袋法和人的优缺点。\n对于词袋法，优点是规则标准统一，缺点是不知变通，牺牲了文本中很多的信息量。强调编码过程的高标准，牺牲了分析的深度。\n对于研究者参与 主题分析 这样的编码过程，优点是研究者有很强的领域知识和强大的洞察力，可以灵活洞察规律，缺点是每个研究者都具有特殊的经历和偏好，编码标准不统一。用研究者编码的过程，强调编码的深度和质量，牺牲了编码分析过程的标准性。\n3.3.2 词袋法的用途 词袋法编码是计算科学领域对文本数据的简化和压缩的方法，后续可以据此进行监督学习和无监督学习。\n3.4 监督学习 在有监督的方法中，研究人员事先知道ta正在寻找什么（罗伯茨等，2014）。比如要判断论文的作者身份这个问题，研究人员为程序提供输入（在这种情况下为文本）和输出（例如，文本作者的身份），然后系统创建一种算法来映射两者之间的联系（Janasik， Honkela和Bruun，2009年）。Mosteller and Wallace（1963）通过使用简单的贝叶斯单词概率来预测12篇有争议的联邦主义者论文（詹姆斯·麦迪逊或亚历山大·汉密尔顿）的作者身份。如今，朴素贝叶斯（Bayes）和支持向量机（SVM）等技术是用于文本分析的流行的监督算法（Manning，Prabhakar和Hinrich，2008年）。\n3.5 无监督学习 无监督算法，如主题分析（Janasik等，2009）可识别数据中的单词簇和主题。但是，与主题分析不同，主题建模使用高度自动化的方法来确定重要主题，分析过程所需的时间和领域知识相对较少。尽管人类的洞察力仍然对帮助解释出现的主题很重要，主题建模适合分析大规模文本数据（Kobayashi1，Mol，Berkers，Kismihok和Den Hartog，2017）。主题建模利用了主题分析（即人类洞察力、解释力）和机器学习（即快速分析大量文本）的优势。\n3.6 自然语言处理 最后，自然语言处理(Natural Language Processing)通常是文本分析中自动化程度最高的形式（有关综述，请参阅Manning等人，2008）。这种方法模拟了人类如何理解和处理语言（Chowdhury，2003；Collobert等，2011；Joshi，1991）。例如，NLP技术可以标记句子中单词的词性（例如，名词，形容词等），将文档从一种语言翻译成另一种语言，甚至使用句子的上下文来阐明词语的词义（Buntine＆Jakulin，2004年）。\n因此，与词袋法不同，NLP认为单词顺序很重要。当使用训练集时，使用深度学习和多模式（即结合文本和图像）等尖端技术进行情感分析是NLP的一种流行形式（Kouloumpis，Wilson和Moore，2011）。这种特殊的分析将文本的总体态度，情感或观点分类为肯定，否定或中立。\n与主题分析形成鲜明对比的是，自然语言处理是一个完全计算机自动化的过程，因此几乎不需要人类的理解和或解释（Quinn等人，2010）。此外，相对于需要人工编码（例如，主题分析）的技术，NLP的执行速度非常快，并且比其他方法更具系统性。例如，计算机科学，信息科学，语言学和心理学的研究人员利用NLP作为文本分析工具（Chowdhury，2003年）。\n大邓提醒一下，自然语言处理属于人工智能范畴，人工智能技术没有那么神，我们应该将其理解为“人工”+“智能”可能更妥当一些，即数据准备阶段用大量的人工时对数据进行标注，产生训练数据集合。之后借助于计算机的“智能”学习数据集中的规律，因此人工智能脱离了人工标注数据的喂养，只能做很简单的事情，更像是人工智障。\n3.7 不同文本分析技术汇总对比     技术 描述 优点 缺点 常被应用(领域) 软件     主题分析Thematic analysis 需要有经验的人员基于自身经验和李俊杰，对研究的数据进行挖掘。编码过程为迭代进行 使用参与者自己的话语或者构念来挖掘数据，对少量文本理解的更深入 属于时间、劳动密集型任务，不适合大规模数据。\n由于不同的编码人员有不同的经历和偏好，编码过程的标准不可靠 社会学、管理学 Nvivo；   内容分析/基于字典方法 统计文本中词语/词组的出现频率 允许对研究的数据进行定量分析 采用的词典应尽量与研究问题适应，词典适配性问题突出 管理学 LIWC、Nvivo、DICTION；   词袋法（Bag of words） 将文本字符串转为计算机能理解的数字化向量 编码标准稳定简单，具有统计学特性，扩展性强 编码过程忽略词语的先后顺序 管理学 Python的scikit-learn、gensim、nltk等；R   监督学习(Supervise models),如SVM、Bayes、Logistic Regression 研究者要知道输入数据X和标签y；需要核实的模型需要X和y之间的关系和规律 允许事先定义编码规则(如选择词袋法还是tfidf)；逻辑简单 需要高质量的标注数据(工作量大)；you与特征词太多，训练的模型很容易过拟合。 计算机学、政治学、管理学 Python的scikit-learn、gensim、nltk等；R（topicmodels， stm）   无监督学习(Kmeans、 LDA话题模型) 使用聚类、话题分析，让计算机自动对数据进行分组 在没有人工标注的情况下，加速了数据的“标注”或“分类” “标注”是机器按照数字特征进行的分组，需要研究者解读才可以赋予“标准“意义；训练过程需要大量的调参 计算机学、政治学、管留学 Python的scikit-learn、gensim、nltk等；R（topicmodels， stm）   自然语言处理 按照人类对语言的理解进行建模，考虑词语顺序 计算机自动化；可分析语义 大多数模型是人类无法解读的黑箱；\n虽然代码编程量小，但训练代码耗时巨大 计算科学；市场营销；心理学 pytorch、tensorflow    3.8 Python能做哪些？ 计算机能做的文本分析，Python都能做到，包括\n 基于词典的分析法；如基于词典法的情感计算 词袋法；可以进行文本相似度计算 有监督机器学习；如基于机器学习的情感分析；文本分类 无监督机器学习；lda话题模型对文本进行话题分析 自然语言处理；考虑词语顺序的LSTM  除了自然语言处理部分，四种方法在我的《Python网络爬虫与文本数据分析》视频课程中都有相关的讲解和实战代码\n 点击上方图片购买课程   相关文献  [1]Berger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. \u0026ldquo;Uniting the tribes: Using text for marketing insight.\u0026rdquo; Journal of Marketing (2019): 0022242919873106.\n  [2]Kenneth Benoit. July 16, 2019. “[Text as Data: An Overview](https://kenbenoit.net/pdfs/28 Benoit Text as Data draft 2.pdf).” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. Handbook of Research Methods in Political Science and International Relations. Thousand Oaks: Sage.\n  [3]Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. \u0026ldquo;A review of best practice recommendations for text analysis in R (and a user-friendly app).\u0026rdquo; Journal of Business and Psychology 33, no. 4 (2018): 445-459.\n ","permalink":"/blog/%E8%AF%BB%E5%AE%8C%E6%9C%AC%E6%96%87%E4%BD%A0%E5%B0%B1%E4%BA%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/","summary":"点击上方图片购买课程   一、文本的作用 文本涉及两个主体，即文本生产者和文本消费者：\n 文本生产者: 生成文本的主体；传递生产者想表达的内容，可能也会潜在蕴含着生产者的一些特质属性 文本消费者: 阅读文本的主体；消费者阅读这段文本时，文本又对消费者认知活动产生影响。  在大数据的今天，通过互联网超文本链接，无数的个人、团体、公司、政府等不同组织形态的主体均深深嵌入到互联网世界，在网络世界中留下了大量的文本。社会、管理、经济、营销、金融等不同学科，均可以研究网络上海量的文本，扩宽的研究对象和研究领域。下面大部分内容是从政治学和经管领域的两份文档翻译来，我觉得讲的挺明白的，其中加入了我的一些理解和扩充。\n二、 理解文本  text as text 原始的文本，定性的文本 textual data(text as data) 量化后的文本数据，可定量  2.1 text as text  text as text 原始的文本，定性的文本\n 文本的重点是传递着某种东西，从某种意义上说，所有形式的文本都包含可以被视为数据形式的信息。因此，文本总是以某种方式提供信息（即使我们不了解如何操作）。但是，言语活动的主要目标不是记录信息，而是进行交流：传达思想，指令，查询等。我们可以记录下来并将其视为数据，但是将我们的想法或思想表达为单词和句子的目的主要是交流，而不是将我们的想法或思想记录为数据形式。大多数数据是这样的：它表征的活动与数据本身完全不同。\n例如，在经济学中，可能是我们想要刻画的经济交易（使用价值媒介交换商品或服务），而数据是以某种聚合形式对这些交易进行抽象，这有助于我们理解交易的意义。通过就抽象的相关特征达成共识，我们可以记录并分析人类活动，例如制造业，服务业或农业。从通信行为中提取文本数据特征的过程遵循相同的过程，但有一个主要区别：由于原始文本可以直接通过记录的语言与我们交谈，因此文本首先不需要进行处理或抽象化待分析。但是，我在这里的论点是，特征抽象的过程是将文本视为数据而不是直接将其视为文本的方法的独特之处。\n具有讽刺意味的是，只有当我们破坏了直接理解文本的能力时，才有可能利用文本的数据获取洞察力。为了使它作为数据有用，我们必须消除原始文本的结构，将文本转换为结构化的表格数据。定量分析是理解非语言数据的起点；另一方面，非结构的文本变成丑陋表格数据的过程，出于统计分析或机器学习目的，我们经常质疑这一过程丢失了什么信息。\n机器是愚蠢的，但是将文本视为数据意味着让愚蠢的机器处理并可能分析我们的文本。关键是，为了将文本作为数据 而不是文本仅仅是文本，我们必须破坏原始文本的直接可解释性，但目的是从其样式化特征中进行更系统，更大规模的推断。我们应该坚定不移地认识到这一过程，但也不要因此而寝食不安，因为将文本作为数据进行分析的重点永远不是解释数据而是挖掘其深层次的模式。数据挖掘是一个破坏性的过程-随便问问哪个矿山-为了开采其宝贵资源，开采矿产资源不可避免会破坏地表形态和环境。\n2.2 Latent versus manifest characteristics from textual data  textual data(text as data) 量化后的文本数据，可定量的数据。所以小标题我翻译为“量化后的文本数据隐藏的信息vs直观可见的信息”，\n 在政治学领域，我们通常最感兴趣的不是文本本身，而是文本透漏给我们有关作者的一些隐藏特性。在政治（以及心理学）研究中，我们有关政治和社会行为者的一些重要理论，很多时候直接观察行为活动很难观察到其内在的品质。\n例如，意识形态是研究政治竞争和政治偏好的基础，但是我们没有直接的衡量工具来记录个人或政党有关“社会和道德自由政策与保守政策”的相对偏好。其他偏好，包括支持或反对特定政策，如1846年废除了英国的《玉米法》（Schonhardt-Bailey，2003年）；在关于《莱肯公约》的辩论中支持或反对进一步的欧洲一体化（Benoit等，2005）；再比如支持或反对不信任运动（Laver和Benoit，2002年）。\n这些偏好是作为政治行为者的内部状态而存在的，无论这些行为者是立法者，政党，代表还是候选人，都无法直接观察。非言语行为指标也可用于推断这些信息，但事实表明，政治行为者所说的话比其他行为形式更为真诚。\n因此，文本数据（Textual data）可能包含有关取向和信念的重要信息，对于这些取向和信念，非语言形式的行为可能会充当不良指标。长期以来，心理学领域也一直将言语行为作为可观察到的潜在兴趣状态的暗示，例如人格特质（例如Tausczik和Pennebaker，2010年）。缺少增强的询问技术或头脑阅读技术来识别政治和社会行为者的偏好，信念，意图，偏见或个性，下一个最佳选择是根据其说话或书写的内容来收集和分析数据。关注的对象不是文本包含的内容，而是其内容作为有关潜在特征的数据所揭示的内容，这些潜在特征为其提供了可观察的含义。最后一句话比较难理解，可以理解为万事万物有联系，通过联系思维来挖掘文本中的信息。\n文本数据(Textual data)还可能具有较为明显的特征，例如，政治传播的许多领域都与文本所指出的潜在特征无关，而与文本本身所包含的传播形式和性质有关。举一个经典的例子，在一个著名的政治局委员对斯大林诞辰70周年之际的文章的研究中，莱特斯，伯努特和加索夫（1951）能够衡量各团体在共产主义意识形态方面的差异。在这一政治事件中，这些信息不仅预示了潜在的方向，而且还预示了在可预见的斯大林死后事件中有关领导权斗争的某种政治动作。这些信息本身是重要的，这些信息只能从每个政治局委员撰写的公开文章中搜集而来，它们必须充分了解将在党和苏联苏维埃新闻，并由其他政权参与者解释为信号。再举一个例子，如果我们对一个政治演说家是使用民粹主义还是种族主义语言感兴趣，那么该语言将直接以民粹主义或种族主义术语或参考形式出现在文本中，而要紧的是它们是否被使用。与其说这些术语代表什么，不如说是什么。例如Jagers和Walgrave（2007）在研究比利时政党的政党政治广播时，发现极右翼政党Vlaams Blok所使用的民粹词语远比其他比利时政党丰富的多。\n在实践中，从文本可观察到的明显特征与潜在特征之间的特征的有时候这两个概念区分的并不明显。举例来说，文体风格可以用一些明显的特征词对文本进行量化，体现出作者的一些写作偏好。例如，在使用适用于政治文本的可读性度量改编的研究中，我们可能会对政治成熟度的潜在水平感兴趣，这可以用来衡量说话者的意图或说话者的特征，这一点从观察到的文本样本中可以看出。或者，我们可能会对它们在可读性上的明显差异感兴趣，这是传播媒介更直接指标。例如，在对英国议会历史演讲的研究中，Spirling（2016）将19世纪末期向简单语言的转变归因于广播扩展特许经营的民主化效应。Benoit，Munger和Spirling（2019）使用类似的措施，比较了同一位总统当天在同一天发表的美国总统国情咨文演讲的样本，但其口头和书面形式均表明口头形式使用的语言较为简单。前一项研究可能对语言的易用性感兴趣，该语言的易用性是政治代表制更潜在的特征的指标，而后一项分析可能更侧重于交付媒介的明显后果。对于许多使用文本数据的研究设计而言，区别更多是研究目标的问题，而不是结构化和分析文本数据的某些内在方式。\n2.3 文本分析的步骤  完整的文本分析步骤包括:\n 读取数据 分词(中文必须有这一步，由于英文是空格间隔的语言，英文有时候不需要分词） 剔除符号和无意义的停止词 字母变小写，词干化 使用一定的编码方式构建文档词频矩阵     序号 步骤 解释 中文 英文     1 读取数据 数据一般存储于不同的文件夹不同文件内，需要将其导入到计算机     2 分词 导入到计算的文本是字符串数据，需要整理为更好用的列表 例如“我爱你中国”分词后","title":"读完本文你就了解什么是文本分析"},{"content":"\n 点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/数据分析plydata库学习.zip\nplydata是一个提供数据处理语法的Python库，借鉴了R语言dplyr，tidyr和forcats等包中的管道操作符。\nplydata使用 \u0026gt;\u0026gt;运算符 作为管道符号，或者使用ply（data，* verbs）函数代替 \u0026gt;\u0026gt;， 目前仅支持对pandas.DataFrame数据进行操作。\n安装 !pip3 install plydata 快速上手 import pandas as pd from plydata import define, query, if_else, ply df = pd.DataFrame({ \u0026#39;x\u0026#39;: [0, 1, 2, 3], \u0026#39;y\u0026#39;: [\u0026#39;zero\u0026#39;, \u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]}) df     x y     0 0 zero   1 1 one   2 2 two   3 3 three    define define函数名很简单，定义变量或者操作变量。\ndefine(data, *args,**kwargs)\n data 待操作的dataframe数据 args、kwargs 操作过程及结果。  比如我们想在df中新建一个z列，z列的值完全复制自x列。可以使用代码 define(df, z=\u0026lsquo;x\u0026rsquo;)\ndefine(df, z=\u0026#39;x\u0026#39;)     x y z     0 0 zero 0   1 1 one 1   2 2 two 2   3 3 three 3    注意: df中有x列，所以这里的使用的\u0026rsquo;x',而不是x。\n\u0026raquo;管道符 刚刚的问题可以使用管道符实现与define(df, z=\u0026lsquo;x\u0026rsquo;)相同的功能。\n#等同于df[\u0026#39;z\u0026#39;]=df[\u0026#39;x\u0026#39;] #等同于define(df, z=\u0026#39;x\u0026#39;) df \u0026gt;\u0026gt; define(z=\u0026#39;x\u0026#39;)     x y z     0 0 zero 0   1 1 one 1   2 2 two 2   3 3 three 3    如果有多个环节，可以用括号包裹住，环节与环节用\u0026gt;\u0026gt;和换行前后衔接。\n比如我们有多个操作，每一步操作如下\n m=2x n=m*m q=m+n  (df \u0026gt;\u0026gt; define(m=\u0026#39;2*x\u0026#39;) \u0026gt;\u0026gt; define(n=\u0026#39;m*m\u0026#39;) \u0026gt;\u0026gt; define(q=\u0026#39;m+n\u0026#39;) )     x y m n q     0 0 zero 0 0 0   1 1 one 2 4 6   2 2 two 4 16 20   3 3 three 6 36 42    上面所有的plydata相关操作不会修改原始数据df\ndf     x y     0 0 zero   1 1 one   2 2 two   3 3 three    if_else 在df中新建z列，z的值满足\n 当x大于1，z为1 当x小于等于1， z为0  使用if_else(predicate, true_value, false_value)\n predicate 逻辑判断条件字符串 true_value 满足逻辑条件返回的值 false_value 不满足逻辑条件返回的值  #等同于define(df, z=if_else(\u0026#39;x\u0026gt;1\u0026#39;, 1, 0)) df \u0026gt;\u0026gt; define(z=if_else(\u0026#39;x\u0026gt;1\u0026#39;, 1, 0))     x y z     0 0 zero 0   1 1 one 0   2 2 two 1   3 3 three 1    query query(data, expr)\n data 待查询的dataframe数据 expr 查询条件字符串  (df \u0026gt;\u0026gt; define(z=if_else(\u0026#39;x\u0026gt;1\u0026#39;, 1, 0)) \u0026gt;\u0026gt; query(\u0026#39;z==1\u0026#39;) )     x y z     2 2 two 1   3 3 three 1    ply() ply功能等同于管道符\u0026raquo;， 刚刚上面的代码\n(df \u0026gt;\u0026gt; define(z=if_else(\u0026#39;x\u0026gt;1\u0026#39;, 1, 0)) \u0026gt;\u0026gt; query(\u0026#39;z==1\u0026#39;) ) 可以用ply\nply(df, define(z=if_else(\u0026#39;x \u0026gt; 1\u0026#39;, 1, 0)), query(\u0026#39;z == 1\u0026#39;) )     x y z     2 2 two 1   3 3 three 1    plydata与plotnine 在R语言中，用ggplot2作图经常会用到管道符。而在Python中，plydata提供管道符，可以与作图库plotnine结合使用。\nfrom plotnine import ggplot, geom_line, aes from plydata import define, if_else import numpy as np df = pd.DataFrame({\u0026#39;x\u0026#39;: np.linspace(0, 2*np.pi, 500)}) (df \u0026gt;\u0026gt; define(y=\u0026#39;np.sin(x)\u0026#39;) \u0026gt;\u0026gt; define(sign=if_else(\u0026#39;y\u0026gt;=0\u0026#39;, \u0026#39;\u0026#34;pos\u0026#34;\u0026#39;, \u0026#39;\u0026#34;neg\u0026#34;\u0026#39;)) \u0026gt;\u0026gt; (ggplot(aes(x=\u0026#39;x\u0026#39;, y=\u0026#39;y\u0026#39;, color=\u0026#39;sign\u0026#39;))+ geom_line(size=1.5)) )   ","permalink":"/blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90plydata%E5%BA%93/","summary":"点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/数据分析plydata库学习.zip\nplydata是一个提供数据处理语法的Python库，借鉴了R语言dplyr，tidyr和forcats等包中的管道操作符。\nplydata使用 \u0026gt;\u0026gt;运算符 作为管道符号，或者使用ply（data，* verbs）函数代替 \u0026gt;\u0026gt;， 目前仅支持对pandas.DataFrame数据进行操作。\n安装 !pip3 install plydata 快速上手 import pandas as pd from plydata import define, query, if_else, ply df = pd.DataFrame({ \u0026#39;x\u0026#39;: [0, 1, 2, 3], \u0026#39;y\u0026#39;: [\u0026#39;zero\u0026#39;, \u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]}) df     x y     0 0 zero   1 1 one   2 2 two   3 3 three    define define函数名很简单，定义变量或者操作变量。","title":"数据分析plydata库"},{"content":" 点击上方图片购买课程   70G年报pdf数据集  数据下载说明 所有pdf均来自上海证券交易所官网，使用shreport库进行的下载。\n 报告信息汇总文件   summary.xlsx内字段\n company 上市公司企业名 code 股票代码 type 报告类型 year 报告年份 date 报告发布日期 pdf 报告pdf文件下载链接  import pandas as pd from pathlib import Path #报告汇总文件summary.xlsx df = pd.read_excel(\u0026#39;summary.xlsx\u0026#39;) df.head()   一共有报告71126份\nlen(df) 71149 一共有上市公司1486家\nlen(df[\u0026#39;company\u0026#39;].unique()) 1486 summary文件夹 summary文件夹内是每家公司的报告披露情况\n df1 = pd.read_excel(\u0026#39;summary/600000.xlsx\u0026#39;) df1.head()   浦发银行一共有75份定期报告\nlen(df1) 75 reports文件夹 reports文件夹存放着以各各公司股票代码命名的文件夹\n文件夹内是该公司所有定期报告\n 读取pdf报告 可使用pdfdocx库读取pdf,\npdfdocx文档链接 https://github.com/thunderhit/pdfdocx\nfrom pdfdocx import read_pdf p_text = read_pdf(\u0026#39;reports/600000/600000_2012_1.pdf\u0026#39;) p_text Run\n上海浦东发展银行股份有限公司 \\n\\n2012 年第一季度报告 \\n\\n \\n\\n \\n\\n§1 重要提示 \\n\\n1.1 公司董事会、监事会及其董事、监事、高级管理人员保证本报告所载资料不存在任何虚假记载、\\n\\n误导性陈述或者重大遗漏，并对其内容的真实性、准确性和完整性承担个别及连带责任。\\n\\n1.2 公司于 2012 年 4 月 26 日以通讯表决的方式召开第四届董事会第二十六次会议审议通过本报告，\\n\\n1.4 公司董事长、行长吉晓辉、财务总监刘信义及财务机构负责人傅能声明：保证本季度报告中财务\\n\\n公司全体董事出席董事会会议并行使表决权。\\n\\n1.3 公司第一季度财务报告未经审计。\\n\\n报告的真实、完整。\\n\\n \\n§2 公司基本情况 \\n\\n2.1 主要会计数据及财务指标 \\n\\n本报告期末 \\n\\n上年度期末 \\n\\n币种:人民币 \\n\\n本报告期末比上年\\n度期末增减(%) \\n\\n总资产(千元) \\n\\n归属于上市公司股东的所有者权益(千元) \\n\\n2,804,646,567\\n\\n157,055,724\\n\\n2,684,693,689 \\n148,891,235 \\n\\n归属于上市公司股东的每股净资产(元) \\n\\n8.420\\n\\n7.982 \\n\\n4.47 \\n5.48 \\n5.49 \\n\\n经营活动产生的现金流量净额(千元) \\n\\n每股经营活动产生的现金流\\n\\n \\n\\n \\n \\n母公司现金流量表 \\n \\n2012 年 1—3 月 \\n \\n编制单位: 上海浦东发展银行股份有限公司.... 70G数据下载 链接:https://pan.baidu.com/s/14PI6MbxunFQ3fZOfR33zkw 密码:osoi\n","permalink":"/blog/70g%E5%B9%B4%E6%8A%A5pdf%E6%95%B0%E6%8D%AE%E9%9B%86/","summary":"点击上方图片购买课程   70G年报pdf数据集  数据下载说明 所有pdf均来自上海证券交易所官网，使用shreport库进行的下载。\n 报告信息汇总文件   summary.xlsx内字段\n company 上市公司企业名 code 股票代码 type 报告类型 year 报告年份 date 报告发布日期 pdf 报告pdf文件下载链接  import pandas as pd from pathlib import Path #报告汇总文件summary.xlsx df = pd.read_excel(\u0026#39;summary.xlsx\u0026#39;) df.head()   一共有报告71126份\nlen(df) 71149 一共有上市公司1486家\nlen(df[\u0026#39;company\u0026#39;].unique()) 1486 summary文件夹 summary文件夹内是每家公司的报告披露情况\n df1 = pd.read_excel(\u0026#39;summary/600000.xlsx\u0026#39;) df1.head()   浦发银行一共有75份定期报告\nlen(df1) 75 reports文件夹 reports文件夹存放着以各各公司股票代码命名的文件夹\n文件夹内是该公司所有定期报告\n 读取pdf报告 可使用pdfdocx库读取pdf,\npdfdocx文档链接 https://github.com/thunderhit/pdfdocx\nfrom pdfdocx import read_pdf p_text = read_pdf(\u0026#39;reports/600000/600000_2012_1.","title":"70g年报pdf数据集"},{"content":"\n 点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/在jupyter中调用R语言代码.zip\n在数据分析中，Python和R各有千秋，虽然Python或R都能在数据分析打通关，从采集、清洗(预处理)、分析、可视化，但是在不同的环节，不同的语言易用程度不同。Python胜在干脏活累活，诸如数据采集、数据清洗、机器学习等；而R语言胜在统计分析、可视化等。所以，如果你正好Python和R都入门了，可以考虑两者结合。那么就会遇到今天的问题-如何在jupyter中使用R语言代码？\nrpy2包 rpy2包首先是Python包，ta衔接了Python和R，通过rpy2可以运行R语言相关代码、函数、包。\n在Jupyter notebook中主要有两种情况\n 单元格中以Python为主，可以插入R的代码字符串 单个的单元格要么只有R代码，要么只有Python代码  遇到这类问题，各位的电脑要确保\n 电脑已经安装了Python和R 已安装rpy2包  安装rpy2包\n!pip3 install rpy2 import rpy2.robjects as robjects from rpy2.robjects import pandas2ri #R代码运行会尽量以DataFrame显示 pandas2ri.activate() #运行R代码 robjects.r(\u0026#39;R代码字符串\u0026#39;) 运行R代码 rpy2.robjects.r(\u0026#39;R代码字符串\u0026#39;) rpy2.robjects.r()函数会识别 R代码字符串, 并将其执行。\nimport rpy2.robjects as robjects from rpy2.robjects import pandas2ri import warnings warnings.filterwarnings(\u0026#39;ignore\u0026#39;) #直接声明，data frame强制转为DataFrame pandas2ri.activate() #R代码 r_code = \u0026#34;\u0026#34;\u0026#34; library(dplyr) text \u0026lt;- c(\u0026#34;Because I could not stop for Death -\u0026#34;, \u0026#34;He kindly stopped for me -\u0026#34;, \u0026#34;The Carriage held but just Ourselves -\u0026#34;, \u0026#34;and Immortality\u0026#34;) text_df \u0026lt;- tibble(docid=1:4, text=text) text_df \u0026#34;\u0026#34;\u0026#34; #运行R代码 robjects.r(r_code)     docid text     1 1 Because I could not stop for Death -   2 2 He kindly stopped for me -   3 3 The Carriage held but just Ourselves -   4 4 and Immortality     准备一个R代码r_code，该代码会生成R语言的tibble数据类型(R语言中的一种data frame)。 robjects.r(r_code) 运行R代码(字符串) 在本例中，使用pandas2ri.activate()强制声明，在Python中将变量text_df以pandas.DataFrame显示  调用R数据集 rpy2.robjects.r.data(\u0026#39;R的数据集名\u0026#39;) 调用R的数据集\nimport rpy2.robjects as robjects  robjects.r.data(\u0026lsquo;R数据集名\u0026rsquo;) 准备R数据集，此时Python并没有显示该数据集，可以理解为准备数据 robjects.r['R数据集名'] 导入R的数据集  import rpy2.robjects as robjects from rpy2.robjects import pandas2ri pandas2ri.activate() #准备iris robjects.r.data(\u0026#39;iris\u0026#39;) #导入iris iris = robjects.r[\u0026#39;iris\u0026#39;] iris.head()     Sepal.Length Sepal.Width Petal.Length Petal.Width Species     1 5.1 3.5 1.4 0.2 setosa   2 4.9 3 1.4 0.2 setosa   3 4.7 3.2 1.3 0.2 setosa   4 4.6 3.1 1.5 0.2 setosa   5 5 3.6 1.4 0.2 setosa    调用R语言包 rpy2.robjects.packages.importr(\u0026#39;R包名\u0026#39;) R语言中的readr包有read_csv()函数，可以读取csv文件。\nfrom rpy2.robjects.packages import importr from rpy2.robjects import pandas2ri pandas2ri.activate() #导入R语言中的readr包 readr = importr(\u0026#34;readr\u0026#34;) #使用readr包中的read_csv()函数 mtcars = readr.read_csv(\u0026#34;mtcars.csv\u0026#34;) mtcars.head()     car mpg cyl disp hp drat wt qsec vs am gear carb     1 Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4   2 Mazda RX4 Wag 21 6 160 110 3.9 2.875 17.02 0 1 4 4   3 Datsun 710 22.8 4 108 93 3.85 2.32 18.61 1 1 4 1   4 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1   5 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.02 0 0 3 2    Cell只运行R代码 上面的几个章节中，每个cell中代码均为Python和R的混用，如果在Cell中只运行R代码，\n 可以先单独在一个cell中运行 %load_ext rpy2.ipython, 在另外一个cell中使用%%R声明本cell中使用的是R代码。  %load_ext rpy2.ipython %%R library(ggplot2) ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species))+ geom_point()   %%R -h 550 -w 800 #设置宽、高 library(ggplot2) ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species))+ geom_point()   ","permalink":"/blog/%E5%9C%A8jupyter%E4%B8%AD%E8%B0%83%E7%94%A8r%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BB%A3%E7%A0%81/","summary":"点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/在jupyter中调用R语言代码.zip\n在数据分析中，Python和R各有千秋，虽然Python或R都能在数据分析打通关，从采集、清洗(预处理)、分析、可视化，但是在不同的环节，不同的语言易用程度不同。Python胜在干脏活累活，诸如数据采集、数据清洗、机器学习等；而R语言胜在统计分析、可视化等。所以，如果你正好Python和R都入门了，可以考虑两者结合。那么就会遇到今天的问题-如何在jupyter中使用R语言代码？\nrpy2包 rpy2包首先是Python包，ta衔接了Python和R，通过rpy2可以运行R语言相关代码、函数、包。\n在Jupyter notebook中主要有两种情况\n 单元格中以Python为主，可以插入R的代码字符串 单个的单元格要么只有R代码，要么只有Python代码  遇到这类问题，各位的电脑要确保\n 电脑已经安装了Python和R 已安装rpy2包  安装rpy2包\n!pip3 install rpy2 import rpy2.robjects as robjects from rpy2.robjects import pandas2ri #R代码运行会尽量以DataFrame显示 pandas2ri.activate() #运行R代码 robjects.r(\u0026#39;R代码字符串\u0026#39;) 运行R代码 rpy2.robjects.r(\u0026#39;R代码字符串\u0026#39;) rpy2.robjects.r()函数会识别 R代码字符串, 并将其执行。\nimport rpy2.robjects as robjects from rpy2.robjects import pandas2ri import warnings warnings.filterwarnings(\u0026#39;ignore\u0026#39;) #直接声明，data frame强制转为DataFrame pandas2ri.activate() #R代码 r_code = \u0026#34;\u0026#34;\u0026#34; library(dplyr) text \u0026lt;- c(\u0026#34;Because I could not stop for Death -\u0026#34;, \u0026#34;He kindly stopped for me -\u0026#34;, \u0026#34;The Carriage held but just Ourselves -\u0026#34;, \u0026#34;and Immortality\u0026#34;) text_df \u0026lt;- tibble(docid=1:4, text=text) text_df \u0026#34;\u0026#34;\u0026#34; #运行R代码 robjects.","title":"rpy2包 | 在Jupyter中调用R语言的代码"},{"content":"哈尔滨         点击上方图片购买课程   ","permalink":"/blog/%E5%93%88%E5%B0%94%E6%BB%A8%E7%BE%8E%E6%99%AF/","summary":"哈尔滨         点击上方图片购买课程   ","title":"哈尔滨的美景"},{"content":" 点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/数据可视化pandas_bokeh.zip\npandas_bokeh pandas_bokeh可以使得dataframe直接调用bokeh底层代码。通过使用pandas_bokeh，可以在notebook或者html中显示，语法相比于bokeh更简洁易用。\n安装 !pip3 install pandas_bokeh 快速上手 对fruits.csv做一个条形图\nimport pandas as pd df = pd.read_excel(\u0026#39;fruits.xlsx\u0026#39;) df     fruits 2015 2016 2017     0 苹果 2 5 3   1 梨 1 3 2   2 香蕉 4 3 4   3 草莓 3 2 4   4 樱桃 2 4 5   5 橘子 4 6 3    import pandas as pd import pandas_bokeh import warnings warnings.filterwarnings(\u0026#34;ignore\u0026#34;) #忽略某些不影响程序的提示 #在notebook中能显示可视化结果 pandas_bokeh.output_notebook() #将fruits列设置为行索引 df = pd.read_excel(\u0026#39;fruits.xlsx\u0026#39;) df.plot_bokeh(kind=\u0026#39;bar\u0026#39;, x = \u0026#39;fruits\u0026#39;, #将fruits列选做x轴 y = [\u0026#39;2015\u0026#39;, \u0026#39;2016\u0026#39;, \u0026#39;2017\u0026#39;], #将年份选做y轴 ylabel=\u0026#39;水果价格(元/斤)\u0026#39;, title=\u0026#39;水果\u0026#39;, show_figure=True) #显示   上面的例子已经可以看到该库的简洁优美之处，现在我们多学点\npandas_bokeh输出设定  pandas_bokeh.output_notebook() 在notebook中能显示可视化结果 pandas_bokeh.output_file(filename) 将结果输出到html文件中  支持可视化图种类  line bar point scatter histogram area pie map  以bar为例，调用可视化接口时，有以下两种使用方法\n df.plot_bokeh.line(\u0026hellip;) df.plot_bokeh(kind=\u0026lsquo;line\u0026rsquo;)  import numpy as np df = pd.read_excel(\u0026#39;fake_stocks.xlsx\u0026#39;) df.plot_bokeh(kind=\u0026#34;line\u0026#34;, x=\u0026#39;日期\u0026#39;, #将excel中的日期列当做x轴 y=[\u0026#39;Google\u0026#39;, \u0026#39;Apple\u0026#39;]) #将\u0026#39;Google\u0026#39;, \u0026#39;Apple\u0026#39;两列作为y轴   高级参数 df.plot_bokeh(kind, x, y, figsize, title, xlim, ylim, xlabel, ylabel, logx, logy, xticks, yticks, color, colormap, hovertool, zooming, panning, **kwargs)  kind: 支持的图种类\u0026quot;line\u0026quot;, \u0026ldquo;point\u0026rdquo;, \u0026ldquo;scatter\u0026rdquo;, \u0026ldquo;bar\u0026rdquo; ,\u0026ldquo;histogram\u0026quot;等 x: 选中数据某列名作为x轴。如果x不传入参数，会默认使用df的索引作为x轴 y: 将数据中的某列或某些列指定为y轴 figsize: 图的尺寸,如figsize=(600, 350) title: 图的标题 xlim/ylim: 设置图的x轴和y轴的范围 xlabel/ylabel: 设置x轴和y轴的名字 logx/logy: 布尔型值，对x和y的数据是否进行log变换 xticks/yticks: 显性定义横纵坐标刻度 color: 对图中使用同一的颜色，如果想定义多种颜色，请使用colormap参数 colormap: 可以对图中的不同对象设置颜色， 传入的是颜色字符串列表。 hovertool: 默认True，鼠标放在图上会悬浮显示具体信息。 zooming: 布尔值，默认True支持缩放 panning: 布尔值，默认True支持平移 kwargs**: 更多参数设定请看官方文档  文档  pandas_bokeh文档地址https://github.com/PatrikHlobil/Pandas-Bokeh Bokeh官方文档地址https://docs.bokeh.org/en/latest/  ","permalink":"/blog/%E4%BD%BF%E7%94%A8pandas_bokeh%E5%81%9A%E5%8F%AF%E8%A7%86%E5%8C%96/","summary":"点击上方图片购买课程   代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/数据可视化pandas_bokeh.zip\npandas_bokeh pandas_bokeh可以使得dataframe直接调用bokeh底层代码。通过使用pandas_bokeh，可以在notebook或者html中显示，语法相比于bokeh更简洁易用。\n安装 !pip3 install pandas_bokeh 快速上手 对fruits.csv做一个条形图\nimport pandas as pd df = pd.read_excel(\u0026#39;fruits.xlsx\u0026#39;) df     fruits 2015 2016 2017     0 苹果 2 5 3   1 梨 1 3 2   2 香蕉 4 3 4   3 草莓 3 2 4   4 樱桃 2 4 5   5 橘子 4 6 3    import pandas as pd import pandas_bokeh import warnings warnings.","title":"使用pandas_bokeh做可视化"},{"content":" 点击上方图片购买课程    本文提供了一条通往实际“被动”收入和财务自由的现实途径\nSrc https://themakingofamillionaire.com/passive-income-is-a-lie-but-scalable-income-is-real-f0483af14483\nAuthor: Ben Le Fort\n 如今，个人理财中最大的流行语之一是“被动收入”。 不乏网络营销人员想要向您推销的想法是，如果您只是听他们的（并购买他们的“课程”），您也可以以最少的努力开始创收。\n但事情是这样的； 被动收入的想法是一堆废话。这并不意味着您无法开展数字业务并永远改变您的财务生活，因为您绝对可以而且应该这样做。\n在本文中，我将解释\n 为什么被动收入是一个神话？ 可扩展收入如何运作的示例 从财务角度，多久才能退休，且只靠利息过活？ 增加可扩展的收入帮助我节省了第一笔 10 万美元 我总是记得“为什么”我这样做  为什么被动收入是一个神话？ 正如我过去所写，博主和 YouTuber 已经开始将任何数字业务称为“被动收入机会”。\n 联属网络营销。 销售数码产品/软件。 销售信息产品，如课程和书籍。 在线销售实物商品。 在 YouTube 频道、播客或博客上展示广告。  通常，当您听到有人提到“被动收入”时，他们真正指的是可扩展的商业收入。 可扩展的收入意味着不能保证您赚到一毛钱，但您的收入潜力没有限制。\n可扩展收入如何运作的示例 我的业务之一就是销售在线课程，这是可扩展收入的一个完美例子。\n 如果没有人买我的课程，我就赚不到钱。 既然是数字产品，卖额外的课程也不用花我额外的钱。 这与销售实物的人形成鲜明对比。 如果我卖电脑，我会为我卖的每台电脑支付额外的费用。 在经济学中，这被称为“边际生产成本”。 销售数字产品，尤其是像课程这样的信息产品意味着我的边际生产成本几乎为零。 这意味着如果我出售价值 0 美元或 100 万美元的课程，我的成本将是相同的。  这就是拥有可扩展收入的含义，也就是大多数人所说的“被动收入”。\n诚然，每增加一美元可扩展收入，您就需要减少工作量； 这不是说你可以抬起脚停止工作。 被动收入是您无需做任何工作就可以赚取的钱。 如果我停止从事我的业务，收入很快就会枯竭。被动收入的唯一真正来源来自投资收入。\n 股票分红。 从债券中赚取的利息。 从房地产收取的租金。  除非你继承了很多钱，否则你产生大量被动收入的唯一方法是通过工作、入不敷出以及投资差额来产生主动收入。\n不要相信任何告诉你不同的人。 那些告诉你不工作也能赚钱的人要么是想卖给你东西，要么是妄想，要么两者兼而有之。\n主动收入可以来自朝九晚五的工作或收入可扩展的企业。 或者，就我而言，两者兼而有之。\n**致富的简单途径在于保持开支不变，增加收入，并投资差价。**过去，我写过关于我们可以利用“两个杠杆”来提高储蓄率的文章。\n 对已有用的财富，尽可能节省节俭。 赚更多的钱。  **学会节俭但轻松幸福地生活，是迈向财务独立的关键一步。 **一旦你养成了良好的消费习惯，积累财富的最快途径就是不断寻找增加收入的方法，同时保持生活成本稳定并投资差额。\n 如果你能靠 25,000 美元生活并赚 50,000 美元，那意味着你有 25,000 美元可以投资。 如果你能靠 25,000 美元生活并赚 75,000 美元，那意味着你有 50,000 美元可以投资。 如果你能靠 25,000 美元生活并赚 125,000 美元，那意味着你有 100,000 美元可以投资。  如果你能找到一种每年投资收益数倍于你的年支出的方法，你的个人财富很快就会像火箭一样起飞。这是一个简单的概念，但在现实生活中要困难得多。除非您准备实行极端节俭，否则您不太可能每年通过朝九晚五的工作获得的薪水节省 2-4 倍的年度开支。当所有的税收和减免都从你的薪水中扣除，你减去你需要支付的住房、交通、食品和其他基本生活费用时，月底很可能已经所剩无几。\n这就是为什么创造收入可扩展的副业对我来说是一个改变游戏规则的人。\n从财务角度，多久才能退休，且只靠利息过活？ 不考虑退休金，只考虑工作多久，个人的财富利息收入能hold住个人年开支。需要确定以下四个指标\n 个人现金积蓄 money_pool 个人年收入（平均） avg_income 个人年支出（平均） avg_budget 投资年华收益率(平均) rate_of_return  def work_n_year_to_retire(money_pool, avg_income, avg_budget, rate_of_return): \u0026#34;\u0026#34;\u0026#34; money_pool: 现有储蓄金额(元) avg_income: 平均年收入(元) avg_budget: 年支出 rate_of_return: 年化收益率 \u0026#34;\u0026#34;\u0026#34; n = 0 while True: if money_pool*rate_of_return\u0026gt;=avg_budget: break else: money_pool = (money_pool + avg_income - avg_budget)*(1+rate_of_return) n = n + 1 return n, money_pool work_n_year_to_retire(money_pool=0, avg_income=200000, avg_budget=50000, rate_of_return=0.03) Run\n收入固定，改变节俭程度(consumption_ratio)\n 假设现有存款0元， 年收入20w， 年支出13w, 年华收益3%， 需要工作35年 积累435w的财富年利息收入才能支撑个人支出 假设现有存款0元， 年收入20w， 年支出10w, 年华收益3%， 需要工作23年 积累334w的财富年利息收入才能支撑个人支出 假设现有存款0元， 年收入20w， 年支出7w, 年华收益3%， 需要工作15年 积累249w的财富年利息收入才能支撑个人支出 假设现有存款0元， 年收入20w， 年支出5w, 年华收益3%， 需要工作10年 积累177w的财富年利息收入才能支撑个人支出  节俭程度固定，改变年收入\n 假设现有存款0元，年支出5w, 年收入6w， 年华收益3%， 需要工作60年 积累167w的财富年利息收入才能支撑个人支出 假设现有存款0元，年支出5w, 年收入10w， 年华收益3%， 需要工作23年 积累167w的财富年利息收入才能支撑个人支出 假设现有存款0元，年支出5w, 年收入15w， 年华收益3%， 需要工作14年 积累176w的财富年利息收入才能支撑个人支出 假设现有存款0元，年支出5w, 年收入20w， 年华收益3%， 需要工作10年 积累177w的财富年利息收入才能支撑个人支出  增加可扩展的收入帮助我节省了第一笔 10 万美元 两年前，我把写作当成副业。 在我写作的第一个月，我赚了 15 美元。 我一直在写作和建立观众，慢慢地，写作的收入开始增加。 2020 年初，我创建了一个在线课程以进一步通过我的写作获利，并且最近开始专注于建立一个 YouTube 频道。\n总而言之，我的兼职收入在每月 2,500 美元至 4,000 美元之间或每年在 30,000 美元至 54,000 美元之间。 每一分钱都投资于股市。 我可以将我的副业赚到的每一分钱都投资到股票市场，因为我可以用日常工作的收入来支付我所有的生活费用，然后还有一部分。 我的副业收入帮助我在我的投资账户中存入了超过 100,000 美元，比我想象的要早几年。\n我总是记得“为什么”我这样做 让我说清楚； 我所做的基本上是做两份工作。 我的大部分晚上和周末都花在增加我的副业收入上。这并不容易，但对我来说，这是值得的。 去年，我当了父亲，积累财富的概念有了全新的意义。 我的重点不仅是为我的余生提供财务保障，而且还为我儿子的整个生活和他可能拥有的任何孩子提供财务保障。\n我希望我的儿子和我家人的后代不要为钱而紧张。 金钱能买到的最宝贵的东西就是自由； 可以自由地做自己喜欢的事情。 许多人从事他们并不真正喜欢的工作，原因有两个。\n 他们需要一份工作来支付账单。 没有人愿意给他们“梦寐以求的工作”。  结果，他们没有自由来做自己喜欢的事情。通过致力于学习如何建立一个我喜欢的副业（我确实喜欢我的副业）并获得可扩展的收入，我可以通过两种方式为我的儿子提供这种自由。\n 积累足够的财务财富来维持我们家庭的生活开支。 这意味着他不需要接受一份他不喜欢支付账单的工作。 学习我可以传给我儿子的技能，这样他就可以学习如何通过做他热爱的工作来谋生。 这意味着，如果其他人不愿意为他提供他梦寐以求的工作，他将拥有出去为自己创造的工具。  与实现这一愿景的好处相比，我在接下来的几年中需要做出的牺牲微不足道。\n简而言之，我的“为什么”比我需要预先支付的成本更有力。\n可扩展的收入加上强大的“为什么”可以改变游戏规则。 但是不要误会，它没有任何被动。\n","permalink":"/blog/python%E5%91%8A%E8%AF%89%E4%BD%A0%E8%A2%AB%E5%8A%A8%E6%94%B6%E5%85%A5%E7%9A%84%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E6%98%AF%E8%B0%8E%E8%A8%80%E4%BD%86%E5%8F%AF%E6%89%A9%E5%B1%95%E6%94%B6%E5%85%A5%E7%9A%84%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E6%98%AF%E7%9C%9F%E7%9A%84/","summary":"点击上方图片购买课程    本文提供了一条通往实际“被动”收入和财务自由的现实途径\nSrc https://themakingofamillionaire.com/passive-income-is-a-lie-but-scalable-income-is-real-f0483af14483\nAuthor: Ben Le Fort\n 如今，个人理财中最大的流行语之一是“被动收入”。 不乏网络营销人员想要向您推销的想法是，如果您只是听他们的（并购买他们的“课程”），您也可以以最少的努力开始创收。\n但事情是这样的； 被动收入的想法是一堆废话。这并不意味着您无法开展数字业务并永远改变您的财务生活，因为您绝对可以而且应该这样做。\n在本文中，我将解释\n 为什么被动收入是一个神话？ 可扩展收入如何运作的示例 从财务角度，多久才能退休，且只靠利息过活？ 增加可扩展的收入帮助我节省了第一笔 10 万美元 我总是记得“为什么”我这样做  为什么被动收入是一个神话？ 正如我过去所写，博主和 YouTuber 已经开始将任何数字业务称为“被动收入机会”。\n 联属网络营销。 销售数码产品/软件。 销售信息产品，如课程和书籍。 在线销售实物商品。 在 YouTube 频道、播客或博客上展示广告。  通常，当您听到有人提到“被动收入”时，他们真正指的是可扩展的商业收入。 可扩展的收入意味着不能保证您赚到一毛钱，但您的收入潜力没有限制。\n可扩展收入如何运作的示例 我的业务之一就是销售在线课程，这是可扩展收入的一个完美例子。\n 如果没有人买我的课程，我就赚不到钱。 既然是数字产品，卖额外的课程也不用花我额外的钱。 这与销售实物的人形成鲜明对比。 如果我卖电脑，我会为我卖的每台电脑支付额外的费用。 在经济学中，这被称为“边际生产成本”。 销售数字产品，尤其是像课程这样的信息产品意味着我的边际生产成本几乎为零。 这意味着如果我出售价值 0 美元或 100 万美元的课程，我的成本将是相同的。  这就是拥有可扩展收入的含义，也就是大多数人所说的“被动收入”。\n诚然，每增加一美元可扩展收入，您就需要减少工作量； 这不是说你可以抬起脚停止工作。 被动收入是您无需做任何工作就可以赚取的钱。 如果我停止从事我的业务，收入很快就会枯竭。被动收入的唯一真正来源来自投资收入。\n 股票分红。 从债券中赚取的利息。 从房地产收取的租金。  除非你继承了很多钱，否则你产生大量被动收入的唯一方法是通过工作、入不敷出以及投资差额来产生主动收入。\n不要相信任何告诉你不同的人。 那些告诉你不工作也能赚钱的人要么是想卖给你东西，要么是妄想，要么两者兼而有之。","title":"Python告诉你“被动收入”的财务自由是谎言，但可扩展收入的财务自由是真的"},{"content":" 点击上方图片购买课程    整理自阮一峰技术周刊\nsrc:https://github.com/ruanyf/weekly\n Feeddd 一个免费服务，提供微信公众号的 RSS 文件，用户可以自己创建订阅源。\n MDvideo 一个桌面软件，自动将 Markdown 文档转成一段视频。 文档里面的视频、音频、图片网址，都会抓取后插入视频，还可以根据文字生成人工语音的旁白朗读。\n Read Aloud https://github.com/ken107/read-aloud\n开源的浏览器朗读插件，可以朗读整个网页或选定文本，支持40多种语言，包括中文。\n 元宇宙 元宇宙相关资源，该仓库收集元宇宙相关资源\nhttps://github.com/shadowcz007/awesome-metaverse\n为网站申请 ISSN 号码 作者介绍怎么为自己的个人网站，申请了一个 ISSN（国际标准期刊号），便于被学术期刊引用。\nhttps://shkspr.mobi/blog/2021/09/how-to-add-issn-metadata-to-a-web-page/\nlists.sr.ht 免费的邮件列表服务，可以用来架设自己的邮件列表。\n https://lists.sr.ht/\n“一证通查”电话卡服务 https://getsimnum.caict.ac.cn/\n工信部推出，可查看个人名下登记了多少张电话卡。\n Github支持脚注  youtube视频下载 是对python视频下载youtube-dl 包进行GUI封装，实现界面下载操作，支持多个视频网站的视频下载。\n BeMyEars https://www.engineerdraft.com/bemyears/\n 公司作息表 民间众包项目，用户通过腾讯文档的表格，提交自己所在部门的上下班作息时间，可以用来了解不同公司的加班情况。\nhttps://github.com/Robin970822/WorkingTime\n  平台提交/发布的数据信息未经团队允许，任何人不得盗用并使用。数据禁止用于任何其他目的，包括但不限于商业用途、学术研究、非盈利性的报告、新闻报道等。如有第三方违规使用数据，WorkingTime 团队保留追诉权力！\n 邮件列表服务 https://github.com/knadh/listmonk\n开源的邮件列表管理器，内置管理界面，在服务器或者本地电脑结合python自动化邮件群发即可开展邮件列表服务\n 商务部国别指南 http://fec.mofcom.gov.cn/article/gbdqzn/\n商务部网站提供全世界各国的《国别指南》，PDF 文件免费下载，详细介绍各国基本情况，内容非常实用。\n ","permalink":"/blog/techweekly02/","summary":" 点击上方图片购买课程    整理自阮一峰技术周刊\nsrc:https://github.com/ruanyf/weekly\n Feeddd 一个免费服务，提供微信公众号的 RSS 文件，用户可以自己创建订阅源。\n MDvideo 一个桌面软件，自动将 Markdown 文档转成一段视频。 文档里面的视频、音频、图片网址，都会抓取后插入视频，还可以根据文字生成人工语音的旁白朗读。\n Read Aloud https://github.com/ken107/read-aloud\n开源的浏览器朗读插件，可以朗读整个网页或选定文本，支持40多种语言，包括中文。\n 元宇宙 元宇宙相关资源，该仓库收集元宇宙相关资源\nhttps://github.com/shadowcz007/awesome-metaverse\n为网站申请 ISSN 号码 作者介绍怎么为自己的个人网站，申请了一个 ISSN（国际标准期刊号），便于被学术期刊引用。\nhttps://shkspr.mobi/blog/2021/09/how-to-add-issn-metadata-to-a-web-page/\nlists.sr.ht 免费的邮件列表服务，可以用来架设自己的邮件列表。\n https://lists.sr.ht/\n“一证通查”电话卡服务 https://getsimnum.caict.ac.cn/\n工信部推出，可查看个人名下登记了多少张电话卡。\n Github支持脚注  youtube视频下载 是对python视频下载youtube-dl 包进行GUI封装，实现界面下载操作，支持多个视频网站的视频下载。\n BeMyEars https://www.engineerdraft.com/bemyears/\n 公司作息表 民间众包项目，用户通过腾讯文档的表格，提交自己所在部门的上下班作息时间，可以用来了解不同公司的加班情况。\nhttps://github.com/Robin970822/WorkingTime\n  平台提交/发布的数据信息未经团队允许，任何人不得盗用并使用。数据禁止用于任何其他目的，包括但不限于商业用途、学术研究、非盈利性的报告、新闻报道等。如有第三方违规使用数据，WorkingTime 团队保留追诉权力！\n 邮件列表服务 https://github.com/knadh/listmonk\n开源的邮件列表管理器，内置管理界面，在服务器或者本地电脑结合python自动化邮件群发即可开展邮件列表服务\n 商务部国别指南 http://fec.mofcom.gov.cn/article/gbdqzn/\n商务部网站提供全世界各国的《国别指南》，PDF 文件免费下载，详细介绍各国基本情况，内容非常实用。\n ","title":"TechWeekly-02 | 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程             代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/人工智能与图数据库技术.pdf\n","permalink":"/blog/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/","summary":"点击上方图片购买课程             代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/人工智能与图数据库技术.pdf","title":"人工智能与图数据库技术"},{"content":"\n 点击上方图片购买课程   数据预处理过程当中, 大致会遇到\n 加载数据 处理缺失值如何处理 处理离散型数据该如何处理 数据的标准化 将数据集划分成训练集与测试集 去掉重复值  加载数据 我们导入必要的库并且加载数据\nimport pandas as pd df = pd.read_csv(\u0026#34;data.csv\u0026#34;) 在进行数据分析前，可以查看一下数据的总体情况，从宏观上了解数据\ndata.head() #显示前五行数据 data.tail() #显示末尾五行数据 data.info() #查看各字段的信息 data.shape #查看数据集有几行几列,data.shape[0]是行数,data.shape[1]是列数 data.describe() #查看数据的大体情况，均值，最值，分位数值... data.columns.tolist() #得到列名的list \n处理缺失值 缺失值一直都是数据预处理当中比较常见的一个问题，而在处理类似的问题的时候，方式方法也是多种多样的，我们一一来介绍，\ndata = [[\u0026#39;小明\u0026#39;,25,55],[\u0026#39;小红\u0026#39;,28,60],[\u0026#39;小王\u0026#39;,26]] df = pd.DataFrame(data=data,columns=[\u0026#39;Name\u0026#39;,\u0026#39;Age\u0026#39;,\u0026#39;Weight\u0026#39;]) Name Age Weight 0 小明 25 55.0 1 小红 28 60.0 2 小王 26 NaN 针对上面的数据集，我们通过pandas中的方法看一下缺失值的情况\ndf.isnull() Name Age Weight 0 False False False 1 False False False 2 False False True 另外我们也可以这么来做，检测每一列空值的数量\ndf.isnull().sum() Name 0 Age 0 Weight 1 dtype: int64 而在面对缺失值的时候，我们一方面可以将其去除\ndf.dropna() Name Age Weight 0 小明 25 55.0 1 小红 28 60.0 当然我们也可以对缺失值进行填充，例如用平均值来填充\ndf.fillna(df.mean()) Name Age Weight 0 小明 25 55.0 1 小红 28 60.0 2 小王 26 57.5 除了pandas当中的方法之外，我们也可以使用sklearn库当中的一些函数方法，例如\nfrom sklearn.impute import SimpleImputer imputer = SimpleImputer(missing_values=np.nan, strategy=\u0026#39;mean\u0026#39;) imputer = imputer.fit(df[[\u0026#39;Weight\u0026#39;]]) df[\u0026#39;Weight\u0026#39;] = imputer.transform(df[[\u0026#39;Weight\u0026#39;]]) 最后返回的结果也和上面的fillna()方法返回的结果一致，我们用平均值来代码空值，那么同样道理我们也可以用中位数、众数等统计值来进行替换，这里就不做多说\n处理离散型数据 另外当数据集当中出现离散型数据的时候，我们也要进行相应的处理，毕竟在后面的建模过程当中，机器学习的模型需要的是连续型的数据。 离散型数据也分为两种，一种是有序的离散变量，就比方说是衣服的尺码，有M码的、也有L码的、也还有与之更大的尺码，另外一种则是无序的，例如衣服的颜色，颜色之间没有大小之分，因此在编码的时候也应该另外处理。\ndf_cat = pd.DataFrame(data = [[\u0026#39;green\u0026#39;,\u0026#39;M\u0026#39;,10.1,\u0026#39;class1\u0026#39;], [\u0026#39;blue\u0026#39;,\u0026#39;L\u0026#39;,20.1,\u0026#39;class2\u0026#39;], [\u0026#39;white\u0026#39;,\u0026#39;M\u0026#39;,30.1,\u0026#39;class1\u0026#39;]], ) df_cat.columns = [\u0026#39;color\u0026#39;,\u0026#39;size\u0026#39;,\u0026#39;price\u0026#39;,\u0026#39;classlabel\u0026#39;] color size price classlabel 0 green M 10.1 class1 1 blue L 20.1 class2 2 white M 30.1 class1 对于有序的离散型变量，我们可以使用map()函数\nsize_mapping = {\u0026#39;M\u0026#39;:1,\u0026#39;L\u0026#39;:2} df_cat[\u0026#39;size\u0026#39;] = df_cat[\u0026#39;size\u0026#39;].map(size_mapping) df_cat[\u0026#39;size\u0026#39;] 0 1 1 2 2 1 Name: size, dtype: int64 另外我们也可以使用sklearn库中的LabelEncoder()方法来处理\nfrom sklearn.preprocessing import LabelEncoder class_le = LabelEncoder() df_cat[\u0026#39;size\u0026#39;] = class_le.fit_transform(df_cat[\u0026#39;size\u0026#39;].values) 而对于无序的离散型变量，我们可以采用独热编码，例如对color这一列进行编码过之后会有color_green、color_blue以及color_white三个特征，特征值为0或者1\npd.get_dummies(df_cat[\u0026#39;color\u0026#39;], prefix = \u0026#34;color\u0026#34;) color_blue color_green color_white 0 0 1 0 1 1 0 0 2 0 0 1 然后我们将此并入到源数据当中去\ndf_cat[[\u0026#34;size\u0026#34;, \u0026#34;price\u0026#34;]].join(dummies) size price color_blue color_green color_white 0 1 10.1 0 1 0 1 2 20.1 1 0 0 2 1 30.1 0 0 1 但是考虑到后面搭建模型的时候，变量与变量之间应该保持独立，而不应该是存在依赖的关系，对于color这一列中存在三种颜色，分别是blue、green以及white，当前两类取值都为0的时候，color只可能是white 所以将get_dummies()方法中的drop_first默认值为False改为True dummies = pd.get_dummies(df_cat[\u0026#39;color\u0026#39;], prefix = \u0026#34;color\u0026#34;, drop_first=True) df_cat[[\u0026#34;size\u0026#34;, \u0026#34;price\u0026#34;]].join(dummies) \n数据的标准化 由于不同的变量，它们往往存在不同的单位以及不同的取值范围，有时候取值范围的差异较大会对机器学习的模型带来很多不必要的麻烦。因此为了最后预测结果的可靠性，我们需要对数据进行标准化，对数据按比例进行缩放，使之落入一个小的特定区间。而标准化算法有\n z-score 标准化  这种方法根据原始数据的均值和标准差进行数据的标准化，经过处理的数据符合正态分布，即均值为0，标准差为1 ，当然sklearn库当中的代码则是\nfrom sklearn.preprocessing import StandardScaler sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test)  线性归一化  from sklearn.preprocessing import MinMaxScaler() min_max_scaler = MinMaxScaler() X_train_minmax = min_max_scaler.fit_transform(X_train) print(X_train_minmax) 训练集中的数据经过转化，取值范围都集中在[0,1]之间\n MaxAbsScaler()方法  MaxAbsScaler()方法和上述的线性归一化效果相类似，训练集中的数据经过转化，取值范围在[-1,1]之间\nmax_abs_scaler = preprocessing.MaxAbsScaler() X_train_maxabs = max_abs_scaler.fit_transform(X_train) X_test_maxabs = max_abs_scaler.transform(X_test)  RobustScaler()方法  要是当数据集当中存在很多的极值的时候，利用平均值和标准差来进行数据的标准化效果可能并不理想，毕竟极值会影响到平均值和标准差的计算，这个时候我们就需要用到RobustScaler()方法，\nfrom sklearn.preprocessing import RobustScaler transformer = RobustScaler().fit(X) transformer.transform(X) \n将数据集划分成训练集和测试集 在建模之前，我们需要将数据集分成训练集和测试集，我们在训练集上面建立模型，训练与优化模型，然后再将模型放到测试集上面，评估一下模型的性能以及优化的效果，在sklearn库中也有相对应的方法\nfrom sklearn.model_selection import train_test_split x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2,random_state= 1) 上面的变量y具体指的是被预测的因变量，而x则是在预测中使用的自变量\n去除重复值 在pandas当中也有对应的方法来去除掉重复值\ndf.drop_duplicates() \u0026lt;br\u0026gt; ## 代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/4000字归纳总结PandasSklearn数据预处理.ipynb 出处  src: https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA\nauthor: 俊欣\n公众号: 关于数据分析与可视化\n 千聊Python课程 https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596\n","permalink":"/blog/%E4%BD%BF%E7%94%A8pandas%E5%81%9A%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/","summary":"点击上方图片购买课程   数据预处理过程当中, 大致会遇到\n 加载数据 处理缺失值如何处理 处理离散型数据该如何处理 数据的标准化 将数据集划分成训练集与测试集 去掉重复值  加载数据 我们导入必要的库并且加载数据\nimport pandas as pd df = pd.read_csv(\u0026#34;data.csv\u0026#34;) 在进行数据分析前，可以查看一下数据的总体情况，从宏观上了解数据\ndata.head() #显示前五行数据 data.tail() #显示末尾五行数据 data.info() #查看各字段的信息 data.shape #查看数据集有几行几列,data.shape[0]是行数,data.shape[1]是列数 data.describe() #查看数据的大体情况，均值，最值，分位数值... data.columns.tolist() #得到列名的list \n处理缺失值 缺失值一直都是数据预处理当中比较常见的一个问题，而在处理类似的问题的时候，方式方法也是多种多样的，我们一一来介绍，\ndata = [[\u0026#39;小明\u0026#39;,25,55],[\u0026#39;小红\u0026#39;,28,60],[\u0026#39;小王\u0026#39;,26]] df = pd.DataFrame(data=data,columns=[\u0026#39;Name\u0026#39;,\u0026#39;Age\u0026#39;,\u0026#39;Weight\u0026#39;]) Name Age Weight 0 小明 25 55.0 1 小红 28 60.0 2 小王 26 NaN 针对上面的数据集，我们通过pandas中的方法看一下缺失值的情况\ndf.isnull() Name Age Weight 0 False False False 1 False False False 2 False False True 另外我们也可以这么来做，检测每一列空值的数量","title":"使用Pandas做数据预处理"},{"content":"\n 点击上方图片购买课程    src: https://mp.weixin.qq.com/s/MmfEtyKaMqNn_Ik1oJtitQ\nauthor: 俊欣\n公众号: 关于数据分析与可视化\n 今天我们来谈论一下pandas库当中文本数据的操作，希望大家再看完本篇文章之后会有不少的收获，我们大致会讲\n 创建一个包含文本数据的DataFrame 常用处理文本数据的方法的总结 正则表达式与DataFrame内部方法的结合  创建文本内容的数据 我们先来创建一个包含文本数据的DataFrame，来供我们后面使用\nimport pandas as pd df = pd.DataFrame({ \u0026#34;姓\u0026#34;: [\u0026#34;李\u0026#34;,\u0026#34;王\u0026#34;,\u0026#34;戴\u0026#34;, \u0026#34;李\u0026#34;, \u0026#34;张\u0026#34;], \u0026#34;名\u0026#34;: [\u0026#34;华\u0026#34;,\u0026#34;硕\u0026#34;,\u0026#34;建业\u0026#34;, \u0026#34;四\u0026#34;, \u0026#34;三\u0026#34;], \u0026#34;户籍地址\u0026#34;: [\u0026#34; 浙江省·宁波市 \u0026#34;, \u0026#34; 浙江省·杭州市 \u0026#34;, \u0026#34; 浙江省·丽水市 \u0026#34;, \u0026#34; 浙江省·衢州市 \u0026#34;, \u0026#34; 浙江省·湖州市 \u0026#34;], \u0026#34;微信ID\u0026#34;: [\u0026#34;Tomoplplplut1248781\u0026#34;, \u0026#34;Smopopo857\u0026#34;, \u0026#34;Adahuhuifhhjfj\u0026#34;, \u0026#34;Tull1945121\u0026#34;, \u0026#34;ZPWERERTFD599557\u0026#34;], \u0026#34;邮箱地址\u0026#34;: [\u0026#34;tom02159@163.com\u0026#34;, \u0026#34;smitt7821@163.com\u0026#34;, \u0026#34;adams623@163.com\u0026#34;, \u0026#34;tull0305@163.com\u0026#34;, \u0026#34;five7532@163.com\u0026#34;] }) df | | 姓 | 名 | 户籍地址 | 微信ID | 邮箱地址 | |---:|:-----|:-----|:--------------|:--------------------|:------------------| | 0 | 李 | 华 | 浙江省·宁波市 | Tomoplplplut1248781 | tom02159@163.com | | 1 | 王 | 硕 | 浙江省·杭州市 | Smopopo857 | smitt7821@163.com | | 2 | 戴 | 建业 | 浙江省·丽水市 | Adahuhuifhhjfj | adams623@163.com | | 3 | 李 | 四 | 浙江省·衢州市 | Tull1945121 | tull0305@163.com | | 4 | 张 | 三 | 浙江省·湖州市 | ZPWERERTFD599557 | five7532@163.com | \n常用处理文本数据的方法总结 Python当中用来处理字符串数据的方法有很多，基本上都可以在DataFrame内部拿来使用，例如lower()方法和upper()方法，给字母大小写\ndf[\u0026#34;微信ID\u0026#34;].str.lower() 0 tomoplplplut1248781 1 smopopo857 2 adahuhuifhhjfj 3 tull1945121 4 zpwerertfd599557 Name: 微信ID, dtype: object df[\u0026#34;微信ID\u0026#34;].str.len() 0 19 1 10 2 14 3 11 4 16 Name: 微信ID, dtype: int64 当然我们看到户籍地址这一列中的数据有很多的空格\ndf[\u0026#34;户籍地址\u0026#34;] 0 浙江省·宁波市 1 浙江省·杭州市 2 浙江省·丽水市 3 浙江省·衢州市 4 浙江省·湖州市 Name: 户籍地址, dtype: object 我们可以使用处理字符串时的strip()方法\ndf[\u0026#34;户籍地址\u0026#34;].str.strip() 0 浙江省·宁波市 1 浙江省·杭州市 2 浙江省·丽水市 3 浙江省·衢州市 4 浙江省·湖州市 Name: 户籍地址, dtype: object 与之相类似的还有lstrip()方法以及rstrip()方法，这里就不做赘述。\n在字符串的处理过程当中，startswith()方法和endswith()方法也是用的非常的频繁，例如我们想要挑选出户籍地址是“宁波市”的数据，\ndf[\u0026#34;户籍地址\u0026#34;] = df[\u0026#34;户籍地址\u0026#34;].str.strip() df[df[\u0026#34;户籍地址\u0026#34;].str.endswith(\u0026#34;宁波市\u0026#34;)] 姓 名 户籍地址 微信ID 邮箱地址 0 李 华 浙江省·宁波市 Tomoplplplut1248781 tom02159@163.com 另外我们还可以使用replace()方法来实现当中的字符串的替换\ndf[\u0026#34;户籍地址\u0026#34;].str.replace(\u0026#34;·\u0026#34;, \u0026#34;--\u0026#34;) 0 浙江省--宁波市 1 浙江省--杭州市 2 浙江省--丽水市 3 浙江省--衢州市 4 浙江省--湖州市 Name: 户籍地址, dtype: object 那既然用到了replace()方法，那么split()方法也可以尝试一下\ndf[\u0026#34;户籍地址\u0026#34;].str.split(\u0026#34;·\u0026#34;) 0 [浙江省, 宁波市] 1 [浙江省, 杭州市] 2 [浙江省, 丽水市] 3 [浙江省, 衢州市] 4 [浙江省, 湖州市] Name: 户籍地址, dtype: object 在经过spilit()方法的切割过之后就变成了列表的形式，然后可以通过get()方法或者[]来获取里面的元素，例如\ndf[\u0026#34;户籍地址\u0026#34;].str.split(\u0026#34;·\u0026#34;).str.get(0) 或者\ndf[\u0026#34;户籍地址\u0026#34;].str.split(\u0026#34;·\u0026#34;).str[0] 0 浙江省 1 浙江省 2 浙江省 3 浙江省 4 浙江省 Name: 户籍地址, dtype: object 那么获取列表当中的第二个元素也是同样的道理，当然我们也可以在split()方法当中添加expand=True这个参数，来将上面列表形式的数据转化成DataFrame格式\ndf[\u0026#34;户籍地址\u0026#34;].str.split(\u0026#34;·\u0026#34;, expand=True) 0 1 0 浙江省 宁波市 1 浙江省 杭州市 2 浙江省 丽水市 3 浙江省 衢州市 4 浙江省 湖州市 同样地，我们可以在后面添加[]来获取我们想要的元素\ndf[\u0026#34;户籍地址\u0026#34;].str.split(\u0026#34;·\u0026#34;, expand=True)[1] 0 宁波市 1 杭州市 2 丽水市 3 衢州市 4 湖州市 Name: 1, dtype: object \n正则表达式与DataFrame内部方法的结合 假如我们想要提取文本数据内部的一部分数据，可以结合正则表达式来使用，例如我们想要提取“微信ID”这一列当中的字母和数字，并且将两者分开来\ntwo_groups = \u0026#34;([a-zA-Z]+)([0-9]+)\u0026#34; df[\u0026#34;微信ID\u0026#34;].str.extract(two_groups, expand=True) 0 1 0 Tomoplplplut 1248781 1 Smopopo 857 2 NaN NaN 3 Tull 1945121 4 ZPWERERTFD 599557 当然了，如果想是要提取文本数据中的部分数据，可以直接在str方法后面添加索引，例如\ndf[\u0026#34;邮箱地址\u0026#34;].str[-8:] 0 @163.com 1 @163.com 2 @163.com 3 @163.com 4 @163.com Name: 邮箱地址, dtype: object 当然，从另外一个角度讲，正则表达式也可以帮助我们确认文本数据是否符合某种规律，\ntwo_groups = \u0026#34;([a-zA-Z]+)([0-9]+)\u0026#34; df[\u0026#34;微信ID\u0026#34;].str.match(two_groups) 0 True 1 True 2 False 3 True 4 True Name: 微信ID, dtype: bool 当中有一个为False，不满足字母+数字的规律，我们再进一步，将满足条件的数据提取出来\ndf[df[\u0026#34;微信ID\u0026#34;].str.match(two_groups)] 姓 名 户籍地址 微信ID 邮箱地址 0 李 华 浙江省·宁波市 Tomoplplplut1248781 tom02159@163.com 1 王 硕 浙江省·杭州市 Smopopo857 smitt7821@163.com 3 李 四 浙江省·衢州市 Tull1945121 tull0305@163.com 4 张 三 浙江省·湖州市 ZPWERERTFD599557 five7532@163.com 针对文本数据而言，contains()方法也能够派上用场，例如下面的数据\n姓 名 户籍地址 微信ID 邮箱地址 0 李 华 浙江省·宁波市 Tomoplplplut1248781 tom02159@163.com 1 王 硕 浙江省·杭州市 Smopopo857 smitt7821@163.com 2 戴 建业 浙江省·丽水市 Adahuhuifhhjfj adams623@163.com 3 李 四 浙江省·衢州市 Tull1945121 tull0305@163.com 4 张 三 浙江省·湖州市 ZPWERERTFD599557 five7532@163.com 5 黄 五 浙江省·宁波市 hunhunhu45652 1erdcvf127@16.com 我们用contains()来提取出户籍地址为“宁波市”的内容，可以这么做\ndf[df[\u0026#34;户籍地址\u0026#34;].str.contains(\u0026#34;宁波市\u0026#34;)] 姓 名 户籍地址 微信ID 邮箱地址 0 李 华 浙江省·宁波市 Tomoplplplut1248781 tom02159@163.com 5 黄 五 浙江省·宁波市 hunhunhu45652 1erdcvf127@16.com 暂时就这些了，下一篇原创的文章安排在周天，非技术方面的，期待一下？\n代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/文本数据处理Pandas篇.ipynb\n","permalink":"/blog/%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86pandas%E7%AF%87/","summary":"点击上方图片购买课程    src: https://mp.weixin.qq.com/s/MmfEtyKaMqNn_Ik1oJtitQ\nauthor: 俊欣\n公众号: 关于数据分析与可视化\n 今天我们来谈论一下pandas库当中文本数据的操作，希望大家再看完本篇文章之后会有不少的收获，我们大致会讲\n 创建一个包含文本数据的DataFrame 常用处理文本数据的方法的总结 正则表达式与DataFrame内部方法的结合  创建文本内容的数据 我们先来创建一个包含文本数据的DataFrame，来供我们后面使用\nimport pandas as pd df = pd.DataFrame({ \u0026#34;姓\u0026#34;: [\u0026#34;李\u0026#34;,\u0026#34;王\u0026#34;,\u0026#34;戴\u0026#34;, \u0026#34;李\u0026#34;, \u0026#34;张\u0026#34;], \u0026#34;名\u0026#34;: [\u0026#34;华\u0026#34;,\u0026#34;硕\u0026#34;,\u0026#34;建业\u0026#34;, \u0026#34;四\u0026#34;, \u0026#34;三\u0026#34;], \u0026#34;户籍地址\u0026#34;: [\u0026#34; 浙江省·宁波市 \u0026#34;, \u0026#34; 浙江省·杭州市 \u0026#34;, \u0026#34; 浙江省·丽水市 \u0026#34;, \u0026#34; 浙江省·衢州市 \u0026#34;, \u0026#34; 浙江省·湖州市 \u0026#34;], \u0026#34;微信ID\u0026#34;: [\u0026#34;Tomoplplplut1248781\u0026#34;, \u0026#34;Smopopo857\u0026#34;, \u0026#34;Adahuhuifhhjfj\u0026#34;, \u0026#34;Tull1945121\u0026#34;, \u0026#34;ZPWERERTFD599557\u0026#34;], \u0026#34;邮箱地址\u0026#34;: [\u0026#34;tom02159@163.com\u0026#34;, \u0026#34;smitt7821@163.com\u0026#34;, \u0026#34;adams623@163.com\u0026#34;, \u0026#34;tull0305@163.com\u0026#34;, \u0026#34;five7532@163.com\u0026#34;] }) df | | 姓 | 名 | 户籍地址 | 微信ID | 邮箱地址 | |---:|:-----|:-----|:--------------|:--------------------|:------------------| | 0 | 李 | 华 | 浙江省·宁波市 | Tomoplplplut1248781 | tom02159@163.","title":"使用Pandas处理文本数据"},{"content":" 点击上方图片购买课程   今天分享几个不为人知的pandas函数，大家可能平时看到的不多，但是使用起来倒是非常的方便，也能够帮助我们数据分析人员大幅度地提高工作效率，同时也希望大家看完之后能够有所收获\nitems()方法 pandas当中的items()方法可以用来遍历数据集当中的每一列，同时返回列名以及每一列当中的内容，通过以元组的形式，示例如下\nimport pandas as pd df = pd.DataFrame({\u0026#39;species\u0026#39;: [\u0026#39;bear\u0026#39;, \u0026#39;bear\u0026#39;, \u0026#39;marsupial\u0026#39;], \u0026#39;population\u0026#39;: [1864, 22000, 80000]}, index=[\u0026#39;panda\u0026#39;, \u0026#39;polar\u0026#39;, \u0026#39;koala\u0026#39;]) df | | species | population | |:------|:----------|-------------:| | panda | bear | 1864 | | polar | bear | 22000 | | koala | marsupial | 80000 | \nfor label, content in df.items(): print(f\u0026#39;label: {label}\u0026#39;) print(f\u0026#39;content: {content}\u0026#39;, sep=\u0026#39;\\n\u0026#39;) print(\u0026#34;=\u0026#34; * 50) label: species content: panda bear polar bear koala marsupial Name: species, dtype: object ================================================== label: population content: panda 1864 polar 22000 koala 80000 Name: population, dtype: int64 ==================================================  相继的打印出了‘species’和‘population’这两列的列名和相应的内容\niterrows()方法 而对于iterrows()方法而言，其功能则是遍历数据集当中的每一行，返回每一行的索引以及带有列名的每一行的内容，示例如下\nfor label, content in df.iterrows(): print(f\u0026#39;label: {label}\u0026#39;) print(f\u0026#39;content: {content}\u0026#39;, sep=\u0026#39;\\n\u0026#39;) print(\u0026#34;=\u0026#34; * 50) label: panda content: species bear population 1864 Name: panda, dtype: object ================================================== label: polar content: species bear population 22000 Name: polar, dtype: object ================================================== label: koala content: species marsupial population 80000 Name: koala, dtype: object ==================================================  insert()方法 insert()方法主要是用于在数据集当中的特定位置处插入数据。在DataFrame数据集当中，列的索引也是从0开始的\n示例如下\n#在第二列插入size字段，内容如下 df.insert(1, \u0026#34;size\u0026#34;, [2000, 3000, 4000]) df | | species | size | population | |:------|:----------|-------:|-------------:| | panda | bear | 2000 | 1864 | | polar | bear | 3000 | 22000 | | koala | marsupial | 4000 | 80000 | \nassign()方法 assign()方法可以用来在数据集当中添加新的列，示例如下\ndf = df.assign(size_1=lambda x: x.population * 9 / 5 + 32) df | | species | size | population | size_1 | |:------|:----------|-------:|-------------:|---------:| | panda | bear | 2000 | 1864 | 3387.2 | | polar | bear | 3000 | 22000 | 39632 | | koala | marsupial | 4000 | 80000 | 144032 | 从上面的例子中可以看出，我们通过一个lambda匿名函数，在数据集当中添加一个新的列，命名为size_1，当然我们也可以通过assign()方法来创建不止一个列\ndf = df.assign(size_1 = lambda x: x.population * 9 / 5 + 32, size_2 = lambda x: x.population * 8 / 5 + 10) df | | species | size | population | size_1 | size_2 | |:------|:----------|-------:|-------------:|---------:|---------:| | panda | bear | 2000 | 1864 | 3387.2 | 2992.4 | | polar | bear | 3000 | 22000 | 39632 | 35210 | | koala | marsupial | 4000 | 80000 | 144032 | 128010 | \neval()方法 eval()方法主要是用来执行用字符串来表示的运算过程的，例如\ndf.eval(\u0026#34;size_3 = size_1 + size_2\u0026#34;) | | species | size | population | size_1 | size_2 | size_3 | |:------|:----------|-------:|-------------:|---------:|---------:|---------:| | panda | bear | 2000 | 1864 | 3387.2 | 2992.4 | 6379.6 | | polar | bear | 3000 | 22000 | 39632 | 35210 | 74842 | | koala | marsupial | 4000 | 80000 | 144032 | 128010 | 272042 | 当然我们也可以同时对执行多个运算过程\ndf = df.eval(\u0026#39;\u0026#39;\u0026#39; size_3 = size_1 + size_2 size_4 = size_1 - size_2 \u0026#39;\u0026#39;\u0026#39;) df | | species | size | population | size_1 | size_2 | size_3 | size_4 | |:------|:----------|-------:|-------------:|---------:|---------:|---------:|---------:| | panda | bear | 2000 | 1864 | 3387.2 | 2992.4 | 6379.6 | 394.8 | | polar | bear | 3000 | 22000 | 39632 | 35210 | 74842 | 4422 | | koala | marsupial | 4000 | 80000 | 144032 | 128010 | 272042 | 16022 | \npop()方法 pop()方法主要是用来删除掉数据集中特定的某一列数据\ndf.pop(\u0026#34;size_3\u0026#34;) 而原先的数据集当中就没有这个‘size_3’这一例的数据了\ntruncate()方法 truncate()方法主要是根据行索引来筛选指定行的数据的，示例如下\ndf = pd.DataFrame({\u0026#39;A\u0026#39;: [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;], \u0026#39;B\u0026#39;: [\u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;], \u0026#39;C\u0026#39;: [\u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;]}, index=[1, 2, 3, 4, 5]) df | | A | B | C | |---:|:----|:----|:----| | 1 | a | f | k | | 2 | b | g | l | | 3 | c | h | m | | 4 | d | i | n | | 5 | e | j | o | 我们使用truncate()方法来做一下尝试\ndf.truncate(before=2, after=4) | | A | B | C | |---:|:----|:----|:----| | 2 | b | g | l | | 3 | c | h | m | | 4 | d | i | n | 我们看到参数before和after存在于truncate()方法中，目的就是把行索引2之前和行索引4之后的数据排除在外，筛选出剩余的数据\ncount()方法 count()方法主要是用来计算某一列当中非空值的个数，示例如下\nimport numpy as np df = pd.DataFrame({\u0026#34;Name\u0026#34;: [\u0026#34;John\u0026#34;, \u0026#34;Myla\u0026#34;, \u0026#34;Lewis\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;John\u0026#34;], \u0026#34;Age\u0026#34;: [24., np.nan, 25, 33, 26], \u0026#34;Single\u0026#34;: [True, True, np.nan, True, False]}) df | | Name | Age | Single | |---:|:-------|------:|---------:| | 0 | John | 24 | 1 | | 1 | Myla | nan | 1 | | 2 | Lewis | 25 | nan | | 3 | John | 33 | 1 | | 4 | John | 26 | 0 | 我们使用count()方法来计算一下数据集当中非空值的个数\ndf.count() Name 5 Age 4 Single 4 dtype: int64  add_prefix()方法/add_suffix()方法 add_prefix()方法和add_suffix()方法分别会给列名以及行索引添加后缀和前缀，对于Series()数据集而言，前缀与后缀是添加在行索引处，而对于DataFrame()数据集而言，前缀与后缀是添加在列索引处，示例如下\ns = pd.Series([1, 2, 3, 4]) s 0 1 1 2 2 3 3 4 dtype: int64  我们使用add_prefix()方法与add_suffix()方法在Series()数据集上\ns.add_prefix(\u0026#39;row_\u0026#39;) row_0 1 row_1 2 row_2 3 row_3 4 dtype: int64  又例如\ns.add_suffix(\u0026#39;_row\u0026#39;) 0_row 1 1_row 2 2_row 3 3_row 4 dtype: int64  而对于DataFrame()形式数据集而言，add_prefix()方法以及add_suffix()方法是将前缀与后缀添加在列索引处的\ndf = pd.DataFrame({\u0026#39;A\u0026#39;: [1, 2, 3, 4], \u0026#39;B\u0026#39;: [3, 4, 5, 6]}) df | | A | B | |---:|----:|----:| | 0 | 1 | 3 | | 1 | 2 | 4 | | 2 | 3 | 5 | | 3 | 4 | 6 | \ndf.add_prefix(\u0026#34;column_\u0026#34;) | | column_A | column_B | |---:|----:|----:| | 0 | 1 | 3 | | 1 | 2 | 4 | | 2 | 3 | 5 | | 3 | 4 | 6 | \ndf.add_suffix(\u0026#34;_column\u0026#34;) | | A_column | B_column | |---:|----:|----:| | 0 | 1 | 3 | | 1 | 2 | 4 | | 2 | 3 | 5 | | 3 | 4 | 6 | \nclip()方法 clip()方法主要是通过设置阈值来改变数据集当中的数值，当数值超过阈值的时候，就做出相应的调整\ndata = {\u0026#39;col_0\u0026#39;: [9, -3, 0, -1, 5], \u0026#39;col_1\u0026#39;: [-2, -7, 6, 8, -5]} df = pd.DataFrame(data) df | | col_0 | col_1 | |---:|--------:|--------:| | 0 | 9 | -2 | | 1 | -3 | -7 | | 2 | 0 | 6 | | 3 | -1 | 8 | | 4 | 5 | -5 | \ndf.clip(lower = -4, upper = 4) | | col_0 | col_1 | |---:|--------:|--------:| | 0 | 4 | -2 | | 1 | -3 | -4 | | 2 | 0 | 4 | | 3 | -1 | 4 | | 4 | 4 | -4 | 我们看到参数lower和upper分别代表阈值的上限与下限，数据集当中超过上限与下限的值会被替代。\nfilter()方法 pandas当中的filter()方法是用来筛选出特定范围的数据的，示例如下\ndf = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12])), index=[\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;], columns=[\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]) df | | one | two | three | |:---|------:|------:|--------:| | A | 1 | 2 | 3 | | B | 4 | 5 | 6 | | C | 7 | 8 | 9 | | D | 10 | 11 | 12 | 我们使用filter()方法来筛选数据\ndf.filter(items=[\u0026#39;one\u0026#39;, \u0026#39;three\u0026#39;]) | | one | three | |:---|------:|--------:| | A | 1 | 3 | | B | 4 | 6 | | C | 7 | 9 | | D | 10 | 12 | 我们还可以使用正则表达式来筛选数据\n#字段名e结尾的列 df.filter(regex=\u0026#39;e$\u0026#39;, axis=1) | | one | three | |:---|------:|--------:| | A | 1 | 3 | | B | 4 | 6 | | C | 7 | 9 | | D | 10 | 12 | 当然通过参数axis来调整筛选行方向或者是列方向的数据\ndf.filter(like=\u0026#39;B\u0026#39;, axis=0) | | one | two | three | |:---|------:|------:|--------:| | B | 4 | 5 | 6 | \nfirst()方法 当数据集当中的行索引是日期的时候，可以通过该方法来筛选前面几行的数据\nindex_1 = pd.date_range(\u0026#39;2021-11-11\u0026#39;, periods=5, freq=\u0026#39;2D\u0026#39;) ts = pd.DataFrame({\u0026#39;A\u0026#39;: [1, 2, 3, 4, 5]}, index=index_1) ts | | A | |:--------------------|----:| | 2021-11-11 00:00:00 | 1 | | 2021-11-13 00:00:00 | 2 | | 2021-11-15 00:00:00 | 3 | | 2021-11-17 00:00:00 | 4 | | 2021-11-19 00:00:00 | 5 | \n我们使用first()方法来进行一些操作，例如筛选出前面3天的数据\nts.first(\u0026#39;3D\u0026#39;) | | A | |:--------------------|----:| | 2021-11-11 00:00:00 | 1 | | 2021-11-13 00:00:00 | 2 | \nisin()方法 isin()方法主要是用来确认数据集当中的数值是否被包含在给定的列表当中\ndf = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12])), index=[\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;], columns=[\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]) df.isin([3, 5, 12]) | | one | two | three | |:---|------:|------:|--------:| | A | 0 | 0 | 1 | | B | 0 | 1 | 0 | | C | 0 | 0 | 0 | | D | 0 | 0 | 1 | 若是数值被包含在列表当中了，也就是3、5、12当中，返回的是True，否则就返回False\ndf.plot.area()方法 下面我们来讲一下如何在Pandas当中通过一行代码来绘制图表，将所有的列都通过面积图的方式来绘制\ndf = pd.DataFrame({ \u0026#39;sales\u0026#39;: [30, 20, 38, 95, 106, 65], \u0026#39;signups\u0026#39;: [7, 9, 6, 12, 18, 13], \u0026#39;visits\u0026#39;: [20, 42, 28, 62, 81, 50], }, index=pd.date_range(start=\u0026#39;2021/01/01\u0026#39;, end=\u0026#39;2021/07/01\u0026#39;, freq=\u0026#39;M\u0026#39;)) df | | sales | signups | visits | |:--------------------|--------:|----------:|---------:| | 2021-01-31 00:00:00 | 30 | 7 | 20 | | 2021-02-28 00:00:00 | 20 | 9 | 42 | | 2021-03-31 00:00:00 | 38 | 6 | 28 | | 2021-04-30 00:00:00 | 95 | 12 | 62 | | 2021-05-31 00:00:00 | 106 | 18 | 81 | | 2021-06-30 00:00:00 | 65 | 13 | 50 | \nax = df.plot.area(figsize = (10, 5))   df.plot.bar()方法 下面我们看一下如何通过一行代码来绘制柱状图\ndf = pd.DataFrame({\u0026#39;label\u0026#39;:[\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;], \u0026#39;values\u0026#39;:[10, 30, 50, 70]}) df.to_markdown() | | label | values | |---:|:--------|---------:| | 0 | A | 10 | | 1 | B | 30 | | 2 | C | 50 | | 3 | D | 70 | \nax = df.plot.bar(x=\u0026#39;label\u0026#39;, y=\u0026#39;values\u0026#39;, rot=-15)   当然我们也可以根据不同的类别来绘制柱状图\nage = [0.1, 17.5, 40, 48, 52, 69, 88] weight = [2, 8, 70, 1.5, 25, 12, 28] index = [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;] df = pd.DataFrame({\u0026#39;age\u0026#39;: age, \u0026#39;weight\u0026#39;: weight}, index=index) ax = df.plot.bar(rot=0)   ax = df.plot.barh()   df.plot.box()方法 我们来看一下箱型图的具体的绘制，通过pandas一行代码来实现\ndata = np.random.randn(25, 3) df = pd.DataFrame(data, columns=list(\u0026#39;ABC\u0026#39;)) df | | A | B | C | |---:|----------:|-----------:|-----------:| | 0 | -1.59132 | 1.47926 | 1.16891 | | 1 | -0.649097 | 0.0501129 | -0.81485 | | 2 | 1.31677 | 1.00035 | 0.0662983 | | 3 | -1.04484 | 0.445727 | 0.0140137 | | 4 | 0.217317 | -0.692044 | -0.758549 | | 5 | -0.566574 | -0.159038 | 0.781744 | | 6 | -0.903068 | 1.50697 | 1.2605 | | 7 | 1.38627 | -0.0539971 | -0.0619803 | | 8 | -1.50639 | -0.187649 | 1.00115 | | 9 | -1.84435 | -1.37282 | 0.905218 | | 10 | -0.400618 | 0.503642 | 1.20152 | | 11 | -0.164643 | 1.58712 | -0.0475168 | | 12 | 1.99742 | -0.928291 | 0.502433 | | 13 | -1.25877 | 2.0764 | -0.840626 | | 14 | -0.293273 | -2.09935 | -0.152372 | | 15 | -0.686338 | 0.798964 | 1.4551 | | 16 | 0.407321 | 0.601732 | 0.456718 | | 17 | 0.594827 | -1.8498 | 1.22704 | | 18 | -0.345245 | -1.27973 | -0.0971918 | | 19 | 1.91415 | 0.656389 | -1.15816 | | 20 | 0.149819 | 1.10037 | -0.0785313 | | 21 | -0.311471 | -1.10781 | 0.707936 | | 22 | 0.614726 | -0.142359 | -1.23091 | | 23 | 1.46869 | 1.27063 | 0.797499 | | 24 | -1.02252 | 0.819603 | -0.220382 | \nax = df.plot.box()   df.plot.pie()方法 接下来是饼图的绘制\ndf = pd.DataFrame({\u0026#39;mass\u0026#39;: [1.33, 4.87 , 5.97], \u0026#39;radius\u0026#39;: [2439.7, 6051.8, 6378.1]}, index=[\u0026#39;Mercury\u0026#39;, \u0026#39;Venus\u0026#39;, \u0026#39;Earth\u0026#39;]) plot = df.plot.pie(y=\u0026#39;mass\u0026#39;, figsize=(8, 8))   除此之外，还有折线图、直方图、散点图等等，步骤与方式都与上述的技巧有异曲同工之妙，大家感兴趣的可以自己另外去尝试。\n代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/4000字详细说明_推荐20个好用到爆的Pandas函数方法.ipynb\n src: https://mp.weixin.qq.com/s/PEhYrNbZyI9Prl3OwrBcAw\nauthor: 俊欣 公众号: 关于数据分析与可视化\n  点击上方图片购买课程   ","permalink":"/blog/4000%E5%AD%97%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E_%E6%8E%A8%E8%8D%9020%E4%B8%AA%E5%A5%BD%E7%94%A8%E5%88%B0%E7%88%86%E7%9A%84pandas%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/","summary":"点击上方图片购买课程   今天分享几个不为人知的pandas函数，大家可能平时看到的不多，但是使用起来倒是非常的方便，也能够帮助我们数据分析人员大幅度地提高工作效率，同时也希望大家看完之后能够有所收获\nitems()方法 pandas当中的items()方法可以用来遍历数据集当中的每一列，同时返回列名以及每一列当中的内容，通过以元组的形式，示例如下\nimport pandas as pd df = pd.DataFrame({\u0026#39;species\u0026#39;: [\u0026#39;bear\u0026#39;, \u0026#39;bear\u0026#39;, \u0026#39;marsupial\u0026#39;], \u0026#39;population\u0026#39;: [1864, 22000, 80000]}, index=[\u0026#39;panda\u0026#39;, \u0026#39;polar\u0026#39;, \u0026#39;koala\u0026#39;]) df | | species | population | |:------|:----------|-------------:| | panda | bear | 1864 | | polar | bear | 22000 | | koala | marsupial | 80000 | \nfor label, content in df.items(): print(f\u0026#39;label: {label}\u0026#39;) print(f\u0026#39;content: {content}\u0026#39;, sep=\u0026#39;\\n\u0026#39;) print(\u0026#34;=\u0026#34; * 50) label: species content: panda bear polar bear koala marsupial Name: species, dtype: object ================================================== label: population content: panda 1864 polar 22000 koala 80000 Name: population, dtype: int64 ==================================================  相继的打印出了‘species’和‘population’这两列的列名和相应的内容","title":"推荐20个好用到爆的Pandas函数方法"},{"content":" 点击上方图片购买课程    src: https://mp.weixin.qq.com/s/j71IPWmT57g3VTajGhgN7Q author: 俊欣 公众号: 关于数据分析与可视化\n 千聊Python课程 https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596\n本篇我们继续前面pandas系列教程的探讨，今天小编会介绍pandas库当中一些非常基础的方法与函数，希望大家看了之后会有所收获。\n准备需要的数据集 我们先准备生成一些随机数，作为后面需要用到的数据集\nimport pandas as pd import numpy as np index = pd.date_range(\u0026#34;1/1/2000\u0026#34;, periods=8) series = pd.Series(np.random.randn(5), index=[\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;]) df = pd.DataFrame(np.random.randn(8, 3), index=index, columns=[\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;]) \nHead and tail head()和tail()方法是用来查看数据集当中的前几行和末尾几行的，默认是查看5行，当然读者朋友也可以自行设定行数\nseries2 = pd.Series(np.random.randn(100)) series2.head() 0 0.578276 1 0.643313 2 -0.336030 3 -0.422468 4 -0.493812 dtype: float64  # 同理 series2.tail() 95 1.307962 96 1.165135 97 0.717692 98 0.605668 99 0.264990 dtype: float64  数据的统计分析 在pandas当中用describe()方法来对表格中的数据做一个概括性的统计分析，例如\nseries2.describe() count 100.000000 mean 0.106277 std 1.027541 min -2.554005 25% -0.510912 50% 0.028765 75% 0.795444 max 2.512260 dtype: float64  当然，我们也可以设置好输出的分位\nseries2.describe(percentiles=[0.05, 0.25, 0.75, 0.95]) count 100.000000 mean 0.106277 std 1.027541 min -2.554005 5% -1.450067 25% -0.510912 50% 0.028765 75% 0.795444 95% 1.757926 max 2.512260 dtype: float64  对于离散型的数据来说，describe()方法给出的结果则会简洁很多\ns = pd.Series([\u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;a\u0026#34;]) s.describe() count 10 unique 4 top a freq 5 dtype: object  要是表格中既包含了离散型数据，也包含了连续型的数据，默认的话，describe()是会针对连续型数据进行统计分析\ndf2 = pd.DataFrame({\u0026#34;a\u0026#34;: [\u0026#34;Yes\u0026#34;, \u0026#34;Yes\u0026#34;, \u0026#34;No\u0026#34;, \u0026#34;No\u0026#34;], \u0026#34;b\u0026#34;: np.random.randn(4)}) df2.describe() | | b | |:------|---------:| | count | 4 | | mean | 0.967026 | | std | 0.859657 | | min | 0.204027 | | 25% | 0.233797 | | 50% | 0.947075 | | 75% | 1.6803 | | max | 1.76993 | 当然我们也可以指定让其强制统计分析离散型数据或者连续型数据\ndf2.describe(include=[\u0026#34;object\u0026#34;]) | | a | |:-------|:----| | count | 4 | | unique | 2 | | top | Yes | | freq | 2 | 同理，我们也可以指定连续型的数据进行统计分析\ndf2.describe(include=[\u0026#34;number\u0026#34;]) | | b | |:------|---------:| | count | 4 | | mean | 0.967026 | | std | 0.859657 | | min | 0.204027 | | 25% | 0.233797 | | 50% | 0.947075 | | 75% | 1.6803 | | max | 1.76993 | 如果我们都要去做统计分析，可以这么来执行\ndf2.describe(include=\u0026#34;all\u0026#34;) | | a | b | |:-------|:----|-----------:| | count | 4 | 4 | | unique | 2 | nan | | top | Yes | nan | | freq | 2 | nan | | mean | nan | 0.967026 | | std | nan | 0.859657 | | min | nan | 0.204027 | | 25% | nan | 0.233797 | | 50% | nan | 0.947075 | | 75% | nan | 1.6803 | | max | nan | 1.76993 | \n最大/最小值的位置 idxmin()和idxmax()方法是用来查找表格当中最大/最小值的位置，返回的是值的索引\ns1 = pd.Series(np.random.randn(5)) s1 0 2.244266 1 1.398258 2 -1.827026 3 -0.058691 4 0.275471 dtype: float64  s1.idxmin(), s1.idxmax() (2, 0)  用在DataFrame上面的话，如下\ndf1 = pd.DataFrame(np.random.randn(5, 3), columns=[\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;]) df1.idxmin(axis=0) | | 0 | |:---|----:| | A | 2 | | B | 3 | | C | 2 | 同理，我们将axis参数改成1\ndf1.idxmin(axis=1) | | 0 | |---:|:----| | 0 | B | | 1 | B | | 2 | A | | 3 | B | | 4 | B | \nvalue_counts()方法 pandas当中的value_counts()方法主要用于数据表的计数以及排序，用来查看表格当中，指定列有多少个不同的数据值并且计算不同值在该列当中出现的次数，先来看一个简单的例子\ndf = pd.DataFrame({\u0026#39;城市\u0026#39;: [\u0026#39;北京\u0026#39;, \u0026#39;广州\u0026#39;, \u0026#39;上海\u0026#39;, \u0026#39;上海\u0026#39;, \u0026#39;杭州\u0026#39;, \u0026#39;成都\u0026#39;, \u0026#39;香港\u0026#39;, \u0026#39;南京\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;北京\u0026#39;], \u0026#39;收入\u0026#39;: [10000, 10000, 5500, 5500, 4000, 50000, 8000, 5000, 5200, 5600], \u0026#39;年龄\u0026#39;: [50, 43, 34, 40, 25, 25, 45, 32, 25, 25]}) df[\u0026#34;城市\u0026#34;].value_counts() 北京 3 上海 2 广州 1 杭州 1 南京 1 香港 1 成都 1 Name: 城市, dtype: int64  可以看到北京出现了3次，上海出现了2次，并且默认采用的是降序来排列的，下面我们来看一下用升序的方式来排列一下收入这一列\ndf[\u0026#34;收入\u0026#34;].value_counts(ascending=True) 5600 1 5000 1 8000 1 5200 1 50000 1 4000 1 10000 2 5500 2 Name: 收入, dtype: int64  同时里面也还可以利用参数normalize=True，来计算不同值的计数占比\ndf[\u0026#39;年龄\u0026#39;].value_counts(ascending=True, normalize=True) 32 0.1 34 0.1 50 0.1 40 0.1 43 0.1 45 0.1 25 0.4 Name: 年龄, dtype: float64  数据分组 我们可以使用cut()方法以及qcut()方法来对表格中的连续型数据分组，首先我们看一下cut()方法，假设下面这组数据代表的是小组每个成员的年龄\nages = np.array([2,3,10,40,36,45,58,62,85,89,95,18,20,25,35,32]) pd.cut(ages, 5) [(1.907, 20.6], (1.907, 20.6], (1.907, 20.6], (39.2, 57.8], (20.6, 39.2], ..., (1.907, 20.6], (1.907, 20.6], (20.6, 39.2], (20.6, 39.2], (20.6, 39.2]] Length: 16 Categories (5, interval[float64]): [(1.907, 20.6] \u0026lt; (20.6, 39.2] \u0026lt; (39.2, 57.8] \u0026lt; (57.8, 76.4] \u0026lt; (76.4, 95.0]]  由上可以看到用cut()方法将数据平分成了5个区间，且区间两边都有扩展以包含最大值和最小值，当然我们也可以给每一个区间加上标记\npd.cut(ages, 5, labels=[u\u0026#34;婴儿\u0026#34;,u\u0026#34;少年\u0026#34;,u\u0026#34;青年\u0026#34;,u\u0026#34;中年\u0026#34;,u\u0026#34;老年\u0026#34;]) ['婴儿', '婴儿', '婴儿', '青年', '少年', ..., '婴儿', '婴儿', '少年', '少年', '少年'] Length: 16 Categories (5, object): ['婴儿' \u0026lt; '少年' \u0026lt; '青年' \u0026lt; '中年' \u0026lt; '老年']  而对于qcut()方法来说，我们可以指定区间来进行分组，例如\npd.qcut(ages, [0,0.5,1], labels=[\u0026#39;小朋友\u0026#39;,\u0026#39;大孩子\u0026#39;]) ['小朋友', '小朋友', '小朋友', '大孩子', '大孩子', ..., '小朋友', '小朋友', '小朋友', '小朋友', '小朋友'] Length: 16 Categories (2, object): ['小朋友' \u0026lt; '大孩子']  这里将年龄这组数据分成两部分[0, 0.5, 1]，一组是标上标记小朋友，另一组是大孩子，不过通常情况下，我们用的cut()方法比较多\n\n引用函数 要是在表格当中引用其他的方法，或者是自建的函数，可以使用通过pandas当中的以下这几个方法\n pipe() apply()和applymap() agg()和transform()  pipe()方法 首先我们来看pipe()这个方法，我们可以将自己定义好的函数，以链路的形式一个接着一个传给我们要处理的数据集上\ndef extract_city_name(df): df[\u0026#34;state_name\u0026#34;] = df[\u0026#34;state_and_code\u0026#34;].str.split(\u0026#34;,\u0026#34;).str.get(0) return df def add_country_name(df, country_name=None): df[\u0026#34;state_and_country\u0026#34;] = df[\u0026#34;state_name\u0026#34;] + country_name return df 然后我们用pip()这个方法来将上面我们定义的函数串联起来\ndf_p = pd.DataFrame({\u0026#34;city_and_code\u0026#34;: [\u0026#34;Arizona, AZ\u0026#34;]}) df_p = pd.DataFrame({\u0026#34;state_and_code\u0026#34;: [\u0026#34;Arizona, AZ\u0026#34;]}) df_p.pipe(extract_city_name).pipe(add_country_name, country_name=\u0026#34;_USA\u0026#34;) | | state_and_code | state_name | state_and_country | |---:|:-----------------|:-------------|:--------------------| | 0 | Arizona, AZ | Arizona | Arizona_USA | \napply()方法和applymap()方法 apply()方法可以对表格中的数据按照行或者是列方向进行处理，默认是按照列方向，如下\ndf.apply(np.mean) A -0.101751 B -0.360288 C -0.637433 dtype: float64 当然，我们也可以通过axis参数来进行调节\ndf.apply(np.mean, axis = 1) 0 -0.803675 1 -0.179640 2 -1.200973 3 0.156888 4 0.381631 5 0.049274 6 1.174923 7 0.612591 dtype: float64 除此之外，我们也可以直接调用匿名函数lambda的形式\ndf.apply(lambda x: x.max() - x.min()) A 1.922863 B 2.874672 C 1.943930 dtype: float64 也可以调用自己定义的函数方法\ndf = pd.DataFrame(np.random.randn(5, 3), columns=[\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;]) def normalize(x): return (x - x.mean()) / x.std() 我们用上apply()方法\ndf.apply(normalize) A B C 0 1.149795 0.390263 -0.813770 1 0.805843 -0.532374 0.859627 2 0.047824 -0.085334 -0.067179 3 -0.903319 -1.215023 1.149538 4 -1.100144 1.442467 -1.128216 apply()方法作用于数据集当中的每个行或者是列，而applymap()方法则是对数据集当中的所有元素都进行处理\ndf = pd.DataFrame({\u0026#39;key1\u0026#39; : [\u0026#39;a\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;d\u0026#39;], \u0026#39;key2\u0026#39; : [\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;one\u0026#39;], \u0026#39;data1\u0026#39; : np.arange(1, 6), \u0026#39;data2\u0026#39; : np.arange(10,15)}) df key1 key2 data1 data2 0 a one 1 10 1 c two 2 11 2 b three 3 12 3 b four 4 13 4 d five 5 14 我们来自定义一个函数\ndef add_A(x): return \u0026#34;A\u0026#34; + str(x) df.applymap(add_A) key1 key2 data1 data2 0 Aa Aone A1 A10 1 Ac Atwo A2 A11 2 Ab Athree A3 A12 3 Ab Afour A4 A13 4 Ad Afive A5 A14 我们然后也可以通过lambda()自定义函数方法，然后来去除掉这个A\ndf.applymap(add_A).applymap(lambda x: x.split(\u0026#34;A\u0026#34;)[1]) key1 key2 data1 data2 0 a one 1 10 1 c two 2 11 2 b three 3 12 3 b four 4 13 4 d five 5 14 \nagg()方法和transform()方法 agg()方法本意上是聚合函数，我们可以将用于统计分析的一系列方法都放置其中，并且放置多个\ndf = pd.DataFrame(np.random.randn(5, 3), columns=[\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;]) df.agg(np.sum) A 2.042573 B 2.189269 C -1.066976 dtype: float64  当然，当中的np.sum部分也可以用字符串来表示，例如\ndf.agg(\u0026#34;sum\u0026#34;) A 2.042573 B 2.189269 C -1.066976 dtype: float64  我们尝试在当中放置多个统计分析的函数方法\ndf.agg([\u0026#34;sum\u0026#34;, \u0026#34;mean\u0026#34;, \u0026#34;median\u0026#34;]) 当然我们也可以和lambda匿名函数混合着搭配\ndf.agg([\u0026#34;sum\u0026#34;, lambda x: x.mean()]) A B C sum -0.066486 -1.288341 -1.236244 \u0026lt;lambda\u0026gt; -0.013297 -0.257668 -0.247249 或者和自己定义的函数方法混合着用\ndef my_mean(x): return x.mean() df.agg([\u0026#34;sum\u0026#34;, my_mean]) A B C sum -4.850201 -1.544773 0.429007 my_mean -0.970040 -0.308955 0.085801 与此同时，我们在agg()方法中添加字典，实现不同的列使用不同的函数方法\ndf.agg({\u0026#34;A\u0026#34;: \u0026#34;sum\u0026#34;, \u0026#34;B\u0026#34;: \u0026#34;mean\u0026#34;}) A -0.801753 B 0.097550 dtype: float64 \n索引和列名的重命名 针对索引和列名的重命名，我们可以通过pandas当中的rename()方法来实现，例如我们有这样一个数据集\ndf1 = pd.DataFrame(np.random.randn(5, 3), columns=[\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;], index = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;]) df1 A B C a 0.343690 0.869984 -1.929814 b 1.025613 0.470155 -0.242463 c -0.400908 -0.362684 0.226857 d -1.339706 -0.302005 -1.784452 e -0.957026 -0.813600 0.215098 我们可以这样来操作\ndf1.rename(columns={\u0026#34;A\u0026#34;: \u0026#34;one\u0026#34;, \u0026#34;B\u0026#34;: \u0026#34;two\u0026#34;, \u0026#34;C\u0026#34;: \u0026#34;three\u0026#34;}, index={\u0026#34;a\u0026#34;: \u0026#34;apple\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;banana\u0026#34;, \u0026#34;c\u0026#34;: \u0026#34;cat\u0026#34;}) one two three apple 0.383813 0.588964 -0.162386 banana -0.462068 -2.938896 0.935492 cat -0.059807 -1.987281 0.095432 d -0.085230 2.013733 -1.324039 e -0.678352 0.306776 0.808697 当然我们可以拆开来，单独对行或者是列进行重命名，对列的重命名可以这么来做\ndf1.rename({\u0026#34;A\u0026#34;: \u0026#34;one\u0026#34;, \u0026#34;B\u0026#34;: \u0026#34;two\u0026#34;, \u0026#34;C\u0026#34;: \u0026#34;three\u0026#34;}, axis = \u0026#34;columns\u0026#34;) one two three a -0.997108 -1.383011 0.474298 b 1.009910 0.286303 1.120783 c 1.130700 -0.566922 1.841451 d -0.350438 -0.171079 -0.079804 e 0.988050 -0.524604 0.653306 \n排序 在pandas当中，我们可以针对数据集当中的值来进行排序\ndf1 = pd.DataFrame( {\u0026#34;one\u0026#34;: [2, 1, 1, 1], \u0026#34;two\u0026#34;: [1, 3, 2, 4], \u0026#34;three\u0026#34;: [5, 4, 3, 2]} ) df1 one two three 0 2 1 5 1 1 3 4 2 1 2 3 3 1 4 2 我们按照“three”这一列当中的数值来进行排序\ndf1.sort_values(by = \u0026#34;three\u0026#34;) one two three 3 1 4 2 2 1 2 3 1 1 3 4 0 2 1 5 我们也可以依照多列进行排序\ndf1.sort_values(by = [\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;]) one two three 2 1 2 3 1 1 3 4 3 1 4 2 0 2 1 5 在“one”这一列相等的时候，比较“two”这一列数值的大小，在排序的过程当中，默认采用的都是升序，我们可以改成降序来进行编排\ndf1.sort_values(\u0026#34;two\u0026#34;, ascending=False) one two three 3 1 4 2 1 1 3 4 2 1 2 3 0 2 1 5 \n数据类型的转换 最后涉及到的是数据类型的转换，在这之前，我们先得知道如何来查看数据的类型，pandas当中有相应的方法可以处理\ndf2 = pd.DataFrame( { \u0026#34;A\u0026#34;: pd.Series(np.random.randn(5), dtype=\u0026#34;float16\u0026#34;), \u0026#34;B\u0026#34;: pd.Series(np.random.randn(5)), \u0026#34;C\u0026#34;: pd.Series(np.array(np.random.randn(5), dtype=\u0026#34;uint8\u0026#34;)), } ) df2 A B C 0 -0.498779 -0.501512 0 1 -0.055817 -0.528227 254 2 -0.914551 0.763298 1 3 -0.916016 1.366833 0 4 1.993164 1.834457 0 我们通过dtypes属性来查看数据的类型\nA float16 B float64 C uint8 dtype: object 而通过astype()方法来实现数据类型的转换\ndf2[\u0026#34;B\u0026#34;].astype(\u0026#34;int64\u0026#34;) 0 0 1 0 2 0 3 2 4 1 Name: B, dtype: int64 \n根据数据类型来筛选 与此同时，我们也可以根据相对应的数据类型来进行筛选，运用pandas当中的select_dtypes方法，我们先来创建一个数据集包含了各种数据类型的\ndf = pd.DataFrame( { \u0026#34;string_1\u0026#34;: list(\u0026#34;abcde\u0026#34;), \u0026#34;int64_1\u0026#34;: list(range(1, 6)), \u0026#34;uint8_1\u0026#34;: np.arange(3, 8).astype(\u0026#34;u1\u0026#34;), \u0026#34;float64_1\u0026#34;: np.arange(4.0, 9.0), \u0026#34;bool1\u0026#34;: [True, False, True, True, False], \u0026#34;bool2\u0026#34;: [False, True, False, False, True], \u0026#34;dates_1\u0026#34;: pd.date_range(\u0026#34;now\u0026#34;, periods=5), \u0026#34;category_1\u0026#34;: pd.Series(list(\u0026#34;ABCDE\u0026#34;)).astype(\u0026#34;category\u0026#34;), } ) df string_1 int64_1 uint8_1 ... bool2 dates_1 category_1 0 a 1 3 ... False 2021-11-10 10:43:05.957685 A 1 b 2 4 ... True 2021-11-11 10:43:05.957685 B 2 c 3 5 ... False 2021-11-12 10:43:05.957685 C 3 d 4 6 ... False 2021-11-13 10:43:05.957685 D 4 e 5 7 ... True 2021-11-14 10:43:05.957685 E 我们先来查看一下各个列的数据类型\ndf.dtypes string_1 object int64_1 int64 uint8_1 uint8 float64_1 float64 bool1 bool bool2 bool dates_1 datetime64[ns] category_1 category dtype: object 我们筛选类型为布尔值的数据\ndf.select_dtypes(include=[bool]) bool1 bool2 0 True False 1 False True 2 True False 3 True False 4 False True 筛选出数据类型为整型的数据\ndf.select_dtypes(include=[\u0026#39;int64\u0026#39;]) int64_1 0 1 1 2 2 3 3 4 4 5 \n代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/pandas必知必会50例.ipynb\n","permalink":"/blog/pandas%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A50%E4%BE%8B/","summary":"点击上方图片购买课程    src: https://mp.weixin.qq.com/s/j71IPWmT57g3VTajGhgN7Q author: 俊欣 公众号: 关于数据分析与可视化\n 千聊Python课程 https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596\n本篇我们继续前面pandas系列教程的探讨，今天小编会介绍pandas库当中一些非常基础的方法与函数，希望大家看了之后会有所收获。\n准备需要的数据集 我们先准备生成一些随机数，作为后面需要用到的数据集\nimport pandas as pd import numpy as np index = pd.date_range(\u0026#34;1/1/2000\u0026#34;, periods=8) series = pd.Series(np.random.randn(5), index=[\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;]) df = pd.DataFrame(np.random.randn(8, 3), index=index, columns=[\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;]) \nHead and tail head()和tail()方法是用来查看数据集当中的前几行和末尾几行的，默认是查看5行，当然读者朋友也可以自行设定行数\nseries2 = pd.Series(np.random.randn(100)) series2.head() 0 0.578276 1 0.643313 2 -0.336030 3 -0.422468 4 -0.493812 dtype: float64  # 同理 series2.tail() 95 1.","title":"推荐|pandas必知必会50例"},{"content":" 点击上方图片购买课程   spacy 产业级自然语言处理python包 https://spacy.io/\n特性  支持64+语言 针对19门语言的64流水线pipeline处理函数 多任务预训练transformers，如BERT 预训练词向量 支持命名实体识别 支持 POS词性标注 支持 句法依存 支持 文本分类 支持 词干化 内置可视化  spacy安装 pip install spacy==3.2.0 \n模型下载安装 sm小型/ md中型/ lg大型\n  中文模型3.2.0版\n zh_core_web_sm https://github.com/explosion/spacy-models/releases/download/zh_core_web_sm-3.2.0/zh_core_web_sm-3.2.0-py3-none-any.whl zh_core_web_md https://github.com/explosion/spacy-models/releases/download/zh_core_web_md-3.2.0/zh_core_web_md-3.2.0-py3-none-any.whl zh_core_web_lg https://github.com/explosion/spacy-models/releases/download/zh_core_web_lg-3.2.0/zh_core_web_lg-3.2.0-py3-none-any.whl    英文模型3.2.0版\n en_core_web_sm https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl en_core_web_md https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.2.0/en_core_web_md-3.2.0-py3-none-any.whl en_core_web_lg https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.2.0/en_core_web_lg-3.2.0-py3-none-any.whl    注意： 模型大小的区别主要体现在词向量维度数的差距，模型越大， 词向量的维度越多。\nDoc类型  doc.lang_ doc的语言 doc.text doc的文本 doc.ents 文本中的实体词  import spacy #使用中文zh_core_web_sm模型 zh_nlp = spacy.load(\u0026#34;zh_core_web_sm\u0026#34;) test1 = \u0026#39;国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。\u0026#39; doc1 = zh_nlp(test1) doc1 国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。  doc1.lang_ 'zh'  doc1.text '国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。'  doc1.vector array([-1.81135774e-01, 2.31929451e-01, 1.45746097e-01, 6.82696044e-01, -8.44623148e-03, -2.21295916e-02, 4.06811416e-01, -4.60287899e-01, -5.73987663e-01, -1.33687481e-01, -5.34314513e-01, -6.64901555e-01, -3.94947737e-01, 6.35875063e-03, -2.03339502e-01, 5.78875951e-02, -3.34325433e-01, -3.77648622e-01, 2.43863747e-01, -5.56892566e-02, -7.30801523e-01, -2.41785884e-01, -4.50579911e-01, -3.13598923e-02, 9.07084942e-02, -8.06667805e-01, 7.28501499e-01, -8.59559357e-01, -4.44110222e-02, 9.64611948e-01, -2.57230818e-01, 1.09481342e-01, -3.73580456e-01, -8.51007993e-04, 5.30374162e-02, -5.51876485e-01, -4.82654065e-01, 2.68822908e-01, -4.20012563e-01, 4.33068752e-01, -5.14427841e-01, 5.53584039e-01, -2.00293139e-02, 9.45062563e-02, 1.04523234e-01, 1.34134221e+00, -5.23905218e-01, 1.31230903e+00, 3.28943968e-01, 3.39987069e-01, 8.26785386e-01, 5.35273492e-01, -4.27510649e-01, -1.02807179e-01, -1.91500232e-01, 2.63696283e-01, 6.33961499e-01, -5.65908328e-02, -1.94336250e-01, -5.89190602e-01, 2.22078279e-01, 3.41992415e-02, 5.37312031e-01, 2.77926654e-01, -3.00608397e-01, -6.42910838e-01, -1.33188680e-01, 2.82793492e-01, 6.25911206e-02, 2.08833948e-01, 2.69211121e-02, 1.65822819e-01, -4.32190485e-02, -6.67634964e-01, 6.50937319e-01, -2.43003711e-01, 9.57057327e-02, -3.56370257e-03, -1.13566548e-01, -1.65319979e-01, 7.40000159e-02, 3.65676880e-01, -2.21356809e-01, 2.03256473e-01, 2.26293072e-01, 3.11525285e-01, 3.37869138e-01, -3.12896192e-01, 5.31899095e-01, -1.86223835e-01, -6.03411011e-02, 4.97923464e-01, 3.10418844e-01, -2.48594299e-01, -3.67455184e-01, -4.46804255e-01], dtype=float32)  #doc1中的实体词 doc1.ents (11月13日, 11月12日, 国家管网集团, 全国银行, 国家管网集团, 工商银行, 60亿元, 270天, 2, 2, 53, 超10)  #doc1中的实体词类别 [ent.label_ for ent in doc1.ents] ['DATE', 'DATE', 'ORG', 'ORG', 'ORG', 'ORG', 'MONEY', 'DATE', 'CARDINAL', 'CARDINAL', 'CARDINAL', 'CARDINAL']  Token类型  token.text 文本 token.pos_ 词性  for token in doc1: print(token.text, \u0026#39; \u0026#39;, token.pos_) 国家 NOUN 管网 NOUN 微信 ADJ 公众号 NOUN 11月 NOUN 13日 NOUN 消息 NOUN ， PUNCT 11月 NOUN 12日 NOUN ， PUNCT 国家 NOUN 管网 NOUN 集团 NOUN 首期 ADV 绿色 VERB 超短 NOUN 期融 NOUN 资券 VERB 在 ADP 全国 ADJ 银行 NOUN 间 PART 市场 NOUN 成功 ADV 发行 VERB 。 PUNCT 此次 DET 债券 NOUN 发行 VERB 是 VERB 国家 NOUN 管网 NOUN 集团 NOUN 成立 VERB 后 PART 首次 ADV 在 ADP 公开 ADJ 市场 NOUN 亮相 VERB ， PUNCT 由 ADP 工商 NOUN 银行 NOUN 独家 ADV 承销 VERB ， PUNCT 发行 NOUN 金额 NOUN 60亿 NUM 元 NUM 、 PUNCT 期限 NOUN 270 NUM 天 NUM ， PUNCT 为 ADP 本 DET 年度 NOUN 单笔 NOUN 最 ADV 大 ADJ 金额 NOUN 绿色 ADJ 超短 NOUN 期融 NOUN 资券 NOUN ， PUNCT 募集 NOUN 资金 NOUN 将 ADV 全部 ADV 用于 VERB 储气库 NOUN 等 PART 绿色 ADJ 低碳 VERB 天然气 NOUN 储运 NOUN 基础 NOUN 设施 NOUN 建设 NOUN ； PUNCT 发行 VERB 票面 ADJ 利率 NOUN 2 NUM . PUNCT 41% NOUN ， PUNCT 认购 NOUN 总 ADJ 规模 NOUN 达 VERB 2 NUM . PUNCT 53 NUM 倍 NUM ， PUNCT 低于 VERB 资本 NOUN 市场 NOUN 同期 NOUN 可比 ADV 产品 NOUN 利率 NOUN 超10 VERB 个 NUM BP NOUN ， PUNCT 反映 VERB 了 PART 市场 NOUN 对 ADP 绿色 ADJ 基础 NOUN 设施 NOUN 建设 NOUN 项目 NOUN 的 PART 青睐 NOUN 。 PUNCT  代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/20211115spacy产业级自然语言处理包.ipynb\n","permalink":"/blog/spacy%E4%BA%A7%E4%B8%9A%E7%BA%A7%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%8C%85/","summary":"点击上方图片购买课程   spacy 产业级自然语言处理python包 https://spacy.io/\n特性  支持64+语言 针对19门语言的64流水线pipeline处理函数 多任务预训练transformers，如BERT 预训练词向量 支持命名实体识别 支持 POS词性标注 支持 句法依存 支持 文本分类 支持 词干化 内置可视化  spacy安装 pip install spacy==3.2.0 \n模型下载安装 sm小型/ md中型/ lg大型\n  中文模型3.2.0版\n zh_core_web_sm https://github.com/explosion/spacy-models/releases/download/zh_core_web_sm-3.2.0/zh_core_web_sm-3.2.0-py3-none-any.whl zh_core_web_md https://github.com/explosion/spacy-models/releases/download/zh_core_web_md-3.2.0/zh_core_web_md-3.2.0-py3-none-any.whl zh_core_web_lg https://github.com/explosion/spacy-models/releases/download/zh_core_web_lg-3.2.0/zh_core_web_lg-3.2.0-py3-none-any.whl    英文模型3.2.0版\n en_core_web_sm https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl en_core_web_md https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.2.0/en_core_web_md-3.2.0-py3-none-any.whl en_core_web_lg https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.2.0/en_core_web_lg-3.2.0-py3-none-any.whl    注意： 模型大小的区别主要体现在词向量维度数的差距，模型越大， 词向量的维度越多。\nDoc类型  doc.lang_ doc的语言 doc.text doc的文本 doc.ents 文本中的实体词  import spacy #使用中文zh_core_web_sm模型 zh_nlp = spacy.","title":"spacy产业级自然语言处理包"},{"content":" 点击上方图片购买课程   1. 酒精消费 此可视化显示了 2001 年至 2018 年人均（人均）饮酒量最高的国家。有趣的是，这段时间的最高国家主要由东非和欧洲国家组成。\n如果您想了解更多关于全球酒精消费的信息，请查看牛津关于全球酒精消费的报告\nhttps://ourworldindata.org/alcohol-consumptio\n以防万一您感兴趣，这种类型的数据可视化称为条形图竞赛。 我相信你已经在 YouTube 和 Reddit 上看到了很多这样的内容。 如果您想自己构建一个，这里有一个教程，您可以查看\nhttps://towardsdatascience.com/step-by-step-tutorial-create-a-bar-chart-race-animation-da7d5fcd7079\n2. 健康\u0026amp;财富的221年 通常少即是多，但这是我最喜欢的可视化，因为它以清晰的方式传达了如此多的信息，而且非常积极！\n此可视化显示了每个国家的财富（人均 GDP）和健康（平均预期寿命）如何随时间变化。 圆圈的大小代表每个国家的人口，颜色代表每个国家所属的大陆。\n看到我们作为一个物种走了多远真是太神奇了，是吧？\nhttps://www.reddit.com/r/dataisbeautiful/comments/lmlrks/oc_our_health_and_wealth_over_221_years/\n3. 地球光纤电缆网络 3D 地图 这个由 Tyler Morgan 创建的可视化是世界光缆网络的 3D 地图。 该网络用于传输电话信号、互联网通信和电视信号。\n真正看到我们在全球范围内的相互联系是非常疯狂的，不是吗？\n这是使用 rayrender 和 geojsonsf 包在 R 中创建的。 如果您想查看完整代码，可以在此处查看。\nhttps://gist.github.com/tylermorganwall/b222fcebcac3de56a6e144d73d166322\n4. 美国Covid病例增长 我不是特别喜欢花哨的数据可视化，因为它们通常不像简单的图形（如折线图）那样有效地传达信息。 但是，因为这个动画非常独特（而且有点令人不安），我觉得有必要将它添加到前 10 个可视化效果中。\n虽然没有轴可以告诉我们绝对数字，但它是一个简洁的可视化，向我们展示了与 2020 年年初相比，COVID 病例数的增长速度。\n这是使用 d3 创建的，完整代码可以在这里找到。\nhttps://observablehq.com/@bagami/the-us-covid-syringe\n5. 美国 COVID 等值线图 此可视化告诉我们，从 2020 年 2 月开始到 2021 年 10 月，美国的 COVID 病例是如何增长的。有趣的是，您可以清楚地看到这一时期 COVID 的“波浪”。\n这种类型的可视化被称为等值线图，它在比较不同地区（州、国家、大陆等）的特定变量随着时间的推移非常强大。\n如果你想学习如何用 Python 构建一个，我在这里写了一份创建 Choropleth 地图的分步指南。\nhttps://towardsdatascience.com/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5\n6. 所有精神疾病的地图 此可视化显示了 DSM-5 中的每一种精神障碍，它代表精神障碍诊断和统计手册。 它是美国精神障碍的标准分类。 有 20 多个类别和数百种疾病，一旦您开始了解它，这种可视化可能会花费比您想象的更多的时间。\nhttps://www.reddit.com/r/dataisbeautiful/comments/kugn7e/oc_every_mental_disorder_diagnosis_in_the_dsm5/\nhttps://webcache.googleusercontent.com/search?q=cache:LY74prf8a0gJ:https://www.psychiatry.org/File%2520Library/Psychiatrists/Practice/DSM/APA_DSM-5-Contents.pdf+\u0026amp;cd=1\u0026amp;hl=en\u0026amp;ct=clnk\u0026amp;gl=us\u0026amp;client=safari\n7. 我们的塑料去哪儿了？ 该动画展示了塑料的生命周期，以及其中大部分的结束位置。 可悲的是，很明显，我们没有像我们应该回收的那样回收尽可能多的塑料，惊人的 60% 最终被填埋或进入海洋。\n这种类型的可视化是一个动画桑基图，它类似于树图，因为它将数据分解为几个子组并按比例表示值。\n如果您想学习如何在 Python 中构建 Sankey 图，请查看此链接。\nhttps://towardsdatascience.com/sankey-diagram-basics-with-pythons-plotly-7a13d557401a\n8. 近60年来，Top 100 艺术家 最后，这个可视化显示了 Billboard 1960 年到 2020 年的前 100 位艺术家。我个人喜欢这个图表，因为它提供了很多信息：你可以看到顶级艺术家是谁，他们什么时候最流行，以及他们有多少歌曲 称霸排行榜！\n你认识多少艺术家？\n 点击上方图片购买课程   ","permalink":"/blog/2021%E6%9C%80%E6%B5%81%E8%A1%8C%E7%9A%848%E5%BC%A0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE/","summary":"点击上方图片购买课程   1. 酒精消费 此可视化显示了 2001 年至 2018 年人均（人均）饮酒量最高的国家。有趣的是，这段时间的最高国家主要由东非和欧洲国家组成。\n如果您想了解更多关于全球酒精消费的信息，请查看牛津关于全球酒精消费的报告\nhttps://ourworldindata.org/alcohol-consumptio\n以防万一您感兴趣，这种类型的数据可视化称为条形图竞赛。 我相信你已经在 YouTube 和 Reddit 上看到了很多这样的内容。 如果您想自己构建一个，这里有一个教程，您可以查看\nhttps://towardsdatascience.com/step-by-step-tutorial-create-a-bar-chart-race-animation-da7d5fcd7079\n2. 健康\u0026amp;财富的221年 通常少即是多，但这是我最喜欢的可视化，因为它以清晰的方式传达了如此多的信息，而且非常积极！\n此可视化显示了每个国家的财富（人均 GDP）和健康（平均预期寿命）如何随时间变化。 圆圈的大小代表每个国家的人口，颜色代表每个国家所属的大陆。\n看到我们作为一个物种走了多远真是太神奇了，是吧？\nhttps://www.reddit.com/r/dataisbeautiful/comments/lmlrks/oc_our_health_and_wealth_over_221_years/\n3. 地球光纤电缆网络 3D 地图 这个由 Tyler Morgan 创建的可视化是世界光缆网络的 3D 地图。 该网络用于传输电话信号、互联网通信和电视信号。\n真正看到我们在全球范围内的相互联系是非常疯狂的，不是吗？\n这是使用 rayrender 和 geojsonsf 包在 R 中创建的。 如果您想查看完整代码，可以在此处查看。\nhttps://gist.github.com/tylermorganwall/b222fcebcac3de56a6e144d73d166322\n4. 美国Covid病例增长 我不是特别喜欢花哨的数据可视化，因为它们通常不像简单的图形（如折线图）那样有效地传达信息。 但是，因为这个动画非常独特（而且有点令人不安），我觉得有必要将它添加到前 10 个可视化效果中。\n虽然没有轴可以告诉我们绝对数字，但它是一个简洁的可视化，向我们展示了与 2020 年年初相比，COVID 病例数的增长速度。\n这是使用 d3 创建的，完整代码可以在这里找到。\nhttps://observablehq.com/@bagami/the-us-covid-syringe\n5. 美国 COVID 等值线图 此可视化告诉我们，从 2020 年 2 月开始到 2021 年 10 月，美国的 COVID 病例是如何增长的。有趣的是，您可以清楚地看到这一时期 COVID 的“波浪”。","title":"2021最流行的8张可视化图"},{"content":" 点击上方图片购买课程    整理自阮一峰技术周刊\nsrc:https://github.com/ruanyf/weekly\n Netlify Drap 拖拽本地html文件夹至该网站，可快速实现建站\nhttps://app.netlify.com/drop\n 类似的还有fleek https://fleek.co/\nroapi 浏览器查看csv数据\nhttps://github.com/roapi/roapi\n OCRmyPDF 为扫描的 PDF 文件添加了 OCR 文本层，允许对其进行搜索\nhttps://github.com/ocrmypdf/OCRmyPDF\n CodePng 把代码转为美观的截图\nhttps://www.codepng.app/\n  https://github.com/zail0/codePng\ngiscus 为个人博客添加评论区\nhttps://github.com/giscus/giscus\nYouglish 通过搜索查找出现某单词的视频片段，可导出对应音频\nhttps://youglish.com/\n Agora Flat 开源教室 前后端完全开源 快速搭建简约美观的互动教室\n 杰文斯悖论 1865年，英国经济学家威廉·斯坦利·杰文斯（William Stanley Jevons）观察到，提高煤炭的使用效率，会导致煤炭消费量的增加。\n他因而提出，节省资源的技术，只会带来资源使用量的增加。 由于这与人们的直觉相反，所以称为杰文斯悖论。\n杰文斯悖论有时被认为意味着，节约能源的努力是徒劳的。提高化石能源的使用效率，反而会加快化石能源的耗尽速度。\n这说明，可持续能源政策不能只依赖节能技术的进步，而必须配合其他类型的政府干预措施，限制能源的使用。\n Paul Graham博客文集 经典文章值得反复阅读\nhttps://github.com/evmn/Paul-Graham\n ","permalink":"/blog/techweekly01/","summary":" 点击上方图片购买课程    整理自阮一峰技术周刊\nsrc:https://github.com/ruanyf/weekly\n Netlify Drap 拖拽本地html文件夹至该网站，可快速实现建站\nhttps://app.netlify.com/drop\n 类似的还有fleek https://fleek.co/\nroapi 浏览器查看csv数据\nhttps://github.com/roapi/roapi\n OCRmyPDF 为扫描的 PDF 文件添加了 OCR 文本层，允许对其进行搜索\nhttps://github.com/ocrmypdf/OCRmyPDF\n CodePng 把代码转为美观的截图\nhttps://www.codepng.app/\n  https://github.com/zail0/codePng\ngiscus 为个人博客添加评论区\nhttps://github.com/giscus/giscus\nYouglish 通过搜索查找出现某单词的视频片段，可导出对应音频\nhttps://youglish.com/\n Agora Flat 开源教室 前后端完全开源 快速搭建简约美观的互动教室\n 杰文斯悖论 1865年，英国经济学家威廉·斯坦利·杰文斯（William Stanley Jevons）观察到，提高煤炭的使用效率，会导致煤炭消费量的增加。\n他因而提出，节省资源的技术，只会带来资源使用量的增加。 由于这与人们的直觉相反，所以称为杰文斯悖论。\n杰文斯悖论有时被认为意味着，节约能源的努力是徒劳的。提高化石能源的使用效率，反而会加快化石能源的耗尽速度。\n这说明，可持续能源政策不能只依赖节能技术的进步，而必须配合其他类型的政府干预措施，限制能源的使用。\n Paul Graham博客文集 经典文章值得反复阅读\nhttps://github.com/evmn/Paul-Graham\n ","title":"TechWeekly-01 | 每周有趣有用的技术分享"},{"content":" 点击上方图片购买课程   cntext 中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等\n github地址 https://github.com/hidadeng/cntext pypi地址 https://pypi.org/project/cntext/ 视频课-Python网络爬虫与文本数据分析  功能模块含\n cntext stats 文本统计,可读性等 dictionary 构建词表(典) sentiment 情感分析 similarity 文本相似度 visualization 可视化，如词云图  安装 pip install cntext==0.9 \n一、cntext 查看cntext基本信息\nimport cntext help(cntext) Run\nHelp on package cntext: NAME cntext PACKAGE CONTENTS description (package) dictionary (package) sentiment (package) similarity (package) visualization (package) DATA ADV_words = [\u0026#39;都\u0026#39;, \u0026#39;全\u0026#39;, \u0026#39;单\u0026#39;, \u0026#39;共\u0026#39;, \u0026#39;光\u0026#39;, \u0026#39;尽\u0026#39;, \u0026#39;净\u0026#39;, \u0026#39;仅\u0026#39;, \u0026#39;就\u0026#39;, \u0026#39;只\u0026#39;, \u0026#39;一共\u0026#39;, \u0026#39;... CONJ_words = [\u0026#39;乃\u0026#39;, \u0026#39;乍\u0026#39;, \u0026#39;与\u0026#39;, \u0026#39;无\u0026#39;, \u0026#39;且\u0026#39;, \u0026#39;丕\u0026#39;, \u0026#39;为\u0026#39;, \u0026#39;共\u0026#39;, \u0026#39;其\u0026#39;, \u0026#39;况\u0026#39;, \u0026#39;厥\u0026#39;, \u0026#39;... DUTIR_Ais = {\u0026#39;sigh\u0026#39;, \u0026#39;一命呜呼\u0026#39;, \u0026#39;一场春梦\u0026#39;, \u0026#39;一场空\u0026#39;, \u0026#39;一头跌在菜刀上－切肤之痛\u0026#39;, \u0026#39;一念之差\u0026#39;, ..... DUTIR_Haos = {\u0026#39;1兒巴经\u0026#39;, \u0026#39;3x\u0026#39;, \u0026#39;8错\u0026#39;, \u0026#39;BUCUO\u0026#39;, \u0026#39;Cool毙\u0026#39;, \u0026#39;NB\u0026#39;, ...} DUTIR_Jings = {\u0026#39;848\u0026#39;, \u0026#39;FT\u0026#39;, \u0026#39;_god\u0026#39;, \u0026#39;yun\u0026#39;, \u0026#39;一个骰子掷七点－出乎意料\u0026#39;, \u0026#39;一举成名\u0026#39;, ...... DUTIR_Jus = {\u0026#39;一则以喜，一则以惧\u0026#39;, \u0026#39;一发千钧\u0026#39;, \u0026#39;一年被蛇咬，三年怕草索\u0026#39;, \u0026#39;一座皆惊\u0026#39;, \u0026#39;一脸横肉\u0026#39;, \u0026#39;一蛇两头... DUTIR_Les = {\u0026#39;:)\u0026#39;, \u0026#39;CC\u0026#39;, \u0026#39;Happy\u0026#39;, \u0026#39;LOL\u0026#39;, \u0026#39;_so\u0026#39;, \u0026#39;haha\u0026#39;, ...} DUTIR_Nus = {\u0026#39;2气斗狠\u0026#39;, \u0026#39;MD\u0026#39;, \u0026#39;TNND\u0026#39;, \u0026#39;gun\u0026#39;, \u0026#39;kao\u0026#39;, \u0026#39;一刀两断\u0026#39;, ...} DUTIR_Wus = {\u0026#39;B4\u0026#39;, \u0026#39;BD\u0026#39;, \u0026#39;BS\u0026#39;, \u0026#39;HC\u0026#39;, \u0026#39;HJ\u0026#39;, \u0026#39;JJWW\u0026#39;, ...} HOWNET_deny = {\u0026#39;不\u0026#39;, \u0026#39;不可\u0026#39;, \u0026#39;不是\u0026#39;, \u0026#39;不能\u0026#39;, \u0026#39;不要\u0026#39;, \u0026#39;休\u0026#39;, ...} HOWNET_extreme = {\u0026#39;万\u0026#39;, \u0026#39;万万\u0026#39;, \u0026#39;万分\u0026#39;, \u0026#39;万般\u0026#39;, \u0026#39;不亦乐乎\u0026#39;, \u0026#39;不可开交\u0026#39;, ...} HOWNET_ish = {\u0026#39;一些\u0026#39;, \u0026#39;一点\u0026#39;, \u0026#39;一点儿\u0026#39;, \u0026#39;不丁点儿\u0026#39;, \u0026#39;不大\u0026#39;, \u0026#39;不怎么\u0026#39;, ...} HOWNET_more = {\u0026#39;多\u0026#39;, \u0026#39;大不了\u0026#39;, \u0026#39;如斯\u0026#39;, \u0026#39;尤甚\u0026#39;, \u0026#39;强\u0026#39;, \u0026#39;愈\u0026#39;, ...} HOWNET_neg = {\u0026#39;一下子爆发\u0026#39;, \u0026#39;一下子爆发的一连串\u0026#39;, \u0026#39;一不小心\u0026#39;, \u0026#39;一个屁\u0026#39;, \u0026#39;一仍旧贯\u0026#39;, \u0026#39;一偏\u0026#39;, ...} HOWNET_pos = {\u0026#39;\u0026#39;, \u0026#39;一专多能\u0026#39;, \u0026#39;一丝不差\u0026#39;, \u0026#39;一丝不苟\u0026#39;, \u0026#39;一个心眼儿\u0026#39;, \u0026#39;一五一十\u0026#39;, ...} HOWNET_very = {\u0026#39;不为过\u0026#39;, \u0026#39;不少\u0026#39;, \u0026#39;不胜\u0026#39;, \u0026#39;不过\u0026#39;, \u0026#39;何啻\u0026#39;, \u0026#39;何止\u0026#39;, ...} STOPWORDS_en = {\u0026#39;a\u0026#39;, \u0026#39;about\u0026#39;, \u0026#39;above\u0026#39;, \u0026#39;across\u0026#39;, \u0026#39;after\u0026#39;, \u0026#39;afterwards\u0026#39;... STOPWORDS_zh = {\u0026#39;、\u0026#39;, \u0026#39;。\u0026#39;, \u0026#39;〈\u0026#39;, \u0026#39;〉\u0026#39;, \u0026#39;《\u0026#39;, \u0026#39;》\u0026#39;, ...} FORMAL_pos_words = [\u0026#39;100强\u0026#39;, \u0026#39;3A级\u0026#39;, \u0026#39;50强\u0026#39;, \u0026#39;AAA级\u0026#39;, \u0026#39;AAA企业\u0026#39;, \u0026#39;爱戴\u0026#39;,..] FORMAL_neg_words = [\u0026#39;安于现状\u0026#39;, \u0026#39;暗藏\u0026#39;, \u0026#39;暗淡\u0026#39;, \u0026#39;暗黑\u0026#39;, \u0026#39;暗流\u0026#39;, ..] UNFORMAL_pos_words = [\u0026#39;爱心\u0026#39;,\u0026#39;安定\u0026#39;,\u0026#39;安全\u0026#39;,\u0026#39;安然无恙\u0026#39;,\u0026#39;安泰\u0026#39;,\u0026#39;霸主\u0026#39;,...] UNFORMAL_neg_words = [\u0026#39;哀鸿遍野\u0026#39;,\u0026#39;肮脏\u0026#39;,\u0026#39;罢免\u0026#39;,\u0026#39;白痴\u0026#39;,\u0026#39;败笔\u0026#39;,\u0026#39;败诉\u0026#39;,\u0026#39;半信半疑\u0026#39;..] FILE /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/cntext/__init__.py \nfrom cntext import dict_info dict_info() Run\n【大连理工大学情感本体库】 七大情绪分类，依次是哀、恶、好、惊、惧、乐、怒；对应的情绪词表依次： DUTIR_Ais = {\u0026#34;泣血捶膺\u0026#34;, \u0026#34;望断白云\u0026#34;, \u0026#34;日暮途穷\u0026#34;, \u0026#34;身微力薄\u0026#34;...} DUTIR_Wus = {\u0026#34;饰非遂过\u0026#34;, \u0026#34;恶语\u0026#34;, \u0026#34;毁害\u0026#34;, \u0026#34;恶籍盈指\u0026#34;, \u0026#34;脾气爆躁\u0026#34;, \u0026#34;淫贱\u0026#34;, \u0026#34;凌乱\u0026#34;...} DUTIR_Haos = {\u0026#34;打破砂锅璺到底\u0026#34;, \u0026#34;多彩\u0026#34;, \u0026#34;披沙拣金\u0026#34;, \u0026#34;见机行事\u0026#34;, \u0026#34;精神饱满\u0026#34;...} DUTIR_Jings = {\u0026#34;骇人视听\u0026#34;, \u0026#34;拍案惊奇\u0026#34;, \u0026#34;悬念\u0026#34;, \u0026#34;无翼而飞\u0026#34;, \u0026#34;原来\u0026#34;, \u0026#34;冷门\u0026#34;...} DUTIR_Jus ={\u0026#34;山摇地动\u0026#34;, \u0026#34;月黑风高\u0026#34;, \u0026#34;流血\u0026#34;, \u0026#34;老鼠偷猫饭－心惊肉跳\u0026#34;, \u0026#34;一发千钧\u0026#34;...} DUTIR_Les ={\u0026#34;含哺鼓腹\u0026#34;, \u0026#34;欢呼鼓舞\u0026#34;, \u0026#34;莺歌蝶舞\u0026#34;, \u0026#34;将伯之助\u0026#34;, \u0026#34;逸兴横飞\u0026#34;, \u0026#34;舒畅\u0026#34;...} DUTIR_Nus = {\u0026#34;怨气满腹\u0026#34;, \u0026#34;面有愠色\u0026#34;, \u0026#34;愤愤\u0026#34;, \u0026#34;直眉瞪眼\u0026#34;, \u0026#34;负气斗狠\u0026#34;, \u0026#34;挑眼\u0026#34;...} 【知网Hownet词典】 含正负形容词、否定词、副词等词表，对应的词表依次: HOWNET_deny = {\u0026#34;不\u0026#34;, \u0026#34;不是\u0026#34;, \u0026#34;不能\u0026#34;, \u0026#34;不可\u0026#34;...} HOWNET_extreme = {\u0026#34;百分之百\u0026#34;, \u0026#34;倍加\u0026#34;, \u0026#34;备至\u0026#34;, \u0026#34;不得了\u0026#34;...} HOWNET_ish = {\u0026#34;点点滴滴\u0026#34;, \u0026#34;多多少少\u0026#34;, \u0026#34;怪\u0026#34;, \u0026#34;好生\u0026#34;, \u0026#34;还\u0026#34;, \u0026#34;或多或少\u0026#34;...} HOWNET_more = {\u0026#34;大不了\u0026#34;, \u0026#34;多\u0026#34;, \u0026#34;更\u0026#34;, \u0026#34;比较\u0026#34;, \u0026#34;更加\u0026#34;, \u0026#34;更进一步\u0026#34;, \u0026#34;更为\u0026#34;, \u0026#34;还\u0026#34;, \u0026#34;还要\u0026#34;...} HOWNET_neg = {\u0026#34;压坏\u0026#34;, \u0026#34;鲁莽的\u0026#34;, \u0026#34;被控犯罪\u0026#34;, \u0026#34;银根紧\u0026#34;, \u0026#34;警惕的\u0026#34;, \u0026#34;残缺\u0026#34;, \u0026#34;致污物\u0026#34;, \u0026#34;柔弱\u0026#34;...} HOWNET_pos = {\u0026#34;无误\u0026#34;, \u0026#34;感激不尽\u0026#34;, \u0026#34;受大众欢迎\u0026#34;, \u0026#34;敬礼\u0026#34;, \u0026#34;文雅\u0026#34;, \u0026#34;一尘不染\u0026#34;, \u0026#34;高精度\u0026#34;, \u0026#34;兴盛\u0026#34;...} HOWNET_very = {\u0026#34;不为过\u0026#34;, \u0026#34;超\u0026#34;, \u0026#34;超额\u0026#34;, \u0026#34;超外差\u0026#34;, \u0026#34;超微结构\u0026#34;, \u0026#34;超物质\u0026#34;, \u0026#34;出头\u0026#34;...} 【停用词表】 中英文停用词表，依次 STOPWORDS_zh = {\u0026#34;经\u0026#34;, \u0026#34;得\u0026#34;, \u0026#34;则甚\u0026#34;, \u0026#34;跟\u0026#34;, \u0026#34;好\u0026#34;, \u0026#34;具体地说\u0026#34;...} STOPWORDS_en = {\u0026#39;a\u0026#39;, \u0026#39;about\u0026#39;, \u0026#39;above\u0026#39;, \u0026#39;across\u0026#39;, \u0026#39;after\u0026#39;...} 【中文副词/连词】 副词ADV、连词CONJ ADV_words = [\u0026#39;都\u0026#39;, \u0026#39;全\u0026#39;, \u0026#39;单\u0026#39;, \u0026#39;共\u0026#39;, \u0026#39;光\u0026#39;...} CONJ_words = [\u0026#39;乃\u0026#39;, \u0026#39;乍\u0026#39;, \u0026#39;与\u0026#39;, \u0026#39;无\u0026#39;, \u0026#39;且\u0026#39;...} 【金融情绪词典】 姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46. #正式-肯定情绪词典 FORMAL_pos_words = [\u0026#39;100强\u0026#39;, \u0026#39;3A级\u0026#39;, \u0026#39;50强\u0026#39;, \u0026#39;AAA级\u0026#39;, \u0026#39;AAA企业\u0026#39;, \u0026#39;爱戴\u0026#39;,...] #正式-否定情绪词典 FORMAL_neg_words = [\u0026#39;安于现状\u0026#39;, \u0026#39;暗藏\u0026#39;, \u0026#39;暗淡\u0026#39;, \u0026#39;暗黑\u0026#39;, \u0026#39;暗流\u0026#39;, ...] #非正式-肯定情绪词典 UNFORMAL_pos_words = [\u0026#39;爱心\u0026#39;,\u0026#39;安定\u0026#39;,\u0026#39;安全\u0026#39;,\u0026#39;安然无恙\u0026#39;,\u0026#39;安泰\u0026#39;,\u0026#39;霸主\u0026#39;,...] #非正式-否定情绪词典 UNFORMAL_neg_words = [\u0026#39;哀鸿遍野\u0026#39;,\u0026#39;肮脏\u0026#39;,\u0026#39;罢免\u0026#39;,\u0026#39;白痴\u0026#39;,\u0026#39;败笔\u0026#39;,\u0026#39;败诉\u0026#39;,\u0026#39;半信半疑\u0026#39;...] \n查看词表\nfrom cntext import CONJ_words, ADV_words #获取连词词表 CONJ_words Run\n[\u0026#39;乃\u0026#39;, \u0026#39;乍\u0026#39;, \u0026#39;与\u0026#39;, \u0026#39;无\u0026#39;, \u0026#39;且\u0026#39;, \u0026#39;丕\u0026#39;, \u0026#39;为\u0026#39;, \u0026#39;共\u0026#39;, \u0026#39;其\u0026#39;, \u0026#39;况\u0026#39;, \u0026#39;厥\u0026#39;, \u0026#39;则\u0026#39;, \u0026#39;那\u0026#39;, \u0026#39;兼\u0026#39;, ... ] \n二、stats 目前含\n term_freq 词频统计函数，返回Counter类型 readability 中文可读性  from cntext.stats import term_freq, readability text = \u0026#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更\u0026#39; term_freq(text) Counter({\u0026#39;看待\u0026#39;: 1, \u0026#39;网文\u0026#39;: 1, \u0026#39;作者\u0026#39;: 1, \u0026#39;黑客\u0026#39;: 1, \u0026#39;大佬\u0026#39;: 1, \u0026#39;盗号\u0026#39;: 1, \u0026#39;改文因\u0026#39;: 1, \u0026#39;万分\u0026#39;: 1, \u0026#39;惭愧\u0026#39;: 1, \u0026#39;停\u0026#39;: 1}) \n**中文可读性 ** 算法参考自\n 徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.\n  readability1 \u0026mdash;每个分句中的平均字数 readability2 \u0026mdash;每个句子中副词和连词所占的比例 readability3 \u0026mdash;参考Fog Index， readability3=(readability1+readability2)×0.5  以上三个指标越大，都说明文本的复杂程度越高，可读性越差。\nreadability(text) {\u0026#39;readability1\u0026#39;: 27.0, \u0026#39;readability2\u0026#39;: 0.17647058823529413, \u0026#39;readability3\u0026#39;: 13.588235294117647} \n三、dictionary 本模块用于构建词表(典),含\n SoPmi 共现法扩充词表(典) W2VModels 词向量word2vec扩充词表(典)  3.1 SoPmi 共现法 from cntext.dictionary import SoPmi import os sopmier = SoPmi(cwd=os.getcwd(), input_txt_file=\u0026#39;data/sopmi_corpus.txt\u0026#39;, #原始数据，您的语料 seedword_txt_file=\u0026#39;data/sopmi_seed_words.txt\u0026#39;, #人工标注的初始种子词 ) sopmier.sopmi() Run\nstep 1/4:...seg corpus ... Loading model cost 0.678 seconds. Prefix dict has been built successfully. step 1/4 finished:...cost 60.78995203971863... step 2/4:...collect cowords ... step 2/4 finished:...cost 0.6169600486755371... step 3/4:...compute sopmi ... step 1/4 finished:...cost 0.26422882080078125... step 4/4:...save candiwords ... finished! cost 61.8965539932251 \n3.2 W2VModels 词向量 from cntext.dictionary import W2VModels import os #初始化模型 model = W2VModels(cwd=os.getcwd()) #语料数据 w2v_corpus.txt model.train(input_txt_file=\u0026#39;data/w2v_corpus.txt\u0026#39;) #根据种子词，筛选出没类词最相近的前100个词 model.find(seedword_txt_file=\u0026#39;data/w2v_seeds/integrity.txt\u0026#39;, topn=100) model.find(seedword_txt_file=\u0026#39;data/w2v_seeds/innovation.txt\u0026#39;, topn=100) model.find(seedword_txt_file=\u0026#39;data/w2v_seeds/quality.txt\u0026#39;, topn=100) model.find(seedword_txt_file=\u0026#39;data/w2v_seeds/respect.txt\u0026#39;, topn=100) model.find(seedword_txt_file=\u0026#39;data/w2v_seeds/teamwork.txt\u0026#39;, topn=100) Run\n数据预处理开始....... 预处理结束........... Word2Vec模型训练开始...... 已将模型存入 /Users/Desktop/cntext/test/output/w2v_candi_words/w2v.model 准备寻找每个seed在语料中所有的相似候选词 初步搜寻到 572 个相似的候选词 计算每个候选词 与 integrity 的相似度， 选出相似度最高的前 100 个候选词 已完成 【integrity 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/integrity.txt， 耗时 46 秒 准备寻找每个seed在语料中所有的相似候选词 初步搜寻到 516 个相似的候选词 计算每个候选词 与 innovation 的相似度， 选出相似度最高的前 100 个候选词 已完成 【innovation 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/innovation.txt， 耗时 46 秒 准备寻找每个seed在语料中所有的相似候选词 初步搜寻到 234 个相似的候选词 计算每个候选词 与 quality 的相似度， 选出相似度最高的前 100 个候选词 已完成 【quality 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/quality.txt， 耗时 46 秒 准备寻找每个seed在语料中所有的相似候选词 初步搜寻到 243 个相似的候选词 计算每个候选词 与 respect 的相似度， 选出相似度最高的前 100 个候选词 已完成 【respect 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/respect.txt， 耗时 46 秒 准备寻找每个seed在语料中所有的相似候选词 初步搜寻到 319 个相似的候选词 计算每个候选词 与 teamwork 的相似度， 选出相似度最高的前 100 个候选词 已完成 【teamwork 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/teamwork.txt， 耗时 46 秒 \n四、 sentiment  senti_by_hownet 使用知网Hownet词典对文本进行情感分析 senti_by_dutir 使用大连理工大学情感本体库dutir对文本进行情绪分析 senti_by_diydict 使用自定义词典 对文本进行情感分析  4.1 senti_by_hownet(text, adj_adv=False) 使用知网Hownet词典进行(中)文本数据的情感分析，统计正、负情感信息出现次数(得分)\n text: 待分析的中文文本数据 adj_adv: 是否考虑副词（否定词、程度词）对情绪形容词的反转和情感强度修饰作用，默认False。默认False只统计情感形容词出现个数；  from cntext.sentiment import senti_by_hownet text = \u0026#39;今天股票大涨，心情倍爽，非常开心啊。\u0026#39; senti_by_dutir(text) Run\n{\u0026#39;word_num\u0026#39;: 12, \u0026#39;sentence_num\u0026#39;: 2, \u0026#39;stopword_num\u0026#39;: 4, \u0026#39;好_num\u0026#39;: 0, \u0026#39;乐_num\u0026#39;: 1, \u0026#39;哀_num\u0026#39;: 0, \u0026#39;怒_num\u0026#39;: 0, \u0026#39;惧_num\u0026#39;: 0, \u0026#39;恶_num\u0026#39;: 0, \u0026#39;惊_num\u0026#39;: 0} \n考虑副词（否定词、程度词）对情绪形容词的反转和情感强度修饰作用\nsenti_by_hownet(text, adj_adv=True) Run\n{\u0026#39;sentence_num\u0026#39;: 1, \u0026#39;word_num\u0026#39;: 12, \u0026#39;stopword_num\u0026#39;: 3, \u0026#39;pos_score\u0026#39;: 13.0, \u0026#39;neg_score\u0026#39;: 0.0} \n4.2 senti_by_dutir(text) 使用大连理工大学情感本体库对文本进行情绪分析，统计各情绪词语出现次数。\nfrom cntext.sentiment import senti_by_dutir text = \u0026#39;今天股票大涨，心情倍爽，非常开心啊。\u0026#39; senti_by_dutir(text) Run\n{\u0026#39;word_num\u0026#39;: 12, \u0026#39;sentence_num\u0026#39;: 2, \u0026#39;stopword_num\u0026#39;: 4, \u0026#39;好_num\u0026#39;: 0, \u0026#39;乐_num\u0026#39;: 1, \u0026#39;哀_num\u0026#39;: 0, \u0026#39;怒_num\u0026#39;: 0, \u0026#39;惧_num\u0026#39;: 0, \u0026#39;恶_num\u0026#39;: 0, \u0026#39;惊_num\u0026#39;: 0}  情绪分析使用的大连理工大学情感本体库，如发表论文，请注意用户许可协议\n如果用户使用该资源发表论文或取得科研成果，请在论文中添加诸如“使用了大连理工大学信息检索研究室的情感词汇本体” 字样加以声明。\n参考文献中加入引文“徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.”\n \n4.3 senti_by_diy(text) 使用diy词典进行情感分析，计算各个情绪词出现次数，未考虑强度副词、否定词对情感的复杂影响，\n text: 待分析中文文本 sentiwords: 情感词字典； {\u0026lsquo;category1\u0026rsquo;: \u0026lsquo;category1 词语列表\u0026rsquo;, \u0026lsquo;category2\u0026rsquo;: \u0026lsquo;category2词语列表\u0026rsquo;, \u0026lsquo;category3\u0026rsquo;: \u0026lsquo;category3词语列表\u0026rsquo;, \u0026hellip; }  sentiwords = {\u0026#39;pos\u0026#39;: [\u0026#39;开心\u0026#39;, \u0026#39;愉快\u0026#39;, \u0026#39;倍爽\u0026#39;], \u0026#39;neg\u0026#39;: [\u0026#39;难过\u0026#39;, \u0026#39;悲伤\u0026#39;], \u0026#39;adv\u0026#39;: [\u0026#39;倍\u0026#39;]} text = \u0026#39;今天股票大涨，心情倍爽，非常开心啊。\u0026#39; senti_by_diydict(text, sentiwords) Run\n{\u0026#39;pos_num\u0026#39;: 1, \u0026#39;neg_num\u0026#39;: 0, \u0026#39;adv_num\u0026#39;: 1, \u0026#39;stopword_num\u0026#39;: 4, \u0026#39;sentence_num\u0026#39;: 2, \u0026#39;word_num\u0026#39;: 12} \n4.4 注意 返回结果: num表示词语出现次数； score是考虑副词、否定词对情感的修饰，结果不是词频，是情感类别的得分。\n\n五、similarity 使用cosine、jaccard、miniedit等计算两文本的相似度，算法实现参考自\n Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.\n from cntext.similarity import similarity_score text1 = \u0026#39;编程真好玩编程真好玩\u0026#39; text2 = \u0026#39;游戏真好玩编程真好玩\u0026#39; similarity_score(text1, text2) Run\n{\u0026#39;Sim_Cosine\u0026#39;: 0.816496580927726, \u0026#39;Sim_Jaccard\u0026#39;: 0.6666666666666666, \u0026#39;Sim_MinEdit\u0026#39;: 1, \u0026#39;Sim_Simple\u0026#39;: 0.9183673469387755} \n六、visualization 文本信息可视化，含wordcloud、wordshiftor\n wordcloud 词云图 wordshiftor 两文本词移图  6.1 wordcloud(text, title, html_path)  text: 中文文本字符串数据 title: 词云图标题 html_path: 词云图html文件存储路径  from cntext.visualization import wordcloud text1 = \u0026#34;\u0026#34;\u0026#34;在信息化时代，各种各样的数据被广泛采集和利用，有些数据看似无关紧要甚至好像是公开的，但同样关乎国家安全。11月1日是《反间谍法》颁布实施七周年。近年来，国家安全机关按照《反间谍法》《数据安全法》有关规定，依法履行数据安全监管职责，在全国范围内开展涉外数据专项执法行动，发现一些境外数据公司长期、大量、实时搜集我境内船舶数据，数据安全领域的“商业间谍”魅影重重。 2020年6月，国家安全机关在反间谍专项行动中发现，有境外数据公司通过网络在境内私下招募“数据贡献员”。广东省湛江市国家安全局据此开展调查，在麻斜军港附近发现有可疑的无线电设备在持续搜集湛江港口舰船数据，并通过互联网实时传往境外。在临近海港的一个居民楼里，国家安全机关工作人员最终锁定了位置。 一套简易的无线电设备是AIS陆基基站，用来接收AIS系统发射的船舶数据。AIS系统是船舶身份自动识别系统，国际海事组织要求300总吨以上船舶必须强制安装。船只在航行过程中，通过AIS系统向其他船只和主管部门发送船只航向、航速、目的港等信息，用于航行避让、交通导航、轨迹回溯等功能。国家安全机关查获的设备虽然看上去简陋，功能却十分强大。 国家安全机关进一步调查发现，这个基站的来历并不简单。2016年，湛江市的无线电爱好者郑某偶然收到一封境外某海事数据公司发来的邀请邮件。 作为资深的无线电爱好者，能免费领取价值几千元的设备还能获取更多的船舶信息，郑某当然心动。而且，这个基站的架设也非常容易，只要简单组装连上家里的网络，自己的任务就算完成。郑某马上浏览了这家公司申请无线电设备的页面，并按对方要求填写了信息。 \u0026#34;\u0026#34;\u0026#34; wordcloud(text=text1, title=\u0026#39;词云图测试\u0026#39;, html_path=\u0026#39;output/词云图测试.html\u0026#39;) Run\n 6.2 wordshiftor(text1, text2, title, top_n, matplotlib_family)  text1: 文本数据1；字符串 text2: 文本数据2；字符串 title: 词移图标题 top_n: 显示最常用的前n词； 默认值15 matplotlib_family matplotlib中文字体，默认\u0026quot;Arial Unicode MS\u0026quot;；如绘图字体乱码请，请参考下面提示  text1 = \u0026#34;\u0026#34;\u0026#34;在信息化时代，各种各样的数据被广泛采集和利用，有些数据看似无关紧要甚至好像是公开的，但同样关乎国家安全。11月1日是《反间谍法》颁布实施七周年。近年来，国家安全机关按照《反间谍法》《数据安全法》有关规定，依法履行数据安全监管职责，在全国范围内开展涉外数据专项执法行动，发现一些境外数据公司长期、大量、实时搜集我境内船舶数据，数据安全领域的“商业间谍”魅影重重。 2020年6月，国家安全机关在反间谍专项行动中发现，有境外数据公司通过网络在境内私下招募“数据贡献员”。广东省湛江市国家安全局据此开展调查，在麻斜军港附近发现有可疑的无线电设备在持续搜集湛江港口舰船数据，并通过互联网实时传往境外。在临近海港的一个居民楼里，国家安全机关工作人员最终锁定了位置。 一套简易的无线电设备是AIS陆基基站，用来接收AIS系统发射的船舶数据。AIS系统是船舶身份自动识别系统，国际海事组织要求300总吨以上船舶必须强制安装。船只在航行过程中，通过AIS系统向其他船只和主管部门发送船只航向、航速、目的港等信息，用于航行避让、交通导航、轨迹回溯等功能。国家安全机关查获的设备虽然看上去简陋，功能却十分强大。 国家安全机关进一步调查发现，这个基站的来历并不简单。2016年，湛江市的无线电爱好者郑某偶然收到一封境外某海事数据公司发来的邀请邮件。 作为资深的无线电爱好者，能免费领取价值几千元的设备还能获取更多的船舶信息，郑某当然心动。而且，这个基站的架设也非常容易，只要简单组装连上家里的网络，自己的任务就算完成。郑某马上浏览了这家公司申请无线电设备的页面，并按对方要求填写了信息。 \u0026#34;\u0026#34;\u0026#34; text2 = \u0026#34;\u0026#34;\u0026#34; 通知强调，各地商务主管部门要紧紧围绕保供稳价工作目标，压实“菜篮子”市长负责制，细化工作措施；强化横向协作与纵向联动，加强与有关部门的工作协调，形成工作合力；建立完善省际间和本地区联保联供机制，健全有关工作方案，根据形势及时开展跨区域调运；加强市场运行监测，每日跟踪蔬菜、肉类等重点生活必需品供求和价格变化情况，及时预测，及早预警。 通知要求，各地支持鼓励大型农产品流通企业与蔬菜、粮油、畜禽养殖等农产品生产基地建立紧密合作关系，签订长期供销协议；耐储蔬菜要提前采购，锁定货源，做好本地菜与客菜之间，北菜与南菜之间、设施菜与露天菜之间的梯次轮换和衔接供应；健全完备本地肉类储备规模及管理制度；北方省份要按时完成本年度冬春蔬菜储备计划，南方省份要根据自身情况建立完善蔬菜储备；及时投放肉类、蔬菜等生活必需品储备，补充市场供应。 \u0026#34;\u0026#34;\u0026#34; from cntext.visualization import wordshiftor wordshiftor(text1=text1, text2=text2, title=\u0026#39;两文本对比\u0026#39;) Run\n 6.3 textpic(title=\u0026lsquo;PYTHON测试\u0026rsquo;, subtitle=\u0026lsquo;使用Python生成图片\u0026rsquo;, font=\u0026lsquo;Alibaba-PuHuiTi-Bold.otf\u0026rsquo;, titlesize=1.8, subsize=14)  title: 主标题 subtitle: 副标题 font: 本地中文字体路径 titlesize: 主标题字体大小 subsize: 副标题字体大小  textpic(title=\u0026#39;PYTHON测试\u0026#39;, subtitle=\u0026#39;使用Python生成图片\u0026#39;, font=\u0026#39;data/Alibaba-PuHuiTi-Bold.otf\u0026#39;, titlesize=1.8, subsize=14)   注意\n 设置参数matplotlib_family，需要先运行下面代码获取本机字体列表 from matplotlib.font_manager import FontManager mpl_fonts = set(f.name for f in FontManager().ttflist) print(mpl_fonts)\n \n代码下载 https://github.com/hidadeng/cntext/tree/main/examples\n","permalink":"/blog/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90cntext/","summary":"点击上方图片购买课程   cntext 中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等\n github地址 https://github.com/hidadeng/cntext pypi地址 https://pypi.org/project/cntext/ 视频课-Python网络爬虫与文本数据分析  功能模块含\n cntext stats 文本统计,可读性等 dictionary 构建词表(典) sentiment 情感分析 similarity 文本相似度 visualization 可视化，如词云图  安装 pip install cntext==0.9 \n一、cntext 查看cntext基本信息\nimport cntext help(cntext) Run\nHelp on package cntext: NAME cntext PACKAGE CONTENTS description (package) dictionary (package) sentiment (package) similarity (package) visualization (package) DATA ADV_words = [\u0026#39;都\u0026#39;, \u0026#39;全\u0026#39;, \u0026#39;单\u0026#39;, \u0026#39;共\u0026#39;, \u0026#39;光\u0026#39;, \u0026#39;尽\u0026#39;, \u0026#39;净\u0026#39;, \u0026#39;仅\u0026#39;, \u0026#39;就\u0026#39;, \u0026#39;只\u0026#39;, \u0026#39;一共\u0026#39;, \u0026#39;.","title":"cntext中文文本分析库 |  值得收藏"},{"content":" 点击上方图片购买课程   Huggingface（抱抱脸）总部位于纽约，是一家专注于自然语言处理、人工智能和分布式系统的创业公司。他们所提供的聊天机器人技术一直颇受欢迎，但更出名的是他们在NLP开源社区上的贡献。\nHuggingface一直致力于自然语言处理NLP技术的平民化(democratize)，希望每个人都能用上最先进(SOTA, state-of-the-art)的NLP技术，而非困窘于训练资源的匮乏。\nHugging Face所有模型的地址\nhttps://huggingface.co/models\n你可以在这里下载所需要的模型，也可以上传你微调之后用于特定task的模型。\nHugging Face使用文档的地址\nhttps://huggingface.co/transformers/master/index.html\n\n英汉互译 from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, pipeline zh2en_model = AutoModelForSeq2SeqLM.from_pretrained(\u0026#39;Helsinki-NLP/opus-mt-zh-en\u0026#39;) zh2en_tokenizer = AutoTokenizer.from_pretrained(\u0026#39;Helsinki-NLP/opus-mt-zh-en\u0026#39;) zh2en_translation = pipeline(\u0026#39;translation_zh_to_en\u0026#39;, model=zh2en_model, tokenizer=zh2en_tokenizer) zh2en_translation(\u0026#39;Python是一门非常强大的编程语言!\u0026#39;) [{'translation_text': 'Python is a very powerful programming language!'}]  en2zh_model = AutoModelForSeq2SeqLM.from_pretrained(\u0026#39;Helsinki-NLP/opus-mt-en-zh\u0026#39;) en2zh_tokenizer = AutoTokenizer.from_pretrained(\u0026#39;Helsinki-NLP/opus-mt-en-zh\u0026#39;) en2zh_translation = pipeline(\u0026#39;translation_en_to_zh\u0026#39;, model=en2zh_model, tokenizer=en2zh_tokenizer) en2zh_translation(\u0026#39;Python is a very powerful programming language!\u0026#39;) [{'translation_text': 'Python是一个非常强大的编程语言!'}]  \n文本分类 模型 uer/roberta-base-finetuned-chinanews-chinese是使用5个中文文本分类数据集训练得到\n 京东full、京东binary和大众点评数据集包含不同情感极性的用户评论数据。 凤凰网 和 China Daily 包含不同主题类的新闻文本数据  from transformers import AutoModelForSequenceClassification, AutoTokenizer, pipeline model = AutoModelForSequenceClassification.from_pretrained(\u0026#39;uer/roberta-base-finetuned-chinanews-chinese\u0026#39;) tokenizer = AutoTokenizer.from_pretrained(\u0026#39;uer/roberta-base-finetuned-chinanews-chinese\u0026#39;) text_classification = pipeline(\u0026#39;sentiment-analysis\u0026#39;, model=model, tokenizer=tokenizer) test_text = \u0026#34;上证指数大涨2%\u0026#34; text_classification(test_text, return_all_scores=True) [[{'label': 'mainland China politics', 'score': 0.0002807585697155446}, {'label': 'Hong Kong - Macau politics', 'score': 0.00015504546172451228}, {'label': 'International news', 'score': 6.818029214628041e-05}, {'label': 'financial news', 'score': 0.9991051554679871}, {'label': 'culture', 'score': 0.00011297615128569305}, {'label': 'entertainment', 'score': 0.00012184812658233568}, {'label': 'sports', 'score': 0.0001558474759804085}]]  test_text = \u0026#34;Python是一门强大的编程语言\u0026#34; text_classification(test_text, return_all_scores=True) [[{'label': 'mainland China politics', 'score': 0.02050291746854782}, {'label': 'Hong Kong - Macau politics', 'score': 0.0030984438490122557}, {'label': 'International news', 'score': 0.005687597207725048}, {'label': 'financial news', 'score': 0.03360358253121376}, {'label': 'culture', 'score': 0.913349986076355}, {'label': 'entertainment', 'score': 0.010810119099915028}, {'label': 'sports', 'score': 0.012947351671755314}]]  \n代码下载 https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211108HuggingFace学习\n","permalink":"/blog/huggingface%E5%AD%A6%E4%B9%A0/","summary":"点击上方图片购买课程   Huggingface（抱抱脸）总部位于纽约，是一家专注于自然语言处理、人工智能和分布式系统的创业公司。他们所提供的聊天机器人技术一直颇受欢迎，但更出名的是他们在NLP开源社区上的贡献。\nHuggingface一直致力于自然语言处理NLP技术的平民化(democratize)，希望每个人都能用上最先进(SOTA, state-of-the-art)的NLP技术，而非困窘于训练资源的匮乏。\nHugging Face所有模型的地址\nhttps://huggingface.co/models\n你可以在这里下载所需要的模型，也可以上传你微调之后用于特定task的模型。\nHugging Face使用文档的地址\nhttps://huggingface.co/transformers/master/index.html\n\n英汉互译 from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, pipeline zh2en_model = AutoModelForSeq2SeqLM.from_pretrained(\u0026#39;Helsinki-NLP/opus-mt-zh-en\u0026#39;) zh2en_tokenizer = AutoTokenizer.from_pretrained(\u0026#39;Helsinki-NLP/opus-mt-zh-en\u0026#39;) zh2en_translation = pipeline(\u0026#39;translation_zh_to_en\u0026#39;, model=zh2en_model, tokenizer=zh2en_tokenizer) zh2en_translation(\u0026#39;Python是一门非常强大的编程语言!\u0026#39;) [{'translation_text': 'Python is a very powerful programming language!'}]  en2zh_model = AutoModelForSeq2SeqLM.from_pretrained(\u0026#39;Helsinki-NLP/opus-mt-en-zh\u0026#39;) en2zh_tokenizer = AutoTokenizer.from_pretrained(\u0026#39;Helsinki-NLP/opus-mt-en-zh\u0026#39;) en2zh_translation = pipeline(\u0026#39;translation_en_to_zh\u0026#39;, model=en2zh_model, tokenizer=en2zh_tokenizer) en2zh_translation(\u0026#39;Python is a very powerful programming language!\u0026#39;) [{'translation_text': 'Python是一个非常强大的编程语言!'}]  \n文本分类 模型 uer/roberta-base-finetuned-chinanews-chinese是使用5个中文文本分类数据集训练得到\n 京东full、京东binary和大众点评数据集包含不同情感极性的用户评论数据。 凤凰网 和 China Daily 包含不同主题类的新闻文本数据  from transformers import AutoModelForSequenceClassification, AutoTokenizer, pipeline model = AutoModelForSequenceClassification.","title":"Hugging Face | 自然语言处理平台"},{"content":"\n 点击上方图片购买课程   数据可视化是讲故事的好方法，从中可以轻松地吸收信息并识别数据中的模式。我们的一位学生决定使用 Matplotlib 在 Python 中创建数据可视化，以了解 Netflix 上可用的不同类型的内容。本文将重点介绍使用 Matplotlib 以一种有趣的方式进行数据可视化。\n在 Netflix 上看完精彩的节目或电影后，您有没有想过 Netflix 为您提供了如此多的惊人内容？当然，我并不孤单，不是吗？一个想法会导致另一个想法，在不知不觉中，您已经下定决心进行探索性数据分析，以了解更多关于最受欢迎的演员是谁以及哪个国家/地区更喜欢哪种类型的信息。\n使用 Python 制作常规的条形图和饼图，虽然它们在传达结果方面做得很好，但我想为这个项目添加一些有趣的元素。\n我最近了解到你可以在 Python 最流行的数据可视化库 Matplotlib 中创建类似 xkcd 的绘图，并决定我应该在这个项目中整理我所有的 Matplotlib 可视化，只是为了让事情变得更有趣。\n一起来看看数据怎么说吧！\n导入数据 7787部电影/TV节目的信息\nimport pandas as pd df = pd.read_csv(\u0026#34;netflix_titles.csv\u0026#34;) df.head()   Netflix历年发展里程碑 描述一下 Netflix 多年来演变的时间表。\nimport matplotlib.pyplot as plt import numpy as np plt.rcParams[\u0026#39;figure.dpi\u0026#39;] = 200 # these go on the numbers below tl_dates = [ \u0026#34;1997\\nFounded\u0026#34;, \u0026#34;1998\\nMail Service\u0026#34;, \u0026#34;2003\\nGoes Public\u0026#34;, \u0026#34;2007\\nStreaming service\u0026#34;, \u0026#34;2016\\nGoes Global\u0026#34;, \u0026#34;2021\\nNetflix \u0026amp; Chill\u0026#34; ] tl_x = [1, 2, 4, 5.3, 8, 9] # the numbers go on these tl_sub_x = [1.5,3,5,6.5,7] tl_sub_times = [ \u0026#34;1998\u0026#34;,\u0026#34;2000\u0026#34;,\u0026#34;2006\u0026#34;,\u0026#34;2010\u0026#34;,\u0026#34;2012\u0026#34; ] tl_text = [ \u0026#34;Netflix.com launched\u0026#34;, \u0026#34;Starts\\nPersonal\\nRecommendations\u0026#34;,\u0026#34;Billionth DVD Delivery\u0026#34;,\u0026#34;Canadian\\nLaunch\u0026#34;,\u0026#34;UK Launch\u0026#34;] with plt.xkcd(): # Set figure \u0026amp; Axes fig, ax = plt.subplots(figsize=(15, 4), constrained_layout=True) ax.set_ylim(-2, 1.75) ax.set_xlim(0, 10) # Timeline : line ax.axhline(0, xmin=0.1, xmax=0.9, c=\u0026#39;deeppink\u0026#39;, zorder=1) # Timeline : Date Points ax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c=\u0026#39;palevioletred\u0026#39;, zorder=2) ax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c=\u0026#39;darkmagenta\u0026#39;, zorder=3) # Timeline : Time Points ax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c=\u0026#39;darkmagenta\u0026#39;,zorder=4) # Date Text for x, date in zip(tl_x, tl_dates): ax.text(x, -0.55, date, ha=\u0026#39;center\u0026#39;, fontfamily=\u0026#39;serif\u0026#39;, fontweight=\u0026#39;bold\u0026#39;, color=\u0026#39;royalblue\u0026#39;,fontsize=12) # Stemplot : vertical line levels = np.zeros(len(tl_sub_x)) levels[::2] = 0.3 levels[1::2] = -0.3 markerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True) plt.setp(baseline, zorder=0) plt.setp(markerline, marker=\u0026#39;,\u0026#39;, color=\u0026#39;darkmagenta\u0026#39;) plt.setp(stemline, color=\u0026#39;darkmagenta\u0026#39;) # Text for idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text): ax.text(x, 1.3*(idx%2)-0.5, time, ha=\u0026#39;center\u0026#39;, fontfamily=\u0026#39;serif\u0026#39;, fontweight=\u0026#39;bold\u0026#39;, color=\u0026#39;royalblue\u0026#39;, fontsize=11) ax.text(x, 1.3*(idx%2)-0.6, txt, va=\u0026#39;top\u0026#39;, ha=\u0026#39;center\u0026#39;, fontfamily=\u0026#39;serif\u0026#39;,color=\u0026#39;royalblue\u0026#39;) # Spine for spine in [\u0026#34;left\u0026#34;, \u0026#34;top\u0026#34;, \u0026#34;right\u0026#34;, \u0026#34;bottom\u0026#34;]: ax.spines[spine].set_visible(False) # Ticks ax.set_xticks([]) ax.set_yticks([]) # Title ax.set_title(\u0026#34;Netflix through the years\u0026#34;, fontweight=\u0026#34;bold\u0026#34;, fontfamily=\u0026#39;serif\u0026#39;, fontsize=16, color=\u0026#39;royalblue\u0026#39;) ax.text(2.4,1.57,\u0026#34;From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?\u0026#34;, fontfamily=\u0026#39;serif\u0026#39;, fontsize=12, color=\u0026#39;mediumblue\u0026#39;) plt.show()   电影 vs 电视综艺 接下来，我决定看一下电影与电视节目的比例。\ncol = \u0026#34;type\u0026#34; grouped = df[col].value_counts().reset_index() grouped = grouped.rename(columns = {col : \u0026#34;count\u0026#34;, \u0026#34;index\u0026#34; : col}) with plt.xkcd(): explode = (0, 0.1) # only \u0026#34;explode\u0026#34; the 2nd slice (i.e. \u0026#39;TV Show\u0026#39;) fig1, ax1 = plt.subplots(figsize=(5, 5), dpi=100) ax1.pie(grouped[\u0026#34;count\u0026#34;], explode=explode, labels=grouped[\u0026#34;type\u0026#34;], autopct=\u0026#39;%1.1f%%\u0026#39;, shadow=True, startangle=90) ax1.axis(\u0026#39;equal\u0026#39;) # Equal aspect ratio ensures that pie is drawn as a circle. plt.show()   内容最多的国家 from collections import Counter col = \u0026#34;country\u0026#34; categories = \u0026#34;, \u0026#34;.join(df[col].fillna(\u0026#34;\u0026#34;)).split(\u0026#34;, \u0026#34;) counter_list = Counter(categories).most_common(25) counter_list = [_ for _ in counter_list if _[0] != \u0026#34;\u0026#34;] labels = [_[0] for _ in counter_list] values = [_[1] for _ in counter_list] with plt.xkcd(): fig, ax = plt.subplots(figsize=(10, 10), dpi=100) y_pos = np.arange(len(labels)) ax.barh(y_pos, values, align=\u0026#39;center\u0026#39;) ax.set_yticks(y_pos) ax.set_yticklabels(labels) ax.invert_yaxis() # labels read top-to-bottom ax.set_xlabel(\u0026#39;Content\u0026#39;) ax.set_title(\u0026#39;Countries with most content\u0026#39;) plt.show()   最流行的导演 from collections import Counter from matplotlib.pyplot import figure import math colours = [\u0026#34;orangered\u0026#34;, \u0026#34;mediumseagreen\u0026#34;, \u0026#34;darkturquoise\u0026#34;, \u0026#34;mediumpurple\u0026#34;, \u0026#34;deeppink\u0026#34;, \u0026#34;indianred\u0026#34;] countries_list = [\u0026#34;United States\u0026#34;, \u0026#34;India\u0026#34;, \u0026#34;United Kingdom\u0026#34;, \u0026#34;Japan\u0026#34;, \u0026#34;France\u0026#34;, \u0026#34;Canada\u0026#34;] col = \u0026#34;director\u0026#34; with plt.xkcd(): figure(num=None, figsize=(20, 8)) x=1 for country in countries_list: country_df = df[df[\u0026#34;country\u0026#34;]==country] categories = \u0026#34;, \u0026#34;.join(country_df[col].fillna(\u0026#34;\u0026#34;)).split(\u0026#34;, \u0026#34;) counter_list = Counter(categories).most_common(6) counter_list = [_ for _ in counter_list if _[0] != \u0026#34;\u0026#34;] labels = [_[0] for _ in counter_list][::-1] values = [_[1] for _ in counter_list][::-1] if max(values)\u0026lt;10: values_int = range(0, math.ceil(max(values))+1) else: values_int = range(0, math.ceil(max(values))+1, 2) plt.subplot(2, 3, x) plt.barh(labels,values, color = colours[x-1]) plt.xticks(values_int) plt.title(country) x+=1 plt.suptitle(\u0026#39;Popular Directors with the most content\u0026#39;) plt.tight_layout() plt.show()   Netflix 专注于什么样的内容？ 我还想浏览评级栏并比较 Netflix 为儿童、青少年和成人制作的内容量——以及这些年来他们的重点是否从一个群体转移到另一个群体。\n为此，我首先查看了 DataFrame 中的独特评级：\ndf[\u0026#34;date_added\u0026#34;] = pd.to_datetime(df[\u0026#39;date_added\u0026#39;]) df[\u0026#39;year_added\u0026#39;] = df[\u0026#39;date_added\u0026#39;].dt.year.astype(\u0026#39;Int64\u0026#39;) ratings_list = [\u0026#39;TV-MA\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;PG-13\u0026#39;, \u0026#39;TV-14\u0026#39;, \u0026#39;TV-PG\u0026#39;, \u0026#39;TV-G\u0026#39;, \u0026#39;TV-Y\u0026#39;, \u0026#39;TV-Y7\u0026#39;, \u0026#39;PG\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;NC-17\u0026#39;, \u0026#39;TV-Y7-FV\u0026#39;] ratings_group_list = [\u0026#39;Little Kids\u0026#39;, \u0026#39;Older Kids\u0026#39;, \u0026#39;Teens\u0026#39;, \u0026#39;Mature\u0026#39;] ratings_dict={ \u0026#39;TV-G\u0026#39;: \u0026#39;Little Kids\u0026#39;, \u0026#39;TV-Y\u0026#39;: \u0026#39;Little Kids\u0026#39;, \u0026#39;G\u0026#39;: \u0026#39;Little Kids\u0026#39;, \u0026#39;TV-PG\u0026#39;: \u0026#39;Older Kids\u0026#39;, \u0026#39;TV-Y7\u0026#39;: \u0026#39;Older Kids\u0026#39;, \u0026#39;PG\u0026#39;: \u0026#39;Older Kids\u0026#39;, \u0026#39;TV-Y7-FV\u0026#39;: \u0026#39;Older Kids\u0026#39;, \u0026#39;PG-13\u0026#39;: \u0026#39;Teens\u0026#39;, \u0026#39;TV-14\u0026#39;: \u0026#39;Teens\u0026#39;, \u0026#39;TV-MA\u0026#39;: \u0026#39;Mature\u0026#39;, \u0026#39;R\u0026#39;: \u0026#39;Mature\u0026#39;, \u0026#39;NC-17\u0026#39;: \u0026#39;Mature\u0026#39; } for rating_val, rating_group in ratings_dict.items(): df.loc[df.rating == rating_val, \u0026#34;rating\u0026#34;] = rating_group df[\u0026#39;rating_val\u0026#39;]=1 x=0 labels=[\u0026#39;kinda\\nless\u0026#39;, \u0026#39;not so\\nbad\u0026#39;, \u0026#39;holyshit\\nthat\\\u0026#39;s too\\nmany\u0026#39;] with plt.xkcd(): for r in ratings_group_list: grouped = df[df[\u0026#39;rating\u0026#39;]==r] year_df = grouped.groupby([\u0026#39;year_added\u0026#39;]).sum() year_df.reset_index(level=0, inplace=True) plt.plot(year_df[\u0026#39;year_added\u0026#39;], year_df[\u0026#39;rating_val\u0026#39;], color=colours[x], marker=\u0026#39;o\u0026#39;) values_int = range(2008, math.ceil(max(year_df[\u0026#39;year_added\u0026#39;]))+1, 2) plt.yticks([200, 600, 1000], labels) plt.xticks(values_int) plt.title(\u0026#39;Count of shows and movies that Netflix\\nhas been producing for different audiences\u0026#39;, fontsize=12) plt.xlabel(\u0026#39;Year\u0026#39;, fontsize=14) plt.ylabel(\u0026#39;Content Count\u0026#39;, fontsize=14) x+=1 plt.legend(ratings_group_list) plt.tight_layout() plt.show()   代码下载 https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031使用matplotlib绘制卡通化图表\n","permalink":"/blog/%E4%BD%BF%E7%94%A8matplotlib%E7%BB%98%E5%88%B6%E8%B6%85%E5%8F%AF%E7%88%B1%E8%B6%85%E8%90%8C%E5%8C%96%E7%9A%84%E5%9B%BE%E8%A1%A8/","summary":"点击上方图片购买课程   数据可视化是讲故事的好方法，从中可以轻松地吸收信息并识别数据中的模式。我们的一位学生决定使用 Matplotlib 在 Python 中创建数据可视化，以了解 Netflix 上可用的不同类型的内容。本文将重点介绍使用 Matplotlib 以一种有趣的方式进行数据可视化。\n在 Netflix 上看完精彩的节目或电影后，您有没有想过 Netflix 为您提供了如此多的惊人内容？当然，我并不孤单，不是吗？一个想法会导致另一个想法，在不知不觉中，您已经下定决心进行探索性数据分析，以了解更多关于最受欢迎的演员是谁以及哪个国家/地区更喜欢哪种类型的信息。\n使用 Python 制作常规的条形图和饼图，虽然它们在传达结果方面做得很好，但我想为这个项目添加一些有趣的元素。\n我最近了解到你可以在 Python 最流行的数据可视化库 Matplotlib 中创建类似 xkcd 的绘图，并决定我应该在这个项目中整理我所有的 Matplotlib 可视化，只是为了让事情变得更有趣。\n一起来看看数据怎么说吧！\n导入数据 7787部电影/TV节目的信息\nimport pandas as pd df = pd.read_csv(\u0026#34;netflix_titles.csv\u0026#34;) df.head()   Netflix历年发展里程碑 描述一下 Netflix 多年来演变的时间表。\nimport matplotlib.pyplot as plt import numpy as np plt.rcParams[\u0026#39;figure.dpi\u0026#39;] = 200 # these go on the numbers below tl_dates = [ \u0026#34;1997\\nFounded\u0026#34;, \u0026#34;1998\\nMail Service\u0026#34;, \u0026#34;2003\\nGoes Public\u0026#34;, \u0026#34;2007\\nStreaming service\u0026#34;, \u0026#34;2016\\nGoes Global\u0026#34;, \u0026#34;2021\\nNetflix \u0026amp; Chill\u0026#34; ] tl_x = [1, 2, 4, 5.","title":"使用matplotlib绘制超可爱超萌化的图表"},{"content":"\n 点击上方图片购买课程   有时我们希望根据 DataFrame 其他列(字段) 的值向 DataFrame 添加一列。\n虽然这听起来很简单，但如果我们尝试使用 if-else 条件来完成它可能会变得有点复杂。 值得庆幸的是，使用 numpy 两个函数np.where()、np.select() 就能实现这一需求。\n导入数据 我们有一个包含 4,000 多条 Dataquest 推文的数据集,字段包括：\n date twitter发送的日期 time 推文发送时间 tweet 推文内容 mentions 谁提到了该推文 photos 图片链接 replies_count 推文回复数 retweets_count 推文再转发数 likes_count 推文获得的点赞数  import pandas as pd import numpy as np df = pd.read_csv(\u0026#39;tweets.csv\u0026#39;) df.head()   \n问题 我们看到数据集中的photos字段是图片链接\n 如果某条记录有信息，会显示图片链接列表 如果不含图片，该字段对应的数据是空列表  我们只想查看带有图片的推文是否获得更多交互，因此我们实际上并不需要图片 URL。 让我们尝试创建一个名为 has_image 的新列，该列将包含布尔值\n 如果推文包含图像，则为 True，否则为 False。  那么我们如何创建一个has_image字段？\n\nnp.where() np.where(condition, value if condition is true, value if condition is false)\n为此，我们将使用 numpy 的内置 where() 函数。 这个函数依次接受三个参数：我们要测试的条件，如果条件为真则分配给新列的值，如果条件为假则分配给新列的值。 它看起来像这样：\ndf[\u0026#39;has_image\u0026#39;] = np.where(df[\u0026#39;photos\u0026#39;]!=\u0026#39;[]\u0026#39;, True, False) df.head()   np.select() 这种方法很好用，但如果我们新建列的值不止True、False呢？\n例如我们把likes_count 进行分类，不同取值范围定义为不同的类别\n tier_4 少于2个赞 tier_3 3-9 个赞 tier_2 10-15 个赞 tier_1 16+ 个赞  为此，我们可以使用名为 np.select() 的函数。我们将给它两个参数：一个我们的条件列表，以及一个我们想要分配给新列中每一行的值的相关列表。\n这意味着顺序很重要：如果满足条件列表中的第一个条件，则值列表中的第一个值将分配给该行的新列。如果满足第二个条件，则将分配第二个值，依此类推。\n让我们来看看它在 Python 代码中的表现：\n# create a list of our conditions conditions = [ (df[\u0026#39;likes_count\u0026#39;] \u0026lt;= 2), (df[\u0026#39;likes_count\u0026#39;] \u0026gt; 2) \u0026amp; (df[\u0026#39;likes_count\u0026#39;] \u0026lt;= 9), (df[\u0026#39;likes_count\u0026#39;] \u0026gt; 9) \u0026amp; (df[\u0026#39;likes_count\u0026#39;] \u0026lt;= 15), (df[\u0026#39;likes_count\u0026#39;] \u0026gt; 15) ] # create a list of the values we want to assign for each condition values = [\u0026#39;tier_4\u0026#39;, \u0026#39;tier_3\u0026#39;, \u0026#39;tier_2\u0026#39;, \u0026#39;tier_1\u0026#39;] # create a new column and use np.select to assign values to it using our lists as arguments df[\u0026#39;tier\u0026#39;] = np.select(conditions, values) # display updated DataFrame df.head()   \n代码下载 https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031如何在DataFrame中使用If-Else条件语句创建新列\n","permalink":"/blog/%E5%A6%82%E4%BD%95%E5%9C%A8dataframe%E4%B8%AD%E4%BD%BF%E7%94%A8if-else%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%97/","summary":"点击上方图片购买课程   有时我们希望根据 DataFrame 其他列(字段) 的值向 DataFrame 添加一列。\n虽然这听起来很简单，但如果我们尝试使用 if-else 条件来完成它可能会变得有点复杂。 值得庆幸的是，使用 numpy 两个函数np.where()、np.select() 就能实现这一需求。\n导入数据 我们有一个包含 4,000 多条 Dataquest 推文的数据集,字段包括：\n date twitter发送的日期 time 推文发送时间 tweet 推文内容 mentions 谁提到了该推文 photos 图片链接 replies_count 推文回复数 retweets_count 推文再转发数 likes_count 推文获得的点赞数  import pandas as pd import numpy as np df = pd.read_csv(\u0026#39;tweets.csv\u0026#39;) df.head()   \n问题 我们看到数据集中的photos字段是图片链接\n 如果某条记录有信息，会显示图片链接列表 如果不含图片，该字段对应的数据是空列表  我们只想查看带有图片的推文是否获得更多交互，因此我们实际上并不需要图片 URL。 让我们尝试创建一个名为 has_image 的新列，该列将包含布尔值\n 如果推文包含图像，则为 True，否则为 False。  那么我们如何创建一个has_image字段？","title":"如何在DataFrame中使用If-Else条件语句创建新列"},{"content":" 点击上方图片购买课程   动机 map和filter是处理iterable数据最好用的函数，但却让代码看起来很乱，使代码可读性大大降低。\narr = [1, 2, 3, 4, 5] #对arr筛选偶数，并对偶数乘以2 list(map(lambda x: x*2, filter(lambda x:x%2==0, arr))) [4, 8]  刚刚的iterable的例子，其实可以使用pipe库中的 | 来应用多种方法。\nfrom pipe import select, where arr = [1, 2, 3, 4, 5] list(arr |where(lambda x:x%2==0) |select(lambda x:x*2)) [4, 8]  pipe是什么？ pipe是python中的管道操作库，可以使数据分析多个步骤(函数）像管道(流水线)一样上下衔接，共同完成一个数据分析任务。\n我喜欢pipe是因为它让iterable代码变得干净整洁，可读性大大增强。后面我会通过几个案例让大家快速掌握pipe库。首先先安装pipe\n!pip3 install pipe where 对iterable中的数据进行筛选操作\nfrom pipe import where arr = [1, 2, 3, 4, 5] #把偶数筛选出来 list(arr | where(lambda x: x%2==0)) [2, 4]  select 对iterable中的数据进行某种操作\nfrom pipe import select arr = [1, 2, 3, 4, 5] #对arr中的每个数 乘以2 list(arr | select(lambda x: x*2)) [2, 4, 6, 8, 10]  现在你可能会有疑问： 为何在Python已拥有map和filter情况下， 还用pipe库中的 select和 where呢？\n因为可以使用管道在一个方法后面加入另一个方法， 加不止1次!!\nfrom pipe import select, where arr = [1, 2, 3, 4, 5] list(arr | where(lambda x: x%2==0) #筛选arr中的偶数 | select(lambda x: x*2) #对偶数乘以2 ) [4, 8]  非折叠iterable chain 对于嵌套结构的iterable数据，最难任务之一就是将其展平。\nfrom pipe import chain nested = [[1,2,[3]], [4, 5]] list((nested | chain)) [1, 2, [3], 4, 5]  即时经过上述操作， 依然不是完全展开。 为了处理深度嵌套数据， 可以使用traverse方法。\ntraverse 遍历traverse方法可以用递归的方式展开 嵌套对象。\nfrom pipe import traverse nested = [[1,2,[3]], [4, 5]] list((nested | traverse)) [1, 2, 3, 4, 5]  现在我们从抽取字典values中的列表，并将其展平\nfrom pipe import traverse, select fruits = [ {\u0026#34;name\u0026#34;: \u0026#34;apple\u0026#34;, \u0026#34;price\u0026#34;: [2, 5]}, {\u0026#34;name\u0026#34;: \u0026#34;orange\u0026#34;, \u0026#34;price\u0026#34;: 4}, {\u0026#34;name\u0026#34;: \u0026#34;grape\u0026#34;, \u0026#34;price\u0026#34;: 5} ] list(fruits | select(lambda fruit: fruit[\u0026#34;price\u0026#34;]) | traverse) [2, 5, 4, 5]  groupby 有时候，需要对列表中的数据进行分组，这可能用到groupby方法。\nfrom pipe import select, groupby list( (1, 2, 3, 4, 5, 6, 7, 8, 9) | groupby(lambda x: \u0026#34;偶数\u0026#34; if x%2==0 else \u0026#34;奇数\u0026#34;) | select(lambda x: {x[0]: list(x[1])}) ) [{'偶数': [2, 4, 6, 8]}, {'奇数': [1, 3, 5, 7, 9]}]  在上面的代码中， 我们使用groupby将数字分为奇数组和偶数组。groupby方法输出的结果如下\n[(\u0026#39;偶数\u0026#39;, \u0026lt;itertools._grouper at 0x10bd54550\u0026gt;), (\u0026#39;奇数\u0026#39;, \u0026lt;itertools._grouper at 0x10bd4d350\u0026gt;)] 接下来，使用select将元素为元组的列表转化为字典，其中\n 元组中第1位置做字典的关键词 元组中第2位置做字典的值  [{\u0026#39;偶数\u0026#39;: [2, 4, 6, 8]}, {\u0026#39;奇数\u0026#39;: [1, 3, 5, 7, 9]}] Cool！为了range值大于2， 我们在select内增加where条件操作\nfrom pipe import select, groupby list( (1, 2, 3, 4, 5, 6, 7, 8, 9) | groupby(lambda x: \u0026#34;偶数\u0026#34; if x%2==0 else \u0026#34;奇数\u0026#34;) | select(lambda x: {x[0]: list(x[1] | where(lambda x: x\u0026gt;2) ) } ) ) [{'偶数': [4, 6, 8]}, {'奇数': [3, 5, 7, 9]}]  dedup 使用Key对list数据进行去重\nfrom pipe import dedup arr = [1, 2, 2, 3, 4, 5, 6, 6, 7, 9, 3, 3, 1] list(arr | dedup) [1, 2, 3, 4, 5, 6, 7, 9]  这看起来没啥新意，毕竟python内置的set函数即可实现刚刚的需求。然而，dedup通过key获得列表中的唯一元素。\n例如，获得小于5的唯一元素， 且另一个元素大于或等于5\nfrom pipe import dedup arr = [1, 2, 2, 3, 4, 5, 6, 6, 7, 9, 3, 3, 1] list(arr | dedup(lambda key: key\u0026lt;5)) [1, 5]  from pipe import traverse, select data = [ {\u0026#34;name\u0026#34;: \u0026#34;apple\u0026#34;, \u0026#34;count\u0026#34;: 2}, {\u0026#34;name\u0026#34;: \u0026#34;orange\u0026#34;, \u0026#34;count\u0026#34;: 4}, {\u0026#34;name\u0026#34;: \u0026#34;grape\u0026#34;, \u0026#34;count\u0026#34;: None}, {\u0026#34;name\u0026#34;: \u0026#34;orange\u0026#34;, \u0026#34;count\u0026#34;: 7} ] list( data | dedup(key=lambda fruit: fruit[\u0026#34;name\u0026#34;]) | select(lambda fruit: fruit[\u0026#34;count\u0026#34;]) | where(lambda count: isinstance(count, int)) ) [2, 4]  代码下载 https://github.com/hidadeng/DaDengAndHisPython/blob/master/20211115使用pipe撰写干净的Python代码.ipynb\n","permalink":"/blog/%E4%BD%BF%E7%94%A8pipe%E6%92%B0%E5%86%99%E5%B9%B2%E5%87%80%E7%9A%84python%E4%BB%A3%E7%A0%81/","summary":"点击上方图片购买课程   动机 map和filter是处理iterable数据最好用的函数，但却让代码看起来很乱，使代码可读性大大降低。\narr = [1, 2, 3, 4, 5] #对arr筛选偶数，并对偶数乘以2 list(map(lambda x: x*2, filter(lambda x:x%2==0, arr))) [4, 8]  刚刚的iterable的例子，其实可以使用pipe库中的 | 来应用多种方法。\nfrom pipe import select, where arr = [1, 2, 3, 4, 5] list(arr |where(lambda x:x%2==0) |select(lambda x:x*2)) [4, 8]  pipe是什么？ pipe是python中的管道操作库，可以使数据分析多个步骤(函数）像管道(流水线)一样上下衔接，共同完成一个数据分析任务。\n我喜欢pipe是因为它让iterable代码变得干净整洁，可读性大大增强。后面我会通过几个案例让大家快速掌握pipe库。首先先安装pipe\n!pip3 install pipe where 对iterable中的数据进行筛选操作\nfrom pipe import where arr = [1, 2, 3, 4, 5] #把偶数筛选出来 list(arr | where(lambda x: x%2==0)) [2, 4]  select 对iterable中的数据进行某种操作","title":"让Python代码更简洁的pipe包"},{"content":" 点击上方图片购买课程   如果大家之前了解selenium库，那么antoma不用过多介绍，您就能知道ta是做浏览器自动化的。automa通过点击连接卡片实现浏览器的自动化运行。\n没有做不到，只有想不到。从自动填写表单、执行重复性任务、截取屏幕截图到抓取网站数据，您想使用此扩展程序做什么取决于您。您甚至可以安排自动化执行的时间。下面我们看一下开发者制作的操作视频\n 从视频中，大家可以看到，工作流可执行表单填写、屏幕截图、网站数据抓取等各种重复性工作。如果大家感兴趣，可以试着用一下automa。\n","permalink":"/blog/automa%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8F%92%E4%BB%B6/","summary":"点击上方图片购买课程   如果大家之前了解selenium库，那么antoma不用过多介绍，您就能知道ta是做浏览器自动化的。automa通过点击连接卡片实现浏览器的自动化运行。\n没有做不到，只有想不到。从自动填写表单、执行重复性任务、截取屏幕截图到抓取网站数据，您想使用此扩展程序做什么取决于您。您甚至可以安排自动化执行的时间。下面我们看一下开发者制作的操作视频\n 从视频中，大家可以看到，工作流可执行表单填写、屏幕截图、网站数据抓取等各种重复性工作。如果大家感兴趣，可以试着用一下automa。","title":"automa插件|无编程基础也可自动化办公"},{"content":" 点击上方图片购买课程   尽管已经有很多方法可用于关键字生成（例如，Rake、YAKE!、TF-IDF 等），但我想创建一个非常基本但功能强大的方法来提取关键字和关键短语。这就是 KeyBERT 的用武之地！它使用 BERT 嵌入 和 简单余弦相似度 来查找文档中与文档本身最相似的短语。\nKeyBERT步骤\n 首先使用 BERT 提取文档嵌入以获得文档级向量表示。 随后，为 N-gram 词/短语提取词向量。 然后，我们使用余弦相似度来找到与文档最相似的单词/短语。 最后可以将最相似的词识别为最能描述整个文档的词。  安装 !pip3 install keybert==0.5.0 \n初始化模型 KeyBERT库需要安装配置spacy语言模型\n具体参考公众号：大邓和他的Python 2021-10-29 的推文 查看spacy配置方法\n初始化模型\nfrom keybert import KeyBERT import spacy import jieba zh_model = spacy.load(\u0026#34;zh_core_web_sm\u0026#34;) bertModel = KeyBERT(model=zh_model) \n准备数据 中文测试数据需要先分词，而后构造成类英文的语言结构(用空格间隔的文本)\n# 测试数据 doc = \u0026#34;\u0026#34;\u0026#34;时值10月25日抗美援朝纪念日，《长津湖》片方发布了“纪念中国人民志愿军抗美援朝出国作战71周年特别短片”，再次向伟大的志愿军致敬！ 电影《长津湖》全情全景地还原了71年前抗美援朝战场上那场史诗战役，志愿军奋不顾身的英勇精神令观众感叹：“岁月峥嵘英雄不灭，丹心铁骨军魂永存！”影片上映以来票房屡创新高，目前突破53亿元，暂列中国影史票房总榜第三名。 值得一提的是，这部影片的很多主创或有军人的血脉，或有当兵的经历，或者家人是军人。提起这些他们也充满自豪，影片总监制黄建新称：“当兵以后会有一种特别能坚持的劲儿。”饰演雷公的胡军透露：“我父亲曾经参加过抗美援朝，还得了一个三等功。”影片历史顾问王树增表示：“我当了五十多年的兵，我的老部队就是上甘岭上下来的，那些老兵都是我的偶像。” “身先士卒卫华夏家国，血战无畏护山河无恙。”片中饰演七连连长伍千里的吴京感叹：“要永远记住这些先烈们，他们给我们带来今天的和平。感谢他们的付出，才让我们有今天的幸福生活。”饰演新兵伍万里的易烊千玺表示：“战争的残酷、碾压式的伤害，其实我们现在的年轻人几乎很难能体会到，希望大家看完电影后能明白，是那些先辈们的牺牲奉献，换来了我们的现在。” 影片对战争群像的恢弘呈现，对个体命运的深切关怀，令许多观众无法控制自己的眼泪，观众称：“当看到影片中的惊险战斗场面，看到英雄们壮怀激烈的拼杀，为国捐躯的英勇无畏和无悔付出，我明白了为什么说今天的幸福生活来之不易。”（记者 王金跃） \u0026#34;\u0026#34;\u0026#34; doc = \u0026#39; \u0026#39;.join(jieba.lcut(doc)) # 关键词提取 keywords = bertModel.extract_keywords(doc, keyphrase_ngram_range=(1, 1), stop_words=None, top_n=10) keywords [('铁骨', 0.5028), ('纪念日', 0.495), ('丹心', 0.4894), ('战役', 0.4869), ('影史', 0.473), ('父亲', 0.4576), ('票房', 0.4571), ('偶像', 0.4497), ('精神', 0.4436), ('家国', 0.4373)]  常用extract_keywords参数 bertModel.extract_keywords(docs, keyphrase_ngram_range, stop_words, top_n)\n docs 文档字符串（空格间隔词语的字符串） keyphrase_ngram_range 设置ngram，默认(1, 1) stop_words 停用词列表 top_n 显示前n个关键词，默认5 highlight 可视化标亮关键词，默认False use_maxsum: 默认False;是否使用Max Sum Similarity作为关键词提取标准， use_mmr: 默认False;是否使用Maximal Marginal Relevance (MMR) 作为关键词提取标准 diversity 如果use_mmr=True，可以设置该参数。参数取值范围从0到1  对于keyphrase_ngram_range参数，\n (1, 1) 只单个词， 如\u0026quot;抗美援朝\u0026quot;, \u0026ldquo;纪念日\u0026quot;是孤立的两个词 (2, 2) 考虑词组， 如出现有意义的词组 \u0026ldquo;抗美援朝 纪念日\u0026rdquo; (1, 2) 同时考虑以上两者情况  # 关键词提取 keywords = bertModel.extract_keywords(doc, keyphrase_ngram_range=(2, 2), stop_words=None, diversity=0.7, top_n=10) keywords [('影片 总监制', 0.5412), ('丹心 铁骨', 0.5339), ('抗美援朝 纪念日', 0.5295), ('长津湖 片方', 0.5252), ('志愿军 致敬', 0.5207), ('老兵 偶像', 0.5192), ('票房 创新', 0.5108), ('军人 血脉', 0.5084), ('家国 血战', 0.4946), ('家人 军人', 0.4885)]  #可视化 keywords = bertModel.extract_keywords(doc, keyphrase_ngram_range=(2, 2), stop_words=None, highlight=True, top_n=10)   # 关键词提取 keywords = bertModel.extract_keywords(doc, keyphrase_ngram_range=(2, 2), stop_words=None, use_mmr=True, diversity=0.05, top_n=10) keywords [('影片 总监制', 0.5412), ('长津湖 片方', 0.5252), ('抗美援朝 纪念日', 0.5295), ('丹心 铁骨', 0.5339), ('志愿军 致敬', 0.5207), ('老兵 偶像', 0.5192), ('票房 创新', 0.5108), ('军人 血脉', 0.5084), ('家国 血战', 0.4946), ('家人 军人', 0.4885)]  英文KeyBERT 同样需要配置spacy，参考公众号：大邓和他的Python 2021-10-29 的推文 查看spacy配置方法\nfrom keybert import KeyBERT import spacy en_model = spacy.load(\u0026#34;en_core_web_sm\u0026#34;) doc = \u0026#34;\u0026#34;\u0026#34; Supervised learning is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. It infers a function from labeled training data consisting of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a \u0026#39;reasonable\u0026#39; way (see inductive bias). \u0026#34;\u0026#34;\u0026#34; kw_model = KeyBERT() keywords = kw_model.extract_keywords(doc, keyphrase_ngram_range=(1, 2)) keywords Run\n[('supervised learning', 0.6779), ('supervised', 0.6676), ('signal supervised', 0.6152), ('examples supervised', 0.6112), ('labeled training', 0.6013)]  代码下载 https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211030KeyBERT关键词提取\n","permalink":"/blog/keybert%E5%85%B3%E9%94%AE%E8%AF%8D%E5%8F%91%E7%8E%B0/","summary":"点击上方图片购买课程   尽管已经有很多方法可用于关键字生成（例如，Rake、YAKE!、TF-IDF 等），但我想创建一个非常基本但功能强大的方法来提取关键字和关键短语。这就是 KeyBERT 的用武之地！它使用 BERT 嵌入 和 简单余弦相似度 来查找文档中与文档本身最相似的短语。\nKeyBERT步骤\n 首先使用 BERT 提取文档嵌入以获得文档级向量表示。 随后，为 N-gram 词/短语提取词向量。 然后，我们使用余弦相似度来找到与文档最相似的单词/短语。 最后可以将最相似的词识别为最能描述整个文档的词。  安装 !pip3 install keybert==0.5.0 \n初始化模型 KeyBERT库需要安装配置spacy语言模型\n具体参考公众号：大邓和他的Python 2021-10-29 的推文 查看spacy配置方法\n初始化模型\nfrom keybert import KeyBERT import spacy import jieba zh_model = spacy.load(\u0026#34;zh_core_web_sm\u0026#34;) bertModel = KeyBERT(model=zh_model) \n准备数据 中文测试数据需要先分词，而后构造成类英文的语言结构(用空格间隔的文本)\n# 测试数据 doc = \u0026#34;\u0026#34;\u0026#34;时值10月25日抗美援朝纪念日，《长津湖》片方发布了“纪念中国人民志愿军抗美援朝出国作战71周年特别短片”，再次向伟大的志愿军致敬！ 电影《长津湖》全情全景地还原了71年前抗美援朝战场上那场史诗战役，志愿军奋不顾身的英勇精神令观众感叹：“岁月峥嵘英雄不灭，丹心铁骨军魂永存！”影片上映以来票房屡创新高，目前突破53亿元，暂列中国影史票房总榜第三名。 值得一提的是，这部影片的很多主创或有军人的血脉，或有当兵的经历，或者家人是军人。提起这些他们也充满自豪，影片总监制黄建新称：“当兵以后会有一种特别能坚持的劲儿。”饰演雷公的胡军透露：“我父亲曾经参加过抗美援朝，还得了一个三等功。”影片历史顾问王树增表示：“我当了五十多年的兵，我的老部队就是上甘岭上下来的，那些老兵都是我的偶像。” “身先士卒卫华夏家国，血战无畏护山河无恙。”片中饰演七连连长伍千里的吴京感叹：“要永远记住这些先烈们，他们给我们带来今天的和平。感谢他们的付出，才让我们有今天的幸福生活。”饰演新兵伍万里的易烊千玺表示：“战争的残酷、碾压式的伤害，其实我们现在的年轻人几乎很难能体会到，希望大家看完电影后能明白，是那些先辈们的牺牲奉献，换来了我们的现在。” 影片对战争群像的恢弘呈现，对个体命运的深切关怀，令许多观众无法控制自己的眼泪，观众称：“当看到影片中的惊险战斗场面，看到英雄们壮怀激烈的拼杀，为国捐躯的英勇无畏和无悔付出，我明白了为什么说今天的幸福生活来之不易。”（记者 王金跃） \u0026#34;\u0026#34;\u0026#34; doc = \u0026#39; \u0026#39;.join(jieba.lcut(doc)) # 关键词提取 keywords = bertModel.","title":"KeyBERT | 关键词发现"},{"content":" 点击上方图片购买课程   BERTopic 是一种主题建模技术，它利用 Transformer 和 c-TF-IDF 来创建密集的集群，允许轻松解释主题，同时在主题描述中保留重要词。\nBERTopic亮点\n 支持引导式Guided 支持（半）监督式 支持动态主题。 支持可视化  python3.7Ok， 3.8、3.9有问题,暂时无解。 https://github.com/MaartenGr/BERTopic/issues/392\n安装 !pip3 install bertopic==0.9.3 准备数据 这里使用的新闻数据集， 共2000条。 新闻类别涵 '娱乐', '教育', '游戏', '财经', '时政', '时尚', '科技', '体育', '家居', '房产' 这里假设大家不知道有10类新闻题材， 构建模型的时候不会用到label字段的数据。\nimport pandas as pd df = pd.read_csv(\u0026#39;data/cnews.csv\u0026#39;) df.head()   # 新闻题材 print(df.label.unique()) #记录数 print(len(df)) ['娱乐' '教育' '游戏' '财经' '时政' '时尚' '科技' '体育' '家居' '房产'] 2000  这里定义了一个清洗数据函数clean_text，需要注意BERTopic需要先将中文分词改造成类似英文文本格式（用空格间隔词语）\nimport re import jieba stoptext = open(\u0026#39;data/stopwords.txt\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read() stopwords = stoptext.split(\u0026#39;\\n\u0026#39;) def clean_text(text): words = jieba.lcut(text) words = [w for w in words if w not in stopwords] return \u0026#39; \u0026#39;.join(words) test = \u0026#34;云南永善县级地震已致人伤间民房受损中新网月日电据云南昭通市防震减灾局官方网站消息截至日时云南昭通永善县级地震已造成人受伤其中重伤人轻伤人已全部送医院救治民房受损户间倒塌户间个乡镇所学校不同程度受损目前被损毁电力交通通讯设施已全部抢通修复当地已调拨帐篷顶紧急转移万人月日时分云南昭通永善县发生里氏级地震震源深度公里当地震感强烈此外成都等四川多地也有明显震感\u0026#34; clean_text(test) '云南 永善县 级 地震 已致 伤间 民房 受损 中新网 月 日电 云南 昭通市 防震 减灾 局 官方网站 消息 截至 日时 云南 昭通 永善县 级 地震 受伤 重伤 轻伤 送 医院 救治 民房 受损 户间 倒塌 户间 乡镇 学校 程度 受损 损毁 电力 交通 通讯 设施 抢通 修复 当地 调拨 帐篷 紧急 转移 万人 月 日 时分 云南 昭通 永善县 发生 里氏 级 地震 震源 深度 公里 当地 震感 成都 四川 多地 震感'  对2000条数据进行clean_text，得到的结果存储到content字段中。\n我的macbook内存16G, 运行时间10s\ndf[\u0026#39;content\u0026#39;] = df[\u0026#39;text\u0026#39;].apply(clean_text) df.head()   训练Topic模型 文本分析步骤包括构建特征工程和训练，在本文中，直接使用spacy的中文词向量，省去了特征模型的学习时间。\n但这里需要\n 安装spacy 下载\u0026amp;安装zh_core_web_sm中文词向量模型  具体配置方法请看【公众号: 大邓和他的Python】2021年10月29日 的推文 建议收藏 | nltk和spacy配置方法\nfrom bertopic import BERTopic import spacy zh_model = spacy.load(\u0026#34;zh_core_web_sm\u0026#34;) topic_model = BERTopic(language=\u0026#34;chinese (simplified)\u0026#34;, embedding_model=zh_model, calculate_probabilities=True, verbose=True) docs = df[\u0026#39;content\u0026#39;].tolist() #2000条进行fit_transform需要1min topics, probs = topic_model.fit_transform(docs) 100%|██████████| 2000/2000 [01:31\u0026lt;00:00, 21.91it/s] 2021-10-28 12:11:25,583 - BERTopic - Transformed documents to Embeddings 2021-10-28 12:11:34,582 - BERTopic - Reduced dimensionality with UMAP 2021-10-28 12:11:34,718 - BERTopic - Clustered UMAP embeddings with HDBSCAN CPU times: user 1min 50s, sys: 7.7 s, total: 1min 57s Wall time: 1min 43s  \n主题模型方法  topic_model.get_topic_info 查看各主题信息 topic_model.find_topics(term, top_n=5) 查找term最有可能所属话题 topic_model.get_topic(0) 查看Topic 0的特征词 topic_model.visualize_topics() 话题间距离的可视化 topic_model.visualize_distribution(probs[0]) 查看某条文本的主题分布 topic_model.visualize_hierarchy(top_n_topics=20) 主题层次聚类可视化 topic_model.visualize_barchart(top_n_topics=6) 主题词条形图可视化 topic_model.visualize_heatmap(n_clusters=10) 主题相似度热力图 topic_model.visualize_term_rank() 可视化词语 topic_model.save() 保存主题模型  topic_model.get_topic_info()   similar_topics, similarity = topic_model.find_topics(\u0026#34;美国\u0026#34;, top_n=5) similar_topics [0, 3, 1, 2, -1]  topic_model.get_topic(0) [('中国', 0.017740927481291097), ('美国', 0.009187523853389844), ('国际', 0.007387509919710244), ('北京', 0.006355315208051378), ('台湾', 0.004591519972746738), ('上海', 0.00398117373168178), ('电影', 0.003959013801339396), ('文化', 0.003635760343311582), ('主持人 韩悦', 0.003598325963444241), ('全球', 0.0034710750361063997)]  topic_model.visualize_topics()   visualize_topics 显示第一条新闻的主题概率分布\ntopic_model.visualize_distribution(probs[0])   为了理解主题的潜在层次结构，我们可以使用 scipy.cluster.hierarchy 创建聚类并可视化它们之间的关系。 这有助于合并相似主题，达到降低主题模型主题数量nr_topics。\ntopic_model.visualize_hierarchy(top_n_topics=20)   topic_model.visualize_barchart(top_n_topics=6, width = 1000, height= 800)   BERTopic可将主题以embeddings形式（向量）表示， 因此我们可以应用余弦相似度来创建相似度矩阵。 每两两主题可进行余弦计算，最终结果将是一个矩阵，显示主题间的相似程度。\ntopic_model.visualize_heatmap(n_clusters=10, width=1000, height=1000)   通过根据每个主题表示的 c-TF-IDF 分数创建条形图来可视化主题的选定词语。 从主题之间和主题内的相对 c-TF-IDF 分数中获得见解。 此外，可以轻松地将主题表示相互比较。\ntopic_model.visualize_term_rank()   更新主题模型 当您训练了一个模型并查看了代表它们的主题和单词时，您可能对表示不满意。 也许您忘记删除停用词，或者您想尝试不同的 n_gram_range。 我们可以使用函数 update_topics 使用 c-TF-IDF 的新参数更新主题表示。\n经过更新，topic_model得到了更新，\ntopic_model.update_topics(df.content.tolist(), topics, n_gram_range=(1, 3)) similar_topics, similarity = topic_model.find_topics(\u0026#34;儿童\u0026#34;, top_n=5) similar_topics [11, 4, 7, -1, 2]  topic_model.get_topic(11) [('学生', 0.015023352605066086), ('儿童', 0.010260062682561771), ('投资', 0.00907917809925075), ('投资 移民', 0.008539711279754461), ('海外', 0.007267950590362874), ('学校', 0.006227402241189809), ('奖学金', 0.005431476690391167), ('留学人员', 0.00520544712332708), ('教师', 0.004945988616826368), ('联邦', 0.00465078395869278)]  # Save model #model.save(\u0026#34;my_model\u0026#34;) # Load model #my_model = BERTopic.load(\u0026#34;my_model\u0026#34;) \n压缩主题数 new_topics, new_probs = topic_model.reduce_topics(docs, topics, probs, nr_topics=10) 2021-10-28 12:28:01,976 - BERTopic - Reduced number of topics from 20 to 11  下载代码数据 https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211029BERTopic主题模型\n总结 本文使用中文文本数据展示BERTopic部分功能，如果对英文数据感兴趣，可以前往 https://github.com/MaartenGr/BERTopic 深入学习。\n","permalink":"/blog/bertopic%E4%B8%BB%E9%A2%98%E5%BB%BA%E6%A8%A1/","summary":"点击上方图片购买课程   BERTopic 是一种主题建模技术，它利用 Transformer 和 c-TF-IDF 来创建密集的集群，允许轻松解释主题，同时在主题描述中保留重要词。\nBERTopic亮点\n 支持引导式Guided 支持（半）监督式 支持动态主题。 支持可视化  python3.7Ok， 3.8、3.9有问题,暂时无解。 https://github.com/MaartenGr/BERTopic/issues/392\n安装 !pip3 install bertopic==0.9.3 准备数据 这里使用的新闻数据集， 共2000条。 新闻类别涵 '娱乐', '教育', '游戏', '财经', '时政', '时尚', '科技', '体育', '家居', '房产' 这里假设大家不知道有10类新闻题材， 构建模型的时候不会用到label字段的数据。\nimport pandas as pd df = pd.read_csv(\u0026#39;data/cnews.csv\u0026#39;) df.head()   # 新闻题材 print(df.label.unique()) #记录数 print(len(df)) ['娱乐' '教育' '游戏' '财经' '时政' '时尚' '科技' '体育' '家居' '房产'] 2000  这里定义了一个清洗数据函数clean_text，需要注意BERTopic需要先将中文分词改造成类似英文文本格式（用空格间隔词语）\nimport re import jieba stoptext = open(\u0026#39;data/stopwords.","title":"BERTopic 主题建模库 | 建议收藏  "},{"content":" 点击上方图片购买课程   以往对比两个文本数据差异，比较简单的技术实现方法是生成两文个词云图，但是词云图无法直观显示词语层面的权重。\nShifterator包提供了构建词移图的功能，垂直条形图可以量化哪些词会导致两个文本之间的成对差异以及它们如何起作用。 通过允许您查看单词使用方式的变化，单词转换可帮助您对情绪、熵和分歧进行分析，这些分析从根本上来说更具可解释性。\nShifterator亮点：\n 提供可解释的工具，用于将文本作为数据处理并映射出两个文本相似性或差异性 实现常见的文本比较度量，包括相对频率、香农熵、Tsallis熵、Kullback-Leibler散度和 Jensen-Shannon 散度。 基于字典的情绪分析方法计算的加权平均值。 在研究初期可用于诊断数据、感知测量误差。  计算社会科学家、数字人文主义者和其他文本分析从业者都可以使用 Shifterator 从文本数据构建可靠、稳健和可解释的故事。\n安装 !pip3 install shifterator==0.2.2 \n导入数据 准备的外卖csv数据，含label和review两个字段。\n其中label是好评差评的标注，\n 0为差评， 1为好评  import pandas as pd reviews_df = pd.read_csv(\u0026#34;data/WaiMai8k.csv\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) reviews_df.head()   有个疑问，外卖好差评中的用词有什么差异(区别/特点)？\n准备两组文本数据 shifterator需要两组文本数据，格式为长度相同的词频统计字典。\n按照label类别，将数据整理为两个文本数据。在准备的过程中，我们需要做一些清洗操作\n 清除非中文字符，如网址、邮箱、标点符号 清除信息量比较低的停用词  import collections import jieba import re texts_neg = reviews_df[reviews_df[\u0026#39;label\u0026#39;]==0][\u0026#39;review\u0026#39;].tolist() texts_pos = reviews_df[reviews_df[\u0026#39;label\u0026#39;]==1][\u0026#39;review\u0026#39;].tolist() def clean_text(docs): \u0026#34;\u0026#34;\u0026#34;清洗文本中的非中文字符、停用词，返回词频统计结果 docs : 待处理的文档列表 \u0026#34;\u0026#34;\u0026#34; stop_words = open(\u0026#39;data/stopwords.txt\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read().split(\u0026#39;\\n\u0026#39;) text = \u0026#34;\u0026#34;.join(docs) text = \u0026#34;\u0026#34;.join(re.findall(\u0026#34;[\\u4e00-\\u9fa5]+\u0026#34;, text)) words = jieba.lcut(text) words = [w for w in words if w not in stop_words] wordfreq_dict = collections.Counter(words) return wordfreq_dict clean_texts_neg = clean_text(texts_neg) clean_texts_pos = clean_text(texts_pos) \n无聊的传统绘图 使用条形图、词云图绘制，为了缩小代码量，这里只绘制差评数据。需要注意的是matplotlib不显示中文，这里需要先使用下面三行代码获取电脑中自带的中文字体列表mpl_fonts，\nfrom matplotlib.font_manager import FontManager mpl_fonts = set(f.name for f in FontManager().ttflist) print(mpl_fonts) 经过运行，我的电脑mpl_fonts里有Arial Unicode MS ，后面用matplotlib显示中文的地方，我都使用该字体。\n#准备DataFrame数据 common_neg = pd.DataFrame(clean_texts_neg.most_common(15), columns=[\u0026#39;words\u0026#39;, \u0026#39;count\u0026#39;]) common_pos = pd.DataFrame(clean_texts_pos.most_common(15), columns=[\u0026#39;words\u0026#39;, \u0026#39;count\u0026#39;]) from matplotlib import pyplot as plt import seaborn as sns import matplotlib sns.set(font_scale=1.5) sns.set_style(\u0026#34;whitegrid\u0026#34;) #为了显示中文 matplotlib.rc(\u0026#34;font\u0026#34;, family=\u0026#39;Arial Unicode MS\u0026#39;) fig, ax = plt.subplots(figsize=(16, 8)) #绘制水平条形图 common_neg.sort_values(by=\u0026#39;count\u0026#39;).plot.barh(x=\u0026#39;words\u0026#39;, y=\u0026#39;count\u0026#39;, ax=ax, color=\u0026#34;red\u0026#34;) ax.set_title(\u0026#34;外卖差评常见词\u0026#34;) plt.show()   绘制词云图，这里使用的pyecharts包。由于该包作者更新强度比较大，为了保证日后本教程仍可正常运行，这里提供当前我使用的pyecharts相关的版本，大家可以运行下面代码保证运行出正确结果\n!pip3 install pyecharts==1.6.2 !pip3 install pyecharts-javascripthon==0.0.6 !pip3 install pyecharts-jupyter-installer==0.0.3 !pip3 install pyecharts-snapshot==0.2.0 import pyecharts.options as opts from pyecharts.charts import WordCloud from pyecharts.globals import CurrentConfig, NotebookType CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_NOTEBOOK wordfreqs = [(w, str(f)) for w,f in dict(clean_texts_neg).items()] wc = WordCloud() wc.add(series_name=\u0026#34;\u0026#34;, data_pair=wordfreqs, word_size_range=[20, 100]) wc.set_global_opts(title_opts=opts.TitleOpts(title=\u0026#34;外卖差评词云图\u0026#34;, title_textstyle_opts=opts.TextStyleOpts(font_size=23)), tooltip_opts=opts.TooltipOpts(is_show=True)) wc.load_javascript() wc.render_notebook()   使用Shifterator绘制词移图 终于要用到 Shifterator 包了！ 我们可以使用这个包根据频率和情绪（或其他值）比较负面和正面的外卖评论，这里我只计算了频率作为权重\n熵移图Entropy shift 第一幅图是entropy shift graph\n具体信息请查看文档 https://github.com/ryanjgallagher/shifterator\nfrom shifterator import EntropyShift import matplotlib matplotlib.rc(\u0026#34;font\u0026#34;, family=\u0026#39;Arial Unicode MS\u0026#39;) entropy_shift = EntropyShift(type2freq_1=clean_texts_neg, type2freq_2=clean_texts_pos, base=2) entropy_shift.get_shift_graph(title=\u0026#39;外卖差评 vs 外卖好评\u0026#39;)   看起来最能决定外卖差评的用语是配送时间，其次才是口味。\n最能决定外卖好评的似乎是口味，其次才是配送时间。\n通过Shifterator我们能够看出不同词在不同文本中的作用程度。需要注意的是，我们只使用了最高的前15词频，所以显示的词有些少\n总结 希望本文能对你的研究有帮助，代码下载地址\nhttps://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator学习\n代码撰写调试不易，希望帮忙转载\n ","permalink":"/blog/shifterator%E5%AD%A6%E4%B9%A0md/","summary":"点击上方图片购买课程   以往对比两个文本数据差异，比较简单的技术实现方法是生成两文个词云图，但是词云图无法直观显示词语层面的权重。\nShifterator包提供了构建词移图的功能，垂直条形图可以量化哪些词会导致两个文本之间的成对差异以及它们如何起作用。 通过允许您查看单词使用方式的变化，单词转换可帮助您对情绪、熵和分歧进行分析，这些分析从根本上来说更具可解释性。\nShifterator亮点：\n 提供可解释的工具，用于将文本作为数据处理并映射出两个文本相似性或差异性 实现常见的文本比较度量，包括相对频率、香农熵、Tsallis熵、Kullback-Leibler散度和 Jensen-Shannon 散度。 基于字典的情绪分析方法计算的加权平均值。 在研究初期可用于诊断数据、感知测量误差。  计算社会科学家、数字人文主义者和其他文本分析从业者都可以使用 Shifterator 从文本数据构建可靠、稳健和可解释的故事。\n安装 !pip3 install shifterator==0.2.2 \n导入数据 准备的外卖csv数据，含label和review两个字段。\n其中label是好评差评的标注，\n 0为差评， 1为好评  import pandas as pd reviews_df = pd.read_csv(\u0026#34;data/WaiMai8k.csv\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) reviews_df.head()   有个疑问，外卖好差评中的用词有什么差异(区别/特点)？\n准备两组文本数据 shifterator需要两组文本数据，格式为长度相同的词频统计字典。\n按照label类别，将数据整理为两个文本数据。在准备的过程中，我们需要做一些清洗操作\n 清除非中文字符，如网址、邮箱、标点符号 清除信息量比较低的停用词  import collections import jieba import re texts_neg = reviews_df[reviews_df[\u0026#39;label\u0026#39;]==0][\u0026#39;review\u0026#39;].tolist() texts_pos = reviews_df[reviews_df[\u0026#39;label\u0026#39;]==1][\u0026#39;review\u0026#39;].tolist() def clean_text(docs): \u0026#34;\u0026#34;\u0026#34;清洗文本中的非中文字符、停用词，返回词频统计结果 docs : 待处理的文档列表 \u0026#34;\u0026#34;\u0026#34; stop_words = open(\u0026#39;data/stopwords.","title":"Shifterator库 | 词移图分辨两文本用词风格差异"},{"content":" 点击上方图片购买课程   代码下载 点击此处下载代码\n 原文链接 https://towardsdatascience.com/shap-explain-any-machine-learning-model-in-python-24207127cad7\n  想象一下，你正试图训练一个机器学习模型来预测广告是否被特定的人点击。在收到关于某人的一些信息后，模型预测某人会不会点击广告。\n 但是为什么模型会输出这样的预测结果呢？ 每个特征对预测的贡献有多大？ 如果您能看到一个图表，显示每个特征对预测的贡献程度，如下所示，不是很好吗？\n Shapley值就能起到特征权重测度的作用。\nShapley值是什么？ Shapley值是博弈论中使用的一种方法，它涉及公平地将收益和成本分配给在联盟中工作的行动者。 由于每个行动者对联盟的贡献是不同的，Shapley值保证每个行动者根据贡献的多少获得公平的份额。\n 小案例 Shapley值被广泛地应用于求解群体中每个工人(特征)的贡献问题。要理解Shapley值的作用，让我们想象一下贵公司刚刚做了A/B测试，他们在测试广告策略的不同组合。\n每个策略在特定月份的收入是：\n 无广告：150美元 社交媒体：300美元 谷歌广告：200美元 电子邮件营销：350美元 社交媒体和谷歌广告：320美元 社交媒体和电子邮件营销：400美元 谷歌广告和电子邮件营销：350美元 电子邮件营销，谷歌广告和社交媒体：450美元   使用三则广告与不使用广告的收入相差300美元，每则广告对这一差异有多大的贡献?\n 我们可以通过计算每一类广告的Shapley值来计算谷歌广告对公司收入的总贡献入手，通过公式可以计算出Google广告的总贡献：\n 让我们找到Google广告的边际贡献及其权重。\n寻找谷歌广告的边际贡献 第一，我们将发现谷歌广告对以下群体的边际贡献：\n 无广告 谷歌广告+社交媒体 谷歌广告+电子邮件营销 谷歌广告+电子邮件营销+社交媒体   Google广告 对 无广告 的边际贡献是：\n 谷歌广告 对 谷歌广告\u0026amp;社交媒体组合 的边际贡献是：\n 谷歌广告 对 谷歌广告\u0026amp;电子邮件营销组合 的边际贡献是：\n 谷歌广告 对 谷歌广告、电子邮件营销和社交媒体组合 的边际贡献是：\n 发现权重 为了发现权重，我们将把不同广告策略的组合组织成如下多个层次，每个层次对应于每个组合中广告策略的数量。\n然后根据每个层次的边数分配权重，我们看到了这一点：\n 第一级包含3条边，因此每个边的权重为1/3 第二级包含6条边，因此每条边的权重将为1/6 第三级包含3条边，因此每条边的权重将为1/3   发现Google广告的总贡献 根据前面的权重和边际贡献，我们已经可以找到Google广告的总贡献!\n  酷!所以谷歌广告在使用3种广告策略与不使用广告的总收入差异中贡献了36.67美元。36.67是Google广告的Shapey值。\n 重复以上步骤，对于另外两种广告策略，我们可以看出：\n  电子邮件营销贡献151.67美元\n  社交媒体贡献116.67美元\n  谷歌广告贡献36.67美元\n   他们共同出资300美元，用于使用3种不同类型的广告与不使用广告的区别!挺酷的，不是吗? 既然我们理解了Shapley值，那么让我们看看如何使用它来解释机器学习模型。\nSHAP-在Python中解释机器学习模型 SHAP是一个Python库，它使用Shapley值来解释任何机器学习模型的输出。\n安装SHAP\n!pip3 install shap 训练模型 为了理解SHAP工作原理，我们使用Kaggle平台内的advertising广告数据集。\nimport pandas as pd df = pd.read_csv(\u0026#34;advertising.csv\u0026#34;) df.head()   我们将建立一个机器学习模型, 该模型根据用户个人特质信息来预测其是否点击广告。\n我们使用Patsy将DataFrame转换为一组特征和一组目标值：\nfrom patsy import dmatrices from sklearn.model_selection import train_test_split y, X = dmatrices( \u0026#34;clicked_on_ad ~ daily_time_spent_on_site + age + area_income + daily_internet_usage + male -1\u0026#34;, data=df, ) X_frame = pd.DataFrame(data=X, columns=X.design_info.column_names) 把数据分为测试集和训练接\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7) 接下来使用XGBoost训练模型，并做预测\nimport xgboost model = xgboost.XGBClassifier().fit(X_train, y_train) y_predicted = model.predict(X_test) 为了查看模型表现，我们使用F1得分\nfrom sklearn.metrics import f1_score f1 = f1_score(y_test, y_predicted) f1 0.9619047619047619  太好了!\n解释该模型 该模型很好地预测了用户是否点击广告。但它是如何得出这样的预测的? 每个特征对最终预测与平均预测的差异贡献了多少?\n注意，这个问题与我们在文章开头论述的问题非常相似。\n因此，寻找每个特征的Shapley值可以帮助我们确定它们的贡献。得到特征i的重要性的步骤与之前类似，其中i是特征的索引：\n 获取所有不包含特征i的子集 找出特征i对这些子集中每个子集的边际贡献 聚合所有边际贡献来计算特征i的贡献  若要使用SHAP查找Shapley值，只需将训练好的模型插入shap.Explainer\nimport shap explainer = shap.Explainer(model) shap_values = explainer(X_frame) ntree_limit is deprecated, use `iteration_range` or model slicing instead.  SHAP瀑布图 可视化第一个预测的解释：\n#第一条记录是未点击 shap.plots.waterfall(shap_values[0])   啊哈!现在我们知道每个特征对第一次预测的贡献。对上图的解释：\n  蓝色条显示某一特定特征在多大程度上降低了预测的值。 红条显示了一个特定的特征在多大程度上增加了预测值。 负值意味着该人点击广告的概率小于0.5  我们应该期望总贡献等于预测与均值预测的差值。我们来验证一下：\n 酷!他们是平等的。\n可视化第二个预测的解释：\n#第二条记录也是未点击 shap.plots.waterfall(shap_values[1])   SHAP摘要图 我们可以使用SHAP摘要图，而不是查看每个单独的实例，来可视化这些特性对多个实例的整体影响：\nshap.summary_plot(shap_values, X)   SHAP摘要图告诉我们数据集上最重要的特征及其影响范围。\n从上面的情节中，我们可以对模型的预测获得一些有趣的见解：\n 用户的 daily_internet_usage 对该用户是否点击广告的影响最大。 随着daily_time_spent_on_site的增加，用户点击广告的可能性降低。 随着area_income的增加，用户点击广告的可能性降低。 随着age的增长，用户更容易点击广告。 如果用户是male，则该用户点击广告的可能性较小。  SHAP条形图 我们还可以使用SHAP条形图得到全局特征重要性图。\nshap.plots.bar(shap_values)   很酷!\n结论 恭喜你!您刚刚了解了Shapey值以及如何使用它来解释一个机器学习模型。希望本文将提供您使用Python来解释自己的机器学习模型的基本知识。\n","permalink":"/blog/shap%E5%AD%A6%E4%B9%A0/","summary":"点击上方图片购买课程   代码下载 点击此处下载代码\n 原文链接 https://towardsdatascience.com/shap-explain-any-machine-learning-model-in-python-24207127cad7\n  想象一下，你正试图训练一个机器学习模型来预测广告是否被特定的人点击。在收到关于某人的一些信息后，模型预测某人会不会点击广告。\n 但是为什么模型会输出这样的预测结果呢？ 每个特征对预测的贡献有多大？ 如果您能看到一个图表，显示每个特征对预测的贡献程度，如下所示，不是很好吗？\n Shapley值就能起到特征权重测度的作用。\nShapley值是什么？ Shapley值是博弈论中使用的一种方法，它涉及公平地将收益和成本分配给在联盟中工作的行动者。 由于每个行动者对联盟的贡献是不同的，Shapley值保证每个行动者根据贡献的多少获得公平的份额。\n 小案例 Shapley值被广泛地应用于求解群体中每个工人(特征)的贡献问题。要理解Shapley值的作用，让我们想象一下贵公司刚刚做了A/B测试，他们在测试广告策略的不同组合。\n每个策略在特定月份的收入是：\n 无广告：150美元 社交媒体：300美元 谷歌广告：200美元 电子邮件营销：350美元 社交媒体和谷歌广告：320美元 社交媒体和电子邮件营销：400美元 谷歌广告和电子邮件营销：350美元 电子邮件营销，谷歌广告和社交媒体：450美元   使用三则广告与不使用广告的收入相差300美元，每则广告对这一差异有多大的贡献?\n 我们可以通过计算每一类广告的Shapley值来计算谷歌广告对公司收入的总贡献入手，通过公式可以计算出Google广告的总贡献：\n 让我们找到Google广告的边际贡献及其权重。\n寻找谷歌广告的边际贡献 第一，我们将发现谷歌广告对以下群体的边际贡献：\n 无广告 谷歌广告+社交媒体 谷歌广告+电子邮件营销 谷歌广告+电子邮件营销+社交媒体   Google广告 对 无广告 的边际贡献是：\n 谷歌广告 对 谷歌广告\u0026amp;社交媒体组合 的边际贡献是：\n 谷歌广告 对 谷歌广告\u0026amp;电子邮件营销组合 的边际贡献是：\n 谷歌广告 对 谷歌广告、电子邮件营销和社交媒体组合 的边际贡献是：\n 发现权重 为了发现权重，我们将把不同广告策略的组合组织成如下多个层次，每个层次对应于每个组合中广告策略的数量。","title":"SHAP机器学习模型解释库"},{"content":" 点击上方图片购买课程   SmartScraper: 简单、自动、快捷的Python网络爬虫  Note: The origin developer of SmartScraper is Alireza Mika， I only change a little code of AutoScraper.\n SmartScraper使页面数据抓取变得容易，不再需要学习诸如pyquery、beautifulsoup等定位包，我们只需要提供的url和数据给ta学习网页定位规律即可。\n一、安装 pip install smartscraper \n二、快速上手 2.1 获取相似结果 例如 我们想从 豆瓣读书-小说 页面获得20本书的书名和出版信息\n P1 https://book.douban.com/tag/小说?start=0\u0026amp;type=T P2 https://book.douban.com/tag/小说?start=20\u0026amp;type=T   我们使用P1链接训练书名、出版信息这两个字段\nfrom smartscraper import SmartScraper # 待训练的网页链接 url = \u0026#39;https://book.douban.com/tag/小说?start=0\u0026amp;type=T\u0026#39; #定义 想要的字段 wanted_dict = {\u0026#34;title\u0026#34;:[\u0026#34;活着\u0026#34;], \u0026#34;pub\u0026#34;: [\u0026#34;余华 / 作家出版社 / 2012-8-1 / 20.00元\u0026#34;] } # 训练/在url对应的页面中寻找wanted_dict规律 scraper = SmartScraper() results = scraper.build(url, wanted_dict=wanted_dict) print(results) 运行代码，采集到的results如下\n{\u0026#39;title\u0026#39;: [\u0026#39;活着\u0026#39;, \u0026#39;房思琪的初恋乐园\u0026#39;, \u0026#39;白夜行\u0026#39;, \u0026#39;索拉里斯星\u0026#39;, \u0026#39;鄙视\u0026#39;, ...], \u0026#39;pub\u0026#39;: [\u0026#39;余华 / 作家出版社 / 2012-8-1 / 20.00元\u0026#39;, \u0026#39;林奕含 / 北京联合出版公司 / 2018-2 / 45.00元\u0026#39;, \u0026#39;[日] 东野圭吾 / 刘姿君 / 南海出版公司 / 2013-1-1 / CNY 39.50\u0026#39;, \u0026#39;[波] 斯坦尼斯瓦夫·莱姆 / 靖振忠 / 译林出版社 / 2021-8 / 49.00元\u0026#39;, \u0026#39;[意] 阿尔贝托·莫拉维亚 / 沈萼梅、刘锡荣 / 江苏凤凰文艺出版社 / 2021-7 / 62.00\u0026#39;, ...] } 使用刚刚训练的scraper尝试从 P2链接 获取书名和出版信息\nscraper.get_result_similar(\u0026#39;https://book.douban.com/tag/小说?start=20\u0026amp;type=T\u0026#39;) \n2.2 保存模型 训练的smartscraper模型可以保存，后续直接调用\nscraper.save(\u0026#39;douban_Book.pkl\u0026#39;) 模型导入代码\nscraper.load(\u0026#39;douban_Book.pkl\u0026#39;) \n","permalink":"/blog/smartscraper/","summary":"点击上方图片购买课程   SmartScraper: 简单、自动、快捷的Python网络爬虫  Note: The origin developer of SmartScraper is Alireza Mika， I only change a little code of AutoScraper.\n SmartScraper使页面数据抓取变得容易，不再需要学习诸如pyquery、beautifulsoup等定位包，我们只需要提供的url和数据给ta学习网页定位规律即可。\n一、安装 pip install smartscraper \n二、快速上手 2.1 获取相似结果 例如 我们想从 豆瓣读书-小说 页面获得20本书的书名和出版信息\n P1 https://book.douban.com/tag/小说?start=0\u0026amp;type=T P2 https://book.douban.com/tag/小说?start=20\u0026amp;type=T   我们使用P1链接训练书名、出版信息这两个字段\nfrom smartscraper import SmartScraper # 待训练的网页链接 url = \u0026#39;https://book.douban.com/tag/小说?start=0\u0026amp;type=T\u0026#39; #定义 想要的字段 wanted_dict = {\u0026#34;title\u0026#34;:[\u0026#34;活着\u0026#34;], \u0026#34;pub\u0026#34;: [\u0026#34;余华 / 作家出版社 / 2012-8-1 / 20.00元\u0026#34;] } # 训练/在url对应的页面中寻找wanted_dict规律 scraper = SmartScraper() results = scraper.","title":"SmartScraper | 简单、自动、快捷的Python网络爬虫"},{"content":"\n 点击上方图片购买课程    作者 bot_developer\n搬运自\n https://www.kaggle.com/miguelaenlle/massive-stock-news-analysis-db-for-nlpbacktests https://github.com/bot-developer3/Scraping-Tools-Benzinga.   背景  获得高质量（历史）股市新闻数据既困难又昂贵； 订阅历史新闻数据提供商服务可能需要花费数千美元。  \n数据集 采集了6000只股票2009-2020年间的4万条新闻文章\nraw_analyst_ratings.csv 直接抓取分析师评级数据，有1034位分析师对6204只股票进行了股票分析，分析记录累积1407328条, 字段包括：索引、标题、URL、文章作者（出版商总是benzinga）、出版时间戳、股票代码。\n请注意，此 CSV 文件中的所有日期均不包含精确的时分秒信息。 如果您打算使用此文件进行回测（analyst_ratings_processed.csv 更好），请假设文章是在第二天而不是当前文章中显示的日期发布的。\nraw_partner_headlines.csv 直接抓取原始新闻标题，共有1845559条记录, 字段包括：索引、标题、URL、出版商（不是 benzinga）、日期、股票行情。\nanalyst_ratings_processed.csv 处理过的分析师评级数据， 共有1400469条记录， 字段包括：文章标题，日期，股票\n时区为 UTC-4。 这与 raw_analys_theadlines 之间的区别在于，它具有精确到分钟的日期，而 raw_analys_tratings 只是没有小时或分钟的那一天。\n\n注意  数据爬自benzinga.com，新闻内容版权归Benzinga所有。  数据下载 链接:https://pan.baidu.com/s/1rMo4Ek2bxvVLmeyxskVCAg 密码:paen\n广告 对新闻类文本的分析与处理，如果这类数据大到一定程度，需要\n 结合python、pandas导入数据，进行文本清洗 结合已有相关情感词典，进行情感分析 使用词典或向量法扩充领域词典，再进行情感分析 也可使用机器学习，进行LDA话题分析，或文本分类甚至是机器学习。  以上技术储备在我的《Python网络爬虫与文本分析》 课中均有讲授，感兴趣的童鞋可以点击链接了解详情\n","permalink":"/blog/daily_financial_news_for_6000_stocks/","summary":"点击上方图片购买课程    作者 bot_developer\n搬运自\n https://www.kaggle.com/miguelaenlle/massive-stock-news-analysis-db-for-nlpbacktests https://github.com/bot-developer3/Scraping-Tools-Benzinga.   背景  获得高质量（历史）股市新闻数据既困难又昂贵； 订阅历史新闻数据提供商服务可能需要花费数千美元。  \n数据集 采集了6000只股票2009-2020年间的4万条新闻文章\nraw_analyst_ratings.csv 直接抓取分析师评级数据，有1034位分析师对6204只股票进行了股票分析，分析记录累积1407328条, 字段包括：索引、标题、URL、文章作者（出版商总是benzinga）、出版时间戳、股票代码。\n请注意，此 CSV 文件中的所有日期均不包含精确的时分秒信息。 如果您打算使用此文件进行回测（analyst_ratings_processed.csv 更好），请假设文章是在第二天而不是当前文章中显示的日期发布的。\nraw_partner_headlines.csv 直接抓取原始新闻标题，共有1845559条记录, 字段包括：索引、标题、URL、出版商（不是 benzinga）、日期、股票行情。\nanalyst_ratings_processed.csv 处理过的分析师评级数据， 共有1400469条记录， 字段包括：文章标题，日期，股票\n时区为 UTC-4。 这与 raw_analys_theadlines 之间的区别在于，它具有精确到分钟的日期，而 raw_analys_tratings 只是没有小时或分钟的那一天。\n\n注意  数据爬自benzinga.com，新闻内容版权归Benzinga所有。  数据下载 链接:https://pan.baidu.com/s/1rMo4Ek2bxvVLmeyxskVCAg 密码:paen\n广告 对新闻类文本的分析与处理，如果这类数据大到一定程度，需要\n 结合python、pandas导入数据，进行文本清洗 结合已有相关情感词典，进行情感分析 使用词典或向量法扩充领域词典，再进行情感分析 也可使用机器学习，进行LDA话题分析，或文本分类甚至是机器学习。  以上技术储备在我的《Python网络爬虫与文本分析》 课中均有讲授，感兴趣的童鞋可以点击链接了解详情","title":"DataShare | 6000+个股票的每日财经新闻"},{"content":" 点击上方图片购买课程   label-studio 假设我们想使用机器学习做文本分析，一般都需要先对数据进行标注，才能训练出效果比较好的监督机器学习模型。\nlabel-studio是多媒体数据标注工具，可以很方便的进行标注和导出。\nLabel Studio 是一款开源数据标注工具，用于标注和探索多种类型的数据。 您可以使用多种数据格式执行的标记任务。\n您还可以将 Label Studio 与机器学习模型集成，以提供标签（预标签）的预测，或执行持续的主动学习。\n官方文档 https://labelstud.io/\n操作步骤  安装Label Studio 启动Label Studio 创建Label Studio账号 项目默认配置 导入数据 标注数据 结束标记，导出标注数据  安装 命令行中执行\npip install label-studio==1.1.0 2 快速上手 在桌面创建自动生成一个名为Project的项目文件夹。\n Win命令行执行  label-studio --data-dir Desktop/Project  Mac命令行执行  label-studio --data-dir desktop/Project \n执行上方代码大概10s左右，会在浏览器弹出如下界面\n 注册好账号密码，点击Create Project\n 项目描述填写好，点击按钮**Data Import **，\n 这里我们要做文本分析，导入csv\n  设置标注模式，点击按钮Labeling Setup,选择Natural Language Process、TEXT Classification。就考研进行pos、neg、neo三个类别的文本标注。\n 注意label-studio提供了diy，考研根据自己需要点击Code设定标注类别名称、增减类别。大家感兴趣的可以深入研究。\n 点击Save 按钮，开始准备标注数据啦\n数据界面，勾选全部数据，点击蓝色按钮Label All Tasks\n 开始标注，勾选你认为合适的标签，点击右侧Submit\n 导出标注数据,先点击右侧Export按钮，选择导出格式，最后点击底部Export按钮执行导出。\n ","permalink":"/blog/label-studio%E5%AD%A6%E4%B9%A0/","summary":"点击上方图片购买课程   label-studio 假设我们想使用机器学习做文本分析，一般都需要先对数据进行标注，才能训练出效果比较好的监督机器学习模型。\nlabel-studio是多媒体数据标注工具，可以很方便的进行标注和导出。\nLabel Studio 是一款开源数据标注工具，用于标注和探索多种类型的数据。 您可以使用多种数据格式执行的标记任务。\n您还可以将 Label Studio 与机器学习模型集成，以提供标签（预标签）的预测，或执行持续的主动学习。\n官方文档 https://labelstud.io/\n操作步骤  安装Label Studio 启动Label Studio 创建Label Studio账号 项目默认配置 导入数据 标注数据 结束标记，导出标注数据  安装 命令行中执行\npip install label-studio==1.1.0 2 快速上手 在桌面创建自动生成一个名为Project的项目文件夹。\n Win命令行执行  label-studio --data-dir Desktop/Project  Mac命令行执行  label-studio --data-dir desktop/Project \n执行上方代码大概10s左右，会在浏览器弹出如下界面\n 注册好账号密码，点击Create Project\n 项目描述填写好，点击按钮**Data Import **，\n 这里我们要做文本分析，导入csv\n  设置标注模式，点击按钮Labeling Setup,选择Natural Language Process、TEXT Classification。就考研进行pos、neg、neo三个类别的文本标注。\n 注意label-studio提供了diy，考研根据自己需要点击Code设定标注类别名称、增减类别。大家感兴趣的可以深入研究。","title":"Label-Studio|多媒体数据标注工具"},{"content":" 点击上方图片购买课程   情感分析  无权重。直接计算文本中正、负情感词出现的次数 有权重。tf-idf， tf是词频，idf是权重。  Tfidf法 scikit库除了CountVectorizer类，还有TfidfVectorizer类。TF-IDF这个定义相信大家应该已经耳熟能详了：\n     TF 词语出现越多，这个词越有信息量 IDF 词语越少的出现在文本中，词语越有信息量。  原始数据 import pandas as pd corpus = [\u0026#34;hello, i am glad to meet you\u0026#34;, \u0026#34;it is wonderful\u0026#34;, \u0026#34;i hate you\u0026#34;, \u0026#34;i am sad\u0026#34;] df1 = pd.DataFrame(corpus, columns=[\u0026#39;Text\u0026#39;]) df1   构造tfidf from sklearn.feature_extraction.text import TfidfVectorizer def createDTM(corpus): \u0026#34;\u0026#34;\u0026#34;构建文档词语矩阵\u0026#34;\u0026#34;\u0026#34; vectorize = TfidfVectorizer() #注意fit_transform相当于fit之后又transform。 dtm = vectorize.fit_transform(corpus) #vectorize.fit(corpus) #dtm = vectorize.transform(corpus)  #打印dtm return pd.DataFrame(dtm.toarray(), columns=vectorize.get_feature_names()) df2 = createDTM(df[\u0026#39;text\u0026#39;]) df2   合并df1和df2 df = pd.concat([df1, df2], axis=1) df   #积极词典 pos_words = [\u0026#39;glad\u0026#39;, \u0026#39;hello\u0026#39;, \u0026#39;wonderful\u0026#39;] #消极词典 neg_words = [\u0026#39;sad\u0026#39;, \u0026#39;hate\u0026#39;] #积极词典 df[pos_words] df[pos_words].sum(axis=1) Run\n0 0.873439 1 0.577350 2 0.000000 3 0.000000 dtype: float64  df[\u0026#39;Pos\u0026#39;] = df[pos_words].sum(axis=1) df   df[\u0026#39;Neg\u0026#39;] = df[neg_words].sum(axis=1) df   输出 df.to_csv(\u0026#39;output/tfidf有权重的情感分析.csv\u0026#39;) ","permalink":"/blog/tfidf%E6%9C%89%E6%9D%83%E9%87%8D%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/","summary":"点击上方图片购买课程   情感分析  无权重。直接计算文本中正、负情感词出现的次数 有权重。tf-idf， tf是词频，idf是权重。  Tfidf法 scikit库除了CountVectorizer类，还有TfidfVectorizer类。TF-IDF这个定义相信大家应该已经耳熟能详了：\n     TF 词语出现越多，这个词越有信息量 IDF 词语越少的出现在文本中，词语越有信息量。  原始数据 import pandas as pd corpus = [\u0026#34;hello, i am glad to meet you\u0026#34;, \u0026#34;it is wonderful\u0026#34;, \u0026#34;i hate you\u0026#34;, \u0026#34;i am sad\u0026#34;] df1 = pd.DataFrame(corpus, columns=[\u0026#39;Text\u0026#39;]) df1   构造tfidf from sklearn.feature_extraction.text import TfidfVectorizer def createDTM(corpus): \u0026#34;\u0026#34;\u0026#34;构建文档词语矩阵\u0026#34;\u0026#34;\u0026#34; vectorize = TfidfVectorizer() #注意fit_transform相当于fit之后又transform。 dtm = vectorize.fit_transform(corpus) #vectorize.fit(corpus) #dtm = vectorize.","title":"tfidf有权重的情感分析"},{"content":" 点击上方图片购买课程   可以使用cnsenti库中的自定义方法，计算年报或财经类社交媒体的文本情绪。\n 姚加权，冯绪，王赞钧，纪荣嵘，张维. 语调、情绪及市场影响：基于金融情绪词典. 管理科学学报，2021. 24(5), 26-46.\n 该论文开发了中文的金融情感词典，已有的中文金融情感词典有以下不足：\n 大多采用形容情绪词，对于金融场景适用性差 将LM英文词典本土化，制作中文金融情绪词典 词典构建方法多为人工  该论文开发中文情绪词典，从年报和社交媒体两个数据源出发，借助数据挖掘和深度学习算法，构建了正式用语 和 非正式用于两大类情感词典。\n标注思路 一般构建词典要么用多个词典融合，要么人工标准训练。该论文采用了一定的技巧，不需要人工标注即可实现近乎人工标注的效果。\n正式词典标注思路 正式用语情感词典，通过年报公布后3个交易日累积正负收益率为标准，将年报标记为正负面情绪两类。\n非正式词典标注思路 使用所有中国上市公司在雪球论坛和东方财富股吧内相关帖子，共8130万条。\n在网络股票论坛，用户发表自己的意见时，经常带有表情符号，从而使得帖子带有明显的情绪指标。 这种含有特殊指标的帖子，省去了人工标注文本情绪的工作。\n具体构建词典的步骤，大家可以阅读论文原文。论文已经公开了中文情感词典，我已将其整理为4个txt文件\n formal_pos.txt 正式用语正面情绪词典 formal_neg.txt 正式用语负面情绪词典 unformal_pos.txt 非正式用语正面情绪词典 unformal_neg.txt 非正式用语负面情绪词典  中文金融词典使用方法 cnsenti实现了自定义词典功能，导入不同的txt词典文件，即可实现不同方面的情绪词统计。\n年报正式用语词典  dict/formal_pos.txt 正式用语正面情绪词典 dict/formal_neg.txt 正式用语负面情绪词典  from cnsenti import Sentiment senti = Sentiment(pos=\u0026#39;dict/formal_pos.txt\u0026#39;, #正面词典txt文件相对路径 neg=\u0026#39;dict/formal_neg.txt\u0026#39;, #负面词典txt文件相对路径 merge=False, #是否将cnsenti自带词典和用户导入的自定义词典融合 encoding=\u0026#39;utf-8\u0026#39;) #两txt均为utf-8编码 test_text = \u0026#39;这家公司是行业的引领者，是中流砥柱。今年的业绩非常好。\u0026#39; result = senti.sentiment_count(test_text) print(\u0026#39;sentiment_count\u0026#39;,result) Run\nsentiment_count {\u0026#39;words\u0026#39;: 16, \u0026#39;sentences\u0026#39;: 2, \u0026#39;pos\u0026#39;: 3, \u0026#39;neg\u0026#39;: 0} \n财经社交媒体非正式用语词典  dict/unformal_pos.txt 非正式用语正面情绪词典 dict/unformal_neg.txt 非正式用语负面情绪词典  from cnsenti import Sentiment senti = Sentiment(pos=\u0026#39;dict/unformal_pos.txt\u0026#39;, #正面词典txt文件相对路径 neg=\u0026#39;dict/unformal_neg.txt\u0026#39;, #负面词典txt文件相对路径 merge=False, #融合cnsenti自带词典和用户导入的自定义词典 encoding=\u0026#39;utf-8\u0026#39;) #两txt均为utf-8编码 test_text = \u0026#39;这个股票前期走势承压，现在阴跌，散户只能割肉离场，这股票真垃圾\u0026#39; result = senti.sentiment_count(test_text) print(\u0026#39;sentiment_count\u0026#39;,result) Run\nsentiment_count {\u0026#39;words\u0026#39;: 18, \u0026#39;sentences\u0026#39;: 1, \u0026#39;pos\u0026#39;: 0, \u0026#39;neg\u0026#39;: 2} \n说明 读者如需使用本项目词典，请引用如下参考文献：\n 姚加权，冯绪，王赞钧，纪荣嵘，张维. 语调、情绪及市场影响：基于金融情绪词典. 管理科学学报，2021. 24(5), 26-46.\n 另外，Python暑期工作坊现在正在报名，内容涵盖Python语法、数据采集(网络爬虫)、文本数据清洗（文本分析）、机器学习等。20号开始直播。感兴趣的可以关注\n","permalink":"/blog/%E4%B8%AD%E6%96%87%E9%87%91%E8%9E%8D%E8%AF%8D%E5%85%B8/","summary":"点击上方图片购买课程   可以使用cnsenti库中的自定义方法，计算年报或财经类社交媒体的文本情绪。\n 姚加权，冯绪，王赞钧，纪荣嵘，张维. 语调、情绪及市场影响：基于金融情绪词典. 管理科学学报，2021. 24(5), 26-46.\n 该论文开发了中文的金融情感词典，已有的中文金融情感词典有以下不足：\n 大多采用形容情绪词，对于金融场景适用性差 将LM英文词典本土化，制作中文金融情绪词典 词典构建方法多为人工  该论文开发中文情绪词典，从年报和社交媒体两个数据源出发，借助数据挖掘和深度学习算法，构建了正式用语 和 非正式用于两大类情感词典。\n标注思路 一般构建词典要么用多个词典融合，要么人工标准训练。该论文采用了一定的技巧，不需要人工标注即可实现近乎人工标注的效果。\n正式词典标注思路 正式用语情感词典，通过年报公布后3个交易日累积正负收益率为标准，将年报标记为正负面情绪两类。\n非正式词典标注思路 使用所有中国上市公司在雪球论坛和东方财富股吧内相关帖子，共8130万条。\n在网络股票论坛，用户发表自己的意见时，经常带有表情符号，从而使得帖子带有明显的情绪指标。 这种含有特殊指标的帖子，省去了人工标注文本情绪的工作。\n具体构建词典的步骤，大家可以阅读论文原文。论文已经公开了中文情感词典，我已将其整理为4个txt文件\n formal_pos.txt 正式用语正面情绪词典 formal_neg.txt 正式用语负面情绪词典 unformal_pos.txt 非正式用语正面情绪词典 unformal_neg.txt 非正式用语负面情绪词典  中文金融词典使用方法 cnsenti实现了自定义词典功能，导入不同的txt词典文件，即可实现不同方面的情绪词统计。\n年报正式用语词典  dict/formal_pos.txt 正式用语正面情绪词典 dict/formal_neg.txt 正式用语负面情绪词典  from cnsenti import Sentiment senti = Sentiment(pos=\u0026#39;dict/formal_pos.txt\u0026#39;, #正面词典txt文件相对路径 neg=\u0026#39;dict/formal_neg.txt\u0026#39;, #负面词典txt文件相对路径 merge=False, #是否将cnsenti自带词典和用户导入的自定义词典融合 encoding=\u0026#39;utf-8\u0026#39;) #两txt均为utf-8编码 test_text = \u0026#39;这家公司是行业的引领者，是中流砥柱。今年的业绩非常好。\u0026#39; result = senti.sentiment_count(test_text) print(\u0026#39;sentiment_count\u0026#39;,result) Run","title":"中文金融情感词典"},{"content":" 点击上方图片购买课程   本文代码下载\n 链接:https://pan.baidu.com/s/1vJohEJ0pc6t4PBK04PiZbg 密码:t7a6\n whatlies 可以与spacy语言模型结合，可视化词向量。安装zh_core_web_md、en_core_web_md和whatlies。具体文档可以查看https://github.com/RasaHQ/whatlies\n!pip3 install zh_core_web_md-3.0.0-py3-none-any.whl !pip3 install en_core_web_md-3.0.0-py3-none-any.whl !pip3 install whatlies 快速上手 spacy模型中的词向量均为几十上百维度的词向量，通过压缩映射至二维空间后，横坐标man，纵坐标woman，就可以将词语的性别倾向可视化出来。\n例如woman词更接近纵轴，man更接近横轴。 nurse、queen一般更多的是女性从业者，因此更接近y轴。 king国王多为男性，所以更接近x轴。\n至于动物，女性喜欢养猫，男性喜欢养狗，所以也能体现出词语的性别倾向。\nfrom whatlies import EmbeddingSet from whatlies.language import SpacyLanguage lang = SpacyLanguage(\u0026#34;en_core_web_md\u0026#34;) words = [\u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;, \u0026#34;fish\u0026#34;, \u0026#34;kitten\u0026#34;, \u0026#34;man\u0026#34;, \u0026#34;woman\u0026#34;, \u0026#34;king\u0026#34;, \u0026#34;queen\u0026#34;, \u0026#34;doctor\u0026#34;, \u0026#34;nurse\u0026#34;] emb = EmbeddingSet(*[lang[w] for w in words]) emb.plot_interactive(x_axis=emb[\u0026#34;man\u0026#34;], y_axis=emb[\u0026#34;woman\u0026#34;])   whatlies也可以对中文进行操作。\nfrom whatlies import EmbeddingSet from whatlies.language import SpacyLanguage zh_lang = SpacyLanguage(\u0026#34;zh_core_web_md\u0026#34;) zh_words = [\u0026#34;猫\u0026#34;, \u0026#34;狗\u0026#34;, \u0026#34;鱼\u0026#34;, \u0026#34;鲤鱼\u0026#34;, \u0026#34;男人\u0026#34;, \u0026#34;女人\u0026#34;, \u0026#34;国王\u0026#34;, \u0026#34;王后\u0026#34;, \u0026#34;医生\u0026#34;, \u0026#34;护士\u0026#34;] zh_emb = EmbeddingSet(*[zh_lang[w] for w in zh_words]) zh_emb.plot_interactive(x_axis=zh_emb[\u0026#34;男人\u0026#34;], y_axis=zh_emb[\u0026#34;女人\u0026#34;])   ","permalink":"/blog/whatlies/","summary":"点击上方图片购买课程   本文代码下载\n 链接:https://pan.baidu.com/s/1vJohEJ0pc6t4PBK04PiZbg 密码:t7a6\n whatlies 可以与spacy语言模型结合，可视化词向量。安装zh_core_web_md、en_core_web_md和whatlies。具体文档可以查看https://github.com/RasaHQ/whatlies\n!pip3 install zh_core_web_md-3.0.0-py3-none-any.whl !pip3 install en_core_web_md-3.0.0-py3-none-any.whl !pip3 install whatlies 快速上手 spacy模型中的词向量均为几十上百维度的词向量，通过压缩映射至二维空间后，横坐标man，纵坐标woman，就可以将词语的性别倾向可视化出来。\n例如woman词更接近纵轴，man更接近横轴。 nurse、queen一般更多的是女性从业者，因此更接近y轴。 king国王多为男性，所以更接近x轴。\n至于动物，女性喜欢养猫，男性喜欢养狗，所以也能体现出词语的性别倾向。\nfrom whatlies import EmbeddingSet from whatlies.language import SpacyLanguage lang = SpacyLanguage(\u0026#34;en_core_web_md\u0026#34;) words = [\u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;, \u0026#34;fish\u0026#34;, \u0026#34;kitten\u0026#34;, \u0026#34;man\u0026#34;, \u0026#34;woman\u0026#34;, \u0026#34;king\u0026#34;, \u0026#34;queen\u0026#34;, \u0026#34;doctor\u0026#34;, \u0026#34;nurse\u0026#34;] emb = EmbeddingSet(*[lang[w] for w in words]) emb.plot_interactive(x_axis=emb[\u0026#34;man\u0026#34;], y_axis=emb[\u0026#34;woman\u0026#34;])   whatlies也可以对中文进行操作。\nfrom whatlies import EmbeddingSet from whatlies.language import SpacyLanguage zh_lang = SpacyLanguage(\u0026#34;zh_core_web_md\u0026#34;) zh_words = [\u0026#34;猫\u0026#34;, \u0026#34;狗\u0026#34;, \u0026#34;鱼\u0026#34;, \u0026#34;鲤鱼\u0026#34;, \u0026#34;男人\u0026#34;, \u0026#34;女人\u0026#34;, \u0026#34;国王\u0026#34;, \u0026#34;王后\u0026#34;, \u0026#34;医生\u0026#34;, \u0026#34;护士\u0026#34;] zh_emb = EmbeddingSet(*[zh_lang[w] for w in zh_words]) zh_emb.","title":"whatlies库|可视化词向量"},{"content":"\n 点击上方图片购买课程   Clumper可以用来处理嵌套样式的json数据结构。\n本文代码下载\nGetting Started 安装 !pip3 install clumper Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple Collecting clumper Downloading https://pypi.tuna.tsinghua.edu.cn/packages/70/62/0731ab9b48c91132aff487217980dcb147ffc0922a278adc05986f6a8d4b/clumper-0.2.13-py2.py3-none-any.whl (21 kB) Installing collected packages: clumper Successfully installed clumper-0.2.13 \u001b[33mWARNING: You are using pip version 20.0.2; however, version 21.1.2 is available. You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 -m pip install --upgrade pip' command.\u001b[0m  为了展示Clumper如何工作，我准备了pokemon.json， 由列表组成(该列表由多个字典组成)，下面是pokemon.json部分内容\nimport json with open(\u0026#39;pokemon.json\u0026#39;) as jsonf: pokemon = json.loads(jsonf.read()) pokemon[:2] [{'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'total': 318, 'hp': 45, 'attack': 49}, {'name': 'Ivysaur', 'type': ['Grass', 'Poison'], 'total': 405, 'hp': 60, 'attack': 62}]  我们准备的pokemon.json列表中大概有800个字典，数量级刚刚好，不会因为太大导致电脑无法运行数据分析，也不会太小导致手动操作性价比更高。\nExample 基本操作 from clumper import Clumper list_of_dicts = [ {\u0026#39;a\u0026#39;: 7, \u0026#39;b\u0026#39;: 2}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 4}, {\u0026#39;a\u0026#39;: 3, \u0026#39;b\u0026#39;: 6} ] (Clumper(list_of_dicts) .mutate(c=lambda d: d[\u0026#39;a\u0026#39;]+d[\u0026#39;b\u0026#39;]) .sort(lambda d: d[\u0026#39;c\u0026#39;]) .collect() ) [{'a': 2, 'b': 4, 'c': 6}, {'a': 7, 'b': 2, 'c': 9}, {'a': 3, 'b': 6, 'c': 9}]  代码解析 Step1\n首先使用mutate方法，该方法可以在每条记录中生成新变量。\n 结算结果仍为Clumper类\nStep2\n接下来对mutate之后的数据进行排序\n 得到的结果仍为Clumper类。\n从上面的小代码案例中，可以看到整套流程像是一个流水线车间，每一行就是一个生成环节，生产环节之间使用.连接起来。\nfrom clumper import Clumper (Clumper(pokemon) .keep(lambda d: len(d[\u0026#39;type\u0026#39;])==1) #保留type长度为1的字典 .mutate(type=lambda d: d[\u0026#39;type\u0026#39;][0], #type值从列表变为字符串 ratio=lambda d: d[\u0026#39;attack\u0026#39;]/d[\u0026#39;hp\u0026#39;]) #新建ratio .select(\u0026#39;name\u0026#39;, \u0026#39;type\u0026#39;, \u0026#39;ratio\u0026#39;) #字典最后只保留name， type， ratio三个字段 .sort(lambda d: d[\u0026#39;ratio\u0026#39;], reverse=True) #按照ratio降序排列 .head(5) #只保留前5个 .collect() #转成列表显示 ) \nCommon Verbs Keep keep函数可以从原始数据中抽取符合指定条件的子集。  from clumper import Clumper list_dicts = [{\u0026#39;a\u0026#39;: 1}, {\u0026#39;a\u0026#39;: 2}, {\u0026#39;a\u0026#39;: 3}, {\u0026#39;a\u0026#39;: 4}] (Clumper(list_dicts) .keep(lambda d: d[\u0026#39;a\u0026#39;] \u0026gt;= 3) .collect() #试一试去掉.collect()后的效果 ) [{'a': 3}, {'a': 4}]  可以实现缺失值处理，以不同的方式实现pandas的.dropna()的功能。\nfrom clumper import Clumper data = [ {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 4}, {\u0026#34;a\u0026#34;: 2, \u0026#34;b\u0026#34;: 3}, {\u0026#34;a\u0026#34;: 3, \u0026#34;b\u0026#34;: 2}, {\u0026#34;a\u0026#34;: 4}, ] #只保留含有b的字段 (Clumper(data) .keep(lambda d: \u0026#39;b\u0026#39; in d.keys()) .collect() ) [{'a': 1, 'b': 4}, {'a': 2, 'b': 3}, {'a': 3, 'b': 2}]  Mutate mutate可以在每条记录中，创建新字段、改写旧字段。  from clumper import Clumper list_dicts = [ {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;:4}, {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 6}] #新建了c和s字段 (Clumper(list_dicts) .mutate(c=lambda d: d[\u0026#39;a\u0026#39;] + d[\u0026#39;b\u0026#39;], s=lambda d: d[\u0026#39;a\u0026#39;] + d[\u0026#39;b\u0026#39;] + d[\u0026#39;c\u0026#39;]) .collect() ) [{'a': 1, 'b': 2, 'c': 3, 's': 6}, {'a': 2, 'b': 3, 'c': 5, 's': 10}, {'a': 1, 'b': 6, 'c': 7, 's': 14}]  Sort sort可以实现排序  from clumper import Clumper list_dicts = [ {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2}, {\u0026#39;a\u0026#39;: 3, \u0026#39;b\u0026#39;: 3}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 1}] (Clumper(list_dicts) .sort(lambda d: d[\u0026#39;b\u0026#39;]) #默认升序 .collect() ) [{'a': 2, 'b': 1}, {'a': 1, 'b': 2}, {'a': 3, 'b': 3}]  Select select挑选每条记录中的某个(些)字段  from clumper import Clumper list_dicts = [ {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;:4}, {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 6}] (Clumper(list_dicts) .select(\u0026#39;a\u0026#39;) .collect() ) [{'a': 1}, {'a': 2}, {'a': 1}]  Drop 剔除某个（些）字段。  from clumper import Clumper list_dicts = [ {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;:4}, {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 6}] (Clumper(list_dicts) .drop(\u0026#39;c\u0026#39;) .collect() ) [{'a': 1, 'b': 2}, {'a': 2, 'b': 3}, {'a': 1, 'b': 6}]  GroupBy 根据某个（些）字段对数据集进行分组，得到不同Group类的集合。一般与.agg()方法联合使用。  from clumper import Clumper grade_dicts = [ {\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: 98, \u0026#39;name\u0026#39;: \u0026#39;张三\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;女\u0026#39;, \u0026#39;grade\u0026#39;: 88, \u0026#39;name\u0026#39;: \u0026#39;王五\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;女\u0026#39;, \u0026#39;grade\u0026#39;: 99, \u0026#39;name\u0026#39;: \u0026#39;赵六\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: 58, \u0026#39;name\u0026#39;: \u0026#39;李四\u0026#39;}] (Clumper(grade_dicts) .group_by(\u0026#34;gender\u0026#34;) .groups==(\u0026#39;gender\u0026#39;, ) ) True  Ungroup GroupBy的反操作  from clumper import Clumper grade_dicts = [ {\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: 98, \u0026#39;name\u0026#39;: \u0026#39;张三\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;女\u0026#39;, \u0026#39;grade\u0026#39;: 88, \u0026#39;name\u0026#39;: \u0026#39;王五\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;女\u0026#39;, \u0026#39;grade\u0026#39;: 99, \u0026#39;name\u0026#39;: \u0026#39;赵六\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: 58, \u0026#39;name\u0026#39;: \u0026#39;李四\u0026#39;}] (Clumper(grade_dicts) .group_by(\u0026#34;gender\u0026#34;) .ungroup().groups == tuple() ) True  \nAbout Groups Agg 聚合描述性统计方法\nagg如下图，可以理解成三个步骤，即group-\u0026gt;split-\u0026gt;summary  常用的描述性统计函数有： mean、count、unqiue、n_unique、sum、min和max\n求学生的平均成绩、最优和最差成绩\nfrom clumper import Clumper grade_dicts = [{\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: 98, \u0026#39;name\u0026#39;: \u0026#39;张三\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;女\u0026#39;, \u0026#39;grade\u0026#39;: 88, \u0026#39;name\u0026#39;: \u0026#39;王五\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;女\u0026#39;, \u0026#39;grade\u0026#39;: 99, \u0026#39;name\u0026#39;: \u0026#39;赵六\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: 58, \u0026#39;name\u0026#39;: \u0026#39;李四\u0026#39;}] (Clumper(grade_dicts) .agg(mean_grade=(\u0026#39;grade\u0026#39;, \u0026#39;mean\u0026#39;), max_grade=(\u0026#39;grade\u0026#39;, \u0026#39;max\u0026#39;), min_grade=(\u0026#39;grade\u0026#39;, \u0026#39;min\u0026#39;)) .collect() ) [{'mean_grade': 85.75, 'max_grade': 99, 'min_grade': 58}]  求男生和女生各自的平均成绩、最优和最差成绩\nfrom clumper import Clumper grade_dicts = [{\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: 98, \u0026#39;name\u0026#39;: \u0026#39;张三\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;女\u0026#39;, \u0026#39;grade\u0026#39;: 88, \u0026#39;name\u0026#39;: \u0026#39;王五\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;女\u0026#39;, \u0026#39;grade\u0026#39;: 99, \u0026#39;name\u0026#39;: \u0026#39;赵六\u0026#39;}, {\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: 58, \u0026#39;name\u0026#39;: \u0026#39;李四\u0026#39;}] (Clumper(grade_dicts) .group_by(\u0026#39;gender\u0026#39;) .agg(mean_grade=(\u0026#39;grade\u0026#39;, \u0026#39;mean\u0026#39;), max_grade=(\u0026#39;grade\u0026#39;, \u0026#39;max\u0026#39;), min_grade=(\u0026#39;grade\u0026#39;, \u0026#39;min\u0026#39;)) .collect()) [{'gender': '男', 'mean_grade': 78, 'max_grade': 98, 'min_grade': 58}, {'gender': '女', 'mean_grade': 93.5, 'max_grade': 99, 'min_grade': 88}]  Collect 一般Clumper函数返回的结果显示为Clumper类，是看不到具体内容的。\ncollect作用主要是展开显示。  剔除重复 剔除重复内容  from clumper import Clumper data = [{\u0026#34;a\u0026#34;: 1}, {\u0026#34;a\u0026#34;: 2}, {\u0026#34;a\u0026#34;: 2}] (Clumper(data) .drop_duplicates() .collect() ) [{'a': 1}, {'a': 2}]   ### 什么是Group？ from clumper import Clumper list_dicts = [ {\u0026#39;a\u0026#39;: 6, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 2, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 7, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 9, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 5, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;} ] (Clumper(list_dicts) .group_by(\u0026#39;grp\u0026#39;) ) \u0026lt;Clumper groups=('grp',) len=5 @0x103cb0290\u0026gt;  当前的group以grp作为关键词  现在经过 .group_by('grp')操作后，说明你对每个grp组感兴趣。具体一点，一个组是{'grp': 'a'}, 另一个组是{'grp': 'b'}.\nAgg without groups  from clumper import Clumper list_dicts = [ {\u0026#39;a\u0026#39;: 6, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 2, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 7, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 9, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 5, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;} ] (Clumper(list_dicts) .agg(s=(\u0026#39;a\u0026#39;, \u0026#39;sum\u0026#39;), m=(\u0026#39;a\u0026#39;, \u0026#39;mean\u0026#39;)) .collect()) [{'s': 29, 'm': 5.8}]  with groups 分别计算组grp=a、组grp=b的sum和mean  from clumper import Clumper list_dicts = [ {\u0026#39;a\u0026#39;: 6, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 2, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 7, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 9, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 5, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;} ] (Clumper(list_dicts) .group_by(\u0026#39;grp\u0026#39;) .agg(s=(\u0026#39;a\u0026#39;, \u0026#39;sum\u0026#39;), m=(\u0026#39;a\u0026#39;, \u0026#39;mean\u0026#39;)) .collect()) [{'grp': 'a', 's': 18, 'm': 6}, {'grp': 'b', 's': 11, 'm': 5.5}]  agg内置的统计函数名 内置的统计函数，可直接通过字符串调用\n{ \u0026#34;mean\u0026#34;: mean, \u0026#34;count\u0026#34;: lambda d: len(d), \u0026#34;unique\u0026#34;: lambda d: list(set(d)), \u0026#34;n_unique\u0026#34;: lambda d: len(set(d)), \u0026#34;sum\u0026#34;: sum, \u0026#34;min\u0026#34;: min, \u0026#34;max\u0026#34;: max, \u0026#34;median\u0026#34;: median, \u0026#34;var\u0026#34;: variance, \u0026#34;std\u0026#34;: stdev, \u0026#34;values\u0026#34;: lambda d: d, \u0026#34;first\u0026#34;: lambda d: d[0], \u0026#34;last\u0026#34;: lambda d: d[-1], } Transform .transform()与.agg()类似。主要的区别是transform处理过程中，记录数和字段数不会出现压缩。\nwithout groups  from clumper import Clumper data = [{\u0026#34;a\u0026#34;: 6, \u0026#34;grp\u0026#34;: \u0026#34;a\u0026#34;}, {\u0026#34;a\u0026#34;: 2, \u0026#34;grp\u0026#34;: \u0026#34;b\u0026#34;}, {\u0026#34;a\u0026#34;: 7, \u0026#34;grp\u0026#34;: \u0026#34;a\u0026#34;}, {\u0026#34;a\u0026#34;: 9, \u0026#34;grp\u0026#34;: \u0026#34;b\u0026#34;}, {\u0026#34;a\u0026#34;: 5, \u0026#34;grp\u0026#34;: \u0026#34;a\u0026#34;}] (Clumper(data) .transform(s=(\u0026#34;a\u0026#34;, \u0026#34;sum\u0026#34;), u=(\u0026#34;a\u0026#34;, \u0026#34;unique\u0026#34;)) .collect()) [{'a': 6, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}, {'a': 2, 'grp': 'b', 's': 29, 'u': [2, 5, 6, 7, 9]}, {'a': 7, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}, {'a': 9, 'grp': 'b', 's': 29, 'u': [2, 5, 6, 7, 9]}, {'a': 5, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}]  with groups  from clumper import Clumper data = [ {\u0026#34;a\u0026#34;: 6, \u0026#34;grp\u0026#34;: \u0026#34;a\u0026#34;}, {\u0026#34;a\u0026#34;: 2, \u0026#34;grp\u0026#34;: \u0026#34;b\u0026#34;}, {\u0026#34;a\u0026#34;: 7, \u0026#34;grp\u0026#34;: \u0026#34;a\u0026#34;}, {\u0026#34;a\u0026#34;: 9, \u0026#34;grp\u0026#34;: \u0026#34;b\u0026#34;}, {\u0026#34;a\u0026#34;: 5, \u0026#34;grp\u0026#34;: \u0026#34;a\u0026#34;} ] (Clumper(data) .group_by(\u0026#34;grp\u0026#34;) .transform(s=(\u0026#34;a\u0026#34;, \u0026#34;sum\u0026#34;), u=(\u0026#34;a\u0026#34;, \u0026#34;unique\u0026#34;)) .collect() ) [{'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]}, {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]}]  Mutate clumper库中的row_number可以给每条记录显示索引位置（第几个）。\nwithout groups  from clumper import Clumper from clumper.sequence import row_number list_dicts = [ {\u0026#39;a\u0026#39;: 6, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 2, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 7, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 4, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 5, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;} ] (Clumper(list_dicts) .mutate(index=row_number()) .collect() ) [{'a': 6, 'grp': 'a', 'index': 1}, {'a': 2, 'grp': 'b', 'index': 2}, {'a': 7, 'grp': 'a', 'index': 3}, {'a': 4, 'grp': 'b', 'index': 4}, {'a': 5, 'grp': 'a', 'index': 5}]  with groups  from clumper import Clumper from clumper.sequence import row_number list_dicts = [ {\u0026#39;a\u0026#39;: 6, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 2, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 7, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 4, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 5, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;} ] (Clumper(list_dicts) .group_by(\u0026#39;grp\u0026#39;) .mutate(index=row_number()) .collect() ) [{'a': 6, 'grp': 'a', 'index': 1}, {'a': 7, 'grp': 'a', 'index': 2}, {'a': 5, 'grp': 'a', 'index': 3}, {'a': 2, 'grp': 'b', 'index': 1}, {'a': 4, 'grp': 'b', 'index': 2}]  Sort 排序, 默认升序\nwithout groups  from clumper import Clumper list_dicts = [{\u0026#39;a\u0026#39;: 6, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 2, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 7, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 9, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 5, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}] (Clumper(list_dicts) #根据字段a进行排序  .sort(key=lambda d: d[\u0026#39;a\u0026#39;]) .collect()) [{'a': 2, 'grp': 'b'}, {'a': 5, 'grp': 'a'}, {'a': 6, 'grp': 'a'}, {'a': 7, 'grp': 'a'}, {'a': 9, 'grp': 'b'}]  with groups  from clumper import Clumper list_dicts = [{\u0026#39;a\u0026#39;: 6, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 2, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 7, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}, {\u0026#39;a\u0026#39;: 9, \u0026#39;grp\u0026#39;: \u0026#39;b\u0026#39;}, {\u0026#39;a\u0026#39;: 5, \u0026#39;grp\u0026#39;: \u0026#39;a\u0026#39;}] (Clumper(list_dicts) .group_by(\u0026#39;grp\u0026#39;) .sort(key=lambda d: d[\u0026#39;a\u0026#39;]) .collect()) [{'a': 5, 'grp': 'a'}, {'a': 6, 'grp': 'a'}, {'a': 7, 'grp': 'a'}, {'a': 2, 'grp': 'b'}, {'a': 9, 'grp': 'b'}]  Ungroup 最后，如果你已经进行完了分组计算，想再次整合起来，取消分组状态，可以使用.ungroup()\n\nMerge Verbs  如果想将多个记录整理到一个记录中，有很多种实现方法。\nConcat 如果想垂直方向将多个记录堆叠，可以使用concat  from clumper import Clumper c1 = Clumper([{\u0026#34;a\u0026#34;: 1}]) c2 = Clumper([{\u0026#34;a\u0026#34;: 2}]) c3 = Clumper([{\u0026#34;a\u0026#34;: 3}]) c1.concat(c2).collect() [{'a': 1}, {'a': 2}]  #等同于c1.concat(c2).concat(c3).collect() c1.concat(c2, c3).collect() [{'a': 1}, {'a': 2}, {'a': 3}]  Joins Joins类似于数学里的交集、并集的，大致有以下四种，  left join 左连接，以左为主，表示以table1为主，关联上table2的数据，结果显示table1的所有数据，然后table2显示的是和table1有交集部分的数据。  from clumper import Clumper left = Clumper([ {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 4}, {\u0026#34;a\u0026#34;: 2, \u0026#34;b\u0026#34;: 6}, {\u0026#34;a\u0026#34;: 3, \u0026#34;b\u0026#34;: 8}, ]) right = Clumper([ {\u0026#34;c\u0026#34;: 9, \u0026#34;b\u0026#34;: 4}, {\u0026#34;c\u0026#34;: 8, \u0026#34;b\u0026#34;: 5}, {\u0026#34;c\u0026#34;: 7, \u0026#34;b\u0026#34;: 6}, ]) #根据b进行左右两表的合并 result = left.inner_join(right, mapping={\u0026#34;b\u0026#34;: \u0026#34;b\u0026#34;}) result.collect() [{'a': 1, 'b': 4, 'c': 9}, {'a': 2, 'b': 6, 'c': 7}]  inner join 内连接， 交集\n from clumper import Clumper left = Clumper([ {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;:4}, {\u0026#34;a\u0026#34;: 2, \u0026#34;b\u0026#34;:6}, {\u0026#34;a\u0026#34;: 3, \u0026#34;b\u0026#34;:8}, ]) right = Clumper([ {\u0026#34;c\u0026#34;: 9, \u0026#34;b\u0026#34;:4}, {\u0026#34;c\u0026#34;: 8, \u0026#34;b\u0026#34;:5}, {\u0026#34;c\u0026#34;: 7, \u0026#34;b\u0026#34;:6}, ]) result = left.inner_join(right, mapping={\u0026#34;b\u0026#34;: \u0026#34;b\u0026#34;}) result.collect() [{'a': 1, 'b': 4, 'c': 9}, {'a': 2, 'b': 6, 'c': 7}]   \nNested Data 由于嵌套数据序列确实具有各种形状和大小，因此该库提供了各种方法来帮助您将数据重塑为不同的格式。 本文档将演示这些方法的工作原理。\nExplode 炸裂（展开）  from clumper import Clumper data = [{\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: [80, 99], \u0026#39;name\u0026#39;:[\u0026#39;张三\u0026#39;, \u0026#39;李四\u0026#39;]}] (Clumper(data) .explode(\u0026#39;name\u0026#39;, \u0026#39;grade\u0026#39;) .collect() ) [{'gender': '男', 'grade': 80, 'name': '张三'}, {'gender': '男', 'grade': 99, 'name': '张三'}, {'gender': '男', 'grade': 80, 'name': '李四'}, {'gender': '男', 'grade': 99, 'name': '李四'}]  from clumper import Clumper data = [{\u0026#39;gender\u0026#39;: \u0026#39;男\u0026#39;, \u0026#39;grade\u0026#39;: [80, 99], \u0026#39;name\u0026#39;:[\u0026#39;张三\u0026#39;, \u0026#39;李四\u0026#39;]}] #.explode(\u0026#39;name\u0026#39;, \u0026#39;grade\u0026#39;)略微有些区别 #请查看两者运行结果 (Clumper(data) .explode(item=\u0026#39;name\u0026#39;, val=\u0026#39;grade\u0026#39;) .collect() ) [{'gender': '男', 'item': '张三', 'val': 80}, {'gender': '男', 'item': '张三', 'val': 99}, {'gender': '男', 'item': '李四', 'val': 80}, {'gender': '男', 'item': '李四', 'val': 99}]  Unpack 与explode类似  from clumper import Clumper list_dicts = { \u0026#39;a\u0026#39;: 1, \u0026#39;rows\u0026#39;: [{\u0026#39;b\u0026#39;: 2, \u0026#39;c\u0026#39;: 3}, {\u0026#39;b\u0026#39;: 3}, {\u0026#39;b\u0026#39;: 4}] } (Clumper(list_dicts) .unpack(\u0026#39;rows\u0026#39;) .collect() ) [{'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 3}, {'a': 1, 'b': 4}]  Flatten keys  from clumper import Clumper data = { \u0026#39;feature_1\u0026#39;: {\u0026#39;propery_1\u0026#39;: 1, \u0026#39;property_2\u0026#39;: 2}, \u0026#39;feature_2\u0026#39;: {\u0026#39;propery_1\u0026#39;: 3, \u0026#39;property_2\u0026#39;: 4}, \u0026#39;feature_3\u0026#39;: {\u0026#39;propery_1\u0026#39;: 5, \u0026#39;property_2\u0026#39;: 6}, } (Clumper(data, listify=False) .flatten_keys() .collect() ) [{'propery_1': 1, 'property_2': 2, 'key': 'feature_1'}, {'propery_1': 3, 'property_2': 4, 'key': 'feature_2'}, {'propery_1': 5, 'property_2': 6, 'key': 'feature_3'}]  \nSummary Methods Clumper支持常用的统计性方法，诸如mean、max、min等\nmean  from clumper import Clumper list_of_dicts = [ {\u0026#39;a\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 3, \u0026#39;b\u0026#39;: 6}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7} ] Clumper(list_of_dicts).mean(\u0026#34;a\u0026#34;) 3.5  Clumper(list_of_dicts).mean(\u0026#34;b\u0026#34;) 6.666666666666667  count 统计记录数  from clumper import Clumper list_of_dicts = [ {\u0026#39;a\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 3, \u0026#39;b\u0026#39;: 6}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7} ] #含有a的一共有多少条记录 Clumper(list_of_dicts).count(\u0026#34;a\u0026#34;) 4  Clumper(list_of_dicts).count(\u0026#34;b\u0026#34;) 3  unique 汇总某字段不重样的值的种类，如[a, b, a, a]，经过unique后，返回[a, b]  from clumper import Clumper list_of_dicts = [{\u0026#39;a\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 3, \u0026#39;b\u0026#39;: 6}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}] Clumper(list_of_dicts).unique(\u0026#34;a\u0026#34;) [2, 3, 7]  Clumper(list_of_dicts).unique(\u0026#34;b\u0026#34;) [6, 7]  n_unique 统计某字段对应的值一种有多少种  from clumper import Clumper list_of_dicts = [ {\u0026#39;a\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 3, \u0026#39;b\u0026#39;: 6}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7} ] Clumper(list_of_dicts).n_unique(\u0026#34;a\u0026#34;) 3  Clumper(list_of_dicts).n_unique(\u0026#34;b\u0026#34;) 2  min  from clumper import Clumper list_of_dicts = [{\u0026#39;a\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 3, \u0026#39;b\u0026#39;: 6}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}] Clumper(list_of_dicts).min(\u0026#34;a\u0026#34;) 2  Clumper(list_of_dicts).min(\u0026#34;b\u0026#34;) 6  max  from clumper import Clumper list_of_dicts = [{\u0026#39;a\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}, {\u0026#39;a\u0026#39;: 3, \u0026#39;b\u0026#39;: 6}, {\u0026#39;a\u0026#39;: 2, \u0026#39;b\u0026#39;: 7}] Clumper(list_of_dicts).max(\u0026#34;a\u0026#34;) 7  Clumper(list_of_dicts).max(\u0026#34;b\u0026#34;) 7  ","permalink":"/blog/clumper/","summary":"点击上方图片购买课程   Clumper可以用来处理嵌套样式的json数据结构。\n本文代码下载\nGetting Started 安装 !pip3 install clumper Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple Collecting clumper Downloading https://pypi.tuna.tsinghua.edu.cn/packages/70/62/0731ab9b48c91132aff487217980dcb147ffc0922a278adc05986f6a8d4b/clumper-0.2.13-py2.py3-none-any.whl (21 kB) Installing collected packages: clumper Successfully installed clumper-0.2.13 \u001b[33mWARNING: You are using pip version 20.0.2; however, version 21.1.2 is available. You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 -m pip install --upgrade pip' command.\u001b[0m  为了展示Clumper如何工作，我准备了pokemon.json， 由列表组成(该列表由多个字典组成)，下面是pokemon.json部分内容\nimport json with open(\u0026#39;pokemon.json\u0026#39;) as jsonf: pokemon = json.loads(jsonf.read()) pokemon[:2] [{'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'total': 318, 'hp': 45, 'attack': 49}, {'name': 'Ivysaur', 'type': ['Grass', 'Poison'], 'total': 405, 'hp': 60, 'attack': 62}]  我们准备的pokemon.","title":"Clumper库|dplyr样式的Python包"},{"content":" 点击上方图片购买课程   Typora简介 Typora是一个所见即所得的Markdown格式文本编辑器，支持Windows、macOS和GNU/Linux操作系统，拼写检查、自定义CSS样式、数学公式渲染（通过MathJax）等特性。\n如果你还不知道Typora，请访问Typora — a markdown editor, markdown reader.\n主题安装方法  下载本主题的压缩文件Latest release 打开Typora, 点击菜单栏的偏好设置-外观-打开主题文件夹 将解压后的文件复制到主题文件夹下(压缩包包含mlike文件夹、 mlike.css mlike-light.css、mlike-dark.css) 重新启动Typora，点击菜单栏的主题-Mlike Light或者Mlike Dark  具体的安装方法可查看 Install Theme (typora.io)\nTypora Themes 下面15个主题是大邓最喜欢的主题\n Autumnus Adark Drake FluentLight Jamstatic LessLight LessLightPrint Mo NewPrint OptAutumnus OrangeHeart PixII Torillic Vue Whitey  1.Autumnus  2.Adark  3.Drake  4.FluentLight   5.Jamstatic  6.LessLight  7.LessLightPrint  8.Mo  9.NewPrint  10.OptAutumnus  11.OrangeHeart  12.PixII  13.Torillic  14.Vue  15.Whitey  ","permalink":"/blog/my-favorite-typora-themes/","summary":"点击上方图片购买课程   Typora简介 Typora是一个所见即所得的Markdown格式文本编辑器，支持Windows、macOS和GNU/Linux操作系统，拼写检查、自定义CSS样式、数学公式渲染（通过MathJax）等特性。\n如果你还不知道Typora，请访问Typora — a markdown editor, markdown reader.\n主题安装方法  下载本主题的压缩文件Latest release 打开Typora, 点击菜单栏的偏好设置-外观-打开主题文件夹 将解压后的文件复制到主题文件夹下(压缩包包含mlike文件夹、 mlike.css mlike-light.css、mlike-dark.css) 重新启动Typora，点击菜单栏的主题-Mlike Light或者Mlike Dark  具体的安装方法可查看 Install Theme (typora.io)\nTypora Themes 下面15个主题是大邓最喜欢的主题\n Autumnus Adark Drake FluentLight Jamstatic LessLight LessLightPrint Mo NewPrint OptAutumnus OrangeHeart PixII Torillic Vue Whitey  1.Autumnus  2.Adark  3.Drake  4.FluentLight   5.Jamstatic  6.LessLight  7.LessLightPrint  8.Mo  9.NewPrint  10.OptAutumnus  11.","title":"我最喜欢的15个Typora主题"},{"content":"\n 点击上方图片购买课程   代码下载 点击此处下载代码\n本文B站视频 https://www.bilibili.com/video/BV1AE411r7ph\n一、知识准备  python语法基本知识 https://www.bilibili.com/video/BV1eb411h7sP/ python网络爬虫 https://www.bilibili.com/video/BV1AE411r7ph/  二、网址规律分析 2.1 上交所  上交所多为GET请求方法，伪码\nimport requests url = \u0026#39;上交所网址规律\u0026#39; headers = \u0026#39;你的浏览器useragent(带referer)\u0026#39; cookies = \u0026#39;你的cookies\u0026#39; resp = requests.get(url, headers=headers, cookies=cookies) \n2.2 深交所   深交所多为POST请求方法，伪码\nimport requests url = \u0026#39;深交所网址规律\u0026#39; headers = \u0026#39;你的浏览器useragent(带referer)\u0026#39; cookies = \u0026#39;你的cookies\u0026#39; param = \u0026#39;form data构造的字典，补全网址规律\u0026#39; resp = requests.get(url, headers=headers, cookies=cookies, data=param) \n三、定位pdf相关数据 访问得到的结果均为json数据，解析定位方法可使用python的字典方法。\n  四、存储数据 几千个pdf数据量很容易达到1000+M，如果长时间自动下载容易失败。\n建议先获取所有公司相关信息，存储到csv中。\n后续再单独使用pandas读取，逐一下载pdf。\n注意，这里推荐使用csv新的语法\nwith open(\u0026#39;你的csv文件路径\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, newline=\u0026#39;\u0026#39;) as csvf: #csv文件内的字段名 fieldnames = [\u0026#39;title\u0026#39;, \u0026#39;date\u0026#39;, \u0026#39;link\u0026#39;, \u0026#39;content\u0026#39;] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() #访问 url = \u0026#39;网址\u0026#39; resp = requests.get(url,....) #定位 for company in resp.json()[\u0026#39;data\u0026#39;]: #解析数据 row = dict() row[\u0026#39;title\u0026#39;] = \u0026#39;采集到的标题\u0026#39; row[\u0026#39;date\u0026#39;] = \u0026#39;采集到的日期\u0026#39; row[\u0026#39;link\u0026#39;] = \u0026#39;采集到的pdf链接\u0026#39; row[\u0026#39;content\u0026#39;] = \u0026#39;采集到的内容\u0026#39; #写入csv writer.writerow(row) \n五、批量下载pdf 以深交所为例，已经采集到深圳交易所.csv，现在下载只需要执行\n## 下载 import requests import pandas as pd def download(link, fpath): \u0026#34;\u0026#34;\u0026#34; 下载多媒体及文件 link： 多媒体文件链接（结尾有文件格式名） fpath: 存储文件的路径（结尾有文件格式名） \u0026#34;\u0026#34;\u0026#34; resp = requests.get(link) #获取到二进制数据 binarydata = resp.content #以二进制形式将数据流存入fname中 with open(fpath, \u0026#39;wb\u0026#39;) as f: f.write(binarydata) df = pd.read_csv(\u0026#39;深圳交易所.csv\u0026#39;) for title, link in zip(df[\u0026#39;title\u0026#39;], df[\u0026#39;link\u0026#39;]): fpath = \u0026#39;深圳/{title}.PDF\u0026#39;.format(title=title) download(link, fpath) ","permalink":"/blog/%E6%8B%9B%E8%82%A1%E8%AF%B4%E6%98%8E-%E8%AF%81%E5%88%B8%E4%BA%A4%E6%98%93%E6%89%80/","summary":"点击上方图片购买课程   代码下载 点击此处下载代码\n本文B站视频 https://www.bilibili.com/video/BV1AE411r7ph\n一、知识准备  python语法基本知识 https://www.bilibili.com/video/BV1eb411h7sP/ python网络爬虫 https://www.bilibili.com/video/BV1AE411r7ph/  二、网址规律分析 2.1 上交所  上交所多为GET请求方法，伪码\nimport requests url = \u0026#39;上交所网址规律\u0026#39; headers = \u0026#39;你的浏览器useragent(带referer)\u0026#39; cookies = \u0026#39;你的cookies\u0026#39; resp = requests.get(url, headers=headers, cookies=cookies) \n2.2 深交所   深交所多为POST请求方法，伪码\nimport requests url = \u0026#39;深交所网址规律\u0026#39; headers = \u0026#39;你的浏览器useragent(带referer)\u0026#39; cookies = \u0026#39;你的cookies\u0026#39; param = \u0026#39;form data构造的字典，补全网址规律\u0026#39; resp = requests.get(url, headers=headers, cookies=cookies, data=param) \n三、定位pdf相关数据 访问得到的结果均为json数据，解析定位方法可使用python的字典方法。\n  四、存储数据 几千个pdf数据量很容易达到1000+M，如果长时间自动下载容易失败。","title":"深交所上交所pdf批量下载"},{"content":" 点击上方图片购买课程   代码下载 点击此处下载代码\n问题 如何将数据中，同一股票代码同一年的某个字段加总成一条？\n我想把某公司同一年的数据var加总到一起\n思路 可以通过pandas库实现这个需求\n 获取公司股票代码列表 获取某公司年份列表 对某个公司同年的var进行加总 (var代指一个字段或变量) for循环对所有的公司重复2-3操作  准备数据 import numpy as np import pandas as pd #强制股票代码转为str类型 df = pd.read_excel(\u0026#39;data.xlsx\u0026#39;, converters={\u0026#34;code\u0026#34;: str}) df.head()    .dataframe tbody tr th:only-of-type { vertical-align: middle; } 代码 1. 获取公司股票代码列表 codes = df.code.unique() codes array(['000001', '000002', '000004', '000005', '000006'], dtype=object)  2. 获取某公司年份列表 以000001为例\nyears = set(df[df[\u0026#39;code\u0026#39;]==\u0026#39;000001\u0026#39;][\u0026#39;year\u0026#39;].values) years {2000, 2002, 2007, 2008, 2010, 2013, 2019}  3. 对某个公司同年的baladded进行加总 以000001公司2000年为例\nndf = df[df[\u0026#39;code\u0026#39;]==\u0026#39;000001\u0026#39;] ndf.head()   ndf[ndf[\u0026#39;year\u0026#39;]==2000]   ndf[ndf[\u0026#39;year\u0026#39;]==2000][\u0026#39;baladded\u0026#39;] 0 -65856130.0 1 -65856130.0 Name: baladded, dtype: float64  ndf[ndf[\u0026#39;year\u0026#39;]==2000][\u0026#39;baladded\u0026#39;].sum() -131712260.0  for循环对所有的公司重复2-3操作 汇总代码\nresults = [] codes = df.code.unique() for code in codes: years = set(df[df[\u0026#39;code\u0026#39;]==code][\u0026#39;year\u0026#39;].values) for year in years: ndf = df[df[\u0026#39;code\u0026#39;]==code] baladded_sum = ndf[ndf[\u0026#39;year\u0026#39;]==year][\u0026#39;baladded\u0026#39;].sum() data = (code, year, baladded_sum) results.append(data) result_df = pd.DataFrame(results, columns=[\u0026#39;code\u0026#39;, \u0026#39;year\u0026#39;, \u0026#39;baladded_sum\u0026#39;]) result_df   保存结果\nresult_df.to_excel(\u0026#39;result.xlsx\u0026#39;, index=False) ","permalink":"/blog/pandas%E6%A1%88%E4%BE%8B%E5%85%AC%E5%8F%B8%E5%88%86%E6%9E%90/","summary":"点击上方图片购买课程   代码下载 点击此处下载代码\n问题 如何将数据中，同一股票代码同一年的某个字段加总成一条？\n我想把某公司同一年的数据var加总到一起\n思路 可以通过pandas库实现这个需求\n 获取公司股票代码列表 获取某公司年份列表 对某个公司同年的var进行加总 (var代指一个字段或变量) for循环对所有的公司重复2-3操作  准备数据 import numpy as np import pandas as pd #强制股票代码转为str类型 df = pd.read_excel(\u0026#39;data.xlsx\u0026#39;, converters={\u0026#34;code\u0026#34;: str}) df.head()    .dataframe tbody tr th:only-of-type { vertical-align: middle; } 代码 1. 获取公司股票代码列表 codes = df.code.unique() codes array(['000001', '000002', '000004', '000005', '000006'], dtype=object)  2. 获取某公司年份列表 以000001为例\nyears = set(df[df[\u0026#39;code\u0026#39;]==\u0026#39;000001\u0026#39;][\u0026#39;year\u0026#39;].values) years {2000, 2002, 2007, 2008, 2010, 2013, 2019}  3.","title":"Pandas小案例 | 对某公司同年的某指标批量汇总"},{"content":"\n 点击上方图片购买课程   在B站看到一位博主用Hugo制作个人博客的视频，感觉挺简单的，真的十几分钟就能看到云端出现自己的博客，当然了想让自己的博客更美观更炫酷，精雕细琢会花很多功夫。现在大家看到的效果，大邓用了一整天的时间，一点点修饰改动出来的。\n 1. 安装Hugo 这里以Mac为例，安装Hugo，命令行输入\nbrew install hugo \n2. 新建Hugo项目 切换到桌面(我喜欢把项目放到桌面), 命令行执行\ncd desktop 新建一个叫做MyBlog的hugo项目文件夹，命令行执行\nhugo new site MyBlog 现在可以在桌面看到一个MyBlog文件夹，接下来切换工作目录到MyBlog\ncd MyBlog 记者目前我们的命令行处于MyBlog的根目录 , 接下来下载网站主题\n\n3. Academic主题下载 Hugo有很多主题，我选择的 https://themes.gohugo.io/academic/，\n在命令行逐行执行下方命令\ncd themes git clone https://github.com/gcushen/hugo-academic.git 我们可以在 MyBlog/themes 看到多了一个 hugo-academic文件夹，把hugo-academic改为academic ，现在网站已经建立好了\n这里切换回项目根目录MyBlog\ncd .. 命令行执行pwd，检查一下目录\npwd 得到\n/Users/电脑用户名/desktop/MyBlog \n4. 启动本地博客 现在我们以academic主题为例，启动博客\n命令行执行\nhugo server -t academic --buildDrafts 补充: t的意思是主题\n执行后，在命令行中会提示我们\nhttp://localhost:1313/ 在浏览器中复制粘贴上方的链接，我们的Blog毛坯房搭建好了~\n5. 在本地新建一篇文章 依旧是MyBlog根目录，命令行执行\nhugo new post/first-article.md 在MyBlog/content内新生成了一个post文件夹，并且post内有了一个first-article.md文件。\n接下来就是在first-article.md内用markdown方式写内容即可。\n我们测试一下现在的网站,继续回到MyBlog根目录，命令行执行\nhugo server -t academic --buildDrafts 在浏览器中我们可以看到有First Ariticle的文章。\n6. 将本地博客部署到服务器 在github新建一个仓库，仓库名命名方式\n\u0026lt;你的github用户名\u0026gt;.github.io 比如我的github账号名是thunderhit，那么仓库名为\nthunderhit.github.io 在MyBlog根目录，命令行执行\nhugo --theme=academic --baseUrl=\u0026#39;/\u0026#39; --buildDrafts 注意: 主题academic, 网站地址 https://hidadeng.github.io/ ，你们根据自己需要改成自己的仓库名\n现在我们在MyBlog中多了一个public文件夹，其中有我们新建的文章内容。\n绑定public与github仓库\n命令行切换到public目录，初始化git\ncd public git init git add . git commit -m \u0026#39;我的hugo博客第一次提交\u0026#39; 把public与远程github仓库关联\n依次执行（大家的github地址略微不同，需要改动一下)\ngit remote add origin git@github.com:hidadeng/hidadeng.github.io.git git push -u origin master 命令行上传完毕后，在浏览器网址栏打开链接 https://hidadeng.github.io/\n就可以看到我们自己的博客了~\n\n更多 如果大家想学仔细学Hugo，推荐大家看B站Up主：ianianying的视频\n\n","permalink":"/blog/hugo%E5%BB%BA%E7%AB%99/","summary":"点击上方图片购买课程   在B站看到一位博主用Hugo制作个人博客的视频，感觉挺简单的，真的十几分钟就能看到云端出现自己的博客，当然了想让自己的博客更美观更炫酷，精雕细琢会花很多功夫。现在大家看到的效果，大邓用了一整天的时间，一点点修饰改动出来的。\n 1. 安装Hugo 这里以Mac为例，安装Hugo，命令行输入\nbrew install hugo \n2. 新建Hugo项目 切换到桌面(我喜欢把项目放到桌面), 命令行执行\ncd desktop 新建一个叫做MyBlog的hugo项目文件夹，命令行执行\nhugo new site MyBlog 现在可以在桌面看到一个MyBlog文件夹，接下来切换工作目录到MyBlog\ncd MyBlog 记者目前我们的命令行处于MyBlog的根目录 , 接下来下载网站主题\n\n3. Academic主题下载 Hugo有很多主题，我选择的 https://themes.gohugo.io/academic/，\n在命令行逐行执行下方命令\ncd themes git clone https://github.com/gcushen/hugo-academic.git 我们可以在 MyBlog/themes 看到多了一个 hugo-academic文件夹，把hugo-academic改为academic ，现在网站已经建立好了\n这里切换回项目根目录MyBlog\ncd .. 命令行执行pwd，检查一下目录\npwd 得到\n/Users/电脑用户名/desktop/MyBlog \n4. 启动本地博客 现在我们以academic主题为例，启动博客\n命令行执行\nhugo server -t academic --buildDrafts 补充: t的意思是主题\n执行后，在命令行中会提示我们\nhttp://localhost:1313/ 在浏览器中复制粘贴上方的链接，我们的Blog毛坯房搭建好了~\n5. 在本地新建一篇文章 依旧是MyBlog根目录，命令行执行","title":"使用Hugo框架建立个人网站"},{"content":"\n 点击上方图片购买课程   参考GreatDanton 项目，丢弃庞杂丑陋的浏览器收藏夹， 打造简洁科研浏览器首页。\n每个人都可以自定义自己的浏览器首页，替换默认浏览器首页/起始页。 该项目可在任何现代浏览器上运行，只需将index.html设置为主页并添加自己的链接 到index.html\n点击查看效果 \n一、功能  搜索(google) 日历(倒计时) 待办事项 支持DIY自己的首页  二、截图 各位可根据自身科研或者工作需要，更改成自己的标签名，替换为自己需要的网站网址\n   日历, 在index.html中可以设置自己认为最最重要的日子\n\u0026lt;script\u0026gt; // 显示日期时钟 showClock(); //在日历上显示倒计时 countDown({\u0026#34;y\u0026#34;: 2022, \u0026#34;m\u0026#34;: 6, \u0026#34;d\u0026#34;: 1 }, \u0026#34;Message when your countdown ends\u0026#34;); \u0026lt;/script\u0026gt;   待办事项\n 三、添加链接 网站链接需要直接加到index.html的 \u0026lt;div class=\u0026quot;slides-container\u0026quot;标签内，以学术生活如下\n\u0026lt;div class=\u0026#34;slide\u0026#34; name=\u0026#34;科研\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;part\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; 数据库 \u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;links\u0026#34;\u0026gt; \u0026lt;a href=\u0026#39;https://scholar.google.com/\u0026#39;\u0026gt;Google Scholar\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://webofknowledge.com/\u0026#39;\u0026gt; Web of Science \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://search.ebscohost.com/\u0026#39;\u0026gt; EBSCO \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://scholar.cnki.net/\u0026#39;\u0026gt; CNKI Scholar \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://www.ssrn.com/index.cfm/en/\u0026#39;\u0026gt;SSRN\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://www.proquest.com/site/pqdd_unavailable.shtml\u0026#39;\u0026gt; ProQuest \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://pubsonline.informs.org/\u0026#39;\u0026gt; Informs \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://www.emerald.com/insight/\u0026#39;\u0026gt; Emerald Insight \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://link.springer.com/\u0026#39;\u0026gt; Springer \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;http://www.cnki.net/\u0026#39;\u0026gt; 知网 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   四、使用方法  点击时钟，弹出日期框和倒计时信息。 搜索框支持!command搜索语法. 例如    搜索框命令 目标网站 例子 作用     !scholar google scholar !scholar python 在谷歌学术中搜python相关信息   !book 豆瓣读书 !book python 在豆瓣读书中搜python相关书籍信息   !movie 豆瓣电影 !movie 悬崖之上 在豆瓣电影中搜悬崖之上相关电影信息   !zhihu 知乎 !zhihu python 在知乎网站搜python相关信息   !youtube youtube !youtube python 在youtube搜索python相关视频   !taobao 淘宝 !taobao python 在淘宝搜python相关商品服务   !jd 京东 !jd python 在京东搜python相关商品服务   !bilibili B站 !bilibili python 在B站搜索python相关视频   !github github !github python 在github上搜python相关仓库代码等信息   !mail qq邮箱 !mail 默认打开qq邮箱      五、项目代码结构 ├── components │ ├── calendar.js │ ├── clock.js │ ├── countdown.js │ ├── notes.js │ ├── search-box.js │ └── slides.js ├── css │ ├── main_min.css │ └── main.scss ├── index.html  Components文件夹: 含有浏览器主页所需的所有组件js文件。  calendar.js -\u0026gt; 日历 clock.js -\u0026gt; 时钟 countdown.js -\u0026gt; 倒计时 notes.js -\u0026gt;待办事项todo list search-box.js -\u0026gt; 主页搜索框 slides.js -\u0026gt; 页面滑动功能   index.html -\u0026gt; 浏览器主页入口  六、代码获取  直接下载 github更多代码  ","permalink":"/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A6%96%E9%A1%B5/","summary":"点击上方图片购买课程   参考GreatDanton 项目，丢弃庞杂丑陋的浏览器收藏夹， 打造简洁科研浏览器首页。\n每个人都可以自定义自己的浏览器首页，替换默认浏览器首页/起始页。 该项目可在任何现代浏览器上运行，只需将index.html设置为主页并添加自己的链接 到index.html\n点击查看效果 \n一、功能  搜索(google) 日历(倒计时) 待办事项 支持DIY自己的首页  二、截图 各位可根据自身科研或者工作需要，更改成自己的标签名，替换为自己需要的网站网址\n   日历, 在index.html中可以设置自己认为最最重要的日子\n\u0026lt;script\u0026gt; // 显示日期时钟 showClock(); //在日历上显示倒计时 countDown({\u0026#34;y\u0026#34;: 2022, \u0026#34;m\u0026#34;: 6, \u0026#34;d\u0026#34;: 1 }, \u0026#34;Message when your countdown ends\u0026#34;); \u0026lt;/script\u0026gt;   待办事项\n 三、添加链接 网站链接需要直接加到index.html的 \u0026lt;div class=\u0026quot;slides-container\u0026quot;标签内，以学术生活如下\n\u0026lt;div class=\u0026#34;slide\u0026#34; name=\u0026#34;科研\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;part\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; 数据库 \u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;links\u0026#34;\u0026gt; \u0026lt;a href=\u0026#39;https://scholar.google.com/\u0026#39;\u0026gt;Google Scholar\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://webofknowledge.com/\u0026#39;\u0026gt; Web of Science \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#39;https://search.","title":"Hi Research 定义自己的科研首页"},{"content":" 点击上方图片购买课程   Jaal是基于Dash和Visdcc构建的可交互的Python社交网络库。由于底层使用了dash，所以我们可以认为jaal更像是一个仪表盘。基于此，jaal也提供了多种处理网络数据的可选项，例如搜索、过滤、给节点（边）上色等。所有的操作，两三行代码即可搞定。\n!pip3 install jaal 一、快速上手 本文准备了《权利的游戏》的节点nodes.csv和边edges.csv数据， 可以使用jaal的plot()函数绘制《权利的游戏》关系网络图。 必须有的字段，这里加粗了 nodes.csv数据含\n from: 节点 to: 节点 weight: 边权重 strenth:  edges.csv数据\n id 节点id，姓名 gender 节点的性别   import pandas as pd from jaal import Jaal edge_df = pd.read_csv(\u0026#39;edges.csv\u0026#39;) node_df = pd.read_csv(\u0026#39;nodes.csv\u0026#39;) Jaal(edge_df, node_df).plot() 运行代码后，会生成一个本地服务链接，例如 http://127.0.0.1:8050/ ， 点击链接，浏览器就能看到\n 二、Jaal功能  设置面板 Jaal运行产生的浏览器界面左侧会有一个设置面板，可以对数据进行搜索、筛选、上色。 搜索 可以高亮搜索到的节点 过滤 支持pandas的query语法 上色 基于类别，对节点、边进行上色。能最多支持20个类别，即节点、边数据允许有20种属性  三、 案例 3.1 搜索 第一个选项是搜索，我们可以在其中搜索图中的特定节点。 它支持在节点标签上逐字符搜索。 以下是我们尝试搜索“ Arya”的示例\n 3.2 过滤 接下来，我们进行过滤。 Jaal支持在节点和边要素上都进行过滤的选项。 为此，我们提供了单独的文本区域。 下面我们可以看到节点和边缘过滤查询的实时效果。\n 3.3 染色 最后，我们可能希望查看任何功能的整体分布，而不是进行过滤。 目前，Jaal通过提供根据任何分类特征为节点或边缘着色的选项来解决此问题。 我们可以在下面看到一个真实的例子。\n 四、 代码获取  直接下载 github更多代码  ","permalink":"/blog/jaal%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%8F%AF%E8%A7%86%E5%8C%96/","summary":"点击上方图片购买课程   Jaal是基于Dash和Visdcc构建的可交互的Python社交网络库。由于底层使用了dash，所以我们可以认为jaal更像是一个仪表盘。基于此，jaal也提供了多种处理网络数据的可选项，例如搜索、过滤、给节点（边）上色等。所有的操作，两三行代码即可搞定。\n!pip3 install jaal 一、快速上手 本文准备了《权利的游戏》的节点nodes.csv和边edges.csv数据， 可以使用jaal的plot()函数绘制《权利的游戏》关系网络图。 必须有的字段，这里加粗了 nodes.csv数据含\n from: 节点 to: 节点 weight: 边权重 strenth:  edges.csv数据\n id 节点id，姓名 gender 节点的性别   import pandas as pd from jaal import Jaal edge_df = pd.read_csv(\u0026#39;edges.csv\u0026#39;) node_df = pd.read_csv(\u0026#39;nodes.csv\u0026#39;) Jaal(edge_df, node_df).plot() 运行代码后，会生成一个本地服务链接，例如 http://127.0.0.1:8050/ ， 点击链接，浏览器就能看到\n 二、Jaal功能  设置面板 Jaal运行产生的浏览器界面左侧会有一个设置面板，可以对数据进行搜索、筛选、上色。 搜索 可以高亮搜索到的节点 过滤 支持pandas的query语法 上色 基于类别，对节点、边进行上色。能最多支持20个类别，即节点、边数据允许有20种属性  三、 案例 3.1 搜索 第一个选项是搜索，我们可以在其中搜索图中的特定节点。 它支持在节点标签上逐字符搜索。 以下是我们尝试搜索“ Arya”的示例","title":"Jaal库~轻松绘制动态社交网络关系图"},{"content":" 点击上方图片购买课程   Kaggle是个很棒的地方,对于数据科学家和机器学习工程师来说，这是一个知识的金矿。可以在同一地点找到由本领域专家带来的高质量，高效，可重现，很棒的代码。自推出以来，它已经举办了164场比赛。这些比赛吸引了来自世界各地的专家和专家加入该平台。结果，每场比赛以及Kaggle提供的大量开源数据集都有许多高质量的笔记本和脚本。\n在数据科学之旅的开始，我将去Kaggle查找数据集以练习我的技能。每当我查看其他内核时，我都会对代码的复杂性感到不知所措，然后马上回避。\n但是现在，我发现自己花费了大量时间阅读其他笔记本并提交竞赛文件。有时候，有些东西值得您度过整个周末。有时，我会发现简单但致命的有效代码技巧和最佳实践，这些技巧和最佳实践只能通过观察其他专家来学习。\n在整个系列中，您会发现我在典型的数据科学工作流程中可能有用的任何内容，包括与通用库相关的代码快捷方式，Kaggle的顶级行业专家遵循的最佳实践等，这些都是我在学习过程中学到的。\n1. 只绘制相关系数矩阵的下三角部分 好的相关矩阵可以说明数据集中目标变量之间的相关性\nimport pandas as pd df = pd.read_csv(\u0026#39;data/melbourne_housing_raw.csv\u0026#39;) df.head()   import seaborn as sns import matplotlib.pyplot as plt plt.figure(figsize=(16, 12)) cmap = sns.diverging_palette(250, 15, s=75, l=40, n=9, center=\u0026#34;light\u0026#34;, as_cmap=True) sns.heatmap(df.corr(), center=0, annot=True, fmt=\u0026#39;.2f\u0026#39;, square=True, cmap=cmap) plt.show()   但上图中，数据集中存在大量的特征，导致相似矩阵过于庞大，让人看起来不知所措。\n相关矩阵大部分沿主对角线对称，因此它们包含重复数据。 同样，对角线本身也没有用。 让我们看看如何只绘制有用的一半：\nimport numpy as np # 计算相关系数 matrix = df.corr() # 创建遮罩（为了只显示下三角） mask = np.triu(np.ones_like(matrix, dtype=bool)) # 定制调色板 cmap = sns.diverging_palette(250, 15, s=75, l=40, n=9, center=\u0026#34;light\u0026#34;, as_cmap=True) # 设定图片尺寸 plt.figure(figsize=(16, 12)) # 绘制相似矩阵热力图 sns.heatmap(matrix, mask=mask, center=0, annot=True, fmt=\u0026#39;.2f\u0026#39;, square=True, cmap=cmap) plt.show()   由此产生的可视化图更容易解释并且没有视觉干扰干扰。\n 首先，我们使用DataFrame的.corr方法构建相关矩阵。 然后，我们使用dtype设置为bool的np.ones_like函数来创建一个True矩阵，其形状与DataFrame相同：  np.ones((5, 5)) array([[1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.]])  np.ones_like(np.ones((4, 4)), dtype=bool) array([[ True, True, True, True], [ True, True, True, True], [ True, True, True, True], [ True, True, True, True]])  将布尔方阵传递给Numpy的.triu函数，该函数将返回一个二维布尔蒙版，其中包含矩阵下三角的False值。\nnp.triu(np.ones_like(np.ones((4, 4)), dtype=bool)) array([[ True, True, True, True], [False, True, True, True], [False, False, True, True], [False, False, False, True]])  然后，我们可以将其传递给Seaborn的heatmap函数，以根据此蒙版对矩阵进行可视化\nns.heatmap(matrix, mask=mask, center=0, annot=True, fmt=\u0026#39;.2f\u0026#39;, square=True, cmap=cmap) \n2. value_counts考虑缺失值 使用value_counts时，可将dropna设置为False来查看任何列中缺失值的比例。通过确定缺失值的比例，可以决定是否丢弃含有缺失值的记录。\n#字段CouncilArea的数据分布情况 df.CouncilArea.value_counts(dropna=False, normalize=True).head() Boroondara City Council 0.105431 Darebin City Council 0.081791 Moreland City Council 0.060877 Glen Eira City Council 0.057549 Melbourne City Council 0.056000 Name: CouncilArea, dtype: float64  但是，如果要查看所有列中缺失值的比例，则value_counts不是最佳选择。 相反，您可以执行以下操作：\n  首先，通过将缺失值的数量除以DataFrame的长度来找到比例。\n  然后，您可以过滤掉0％的列，即i。 e。 只选择缺少值的列。\n  missing_props = df.isna().sum() / len(df) missing_props[missing_props \u0026gt; 0].sort_values(ascending=False) BuildingArea 0.605761 YearBuilt 0.553863 Landsize 0.338813 Car 0.250394 Bathroom 0.235993 Bedroom2 0.235735 Longtitude 0.228821 Lattitude 0.228821 Price 0.218321 Propertycount 0.000086 Regionname 0.000086 CouncilArea 0.000086 Postcode 0.000029 Distance 0.000029 dtype: float64  3. 使用Pandas的Styler 我们中的许多人从未意识到pandas的巨大潜力。pandas的一个被低估且经常被忽视的功能是其对DataFrames进行样式设置的能力。 使用pandas DataFrames的.style属性，可以将条件设计和样式应用于它们。\n作为第一个示例，让我们看看如何根据每个单元格的值来更改背景颜色：\ndiamonds = pd.read_csv(\u0026#39;data/diamonds.csv\u0026#39;) diamonds.head()   pd.crosstab(diamonds.cut, diamonds.clarity).style.background_gradient(cmap=\u0026#39;rocket_r\u0026#39;)   几乎没有使用Seaborn的热图功能的热图。 在这里，我们使用pd.crosstab对钻石切割(cut)和净度(clarity)的每种组合进行计数。\n将.style.background_gradient与调色板配合使用，您可以轻松地发现哪种组合出现得最多。 仅从上面的DataFrame中，我们可以看到大多数钻石都是“ VS2”净度类型。\n我们甚至可以通过在交叉表中找到每种钻石切割cut和净度clarity组合的平均价格来进一步做到这一点：\npd.crosstab(diamonds.cut, diamonds.clarity, aggfunc=np.mean, values=diamonds.price).style.background_gradient(cmap=\u0026#39;rocket_r\u0026#39;)   通过将.format方法与格式字符串{：.2f}链接起来，我们指定了2个浮点数的精度。\nagg_prices = pd.crosstab(diamonds.cut, diamonds.clarity, aggfunc=np.mean, values=diamonds.price).style.background_gradient(cmap=\u0026#39;rocket_r\u0026#39;) agg_prices.format(\u0026#39;{:.2f}\u0026#39;)   4. matplotlib默认全局设置 在进行探索性数据分析时，您可能想对所有绘图应用自定义调色板，对刻度标签使用更大的字体，更改图例的位置，使用固定的图形大小等。\n对绘图自定义参数的更改是一项非常无聊，重复且耗时的任务。 幸运的是，您可以使用Matplotlib的rcParams为绘图设置全局配置。\nrcParams只是一个普通的Python字典，其中包含Matplotlib的默认设置：\nfrom matplotlib import rcParams import warnings warnings.filterwarnings(\u0026#39;ignore\u0026#39;) rcParams RcParams({'_internal.classic_mode': False, 'agg.path.chunksize': 0, 'animation.avconv_args': [], 'animation.avconv_path': 'avconv', 'animation.bitrate': -1, 'animation.codec': 'h264', 'animation.convert_args': [], 'animation.convert_path': 'convert', 'animation.embed_limit': 20.0, 'animation.ffmpeg_args': [], 'animation.ffmpeg_path': 'ffmpeg', 'animation.frame_format': 'png', 'animation.html': 'none', 'animation.html_args': [], 'animation.writer': 'ffmpeg', 'axes.autolimit_mode': 'data', 'axes.axisbelow': 'line', 'axes.edgecolor': 'black', 'axes.facecolor': 'white', 'axes.formatter.limits': [-7, 7], 'axes.formatter.min_exponent': 0, 'axes.formatter.offset_threshold': 4, 'axes.formatter.use_locale': False, 'axes.formatter.use_mathtext': False, 'axes.formatter.useoffset': True, 'axes.grid': False, 'axes.grid.axis': 'both', 'axes.grid.which': 'major', 'axes.labelcolor': 'black', 'axes.labelpad': 4.0, 'axes.labelsize': 'medium', 'axes.labelweight': 'normal', 'axes.linewidth': 0.8, 'axes.prop_cycle': cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']), 'axes.spines.bottom': True, 'axes.spines.left': True, 'axes.spines.right': True, 'axes.spines.top': True, 'axes.titlepad': 6.0, 'axes.titlesize': 'large', 'axes.titleweight': 'normal', 'axes.unicode_minus': True, 'axes.xmargin': 0.05, 'axes.ymargin': 0.05, 'axes3d.grid': True, 'backend': 'module://ipykernel.pylab.backend_inline', 'backend_fallback': True, 'boxplot.bootstrap': None, 'boxplot.boxprops.color': 'black', 'boxplot.boxprops.linestyle': '-', 'boxplot.boxprops.linewidth': 1.0, 'boxplot.capprops.color': 'black', 'boxplot.capprops.linestyle': '-', 'boxplot.capprops.linewidth': 1.0, 'boxplot.flierprops.color': 'black', 'boxplot.flierprops.linestyle': 'none', 'boxplot.flierprops.linewidth': 1.0, 'boxplot.flierprops.marker': 'o', 'boxplot.flierprops.markeredgecolor': 'black', 'boxplot.flierprops.markeredgewidth': 1.0, 'boxplot.flierprops.markerfacecolor': 'none', 'boxplot.flierprops.markersize': 6.0, 'boxplot.meanline': False, 'boxplot.meanprops.color': 'C2', 'boxplot.meanprops.linestyle': '--', 'boxplot.meanprops.linewidth': 1.0, 'boxplot.meanprops.marker': '^', 'boxplot.meanprops.markeredgecolor': 'C2', 'boxplot.meanprops.markerfacecolor': 'C2', 'boxplot.meanprops.markersize': 6.0, 'boxplot.medianprops.color': 'C1', 'boxplot.medianprops.linestyle': '-', 'boxplot.medianprops.linewidth': 1.0, 'boxplot.notch': False, 'boxplot.patchartist': False, 'boxplot.showbox': True, 'boxplot.showcaps': True, 'boxplot.showfliers': True, 'boxplot.showmeans': False, 'boxplot.vertical': True, 'boxplot.whiskerprops.color': 'black', 'boxplot.whiskerprops.linestyle': '-', 'boxplot.whiskerprops.linewidth': 1.0, 'boxplot.whiskers': 1.5, 'contour.corner_mask': True, 'contour.negative_linestyle': 'dashed', 'datapath': '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data', 'date.autoformatter.day': '%Y-%m-%d', 'date.autoformatter.hour': '%m-%d %H', 'date.autoformatter.microsecond': '%M:%S.%f', 'date.autoformatter.minute': '%d %H:%M', 'date.autoformatter.month': '%Y-%m', 'date.autoformatter.second': '%H:%M:%S', 'date.autoformatter.year': '%Y', 'docstring.hardcopy': False, 'errorbar.capsize': 0.0, 'examples.directory': '', 'figure.autolayout': False, 'figure.constrained_layout.h_pad': 0.04167, 'figure.constrained_layout.hspace': 0.02, 'figure.constrained_layout.use': False, 'figure.constrained_layout.w_pad': 0.04167, 'figure.constrained_layout.wspace': 0.02, 'figure.dpi': 72.0, 'figure.edgecolor': (1, 1, 1, 0), 'figure.facecolor': (1, 1, 1, 0), 'figure.figsize': [6.0, 4.0], 'figure.frameon': True, 'figure.max_open_warning': 20, 'figure.subplot.bottom': 0.125, 'figure.subplot.hspace': 0.2, 'figure.subplot.left': 0.125, 'figure.subplot.right': 0.9, 'figure.subplot.top': 0.88, 'figure.subplot.wspace': 0.2, 'figure.titlesize': 'large', 'figure.titleweight': 'normal', 'font.cursive': ['Apple Chancery', 'Textile', 'Zapf Chancery', 'Sand', 'Script MT', 'Felipa', 'cursive'], 'font.family': ['sans-serif'], 'font.fantasy': ['Comic Sans MS', 'Chicago', 'Charcoal', 'Impact', 'Western', 'Humor Sans', 'xkcd', 'fantasy'], 'font.monospace': ['DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Computer Modern Typewriter', 'Andale Mono', 'Nimbus Mono L', 'Courier New', 'Courier', 'Fixed', 'Terminal', 'monospace'], 'font.sans-serif': ['DejaVu Sans', 'Bitstream Vera Sans', 'Computer Modern Sans Serif', 'Lucida Grande', 'Verdana', 'Geneva', 'Lucid', 'Arial', 'Helvetica', 'Avant Garde', 'sans-serif'], 'font.serif': ['DejaVu Serif', 'Bitstream Vera Serif', 'Computer Modern Roman', 'New Century Schoolbook', 'Century Schoolbook L', 'Utopia', 'ITC Bookman', 'Bookman', 'Nimbus Roman No9 L', 'Times New Roman', 'Times', 'Palatino', 'Charter', 'serif'], 'font.size': 10.0, 'font.stretch': 'normal', 'font.style': 'normal', 'font.variant': 'normal', 'font.weight': 'normal', 'grid.alpha': 1.0, 'grid.color': '#b0b0b0', 'grid.linestyle': '-', 'grid.linewidth': 0.8, 'hatch.color': 'black', 'hatch.linewidth': 1.0, 'hist.bins': 10, 'image.aspect': 'equal', 'image.cmap': 'viridis', 'image.composite_image': True, 'image.interpolation': 'nearest', 'image.lut': 256, 'image.origin': 'upper', 'image.resample': True, 'interactive': True, 'keymap.all_axes': ['a'], 'keymap.back': ['left', 'c', 'backspace', 'MouseButton.BACK'], 'keymap.copy': ['ctrl+c', 'cmd+c'], 'keymap.forward': ['right', 'v', 'MouseButton.FORWARD'], 'keymap.fullscreen': ['f', 'ctrl+f'], 'keymap.grid': ['g'], 'keymap.grid_minor': ['G'], 'keymap.help': ['f1'], 'keymap.home': ['h', 'r', 'home'], 'keymap.pan': ['p'], 'keymap.quit': ['ctrl+w', 'cmd+w', 'q'], 'keymap.quit_all': ['W', 'cmd+W', 'Q'], 'keymap.save': ['s', 'ctrl+s'], 'keymap.xscale': ['k', 'L'], 'keymap.yscale': ['l'], 'keymap.zoom': ['o'], 'legend.borderaxespad': 0.5, 'legend.borderpad': 0.4, 'legend.columnspacing': 2.0, 'legend.edgecolor': '0.8', 'legend.facecolor': 'inherit', 'legend.fancybox': True, 'legend.fontsize': 'medium', 'legend.framealpha': 0.8, 'legend.frameon': True, 'legend.handleheight': 0.7, 'legend.handlelength': 2.0, 'legend.handletextpad': 0.8, 'legend.labelspacing': 0.5, 'legend.loc': 'best', 'legend.markerscale': 1.0, 'legend.numpoints': 1, 'legend.scatterpoints': 1, 'legend.shadow': False, 'legend.title_fontsize': None, 'lines.antialiased': True, 'lines.color': 'C0', 'lines.dash_capstyle': 'butt', 'lines.dash_joinstyle': 'round', 'lines.dashdot_pattern': [6.4, 1.6, 1.0, 1.6], 'lines.dashed_pattern': [3.7, 1.6], 'lines.dotted_pattern': [1.0, 1.65], 'lines.linestyle': '-', 'lines.linewidth': 1.5, 'lines.marker': 'None', 'lines.markeredgecolor': 'auto', 'lines.markeredgewidth': 1.0, 'lines.markerfacecolor': 'auto', 'lines.markersize': 6.0, 'lines.scale_dashes': True, 'lines.solid_capstyle': 'projecting', 'lines.solid_joinstyle': 'round', 'markers.fillstyle': 'full', 'mathtext.bf': 'sans:bold', 'mathtext.cal': 'cursive', 'mathtext.default': 'it', 'mathtext.fallback_to_cm': True, 'mathtext.fontset': 'dejavusans', 'mathtext.it': 'sans:italic', 'mathtext.rm': 'sans', 'mathtext.sf': 'sans', 'mathtext.tt': 'monospace', 'patch.antialiased': True, 'patch.edgecolor': 'black', 'patch.facecolor': 'C0', 'patch.force_edgecolor': False, 'patch.linewidth': 1.0, 'path.effects': [], 'path.simplify': True, 'path.simplify_threshold': 0.1111111111111111, 'path.sketch': None, 'path.snap': True, 'pdf.compression': 6, 'pdf.fonttype': 3, 'pdf.inheritcolor': False, 'pdf.use14corefonts': False, 'pgf.preamble': '', 'pgf.rcfonts': True, 'pgf.texsystem': 'xelatex', 'polaraxes.grid': True, 'ps.distiller.res': 6000, 'ps.fonttype': 3, 'ps.papersize': 'letter', 'ps.useafm': False, 'ps.usedistiller': False, 'savefig.bbox': None, 'savefig.directory': '~', 'savefig.dpi': 'figure', 'savefig.edgecolor': 'white', 'savefig.facecolor': 'white', 'savefig.format': 'png', 'savefig.frameon': True, 'savefig.jpeg_quality': 95, 'savefig.orientation': 'portrait', 'savefig.pad_inches': 0.1, 'savefig.transparent': False, 'scatter.edgecolors': 'face', 'scatter.marker': 'o', 'svg.fonttype': 'path', 'svg.hashsalt': None, 'svg.image_inline': True, 'text.antialiased': True, 'text.color': 'black', 'text.hinting': 'auto', 'text.hinting_factor': 8, 'text.latex.preamble': '', 'text.latex.preview': False, 'text.latex.unicode': True, 'text.usetex': False, 'timezone': 'UTC', 'tk.window_focus': False, 'toolbar': 'toolbar2', 'verbose.fileo': 'sys.stdout', 'verbose.level': 'silent', 'webagg.address': '127.0.0.1', 'webagg.open_in_browser': True, 'webagg.port': 8988, 'webagg.port_retries': 50, 'xtick.alignment': 'center', 'xtick.bottom': True, 'xtick.color': 'black', 'xtick.direction': 'out', 'xtick.labelbottom': True, 'xtick.labelsize': 'medium', 'xtick.labeltop': False, 'xtick.major.bottom': True, 'xtick.major.pad': 3.5, 'xtick.major.size': 3.5, 'xtick.major.top': True, 'xtick.major.width': 0.8, 'xtick.minor.bottom': True, 'xtick.minor.pad': 3.4, 'xtick.minor.size': 2.0, 'xtick.minor.top': True, 'xtick.minor.visible': False, 'xtick.minor.width': 0.6, 'xtick.top': False, 'ytick.alignment': 'center_baseline', 'ytick.color': 'black', 'ytick.direction': 'out', 'ytick.labelleft': True, 'ytick.labelright': False, 'ytick.labelsize': 'medium', 'ytick.left': True, 'ytick.major.left': True, 'ytick.major.pad': 3.5, 'ytick.major.right': True, 'ytick.major.size': 3.5, 'ytick.major.width': 0.8, 'ytick.minor.left': True, 'ytick.minor.pad': 3.4, 'ytick.minor.right': True, 'ytick.minor.size': 2.0, 'ytick.minor.visible': False, 'ytick.minor.width': 0.6, 'ytick.right': False})  您可以调整每个图的任意参数设置，一般的图像设置如固定图形大小，刻度标签字体大小以及其他一些参数。\n通过这种设置，可以减少很多重复的代码量\n# 去掉顶部和右侧的线条Remove top and right spines rcParams[\u0026#39;axes.spines.top\u0026#39;] = False rcParams[\u0026#39;axes.spines.right\u0026#39;] = False # 设置图的尺寸Set fixed figure size rcParams[\u0026#39;figure.figsize\u0026#39;] = [12, 9] # 设置图片像素清晰度 Set dots per inch to 300, very high quality images rcParams[\u0026#39;figure.dpi\u0026#39;] = 300 # 设置自动调整布局Enable autolayout rcParams[\u0026#39;figure.autolayout\u0026#39;] = True # 设置全局字号Set global fontsize rcParams[\u0026#39;font.style\u0026#39;] = 16 # 刻度字号Fontsize of ticklabels rcParams[\u0026#39;xtick.labelsize\u0026#39;] = 10 rcParams[\u0026#39;ytick.labelsize\u0026#39;] = 10 \n5. Pandas全局设置 就像Matplotlib一样，pandas具有可以使用的全局设置。 当然，它们大多数与显示选项有关。\n get_option() - 获取pandas单个选项 set_option() — 设置pandas单个选项 reset_option() — 重置pandas选项值  我更喜欢显示所有的列，lets go\npd.set_option(\u0026#39;display.max_columns\u0026#39;, None) df.head()   6. 代码获取  直接下载 github更多代码  ","permalink":"/blog/kaggle%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/","summary":"点击上方图片购买课程   Kaggle是个很棒的地方,对于数据科学家和机器学习工程师来说，这是一个知识的金矿。可以在同一地点找到由本领域专家带来的高质量，高效，可重现，很棒的代码。自推出以来，它已经举办了164场比赛。这些比赛吸引了来自世界各地的专家和专家加入该平台。结果，每场比赛以及Kaggle提供的大量开源数据集都有许多高质量的笔记本和脚本。\n在数据科学之旅的开始，我将去Kaggle查找数据集以练习我的技能。每当我查看其他内核时，我都会对代码的复杂性感到不知所措，然后马上回避。\n但是现在，我发现自己花费了大量时间阅读其他笔记本并提交竞赛文件。有时候，有些东西值得您度过整个周末。有时，我会发现简单但致命的有效代码技巧和最佳实践，这些技巧和最佳实践只能通过观察其他专家来学习。\n在整个系列中，您会发现我在典型的数据科学工作流程中可能有用的任何内容，包括与通用库相关的代码快捷方式，Kaggle的顶级行业专家遵循的最佳实践等，这些都是我在学习过程中学到的。\n1. 只绘制相关系数矩阵的下三角部分 好的相关矩阵可以说明数据集中目标变量之间的相关性\nimport pandas as pd df = pd.read_csv(\u0026#39;data/melbourne_housing_raw.csv\u0026#39;) df.head()   import seaborn as sns import matplotlib.pyplot as plt plt.figure(figsize=(16, 12)) cmap = sns.diverging_palette(250, 15, s=75, l=40, n=9, center=\u0026#34;light\u0026#34;, as_cmap=True) sns.heatmap(df.corr(), center=0, annot=True, fmt=\u0026#39;.2f\u0026#39;, square=True, cmap=cmap) plt.show()   但上图中，数据集中存在大量的特征，导致相似矩阵过于庞大，让人看起来不知所措。\n相关矩阵大部分沿主对角线对称，因此它们包含重复数据。 同样，对角线本身也没有用。 让我们看看如何只绘制有用的一半：\nimport numpy as np # 计算相关系数 matrix = df.corr() # 创建遮罩（为了只显示下三角） mask = np.triu(np.ones_like(matrix, dtype=bool)) # 定制调色板 cmap = sns.","title":"Kaggle数据挖掘最佳实践"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n学Python一段时间后，都会听到一句“Life is short, so we learn Python! ”，恭喜你选择Python这门强大而有趣的语言。\n输出数字a的绝对数 在学习代码之前，我给大家看一段话\n There is such a number a, if a is greater than or equal to 0, we will print a; if a is less than 0, we will print -a\n 相信大家一看就明白了这是求某数的绝对值方法的英文描述。下面我们用精炼的Python语言表示\na = -50 if a \u0026gt;= 0: print(a) else: print(-a) 50  Python号称是最说人话的编程语言，以最接近人类理解的方式构建代码。\nPython与英语对比 从上面的例子中，我们已经知道了Python和英语一样都是一种语言，学习语言就需要学习基本的知识点，包括背单词和了解语法。\n   英语 Python 例如     单词 数据类型 列表、字符串、字典等   语法 逻辑语句 if条件判读语句、for循环语句等    每天积累一点点 本部分非必须，仅仅为了展示python也可以作图\n#mac #!pip3 install matplotlib #win !pip install matplotlib Looking in indexes: https://mirrors.aliyun.com/pypi/simple/ Requirement already satisfied: matplotlib in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (3.2.1) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,\u0026gt;=2.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.4.7) Requirement already satisfied: cycler\u0026gt;=0.10 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (0.10.0) Requirement already satisfied: numpy\u0026gt;=1.11 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.18.2) Requirement already satisfied: kiwisolver\u0026gt;=1.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.2.0) Requirement already satisfied: python-dateutil\u0026gt;=2.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.8.1) Requirement already satisfied: six in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from cycler\u0026gt;=0.10-\u0026gt;matplotlib) (1.14.0)  import matplotlib.pyplot as plt import math %matplotlib inline ability = 1 scale = 1.01 records = [] days = range(1, 365) for day in days: ability = ability*scale records.append(ability) plt.plot(days, records) plt.title(\u0026#39;Be better everyday!\u0026#39;) Text(0.5, 1.0, 'Be better everyday!')   Python是面向对象的编程语言 面向对象是最难理解的部分，这里大家只需要记住\n 类型和对象是紧密绑定的，说对象就是在说类型。 不同的类型有不同的功能，都是为了更高效的实现人类需求或者数据分析需求     类型 实例(对象) 实例(对象) 方法     猪 村东头老王家的猪 把猪把粮食变成肉 猪.产肉   牛 村东头老张家的耕牛 把粮食变成畜力 牛.耕地   列表 hobbies = ['跑步', '乒乓球'， '篮球'，'篮球'] 统计某群体爱好的分布, 查看各爱好的人数 hobbies.count('篮球')   字符串 str1 = \u0026quot;Hello，World!\u0026quot; 将文本内容由World更改为Python str1.replace('World', 'Python')   字典 grade = {'David':98, 'Mary':88,...} 方便数据检索 grade.get('David')   \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip;    Python中的数据类型 不同的数据类型适合处理不同的数据，有不同的应用场景。\n   数据类型 例子     数字 a = 5   字符串 my_str = \u0026quot;abcdefg\u0026quot;   列表 my_list = [1, 2, 3]   元组 my_tuple = (1, 2, 3)   字典 my_dict = {'David': 25, 'Mark':30}   空值 None     点击上方图片购买课程   ","permalink":"/blog/basic-01-python-is-a-language/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n学Python一段时间后，都会听到一句“Life is short, so we learn Python! ”，恭喜你选择Python这门强大而有趣的语言。\n输出数字a的绝对数 在学习代码之前，我给大家看一段话\n There is such a number a, if a is greater than or equal to 0, we will print a; if a is less than 0, we will print -a\n 相信大家一看就明白了这是求某数的绝对值方法的英文描述。下面我们用精炼的Python语言表示\na = -50 if a \u0026gt;= 0: print(a) else: print(-a) 50  Python号称是最说人话的编程语言，以最接近人类理解的方式构建代码。\nPython与英语对比 从上面的例子中，我们已经知道了Python和英语一样都是一种语言，学习语言就需要学习基本的知识点，包括背单词和了解语法。\n   英语 Python 例如     单词 数据类型 列表、字符串、字典等   语法 逻辑语句 if条件判读语句、for循环语句等    每天积累一点点 本部分非必须，仅仅为了展示python也可以作图","title":"Python是一种语言"},{"content":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\nWin环境配置 注意：\n Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。 如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置。  Typora软件下载 链接:https://pan.baidu.com/s/17yNfZbkNbnYsBko4eai0Ig 密码:ceve\n Jupyter使用方法  一、Python安装 anaconda官网 https://www.anaconda.com/\n注意  慢一点按照视频操作 勾选 Add Anaconda 3 to the system PATH environment variable 勾选 Register Anaconda 3 as the system 3.9  \n二、pip配置 pip是python的命令行安装工具，可以帮我们安装第三方库。\n2.1 更改pip镜像 为了保证安装的速度和成功率，命令行执行\npip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 2.2 使用方法 pip install packagename 2.3 第三方库安装方法   pip安装法\n 单个库的安装，命令行执行  pip3 install 库的名字   多个库的安装， 命令行执行  pip3 install -r requirements.txt      pypi本地安装\n  在https://pypi.org/ 搜库，点进去\n  找Download files，下载whl或压缩文件到桌面。例如文件名 xxx.whl\n  命令行依次执行\n   cd desktop\n  pip3 install xxx.whl\n      github本地安装（如github项目中存在setup.py文件，可以安装使用）\n  下载github项目至桌面，解压\n  命令依次执行 - cd desktop - python3 setup.py install\n  \n三、Jupyter notebook 3.1 安装 命令行执行\npip install jupyter 3.2 调用 命令行执行\njupyter notebook 3.3 常用快捷键    jupyter内快捷键 功能     ESC+A（ESC+B） 当前单元格上(下)新建一个新的Cell   D+D 删除当前单元格   Shift+Enter 执行单元格内的Python代码   ESC+M 单元格由代码模式转为标记模式    个人建议： Markdown语法特别好用，强烈建议学习，顺便安装一个Typora软件。\n\n四、Tips 环境配置太难，而且有时候电脑还会出现一些视频里出现不了的问题。这时不妨在==淘宝==搜python环境配置，寻找一对一远程协助\n 点击上方图片购买课程   ","permalink":"/blog/basic-02-win-settings/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\nWin环境配置 注意：\n Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。 如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置。  Typora软件下载 链接:https://pan.baidu.com/s/17yNfZbkNbnYsBko4eai0Ig 密码:ceve\n Jupyter使用方法  一、Python安装 anaconda官网 https://www.anaconda.com/\n注意  慢一点按照视频操作 勾选 Add Anaconda 3 to the system PATH environment variable 勾选 Register Anaconda 3 as the system 3.9  \n二、pip配置 pip是python的命令行安装工具，可以帮我们安装第三方库。\n2.1 更改pip镜像 为了保证安装的速度和成功率，命令行执行\npip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 2.2 使用方法 pip install packagename 2.3 第三方库安装方法   pip安装法\n 单个库的安装，命令行执行  pip3 install 库的名字   多个库的安装， 命令行执行  pip3 install -r requirements.","title":"Win电脑Python环境配置"},{"content":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\nMac环境配置 注意：\n Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。 如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置。  Typora软件下载 链接:https://pan.baidu.com/s/17yNfZbkNbnYsBko4eai0Ig 密码:ceve\n Jupyter使用方法  一、Python安装 anaconda官网 https://www.anaconda.com/\nmac自带python2，为了与python2区别，凡是在命令行中使用pip和python，我们都要加上3。\n安装成功的标准是==命令行可以调用python3==\n$ python3 \n命令行打开的方法 ==command+空格== 启动 ==聚焦搜索Spotlight==，再输入terminal\n\n二、pip3设置 pip3是python的命令行安装工具，可以帮我们安装第三方库。\n2.1 更改pip3镜像 为了保证安装的速度和成功率，命令行执行\npip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 2.2 使用方法 pip3 install packagename 2.3 第三方库安装方法   pip安装法\n 单个库的安装，命令行执行  pip3 install 库的名字   多个库的安装， 命令行执行  pip3 install -r requirements.txt      pypi本地安装\n  在https://pypi.org/ 搜库，点进去\n  找Download files，下载whl或压缩文件到桌面。例如文件名 xxx.whl\n  命令行依次执行\n   cd desktop\n  pip3 install xxx.whl\n      github本地安装（如github项目中存在setup.py文件，可以安装使用）\n  下载github项目至桌面，解压\n  命令依次执行 - cd desktop - python3 setup.py install\n  \n三、Jupyter notebook 3.1 安装 命令行执行\npip3 install jupyter 3.2 调用 命令行执行\njupyter notebook 3.3 常用快捷键    jupyter内快捷键 功能     ESC+A（ESC+B） 当前单元格上(下)新建一个新的Cell   D+D 删除当前单元格   Shift+Enter 执行单元格内的Python代码   ESC+M 单元格由代码模式转为Markdown标记模式    推荐： Markdown语法特别好用，强烈建议学习，顺便安装一个Typora软件。\n\n四、Tips 环境配置太难，而且有时候电脑还会出现一些视频里出现不了的问题。这时不妨在==淘宝==搜python环境配置，寻找一对一远程协助\n 点击上方图片购买课程   ","permalink":"/blog/basic-03-mac-settings/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\nMac环境配置 注意：\n Anaconda和Python都是python。一定要记住二选其一，不要都安装，不然在学习python第三方包安装的时，你会遇到一些麻烦。 如果之前没安装过两个软件，建议从头到尾按照我的视频进行电脑配置。  Typora软件下载 链接:https://pan.baidu.com/s/17yNfZbkNbnYsBko4eai0Ig 密码:ceve\n Jupyter使用方法  一、Python安装 anaconda官网 https://www.anaconda.com/\nmac自带python2，为了与python2区别，凡是在命令行中使用pip和python，我们都要加上3。\n安装成功的标准是==命令行可以调用python3==\n$ python3 \n命令行打开的方法 ==command+空格== 启动 ==聚焦搜索Spotlight==，再输入terminal\n\n二、pip3设置 pip3是python的命令行安装工具，可以帮我们安装第三方库。\n2.1 更改pip3镜像 为了保证安装的速度和成功率，命令行执行\npip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 2.2 使用方法 pip3 install packagename 2.3 第三方库安装方法   pip安装法\n 单个库的安装，命令行执行  pip3 install 库的名字   多个库的安装， 命令行执行  pip3 install -r requirements.txt      pypi本地安装\n  在https://pypi.","title":"Mac电脑Python环境配置"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n网络爬虫与文本分析实际上主要是对字符串做的处理，一定要熟悉字符串哦\n\n字符串string 定义 字符串是以 单引号 或 双引号 或 三引号 括起来的任意文本，如\n \u0026lsquo;abc\u0026rsquo; \u0026ldquo;abc\u0026rdquo; \u0026lsquo;\u0026lsquo;\u0026lsquo;abc\u0026rsquo;\u0026rsquo;\u0026rsquo; \u0026ldquo;\u0026ldquo;\u0026ldquo;abc\u0026rdquo;\u0026rdquo;\u0026rdquo;  a = \u0026#39;abc\u0026#39; a 'abc'  \u0026#34;abc\u0026#34; 'abc'  \u0026#39;\u0026#39;\u0026#39;abc\u0026#39;\u0026#39;\u0026#39; 'abc'  \u0026#34;\u0026#34;\u0026#34;abc\u0026#34;\u0026#34;\u0026#34; 'abc'  print(\u0026#39;abc\u0026#39;) print(\u0026#34;abc\u0026#34;) print(\u0026#39;\u0026#39;\u0026#39;abc\u0026#39;\u0026#39;\u0026#39;) print(\u0026#34;\u0026#34;\u0026#34;abc\u0026#34;\u0026#34;\u0026#34;) abc abc abc abc  print(\u0026#39;abc\u0026#39;) print(\u0026#39;efg\u0026#39;) abc efg  注意:\n 这里所说的引号都是英文引号 '' 或 \u0026quot;\u0026quot; 本身不是字符串的一部分，因此，字符串 'abc' 只有a，b，c这3个字符。 notebook中只显示最后一个，所以这里用了两个print   **Tips: **这里所说的引号都是英文引号\n'' 或 \u0026quot;\u0026quot; 本身不是字符串的一部分，因此，字符串 'abc' 只有a，b，c这3个字符。\nnotebook中只显示最后一个，所以这里用了两个print\n \n拼接+ 按顺序拼接\na = \u0026#39;P\u0026#39; b = \u0026#39;ython\u0026#39; print(a+b) print(b+a) Python ythonP  a = \u0026#39;P\u0026#39; print(a+b) print(b+a) \n切片 切片就像切糕，把自己想要的那块切下来\n name = \u0026#39;My Name is Mike\u0026#39; name[0] 'M'  name[-15] 'M'  name[3:6] 'Nam'  name[-12:-9] 'Nam'  name[0:2] 'My'  name[:2] 'My'  name[5:] 'me is Mike'  name[-7:] 'is Mike'  \n切片总结    切片表达式 解读     从左往右 索引值从0开始，0表示\u0026rsquo;第一个'   从右向左 -1表示倒数第一个，-2表示倒数第二个   a:b 选取列表索引位置为a，a+1...b-2, b-1的值   a: 选取列表中a之后的所有元素(含a)   :b 选取列表中b之前的所有元素(不含b)    字符串常用方法 再次强调，数据类(型)与猪牛羊不同的动物类型一样，都有满足人类需要的特殊本领(方法)。方法可以理解为数据类(型)一种特殊的本性、属性、特性\n   字符串常用方法 功能     str.lower() 变小写   str.upper() 变大写   str.split(sep) 使用sep将字符串分割，默认sep为空格   str.replace(old, new) 将str中的old替换为new   str.format() 向str中填充内容    words = \u0026#39;Python is poweful!\u0026#39; words.lower() 'python is poweful!'  words.upper() 'PYTHON IS POWEFUL!'  words 'Python is poweful!'  words.split(\u0026#39; \u0026#39;) ['Python', 'is', 'poweful!']  words.replace(\u0026#39;Python\u0026#39;, \u0026#39;Python programing language\u0026#39;) 'Python programing language is poweful!'  需要发送每个员工的工资组成详情。\n\u0026#34;张三,你这个月的工资是2310元；以下是你的工资详情。。。。\u0026#34; \u0026#34;李四,你这个月的工资是3456元；以下是你的工资详情。。。。\u0026#34; \u0026#34;王五,你这个月的工资是2431元；以下是你的工资详情。。。。\u0026#34; 如何自动化自动化填充?\ntemplate = \u0026#39;{name},你这个月的工资是{salary}元；以下是你的工资详情\u0026#39; print(template.format(name=\u0026#39;张三\u0026#39;, salary=\u0026#39;2310\u0026#39;)) print(template.format(name=\u0026#39;李四\u0026#39;, salary=\u0026#39;3456\u0026#39;)) print(template.format(name=\u0026#39;王五\u0026#39;, salary=\u0026#39;2431\u0026#39;)) 张三,你这个月的工资是2310元；以下是你的工资详情 李四,你这个月的工资是3456元；以下是你的工资详情 王五,你这个月的工资是2431元；以下是你的工资详情  \n转义符\\ 如果字符串内部既包含 单引号 又包含 双引号， 会发生什么？\nprint(\u0026#39;I\u0026#39;m \u0026#34;OK\u0026#34;!\u0026#39;)  File \u0026quot;\u0026lt;ipython-input-28-af5dc904b170\u0026gt;\u0026quot;, line 1 print('I'm \u0026quot;OK\u0026quot;!') ^ SyntaxError: invalid syntax  # 可以用 转义字符\\ 来标识，比如： print(\u0026#39;I\\\u0026#39;m \\\u0026#34;OK\\\u0026#34;!\u0026#39;) I'm \u0026quot;OK\u0026quot;!  常见的转义符还有\n \\n 换行 \\t 制表符 字符\\ 本身也要转义，所以 \\\\ 表示的字符就是 \\  可以试着自己运行下面代码，看看下面打印结果是?：\nprint(\u0026#39;Hello\\tWorld!\u0026#39;) print(\u0026#39;转义\\n换行!\u0026#39;) print(\u0026#39;反斜杠线\\\\\u0026#39;) \nprint(\u0026#39;Hello\\tWorld!\u0026#39;) print(\u0026#39;Hello World!\u0026#39;) Hello\tWorld! Hello World!  print(\u0026#39;转义\\n换行!\u0026#39;) 转义 换行!  print(\u0026#39;反斜杠线\\\\\u0026#39;) 反斜杠线\\  \nr 如果字符串里面有很多字符都需要转义，就需要加很多\\,\n为了简化，Python还允许用r''表示''内部的字符串默认不转义,例如\nprint(\u0026#39;\\\\\\t\\\\\u0026#39;) print(r\u0026#39;\\\\\\t\\\\\u0026#39;) print(\u0026#39;hello world!\u0026#39;) \nprint(\u0026#39;\\\\\\t\\\\\u0026#39;) \\\t\\  print(r\u0026#39;\\\\\\t\\\\\u0026#39;) \\\\\\t\\\\  \n 点击上方图片购买课程   ","permalink":"/blog/basic-04-string/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n网络爬虫与文本分析实际上主要是对字符串做的处理，一定要熟悉字符串哦\n\n字符串string 定义 字符串是以 单引号 或 双引号 或 三引号 括起来的任意文本，如\n \u0026lsquo;abc\u0026rsquo; \u0026ldquo;abc\u0026rdquo; \u0026lsquo;\u0026lsquo;\u0026lsquo;abc\u0026rsquo;\u0026rsquo;\u0026rsquo; \u0026ldquo;\u0026ldquo;\u0026ldquo;abc\u0026rdquo;\u0026rdquo;\u0026rdquo;  a = \u0026#39;abc\u0026#39; a 'abc'  \u0026#34;abc\u0026#34; 'abc'  \u0026#39;\u0026#39;\u0026#39;abc\u0026#39;\u0026#39;\u0026#39; 'abc'  \u0026#34;\u0026#34;\u0026#34;abc\u0026#34;\u0026#34;\u0026#34; 'abc'  print(\u0026#39;abc\u0026#39;) print(\u0026#34;abc\u0026#34;) print(\u0026#39;\u0026#39;\u0026#39;abc\u0026#39;\u0026#39;\u0026#39;) print(\u0026#34;\u0026#34;\u0026#34;abc\u0026#34;\u0026#34;\u0026#34;) abc abc abc abc  print(\u0026#39;abc\u0026#39;) print(\u0026#39;efg\u0026#39;) abc efg  注意:\n 这里所说的引号都是英文引号 '' 或 \u0026quot;\u0026quot; 本身不是字符串的一部分，因此，字符串 'abc' 只有a，b，c这3个字符。 notebook中只显示最后一个，所以这里用了两个print   **Tips: **这里所说的引号都是英文引号\n'' 或 \u0026quot;\u0026quot; 本身不是字符串的一部分，因此，字符串 'abc' 只有a，b，c这3个字符。","title":"数据类型-字符串"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n 当你不知道用什么数据类型的时候，一定要记得list，大多数的脏活累活ta都帮你搞定\n \n列表list 定义 list是一种有序的集合,内部可以由任何数据类型的组成的\n现在有5位员工的汇总信息，\n   id 姓名 年龄 性别 爱好     1 David 25 Male Basketball, Pingpang, Hiking   2 Mary 23 Female Reading, Movies   3 Henry 23 Male Diving, Hiking   4 Swift 21 Male Football, Music   5 Lenard 26 Male Stay at Home    现在我们需要用一种格式去组织5位员工的信息，以列表为例\nnames = [\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Swift\u0026#39;, \u0026#39;Lenard\u0026#39;] ages = [25, 23, 23, 21, 26] hobbies = [[\u0026#39;Basketball\u0026#39;, \u0026#39;Pingpang\u0026#39;, \u0026#39;Hiking\u0026#39;], [\u0026#39;Reading\u0026#39;, \u0026#39;Movies\u0026#39;], [\u0026#39;Diving\u0026#39;, \u0026#39;Hiking\u0026#39;], [\u0026#39;Football\u0026#39;, \u0026#39;Music\u0026#39;], [\u0026#39;Stay at Home\u0026#39;]] print(type(names)) print(type(ages)) print(type(hobbies)) print(names) print(ages) print(hobbies) \u0026lt;class 'list'\u0026gt; \u0026lt;class 'list'\u0026gt; \u0026lt;class 'list'\u0026gt; ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] [25, 23, 23, 21, 26] [['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']]  **多想一下： **组织数据的方式有很多种，list也可以用不同的方式去组织，大家可以自己想一想。\n\n拼接 a1 = [\u0026#39;Michael\u0026#39;, \u0026#39;Bob\u0026#39;] a2 = [\u0026#39;David\u0026#39;, \u0026#39;Lee\u0026#39;] print(a1 + a2) print(a2 + a1) ['Michael', 'Bob', 'David', 'Lee'] ['David', 'Lee', 'Michael', 'Bob']  \n拆包 注意： 等号两边长度相同\nname, age = [\u0026#39;David\u0026#39;, 25] print(name) print(age) David 25  \n切片 列表的切片与字符串类似\n   id 姓名 年龄 性别 爱好 正索引 倒索引     1 David 25 Male Basketball, Pingpang, Hiking 0 -5   2 Mary 23 Female Reading, Movies 1 -4   3 Henry 23 Male Diving, Hiking 2 -3   4 Swift 21 Male Football, Music 3 -2   5 Lenard 26 Male Stay at Home 4 -1    names = [\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Swift\u0026#39;, \u0026#39;Lenard\u0026#39;] names ['David', 'Mary', 'Henry', 'Swift', 'Lenard']  print(names[2]) print(names[-3]) Henry Henry  print(names[0:3]) print(names[-5:-2]) ['David', 'Mary', 'Henry'] ['David', 'Mary', 'Henry']  print(names[2:]) print(names[-3:]) ['Henry', 'Swift', 'Lenard'] ['Henry', 'Swift', 'Lenard']  print(names[:2]) print(names[:-3]) ['David', 'Mary'] ['David', 'Mary']  \n列表常用方法    常用方法 功能     list.append(a) 向list中添加元素a   list.extend(lst) 向list中添加列表lst   list.count(a) 统计list中a的个数    names = [\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Swift\u0026#39;, \u0026#39;Lenard\u0026#39;] print(names) names.append(\u0026#39;Mary\u0026#39;) print(names) ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary']  names = [\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Swift\u0026#39;, \u0026#39;Lenard\u0026#39;] print(names) names.extend([\u0026#39;Mary\u0026#39;]) print(names) ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary']  ages = [25, 23, 23, 21, 26] print(ages.count(23)) 2  one = [\u0026#39;David\u0026#39;] print(one[-1]) print(one[0]) David David  \n元组tuple 形似列表，也有\n 元组拼接 切片 拆包  name_list = [\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Swift\u0026#39;, \u0026#39;Lenard\u0026#39;] name_tuple = (\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Swift\u0026#39;, \u0026#39;Lenard\u0026#39;) print(type(name_list)) print(type(name_tuple)) print(name_list) print(name_tuple) \u0026lt;class 'list'\u0026gt; \u0026lt;class 'tuple'\u0026gt; ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ('David', 'Mary', 'Henry', 'Swift', 'Lenard')  print(name_list==name_tuple) False  \n集合 names2 = [\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;David\u0026#39;, \u0026#39;Swift\u0026#39;, \u0026#39;David\u0026#39;] print(set(names2)) {'Swift', 'Mary', 'David'}  集合的方法  setdata.add(ele) 向setdata中加入ele  name_set = set(names2) print(name_set) name_set.add(\u0026#39;William\u0026#39;) print(name_set) {'Swift', 'Mary', 'David'} {'William', 'Swift', 'Mary', 'David'}  name_set[2] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-20-98cb669cc173\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 name_set[2] TypeError: 'set' object is not subscriptable  注意： 集合不能切片\n\n 点击上方图片购买课程   ","permalink":"/blog/basic-05-list-tuple-set/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n 当你不知道用什么数据类型的时候，一定要记得list，大多数的脏活累活ta都帮你搞定\n \n列表list 定义 list是一种有序的集合,内部可以由任何数据类型的组成的\n现在有5位员工的汇总信息，\n   id 姓名 年龄 性别 爱好     1 David 25 Male Basketball, Pingpang, Hiking   2 Mary 23 Female Reading, Movies   3 Henry 23 Male Diving, Hiking   4 Swift 21 Male Football, Music   5 Lenard 26 Male Stay at Home    现在我们需要用一种格式去组织5位员工的信息，以列表为例\nnames = [\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Swift\u0026#39;, \u0026#39;Lenard\u0026#39;] ages = [25, 23, 23, 21, 26] hobbies = [[\u0026#39;Basketball\u0026#39;, \u0026#39;Pingpang\u0026#39;, \u0026#39;Hiking\u0026#39;], [\u0026#39;Reading\u0026#39;, \u0026#39;Movies\u0026#39;], [\u0026#39;Diving\u0026#39;, \u0026#39;Hiking\u0026#39;], [\u0026#39;Football\u0026#39;, \u0026#39;Music\u0026#39;], [\u0026#39;Stay at Home\u0026#39;]] print(type(names)) print(type(ages)) print(type(hobbies)) print(names) print(ages) print(hobbies) \u0026lt;class 'list'\u0026gt; \u0026lt;class 'list'\u0026gt; \u0026lt;class 'list'\u0026gt; ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] [25, 23, 23, 21, 26] [['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']]  **多想一下： **组织数据的方式有很多种，list也可以用不同的方式去组织，大家可以自己想一想。","title":"数据类型-列表元组集合"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n 最有层次感的数据类型，特别干净整洁。在写爬虫时，我们最希望遇到的数据类型就是ta\n 下图就是最简单的字典的样式，键值对 key-value-pairs\n \n字典 字典是有key，有value的 key-value-pair类型数据（键-值对）\n   id 姓名 年龄 性别 爱好     1 David 25 Male Basketball, Pingpang, Hiking   2 Mary 23 Female Reading, Movies   3 Henry 23 Male Diving, Hiking    将上面的员工信息以关键词name、age、hobbies 组织成字典数据\n空字典 david = dict() print(david) {}  填充 david[\u0026#39;age\u0026#39;] = 23 print(david) {'age': 23}  david[\u0026#39;hobbies\u0026#39;] = [\u0026#39;Basketball\u0026#39;, \u0026#39;Pingpang\u0026#39;, \u0026#39;Hiking\u0026#39;] print(david) {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}  david[\u0026#39;gender\u0026#39;] = \u0026#39;Male\u0026#39; print(david) {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}  \n更新 david[\u0026#39;age\u0026#39;] = 25 print(david) {'age': 25, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}  完整的信息 infos = {\u0026#39;David\u0026#39;:{\u0026#39;age\u0026#39;:25, \u0026#39;gender\u0026#39;:\u0026#39;Male\u0026#39;, \u0026#39;hobbies\u0026#39;:[\u0026#39;Basketball\u0026#39;, \u0026#39;Pingpang\u0026#39;, \u0026#39;Hiking\u0026#39;]}, \u0026#39;Mary\u0026#39;:{\u0026#39;age\u0026#39;:23, \u0026#39;gender\u0026#39;: \u0026#39;Female\u0026#39;, \u0026#39;hobbies\u0026#39;: [\u0026#39;Reading\u0026#39;, \u0026#39;Movies\u0026#39;]}, \u0026#39;Henry\u0026#39;:{\u0026#39;age\u0026#39;:23, \u0026#39;gender\u0026#39;: \u0026#39;Male\u0026#39;, \u0026#39;hobbies\u0026#39;: [\u0026#39;Diving\u0026#39;, \u0026#39;Hiking\u0026#39;]} } print(infos) {'David': {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, 'Mary': {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, 'Henry': {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}}  字典的方法    方法 效果     dictdata.items() 返回dictdata所有item   dictdata.keys() 返回dictdata的所有关键词   dictdata.values() 返回dictdata的所有值   dictdata.get(keystr) 获取关键词keystr对应的值   dictdata[keystr] 获取关键词keystr对应的值    infos.items() dict_items([('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}), ('Mary', {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}), ('Henry', {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']})])  #把infos.items()转化为列表 list(infos.items())[0] ('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']})  infos.keys() dict_keys(['David', 'Mary', 'Henry'])  infos.values() dict_values([{'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}])  print(infos[\u0026#39;David\u0026#39;]) print(infos.get(\u0026#39;David\u0026#39;)) {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']} {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}  注意： 两种功能等同，但是get获取方法更加安全稳定。\n例如\nprint(infos[\u0026#39;Will\u0026#39;]) --------------------------------------------------------------------------- KeyError Traceback (most recent call last) \u0026lt;ipython-input-16-f7c283c8ad8e\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 print(infos['Will']) KeyError: 'Will'  print(infos.get(\u0026#39;Will\u0026#39;)) None   点击上方图片购买课程   ","permalink":"/blog/basic-06-dict/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n 最有层次感的数据类型，特别干净整洁。在写爬虫时，我们最希望遇到的数据类型就是ta\n 下图就是最简单的字典的样式，键值对 key-value-pairs\n \n字典 字典是有key，有value的 key-value-pair类型数据（键-值对）\n   id 姓名 年龄 性别 爱好     1 David 25 Male Basketball, Pingpang, Hiking   2 Mary 23 Female Reading, Movies   3 Henry 23 Male Diving, Hiking    将上面的员工信息以关键词name、age、hobbies 组织成字典数据\n空字典 david = dict() print(david) {}  填充 david[\u0026#39;age\u0026#39;] = 23 print(david) {'age': 23}  david[\u0026#39;hobbies\u0026#39;] = [\u0026#39;Basketball\u0026#39;, \u0026#39;Pingpang\u0026#39;, \u0026#39;Hiking\u0026#39;] print(david) {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}  david[\u0026#39;gender\u0026#39;] = \u0026#39;Male\u0026#39; print(david) {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}","title":"数据类型-字典"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n布尔值Boolean 用于逻辑判断，一般与if结合使用。\na = True print(a) True  True True  False False  其他产生布尔值的方式\n 布尔运算 比较运算 成员运算  布尔运算 中学数学课里的且或非\n   运算符号 功能 例子 等于     x and y 且 True and False False   x or y 或 True or False True   not x 非 not True False    x = True and False print(x) False  x = True or False print(x) True  x = not True print(x) False  x = not False print(x) True  比较运算 注意： =和==的区别，=用来把某个值传给某个变量(赋值操作)，==用来判断两个值(变量)是否相等(判断操作)\n   比较运算符号 功能 例子 等于     == 相等 5==3 False   != 不等于 5!=3 True   \u0026gt; 大于 5\u0026gt;3 True   \u0026lt; 小于 5\u0026lt;3 False   \u0026lt;= 小于等于 5\u0026lt;=3 False   \u0026gt;= 小于 5\u0026gt;=3 True    a = 5 b = 3 x = a\u0026lt;b print(x) print(type(x)) False \u0026lt;class 'bool'\u0026gt;  print(5==5) True  print(5!=5) False  **注意:**比较符两侧必须为同样的数据类型\na = \u0026#39;5\u0026#39; b = 5 print(a\u0026gt;b) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-15-861d7a553a1d\u0026gt; in \u0026lt;module\u0026gt; 2 b = 5 3 ----\u0026gt; 4 print(a\u0026gt;b) TypeError: '\u0026gt;' not supported between instances of 'str' and 'int'  a = \u0026#39;5\u0026#39; b = \u0026#39;5\u0026#39; print(a==b) True  \n成员运算符in 用来判断某个值是否在集合中（这个集合可以使列表、元组、字符串等)\n   案例 结果     4 in [1,2,4] True   4 not in [1,2,4] False   3 in [1,2,4] False   3 not in [1,2,4] True    x = 4 in [1,2,4] x True  y = 4 not in [1,2,4] y False  \nNone 特殊的空值，类似于C语言中的Null。\nNone \u0026#39;\u0026#39; \n''  [] []  dict() {}  type(None) NoneType  \n 点击上方图片购买课程   ","permalink":"/blog/basic-07-boolean-none/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n布尔值Boolean 用于逻辑判断，一般与if结合使用。\na = True print(a) True  True True  False False  其他产生布尔值的方式\n 布尔运算 比较运算 成员运算  布尔运算 中学数学课里的且或非\n   运算符号 功能 例子 等于     x and y 且 True and False False   x or y 或 True or False True   not x 非 not True False    x = True and False print(x) False  x = True or False print(x) True  x = not True print(x) False  x = not False print(x) True  比较运算 注意： =和==的区别，=用来把某个值传给某个变量(赋值操作)，==用来判断两个值(变量)是否相等(判断操作)","title":"数据类型-布尔值\u0026None"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\nif条件判断  condition为布尔值、布尔运算、成员运算符 通常我们理解的condition为布尔值\n#Tab condition = True if condition: print(\u0026#39;condition为True\u0026#39;) else: print(\u0026#39;condition为False\u0026#39;) condition为True  age = 17 if age\u0026gt;=18: print(\u0026#39;你是成年人了\u0026#39;) else: print(\u0026#39;你还是个孩子\u0026#39;) 你还是个孩子  age = 20 if age\u0026gt;=55: print(\u0026#39;老年人\u0026#39;) elif 35\u0026lt;=age\u0026lt;55: print(\u0026#39;中年\u0026#39;) elif 18\u0026lt;=age\u0026lt;35: print(\u0026#39;青年\u0026#39;) elif 0\u0026lt;=age\u0026lt;18: print(\u0026#39;儿童\u0026#39;) 青年  \n特殊的conditon  各种空值(空字符串、空列表等)作用等同于False 各种非空值，作用等同于True  a = None if a: print(\u0026#39;a是非空数据\u0026#39;) else: print(\u0026#39;a是空数据\u0026#39;) a是空数据  \nfor循环  重复做某件事 迭代出数据中的内容(元素)   上面这个图可以解读为 我们想对iterable这个集合中的每一个item:\n做点事(对item做操作)  重复做某事 问题1 计算1+2+3+\u0026hellip;+97+98+99+100=?\n1 + 2 = 3 3 + 3 = 6 6 + 4 = 10 10 + 5 = 15\nresult = 0 #int for i in range(1, 101): result = result + i print(result) 5050  迭代出数据中的内容 从某种“集合”（这个“集合”可以使list、set、tuple等），只要“集合”内部有多个成员就可以使用for循环迭代出内部的成员\nnames = [\u0026#39;David\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Mary\u0026#39;] for name in names: print(name) David Henry Mary  name = \u0026#39;David\u0026#39; for s in name: print(s) D a v i d  infos = {\u0026#39;David\u0026#39;:{\u0026#39;age\u0026#39;:25, \u0026#39;gender\u0026#39;:\u0026#39;Male\u0026#39;}, \u0026#39;Mary\u0026#39;:{\u0026#39;age\u0026#39;:23, \u0026#39;gender\u0026#39;: \u0026#39;Female\u0026#39;}, \u0026#39;Henry\u0026#39;:{\u0026#39;age\u0026#39;:23, \u0026#39;gender\u0026#39;: \u0026#39;Male\u0026#39;} } for item in infos.items(): print(item) ('David', {'age': 25, 'gender': 'Male'}) ('Mary', {'age': 23, 'gender': 'Female'}) ('Henry', {'age': 23, 'gender': 'Male'})  for name, info in infos.items(): print(name, info) David Mary Henry  \ntry-except 遇到无关紧要的bug，不会停下来，让程序有一定的容错能力。通俗点就是此处不留爷，自有留爷处，凡事别钻牛角尖。\nfor x in [1,2,0,2,1]: print(10/x) 10.0 5.0 --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) \u0026lt;ipython-input-19-83bea9c92c0e\u0026gt; in \u0026lt;module\u0026gt; 1 for x in [1,2,0,2,1]: ----\u0026gt; 2 print(10/x) ZeroDivisionError: division by zero  for x in [1,2,0,2,1]: try: print(10/x) except: print(\u0026#39;0除错误\u0026#39;) #pass 10.0 5.0 0除错误 5.0 10.0  \n练习1 假设现在某人的能力为1， 每天比前一天进步0.01， 一年后他的能力是多少？\nability = 1 scale = 1.01 records = [] for i in range(365): ability = ability * 1.01 records.append(ability) print(records) [1.01, 1.0201, 1.030301, 1.04060401, 1.0510100501, 1.061520150601, 1.0721353521070098, 1.08285670562808, 1.0936852726843609, 1.1046221254112045, 1.1156683466653166, ...................36.30913774096189, 36.672229118371504, 37.03895140955522, 37.40934092365077, 37.783434332887275]  import matplotlib.pyplot as plt import math %matplotlib inline ability = 1 scale = 1.02 records = [] days = range(1, 365) for day in days: ability = ability*scale records.append(ability) plt.plot(days, records) plt.title(\u0026#39;Be better everyday!\u0026#39;) Text(0.5, 1.0, 'Be better everyday!')   \n安装包的方法  命令行执行 pip install packagename jupyter notebook的Cell中执行!pip install packagename 如果是mac，pip写成pip3  !pip install matplotlib Looking in indexes: https://mirrors.aliyun.com/pypi/simple/ Requirement already satisfied: matplotlib in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (3.2.1) Requirement already satisfied: kiwisolver\u0026gt;=1.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.2.0) Requirement already satisfied: python-dateutil\u0026gt;=2.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.8.1) Requirement already satisfied: cycler\u0026gt;=0.10 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (0.10.0) Requirement already satisfied: numpy\u0026gt;=1.11 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.18.2) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,\u0026gt;=2.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.4.7) Requirement already satisfied: six\u0026gt;=1.5 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from python-dateutil\u0026gt;=2.1-\u0026gt;matplotlib) (1.14.0)  练习2 打印九九乘法表格\n 用到的知识点:\n for循环 字符串format方法 print函数(涉及到end参数)  for row in range(1, 10): #print(row) for col in range(1, row+1): formula = \u0026#39;{col}*{row}={res}\u0026#39;.format(col=col, row=row, res=col*row) print(formula, end=\u0026#39;\\t\u0026#39;) print(\u0026#39;\u0026#39;) 1*1=1\t1*2=2\t2*2=4\t1*3=3\t2*3=6\t3*3=9\t1*4=4\t2*4=8\t3*4=12\t4*4=16\t1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.  for row in range(1, 10): for col in range(1, row+1): formula = \u0026#39;{col}*{row}={res}\u0026#39; content = formula.format(col=col, row=row, res=col*row) print(content, end=\u0026#39;\\t\u0026#39;) print() 1*1=1\t1*2=2\t2*2=4\t1*3=3\t2*3=6\t3*3=9\t1*4=4\t2*4=8\t3*4=12\t4*4=16\t1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t \n 点击上方图片购买课程   ","permalink":"/blog/basic-08-logical-if-else-try-except/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\nif条件判断  condition为布尔值、布尔运算、成员运算符 通常我们理解的condition为布尔值\n#Tab condition = True if condition: print(\u0026#39;condition为True\u0026#39;) else: print(\u0026#39;condition为False\u0026#39;) condition为True  age = 17 if age\u0026gt;=18: print(\u0026#39;你是成年人了\u0026#39;) else: print(\u0026#39;你还是个孩子\u0026#39;) 你还是个孩子  age = 20 if age\u0026gt;=55: print(\u0026#39;老年人\u0026#39;) elif 35\u0026lt;=age\u0026lt;55: print(\u0026#39;中年\u0026#39;) elif 18\u0026lt;=age\u0026lt;35: print(\u0026#39;青年\u0026#39;) elif 0\u0026lt;=age\u0026lt;18: print(\u0026#39;儿童\u0026#39;) 青年  \n特殊的conditon  各种空值(空字符串、空列表等)作用等同于False 各种非空值，作用等同于True  a = None if a: print(\u0026#39;a是非空数据\u0026#39;) else: print(\u0026#39;a是空数据\u0026#39;) a是空数据  \nfor循环  重复做某件事 迭代出数据中的内容(元素)   上面这个图可以解读为 我们想对iterable这个集合中的每一个item:","title":"逻辑语句(if\u0026for\u0026tryexcept)"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n列表推导式唯一的用处就是增强代码的可阅读性，初次接触可能比较难理解，但是大家一定要理解，文本分析中经常会用到ta。\n\n问题1 用列表表示集合X $X= {x| x \\in [1,2,3,4,5,6,7,8,9,10]}$\nX = [1,2,3,4,5,6,7,8,9,10] X [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  X = list(range(1, 10)) X [1, 2, 3, 4, 5, 6, 7, 8, 9]  \n问题2 表示集合Y $Y = {x^2| x \\in [1,2,3,4,5,6,7,8,9,10]}$\nY = [] for x in X: Y.append(x*x) Y [1, 4, 9, 16, 25, 36, 49, 64, 81]  \n列表推导式 实现步骤\n 先复制X 再对X中的元素x进行操作  #先复制X [x for x in X] [1, 2, 3, 4, 5, 6, 7, 8, 9]  #再对x进行操作 [x*x for x in X] [1, 4, 9, 16, 25, 36, 49, 64, 81]  理解列表推导式  带条件的列表推导式 $C= {x^2 | (x \\in X) \\cap (x\u0026gt;5)}$\n#复制X [x for x in X] [1, 2, 3, 4, 5, 6, 7, 8, 9]  #X中的要大于5 #[x for x in X if x\u0026gt;5] [x for x in X if x\u0026gt;5] [6, 7, 8, 9]  #对满足条件的x进行操作 #[x*x for x in X if x\u0026gt;5] [x*x for x in X if x\u0026gt;5] [36, 49, 64, 81]  \n问题3 全部小写 words = [\u0026#39;Life\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;short\u0026#39;, \u0026#39;so\u0026#39;, \u0026#39;we\u0026#39;, \u0026#39;use\u0026#39;, \u0026#39;Python\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;easy\u0026#39;, \u0026#39;to\u0026#39;, \u0026#39;learn\u0026#39;, \u0026#39;and\u0026#39;, \u0026#39;easy\u0026#39;, \u0026#39;to\u0026#39;, \u0026#39;use\u0026#39;] words ['Life', 'is', 'short', 'so', 'we', 'use', 'Python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use']  lower_words = [w.lower() for w in words] lower_words ['life', 'is', 'short', 'so', 'we', 'use', 'python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use']  \n问题4 计算lower_words列表数据的单词词频 wordset = set(lower_words) [(w, lower_words.count(w)) for w in wordset] [('so', 1), ('and', 1), ('learn', 1), ('use', 2), ('to', 2), ('we', 1), ('easy', 2), ('python', 2), ('is', 2), ('short', 1), ('life', 1)]  #1 生产词语集合 wordset = set(lower_words) print(wordset) {'so', 'and', 'learn', 'use', 'to', 'we', 'easy', 'python', 'is', 'short', 'life'}  #2. wordset复制wordset自己 [w for w in wordset] #3. 对wordset中每个词语w进行一些操作 [lower_words.count(w) for w in wordset] [1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1]  #3. 词频和词语一起显示 [(w,lower_words.count(w)) for w in wordset] [('so', 1), ('and', 1), ('learn', 1), ('use', 2), ('to', 2), ('we', 1), ('easy', 2), ('python', 2), ('is', 2), ('short', 1), ('life', 1)]  \n问题5 d = {\u0026#39;x\u0026#39;: \u0026#39;A\u0026#39;, \u0026#39;y\u0026#39;: \u0026#39;B\u0026#39;, \u0026#39;z\u0026#39;: \u0026#39;C\u0026#39; } 如何将d中的 键值对 拼接,输出为\n['xA', 'yB', 'zC]\nd = {\u0026#39;x\u0026#39;: \u0026#39;A\u0026#39;, \u0026#39;y\u0026#39;: \u0026#39;B\u0026#39;, \u0026#39;z\u0026#39;: \u0026#39;C\u0026#39; } d.items() dict_items([('x', 'A'), ('y', 'B'), ('z', 'C')])  #1 自己复制d.items()自己 [i for i in d.items()] [('x', 'A'), ('y', 'B'), ('z', 'C')]  #2 对任何一个元素都要进行字符串的拼接操作 [i[0]+i[1] for i in d.items()] ['xA', 'yB', 'zC']  \n 点击上方图片购买课程   ","permalink":"/blog/basic-09-list-comprehension/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n列表推导式唯一的用处就是增强代码的可阅读性，初次接触可能比较难理解，但是大家一定要理解，文本分析中经常会用到ta。\n\n问题1 用列表表示集合X $X= {x| x \\in [1,2,3,4,5,6,7,8,9,10]}$\nX = [1,2,3,4,5,6,7,8,9,10] X [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  X = list(range(1, 10)) X [1, 2, 3, 4, 5, 6, 7, 8, 9]  \n问题2 表示集合Y $Y = {x^2| x \\in [1,2,3,4,5,6,7,8,9,10]}$\nY = [] for x in X: Y.append(x*x) Y [1, 4, 9, 16, 25, 36, 49, 64, 81]","title":"高级语法-列表推导式"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n流水线每个环节都有质量要求，只有符合质量规范，才能流通到下一个环节。这样环环相扣，设计好后经过试运营就可以投产了。Python编程也一样，编程序其实也是设计流水线，而函数就是流水线上的一个个的环节。\n\n函数 可重复使用的代码块\n def函数常见参数定义\u0026amp;调用方式\n 位置参数 关键词参数 默认参数  \n位置参数 def hello1(name, age): return \u0026#39;我是{0},今年{1}\u0026#39;.format(name, age) hello1(\u0026#39;张三\u0026#39;, 25) '我是张三,今年25'  hello1(25,\u0026#39;张三\u0026#39;) '我是25,今年张三'  \n关键词参数 def hello2(name, age): return \u0026#39;我是{0},今年{1}\u0026#39;.format(name, age) hello2(name=\u0026#39;张三\u0026#39;, age=25) '我是张三,今年25'  hello2(age=25, name=\u0026#39;张三\u0026#39;) '我是张三,今年25'  \n默认参数 def hello3(name, age, gender=\u0026#39;男\u0026#39;): return \u0026#39;我是{0},今年{1}, 性别{2}\u0026#39;.format(name, age, gender) hello3(\u0026#39;David\u0026#39;, 25) '我是David,今年25, 性别男'  hello3(\u0026#39;David\u0026#39;, 25, gender=\u0026#39;male\u0026#39;) '我是David,今年25, 性别male'   点击上方图片购买课程   ","permalink":"/blog/basic-10-understand-function/","summary":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n流水线每个环节都有质量要求，只有符合质量规范，才能流通到下一个环节。这样环环相扣，设计好后经过试运营就可以投产了。Python编程也一样，编程序其实也是设计流水线，而函数就是流水线上的一个个的环节。\n\n函数 可重复使用的代码块\n def函数常见参数定义\u0026amp;调用方式\n 位置参数 关键词参数 默认参数  \n位置参数 def hello1(name, age): return \u0026#39;我是{0},今年{1}\u0026#39;.format(name, age) hello1(\u0026#39;张三\u0026#39;, 25) '我是张三,今年25'  hello1(25,\u0026#39;张三\u0026#39;) '我是25,今年张三'  \n关键词参数 def hello2(name, age): return \u0026#39;我是{0},今年{1}\u0026#39;.format(name, age) hello2(name=\u0026#39;张三\u0026#39;, age=25) '我是张三,今年25'  hello2(age=25, name=\u0026#39;张三\u0026#39;) '我是张三,今年25'  \n默认参数 def hello3(name, age, gender=\u0026#39;男\u0026#39;): return \u0026#39;我是{0},今年{1}, 性别{2}\u0026#39;.format(name, age, gender) hello3(\u0026#39;David\u0026#39;, 25) '我是David,今年25, 性别男'  hello3(\u0026#39;David\u0026#39;, 25, gender=\u0026#39;male\u0026#39;) '我是David,今年25, 性别male'   点击上方图片购买课程   ","title":"高级语法-理解函数"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n有三大类内置函数\n 数学相关函数 类型转化函数 功能函数  函数名加粗的是都是重点\n\n数学相关    函数 功能 例子 运行结果     abs(a) 对a取绝对值 abs(-1) 1   max(lst)、min(lst) 寻找lst中的最大、最小值 max([3, 2, 9]) 9   sum(lst) 对lst内所有数字求和 sum([3, 2, 9]) 14   sorted(lst， reverse) 对lst排序； 参数reverse为布尔值控制升降序 sorted([3, 2, 9]) [2, 3, 9]   range(start, end, step) 生成以步长step，生成从start到end的数列,默认step=1，结果取不到end list(range(1,5)) [1, 2, 3,4]    #取绝对值 abs(-1) 1  #取最大 max([3, 2, 9]) 9  #取最小 min([3, 2, 9]) 2  #求和 sum([3, 2, 9]) 14  #排序 sorted([3,2,9]) [2, 3, 9]  #排序(方向调整) sorted([3,2,9], reverse=True) [9, 3, 2]  #生成序列 list(range(1, 10)) [1, 2, 3, 4, 5, 6, 7, 8, 9]  list(range(1, 10, 2)) [1, 3, 5, 7, 9]  \n类型转换    函数 功能 例子 运行结果     int(string) 将字符串数改为整数型 int(\u0026lsquo;9\u0026rsquo;) 9   float(int/str) 将int或str改为浮点型 float(9)、float(\u0026lsquo;9\u0026rsquo;) 9.0   list(iterable) 将可迭代对象为列表。这里的iterable可以为字符串，可以是列表 list(range(1,5)) [1,2,3,4]    enumerate(lst) 返回带有索引值的序列seq,需要list(seq)处理后才能看到seq list(enumerate([\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;])) [(0,\u0026lsquo;a\u0026rsquo;), (1, \u0026lsquo;b\u0026rsquo;), (2, \u0026lsquo;c\u0026rsquo;)]   tuple(lst) 将lst变为tuple tuple([1,2,3]) (1,2,3)   set(lst) 将lst变为集合 set([1,4,4,4,3]) {1,3,4}    a = 9 b = 9 a+b 18  #变转化为整数 int(\u0026#39;9\u0026#39;) 9  #转化为小数 float(\u0026#39;9\u0026#39;) 9.0  float(9) 9.0  #转化为列表 list(range(1, 5)) [1, 2, 3, 4]  #给列表中每个元素分配一个索引值 names = [\u0026#39;张三\u0026#39;, \u0026#39;李四\u0026#39;, \u0026#39;王五\u0026#39;] list(enumerate(names)) [(0, '张三'), (1, '李四'), (2, '王五')]  \n功能函数    函数 功能 例子 运行结果     eval(expression) 执行一个字符串表达式 eval(\u0026lsquo;1+1\u0026rsquo;) 2   zip(lst1,lst2\u0026hellip;) 将lst1,lst2\u0026hellip;合并,返回zip对象。需要list处理一下zip对象 list(zip([1,2,3],[4,5,6])) [(1, 4), (2, 5), (3, 6)]   type(x) 查看X的类型 type(\u0026lsquo;2\u0026rsquo;) \u0026lt;class \u0026lsquo;str\u0026rsquo;\u0026gt;   help(x) 查看X的相关信息 help([1, 2]) Help on list object..   map(func, lst) 对lst中的每一个个体都进行func操作 list(map(sum, [[1,1], [1,2]])) [2, 3]   print(value, end='\\n') 打印value print(\u0026lsquo;abc\u0026rsquo;) abc   open(file， encoding) 打开file文件， encoding是file的文件编码      \neval() eval(str_expression)\nstr_expression 是字符串表达式，可以是变量、函数等\na = 9 b = 9 c = \u0026#39;a+b\u0026#39; print(a+b) print(c) print(eval(c)) 18 a+b 18  eval(\u0026#39;a+b\u0026#39;) 18  d = \u0026#39;hello world\u0026#39; print(\u0026#39;d\u0026#39;) print(eval(\u0026#39;d\u0026#39;)) d hello world  def hello(): print(\u0026#39;hello python\u0026#39;) print(\u0026#39;hello()\u0026#39;) hello()  eval(\u0026#39;hello()\u0026#39;) hello python  \nzip(lst1, lst2,lst3\u0026hellip;) 将lst1， lst2， lst3按照顺序进行合并\nnames = [\u0026#39;David\u0026#39;, \u0026#39;Mary\u0026#39;, \u0026#39;Henry\u0026#39;, \u0026#39;Unique\u0026#39;] sexs = [\u0026#39;male\u0026#39;, \u0026#39;femal\u0026#39;, \u0026#39;male\u0026#39;, \u0026#39;male\u0026#39;] ages = [25, 22, 30, 40] list(zip(names, sexs, ages)) [('David', 'male', 25), ('Mary', 'femal', 22), ('Henry', 'male', 30), ('Unique', 'male', 40)]  \ntype/help 查看数据类型、查看感兴趣对象的介绍\na = [1,3,5] type(a) list  help(a) Help on list object: class list(object) | list(iterable=(), /) | | Built-in mutable sequence. | | If no argument is given, the constructor creates a new empty list. | The argument must be an iterable if specified. | | Methods defined here: | ......... | append(self, object, /) | Append object to the end of the list. | | | count(self, value, /) | Return number of occurrences of value. | | extend(self, iterable, /) | Extend list by appending elements from the iterable. |  type(print) builtin_function_or_method  help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.  map(func, lst)映射运算 将func运算映射到lst上每个元素\nlst = [[1,1], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2]] res = map(sum, lst) list(res) [2, 3, 3, 3, 3, 3, 3]  \nprint(value, end='\\n') 打印value，默认使用换行结束\nhelp(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.  print(\u0026#39;hello world!\u0026#39;) print(\u0026#39;hello python!\u0026#39;) hello world! hello python!  print(\u0026#39;hello world!\u0026#39;, end=\u0026#39;\\t\u0026#39;) print(\u0026#39;hello python!\u0026#39;) hello world!\thello python!  \nopen(file, mode=\u0026lsquo;r\u0026rsquo;, encoding=None)  file 文件路径 mode 操作方式们，最常用的是r和a+。r读取， a+是追加写入 encoding 编码方式 ，常见的文件编码方式主要是utf-8和gbk  读取返回io对象\nio对象有read()方法\n 相对路径\ndata\n  绝对路径\nC:Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\n 建议大家都要用相对路径\n# 读取数据 open(\u0026#39;data/test.txt\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read() '章节设计\\n\\n第一部分 环境配置\\n第二部分 快速入门python\\n第三部分 网络爬虫\\n第四部分 简单的文本分析\\n第五部分 进阶文本分析'  # 新建文件/在已有的文件内插入内容 f = open(\u0026#39;data/test2.txt\u0026#39;, mode=\u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) f.write(\u0026#39;我在学python，现在是下午五点\u0026#39;) f.close() \n# 新建文件/在已有的文件内插入内容 f = open(\u0026#39;data/test2.txt\u0026#39;, mode=\u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) f.write(\u0026#39;\\nLife is short, so to learn Python\u0026#39;) f.close() \n# 新建文件/在已有的文件内插入内容 f = open(\u0026#39;data/test2.txt\u0026#39;, mode=\u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) f.write(\u0026#39;\\nLife is short, so to learn Python\u0026#39;) f.write(\u0026#39;\\nLife is short, so to learn music\u0026#39;) f.write(\u0026#39;\\nLife is short, so to learn english\u0026#39;) f.close() \n重点函数  sorted(lst， ascending) range(start, end, step) enumerate(lst) eval(expression) zip(lst1, lst2..) map(func, lst) print(x) open(file, mode, encoding)  ","permalink":"/blog/basic-11-built-function/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n有三大类内置函数\n 数学相关函数 类型转化函数 功能函数  函数名加粗的是都是重点\n\n数学相关    函数 功能 例子 运行结果     abs(a) 对a取绝对值 abs(-1) 1   max(lst)、min(lst) 寻找lst中的最大、最小值 max([3, 2, 9]) 9   sum(lst) 对lst内所有数字求和 sum([3, 2, 9]) 14   sorted(lst， reverse) 对lst排序； 参数reverse为布尔值控制升降序 sorted([3, 2, 9]) [2, 3, 9]   range(start, end, step) 生成以步长step，生成从start到end的数列,默认step=1，结果取不到end list(range(1,5)) [1, 2, 3,4]    #取绝对值 abs(-1) 1  #取最大 max([3, 2, 9]) 9  #取最小 min([3, 2, 9]) 2  #求和 sum([3, 2, 9]) 14  #排序 sorted([3,2,9]) [2, 3, 9]  #排序(方向调整) sorted([3,2,9], reverse=True) [9, 3, 2]  #生成序列 list(range(1, 10)) [1, 2, 3, 4, 5, 6, 7, 8, 9]  list(range(1, 10, 2)) [1, 3, 5, 7, 9]","title":"常用内置函数"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n路径是可以让程序知道待操作的文件在哪里，python中有os和pathlib两个内置的路径库，我们就讲这个名字一看就懂的路径库pathlib。\n\n绝对vs相对  相对路径 'img' 绝对路径 'C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img'  **注意：**当移动文件夹位置或者将代码分享给朋友使用时，你的代码再次运行就会出错。为了避免这个问题，强烈建议用相对路径\nimport pathlib #当前代码所在的文件夹的相对路径 pathlib.Path() WindowsPath('.')  from pathlib import Path #当前代码所在的文件夹的相对路径 Path() WindowsPath('.')  \npathlib.Path()属性方法 **提醒：**下表加粗的都是常用的方法，其他了解即可\n   方法 功能     cwd() 获取代码所在的当前工作路径   joinpath(\u0026hellip;grandpadir, fatherdir, \u0026hellip;file) 生成路径   iterdir() 返回某路径下的文件(夹)目录   glob(pattern) 返回符合pattern的所有文件的文件路径   is_file() 判断某路径是否为文件，返回布尔值   is_dir() 判断某路径是否为文件夹，返回布尔值   exists() 判断某路径是否存在，返回布尔值   mkdir(parents=True, exist_ok=True) 创建某路径对应的文件夹    \ncwd() 例：获取当前代码所在文件夹的绝对路径\nPath().cwd() WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门')  \njoinpath(\u0026hellip;grandpadir, fatherdir, \u0026hellip;file) 把\u0026hellip;grandpadir, fatherdir, \u0026hellip;file加入到某路径中\n例：获得data文件夹的路径\nPath().cwd().joinpath(\u0026#39;data\u0026#39;) WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data')  例：获得data/test.txt文件的路径\nPath().cwd().joinpath(\u0026#39;data\u0026#39;, \u0026#39;test.txt\u0026#39;) WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt')  \niterdir() 返回某路径下的文件(夹)目录\n例：获得02-Python语法入门文件夹里的所有文件(夹)路径\nlist(Path().cwd().iterdir()) [WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/.ipynb_checkpoints'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/01-Python跟英语一样是一门语言.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/02-数据类型之字符串.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/03-数据类型之列表元组集合.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/04-数据类型之字典.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/05-数据类型之布尔值\u0026amp;None.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/06-逻辑语句(if\u0026amp;for\u0026amp;tryexcept).ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/07-列表推导式.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/08-理解函数.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/09-常用内置函数.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/09-常用函数.md'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/10-内置库之文件路径pathlib库.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/11-内置库之csv文件库.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/12. 内置库之正则表达式re库.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/13-初学python常出错误汇总.ipynb'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img')]  \nglob(pattern) 查找某路径内满足pattern的所有文件路径 。\npattern='*.*' 匹配任意格式任意名字的文件\npattern='*.txt' 匹配出所有的txt文件\n例：获得data文件夹内的所有的文件路径\nlist(Path().cwd().joinpath(\u0026#39;data\u0026#39;).glob(\u0026#39;*.*\u0026#39;)) [WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.csv'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.txt'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/twitter_sentiment.csv')]  例：获得data文件夹内的所有的txt额路径\nlist(Path().cwd().joinpath(\u0026#39;data\u0026#39;).glob(\u0026#39;*.txt\u0026#39;)) [WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt'), WindowsPath('C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test2.txt')]  例：获得data/reports内的pdf路径\ndirs = Path().cwd().joinpath(\u0026#39;data\u0026#39;, \u0026#39;reports\u0026#39;).iterdir() dirs = list(dirs) for dir in dirs: files = dir.glob(\u0026#39;*.*\u0026#39;) for file in files: print(file) C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600000\\600000_20010901_1.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600004\\600004_2006_n.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600004\\600004_2006_z.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600007\\600007_2001_n.pdf ....... C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600007\\600007_2002_1.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\603937\\603937_2018_z.pdf ...... C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\603937\\603937_2019_3.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\603937\\603937_2019_z.pdf  例**：获得data/reports内的 含有\u0026quot;_n\u0026quot; 额pdf路径\ndirs = Path().cwd().joinpath(\u0026#39;data\u0026#39;, \u0026#39;reports\u0026#39;).iterdir() dirs = list(dirs) for dir in dirs: files = dir.glob(\u0026#39;*_n.pdf\u0026#39;) for file in files: print(file) C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600000\\600000_2006_n.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\600000\\600000_2008_n.pdf ........ C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\601872\\601872_2014_n.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\601872\\601872_2015_n.pdf C:\\Users\\thunderhit\\Desktop\\Python数据分析入门\\02-Python语法入门\\data\\reports\\601872\\601872_2016_n.pdf  \nis_file() 判断某路径是否为一个文件。返回布尔值：\n True 真实存在的文件路径 False 不真实存在或者文件夹路径  例 \u0026lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt\u0026rsquo;是文件路径？\nfpath = Path(\u0026#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test.txt\u0026#39;) fpath.is_file() True  例 \u0026lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test222.txt\u0026rsquo;是文件路径？\nfpath = Path(\u0026#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data/test222.txt\u0026#39;) fpath.is_file() False  fpath = Path(\u0026#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data\u0026#39;) fpath.is_file() False  \nis_dir() 判断某路径是否为一个文件夹。返回布尔值，True、False\n例： \u0026lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data\u0026rsquo; 是 文件夹路径？\nfpath = Path(\u0026#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data\u0026#39;) fpath.is_dir() True  \nexists() 判断某路径是否存在。返回布尔值，True、False\n例： \u0026lsquo;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data\u0026rsquo; 是否存在？\nfpath = Path(\u0026#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/data\u0026#39;) fpath.exists() True  fpath = Path(\u0026#39;C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/datasss\u0026#39;) fpath.exists() False  mkdir(parents=True, exist_ok=True) 创建某路径\npath = Path().cwd().joinpath(\u0026#39;data\u0026#39;, \u0026#39;stocks\u0026#39;, \u0026#39;800000\u0026#39;) path.mkdir(parents=True, exist_ok=True) \n 点击上方图片购买课程   ","permalink":"/blog/basic-12-pathlib/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n路径是可以让程序知道待操作的文件在哪里，python中有os和pathlib两个内置的路径库，我们就讲这个名字一看就懂的路径库pathlib。\n\n绝对vs相对  相对路径 'img' 绝对路径 'C:/Users/thunderhit/Desktop/Python数据分析入门/02-Python语法入门/img'  **注意：**当移动文件夹位置或者将代码分享给朋友使用时，你的代码再次运行就会出错。为了避免这个问题，强烈建议用相对路径\nimport pathlib #当前代码所在的文件夹的相对路径 pathlib.Path() WindowsPath('.')  from pathlib import Path #当前代码所在的文件夹的相对路径 Path() WindowsPath('.')  \npathlib.Path()属性方法 **提醒：**下表加粗的都是常用的方法，其他了解即可\n   方法 功能     cwd() 获取代码所在的当前工作路径   joinpath(\u0026hellip;grandpadir, fatherdir, \u0026hellip;file) 生成路径   iterdir() 返回某路径下的文件(夹)目录   glob(pattern) 返回符合pattern的所有文件的文件路径   is_file() 判断某路径是否为文件，返回布尔值   is_dir() 判断某路径是否为文件夹，返回布尔值   exists() 判断某路径是否存在，返回布尔值   mkdir(parents=True, exist_ok=True) 创建某路径对应的文件夹","title":"内置库-文件路径pathlib库"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n在编程中一般不适用excel，而是用一种很像excel的csv来存储数据。而且Excel软件可以打开csv的。\n一、csv存储数据代码步骤 **说明:**代码看不懂没关系，能背过最好。背不过也没关系，能理解代码功能，而且亲自上手调试过，调试正常无误的代码可以加入你的代码笔记本中，然后以后需要的时候复制粘贴修改参数即可\n1. 1 新建一个csv文件 import csv path = \u0026#39;data/test.csv\u0026#39; csvf = open(path, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, newline=\u0026#39;\u0026#39;) 1.2 定义字段名，并初始化csv文件为writer fieldnames = [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() 1.3 将待存储数据整理为字典格式 test_data = {\u0026#39;name\u0026#39;: \u0026#39;David\u0026#39;, \u0026#39;age\u0026#39;: 25} 1.4 用writer往csv中存储数据 writer.writerow(test_data) 1.5 最后记得关闭csv文件 csvf.close() \nimport csv csvf = open(\u0026#39;data/test1.csv\u0026#39;, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, newline=\u0026#39;\u0026#39;) fieldnames = [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() csvf.close() \nimport csv csvf = open(\u0026#39;data/test2.csv\u0026#39;, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, newline=\u0026#39;\u0026#39;) fieldnames = [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() test_data = {\u0026#39;name\u0026#39;: \u0026#39;David\u0026#39;, \u0026#39;age\u0026#39;: 25} writer.writerow(test_data) csvf.close() \n二、很多数据的存储 如果很多数据存储时，就可以用之前学到的for循环。\ndatas = [{\u0026#39;name\u0026#39;: \u0026#39;David\u0026#39;, \u0026#39;age\u0026#39;: 25}, {\u0026#39;name\u0026#39;: \u0026#39;Mary\u0026#39;, \u0026#39;age\u0026#39;: 30}, {\u0026#39;name\u0026#39;: \u0026#39;Henry\u0026#39;, \u0026#39;age\u0026#39;: 35}] datas [{'name': 'David', 'age': 25}, {'name': 'Mary', 'age': 30}, {'name': 'Henry', 'age': 35}]  import csv csvf = open(\u0026#39;data/test2.csv\u0026#39;, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, newline=\u0026#39;\u0026#39;) fieldnames = [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() for data in datas: writer.writerow(data) csvf.close() \n 点击上方图片购买课程   ","permalink":"/blog/basic-13-csv/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n在编程中一般不适用excel，而是用一种很像excel的csv来存储数据。而且Excel软件可以打开csv的。\n一、csv存储数据代码步骤 **说明:**代码看不懂没关系，能背过最好。背不过也没关系，能理解代码功能，而且亲自上手调试过，调试正常无误的代码可以加入你的代码笔记本中，然后以后需要的时候复制粘贴修改参数即可\n1. 1 新建一个csv文件 import csv path = \u0026#39;data/test.csv\u0026#39; csvf = open(path, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, newline=\u0026#39;\u0026#39;) 1.2 定义字段名，并初始化csv文件为writer fieldnames = [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() 1.3 将待存储数据整理为字典格式 test_data = {\u0026#39;name\u0026#39;: \u0026#39;David\u0026#39;, \u0026#39;age\u0026#39;: 25} 1.4 用writer往csv中存储数据 writer.writerow(test_data) 1.5 最后记得关闭csv文件 csvf.close() \nimport csv csvf = open(\u0026#39;data/test1.csv\u0026#39;, \u0026#39;a+\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, newline=\u0026#39;\u0026#39;) fieldnames = [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() csvf.close() \nimport csv csvf = open(\u0026#39;data/test2.","title":"内置库-数据存储csv库"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n正则表达式主要用于数据清洗，比如从脏乱差的文本中抽取出自己需要的信息。常见于爬虫和文本分析。\n一、正则表达式中的符号 按照符号的功能，我将其分为三类，一般情况下表达式都是由这三种符号组成的。\n1.1 正则字符 预警，听不懂看不懂，都不要紧的。不要绞尽脑汁，本节后面会柳暗花明的。\n   正则符号 描述 匹配自己时     \\ 转义字符。例如， \u0026lsquo;n\u0026rsquo; 匹配字符 \u0026lsquo;n\u0026rsquo;。 '\\n'   ( ) 标记一个子表达式的开始和结束位置。 \\( \\)   . 匹配除换行符 \\n 之外的任何单字符。 \\.    | |左右两侧均可参与匹配    \\d 匹配字符串中的单个数字    a-zA-Z 匹配全部英文字符    0-9 匹配全部数字    \\s 匹配字符串中的\\n,\\t,空格    [] 中括号内任意正则符号均可参与匹配 \\[ \\]   ^ 当在方括号表达式中使用，^对其后的正则表达式进行了反义表达。 \\^    1.2 限定字符 提前预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的\n   正则符号 描述 匹配自己时     * 匹配前面的子表达式零次或多次。 \\*   ? 匹配前面的子表达式零次或一次 \\?   + 匹配前面的子表达式一次或多次。 \\+   {m} n 是一个非负整数。匹配确定的 m 次。    {m,} m 是一个非负整数。至少匹配m 次。    {m, n} m 和 n 均为非负整数，其中m \u0026lt;= n。最少匹配 m 次且最多匹配 n 次。     1.3 定位字符 预警，听不懂不要绞尽脑汁，本节后面会柳暗花明的\n   正则符号 描述 匹配自己时     ^ 匹配输入字符串的开始位置。 \\^   $ 匹配输入字符串的结尾位置 \\$   \\b 匹配一个单词边界，即字与空格间的位置    \\B 非单词边界匹配     \n二、re库常用方法 至暗时刻已过，光明即将到来\n   re库常用函数 作用     re.findall(pattern, string) 根据pattern返回匹配结果（列表）    |re.split(pattern, string) |使用pattern分割string，返回列表 |re.sub(pattern, repl, string)|使用repl替换string中的pattern|\n\n三、只需要掌握 万能的百度谷歌+你的尝试，比什么都强大\n 搜索引擎检索到自己需要的正则表达式 最简单最好用表达式(.*?) 在正则表达式测试网站验证自己的正则表达式  3.1 检索找到自己需要的正则表达式 比如我只需要中文，其余字符统统不要。\n我会在百度搜中文正则表达式\n发现很多网页中网友提到````，于是\n[\\u4e00-\\u9fa5]\nimport re pattern = \u0026#39;[\\u4e00-\\u9fa5]+\u0026#39; string = \u0026#34;\u0026#34;\u0026#34;Python是一门面向对象的编程语言，诞生于1991年。\\ 目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\\ 一般情况下Python是Java的20%，所以说人生苦短，我用Python。\u0026#34;\u0026#34;\u0026#34; chinese_words = re.findall(pattern, string) chinese_text = \u0026#39;\u0026#39;.join(chinese_words) chinese_text '是一门面向对象的编程语言诞生于年目前以广泛应用在网站开发游戏软件开发数据采集机器学习等多个领域一般情况下是的所以说人生苦短我用'  3.2 最简单最好用表达式(.*?) (.*?)特别好用，ta的暗号及使用口诀一定要背过\npattern设计步骤：\n正则符号组成正则表达式，用于匹配需要的字符。\n 找到重复的一致的规律 复制粘贴到pattern中 扣掉想要的数据 替换为(.*?) 或者相应的正则符号表达式*  比如现在需要快速挖掘出intros中的姓名、籍贯和年龄\nimport re pattern = \u0026#39;我叫(.*?)，来自(.*?)，今年(.*?)岁。\u0026#39; intros = [\u0026#39;我叫张三，来自山东，今年25岁。\u0026#39;, \u0026#39;我叫李四，来自河北，今年28岁。\u0026#39;, \u0026#39;我叫王五，来自河南，今年24岁。\u0026#39;] for intro in intros: info = re.findall(pattern, intro) print(info) [('张三', '山东', '25')] [('李四', '河北', '28')] [('王五', '河南', '24')]  特别需要注意的是pattern中的(.*?)左右两侧必须有字符，否则匹配失败。\n import re pattern = \u0026#39;(.*?)，来自(.*?)，今年(.*?)\u0026#39; intros = [\u0026#39;我叫张三，来自山东，今年25岁。\u0026#39;, \u0026#39;我叫李四，来自河北，今年28岁。\u0026#39;, \u0026#39;我叫王五，来自河南，今年24岁。\u0026#39;] for intro in intros: info = re.findall(pattern, intro) print(info) [('我叫张三', '山东', '')] [('我叫李四', '河北', '')] [('我叫王五', '河南', '')]  由于\n'(.*?)，来自(.*?)，今年(.*?)'\n中最左侧和最右侧的(.*?)没有被其他字符左右包裹，导致匹配姓名和年龄失败。\nimport re pattern = \u0026#39;叫(.*?)，来自(.*?)，今年(.*?)岁\u0026#39; intros = [\u0026#39;我叫张三，来自山东，今年25岁。\u0026#39;, \u0026#39;我叫李四，来自河北，今年28岁。\u0026#39;, \u0026#39;我叫王五，来自河南，今年24岁。\u0026#39;] for intro in intros: info = re.findall(pattern, intro) print(info) [('张三', '山东', '25')] [('李四', '河北', '28')] [('王五', '河南', '24')]  \n四、案例 4.1 找出文本中出现的年份 import re pattern = \u0026#39;\\d{4}\u0026#39; string = \u0026#34;\u0026#34;\u0026#34;Python是一门面向对象的编程语言，诞生于1991年。\\ 目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\\ 一般情况下Python是Java的20%，所以说人生苦短，我用Python。\u0026#34;\u0026#34;\u0026#34; re.findall(pattern, string) ['1991']  4.2 re.split(pattern, string) 断句\npattern = \u0026#39;；|。\u0026#39; string = \u0026#34;\u0026#34;\u0026#34;Python是一门面向对象的编程语言，诞生于1991年；\\ 目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。\\ 一般情况下Python是Java的20%，所以说人生苦短，我用Python。\u0026#34;\u0026#34;\u0026#34; res = re.split(pattern, string) res = [r for r in res if r] res ['Python是一门面向对象的编程语言，诞生于1991年', '目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域', '一般情况下Python是Java的20%，所以说人生苦短，我用Python']  4.3 re.sub(pattern, repl, string) 将数字替换为NUM\npattern = \u0026#39;\\d+\u0026#39; repl = \u0026#39;NUM\u0026#39; string = \u0026#34;\u0026#34;\u0026#34;Python是一门面向对象的编程语言，诞生于1991年。\\ 一般情况下Python是Java的20%，所以说人生苦短，我用Python。\u0026#34;\u0026#34;\u0026#34; re.sub(pattern, repl, string) 'Python是一门面向对象的编程语言，诞生于NUM年。一般情况下Python是Java的NUM%，所以说人生苦短，我用Python。'  4.4 . 统一表达 将指代同一个主体的不同表达词语统一为同一个词\ntext = \u0026#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。\u0026#39; pattern = \u0026#39;中国铁路工程集团有限公司|中国中铁\u0026#39; repl = \u0026#39;中铁\u0026#39; re.sub(pattern, repl, text) '中铁成立于1950年3月，总部位于北京。目前中铁已经发展成中国和亚洲最大的多功能综合型建设集团。'  text = \u0026#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。\u0026#39; pattern = \u0026#39;[中国铁路工程集团有限公司|中国中铁]+\u0026#39; repl = \u0026#39;中铁\u0026#39; re.sub(pattern, repl, text) '中铁成立于1950年3月，总部位于北京。目前中铁已经发展成中铁和亚洲最大的多功能综合型建设中铁。'  4.5 分割文本数据的章节 一二三四五六七八九十零百\ntext = \u0026#34;\u0026#34;\u0026#34; 第一篇 Python简介 第二篇 Python入门语法 第三篇 Python网络爬虫 第四篇 文本数据编码 第五篇 数据分析 第六篇 可视化\u0026#34;\u0026#34;\u0026#34; pattern = \u0026#39;第[一二三四五六七八九十零百]+篇\u0026#39; res = re.split(pattern, text) res = [r.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) for r in res if \u0026#39; \u0026#39;!=r] res ['Python简介', 'Python入门语法', 'Python网络爬虫', '文本数据编码', '数据分析', '可视化']  4.6 抽取出数字 比如日期数据\ntext = \u0026#39;中国铁路工程集团有限公司成立于1950年3月，总部位于北京。目前中国中铁已经发展成中国和亚洲最大的多功能综合型建设集团。\u0026#39; pattern = \u0026#39;\\d+\u0026#39; \u0026#39;-\u0026#39;.join(re.findall(pattern, text)) '1950-3'  \n 点击上方图片购买完整课程   ","permalink":"/blog/basic-14-regex/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n正则表达式主要用于数据清洗，比如从脏乱差的文本中抽取出自己需要的信息。常见于爬虫和文本分析。\n一、正则表达式中的符号 按照符号的功能，我将其分为三类，一般情况下表达式都是由这三种符号组成的。\n1.1 正则字符 预警，听不懂看不懂，都不要紧的。不要绞尽脑汁，本节后面会柳暗花明的。\n   正则符号 描述 匹配自己时     \\ 转义字符。例如， \u0026lsquo;n\u0026rsquo; 匹配字符 \u0026lsquo;n\u0026rsquo;。 '\\n'   ( ) 标记一个子表达式的开始和结束位置。 \\( \\)   . 匹配除换行符 \\n 之外的任何单字符。 \\.    | |左右两侧均可参与匹配    \\d 匹配字符串中的单个数字    a-zA-Z 匹配全部英文字符    0-9 匹配全部数字    \\s 匹配字符串中的\\n,\\t,空格    [] 中括号内任意正则符号均可参与匹配 \\[ \\]   ^ 当在方括号表达式中使用，^对其后的正则表达式进行了反义表达。 \\^    1.","title":"内置库-正则表达式re库"},{"content":" Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n学习编程就是在遇到错误、认识错误、解决错误的过程。遇到错误，大家要发挥主观能动性，用自己的英文阅读能力去先读一下英文报错提示，一般情况下错误提示会告诉你是什么类型的错误，错误出在哪一行。\n再结合百度谷歌，80%以上的问题都能解决。现在我们了解一下常见的问题都有哪些，如何克服这些问题。\n1. 忘记写冒号 在 if、elif、else、for、while、def语句后面忘记添加 :\nage = 42 if age == 42 print(\u0026#39;Hello!\u0026#39;)  File \u0026quot;\u0026lt;ipython-input-10-1f5acea116cf\u0026gt;\u0026quot;, line 3 if age == 42 ^ SyntaxError: invalid syntax  age = 42 if age == 42: print(\u0026#39;Hello!\u0026#39;) Hello!  \n2. 误用 = = 是赋值操作，而判断两个值是否相等是 ==\ngender = \u0026#39;男\u0026#39; if gender = \u0026#39;男\u0026#39;: print(\u0026#39;Man\u0026#39;)  File \u0026quot;\u0026lt;ipython-input-12-c3ceea5a9004\u0026gt;\u0026quot;, line 3 if gender = '男': ^ SyntaxError: invalid syntax  gender = \u0026#39;男\u0026#39; if gender == \u0026#39;男\u0026#39;: print(\u0026#39;Man\u0026#39;) Man  \n3. 错误的缩进 Python用缩进区分代码块，常见的错误用法：\nprint(\u0026#39;Hello!\u0026#39;) print(\u0026#39;Howdy!\u0026#39;)  File \u0026quot;\u0026lt;ipython-input-14-784bdb6e1df5\u0026gt;\u0026quot;, line 2 print('Howdy!') ^ IndentationError: unexpected indent  print(\u0026#39;Hello!\u0026#39;) print(\u0026#39;Howdy!\u0026#39;) Hello! Howdy!  num = 25 if num == 25: print(\u0026#39;Hello!\u0026#39;)  File \u0026quot;\u0026lt;ipython-input-16-8e4debcdf119\u0026gt;\u0026quot;, line 3 print('Hello!') ^ IndentationError: expected an indented block  num = 25 if num == 25: print(\u0026#39;Hello!\u0026#39;) Hello!  \n4. 变量没有定义 if c in [\u0026#39;New York\u0026#39;, \u0026#39;Bei Jing\u0026#39;, \u0026#39;Tokyo\u0026#39;]: print(\u0026#39;This is a mega city\u0026#39;) --------------------------------------------------------------------------- NameError Traceback (most recent call last) \u0026lt;ipython-input-21-d91d0b36da73\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 if c in ['New York', 'Bei Jing', 'Tokyo']: 2 print('This is a mega c') NameError: name 'c' is not defined  city =\u0026#39;New York\u0026#39; if city in [\u0026#39;New York\u0026#39;, \u0026#39;Bei Jing\u0026#39;, \u0026#39;Tokyo\u0026#39;]: print(\u0026#39;This is a mega city\u0026#39;) This is a mega city  \n5. 中英文输入法导致的错误  英文冒号 英文括号 英文逗号 英文单双引号  if 5\u0026gt;3： print(\u0026#39;5比3大\u0026#39;)  File \u0026quot;\u0026lt;ipython-input-23-47f8b985b82d\u0026gt;\u0026quot;, line 1 if 5\u0026gt;3： ^ SyntaxError: invalid character in identifier  if 5\u0026gt;3: print(\u0026#39;5比3大\u0026#39;) 5比3大  spam = [1, 2， 3]  File \u0026quot;\u0026lt;ipython-input-26-a003060d051a\u0026gt;\u0026quot;, line 1 spam = [1, 2， 3] ^ SyntaxError: invalid character in identifier  spam = [1, 2, 3] spam [1, 2, 3]  if 5\u0026gt;3: print(\u0026#39;5比3大’)  File \u0026quot;\u0026lt;ipython-input-30-ac2e4eb87092\u0026gt;\u0026quot;, line 2 print('5比3大’) ^ SyntaxError: EOL while scanning string literal  if 5\u0026gt;3: print(\u0026#39;5比3大\u0026#39;) 5比3大  \n6. 不同数据类型的拼接 同种数据类型 字符串/列表/元组 支持拼接\n字典/集合不支持拼接\n\u0026#39;I have \u0026#39; + 12 + \u0026#39; eggs.\u0026#39; --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-32-20c7c89a2ec6\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 'I have ' + 12 + ' eggs.' TypeError: can only concatenate str (not \u0026quot;int\u0026quot;) to str  \u0026#39;I have {}eggs.\u0026#39;.format(12) 'I have 12 eggs.'  [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]+\u0026#39;def\u0026#39; --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-35-0e8919333d6b\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 ['a', 'b', 'c']+'def' TypeError: can only concatenate list (not \u0026quot;str\u0026quot;) to list  (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;)+[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-36-90742621216d\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 ('a', 'b', 'c')+['a', 'b', 'c'] TypeError: can only concatenate tuple (not \u0026quot;list\u0026quot;) to tuple  set([\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;])+set([\u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;]) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-37-ddf5fb1e6c8c\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 set(['a', 'b', 'c'])+set(['d', 'e']) TypeError: unsupported operand type(s) for +: 'set' and 'set'  grades1 = {\u0026#39;Mary\u0026#39;:99, \u0026#39;Henry\u0026#39;:77} grades2 = {\u0026#39;David\u0026#39;:88, \u0026#39;Unique\u0026#39;:89} grades1+grades2 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-38-1b1456844331\u0026gt; in \u0026lt;module\u0026gt; 2 grades2 = {'David':88, 'Unique':89} 3 ----\u0026gt; 4 grades1+grades2 TypeError: unsupported operand type(s) for +: 'dict' and 'dict'  \n7. 索引位置问题 spam = [\u0026#39;cat\u0026#39;, \u0026#39;dog\u0026#39;, \u0026#39;mouse\u0026#39;] print(spam[5]) --------------------------------------------------------------------------- IndexError Traceback (most recent call last) \u0026lt;ipython-input-41-e0a79346266d\u0026gt; in \u0026lt;module\u0026gt; 1 spam = ['cat', 'dog', 'mouse'] ----\u0026gt; 2 print(spam[5]) IndexError: list index out of range  \n8. 使用字典中不存在的键 在字典对象中访问 key 可以使用 []，\n但是如果该 key 不存在，就会导致：KeyError: \u0026lsquo;zebra\u0026rsquo;\nspam = {\u0026#39;cat\u0026#39;: \u0026#39;Zophie\u0026#39;, \u0026#39;dog\u0026#39;: \u0026#39;Basil\u0026#39;, \u0026#39;mouse\u0026#39;: \u0026#39;Whiskers\u0026#39;} print(spam[\u0026#39;zebra\u0026#39;]) --------------------------------------------------------------------------- KeyError Traceback (most recent call last) \u0026lt;ipython-input-42-92c9b44ff034\u0026gt; in \u0026lt;module\u0026gt; 3 'mouse': 'Whiskers'} 4 ----\u0026gt; 5 print(spam['zebra']) KeyError: 'zebra'  为了避免这种情况，可以使用 get 方法\nspam = {\u0026#39;cat\u0026#39;: \u0026#39;Zophie\u0026#39;, \u0026#39;dog\u0026#39;: \u0026#39;Basil\u0026#39;, \u0026#39;mouse\u0026#39;: \u0026#39;Whiskers\u0026#39;} print(spam.get(\u0026#39;zebra\u0026#39;)) None  key 不存在时，get 默认返回 None\n9. 忘了括号 当函数中传入的是函数或者方法时，容易漏写括号\nspam = {\u0026#39;cat\u0026#39;: \u0026#39;Zophie\u0026#39;, \u0026#39;dog\u0026#39;: \u0026#39;Basil\u0026#39;, \u0026#39;mouse\u0026#39;: \u0026#39;Whiskers\u0026#39;} print(spam.get(\u0026#39;zebra\u0026#39;) #end of funtion  File \u0026quot;\u0026lt;ipython-input-44-d105cc86097c\u0026gt;\u0026quot;, line 5 print(spam.get('zebra') #end of funtion ^ SyntaxError: unexpected EOF while parsing  spam = {\u0026#39;cat\u0026#39;: \u0026#39;Zophie\u0026#39;, \u0026#39;dog\u0026#39;: \u0026#39;Basil\u0026#39;, \u0026#39;mouse\u0026#39;: \u0026#39;Whiskers\u0026#39;} print(spam.get(\u0026#39;zebra\u0026#39;)) None  \n10. 漏传参数 def diyadd(x, y, z): return x+y+z diyadd(1, 2) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) \u0026lt;ipython-input-46-7184f3f906ca\u0026gt; in \u0026lt;module\u0026gt; 2 return x+y+z 3 ----\u0026gt; 4 diyadd(1, 2) TypeError: diyadd() missing 1 required positional argument: 'z'  diyadd(1, 2, 4) 7  \n11. 缺失依赖库 电脑中没有相关的库\nimport packagename --------------------------------------------------------------------------- ModuleNotFoundError Traceback (most recent call last) \u0026lt;ipython-input-48-6d7d6f569116\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 import packagename ModuleNotFoundError: No module named 'packagename'  !pip install packagename \n12. 使用了python中的关键词 如try、except、def、class、object、None、True、False等\ntry = 5 print(try)  File \u0026quot;\u0026lt;ipython-input-49-508e87fe2ff3\u0026gt;\u0026quot;, line 1 try = 5 ^ SyntaxError: invalid syntax  a = 5 print(a) 5  def = 6 print(def)  File \u0026quot;\u0026lt;ipython-input-51-c797890e9b85\u0026gt;\u0026quot;, line 1 def = 6 ^ SyntaxError: invalid syntax  d = 6 print(d) 6  13. 文件编码问题 import pandas as pd df = pd.read_csv(\u0026#39;data/twitter_sentiment.csv\u0026#39;) df.head() UnicodeDecodeError: 'utf-8' codec can't decode bytes in position 7-8: invalid continuation byte UnicodeDecodeError Traceback (most recent call last) \u0026lt;ipython-input-53-f7ee81cff3e5\u0026gt; in \u0026lt;module\u0026gt; 1 import pandas as pd 2 ----\u0026gt; 3 df = pd.read_csv('data/twitter_sentiment.csv') 4 df.head() pandas\\_libs\\parsers.pyx in pandas._libs.parsers._string_box_utf8() UnicodeDecodeError: 'utf-8' codec can't decode bytes in position 7-8: invalid continuation byte  import pandas as pd #gbk/utf-8只能解决大部分编码问题，但不能解决全部问题 df = pd.read_csv(\u0026#39;data/twitter_sentiment.csv\u0026#39;, encoding=\u0026#39;gbk\u0026#39;) df.head() --------------------------------------------------------------------------- UnicodeDecodeError Traceback (most recent call last) \u0026lt;ipython-input-55-6aa161f42239\u0026gt; in \u0026lt;module\u0026gt; 2 3 #gbk/utf-8只能解决大部分编码问题，但不能解决全部问题 ----\u0026gt; 4 df = pd.read_csv('data/twitter_sentiment.csv', encoding='gbk') 5 df.head() c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\pandas\\io\\parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision) 674 ) 675 -\u0026gt; 1891 self._reader = parsers.TextReader(src, **kwds) 1892 self.unnamed_cols = self._reader.unnamed_cols 1893 pandas\\_libs\\parsers.pyx in pandas._libs.parsers.TextReader.__cinit__() pandas\\_libs\\parsers.pyx in pandas._libs.parsers.TextReader._get_header() pandas\\_libs\\parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows() pandas\\_libs\\parsers.pyx in pandas._libs.parsers.raise_parser_error() UnicodeDecodeError: 'gbk' codec can't decode byte 0xbd in position 10717: illegal multibyte sequence  上面的程序会提示编码错误， 尝试encoding编码参数传入utf-8、gbk，也没有解决问题。\n那怎么找到正确的编码参数呢？ import chardet #读取为二进制数据 binary_data = open(\u0026#39;data/twitter_sentiment.csv\u0026#39;, \u0026#39;rb\u0026#39;).read() #传给chardet.detect，稍等片刻 chardet.detect(binary_data) {'encoding': 'Windows-1252', 'confidence': 0.7291192008535122, 'language': ''}  import pandas as pd df = pd.read_csv(\u0026#39;data/twitter_sentiment.csv\u0026#39;, encoding=\u0026#39;Windows-1252\u0026#39;) df.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  ItemID Sentiment SentimentText     0 1 0 is so sad for my APL frie...   1 2 0 I missed the New Moon trail...   2 3 1 omg its already 7:30 :O   3 4 0 .. Omgaga. Im sooo im gunna CRy. I'...   4 5 0 i think mi bf is cheating on me!!! ...     \n14. 路径字符串写法  Mac\u0026amp;Win 推荐使用 / 写法 如果使用\\ 写法，安全起见，请换成\\\\ （Mac不支持\\\\ ）  \\n \\t \\d open(\u0026#39;data/test.txt\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read() '章节设计\\n\\n第一部分 环境配置\\n第二部分 快速入门python\\n第三部分 网络爬虫\\n第四部分 简单的文本分析\\n第五部分 进阶文本分析'  open(\u0026#39;data\\test.txt\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read() --------------------------------------------------------------------------- OSError Traceback (most recent call last) \u0026lt;ipython-input-59-d855ed58b500\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 open('data\\test.txt', encoding='utf-8').read() OSError: [Errno 22] Invalid argument: 'data\\test.txt'  open(\u0026#39;data\\\\test.txt\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read() '章节设计\\n\\n第一部分 环境配置\\n第二部分 快速入门python\\n第三部分 网络爬虫\\n第四部分 简单的文本分析\\n第五部分 进阶文本分析'  open(\u0026#39;data\\Test.txt\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read() '章节设计\\n\\n第一部分 环境配置\\n第二部分 快速入门python\\n第三部分 网络爬虫\\n第四部分 简单的文本分析\\n第五部分 进阶文本分析'   点击上方图片购买课程   ","permalink":"/blog/basic-15-common-errors/","summary":"Python语法入门-课件下载 链接:https://pan.baidu.com/s/1K2fFbHuvfxIOWNrFwddm3Q 密码:zj8z\n学习编程就是在遇到错误、认识错误、解决错误的过程。遇到错误，大家要发挥主观能动性，用自己的英文阅读能力去先读一下英文报错提示，一般情况下错误提示会告诉你是什么类型的错误，错误出在哪一行。\n再结合百度谷歌，80%以上的问题都能解决。现在我们了解一下常见的问题都有哪些，如何克服这些问题。\n1. 忘记写冒号 在 if、elif、else、for、while、def语句后面忘记添加 :\nage = 42 if age == 42 print(\u0026#39;Hello!\u0026#39;)  File \u0026quot;\u0026lt;ipython-input-10-1f5acea116cf\u0026gt;\u0026quot;, line 3 if age == 42 ^ SyntaxError: invalid syntax  age = 42 if age == 42: print(\u0026#39;Hello!\u0026#39;) Hello!  \n2. 误用 = = 是赋值操作，而判断两个值是否相等是 ==\ngender = \u0026#39;男\u0026#39; if gender = \u0026#39;男\u0026#39;: print(\u0026#39;Man\u0026#39;)  File \u0026quot;\u0026lt;ipython-input-12-c3ceea5a9004\u0026gt;\u0026quot;, line 3 if gender = '男': ^ SyntaxError: invalid syntax  gender = \u0026#39;男\u0026#39; if gender == \u0026#39;男\u0026#39;: print(\u0026#39;Man\u0026#39;) Man","title":"python常见错误及解决办法"},{"content":"A+期刊    Areas journal      Acounting Journal of Accounting Research (UTD 24) Accounting Review(UTD24) Journal of Accounting and Economics(UTD24)    Finance Journal of Finance(UTD24) Journal of Financial Economics(UTD24) Review of Financial Studies(UTD 24)    Information Systems Information Systems Research(UTD24) MISQuarterly(UTD24)    Marketing Journal of consumer research(UTD24) Journal of Marketing(UTD24) Journal of Marketing Research(UTD24) Marketing Science(UTD24)     \n国际自然基金委认定的30本 A   管理科学学报（英文版：Journal of Management Science and Engineering (JMSE) ）\n  系统工程理论与实践\n  管理世界\n  数量经济技术经济研究\n  中国软科学\n  金融研究\n  中国管理科学\n  系统工程学报\n  会计研究\n  系统管理学报\n  管理评论\n  管理工程学报\n  南开管理评论\n  科研管理\n  情报学报\n  公共管理学报\n  管理科学\n  预测\n  运筹与管理\n  科学学研究\n  中国工业经济\n  农业经济问题\n  B  管理学报 工业工程与管理 系统工程 科学学与科学技术管理 研究与发展管理 中国人口、资源与环境 数理统计与管理 中国农村经济  \nUTD24 A1期刊 （Business Week, FT 列表期刊中未列入我院A+列表的期刊）\n1 Harvard Business Review\n2 Journal of Business Ethics\n3 Academy of Management Perspectives (AMP)\n4 Accounting, Organisations and Society (Elsevier)\n5 California Management Review (UC Berkeley)\n6 Contemporary Accounting Research (Wiley)\n7 Entrepreneurship Theory and Practice (Baylor University, Wiley)\n8 Human Resource Management (Wiley)\n9 Journal of Applied Psychology (American Psychological Association)\n10 Journal of Business Venturing (Elsevier)\n11 Journal of Consumer Psychology (Elsevier)\n12 Journal of Financial and Quantitative Analysis (Cambridge University Press)\n13 Journal of Management Studies (Wiley)\n14 Journal of the American Statistical Association (American Statistical Association)\n15 Organization Studies (SAGE)\n16 Organizational Behaviour and Human Decision Processes (Academic Press)\n17 Quarterly Journal of Economics (MIT)\n18 Rand Journal of Economics (The Rand Corporation, Wiley)\n19 Review of Accounting Studies (Springer)\n20 Sloan Management Review (MIT)\n\nA2期刊 （澳大利亚管理学院院长联合会管理学期刊列表期刊的A*类期刊，除去我院A+与A1类期刊）\n1 Academy of Management Annals\n2 Academy of Management Learning and Education\n3 Accident Analysis and Prevention\n4 Accounting, Organizations and Society\n5 ACM Transactions on Computer-Human Interaction\n6 Advances in Experimental Social Psychology\n7 American Economic Journal: Applied Economics\n8 American Economic Journal: Economic Policy\n9 American Economic Journal: Macroeconomics\n10 American Economic Journal: Microeconomics\n11 American Journal of Agricultural Economics\n12 American Journal of International Law\n13 American Journal of Political Science\n14 American Journal of Public Health\n15 American Journal of Sociology\n16 American Political Science Review\n17 American Psychologist\n18 American Sociological Review\n19 Annals of Applied Probability\n20 Annals of Applied Statistics\n21 Annals of Probability\n22 Annals of Statistics\n23 Annals of Tourism Research\n24 Annual Review of Psychology\n25 Annual Review of Sociology\n26 Auditing: A Journal of Practice and Theory\n27 Automation in Construction\n28 Biometrics\n29 Biometrika\n30 Biostatistics\n31 Boston University Law Review\n32 British Journal of Industrial Relations: an international journal of employment relations\n33 British Tax Review\n34 Cambridge Law Journal\n35 Canadian Tax Journal\n36 Columbia Law Review\n37 Commercial Law Journal\n38 Cornell Law Review\n39 Decision Sciences\n40 Decision Support Systems\n41 Econometric Theory\n42 Economic Theory\n43 Energy Economics\n44 Entrepreneurship: Theory and Practice\n45 Environment and Planning A\n46 Environment and Planning B: planning and design\n47 European Economic Review\n48 European Journal of Information Systems\n49 European Journal of Marketing\n50 European Journal of Operational Research\n51 Experimental Economics\n52 Federal Law Review\n53 Foreign Affairs\n54 Foreign Policy (Washington)\n55 Games and Economic Behavior\n56 Gender and Society\n57 Global Environmental Change\n58 Harvard Law Review\n59 Health Economics\n60 Human Relations\n61 Industrial and Labor Relations Review\n62 Industrial Marketing Management\n63 Industrial Relations: a journal of economy and society\n64 Information and Management IF score 3.890\n65 Information and Organization\n66 Information Systems Journal\n67 International Economic Review\n68 International Journal of Hospitality Management\n69 International Journal of Production Economics\n70 International Journal of Research in Marketing\n71 Journal of Applied Econometrics\n72 Journal of Banking and Finance\n73 Journal of Business and Economic Statistics\n74 Journal of Computational and Graphical Statistics\n75 Journal of Conflict Resolution: research on war and peace between and within nations\n76 Journal of Construction Engineering and Management\n77 Journal of Contract Law\n78 Journal of Corporate Finance\n79 Journal of Development Economics\n80 Journal of Econometrics\n81 Journal of Economic Behavior and Organization\n82 Journal of Economic Dynamics and Control\n83 Journal of Economic Growth\n84 Journal of Economic Literature\n85 Journal of Economic Perspectives\n86 Journal of Economic Theory\n87 Journal of Environmental Economics and Management\n88 Journal of Experimental Psychology: general\n89 Journal of Experimental Psychology: human perception and performance\n90 Journal of Experimental Psychology: learning, memory, and cognition\n91 Journal of Financial Intermediation\n92 Journal of Financial Markets\n93 Journal of Health Economics\n94 Journal of Human Resources: education, manpower and welfare economics\n95 Journal of Information Technology\n96 Journal of International Economics\n97 Journal of Labor Economics\n98 Journal of Management\n99 Journal of Management Information Systems\n100 Journal of Monetary Economics\n101 Journal of Money, Credit and Banking\n102 Journal of Organizational Behavior\n103 Journal of Personality and Social Psychology\n104 Journal of Product Innovation Management\n105 Journal of Public Economics\n106 Journal of Retailing\n107 Journal of Service Research\n108 Journal of Sport Management\n109 Journal of Strategic Information Systems\n110 Journal of Sustainable Tourism\n111 Journal of the Academy of Marketing Science 初审26天，接收522天\n112 Journal of the American Society for Information Science and Technology\n113 Journal of the Association for Information Systems\n114 Journal of the European Economic Association\n115 Journal of the Royal Statistical Society Series B: Statistical Methodology\n116 Journal of Travel Research\n117 Journal of Urban Economics\n118 Journal of Vocational Behavior\n119 Law Quarterly Review\n120 Management Accounting Research\n121 Omega\n122Organizational Research Methods\n123 Oxford University Commonwealth Law Journal\n124 Personality and Social Psychology Bulletin\n125 Personality and Social Psychology Review\n126 Personnel Psychology: a journal of applied research\n127Probability Theory and Related Fields\n128 Psychological Bulletin\n129 Psychological Review\n130 Psychological Science\n131 Quantitative Economics\n132 Regional Studies\n133 Research Policy\n134 Review of Asset Pricing Studies\n135 Review of Corporate Finance Studies\n136 Review of Economic Dynamics\n137 Review of Finance\n138 Sociology\n139 The Accounting Review\n140 The Economic Journal\n141 The European Accounting Review\n142 The Journal of Business (Chicago)\n143 The Journal of Economic History\n144 The Journal of Law and Economics\n145 The Leadership Quarterly\n146 The Modern Law Review\n147 The Quarterly Journal of Economics\n148 The Review of Economic Studies\n149 The Review of Economics and Statistics\n150 The Review of Financial Studies\n151 The Yale Law Journal\n152 Theoretical Economics\n153 Torts Law Journal\n154 Tourism Management\n155 Transportation Research Part A: Policy and Practice\n156 Transportation Research Part B: Methodological\n157 Transportation Research Part E: Logistics and Transportation Review\n158 University of Chicago Law Review\n159 Urban Studies: an international journal for research in urban studies\n\n非分类列表期刊 International Journal of Information Management\nJournal of Interactive Marketing\nComputers in Human Behavior\nInformation Systems\nBehaviour \u0026amp; Information Technology\nEI检索\nCPCI-S(ISTP)检索\nINFORMS Journal On Computing\n","permalink":"/list/","summary":"A+期刊    Areas journal      Acounting Journal of Accounting Research (UTD 24) Accounting Review(UTD24) Journal of Accounting and Economics(UTD24)    Finance Journal of Finance(UTD24) Journal of Financial Economics(UTD24) Review of Financial Studies(UTD 24)    Information Systems Information Systems Research(UTD24) MISQuarterly(UTD24)    Marketing Journal of consumer research(UTD24) Journal of Marketing(UTD24) Journal of Marketing Research(UTD24) Marketing Science(UTD24)","title":""},{"content":" 点击上方图片购买课程   数据集下载 链接:https://pan.baidu.com/s/1rUfj7NYYAnM3NuFWCHyPpA 密码:ux8z\n在昨天发的文章里提到了yelp数据集，官网显示\u0026quot;Yelp数据集是我们用于个人，教育和学术目的的业务，评论和用户数据的子集。 以JSON文件形式提供，可用于在学习如何制作移动应用程序的同时，向学生介绍数据库，学习NLP或提供示例生产数据。\u0026quot;\nyelp官网显示，这个数据集亮点如下：\n 668+w条评论 19+w个商业机构 20w张图片 10个都市区域 字段包括:营业时间、是否泊车、可用性和环境   在kaggle上也能看到使用这个数据集的案例，说不定有你需要的分析方法。\n 我已经从yelp官网下载了数据, 参照kaggle的很多例子，咱们也在自己电脑上跑跑简单的分析\nbusiness数据读取 kaggle中的数据是csv文件，咱这里是json，略有不同，但读取都可以用pandas读取\nimport pandas as pd #一开始用注释掉的代码，有bug，经过百度找到lines=True解决方案 #business = pd.read_json(\u0026#39;yelp_dataset/business.json\u0026#39;) business = pd.read_json(\u0026#39;yelp_dataset/business.json\u0026#39;, lines=True) business.head()   评分分布 import seaborn as sns sns.color_palette() [(0.12156862745098039, 0.4666666666666667, 0.7058823529411765), (1.0, 0.4980392156862745, 0.054901960784313725), (0.17254901960784313, 0.6274509803921569, 0.17254901960784313), (0.8392156862745098, 0.15294117647058825, 0.1568627450980392), (0.5803921568627451, 0.403921568627451, 0.7411764705882353), (0.5490196078431373, 0.33725490196078434, 0.29411764705882354), (0.8901960784313725, 0.4666666666666667, 0.7607843137254902), (0.4980392156862745, 0.4980392156862745, 0.4980392156862745), (0.7372549019607844, 0.7411764705882353, 0.13333333333333333), (0.09019607843137255, 0.7450980392156863, 0.8117647058823529)]  import matplotlib.pyplot as plt import seaborn as sns colors = sns.color_palette() rating = business[\u0026#39;stars\u0026#39;].value_counts() rating.sort_index(inplace=True) rating.plot(kind=\u0026#39;bar\u0026#39;, figsize=(10, 5), color=colors[:9], rot=0) #字体倾斜角度 plt.title(\u0026#39;Rating Distribution of Yelp\u0026#39;,fontweight=\u0026#39;bold\u0026#39;) plt.show()   行业统计 查看行业店家数量分布\nimport numpy as np business[\u0026#39;categories\u0026#39;] = business[\u0026#39;categories\u0026#39;].apply(lambda x: x if x else \u0026#39; \u0026#39;) category_str = \u0026#39;,\u0026#39;.join(business[\u0026#39;categories\u0026#39;]) category_list = category_str.split(\u0026#39;,\u0026#39;) category_df = pd.DataFrame(category_list, columns=[\u0026#39;category\u0026#39;]) top15_category = category_df[\u0026#39;category\u0026#39;].value_counts()[:15] top15_category top15_category.plot(kind=\u0026#39;bar\u0026#39;, color=colors[:20], figsize=(20, 10), rot=30, fontsize=20) plt.title(\u0026#39;Top 20 Category in Yelp\u0026#39;, fontsize=25, fontweight=\u0026#39;bold\u0026#39;) plt.show()   城市分布 显示yelp中Top20城\ncitys = business[\u0026#39;city\u0026#39;].value_counts()[:20] citys.sort_values(ascending=True, inplace=True)#降序，原地修改原始数据 citys.plot(kind=\u0026#39;barh\u0026#39;, #水平条形图 figsize=(10, 15), fontsize=20, color=colors[:20]) plt.title(\u0026#39;Top 20 city in the Yelp\u0026#39;, fontsize=20, fontweight=\u0026#39;bold\u0026#39;) plt.show()   ","permalink":"/blog/yelpdataset%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE%E9%9B%8610g/","summary":"点击上方图片购买课程   数据集下载 链接:https://pan.baidu.com/s/1rUfj7NYYAnM3NuFWCHyPpA 密码:ux8z\n在昨天发的文章里提到了yelp数据集，官网显示\u0026quot;Yelp数据集是我们用于个人，教育和学术目的的业务，评论和用户数据的子集。 以JSON文件形式提供，可用于在学习如何制作移动应用程序的同时，向学生介绍数据库，学习NLP或提供示例生产数据。\u0026quot;\nyelp官网显示，这个数据集亮点如下：\n 668+w条评论 19+w个商业机构 20w张图片 10个都市区域 字段包括:营业时间、是否泊车、可用性和环境   在kaggle上也能看到使用这个数据集的案例，说不定有你需要的分析方法。\n 我已经从yelp官网下载了数据, 参照kaggle的很多例子，咱们也在自己电脑上跑跑简单的分析\nbusiness数据读取 kaggle中的数据是csv文件，咱这里是json，略有不同，但读取都可以用pandas读取\nimport pandas as pd #一开始用注释掉的代码，有bug，经过百度找到lines=True解决方案 #business = pd.read_json(\u0026#39;yelp_dataset/business.json\u0026#39;) business = pd.read_json(\u0026#39;yelp_dataset/business.json\u0026#39;, lines=True) business.head()   评分分布 import seaborn as sns sns.color_palette() [(0.12156862745098039, 0.4666666666666667, 0.7058823529411765), (1.0, 0.4980392156862745, 0.054901960784313725), (0.17254901960784313, 0.6274509803921569, 0.17254901960784313), (0.8392156862745098, 0.15294117647058825, 0.1568627450980392), (0.5803921568627451, 0.403921568627451, 0.7411764705882353), (0.5490196078431373, 0.33725490196078434, 0.29411764705882354), (0.8901960784313725, 0.4666666666666667, 0.7607843137254902), (0.4980392156862745, 0.4980392156862745, 0.4980392156862745), (0.7372549019607844, 0.","title":"YelpDaset | 酒店管理类数据集10+G"},{"content":" 点击上方图片购买课程   前几天刚刚分享了，\n大数据时代下社会科学研究方法的拓展—基于词嵌入技术的文本分析的应用\n人类在留下语言、文字的过程中，也留下了自己的偏见、态度等主观认知信息（偏见、态度）。词嵌入做为一种词向量模型，可以隐含上下文的情景信息，态度及偏见很容易保留在词向量的某些维度中。通过词向量距离的测算，就可以间接测得不同群体 对 某概念(组织、群体、品牌、地域等)的态度偏见。\n下面整理了几篇 集智俱乐部 分享过词嵌入解读文章， 部分含视频讲解。文章末尾还有更多词嵌入的最新文献，感兴趣的同学也可以收藏。\nTips pnas的数据挖掘的论文，大多都含有数据及代码。\n偏见 文化中的几何：词嵌入如何捕捉文化社会学的微妙关系  Kozlowski, A.C., Taddy, M. and Evans, J.A., 2019. The geometry of culture: Analyzing the meanings of class through word embeddings. American Sociological Review, 84(5), pp.905-949.\n 来自芝加哥大学和亚马逊的研究者，针对海量文本资料，将所有词向量分解为性别，阶级和种族三个维度，并通过将不同词向量在这三个维度上的投影来给出该词的性别、阶级和种族属性。本文是对这项工作的解读。\n点击查看详细解读\n故事的形态可预期其成功  Toubia, O., Berger, J. and Eliashberg, J., 2021. How quantifying the shape of stories predicts their success. Proceedings of the National Academy of Sciences, 118(26).\n 通过NLP，分析了电影、电视剧及科研论文的叙事模式，与其成功之间的关系。发现不同类型的文章，由于大众的认知偏好，促成其成功的叙事模式是不同。作为计算社会学的一部分，该研究通过量化分析，确认了面对不同的叙事模式，存在普遍的认知偏好。\n点击查看详细解读\n童话里都是骗人的？用词向量解析故事中的性别偏见   Xu H, Zhang Z, Wu L, Wang C_J. The Cinderella Complex: Word Embeddings Quantify Gender Stereotypes in Movies and Books. Available from https://arxiv.org/abs/1811.04599. 2019.06. Caliskan A, Bryson JJ, Narayanan A. Semantics derived automatically from language corpora contain human-like biases. Science. 2017;356: 183–186. Garg N, Schiebinger L, Jurafsky D, Zou J. Word embeddings quantify 100 years of gender and ethnic stereotypes . Proceedings of the National Academy of Sciences. 2018. pp. E3635–E3644. doi:10.1073/pnas.1720347115 Dowling C. The Cinderella Complex: Women’s Hidden Fear of Independence. 1982.   “男人是女人通往幸福的道路”——这种偏见是如何通过一个精心设计的故事创造出来的？灰姑娘式的叙事结构形成并强化了\u0026quot;灰姑娘情结\u0026quot;，即女性对独立的恐惧和被他人照顾的无意识欲望。\u0026ldquo;灰姑娘情结\u0026quot;在不同时期和不同文化中广泛存在，这提醒研究我们有必要通过教育、政策和其他方面创造新的叙述方式来与之作斗争。\n研究者提出了计算机化的框架分析，通过描绘故事的形状来测量性别刻板印象。词嵌入技术提供了一个强大的替代情感词典的方法，首先，研究团队构建一个“高兴——不高兴”的情感轴，然后计算余弦相似性来得到每一个词的情感得分。\n点击查看详细解读\n词向量带你洞悉美国性别与种族歧视的100年历史演变 性别歧视、种族歧视都是存在了上百年的社会现象，这些现象在不同历史时期有怎样的发展变化呢？发表在PNAS这篇论文中，研究者用词向量的方法研究大量文本数据，挖掘出美国近一百年文化刻板印象的演化。\n Garg, N., Schiebinger, L., Jurafsky, D. and Zou, J., 2018. Word embeddings quantify 100 years of gender and ethnic stereotypes. Proceedings of the National Academy of Sciences, 115(16), pp.E3635-E3644.\n 详细解读请看 https://mp.weixin.qq.com/s/VroknX42MBdckptv4tELJg\n利用向量表征挖掘知识的创造和组织 词向量是自然语言处理中的一项基础性技术，通过词语之间的共同出现网络，可以在低维空间表征词汇间的语义相关性。4月23日发表在 Science Advences 的论文，通过论文引用网络，结合神经网络为不同的学科的科研期刊构建了连续的向量化嵌入表征，从中可以了解新知是如何被创造和组织的。\n Peng, H., Ke, Q., Budak, C., Romero, D.M. and Ahn, Y.Y., 2021. Neural embeddings of scholarly periodicals reveal complex disciplinary organizations. Science Advances, 7(17), p.eabb9004.\n 点击查看详细解读\n量化在线平台中的社会组织和政治两极分化 大量选择志同道合的人可能会分裂和极化网络社会，特别是在党派差异方面。 通过利用大规模的聚合行为模式来量化在线社区在社会维度上的定位。应用 14 年来在 Reddit 上 10,000 个社区中发表的 51 亿条评论，我们衡量了宏观社区结构在年龄、性别和美国政治党派方面的组织方式。\n检查政治内容，我们发现 Reddit 在 2016 年美国总统大选前后经历了一次重大的两极分化事件。然而，与传统观念相反，个人层面的两极分化是罕见的。 2016 年的系统级转变主要是由新用户的到来推动的。 Reddit 上的政治两极分化与平台上的先前活动无关，而是在时间上与外部事件保持一致。\n研究还观察到明显的意识形态不对称，2016 年两极分化的急剧增加完全归因于右翼活动的变化。这种方法广泛适用于在线互动的研究，我们的研究结果对在线平台的设计、理解在线行为的社会背景以及量化在线两极分化的动态和机制具有重要意义。\n Waller, I. and Anderson, A., 2021. Quantifying social organization and political polarization in online platforms. Nature, 600(7888), pp.264-268. 点击查看详细解读\n 更多文献  Arseniev-Koehler, A., Cochran, S.D., Mays, V.M., Chang, K.W. and Foster, J.G., 2022. Integrating topic modeling and word embedding to characterize violent deaths. Proceedings of the National Academy of Sciences, 119(10), p.e2108801119. Bollen, J., Ten Thij, M., Breithaupt, F., Barron, A.T., Rutter, L.A., Lorenzo-Luaces, L. and Scheffer, M., 2021. Historical language records reveal a surge of cognitive distortions in recent decades. Proceedings of the National Academy of Sciences, 118(30). Kim, L., Smith, D.S., Hofstra, B. and McFarland, D.A., 2022. Gendered knowledge in fields and academic careers. Research Policy, 51(1), p.104411. Lawson, M.A., Martin, A.E., Huda, I. and Matz, S.C., 2022. Hiring women into senior leadership positions is associated with a reduction in gender stereotypes in organizational language. Proceedings of the National Academy of Sciences, 119(9), p.e2026443119. Brady, W.J., McLoughlin, K., Doan, T.N. and Crockett, M.J., 2021. How social learning amplifies moral outrage expression in online social networks. Science Advances, 7(33), p.eabe5641. Bailey, A.H., Williams, A. and Cimpian, A., 2022. Based on billions of words on the internet, people= men. Science Advances, 8(13), p.eabm2463. Lewis, M. and Lupyan, G., 2020. Gender stereotypes are reflected in the distributional structure of 25 languages. Nature human behaviour, 4(10), pp.1021-1028. Schramowski, P., Turan, C., Andersen, N., Rothkopf, C.A. and Kersting, K., 2022. Large pre-trained language models contain human-like biases of what is right and wrong to do. Nature Machine Intelligence, 4(3), pp.258-268. Costa-jussà, M.R., 2019. An analysis of gender bias studies in natural language processing. Nature Machine Intelligence, 1(11), pp.495-496. Rodman, E., 2020. A timely intervention: Tracking the changing meanings of political concepts with word vectors. Political Analysis, 28(1), pp.87-111. Bhatia, S., 2017. Associative judgment and vector space semantics. Psychological review, 124(1), p.1. Kurdi, B., Mann, T.C., Charlesworth, T.E. and Banaji, M.R., 2019. The relationship between implicit intergroup attitudes and beliefs. Proceedings of the National Academy of Sciences, 116(13), pp.5862-5871. Charlesworth, T.E., Yang, V., Mann, T.C., Kurdi, B. and Banaji, M.R., 2021. Gender stereotypes in natural language: Word embeddings show robust consistency across child and adult language corpora of more than 65 million words. Psychological Science, 32(2), pp.218-240. Bhatia, S., 2019. Predicting risk perception: New insights from data science. Management Science, 65(8), pp.3800-3823. Rheault, L. and Cochrane, C., 2020. Word embeddings for the analysis of ideological placement in parliamentary corpora. Political Analysis, 28(1), pp.112-133. Yang, K., Lau, R.Y. and Abbasi, A., 2022. Getting Personal: A Deep Learning Artifact for Text-Based Measurement of Personality. Information Systems Research. Rodman, E., 2020. A timely intervention: Tracking the changing meanings of political concepts with word vectors. Political Analysis, 28(1), pp.87-111. Margulis, E.H., Wong, P.C., Turnbull, C., Kubit, B.M. and McAuley, J.D., 2022. Narratives imagined in response to instrumental music reveal culture-bounded intersubjectivity. Proceedings of the National Academy of Sciences, 119(4). Thompson, B., Roberts, S.G. and Lupyan, G., 2020. Cultural influences on word meanings revealed through large-scale semantic alignment. Nature Human Behaviour, 4(10), pp.1029-1038.   点击上方图片购买课程   ","permalink":"/blog/embeddingsandattitude/","summary":"点击上方图片购买课程   前几天刚刚分享了，\n大数据时代下社会科学研究方法的拓展—基于词嵌入技术的文本分析的应用\n人类在留下语言、文字的过程中，也留下了自己的偏见、态度等主观认知信息（偏见、态度）。词嵌入做为一种词向量模型，可以隐含上下文的情景信息，态度及偏见很容易保留在词向量的某些维度中。通过词向量距离的测算，就可以间接测得不同群体 对 某概念(组织、群体、品牌、地域等)的态度偏见。\n下面整理了几篇 集智俱乐部 分享过词嵌入解读文章， 部分含视频讲解。文章末尾还有更多词嵌入的最新文献，感兴趣的同学也可以收藏。\nTips pnas的数据挖掘的论文，大多都含有数据及代码。\n偏见 文化中的几何：词嵌入如何捕捉文化社会学的微妙关系  Kozlowski, A.C., Taddy, M. and Evans, J.A., 2019. The geometry of culture: Analyzing the meanings of class through word embeddings. American Sociological Review, 84(5), pp.905-949.\n 来自芝加哥大学和亚马逊的研究者，针对海量文本资料，将所有词向量分解为性别，阶级和种族三个维度，并通过将不同词向量在这三个维度上的投影来给出该词的性别、阶级和种族属性。本文是对这项工作的解读。\n点击查看详细解读\n故事的形态可预期其成功  Toubia, O., Berger, J. and Eliashberg, J., 2021. How quantifying the shape of stories predicts their success. Proceedings of the National Academy of Sciences, 118(26).","title":"词嵌入测量不同群体对某概念的态度(偏见)"}]