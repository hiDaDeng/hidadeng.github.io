{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u201d 2022\u5bd2\u5047Python\u6570\u636e\u6316\u6398\u5de5\u4f5c\u574a \u201c \u5f00\u59cb\u62a5\u540d\u4e86\uff0c \u6700\u65b0\u7684python\u6280\u672f\u6587\u4f1a\u5728\u516c\u4f17\u53f7\u5206\u4eab\uff0c\u6b22\u8fce\u5404\u4f4d\u5173\u6ce8\u6211\u7684\u516c\u4f17\u53f7\u3002","title":"Home"},{"location":"PythonBasic/boolenNone/","text":"\u5e03\u5c14\u503cBoolean \u7528\u4e8e\u903b\u8f91\u5224\u65ad\uff0c\u4e00\u822c\u4e0eif\u7ed3\u5408\u4f7f\u7528\u3002 a = True print(a) True True True False False \u5176\u4ed6\u4ea7\u751f\u5e03\u5c14\u503c\u7684\u65b9\u5f0f \u5e03\u5c14\u8fd0\u7b97 \u6bd4\u8f83\u8fd0\u7b97 \u6210\u5458\u8fd0\u7b97 \u5e03\u5c14\u8fd0\u7b97 \u4e2d\u5b66\u6570\u5b66\u8bfe\u91cc\u7684\u4e14\u6216\u975e \u8fd0\u7b97\u7b26\u53f7 \u529f\u80fd \u4f8b\u5b50 \u7b49\u4e8e x and y \u4e14 True and False False x or y \u6216 True or False True not x \u975e not True False x = True and False print(x) False x = True or False print(x) True x = not True print(x) False x = not False print(x) True \u6bd4\u8f83\u8fd0\u7b97 \u6ce8\u610f\uff1a =\u548c == \u7684\u533a\u522b\uff0c=\u7528\u6765\u628a\u67d0\u4e2a\u503c\u4f20\u7ed9\u67d0\u4e2a\u53d8\u91cf(\u8d4b\u503c\u64cd\u4f5c)\uff0c == \u7528\u6765\u5224\u65ad\u4e24\u4e2a\u503c(\u53d8\u91cf)\u662f\u5426\u76f8\u7b49(\u5224\u65ad\u64cd\u4f5c) \u6bd4\u8f83\u8fd0\u7b97\u7b26\u53f7 \u529f\u80fd \u4f8b\u5b50 \u7b49\u4e8e == \u76f8\u7b49 5==3 False != \u4e0d\u7b49\u4e8e 5!=3 True > \u5927\u4e8e 5>3 True < \u5c0f\u4e8e 5<3 False <= \u5c0f\u4e8e\u7b49\u4e8e 5<=3 False >= \u5c0f\u4e8e 5>=3 True a = 5 b = 3 x = a<b print(x) print(type(x)) False <class 'bool'> print(5==5) True print(5!=5) False \u6ce8\u610f: \u6bd4\u8f83\u7b26\u4e24\u4fa7\u5fc5\u987b\u4e3a\u540c\u6837\u7684\u6570\u636e\u7c7b\u578b a = '5' b = 5 print(a>b) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-15-861d7a553a1d> in <module> 2 b = 5 3 ----> 4 print(a>b) TypeError: '>' not supported between instances of 'str' and 'int' a = '5' b = '5' print(a==b) True \u6210\u5458\u8fd0\u7b97\u7b26in \u7528\u6765\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u5728\u96c6\u5408\u4e2d\uff08\u8fd9\u4e2a\u96c6\u5408\u53ef\u4ee5\u4f7f\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u7b49) \u6848\u4f8b \u7ed3\u679c 4 in [1,2,4] True 4 not in [1,2,4] False 3 in [1,2,4] False 3 not in [1,2,4] True x = 4 in [1,2,4] x True y = 4 not in [1,2,4] y False None \u7279\u6b8a\u7684\u7a7a\u503c\uff0c\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u4e2d\u7684Null\u3002 None '' '' [] [] dict() {} type(None) NoneType","title":"\u5e03\u5c14\u503c&None"},{"location":"PythonBasic/boolenNone/#boolean","text":"\u7528\u4e8e\u903b\u8f91\u5224\u65ad\uff0c\u4e00\u822c\u4e0eif\u7ed3\u5408\u4f7f\u7528\u3002 a = True print(a) True True True False False \u5176\u4ed6\u4ea7\u751f\u5e03\u5c14\u503c\u7684\u65b9\u5f0f \u5e03\u5c14\u8fd0\u7b97 \u6bd4\u8f83\u8fd0\u7b97 \u6210\u5458\u8fd0\u7b97","title":"\u5e03\u5c14\u503cBoolean"},{"location":"PythonBasic/boolenNone/#_1","text":"\u4e2d\u5b66\u6570\u5b66\u8bfe\u91cc\u7684\u4e14\u6216\u975e \u8fd0\u7b97\u7b26\u53f7 \u529f\u80fd \u4f8b\u5b50 \u7b49\u4e8e x and y \u4e14 True and False False x or y \u6216 True or False True not x \u975e not True False x = True and False print(x) False x = True or False print(x) True x = not True print(x) False x = not False print(x) True","title":"\u5e03\u5c14\u8fd0\u7b97"},{"location":"PythonBasic/boolenNone/#_2","text":"\u6ce8\u610f\uff1a =\u548c == \u7684\u533a\u522b\uff0c=\u7528\u6765\u628a\u67d0\u4e2a\u503c\u4f20\u7ed9\u67d0\u4e2a\u53d8\u91cf(\u8d4b\u503c\u64cd\u4f5c)\uff0c == \u7528\u6765\u5224\u65ad\u4e24\u4e2a\u503c(\u53d8\u91cf)\u662f\u5426\u76f8\u7b49(\u5224\u65ad\u64cd\u4f5c) \u6bd4\u8f83\u8fd0\u7b97\u7b26\u53f7 \u529f\u80fd \u4f8b\u5b50 \u7b49\u4e8e == \u76f8\u7b49 5==3 False != \u4e0d\u7b49\u4e8e 5!=3 True > \u5927\u4e8e 5>3 True < \u5c0f\u4e8e 5<3 False <= \u5c0f\u4e8e\u7b49\u4e8e 5<=3 False >= \u5c0f\u4e8e 5>=3 True a = 5 b = 3 x = a<b print(x) print(type(x)) False <class 'bool'> print(5==5) True print(5!=5) False \u6ce8\u610f: \u6bd4\u8f83\u7b26\u4e24\u4fa7\u5fc5\u987b\u4e3a\u540c\u6837\u7684\u6570\u636e\u7c7b\u578b a = '5' b = 5 print(a>b) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-15-861d7a553a1d> in <module> 2 b = 5 3 ----> 4 print(a>b) TypeError: '>' not supported between instances of 'str' and 'int' a = '5' b = '5' print(a==b) True","title":"\u6bd4\u8f83\u8fd0\u7b97"},{"location":"PythonBasic/boolenNone/#in","text":"\u7528\u6765\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u5728\u96c6\u5408\u4e2d\uff08\u8fd9\u4e2a\u96c6\u5408\u53ef\u4ee5\u4f7f\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u7b49) \u6848\u4f8b \u7ed3\u679c 4 in [1,2,4] True 4 not in [1,2,4] False 3 in [1,2,4] False 3 not in [1,2,4] True x = 4 in [1,2,4] x True y = 4 not in [1,2,4] y False","title":"\u6210\u5458\u8fd0\u7b97\u7b26in"},{"location":"PythonBasic/boolenNone/#none","text":"\u7279\u6b8a\u7684\u7a7a\u503c\uff0c\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u4e2d\u7684Null\u3002 None '' '' [] [] dict() {} type(None) NoneType","title":"None"},{"location":"PythonBasic/built-function/","text":"\u6709\u4e09\u5927\u7c7b\u5185\u7f6e\u51fd\u6570 \u6570\u5b66\u76f8\u5173\u51fd\u6570 \u7c7b\u578b\u8f6c\u5316\u51fd\u6570 \u529f\u80fd\u51fd\u6570 \u51fd\u6570\u540d\u52a0\u7c97\u7684\u662f\u90fd\u662f\u91cd\u70b9 \u6570\u5b66\u76f8\u5173 \u51fd\u6570 \u529f\u80fd \u4f8b\u5b50 \u8fd0\u884c\u7ed3\u679c abs(a) \u5bf9a\u53d6\u7edd\u5bf9\u503c abs(-1) 1 max(lst)\u3001min(lst) \u5bfb\u627elst\u4e2d\u7684\u6700\u5927\u3001\u6700\u5c0f\u503c max([3, 2, 9]) 9 sum(lst) \u5bf9lst\u5185\u6240\u6709\u6570\u5b57\u6c42\u548c sum([3, 2, 9]) 14 sorted(lst\uff0c reverse) \u5bf9lst\u6392\u5e8f\uff1b \u53c2\u6570reverse\u4e3a\u5e03\u5c14\u503c\u63a7\u5236\u5347\u964d\u5e8f sorted([3, 2, 9]) [2, 3, 9] range(start, end, step) \u751f\u6210\u4ee5\u6b65\u957fstep\uff0c\u751f\u6210\u4ecestart\u5230end\u7684\u6570\u5217,\u9ed8\u8ba4step=1\uff0c\u7ed3\u679c\u53d6\u4e0d\u5230end list(range(1,5)) [1, 2, 3,4] #\u53d6\u7edd\u5bf9\u503c abs(-1) 1 #\u53d6\u6700\u5927 max([3, 2, 9]) 9 #\u53d6\u6700\u5c0f min([3, 2, 9]) 2 #\u6c42\u548c sum([3, 2, 9]) 14 #\u6392\u5e8f sorted([3,2,9]) [2, 3, 9] #\u6392\u5e8f(\u65b9\u5411\u8c03\u6574) sorted([3,2,9], reverse=True) [9, 3, 2] #\u751f\u6210\u5e8f\u5217 list(range(1, 10)) [1, 2, 3, 4, 5, 6, 7, 8, 9] list(range(1, 10, 2)) [1, 3, 5, 7, 9] \u7c7b\u578b\u8f6c\u6362 \u51fd\u6570 \u529f\u80fd \u4f8b\u5b50 \u8fd0\u884c\u7ed3\u679c int(string) \u5c06\u5b57\u7b26\u4e32\u6570\u6539\u4e3a\u6574\u6570\u578b int('9') 9 float(int/str) \u5c06int\u6216str\u6539\u4e3a\u6d6e\u70b9\u578b float(9)\u3001float('9') 9.0 list(iterable) \u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u5217\u8868\u3002\u8fd9\u91cc\u7684iterable\u53ef\u4ee5\u4e3a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\u5217\u8868 list(range(1,5)) [1,2,3,4] enumerate(lst) \u8fd4\u56de\u5e26\u6709\u7d22\u5f15\u503c\u7684\u5e8f\u5217seq, \u9700\u8981list(seq)\u5904\u7406\u540e\u624d\u80fd\u770b\u5230seq list(enumerate(['a', 'b', 'c'])) [(0,'a'), (1, 'b'), (2, 'c')] tuple(lst) \u5c06lst\u53d8\u4e3atuple tuple([1,2,3]) (1,2,3) set(lst) \u5c06lst\u53d8\u4e3a\u96c6\u5408 set([1,4,4,4,3]) {1,3,4} a = 9 b = 9 a+b 18 #\u53d8\u8f6c\u5316\u4e3a\u6574\u6570 int('9') 9 #\u8f6c\u5316\u4e3a\u5c0f\u6570 float('9') 9.0 float(9) 9.0 #\u8f6c\u5316\u4e3a\u5217\u8868 list(range(1, 5)) [1, 2, 3, 4] #\u7ed9\u5217\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5206\u914d\u4e00\u4e2a\u7d22\u5f15\u503c names = ['\u5f20\u4e09', '\u674e\u56db', '\u738b\u4e94'] list(enumerate(names)) [(0, '\u5f20\u4e09'), (1, '\u674e\u56db'), (2, '\u738b\u4e94')] \u529f\u80fd\u51fd\u6570 \u51fd\u6570 \u529f\u80fd \u4f8b\u5b50 \u8fd0\u884c\u7ed3\u679c eval(expression) \u6267\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f eval('1+1') 2 zip(lst1,lst2...) \u5c06lst1,lst2...\u5408\u5e76,\u8fd4\u56dezip\u5bf9\u8c61\u3002 \u9700\u8981list\u5904\u7406\u4e00\u4e0bzip\u5bf9\u8c61 list(zip([1,2,3],[4,5,6])) [(1, 4), (2, 5), (3, 6)] type(x) \u67e5\u770bX\u7684\u7c7b\u578b type('2') help(x) \u67e5\u770bX\u7684\u76f8\u5173\u4fe1\u606f help([1, 2]) Help on list object.. map(func, lst) \u5bf9lst\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e2a\u4f53\u90fd\u8fdb\u884cfunc\u64cd\u4f5c list(map(sum, [[1,1], [1,2]])) [2, 3] print(value, end='\\n') \u6253\u5370value print('abc') abc open(file\uff0c encoding) \u6253\u5f00file\u6587\u4ef6\uff0c encoding\u662ffile\u7684\u6587\u4ef6\u7f16\u7801 eval() eval(str_expression) str_expression \u662f\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u662f\u53d8\u91cf\u3001\u51fd\u6570\u7b49 a = 9 b = 9 c = 'a+b' print(a+b) print(c) print(eval(c)) 18 a+b 18 eval('a+b') 18 d = 'hello world' print('d') print(eval('d')) d hello world def hello(): print('hello python') print('hello()') hello() eval('hello()') hello python zip(lst1, lst2,lst3...) \u5c06lst1\uff0c lst2\uff0c lst3\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u5408\u5e76 names = ['David', 'Mary', 'Henry', 'Unique'] sexs = ['male', 'femal', 'male', 'male'] ages = [25, 22, 30, 40] list(zip(names, sexs, ages)) [('David', 'male', 25), ('Mary', 'femal', 22), ('Henry', 'male', 30), ('Unique', 'male', 40)] type/help \u67e5\u770b\u6570\u636e\u7c7b\u578b\u3001\u67e5\u770b\u611f\u5174\u8da3\u5bf9\u8c61\u7684\u4ecb\u7ecd a = [1,3,5] type(a) list help(a) Help on list object: class list(object) | list(iterable=(), /) | | Built-in mutable sequence. | | If no argument is given, the constructor creates a new empty list. | The argument must be an iterable if specified. | | Methods defined here: | ......... | append(self, object, /) | Append object to the end of the list. | | | count(self, value, /) | Return number of occurrences of value. | | extend(self, iterable, /) | Extend list by appending elements from the iterable. | type(print) builtin_function_or_method help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream. map(func, lst)\u6620\u5c04\u8fd0\u7b97 \u5c06func\u8fd0\u7b97\u6620\u5c04\u5230lst\u4e0a\u6bcf\u4e2a\u5143\u7d20 lst = [[1,1], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2]] res = map(sum, lst) list(res) [2, 3, 3, 3, 3, 3, 3] print(value, end='\\n') \u6253\u5370value\uff0c\u9ed8\u8ba4\u4f7f\u7528\u6362\u884c\u7ed3\u675f help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream. print('hello world!') print('hello python!') hello world! hello python! print('hello world!', end='\\t') print('hello python!') hello world! hello python! open(file, mode='r', encoding=None) file \u6587\u4ef6\u8def\u5f84 mode \u64cd\u4f5c\u65b9\u5f0f\u4eec\uff0c\u6700\u5e38\u7528\u7684\u662fr\u548ca+\u3002r\u8bfb\u53d6\uff0c a+\u662f\u8ffd\u52a0\u5199\u5165 encoding \u7f16\u7801\u65b9\u5f0f \uff0c\u5e38\u89c1\u7684\u6587\u4ef6\u7f16\u7801\u65b9\u5f0f\u4e3b\u8981\u662futf-8\u548cgbk \u8bfb\u53d6\u8fd4\u56deio\u5bf9\u8c61 io\u5bf9\u8c61\u6709read()\u65b9\u6cd5 \u76f8\u5bf9\u8def\u5f84 data \u7edd\u5bf9\u8def\u5f84 C:Users\\thunderhit\\Desktop\\Python\u6570\u636e\u5206\u6790\u5165\u95e8\\02-Python\u8bed\u6cd5\u5165\u95e8\\data \u5efa\u8bae\u5927\u5bb6\u90fd\u8981\u7528\u76f8\u5bf9\u8def\u5f84 # \u8bfb\u53d6\u6570\u636e open('data/test.txt', encoding='utf-8').read() '\u7ae0\u8282\u8bbe\u8ba1\\n\\n\u7b2c\u4e00\u90e8\u5206 \u73af\u5883\u914d\u7f6e\\n\u7b2c\u4e8c\u90e8\u5206 \u5feb\u901f\u5165\u95e8python\\n\u7b2c\u4e09\u90e8\u5206 \u7f51\u7edc\u722c\u866b\\n\u7b2c\u56db\u90e8\u5206 \u7b80\u5355\u7684\u6587\u672c\u5206\u6790\\n\u7b2c\u4e94\u90e8\u5206 \u8fdb\u9636\u6587\u672c\u5206\u6790' # \u65b0\u5efa\u6587\u4ef6/\u5728\u5df2\u6709\u7684\u6587\u4ef6\u5185\u63d2\u5165\u5185\u5bb9 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('\u6211\u5728\u5b66python\uff0c\u73b0\u5728\u662f\u4e0b\u5348\u4e94\u70b9') f.close() # \u65b0\u5efa\u6587\u4ef6/\u5728\u5df2\u6709\u7684\u6587\u4ef6\u5185\u63d2\u5165\u5185\u5bb9 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('\\nLife is short, so to learn Python') f.close() # \u65b0\u5efa\u6587\u4ef6/\u5728\u5df2\u6709\u7684\u6587\u4ef6\u5185\u63d2\u5165\u5185\u5bb9 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('\\nLife is short, so to learn Python') f.write('\\nLife is short, so to learn music') f.write('\\nLife is short, so to learn english') f.close() \u91cd\u70b9\u51fd\u6570 [x] sorted(lst\uff0c ascending) [x] range(start, end, step) [x] enumerate(lst) [x] eval(expression) [x] zip(lst1, lst2..) [x] map(func, lst) [x] print(x) [x] open(file, mode, encoding)","title":"\u5e38\u7528\u5185\u7f6e\u51fd\u6570"},{"location":"PythonBasic/built-function/#_1","text":"\u51fd\u6570 \u529f\u80fd \u4f8b\u5b50 \u8fd0\u884c\u7ed3\u679c abs(a) \u5bf9a\u53d6\u7edd\u5bf9\u503c abs(-1) 1 max(lst)\u3001min(lst) \u5bfb\u627elst\u4e2d\u7684\u6700\u5927\u3001\u6700\u5c0f\u503c max([3, 2, 9]) 9 sum(lst) \u5bf9lst\u5185\u6240\u6709\u6570\u5b57\u6c42\u548c sum([3, 2, 9]) 14 sorted(lst\uff0c reverse) \u5bf9lst\u6392\u5e8f\uff1b \u53c2\u6570reverse\u4e3a\u5e03\u5c14\u503c\u63a7\u5236\u5347\u964d\u5e8f sorted([3, 2, 9]) [2, 3, 9] range(start, end, step) \u751f\u6210\u4ee5\u6b65\u957fstep\uff0c\u751f\u6210\u4ecestart\u5230end\u7684\u6570\u5217,\u9ed8\u8ba4step=1\uff0c\u7ed3\u679c\u53d6\u4e0d\u5230end list(range(1,5)) [1, 2, 3,4] #\u53d6\u7edd\u5bf9\u503c abs(-1) 1 #\u53d6\u6700\u5927 max([3, 2, 9]) 9 #\u53d6\u6700\u5c0f min([3, 2, 9]) 2 #\u6c42\u548c sum([3, 2, 9]) 14 #\u6392\u5e8f sorted([3,2,9]) [2, 3, 9] #\u6392\u5e8f(\u65b9\u5411\u8c03\u6574) sorted([3,2,9], reverse=True) [9, 3, 2] #\u751f\u6210\u5e8f\u5217 list(range(1, 10)) [1, 2, 3, 4, 5, 6, 7, 8, 9] list(range(1, 10, 2)) [1, 3, 5, 7, 9]","title":"\u6570\u5b66\u76f8\u5173"},{"location":"PythonBasic/built-function/#_2","text":"\u51fd\u6570 \u529f\u80fd \u4f8b\u5b50 \u8fd0\u884c\u7ed3\u679c int(string) \u5c06\u5b57\u7b26\u4e32\u6570\u6539\u4e3a\u6574\u6570\u578b int('9') 9 float(int/str) \u5c06int\u6216str\u6539\u4e3a\u6d6e\u70b9\u578b float(9)\u3001float('9') 9.0 list(iterable) \u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u5217\u8868\u3002\u8fd9\u91cc\u7684iterable\u53ef\u4ee5\u4e3a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\u5217\u8868 list(range(1,5)) [1,2,3,4] enumerate(lst) \u8fd4\u56de\u5e26\u6709\u7d22\u5f15\u503c\u7684\u5e8f\u5217seq, \u9700\u8981list(seq)\u5904\u7406\u540e\u624d\u80fd\u770b\u5230seq list(enumerate(['a', 'b', 'c'])) [(0,'a'), (1, 'b'), (2, 'c')] tuple(lst) \u5c06lst\u53d8\u4e3atuple tuple([1,2,3]) (1,2,3) set(lst) \u5c06lst\u53d8\u4e3a\u96c6\u5408 set([1,4,4,4,3]) {1,3,4} a = 9 b = 9 a+b 18 #\u53d8\u8f6c\u5316\u4e3a\u6574\u6570 int('9') 9 #\u8f6c\u5316\u4e3a\u5c0f\u6570 float('9') 9.0 float(9) 9.0 #\u8f6c\u5316\u4e3a\u5217\u8868 list(range(1, 5)) [1, 2, 3, 4] #\u7ed9\u5217\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5206\u914d\u4e00\u4e2a\u7d22\u5f15\u503c names = ['\u5f20\u4e09', '\u674e\u56db', '\u738b\u4e94'] list(enumerate(names)) [(0, '\u5f20\u4e09'), (1, '\u674e\u56db'), (2, '\u738b\u4e94')]","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"PythonBasic/built-function/#_3","text":"\u51fd\u6570 \u529f\u80fd \u4f8b\u5b50 \u8fd0\u884c\u7ed3\u679c eval(expression) \u6267\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f eval('1+1') 2 zip(lst1,lst2...) \u5c06lst1,lst2...\u5408\u5e76,\u8fd4\u56dezip\u5bf9\u8c61\u3002 \u9700\u8981list\u5904\u7406\u4e00\u4e0bzip\u5bf9\u8c61 list(zip([1,2,3],[4,5,6])) [(1, 4), (2, 5), (3, 6)] type(x) \u67e5\u770bX\u7684\u7c7b\u578b type('2') help(x) \u67e5\u770bX\u7684\u76f8\u5173\u4fe1\u606f help([1, 2]) Help on list object.. map(func, lst) \u5bf9lst\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e2a\u4f53\u90fd\u8fdb\u884cfunc\u64cd\u4f5c list(map(sum, [[1,1], [1,2]])) [2, 3] print(value, end='\\n') \u6253\u5370value print('abc') abc open(file\uff0c encoding) \u6253\u5f00file\u6587\u4ef6\uff0c encoding\u662ffile\u7684\u6587\u4ef6\u7f16\u7801","title":"\u529f\u80fd\u51fd\u6570"},{"location":"PythonBasic/built-function/#eval","text":"eval(str_expression) str_expression \u662f\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u662f\u53d8\u91cf\u3001\u51fd\u6570\u7b49 a = 9 b = 9 c = 'a+b' print(a+b) print(c) print(eval(c)) 18 a+b 18 eval('a+b') 18 d = 'hello world' print('d') print(eval('d')) d hello world def hello(): print('hello python') print('hello()') hello() eval('hello()') hello python","title":"eval()"},{"location":"PythonBasic/built-function/#ziplst1-lst2lst3","text":"\u5c06lst1\uff0c lst2\uff0c lst3\u6309\u7167\u987a\u5e8f\u8fdb\u884c\u5408\u5e76 names = ['David', 'Mary', 'Henry', 'Unique'] sexs = ['male', 'femal', 'male', 'male'] ages = [25, 22, 30, 40] list(zip(names, sexs, ages)) [('David', 'male', 25), ('Mary', 'femal', 22), ('Henry', 'male', 30), ('Unique', 'male', 40)]","title":"zip(lst1, lst2,lst3...)"},{"location":"PythonBasic/built-function/#typehelp","text":"\u67e5\u770b\u6570\u636e\u7c7b\u578b\u3001\u67e5\u770b\u611f\u5174\u8da3\u5bf9\u8c61\u7684\u4ecb\u7ecd a = [1,3,5] type(a) list help(a) Help on list object: class list(object) | list(iterable=(), /) | | Built-in mutable sequence. | | If no argument is given, the constructor creates a new empty list. | The argument must be an iterable if specified. | | Methods defined here: | ......... | append(self, object, /) | Append object to the end of the list. | | | count(self, value, /) | Return number of occurrences of value. | | extend(self, iterable, /) | Extend list by appending elements from the iterable. | type(print) builtin_function_or_method help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.","title":"type/help"},{"location":"PythonBasic/built-function/#mapfunc-lst","text":"\u5c06func\u8fd0\u7b97\u6620\u5c04\u5230lst\u4e0a\u6bcf\u4e2a\u5143\u7d20 lst = [[1,1], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2]] res = map(sum, lst) list(res) [2, 3, 3, 3, 3, 3, 3]","title":"map(func, lst)\u6620\u5c04\u8fd0\u7b97"},{"location":"PythonBasic/built-function/#printvalue-endn","text":"\u6253\u5370value\uff0c\u9ed8\u8ba4\u4f7f\u7528\u6362\u884c\u7ed3\u675f help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream. print('hello world!') print('hello python!') hello world! hello python! print('hello world!', end='\\t') print('hello python!') hello world! hello python!","title":"print(value, end='\\n')"},{"location":"PythonBasic/built-function/#openfile-moder-encodingnone","text":"file \u6587\u4ef6\u8def\u5f84 mode \u64cd\u4f5c\u65b9\u5f0f\u4eec\uff0c\u6700\u5e38\u7528\u7684\u662fr\u548ca+\u3002r\u8bfb\u53d6\uff0c a+\u662f\u8ffd\u52a0\u5199\u5165 encoding \u7f16\u7801\u65b9\u5f0f \uff0c\u5e38\u89c1\u7684\u6587\u4ef6\u7f16\u7801\u65b9\u5f0f\u4e3b\u8981\u662futf-8\u548cgbk \u8bfb\u53d6\u8fd4\u56deio\u5bf9\u8c61 io\u5bf9\u8c61\u6709read()\u65b9\u6cd5 \u76f8\u5bf9\u8def\u5f84 data \u7edd\u5bf9\u8def\u5f84 C:Users\\thunderhit\\Desktop\\Python\u6570\u636e\u5206\u6790\u5165\u95e8\\02-Python\u8bed\u6cd5\u5165\u95e8\\data \u5efa\u8bae\u5927\u5bb6\u90fd\u8981\u7528\u76f8\u5bf9\u8def\u5f84 # \u8bfb\u53d6\u6570\u636e open('data/test.txt', encoding='utf-8').read() '\u7ae0\u8282\u8bbe\u8ba1\\n\\n\u7b2c\u4e00\u90e8\u5206 \u73af\u5883\u914d\u7f6e\\n\u7b2c\u4e8c\u90e8\u5206 \u5feb\u901f\u5165\u95e8python\\n\u7b2c\u4e09\u90e8\u5206 \u7f51\u7edc\u722c\u866b\\n\u7b2c\u56db\u90e8\u5206 \u7b80\u5355\u7684\u6587\u672c\u5206\u6790\\n\u7b2c\u4e94\u90e8\u5206 \u8fdb\u9636\u6587\u672c\u5206\u6790' # \u65b0\u5efa\u6587\u4ef6/\u5728\u5df2\u6709\u7684\u6587\u4ef6\u5185\u63d2\u5165\u5185\u5bb9 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('\u6211\u5728\u5b66python\uff0c\u73b0\u5728\u662f\u4e0b\u5348\u4e94\u70b9') f.close() # \u65b0\u5efa\u6587\u4ef6/\u5728\u5df2\u6709\u7684\u6587\u4ef6\u5185\u63d2\u5165\u5185\u5bb9 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('\\nLife is short, so to learn Python') f.close() # \u65b0\u5efa\u6587\u4ef6/\u5728\u5df2\u6709\u7684\u6587\u4ef6\u5185\u63d2\u5165\u5185\u5bb9 f = open('data/test2.txt', mode='a+', encoding='utf-8') f.write('\\nLife is short, so to learn Python') f.write('\\nLife is short, so to learn music') f.write('\\nLife is short, so to learn english') f.close()","title":"open(file, mode='r', encoding=None)"},{"location":"PythonBasic/built-function/#_4","text":"[x] sorted(lst\uff0c ascending) [x] range(start, end, step) [x] enumerate(lst) [x] eval(expression) [x] zip(lst1, lst2..) [x] map(func, lst) [x] print(x) [x] open(file, mode, encoding)","title":"\u91cd\u70b9\u51fd\u6570"},{"location":"PythonBasic/common-errors/","text":"1. \u5fd8\u8bb0\u5199\u5192\u53f7 \u5728 if\u3001elif\u3001else\u3001for\u3001while\u3001def\u8bed\u53e5\u540e\u9762\u5fd8\u8bb0\u6dfb\u52a0 : age = 42 if age == 42 print('Hello!') File \"<ipython-input-1-1f5acea116cf>\", line 3 if age == 42 ^ SyntaxError: invalid syntax age = 42 if age == 42: print('Hello!') Hello! 2. \u8bef\u7528 = = \u662f\u8d4b\u503c\u64cd\u4f5c\uff0c\u800c\u5224\u65ad\u4e24\u4e2a\u503c\u662f\u5426\u76f8\u7b49\u662f == gender = '\u7537' if gender = '\u7537': print('Man') File \"<ipython-input-3-c3ceea5a9004>\", line 3 if gender = '\u7537': ^ SyntaxError: invalid syntax gender = '\u7537' if gender == '\u7537': print('Man') Man 3. \u9519\u8bef\u7684\u7f29\u8fdb Python\u7528\u7f29\u8fdb\u533a\u5206\u4ee3\u7801\u5757\uff0c\u5e38\u89c1\u7684\u9519\u8bef\u7528\u6cd5\uff1a print('Hello!') print('Howdy!') File \"<ipython-input-5-784bdb6e1df5>\", line 2 print('Howdy!') ^ IndentationError: unexpected indent print('Hello!') print('Howdy!') Hello! Howdy! num = 25 if num == 25: print('Hello!') File \"<ipython-input-7-8e4debcdf119>\", line 3 print('Hello!') ^ IndentationError: expected an indented block num = 25 if num == 25: print('Hello!') Hello! 4. \u53d8\u91cf\u6ca1\u6709\u5b9a\u4e49 if c in ['New York', 'Bei Jing', 'Tokyo']: print('This is a mega city') --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-9-1ccdfa580533> in <module> ----> 1 if c in ['New York', 'Bei Jing', 'Tokyo']: 2 print('This is a mega city') NameError: name 'c' is not defined c = 'New York' if c in ['New York', 'Bei Jing', 'Tokyo']: print('This is a mega city') This is a mega city \u6ce8\u610f jupyter\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4ee3\u7801cell\u90fd\u8981\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\uff0c \u8fd9\u6837\u540e\u9762\u7684\u4ee3\u7801\u624d\u80fd\u6b63\u786e\u6267\u884c 5. \u4e2d\u82f1\u6587\u8f93\u5165\u6cd5\u5bfc\u81f4\u7684\u9519\u8bef \u82f1\u6587\u5192\u53f7 \u82f1\u6587\u62ec\u53f7 \u82f1\u6587\u9017\u53f7 \u82f1\u6587\u5355\u53cc\u5f15\u53f7 if 5>3\uff1a print('5\u6bd43\u5927') File \"<ipython-input-11-71a09a94621d>\", line 1 if 5>3\uff1a ^ SyntaxError: invalid character in identifier if 5>3: print('5\u6bd43\u5927') 5\u6bd43\u5927 spam = [1, 2\uff0c 3] File \"<ipython-input-13-a003060d051a>\", line 1 spam = [1, 2\uff0c 3] ^ SyntaxError: invalid character in identifier spam = [1, 2, 3] if 5>3: print('5\u6bd43\u5927\u2019) File \"<ipython-input-15-ac2e4eb87092>\", line 2 print('5\u6bd43\u5927\u2019) ^ SyntaxError: EOL while scanning string literal if 5>3: print('5\u6bd43\u5927') 5\u6bd43\u5927 6. \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u62fc\u63a5 \u540c\u79cd\u6570\u636e\u7c7b\u578b \u5b57\u7b26\u4e32/\u5217\u8868/\u5143\u7ec4 \u652f\u6301\u62fc\u63a5 \u5b57\u5178/\u96c6\u5408 \u4e0d\u652f\u6301\u62fc\u63a5 'I have ' + 12 + ' eggs.' --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-17-20c7c89a2ec6> in <module> ----> 1 'I have ' + 12 + ' eggs.' TypeError: can only concatenate str (not \"int\") to str ['a', 'b', 'c']+'def' --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-18-0e8919333d6b> in <module> ----> 1 ['a', 'b', 'c']+'def' TypeError: can only concatenate list (not \"str\") to list ('a', 'b', 'c')+['a', 'b', 'c'] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-19-90742621216d> in <module> ----> 1 ('a', 'b', 'c')+['a', 'b', 'c'] TypeError: can only concatenate tuple (not \"list\") to tuple ('a', 'b', 'c')+('a', 'b', 'c') ('a', 'b', 'c', 'a', 'b', 'c') set(['a', 'b', 'c'])+set(['d', 'e']) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-20-ddf5fb1e6c8c> in <module> ----> 1 set(['a', 'b', 'c'])+set(['d', 'e']) TypeError: unsupported operand type(s) for +: 'set' and 'set' 7. \u7d22\u5f15\u4f4d\u7f6e\u95ee\u9898 spam = ['cat', 'dog', 'mouse'] print(spam[3]) --------------------------------------------------------------------------- IndexError Traceback (most recent call last) <ipython-input-22-e3590e239af7> in <module> 1 spam = ['cat', 'dog', 'mouse'] ----> 2 print(spam[3]) IndexError: list index out of range spam = ['cat', 'dog', 'mouse'] print(spam[2]) mouse 8. \u4f7f\u7528\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u7684\u952e \u5728\u5b57\u5178\u5bf9\u8c61\u4e2d\u8bbf\u95ee key \u53ef\u4ee5\u4f7f\u7528 [] \uff0c \u4f46\u662f\u5982\u679c\u8be5 key \u4e0d\u5b58\u5728\uff0c\u5c31\u4f1a\u5bfc\u81f4\uff1aKeyError: 'zebra' spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam['zebra']) --------------------------------------------------------------------------- KeyError Traceback (most recent call last) <ipython-input-24-92c9b44ff034> in <module> 3 'mouse': 'Whiskers'} 4 ----> 5 print(spam['zebra']) KeyError: 'zebra' \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528 get \u65b9\u6cd5 spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam.get('zebra')) None key \u4e0d\u5b58\u5728\u65f6\uff0cget \u9ed8\u8ba4\u8fd4\u56de None 9. \u5fd8\u4e86\u62ec\u53f7 \u5f53\u51fd\u6570\u4e2d\u4f20\u5165\u7684\u662f\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u65f6\uff0c\u5bb9\u6613\u6f0f\u5199\u62ec\u53f7 spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam.get('zebra') #end of funtion File \"<ipython-input-26-d105cc86097c>\", line 5 print(spam.get('zebra') #end of funtion ^ SyntaxError: unexpected EOF while parsing spam.get('zebra') print(spam.get('zebra')) None 10. \u6f0f\u4f20\u53c2\u6570 def diyadd(x, y, z): return x+y+z diyadd(1, 2) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-32-7184f3f906ca> in <module> 2 return x+y+z 3 ----> 4 diyadd(1, 2) TypeError: diyadd() missing 1 required positional argument: 'z' diyadd(1, 2, 4) 7 11. \u7f3a\u5931\u4f9d\u8d56\u5e93 \u7535\u8111\u4e2d\u6ca1\u6709\u76f8\u5173\u7684\u5e93, xyxxxxx !pip3 install xyxxxxx import xyxxxxx --------------------------------------------------------------------------- ModuleNotFoundError Traceback (most recent call last) <ipython-input-34-296c560f8d43> in <module> ----> 1 import xyxxxxx ModuleNotFoundError: No module named 'xyxxxxx' 12. \u4f7f\u7528\u4e86python\u4e2d\u7684\u5173\u952e\u8bcd \u5982try\u3001except\u3001def\u3001class\u3001object\u3001None\u3001True\u3001False\u3001print\u3001list\u3001set\u7b49 try = 5 print(try) File \"<ipython-input-36-508e87fe2ff3>\", line 1 try = 5 ^ SyntaxError: invalid syntax a = 6 print(a) 6 13. \u6587\u4ef6\u7f16\u7801\u95ee\u9898 open()\u8bfb\u53d6\u6587\u4ef6\u7ecf\u5e38\u9047\u5230\u7f16\u7801\u95ee\u9898 import pandas as pd df = pd.read_csv('data/twitter_sentiment.csv') df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ItemID Sentiment SentimentText 0 1 0 is so sad for my APL frie... 1 2 0 I missed the New Moon trail... 2 3 1 omg its already 7:30 :O 3 4 0 .. Omgaga. Im sooo im gunna CRy. I'... 4 5 0 i think mi bf is cheating on me!!! ... #gbk/utf-8\u53ea\u80fd\u89e3\u51b3\u5927\u90e8\u5206\u7f16\u7801\u95ee\u9898\uff0c\u4f46\u4e0d\u80fd\u89e3\u51b3\u5168\u90e8\u95ee\u9898 df = pd.read_csv('data/twitter_sentiment.csv', encoding='gbk') df.head() --------------------------------------------------------------------------- UnicodeDecodeError Traceback (most recent call last) <ipython-input-39-a004d6d212ff> in <module> 1 #gbk/utf-8\u53ea\u80fd\u89e3\u51b3\u5927\u90e8\u5206\u7f16\u7801\u95ee\u9898\uff0c\u4f46\u4e0d\u80fd\u89e3\u51b3\u5168\u90e8\u95ee\u9898 ----> 2 df = pd.read_csv('data/twitter_sentiment.csv', encoding='gbk') 3 df.head() /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options) 608 kwds.update(kwds_defaults) 609 --> 610 return _read(filepath_or_buffer, kwds) 611 612 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in _read(filepath_or_buffer, kwds) 460 461 # Create the parser. --> 462 parser = TextFileReader(filepath_or_buffer, **kwds) 463 464 if chunksize or iterator: /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in __init__(self, f, engine, **kwds) 817 self.options[\"has_index_names\"] = kwds[\"has_index_names\"] 818 --> 819 self._engine = self._make_engine(self.engine) 820 821 def close(self): /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in _make_engine(self, engine) 1048 ) 1049 # error: Too many arguments for \"ParserBase\" -> 1050 return mapping[engine](self.f, **self.options) # type: ignore[call-arg] 1051 1052 def _failover_to_python(self): /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in __init__(self, src, **kwds) 1896 1897 try: -> 1898 self._reader = parsers.TextReader(self.handles.handle, **kwds) 1899 except Exception: 1900 self.handles.close() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._get_header() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows() pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error() UnicodeDecodeError: 'gbk' codec can't decode byte 0xbd in position 10717: illegal multibyte sequence \u4e0a\u9762\u7684\u7a0b\u5e8f\u4f1a\u63d0\u793a\u7f16\u7801\u9519\u8bef\uff0c \u5c1d\u8bd5encoding\u7f16\u7801\u53c2\u6570\u4f20\u5165utf-8\u3001gbk\uff0c\u4e5f\u6ca1\u6709\u89e3\u51b3\u95ee\u9898\u3002 \u90a3\u600e\u4e48\u627e\u5230\u6b63\u786e\u7684\u7f16\u7801\u53c2\u6570\u5462\uff1f import chardet #\u8bfb\u53d6\u4e3a\u4e8c\u8fdb\u5236\u6570\u636e binary_data = open('data/twitter_sentiment.csv', 'rb').read() #\u4f20\u7ed9chardet.detect\uff0c\u7a0d\u7b49\u7247\u523b chardet.detect(binary_data) {'encoding': 'Windows-1252', 'confidence': 0.7291192008535122, 'language': ''} import pandas as pd df = pd.read_csv('data/twitter_sentiment.csv', encoding='Windows-1252') df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ItemID Sentiment SentimentText 0 1 0 is so sad for my APL frie... 1 2 0 I missed the New Moon trail... 2 3 1 omg its already 7:30 :O 3 4 0 .. Omgaga. Im sooo im gunna CRy. I'... 4 5 0 i think mi bf is cheating on me!!! ... len(df) 99989 df.Sentiment.value_counts() 1 56457 0 43532 Name: Sentiment, dtype: int64 14. \u8def\u5f84\u5b57\u7b26\u4e32\u5199\u6cd5 Mac&Win \u63a8\u8350\u4f7f\u7528 / \u5199\u6cd5 \u5982\u679c\u4f7f\u7528 \\ \u5199\u6cd5\uff0c\u5b89\u5168\u8d77\u89c1\uff0c\u8bf7\u6362\u6210 \\\\ \uff08Mac\u4e0d\u652f\u6301 \\\\ \uff09 \\n \\t \\d \u5982\u679c\u6d89\u53ca\u8def\u5f84\u5b57\u7b26\u4e32split - Mac pathstr.split('/') - Win pathstr.split('\\\\') open('data/test.txt', encoding='utf-8').read() '\u7ae0\u8282\u8bbe\u8ba1\\n\\n\u7b2c\u4e00\u90e8\u5206 \u73af\u5883\u914d\u7f6e\\n\u7b2c\u4e8c\u90e8\u5206 \u5feb\u901f\u5165\u95e8python\\n\u7b2c\u4e09\u90e8\u5206 \u7f51\u7edc\u722c\u866b\\n\u7b2c\u56db\u90e8\u5206 \u7b80\u5355\u7684\u6587\u672c\u5206\u6790\\n\u7b2c\u4e94\u90e8\u5206 \u8fdb\u9636\u6587\u672c\u5206\u6790' open('data/test.txt', encoding='utf-8').read() '\u7ae0\u8282\u8bbe\u8ba1\\n\\n\u7b2c\u4e00\u90e8\u5206 \u73af\u5883\u914d\u7f6e\\n\u7b2c\u4e8c\u90e8\u5206 \u5feb\u901f\u5165\u95e8python\\n\u7b2c\u4e09\u90e8\u5206 \u7f51\u7edc\u722c\u866b\\n\u7b2c\u56db\u90e8\u5206 \u7b80\u5355\u7684\u6587\u672c\u5206\u6790\\n\u7b2c\u4e94\u90e8\u5206 \u8fdb\u9636\u6587\u672c\u5206\u6790'","title":"\u5e38\u89c1\u9519\u8bef"},{"location":"PythonBasic/common-errors/#1","text":"\u5728 if\u3001elif\u3001else\u3001for\u3001while\u3001def\u8bed\u53e5\u540e\u9762\u5fd8\u8bb0\u6dfb\u52a0 : age = 42 if age == 42 print('Hello!') File \"<ipython-input-1-1f5acea116cf>\", line 3 if age == 42 ^ SyntaxError: invalid syntax age = 42 if age == 42: print('Hello!') Hello!","title":"1. \u5fd8\u8bb0\u5199\u5192\u53f7"},{"location":"PythonBasic/common-errors/#2","text":"= \u662f\u8d4b\u503c\u64cd\u4f5c\uff0c\u800c\u5224\u65ad\u4e24\u4e2a\u503c\u662f\u5426\u76f8\u7b49\u662f == gender = '\u7537' if gender = '\u7537': print('Man') File \"<ipython-input-3-c3ceea5a9004>\", line 3 if gender = '\u7537': ^ SyntaxError: invalid syntax gender = '\u7537' if gender == '\u7537': print('Man') Man","title":"2. \u8bef\u7528 ="},{"location":"PythonBasic/common-errors/#3","text":"Python\u7528\u7f29\u8fdb\u533a\u5206\u4ee3\u7801\u5757\uff0c\u5e38\u89c1\u7684\u9519\u8bef\u7528\u6cd5\uff1a print('Hello!') print('Howdy!') File \"<ipython-input-5-784bdb6e1df5>\", line 2 print('Howdy!') ^ IndentationError: unexpected indent print('Hello!') print('Howdy!') Hello! Howdy! num = 25 if num == 25: print('Hello!') File \"<ipython-input-7-8e4debcdf119>\", line 3 print('Hello!') ^ IndentationError: expected an indented block num = 25 if num == 25: print('Hello!') Hello!","title":"3. \u9519\u8bef\u7684\u7f29\u8fdb"},{"location":"PythonBasic/common-errors/#4","text":"if c in ['New York', 'Bei Jing', 'Tokyo']: print('This is a mega city') --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-9-1ccdfa580533> in <module> ----> 1 if c in ['New York', 'Bei Jing', 'Tokyo']: 2 print('This is a mega city') NameError: name 'c' is not defined c = 'New York' if c in ['New York', 'Bei Jing', 'Tokyo']: print('This is a mega city') This is a mega city","title":"4. \u53d8\u91cf\u6ca1\u6709\u5b9a\u4e49"},{"location":"PythonBasic/common-errors/#_1","text":"jupyter\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4ee3\u7801cell\u90fd\u8981\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\uff0c \u8fd9\u6837\u540e\u9762\u7684\u4ee3\u7801\u624d\u80fd\u6b63\u786e\u6267\u884c","title":"\u6ce8\u610f"},{"location":"PythonBasic/common-errors/#5","text":"\u82f1\u6587\u5192\u53f7 \u82f1\u6587\u62ec\u53f7 \u82f1\u6587\u9017\u53f7 \u82f1\u6587\u5355\u53cc\u5f15\u53f7 if 5>3\uff1a print('5\u6bd43\u5927') File \"<ipython-input-11-71a09a94621d>\", line 1 if 5>3\uff1a ^ SyntaxError: invalid character in identifier if 5>3: print('5\u6bd43\u5927') 5\u6bd43\u5927 spam = [1, 2\uff0c 3] File \"<ipython-input-13-a003060d051a>\", line 1 spam = [1, 2\uff0c 3] ^ SyntaxError: invalid character in identifier spam = [1, 2, 3] if 5>3: print('5\u6bd43\u5927\u2019) File \"<ipython-input-15-ac2e4eb87092>\", line 2 print('5\u6bd43\u5927\u2019) ^ SyntaxError: EOL while scanning string literal if 5>3: print('5\u6bd43\u5927') 5\u6bd43\u5927","title":"5. \u4e2d\u82f1\u6587\u8f93\u5165\u6cd5\u5bfc\u81f4\u7684\u9519\u8bef"},{"location":"PythonBasic/common-errors/#6","text":"\u540c\u79cd\u6570\u636e\u7c7b\u578b \u5b57\u7b26\u4e32/\u5217\u8868/\u5143\u7ec4 \u652f\u6301\u62fc\u63a5 \u5b57\u5178/\u96c6\u5408 \u4e0d\u652f\u6301\u62fc\u63a5 'I have ' + 12 + ' eggs.' --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-17-20c7c89a2ec6> in <module> ----> 1 'I have ' + 12 + ' eggs.' TypeError: can only concatenate str (not \"int\") to str ['a', 'b', 'c']+'def' --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-18-0e8919333d6b> in <module> ----> 1 ['a', 'b', 'c']+'def' TypeError: can only concatenate list (not \"str\") to list ('a', 'b', 'c')+['a', 'b', 'c'] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-19-90742621216d> in <module> ----> 1 ('a', 'b', 'c')+['a', 'b', 'c'] TypeError: can only concatenate tuple (not \"list\") to tuple ('a', 'b', 'c')+('a', 'b', 'c') ('a', 'b', 'c', 'a', 'b', 'c') set(['a', 'b', 'c'])+set(['d', 'e']) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-20-ddf5fb1e6c8c> in <module> ----> 1 set(['a', 'b', 'c'])+set(['d', 'e']) TypeError: unsupported operand type(s) for +: 'set' and 'set'","title":"6. \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u62fc\u63a5"},{"location":"PythonBasic/common-errors/#7","text":"spam = ['cat', 'dog', 'mouse'] print(spam[3]) --------------------------------------------------------------------------- IndexError Traceback (most recent call last) <ipython-input-22-e3590e239af7> in <module> 1 spam = ['cat', 'dog', 'mouse'] ----> 2 print(spam[3]) IndexError: list index out of range spam = ['cat', 'dog', 'mouse'] print(spam[2]) mouse","title":"7. \u7d22\u5f15\u4f4d\u7f6e\u95ee\u9898"},{"location":"PythonBasic/common-errors/#8","text":"\u5728\u5b57\u5178\u5bf9\u8c61\u4e2d\u8bbf\u95ee key \u53ef\u4ee5\u4f7f\u7528 [] \uff0c \u4f46\u662f\u5982\u679c\u8be5 key \u4e0d\u5b58\u5728\uff0c\u5c31\u4f1a\u5bfc\u81f4\uff1aKeyError: 'zebra' spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam['zebra']) --------------------------------------------------------------------------- KeyError Traceback (most recent call last) <ipython-input-24-92c9b44ff034> in <module> 3 'mouse': 'Whiskers'} 4 ----> 5 print(spam['zebra']) KeyError: 'zebra' \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528 get \u65b9\u6cd5 spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam.get('zebra')) None key \u4e0d\u5b58\u5728\u65f6\uff0cget \u9ed8\u8ba4\u8fd4\u56de None","title":"8. \u4f7f\u7528\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u7684\u952e"},{"location":"PythonBasic/common-errors/#9","text":"\u5f53\u51fd\u6570\u4e2d\u4f20\u5165\u7684\u662f\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u65f6\uff0c\u5bb9\u6613\u6f0f\u5199\u62ec\u53f7 spam = {'cat': 'Zophie', 'dog': 'Basil', 'mouse': 'Whiskers'} print(spam.get('zebra') #end of funtion File \"<ipython-input-26-d105cc86097c>\", line 5 print(spam.get('zebra') #end of funtion ^ SyntaxError: unexpected EOF while parsing spam.get('zebra') print(spam.get('zebra')) None","title":"9. \u5fd8\u4e86\u62ec\u53f7"},{"location":"PythonBasic/common-errors/#10","text":"def diyadd(x, y, z): return x+y+z diyadd(1, 2) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-32-7184f3f906ca> in <module> 2 return x+y+z 3 ----> 4 diyadd(1, 2) TypeError: diyadd() missing 1 required positional argument: 'z' diyadd(1, 2, 4) 7","title":"10. \u6f0f\u4f20\u53c2\u6570"},{"location":"PythonBasic/common-errors/#11","text":"\u7535\u8111\u4e2d\u6ca1\u6709\u76f8\u5173\u7684\u5e93, xyxxxxx !pip3 install xyxxxxx import xyxxxxx --------------------------------------------------------------------------- ModuleNotFoundError Traceback (most recent call last) <ipython-input-34-296c560f8d43> in <module> ----> 1 import xyxxxxx ModuleNotFoundError: No module named 'xyxxxxx'","title":"11. \u7f3a\u5931\u4f9d\u8d56\u5e93"},{"location":"PythonBasic/common-errors/#12-python","text":"\u5982try\u3001except\u3001def\u3001class\u3001object\u3001None\u3001True\u3001False\u3001print\u3001list\u3001set\u7b49 try = 5 print(try) File \"<ipython-input-36-508e87fe2ff3>\", line 1 try = 5 ^ SyntaxError: invalid syntax a = 6 print(a) 6","title":"12. \u4f7f\u7528\u4e86python\u4e2d\u7684\u5173\u952e\u8bcd"},{"location":"PythonBasic/common-errors/#13","text":"open()\u8bfb\u53d6\u6587\u4ef6\u7ecf\u5e38\u9047\u5230\u7f16\u7801\u95ee\u9898 import pandas as pd df = pd.read_csv('data/twitter_sentiment.csv') df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ItemID Sentiment SentimentText 0 1 0 is so sad for my APL frie... 1 2 0 I missed the New Moon trail... 2 3 1 omg its already 7:30 :O 3 4 0 .. Omgaga. Im sooo im gunna CRy. I'... 4 5 0 i think mi bf is cheating on me!!! ... #gbk/utf-8\u53ea\u80fd\u89e3\u51b3\u5927\u90e8\u5206\u7f16\u7801\u95ee\u9898\uff0c\u4f46\u4e0d\u80fd\u89e3\u51b3\u5168\u90e8\u95ee\u9898 df = pd.read_csv('data/twitter_sentiment.csv', encoding='gbk') df.head() --------------------------------------------------------------------------- UnicodeDecodeError Traceback (most recent call last) <ipython-input-39-a004d6d212ff> in <module> 1 #gbk/utf-8\u53ea\u80fd\u89e3\u51b3\u5927\u90e8\u5206\u7f16\u7801\u95ee\u9898\uff0c\u4f46\u4e0d\u80fd\u89e3\u51b3\u5168\u90e8\u95ee\u9898 ----> 2 df = pd.read_csv('data/twitter_sentiment.csv', encoding='gbk') 3 df.head() /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options) 608 kwds.update(kwds_defaults) 609 --> 610 return _read(filepath_or_buffer, kwds) 611 612 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in _read(filepath_or_buffer, kwds) 460 461 # Create the parser. --> 462 parser = TextFileReader(filepath_or_buffer, **kwds) 463 464 if chunksize or iterator: /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in __init__(self, f, engine, **kwds) 817 self.options[\"has_index_names\"] = kwds[\"has_index_names\"] 818 --> 819 self._engine = self._make_engine(self.engine) 820 821 def close(self): /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in _make_engine(self, engine) 1048 ) 1049 # error: Too many arguments for \"ParserBase\" -> 1050 return mapping[engine](self.f, **self.options) # type: ignore[call-arg] 1051 1052 def _failover_to_python(self): /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py in __init__(self, src, **kwds) 1896 1897 try: -> 1898 self._reader = parsers.TextReader(self.handles.handle, **kwds) 1899 except Exception: 1900 self.handles.close() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._get_header() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows() pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error() UnicodeDecodeError: 'gbk' codec can't decode byte 0xbd in position 10717: illegal multibyte sequence \u4e0a\u9762\u7684\u7a0b\u5e8f\u4f1a\u63d0\u793a\u7f16\u7801\u9519\u8bef\uff0c \u5c1d\u8bd5encoding\u7f16\u7801\u53c2\u6570\u4f20\u5165utf-8\u3001gbk\uff0c\u4e5f\u6ca1\u6709\u89e3\u51b3\u95ee\u9898\u3002","title":"13. \u6587\u4ef6\u7f16\u7801\u95ee\u9898"},{"location":"PythonBasic/common-errors/#_2","text":"import chardet #\u8bfb\u53d6\u4e3a\u4e8c\u8fdb\u5236\u6570\u636e binary_data = open('data/twitter_sentiment.csv', 'rb').read() #\u4f20\u7ed9chardet.detect\uff0c\u7a0d\u7b49\u7247\u523b chardet.detect(binary_data) {'encoding': 'Windows-1252', 'confidence': 0.7291192008535122, 'language': ''} import pandas as pd df = pd.read_csv('data/twitter_sentiment.csv', encoding='Windows-1252') df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ItemID Sentiment SentimentText 0 1 0 is so sad for my APL frie... 1 2 0 I missed the New Moon trail... 2 3 1 omg its already 7:30 :O 3 4 0 .. Omgaga. Im sooo im gunna CRy. I'... 4 5 0 i think mi bf is cheating on me!!! ... len(df) 99989 df.Sentiment.value_counts() 1 56457 0 43532 Name: Sentiment, dtype: int64","title":"\u90a3\u600e\u4e48\u627e\u5230\u6b63\u786e\u7684\u7f16\u7801\u53c2\u6570\u5462\uff1f"},{"location":"PythonBasic/common-errors/#14","text":"Mac&Win \u63a8\u8350\u4f7f\u7528 / \u5199\u6cd5 \u5982\u679c\u4f7f\u7528 \\ \u5199\u6cd5\uff0c\u5b89\u5168\u8d77\u89c1\uff0c\u8bf7\u6362\u6210 \\\\ \uff08Mac\u4e0d\u652f\u6301 \\\\ \uff09 \\n \\t \\d \u5982\u679c\u6d89\u53ca\u8def\u5f84\u5b57\u7b26\u4e32split - Mac pathstr.split('/') - Win pathstr.split('\\\\') open('data/test.txt', encoding='utf-8').read() '\u7ae0\u8282\u8bbe\u8ba1\\n\\n\u7b2c\u4e00\u90e8\u5206 \u73af\u5883\u914d\u7f6e\\n\u7b2c\u4e8c\u90e8\u5206 \u5feb\u901f\u5165\u95e8python\\n\u7b2c\u4e09\u90e8\u5206 \u7f51\u7edc\u722c\u866b\\n\u7b2c\u56db\u90e8\u5206 \u7b80\u5355\u7684\u6587\u672c\u5206\u6790\\n\u7b2c\u4e94\u90e8\u5206 \u8fdb\u9636\u6587\u672c\u5206\u6790' open('data/test.txt', encoding='utf-8').read() '\u7ae0\u8282\u8bbe\u8ba1\\n\\n\u7b2c\u4e00\u90e8\u5206 \u73af\u5883\u914d\u7f6e\\n\u7b2c\u4e8c\u90e8\u5206 \u5feb\u901f\u5165\u95e8python\\n\u7b2c\u4e09\u90e8\u5206 \u7f51\u7edc\u722c\u866b\\n\u7b2c\u56db\u90e8\u5206 \u7b80\u5355\u7684\u6587\u672c\u5206\u6790\\n\u7b2c\u4e94\u90e8\u5206 \u8fdb\u9636\u6587\u672c\u5206\u6790'","title":"14. \u8def\u5f84\u5b57\u7b26\u4e32\u5199\u6cd5"},{"location":"PythonBasic/csv/","text":"\u5728\u7f16\u7a0b\u4e2d\u4e00\u822c\u4e0d\u9002\u7528excel\uff0c\u800c\u662f\u7528\u4e00\u79cd\u5f88\u50cfexcel\u7684csv\u6765\u5b58\u50a8\u6570\u636e\u3002\u800c\u4e14Excel\u8f6f\u4ef6\u53ef\u4ee5\u6253\u5f00csv\u7684\u3002 \u4e00\u3001csv\u5b58\u50a8\u6570\u636e\u4ee3\u7801\u6b65\u9aa4 \u8bf4\u660e: \u4ee3\u7801\u770b\u4e0d\u61c2\u6ca1\u5173\u7cfb\uff0c\u80fd\u80cc\u8fc7\u6700\u597d\u3002\u80cc\u4e0d\u8fc7\u4e5f\u6ca1\u5173\u7cfb\uff0c\u80fd\u7406\u89e3\u4ee3\u7801\u529f\u80fd\uff0c\u800c\u4e14\u4eb2\u81ea\u4e0a\u624b\u8c03\u8bd5\u8fc7\uff0c\u8c03\u8bd5\u6b63\u5e38\u65e0\u8bef\u7684\u4ee3\u7801\u53ef\u4ee5\u52a0\u5165\u4f60\u7684\u4ee3\u7801\u7b14\u8bb0\u672c\u4e2d\uff0c\u7136\u540e\u4ee5\u540e\u9700\u8981\u7684\u65f6\u5019\u590d\u5236\u7c98\u8d34\u4fee\u6539\u53c2\u6570\u5373\u53ef 1. 1 \u65b0\u5efa\u4e00\u4e2acsv\u6587\u4ef6 import csv path = 'data/test.csv' csvf = open(path, 'a+', encoding='utf-8', newline='') 1.2 \u5b9a\u4e49\u5b57\u6bb5\u540d\uff0c\u5e76\u521d\u59cb\u5316csv\u6587\u4ef6\u4e3awriter fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() 1.3 \u5c06\u5f85\u5b58\u50a8\u6570\u636e\u6574\u7406\u4e3a\u5b57\u5178\u683c\u5f0f test_data = {'name': 'David', 'age': 25} 1.4 \u7528writer\u5f80csv\u4e2d\u5b58\u50a8\u6570\u636e writer.writerow(test_data) 1.5 \u6700\u540e\u8bb0\u5f97\u5173\u95edcsv\u6587\u4ef6 csvf.close() import csv csvf = open('data/test1.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() csvf.close() import csv csvf = open('data/test2.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() test_data = {'name': 'David', 'age': 25} writer.writerow(test_data) csvf.close() \u4e8c\u3001\u5f88\u591a\u6570\u636e\u7684\u5b58\u50a8 \u5982\u679c\u5f88\u591a\u6570\u636e\u5b58\u50a8\u65f6\uff0c\u5c31\u53ef\u4ee5\u7528\u4e4b\u524d\u5b66\u5230\u7684for\u5faa\u73af\u3002 datas = [{'name': 'David', 'age': 25}, {'name': 'Mary', 'age': 30}, {'name': 'Henry', 'age': 35}] datas [{'name': 'David', 'age': 25}, {'name': 'Mary', 'age': 30}, {'name': 'Henry', 'age': 35}] import csv csvf = open('data/test2.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() for data in datas: writer.writerow(data) csvf.close()","title":"\u5b58\u50a8\u6570\u636ecsv\u5e93"},{"location":"PythonBasic/csv/#csv","text":"\u8bf4\u660e: \u4ee3\u7801\u770b\u4e0d\u61c2\u6ca1\u5173\u7cfb\uff0c\u80fd\u80cc\u8fc7\u6700\u597d\u3002\u80cc\u4e0d\u8fc7\u4e5f\u6ca1\u5173\u7cfb\uff0c\u80fd\u7406\u89e3\u4ee3\u7801\u529f\u80fd\uff0c\u800c\u4e14\u4eb2\u81ea\u4e0a\u624b\u8c03\u8bd5\u8fc7\uff0c\u8c03\u8bd5\u6b63\u5e38\u65e0\u8bef\u7684\u4ee3\u7801\u53ef\u4ee5\u52a0\u5165\u4f60\u7684\u4ee3\u7801\u7b14\u8bb0\u672c\u4e2d\uff0c\u7136\u540e\u4ee5\u540e\u9700\u8981\u7684\u65f6\u5019\u590d\u5236\u7c98\u8d34\u4fee\u6539\u53c2\u6570\u5373\u53ef","title":"\u4e00\u3001csv\u5b58\u50a8\u6570\u636e\u4ee3\u7801\u6b65\u9aa4"},{"location":"PythonBasic/csv/#1-1-csv","text":"import csv path = 'data/test.csv' csvf = open(path, 'a+', encoding='utf-8', newline='')","title":"1. 1 \u65b0\u5efa\u4e00\u4e2acsv\u6587\u4ef6"},{"location":"PythonBasic/csv/#12-csvwriter","text":"fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader()","title":"1.2 \u5b9a\u4e49\u5b57\u6bb5\u540d\uff0c\u5e76\u521d\u59cb\u5316csv\u6587\u4ef6\u4e3awriter"},{"location":"PythonBasic/csv/#13","text":"test_data = {'name': 'David', 'age': 25}","title":"1.3 \u5c06\u5f85\u5b58\u50a8\u6570\u636e\u6574\u7406\u4e3a\u5b57\u5178\u683c\u5f0f"},{"location":"PythonBasic/csv/#14-writercsv","text":"writer.writerow(test_data)","title":"1.4 \u7528writer\u5f80csv\u4e2d\u5b58\u50a8\u6570\u636e"},{"location":"PythonBasic/csv/#15-csv","text":"csvf.close() import csv csvf = open('data/test1.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() csvf.close() import csv csvf = open('data/test2.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() test_data = {'name': 'David', 'age': 25} writer.writerow(test_data) csvf.close()","title":"1.5 \u6700\u540e\u8bb0\u5f97\u5173\u95edcsv\u6587\u4ef6"},{"location":"PythonBasic/csv/#_1","text":"\u5982\u679c\u5f88\u591a\u6570\u636e\u5b58\u50a8\u65f6\uff0c\u5c31\u53ef\u4ee5\u7528\u4e4b\u524d\u5b66\u5230\u7684for\u5faa\u73af\u3002 datas = [{'name': 'David', 'age': 25}, {'name': 'Mary', 'age': 30}, {'name': 'Henry', 'age': 35}] datas [{'name': 'David', 'age': 25}, {'name': 'Mary', 'age': 30}, {'name': 'Henry', 'age': 35}] import csv csvf = open('data/test2.csv', 'a+', encoding='utf-8', newline='') fieldnames = ['name', 'age'] writer = csv.DictWriter(csvf, fieldnames=fieldnames) writer.writeheader() for data in datas: writer.writerow(data) csvf.close()","title":"\u4e8c\u3001\u5f88\u591a\u6570\u636e\u7684\u5b58\u50a8"},{"location":"PythonBasic/dict/","text":"\u6700\u6709\u5c42\u6b21\u611f\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7279\u522b\u5e72\u51c0\u6574\u6d01\u3002\u5728\u5199\u722c\u866b\u65f6\uff0c\u6211\u4eec\u6700\u5e0c\u671b\u9047\u5230\u7684\u6570\u636e\u7c7b\u578b\u5c31\u662fta \u4e0b\u56fe\u5c31\u662f\u6700\u7b80\u5355\u7684\u5b57\u5178\u7684\u6837\u5f0f\uff0c \u952e\u503c\u5bf9 key-value-pairs \u5b57\u5178 \u5b57\u5178\u662f\u6709key\uff0c\u6709value\u7684 key-value-pair\u7c7b\u578b\u6570\u636e\uff08\u952e-\u503c\u5bf9\uff09 id \u59d3\u540d \u5e74\u9f84 \u6027\u522b \u7231\u597d 1 David 25 Male Basketball, Pingpang, Hiking 2 Mary 23 Female Reading, Movies 3 Henry 23 Male Diving, Hiking \u5c06\u4e0a\u9762\u7684\u5458\u5de5\u4fe1\u606f\u4ee5\u5173\u952e\u8bcd name\u3001age\u3001hobbies \u7ec4\u7ec7\u6210\u5b57\u5178\u6570\u636e \u7a7a\u5b57\u5178 david = dict() print(david) {} \u586b\u5145 david['age'] = 23 print(david) {'age': 23} david['hobbies'] = ['Basketball', 'Pingpang', 'Hiking'] print(david) {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking']} david['gender'] = 'Male' print(david) {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'} \u66f4\u65b0 david['age'] = 25 print(david) {'age': 25, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'} \u5b8c\u6574\u7684\u4fe1\u606f infos = {'David':{'age':25, 'gender':'Male', 'hobbies':['Basketball', 'Pingpang', 'Hiking']}, 'Mary':{'age':23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, 'Henry':{'age':23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']} } print(infos) {'David': {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, 'Mary': {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, 'Henry': {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}} \u5b57\u5178\u7684\u65b9\u6cd5 \u65b9\u6cd5 \u6548\u679c dictdata.items() \u8fd4\u56dedictdata\u6240\u6709item dictdata.keys() \u8fd4\u56dedictdata\u7684\u6240\u6709\u5173\u952e\u8bcd dictdata.values() \u8fd4\u56dedictdata\u7684\u6240\u6709\u503c dictdata.get(keystr) \u83b7\u53d6\u5173\u952e\u8bcdkeystr\u5bf9\u5e94\u7684\u503c dictdata[keystr] \u83b7\u53d6\u5173\u952e\u8bcdkeystr\u5bf9\u5e94\u7684\u503c infos.items() dict_items([('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}), ('Mary', {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}), ('Henry', {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']})]) #\u628ainfos.items()\u8f6c\u5316\u4e3a\u5217\u8868 list(infos.items())[0] ('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}) infos.keys() dict_keys(['David', 'Mary', 'Henry']) infos.values() dict_values([{'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}]) print(infos['David']) print(infos.get('David')) {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']} {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']} \u6ce8\u610f\uff1a \u4e24\u79cd\u529f\u80fd\u7b49\u540c\uff0c\u4f46\u662fget\u83b7\u53d6\u65b9\u6cd5\u66f4\u52a0\u5b89\u5168\u7a33\u5b9a\u3002 \u4f8b\u5982 print(infos['Will']) --------------------------------------------------------------------------- KeyError Traceback (most recent call last) <ipython-input-16-f7c283c8ad8e> in <module> ----> 1 print(infos['Will']) KeyError: 'Will' print(infos.get('Will')) None","title":"\u5b57\u5178"},{"location":"PythonBasic/dict/#_1","text":"\u5b57\u5178\u662f\u6709key\uff0c\u6709value\u7684 key-value-pair\u7c7b\u578b\u6570\u636e\uff08\u952e-\u503c\u5bf9\uff09 id \u59d3\u540d \u5e74\u9f84 \u6027\u522b \u7231\u597d 1 David 25 Male Basketball, Pingpang, Hiking 2 Mary 23 Female Reading, Movies 3 Henry 23 Male Diving, Hiking \u5c06\u4e0a\u9762\u7684\u5458\u5de5\u4fe1\u606f\u4ee5\u5173\u952e\u8bcd name\u3001age\u3001hobbies \u7ec4\u7ec7\u6210\u5b57\u5178\u6570\u636e","title":"\u5b57\u5178"},{"location":"PythonBasic/dict/#_2","text":"david = dict() print(david) {}","title":"\u7a7a\u5b57\u5178"},{"location":"PythonBasic/dict/#_3","text":"david['age'] = 23 print(david) {'age': 23} david['hobbies'] = ['Basketball', 'Pingpang', 'Hiking'] print(david) {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking']} david['gender'] = 'Male' print(david) {'age': 23, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}","title":"\u586b\u5145"},{"location":"PythonBasic/dict/#_4","text":"david['age'] = 25 print(david) {'age': 25, 'hobbies': ['Basketball', 'Pingpang', 'Hiking'], 'gender': 'Male'}","title":"\u66f4\u65b0"},{"location":"PythonBasic/dict/#_5","text":"infos = {'David':{'age':25, 'gender':'Male', 'hobbies':['Basketball', 'Pingpang', 'Hiking']}, 'Mary':{'age':23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, 'Henry':{'age':23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']} } print(infos) {'David': {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, 'Mary': {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, 'Henry': {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}}","title":"\u5b8c\u6574\u7684\u4fe1\u606f"},{"location":"PythonBasic/dict/#_6","text":"\u65b9\u6cd5 \u6548\u679c dictdata.items() \u8fd4\u56dedictdata\u6240\u6709item dictdata.keys() \u8fd4\u56dedictdata\u7684\u6240\u6709\u5173\u952e\u8bcd dictdata.values() \u8fd4\u56dedictdata\u7684\u6240\u6709\u503c dictdata.get(keystr) \u83b7\u53d6\u5173\u952e\u8bcdkeystr\u5bf9\u5e94\u7684\u503c dictdata[keystr] \u83b7\u53d6\u5173\u952e\u8bcdkeystr\u5bf9\u5e94\u7684\u503c infos.items() dict_items([('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}), ('Mary', {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}), ('Henry', {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']})]) #\u628ainfos.items()\u8f6c\u5316\u4e3a\u5217\u8868 list(infos.items())[0] ('David', {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}) infos.keys() dict_keys(['David', 'Mary', 'Henry']) infos.values() dict_values([{'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']}, {'age': 23, 'gender': 'Female', 'hobbies': ['Reading', 'Movies']}, {'age': 23, 'gender': 'Male', 'hobbies': ['Diving', 'Hiking']}]) print(infos['David']) print(infos.get('David')) {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']} {'age': 25, 'gender': 'Male', 'hobbies': ['Basketball', 'Pingpang', 'Hiking']} \u6ce8\u610f\uff1a \u4e24\u79cd\u529f\u80fd\u7b49\u540c\uff0c\u4f46\u662fget\u83b7\u53d6\u65b9\u6cd5\u66f4\u52a0\u5b89\u5168\u7a33\u5b9a\u3002 \u4f8b\u5982 print(infos['Will']) --------------------------------------------------------------------------- KeyError Traceback (most recent call last) <ipython-input-16-f7c283c8ad8e> in <module> ----> 1 print(infos['Will']) KeyError: 'Will' print(infos.get('Will')) None","title":"\u5b57\u5178\u7684\u65b9\u6cd5"},{"location":"PythonBasic/function/","text":"\u6d41\u6c34\u7ebf\u6bcf\u4e2a\u73af\u8282\u90fd\u6709\u8d28\u91cf\u8981\u6c42\uff0c\u53ea\u6709\u7b26\u5408\u8d28\u91cf\u89c4\u8303\uff0c\u624d\u80fd\u6d41\u901a\u5230\u4e0b\u4e00\u4e2a\u73af\u8282\u3002\u8fd9\u6837\u73af\u73af\u76f8\u6263\uff0c\u8bbe\u8ba1\u597d\u540e\u7ecf\u8fc7\u8bd5\u8fd0\u8425\u5c31\u53ef\u4ee5\u6295\u4ea7\u4e86\u3002Python\u7f16\u7a0b\u4e5f\u4e00\u6837\uff0c\u7f16\u7a0b\u5e8f\u5176\u5b9e\u4e5f\u662f\u8bbe\u8ba1\u6d41\u6c34\u7ebf\uff0c\u800c\u51fd\u6570\u5c31\u662f\u6d41\u6c34\u7ebf\u4e0a\u7684\u4e00\u4e2a\u4e2a\u7684\u73af\u8282\u3002 \u51fd\u6570 \u53ef\u91cd\u590d\u4f7f\u7528\u7684\u4ee3\u7801\u5757 def\u51fd\u6570\u5e38\u89c1\u53c2\u6570\u5b9a\u4e49&\u8c03\u7528\u65b9\u5f0f \u4f4d\u7f6e\u53c2\u6570 \u5173\u952e\u8bcd\u53c2\u6570 \u9ed8\u8ba4\u53c2\u6570 \u4f4d\u7f6e\u53c2\u6570 def hello1(name, age): return '\u6211\u662f{0},\u4eca\u5e74{1}'.format(name, age) hello1('\u5f20\u4e09', 25) '\u6211\u662f\u5f20\u4e09,\u4eca\u5e7425' hello1(25,'\u5f20\u4e09') '\u6211\u662f25,\u4eca\u5e74\u5f20\u4e09' \u5173\u952e\u8bcd\u53c2\u6570 def hello2(name, age): return '\u6211\u662f{0},\u4eca\u5e74{1}'.format(name, age) hello2(name='\u5f20\u4e09', age=25) '\u6211\u662f\u5f20\u4e09,\u4eca\u5e7425' hello2(age=25, name='\u5f20\u4e09') '\u6211\u662f\u5f20\u4e09,\u4eca\u5e7425' \u9ed8\u8ba4\u53c2\u6570 def hello3(name, age, gender='\u7537'): return '\u6211\u662f{0},\u4eca\u5e74{1}, \u6027\u522b{2}'.format(name, age, gender) hello3('David', 25) '\u6211\u662fDavid,\u4eca\u5e7425, \u6027\u522b\u7537' hello3('David', 25, gender='male') '\u6211\u662fDavid,\u4eca\u5e7425, \u6027\u522bmale'","title":"\u51fd\u6570\u7684\u5b9a\u4e49"},{"location":"PythonBasic/function/#_1","text":"\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u4ee3\u7801\u5757 def\u51fd\u6570\u5e38\u89c1\u53c2\u6570\u5b9a\u4e49&\u8c03\u7528\u65b9\u5f0f \u4f4d\u7f6e\u53c2\u6570 \u5173\u952e\u8bcd\u53c2\u6570 \u9ed8\u8ba4\u53c2\u6570","title":"\u51fd\u6570"},{"location":"PythonBasic/function/#_2","text":"def hello1(name, age): return '\u6211\u662f{0},\u4eca\u5e74{1}'.format(name, age) hello1('\u5f20\u4e09', 25) '\u6211\u662f\u5f20\u4e09,\u4eca\u5e7425' hello1(25,'\u5f20\u4e09') '\u6211\u662f25,\u4eca\u5e74\u5f20\u4e09'","title":"\u4f4d\u7f6e\u53c2\u6570"},{"location":"PythonBasic/function/#_3","text":"def hello2(name, age): return '\u6211\u662f{0},\u4eca\u5e74{1}'.format(name, age) hello2(name='\u5f20\u4e09', age=25) '\u6211\u662f\u5f20\u4e09,\u4eca\u5e7425' hello2(age=25, name='\u5f20\u4e09') '\u6211\u662f\u5f20\u4e09,\u4eca\u5e7425'","title":"\u5173\u952e\u8bcd\u53c2\u6570"},{"location":"PythonBasic/function/#_4","text":"def hello3(name, age, gender='\u7537'): return '\u6211\u662f{0},\u4eca\u5e74{1}, \u6027\u522b{2}'.format(name, age, gender) hello3('David', 25) '\u6211\u662fDavid,\u4eca\u5e7425, \u6027\u522b\u7537' hello3('David', 25, gender='male') '\u6211\u662fDavid,\u4eca\u5e7425, \u6027\u522bmale'","title":"\u9ed8\u8ba4\u53c2\u6570"},{"location":"PythonBasic/ifelsetryexcept/","text":"if\u6761\u4ef6\u5224\u65ad condition\u4e3a\u5e03\u5c14\u503c\u3001\u5e03\u5c14\u8fd0\u7b97\u3001\u6210\u5458\u8fd0\u7b97\u7b26 \u901a\u5e38\u6211\u4eec\u7406\u89e3\u7684condition\u4e3a\u5e03\u5c14\u503c #Tab condition = True if condition: print('condition\u4e3aTrue') else: print('condition\u4e3aFalse') condition\u4e3aTrue age = 17 if age>=18: print('\u4f60\u662f\u6210\u5e74\u4eba\u4e86') else: print('\u4f60\u8fd8\u662f\u4e2a\u5b69\u5b50') \u4f60\u8fd8\u662f\u4e2a\u5b69\u5b50 age = 20 if age>=55: print('\u8001\u5e74\u4eba') elif 35<=age<55: print('\u4e2d\u5e74') elif 18<=age<35: print('\u9752\u5e74') elif 0<=age<18: print('\u513f\u7ae5') \u9752\u5e74 \u7279\u6b8a\u7684conditon \u5404\u79cd\u7a7a\u503c(\u7a7a\u5b57\u7b26\u4e32\u3001\u7a7a\u5217\u8868\u7b49)\u4f5c\u7528\u7b49\u540c\u4e8eFalse \u5404\u79cd\u975e\u7a7a\u503c\uff0c\u4f5c\u7528\u7b49\u540c\u4e8eTrue a = None if a: print('a\u662f\u975e\u7a7a\u6570\u636e') else: print('a\u662f\u7a7a\u6570\u636e') a\u662f\u7a7a\u6570\u636e for\u5faa\u73af \u91cd\u590d\u505a\u67d0\u4ef6\u4e8b \u8fed\u4ee3\u51fa\u6570\u636e\u4e2d\u7684\u5185\u5bb9(\u5143\u7d20) \u4e0a\u9762\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u89e3\u8bfb\u4e3a \u6211\u4eec\u60f3\u5bf9iterable\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2aitem: \u505a\u70b9\u4e8b(\u5bf9item\u505a\u64cd\u4f5c) \u91cd\u590d\u505a\u67d0\u4e8b \u95ee\u98981 \u8ba1\u7b971+2+3+...+97+98+99+100=? 1 + 2 = 3 3 + 3 = 6 6 + 4 = 10 10 + 5 = 15 result = 0 #int for i in range(1, 101): result = result + i print(result) 5050 \u8fed\u4ee3\u51fa\u6570\u636e\u4e2d\u7684\u5185\u5bb9 \u4ece\u67d0\u79cd\u201c\u96c6\u5408\u201d\uff08\u8fd9\u4e2a\u201c\u96c6\u5408\u201d\u53ef\u4ee5\u4f7flist\u3001set\u3001tuple\u7b49\uff09\uff0c\u53ea\u8981\u201c\u96c6\u5408\u201d\u5185\u90e8\u6709\u591a\u4e2a\u6210\u5458\u5c31\u53ef\u4ee5\u4f7f\u7528for\u5faa\u73af\u8fed\u4ee3\u51fa\u5185\u90e8\u7684\u6210\u5458 names = ['David', 'Henry', 'Mary'] for name in names: print(name) David Henry Mary name = 'David' for s in name: print(s) D a v i d infos = {'David':{'age':25, 'gender':'Male'}, 'Mary':{'age':23, 'gender': 'Female'}, 'Henry':{'age':23, 'gender': 'Male'} } for item in infos.items(): print(item) ('David', {'age': 25, 'gender': 'Male'}) ('Mary', {'age': 23, 'gender': 'Female'}) ('Henry', {'age': 23, 'gender': 'Male'}) for name, info in infos.items(): print(name, info) David Mary Henry try-except \u9047\u5230\u65e0\u5173\u7d27\u8981\u7684bug\uff0c\u4e0d\u4f1a\u505c\u4e0b\u6765\uff0c\u8ba9\u7a0b\u5e8f\u6709\u4e00\u5b9a\u7684\u5bb9\u9519\u80fd\u529b\u3002\u901a\u4fd7\u70b9\u5c31\u662f\u6b64\u5904\u4e0d\u7559\u7237\uff0c\u81ea\u6709\u7559\u7237\u5904\uff0c\u51e1\u4e8b\u522b\u94bb\u725b\u89d2\u5c16\u3002 for x in [1,2,0,2,1]: print(10/x) 10.0 5.0 --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) <ipython-input-19-83bea9c92c0e> in <module> 1 for x in [1,2,0,2,1]: ----> 2 print(10/x) ZeroDivisionError: division by zero for x in [1,2,0,2,1]: try: print(10/x) except: print('0\u9664\u9519\u8bef') #pass 10.0 5.0 0\u9664\u9519\u8bef 5.0 10.0 \u7ec3\u4e601 \u5047\u8bbe\u73b0\u5728\u67d0\u4eba\u7684\u80fd\u529b\u4e3a1\uff0c \u6bcf\u5929\u6bd4\u524d\u4e00\u5929\u8fdb\u6b650.01\uff0c \u4e00\u5e74\u540e\u4ed6\u7684\u80fd\u529b\u662f\u591a\u5c11\uff1f ability = 1 scale = 1.01 records = [] for i in range(365): ability = ability * 1.01 records.append(ability) print(records) [1.01, 1.0201, 1.030301, 1.04060401, 1.0510100501, 1.061520150601, 1.0721353521070098, 1.08285670562808, 1.0936852726843609, 1.1046221254112045, 1.1156683466653166, ...................36.30913774096189, 36.672229118371504, 37.03895140955522, 37.40934092365077, 37.783434332887275] import matplotlib.pyplot as plt import math %matplotlib inline ability = 1 scale = 1.02 records = [] days = range(1, 365) for day in days: ability = ability*scale records.append(ability) plt.plot(days, records) plt.title('Be better everyday!') Text(0.5, 1.0, 'Be better everyday!') \u5b89\u88c5\u5305\u7684\u65b9\u6cd5 \u547d\u4ee4\u884c\u6267\u884c pip install packagename jupyter notebook\u7684Cell\u4e2d\u6267\u884c !pip install packagename \u5982\u679c\u662fmac\uff0cpip\u5199\u6210pip3 !pip install matplotlib Looking in indexes: https://mirrors.aliyun.com/pypi/simple/ Requirement already satisfied: matplotlib in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (3.2.1) Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.2.0) Requirement already satisfied: python-dateutil>=2.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.8.1) Requirement already satisfied: cycler>=0.10 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (0.10.0) Requirement already satisfied: numpy>=1.11 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.18.2) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.4.7) Requirement already satisfied: six>=1.5 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from python-dateutil>=2.1->matplotlib) (1.14.0) \u7ec3\u4e602 \u6253\u5370\u4e5d\u4e5d\u4e58\u6cd5\u8868\u683c \u7528\u5230\u7684\u77e5\u8bc6\u70b9: for\u5faa\u73af \u5b57\u7b26\u4e32format\u65b9\u6cd5 print\u51fd\u6570(\u6d89\u53ca\u5230end\u53c2\u6570) for row in range(1, 10): #print(row) for col in range(1, row+1): formula = '{col}*{row}={res}'.format(col=col, row=row, res=col*row) print(formula, end='\\t') print('') 1*1=1 1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream. for row in range(1, 10): for col in range(1, row+1): formula = '{col}*{row}={res}' content = formula.format(col=col, row=row, res=col*row) print(content, end='\\t') print() 1*1=1 1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81","title":"\u903b\u8f91\u8bed\u53e5"},{"location":"PythonBasic/ifelsetryexcept/#if","text":"","title":"if\u6761\u4ef6\u5224\u65ad"},{"location":"PythonBasic/ifelsetryexcept/#condition","text":"\u901a\u5e38\u6211\u4eec\u7406\u89e3\u7684condition\u4e3a\u5e03\u5c14\u503c #Tab condition = True if condition: print('condition\u4e3aTrue') else: print('condition\u4e3aFalse') condition\u4e3aTrue age = 17 if age>=18: print('\u4f60\u662f\u6210\u5e74\u4eba\u4e86') else: print('\u4f60\u8fd8\u662f\u4e2a\u5b69\u5b50') \u4f60\u8fd8\u662f\u4e2a\u5b69\u5b50 age = 20 if age>=55: print('\u8001\u5e74\u4eba') elif 35<=age<55: print('\u4e2d\u5e74') elif 18<=age<35: print('\u9752\u5e74') elif 0<=age<18: print('\u513f\u7ae5') \u9752\u5e74","title":"condition\u4e3a\u5e03\u5c14\u503c\u3001\u5e03\u5c14\u8fd0\u7b97\u3001\u6210\u5458\u8fd0\u7b97\u7b26"},{"location":"PythonBasic/ifelsetryexcept/#conditon","text":"\u5404\u79cd\u7a7a\u503c(\u7a7a\u5b57\u7b26\u4e32\u3001\u7a7a\u5217\u8868\u7b49)\u4f5c\u7528\u7b49\u540c\u4e8eFalse \u5404\u79cd\u975e\u7a7a\u503c\uff0c\u4f5c\u7528\u7b49\u540c\u4e8eTrue a = None if a: print('a\u662f\u975e\u7a7a\u6570\u636e') else: print('a\u662f\u7a7a\u6570\u636e') a\u662f\u7a7a\u6570\u636e","title":"\u7279\u6b8a\u7684conditon"},{"location":"PythonBasic/ifelsetryexcept/#for","text":"\u91cd\u590d\u505a\u67d0\u4ef6\u4e8b \u8fed\u4ee3\u51fa\u6570\u636e\u4e2d\u7684\u5185\u5bb9(\u5143\u7d20)","title":"for\u5faa\u73af"},{"location":"PythonBasic/ifelsetryexcept/#_1","text":"\u6211\u4eec\u60f3\u5bf9iterable\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2aitem: \u505a\u70b9\u4e8b(\u5bf9item\u505a\u64cd\u4f5c)","title":"\u4e0a\u9762\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u89e3\u8bfb\u4e3a"},{"location":"PythonBasic/ifelsetryexcept/#_2","text":"","title":"\u91cd\u590d\u505a\u67d0\u4e8b"},{"location":"PythonBasic/ifelsetryexcept/#1","text":"\u8ba1\u7b971+2+3+...+97+98+99+100=? 1 + 2 = 3 3 + 3 = 6 6 + 4 = 10 10 + 5 = 15 result = 0 #int for i in range(1, 101): result = result + i print(result) 5050","title":"\u95ee\u98981"},{"location":"PythonBasic/ifelsetryexcept/#_3","text":"\u4ece\u67d0\u79cd\u201c\u96c6\u5408\u201d\uff08\u8fd9\u4e2a\u201c\u96c6\u5408\u201d\u53ef\u4ee5\u4f7flist\u3001set\u3001tuple\u7b49\uff09\uff0c\u53ea\u8981\u201c\u96c6\u5408\u201d\u5185\u90e8\u6709\u591a\u4e2a\u6210\u5458\u5c31\u53ef\u4ee5\u4f7f\u7528for\u5faa\u73af\u8fed\u4ee3\u51fa\u5185\u90e8\u7684\u6210\u5458 names = ['David', 'Henry', 'Mary'] for name in names: print(name) David Henry Mary name = 'David' for s in name: print(s) D a v i d infos = {'David':{'age':25, 'gender':'Male'}, 'Mary':{'age':23, 'gender': 'Female'}, 'Henry':{'age':23, 'gender': 'Male'} } for item in infos.items(): print(item) ('David', {'age': 25, 'gender': 'Male'}) ('Mary', {'age': 23, 'gender': 'Female'}) ('Henry', {'age': 23, 'gender': 'Male'}) for name, info in infos.items(): print(name, info) David Mary Henry","title":"\u8fed\u4ee3\u51fa\u6570\u636e\u4e2d\u7684\u5185\u5bb9"},{"location":"PythonBasic/ifelsetryexcept/#try-except","text":"\u9047\u5230\u65e0\u5173\u7d27\u8981\u7684bug\uff0c\u4e0d\u4f1a\u505c\u4e0b\u6765\uff0c\u8ba9\u7a0b\u5e8f\u6709\u4e00\u5b9a\u7684\u5bb9\u9519\u80fd\u529b\u3002\u901a\u4fd7\u70b9\u5c31\u662f\u6b64\u5904\u4e0d\u7559\u7237\uff0c\u81ea\u6709\u7559\u7237\u5904\uff0c\u51e1\u4e8b\u522b\u94bb\u725b\u89d2\u5c16\u3002 for x in [1,2,0,2,1]: print(10/x) 10.0 5.0 --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) <ipython-input-19-83bea9c92c0e> in <module> 1 for x in [1,2,0,2,1]: ----> 2 print(10/x) ZeroDivisionError: division by zero for x in [1,2,0,2,1]: try: print(10/x) except: print('0\u9664\u9519\u8bef') #pass 10.0 5.0 0\u9664\u9519\u8bef 5.0 10.0","title":"try-except"},{"location":"PythonBasic/ifelsetryexcept/#1_1","text":"\u5047\u8bbe\u73b0\u5728\u67d0\u4eba\u7684\u80fd\u529b\u4e3a1\uff0c \u6bcf\u5929\u6bd4\u524d\u4e00\u5929\u8fdb\u6b650.01\uff0c \u4e00\u5e74\u540e\u4ed6\u7684\u80fd\u529b\u662f\u591a\u5c11\uff1f ability = 1 scale = 1.01 records = [] for i in range(365): ability = ability * 1.01 records.append(ability) print(records) [1.01, 1.0201, 1.030301, 1.04060401, 1.0510100501, 1.061520150601, 1.0721353521070098, 1.08285670562808, 1.0936852726843609, 1.1046221254112045, 1.1156683466653166, ...................36.30913774096189, 36.672229118371504, 37.03895140955522, 37.40934092365077, 37.783434332887275] import matplotlib.pyplot as plt import math %matplotlib inline ability = 1 scale = 1.02 records = [] days = range(1, 365) for day in days: ability = ability*scale records.append(ability) plt.plot(days, records) plt.title('Be better everyday!') Text(0.5, 1.0, 'Be better everyday!')","title":"\u7ec3\u4e601"},{"location":"PythonBasic/ifelsetryexcept/#_4","text":"\u547d\u4ee4\u884c\u6267\u884c pip install packagename jupyter notebook\u7684Cell\u4e2d\u6267\u884c !pip install packagename \u5982\u679c\u662fmac\uff0cpip\u5199\u6210pip3 !pip install matplotlib Looking in indexes: https://mirrors.aliyun.com/pypi/simple/ Requirement already satisfied: matplotlib in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (3.2.1) Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.2.0) Requirement already satisfied: python-dateutil>=2.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.8.1) Requirement already satisfied: cycler>=0.10 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (0.10.0) Requirement already satisfied: numpy>=1.11 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.18.2) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.4.7) Requirement already satisfied: six>=1.5 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from python-dateutil>=2.1->matplotlib) (1.14.0)","title":"\u5b89\u88c5\u5305\u7684\u65b9\u6cd5"},{"location":"PythonBasic/ifelsetryexcept/#2","text":"\u6253\u5370\u4e5d\u4e5d\u4e58\u6cd5\u8868\u683c \u7528\u5230\u7684\u77e5\u8bc6\u70b9: for\u5faa\u73af \u5b57\u7b26\u4e32format\u65b9\u6cd5 print\u51fd\u6570(\u6d89\u53ca\u5230end\u53c2\u6570) for row in range(1, 10): #print(row) for col in range(1, row+1): formula = '{col}*{row}={res}'.format(col=col, row=row, res=col*row) print(formula, end='\\t') print('') 1*1=1 1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream. for row in range(1, 10): for col in range(1, row+1): formula = '{col}*{row}={res}' content = formula.format(col=col, row=row, res=col*row) print(content, end='\\t') print() 1*1=1 1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81","title":"\u7ec3\u4e602"},{"location":"PythonBasic/list_comprehensive/","text":"\u5217\u8868\u63a8\u5bfc\u5f0f\u552f\u4e00\u7684\u7528\u5904\u5c31\u662f\u589e\u5f3a\u4ee3\u7801\u7684\u53ef\u9605\u8bfb\u6027\uff0c\u521d\u6b21\u63a5\u89e6\u53ef\u80fd\u6bd4\u8f83\u96be\u7406\u89e3\uff0c\u4f46\u662f\u5927\u5bb6\u4e00\u5b9a\u8981\u7406\u89e3\uff0c\u6587\u672c\u5206\u6790\u4e2d\u7ecf\u5e38\u4f1a\u7528\u5230ta\u3002 \u95ee\u98981 \u7528\u5217\u8868\u8868\u793a\u96c6\u5408X $X= {x| x \\in [1,2,3,4,5,6,7,8,9,10]}$ X = [1,2,3,4,5,6,7,8,9,10] X [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] X = list(range(1, 10)) X [1, 2, 3, 4, 5, 6, 7, 8, 9] \u95ee\u98982 \u8868\u793a\u96c6\u5408Y $Y = {x^2| x \\in [1,2,3,4,5,6,7,8,9,10]}$ Y = [] for x in X: Y.append(x*x) Y [1, 4, 9, 16, 25, 36, 49, 64, 81] \u5217\u8868\u63a8\u5bfc\u5f0f \u5b9e\u73b0\u6b65\u9aa4 \u5148\u590d\u5236X \u518d\u5bf9X\u4e2d\u7684\u5143\u7d20x\u8fdb\u884c\u64cd\u4f5c #\u5148\u590d\u5236X [x for x in X] [1, 2, 3, 4, 5, 6, 7, 8, 9] #\u518d\u5bf9x\u8fdb\u884c\u64cd\u4f5c [x*x for x in X] [1, 4, 9, 16, 25, 36, 49, 64, 81] \u7406\u89e3\u5217\u8868\u63a8\u5bfc\u5f0f \u5e26\u6761\u4ef6\u7684\u5217\u8868\u63a8\u5bfc\u5f0f $C= {x^2 | (x \\in X) \\cap (x>5)}$ #\u590d\u5236X [x for x in X] [1, 2, 3, 4, 5, 6, 7, 8, 9] #X\u4e2d\u7684\u8981\u5927\u4e8e5 #[x for x in X if x>5] [x for x in X if x>5] [6, 7, 8, 9] #\u5bf9\u6ee1\u8db3\u6761\u4ef6\u7684x\u8fdb\u884c\u64cd\u4f5c #[x*x for x in X if x>5] [x*x for x in X if x>5] [36, 49, 64, 81] \u95ee\u98983 \u5168\u90e8\u5c0f\u5199 words = ['Life', 'is', 'short', 'so', 'we', 'use', 'Python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use'] words ['Life', 'is', 'short', 'so', 'we', 'use', 'Python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use'] lower_words = [w.lower() for w in words] lower_words ['life', 'is', 'short', 'so', 'we', 'use', 'python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use'] \u95ee\u98984 \u8ba1\u7b97lower_words\u5217\u8868\u6570\u636e\u7684\u5355\u8bcd\u8bcd\u9891 wordset = set(lower_words) [(w, lower_words.count(w)) for w in wordset] [('so', 1), ('and', 1), ('learn', 1), ('use', 2), ('to', 2), ('we', 1), ('easy', 2), ('python', 2), ('is', 2), ('short', 1), ('life', 1)] #1 \u751f\u4ea7\u8bcd\u8bed\u96c6\u5408 wordset = set(lower_words) print(wordset) {'so', 'and', 'learn', 'use', 'to', 'we', 'easy', 'python', 'is', 'short', 'life'} #2. wordset\u590d\u5236wordset\u81ea\u5df1 [w for w in wordset] #3. \u5bf9wordset\u4e2d\u6bcf\u4e2a\u8bcd\u8bedw\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c [lower_words.count(w) for w in wordset] [1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1] #3. \u8bcd\u9891\u548c\u8bcd\u8bed\u4e00\u8d77\u663e\u793a [(w,lower_words.count(w)) for w in wordset] [('so', 1), ('and', 1), ('learn', 1), ('use', 2), ('to', 2), ('we', 1), ('easy', 2), ('python', 2), ('is', 2), ('short', 1), ('life', 1)] \u95ee\u98985 d = {'x': 'A', 'y': 'B', 'z': 'C' } \u5982\u4f55\u5c06d\u4e2d\u7684 \u952e\u503c\u5bf9 \u62fc\u63a5,\u8f93\u51fa\u4e3a ['xA', 'yB', 'zC] d = {'x': 'A', 'y': 'B', 'z': 'C' } d.items() dict_items([('x', 'A'), ('y', 'B'), ('z', 'C')]) #1 \u81ea\u5df1\u590d\u5236d.items()\u81ea\u5df1 [i for i in d.items()] [('x', 'A'), ('y', 'B'), ('z', 'C')] #2 \u5bf9\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u8981\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\u64cd\u4f5c [i[0]+i[1] for i in d.items()] ['xA', 'yB', 'zC']","title":"\u5217\u8868\u751f\u6210\u5f0f"},{"location":"PythonBasic/list_comprehensive/#1-x","text":"$X= {x| x \\in [1,2,3,4,5,6,7,8,9,10]}$ X = [1,2,3,4,5,6,7,8,9,10] X [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] X = list(range(1, 10)) X [1, 2, 3, 4, 5, 6, 7, 8, 9]","title":"\u95ee\u98981 \u7528\u5217\u8868\u8868\u793a\u96c6\u5408X"},{"location":"PythonBasic/list_comprehensive/#2-y","text":"$Y = {x^2| x \\in [1,2,3,4,5,6,7,8,9,10]}$ Y = [] for x in X: Y.append(x*x) Y [1, 4, 9, 16, 25, 36, 49, 64, 81]","title":"\u95ee\u98982 \u8868\u793a\u96c6\u5408Y"},{"location":"PythonBasic/list_comprehensive/#_1","text":"\u5b9e\u73b0\u6b65\u9aa4 \u5148\u590d\u5236X \u518d\u5bf9X\u4e2d\u7684\u5143\u7d20x\u8fdb\u884c\u64cd\u4f5c #\u5148\u590d\u5236X [x for x in X] [1, 2, 3, 4, 5, 6, 7, 8, 9] #\u518d\u5bf9x\u8fdb\u884c\u64cd\u4f5c [x*x for x in X] [1, 4, 9, 16, 25, 36, 49, 64, 81]","title":"\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"PythonBasic/list_comprehensive/#_2","text":"","title":"\u7406\u89e3\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"PythonBasic/list_comprehensive/#_3","text":"$C= {x^2 | (x \\in X) \\cap (x>5)}$ #\u590d\u5236X [x for x in X] [1, 2, 3, 4, 5, 6, 7, 8, 9] #X\u4e2d\u7684\u8981\u5927\u4e8e5 #[x for x in X if x>5] [x for x in X if x>5] [6, 7, 8, 9] #\u5bf9\u6ee1\u8db3\u6761\u4ef6\u7684x\u8fdb\u884c\u64cd\u4f5c #[x*x for x in X if x>5] [x*x for x in X if x>5] [36, 49, 64, 81]","title":"\u5e26\u6761\u4ef6\u7684\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"PythonBasic/list_comprehensive/#3","text":"words = ['Life', 'is', 'short', 'so', 'we', 'use', 'Python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use'] words ['Life', 'is', 'short', 'so', 'we', 'use', 'Python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use'] lower_words = [w.lower() for w in words] lower_words ['life', 'is', 'short', 'so', 'we', 'use', 'python', 'python', 'is', 'easy', 'to', 'learn', 'and', 'easy', 'to', 'use']","title":"\u95ee\u98983 \u5168\u90e8\u5c0f\u5199"},{"location":"PythonBasic/list_comprehensive/#4-lower_words","text":"wordset = set(lower_words) [(w, lower_words.count(w)) for w in wordset] [('so', 1), ('and', 1), ('learn', 1), ('use', 2), ('to', 2), ('we', 1), ('easy', 2), ('python', 2), ('is', 2), ('short', 1), ('life', 1)] #1 \u751f\u4ea7\u8bcd\u8bed\u96c6\u5408 wordset = set(lower_words) print(wordset) {'so', 'and', 'learn', 'use', 'to', 'we', 'easy', 'python', 'is', 'short', 'life'} #2. wordset\u590d\u5236wordset\u81ea\u5df1 [w for w in wordset] #3. \u5bf9wordset\u4e2d\u6bcf\u4e2a\u8bcd\u8bedw\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c [lower_words.count(w) for w in wordset] [1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1] #3. \u8bcd\u9891\u548c\u8bcd\u8bed\u4e00\u8d77\u663e\u793a [(w,lower_words.count(w)) for w in wordset] [('so', 1), ('and', 1), ('learn', 1), ('use', 2), ('to', 2), ('we', 1), ('easy', 2), ('python', 2), ('is', 2), ('short', 1), ('life', 1)]","title":"\u95ee\u98984 \u8ba1\u7b97lower_words\u5217\u8868\u6570\u636e\u7684\u5355\u8bcd\u8bcd\u9891"},{"location":"PythonBasic/list_comprehensive/#5","text":"d = {'x': 'A', 'y': 'B', 'z': 'C' } \u5982\u4f55\u5c06d\u4e2d\u7684 \u952e\u503c\u5bf9 \u62fc\u63a5,\u8f93\u51fa\u4e3a ['xA', 'yB', 'zC] d = {'x': 'A', 'y': 'B', 'z': 'C' } d.items() dict_items([('x', 'A'), ('y', 'B'), ('z', 'C')]) #1 \u81ea\u5df1\u590d\u5236d.items()\u81ea\u5df1 [i for i in d.items()] [('x', 'A'), ('y', 'B'), ('z', 'C')] #2 \u5bf9\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u8981\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\u64cd\u4f5c [i[0]+i[1] for i in d.items()] ['xA', 'yB', 'zC']","title":"\u95ee\u98985"},{"location":"PythonBasic/mac/","text":"\u6ce8\u610f\uff1a Anaconda\u548cPython\u90fd\u662fpython\u3002\u4e00\u5b9a\u8981\u8bb0\u4f4f\u4e8c\u9009\u5176\u4e00\uff0c\u4e0d\u8981\u90fd\u5b89\u88c5\uff0c\u4e0d\u7136\u5728\u5b66\u4e60python\u7b2c\u4e09\u65b9\u5305\u5b89\u88c5\u7684\u65f6\uff0c\u4f60\u4f1a\u9047\u5230\u4e00\u4e9b\u9ebb\u70e6\u3002 \u5982\u679c\u4e4b\u524d\u6ca1\u5b89\u88c5\u8fc7\u4e24\u4e2a\u8f6f\u4ef6\uff0c\u5efa\u8bae\u4ece\u5934\u5230\u5c3e\u6309\u7167\u6211\u7684\u89c6\u9891\u8fdb\u884c\u7535\u8111\u914d\u7f6e\u3002 Mac\u73af\u5883\u914d\u7f6e \u8f6f\u4ef6\u5305\u4e0b\u8f7d \u94fe\u63a5: https://pan.baidu.com/s/1tbgGBcAnYSMZXp80F0nM1Q \u5bc6\u7801: t307 \u4e00\u3001Python\u5b89\u88c5 \u5b98\u7f51 https://www.python.org/ mac\u81ea\u5e26python2\uff0c\u4e3a\u4e86\u4e0epython2\u533a\u522b\uff0c\u51e1\u662f\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528pip\u548cpython\uff0c\u6211\u4eec\u90fd\u8981\u52a0\u4e0a3\u3002 \u5b89\u88c5\u6210\u529f\u7684\u6807\u51c6\u662f==\u547d\u4ee4\u884c\u53ef\u4ee5\u8c03\u7528python3== $ python3 \u547d\u4ee4\u884c\u6253\u5f00\u7684\u65b9\u6cd5 ==command+\u7a7a\u683c== \u542f\u52a8 ==\u805a\u7126\u641c\u7d22Spotlight==\uff0c\u518d\u8f93\u5165terminal \u4e8c\u3001pip3\u8bbe\u7f6e pip3\u662fpython\u7684\u547d\u4ee4\u884c\u5b89\u88c5\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u6211\u4eec\u5b89\u88c5\u7b2c\u4e09\u65b9\u5e93\u3002 2.1 \u66f4\u6539pip3\u955c\u50cf \u4e3a\u4e86\u4fdd\u8bc1\u5b89\u88c5\u7684\u901f\u5ea6\u548c\u6210\u529f\u7387\uff0c\u547d\u4ee4\u884c\u6267\u884c pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 2.2 \u4f7f\u7528\u65b9\u6cd5 pip3 install packagename 2.3 \u7b2c\u4e09\u65b9\u5e93\u5b89\u88c5\u65b9\u6cd5 pip\u5b89\u88c5\u6cd5 \u5355\u4e2a\u5e93\u7684\u5b89\u88c5\uff0c\u547d\u4ee4\u884c\u6267\u884c pip3 install \u5e93\u7684\u540d\u5b57 \u591a\u4e2a\u5e93\u7684\u5b89\u88c5\uff0c \u547d\u4ee4\u884c\u6267\u884c pip3 install -r requirements.txt pypi\u672c\u5730\u5b89\u88c5 \u5728https://pypi.org/ \u641c\u5e93\uff0c\u70b9\u8fdb\u53bb \u627eDownload files\uff0c\u4e0b\u8f7dwhl\u6216\u538b\u7f29\u6587\u4ef6\u5230\u684c\u9762\u3002\u4f8b\u5982\u6587\u4ef6\u540d xxx.whl \u547d\u4ee4\u884c\u4f9d\u6b21\u6267\u884c cd desktop pip3 install xxx.whl github\u672c\u5730\u5b89\u88c5\uff08\u5982github\u9879\u76ee\u4e2d\u5b58\u5728setup.py\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b89\u88c5\u4f7f\u7528\uff09 \u4e0b\u8f7dgithub\u9879\u76ee\u81f3\u684c\u9762\uff0c\u89e3\u538b \u547d\u4ee4\u4f9d\u6b21\u6267\u884c cd desktop python3 setup.py install \u4e09\u3001Jupyter notebook 3.1 \u5b89\u88c5 \u547d\u4ee4\u884c\u6267\u884c pip3 install jupyter 3.2 \u8c03\u7528 \u547d\u4ee4\u884c\u6267\u884c jupyter notebook 3.3 \u5e38\u7528\u5feb\u6377\u952e jupyter\u5185\u5feb\u6377\u952e \u529f\u80fd ESC+A\uff08ESC+B\uff09 \u5f53\u524d\u5355\u5143\u683c\u4e0a(\u4e0b)\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684Cell D+D \u5220\u9664\u5f53\u524d\u5355\u5143\u683c Shift+Enter \u6267\u884c\u5355\u5143\u683c\u5185\u7684Python\u4ee3\u7801 ESC+M \u5355\u5143\u683c\u7531\u4ee3\u7801\u6a21\u5f0f\u8f6c\u4e3aMarkdown\u6807\u8bb0\u6a21\u5f0f \u63a8\u8350\uff1a Markdown\u8bed\u6cd5\u7279\u522b\u597d\u7528\uff0c\u5f3a\u70c8\u5efa\u8bae\u5b66\u4e60\uff0c\u987a\u4fbf\u5b89\u88c5\u4e00\u4e2aTypora\u8f6f\u4ef6\u3002 \u56db\u3001Tips \u73af\u5883\u914d\u7f6e\u592a\u96be\uff0c\u800c\u4e14\u6709\u65f6\u5019\u7535\u8111\u8fd8\u4f1a\u51fa\u73b0\u4e00\u4e9b\u89c6\u9891\u91cc\u51fa\u73b0\u4e0d\u4e86\u7684\u95ee\u9898\u3002\u8fd9\u65f6\u4e0d\u59a8\u5728==\u6dd8\u5b9d==\u641c python\u73af\u5883\u914d\u7f6e \uff0c\u5bfb\u627e\u4e00\u5bf9\u4e00\u8fdc\u7a0b\u534f\u52a9 jupyter\u4f7f\u7528\u65b9\u6cd5","title":"Mac\u914d\u7f6e"},{"location":"PythonBasic/mac/#mac","text":"","title":"Mac\u73af\u5883\u914d\u7f6e"},{"location":"PythonBasic/mac/#_1","text":"\u94fe\u63a5: https://pan.baidu.com/s/1tbgGBcAnYSMZXp80F0nM1Q \u5bc6\u7801: t307","title":"\u8f6f\u4ef6\u5305\u4e0b\u8f7d"},{"location":"PythonBasic/mac/#python","text":"\u5b98\u7f51 https://www.python.org/ mac\u81ea\u5e26python2\uff0c\u4e3a\u4e86\u4e0epython2\u533a\u522b\uff0c\u51e1\u662f\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528pip\u548cpython\uff0c\u6211\u4eec\u90fd\u8981\u52a0\u4e0a3\u3002 \u5b89\u88c5\u6210\u529f\u7684\u6807\u51c6\u662f==\u547d\u4ee4\u884c\u53ef\u4ee5\u8c03\u7528python3== $ python3","title":"\u4e00\u3001Python\u5b89\u88c5"},{"location":"PythonBasic/mac/#_2","text":"==command+\u7a7a\u683c== \u542f\u52a8 ==\u805a\u7126\u641c\u7d22Spotlight==\uff0c\u518d\u8f93\u5165terminal","title":"\u547d\u4ee4\u884c\u6253\u5f00\u7684\u65b9\u6cd5"},{"location":"PythonBasic/mac/#pip3","text":"pip3\u662fpython\u7684\u547d\u4ee4\u884c\u5b89\u88c5\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u6211\u4eec\u5b89\u88c5\u7b2c\u4e09\u65b9\u5e93\u3002","title":"\u4e8c\u3001pip3\u8bbe\u7f6e"},{"location":"PythonBasic/mac/#21-pip3","text":"\u4e3a\u4e86\u4fdd\u8bc1\u5b89\u88c5\u7684\u901f\u5ea6\u548c\u6210\u529f\u7387\uff0c\u547d\u4ee4\u884c\u6267\u884c pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/","title":"2.1 \u66f4\u6539pip3\u955c\u50cf"},{"location":"PythonBasic/mac/#22","text":"pip3 install packagename","title":"2.2 \u4f7f\u7528\u65b9\u6cd5"},{"location":"PythonBasic/mac/#23","text":"pip\u5b89\u88c5\u6cd5 \u5355\u4e2a\u5e93\u7684\u5b89\u88c5\uff0c\u547d\u4ee4\u884c\u6267\u884c pip3 install \u5e93\u7684\u540d\u5b57 \u591a\u4e2a\u5e93\u7684\u5b89\u88c5\uff0c \u547d\u4ee4\u884c\u6267\u884c pip3 install -r requirements.txt pypi\u672c\u5730\u5b89\u88c5 \u5728https://pypi.org/ \u641c\u5e93\uff0c\u70b9\u8fdb\u53bb \u627eDownload files\uff0c\u4e0b\u8f7dwhl\u6216\u538b\u7f29\u6587\u4ef6\u5230\u684c\u9762\u3002\u4f8b\u5982\u6587\u4ef6\u540d xxx.whl \u547d\u4ee4\u884c\u4f9d\u6b21\u6267\u884c cd desktop pip3 install xxx.whl github\u672c\u5730\u5b89\u88c5\uff08\u5982github\u9879\u76ee\u4e2d\u5b58\u5728setup.py\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b89\u88c5\u4f7f\u7528\uff09 \u4e0b\u8f7dgithub\u9879\u76ee\u81f3\u684c\u9762\uff0c\u89e3\u538b \u547d\u4ee4\u4f9d\u6b21\u6267\u884c cd desktop python3 setup.py install","title":"2.3 \u7b2c\u4e09\u65b9\u5e93\u5b89\u88c5\u65b9\u6cd5"},{"location":"PythonBasic/mac/#jupyter-notebook","text":"","title":"\u4e09\u3001Jupyter notebook"},{"location":"PythonBasic/mac/#31","text":"\u547d\u4ee4\u884c\u6267\u884c pip3 install jupyter","title":"3.1 \u5b89\u88c5"},{"location":"PythonBasic/mac/#32","text":"\u547d\u4ee4\u884c\u6267\u884c jupyter notebook","title":"3.2 \u8c03\u7528"},{"location":"PythonBasic/mac/#33","text":"jupyter\u5185\u5feb\u6377\u952e \u529f\u80fd ESC+A\uff08ESC+B\uff09 \u5f53\u524d\u5355\u5143\u683c\u4e0a(\u4e0b)\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684Cell D+D \u5220\u9664\u5f53\u524d\u5355\u5143\u683c Shift+Enter \u6267\u884c\u5355\u5143\u683c\u5185\u7684Python\u4ee3\u7801 ESC+M \u5355\u5143\u683c\u7531\u4ee3\u7801\u6a21\u5f0f\u8f6c\u4e3aMarkdown\u6807\u8bb0\u6a21\u5f0f \u63a8\u8350\uff1a Markdown\u8bed\u6cd5\u7279\u522b\u597d\u7528\uff0c\u5f3a\u70c8\u5efa\u8bae\u5b66\u4e60\uff0c\u987a\u4fbf\u5b89\u88c5\u4e00\u4e2aTypora\u8f6f\u4ef6\u3002","title":"3.3 \u5e38\u7528\u5feb\u6377\u952e"},{"location":"PythonBasic/mac/#tips","text":"\u73af\u5883\u914d\u7f6e\u592a\u96be\uff0c\u800c\u4e14\u6709\u65f6\u5019\u7535\u8111\u8fd8\u4f1a\u51fa\u73b0\u4e00\u4e9b\u89c6\u9891\u91cc\u51fa\u73b0\u4e0d\u4e86\u7684\u95ee\u9898\u3002\u8fd9\u65f6\u4e0d\u59a8\u5728==\u6dd8\u5b9d==\u641c python\u73af\u5883\u914d\u7f6e \uff0c\u5bfb\u627e\u4e00\u5bf9\u4e00\u8fdc\u7a0b\u534f\u52a9","title":"\u56db\u3001Tips"},{"location":"PythonBasic/mac/#jupyter","text":"","title":"jupyter\u4f7f\u7528\u65b9\u6cd5"},{"location":"PythonBasic/pythonisalang/","text":"\u5b66Python\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u90fd\u4f1a\u542c\u5230\u4e00\u53e5\u201cLife is short, so we learn Python! \u201d\uff0c\u606d\u559c\u4f60\u9009\u62e9Python\u8fd9\u95e8\u5f3a\u5927\u800c\u6709\u8da3\u7684\u8bed\u8a00\u3002 \u8f93\u51fa\u6570\u5b57a\u7684\u7edd\u5bf9\u6570 \u5728\u5b66\u4e60\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u7ed9\u5927\u5bb6\u770b\u4e00\u6bb5\u8bdd There is such a number a, if a is greater than or equal to 0, we will print a; if a is less than 0, we will print -a \u76f8\u4fe1\u5927\u5bb6\u4e00\u770b\u5c31\u660e\u767d\u4e86\u8fd9\u662f\u6c42\u67d0\u6570\u7684\u7edd\u5bf9\u503c\u65b9\u6cd5\u7684\u82f1\u6587\u63cf\u8ff0\u3002\u4e0b\u9762\u6211\u4eec\u7528\u7cbe\u70bc\u7684Python\u8bed\u8a00\u8868\u793a a = -50 if a >= 0: print(a) else: print(-a) 50 Python\u53f7\u79f0\u662f\u6700\u8bf4 \u4eba\u8bdd \u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4ee5\u6700\u63a5\u8fd1\u4eba\u7c7b\u7406\u89e3\u7684\u65b9\u5f0f\u6784\u5efa\u4ee3\u7801\u3002 Python\u4e0e\u82f1\u8bed\u5bf9\u6bd4 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86Python\u548c\u82f1\u8bed\u4e00\u6837\u90fd\u662f\u4e00\u79cd\u8bed\u8a00\uff0c\u5b66\u4e60\u8bed\u8a00\u5c31\u9700\u8981\u5b66\u4e60\u57fa\u672c\u7684\u77e5\u8bc6\u70b9\uff0c\u5305\u62ec\u80cc\u5355\u8bcd\u548c\u4e86\u89e3\u8bed\u6cd5\u3002 \u82f1\u8bed Python \u4f8b\u5982 \u5355\u8bcd \u6570\u636e\u7c7b\u578b \u5217\u8868\u3001\u5b57\u7b26\u4e32\u3001\u5b57\u5178\u7b49 \u8bed\u6cd5 \u903b\u8f91\u8bed\u53e5 if\u6761\u4ef6\u5224\u8bfb\u8bed\u53e5\u3001for\u5faa\u73af\u8bed\u53e5\u7b49 \u6bcf\u5929\u79ef\u7d2f\u4e00\u70b9\u70b9 \u672c\u90e8\u5206\u975e\u5fc5\u987b\uff0c\u4ec5\u4ec5\u4e3a\u4e86\u5c55\u793apython\u4e5f\u53ef\u4ee5\u4f5c\u56fe #mac #!pip3 install matplotlib #win !pip install matplotlib Looking in indexes: https://mirrors.aliyun.com/pypi/simple/ Requirement already satisfied: matplotlib in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (3.2.1) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.4.7) Requirement already satisfied: cycler>=0.10 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (0.10.0) Requirement already satisfied: numpy>=1.11 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.18.2) Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.2.0) Requirement already satisfied: python-dateutil>=2.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.8.1) Requirement already satisfied: six in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from cycler>=0.10->matplotlib) (1.14.0) import matplotlib.pyplot as plt import math %matplotlib inline ability = 1 scale = 1.01 records = [] days = range(1, 365) for day in days: ability = ability*scale records.append(ability) plt.plot(days, records) plt.title('Be better everyday!') Text(0.5, 1.0, 'Be better everyday!') Python\u662f\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00 \u9762\u5411\u5bf9\u8c61\u662f\u6700\u96be\u7406\u89e3\u7684\u90e8\u5206\uff0c\u8fd9\u91cc\u5927\u5bb6\u53ea\u9700\u8981\u8bb0\u4f4f \u7c7b\u578b\u548c\u5bf9\u8c61\u662f\u7d27\u5bc6\u7ed1\u5b9a\u7684\uff0c\u8bf4\u5bf9\u8c61\u5c31\u662f\u5728\u8bf4\u7c7b\u578b\u3002 \u4e0d\u540c\u7684\u7c7b\u578b\u6709\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u90fd\u662f\u4e3a\u4e86\u66f4\u9ad8\u6548\u7684\u5b9e\u73b0\u4eba\u7c7b\u9700\u6c42\u6216\u8005\u6570\u636e\u5206\u6790\u9700\u6c42 \u7c7b\u578b \u5b9e\u4f8b(\u5bf9\u8c61) \u5b9e\u4f8b(\u5bf9\u8c61) \u65b9\u6cd5 \u732a \u6751\u4e1c\u5934\u8001\u738b\u5bb6\u7684\u732a \u628a\u732a\u628a\u7cae\u98df\u53d8\u6210\u8089 \u732a.\u4ea7\u8089 \u725b \u6751\u4e1c\u5934\u8001\u5f20\u5bb6\u7684\u8015\u725b \u628a\u7cae\u98df\u53d8\u6210\u755c\u529b \u725b.\u8015\u5730 \u5217\u8868 hobbies = ['\u8dd1\u6b65', '\u4e52\u4e53\u7403'\uff0c '\u7bee\u7403'\uff0c'\u7bee\u7403'] \u7edf\u8ba1\u67d0\u7fa4\u4f53\u7231\u597d\u7684\u5206\u5e03, \u67e5\u770b\u5404\u7231\u597d\u7684\u4eba\u6570 hobbies.count('\u7bee\u7403') \u5b57\u7b26\u4e32 str1 = \"Hello\uff0cWorld!\" \u5c06\u6587\u672c\u5185\u5bb9\u7531World\u66f4\u6539\u4e3aPython str1.replace('World', 'Python') \u5b57\u5178 grade = {'David':98, 'Mary':88,...} \u65b9\u4fbf\u6570\u636e\u68c0\u7d22 grade.get('David') ... ... ... ... Python\u4e2d\u7684\u6570\u636e\u7c7b\u578b \u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u9002\u5408\u5904\u7406\u4e0d\u540c\u7684\u6570\u636e\uff0c\u6709\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u3002 \u6570\u636e\u7c7b\u578b \u4f8b\u5b50 \u6570\u5b57 a = 5 \u5b57\u7b26\u4e32 my_str = \"abcdefg\" \u5217\u8868 my_list = [1, 2, 3] \u5143\u7ec4 my_tuple = (1, 2, 3) \u5b57\u5178 my_dict = {'David': 25, 'Mark':30} \u7a7a\u503c None","title":"Python\u662f\u4e00\u79cd\u8bed\u8a00"},{"location":"PythonBasic/pythonisalang/#a","text":"\u5728\u5b66\u4e60\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u7ed9\u5927\u5bb6\u770b\u4e00\u6bb5\u8bdd There is such a number a, if a is greater than or equal to 0, we will print a; if a is less than 0, we will print -a \u76f8\u4fe1\u5927\u5bb6\u4e00\u770b\u5c31\u660e\u767d\u4e86\u8fd9\u662f\u6c42\u67d0\u6570\u7684\u7edd\u5bf9\u503c\u65b9\u6cd5\u7684\u82f1\u6587\u63cf\u8ff0\u3002\u4e0b\u9762\u6211\u4eec\u7528\u7cbe\u70bc\u7684Python\u8bed\u8a00\u8868\u793a a = -50 if a >= 0: print(a) else: print(-a) 50 Python\u53f7\u79f0\u662f\u6700\u8bf4 \u4eba\u8bdd \u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4ee5\u6700\u63a5\u8fd1\u4eba\u7c7b\u7406\u89e3\u7684\u65b9\u5f0f\u6784\u5efa\u4ee3\u7801\u3002","title":"\u8f93\u51fa\u6570\u5b57a\u7684\u7edd\u5bf9\u6570"},{"location":"PythonBasic/pythonisalang/#python","text":"\u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86Python\u548c\u82f1\u8bed\u4e00\u6837\u90fd\u662f\u4e00\u79cd\u8bed\u8a00\uff0c\u5b66\u4e60\u8bed\u8a00\u5c31\u9700\u8981\u5b66\u4e60\u57fa\u672c\u7684\u77e5\u8bc6\u70b9\uff0c\u5305\u62ec\u80cc\u5355\u8bcd\u548c\u4e86\u89e3\u8bed\u6cd5\u3002 \u82f1\u8bed Python \u4f8b\u5982 \u5355\u8bcd \u6570\u636e\u7c7b\u578b \u5217\u8868\u3001\u5b57\u7b26\u4e32\u3001\u5b57\u5178\u7b49 \u8bed\u6cd5 \u903b\u8f91\u8bed\u53e5 if\u6761\u4ef6\u5224\u8bfb\u8bed\u53e5\u3001for\u5faa\u73af\u8bed\u53e5\u7b49","title":"Python\u4e0e\u82f1\u8bed\u5bf9\u6bd4"},{"location":"PythonBasic/pythonisalang/#_1","text":"\u672c\u90e8\u5206\u975e\u5fc5\u987b\uff0c\u4ec5\u4ec5\u4e3a\u4e86\u5c55\u793apython\u4e5f\u53ef\u4ee5\u4f5c\u56fe #mac #!pip3 install matplotlib #win !pip install matplotlib Looking in indexes: https://mirrors.aliyun.com/pypi/simple/ Requirement already satisfied: matplotlib in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (3.2.1) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.4.7) Requirement already satisfied: cycler>=0.10 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (0.10.0) Requirement already satisfied: numpy>=1.11 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.18.2) Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (1.2.0) Requirement already satisfied: python-dateutil>=2.1 in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from matplotlib) (2.8.1) Requirement already satisfied: six in c:\\users\\thunderhit\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from cycler>=0.10->matplotlib) (1.14.0) import matplotlib.pyplot as plt import math %matplotlib inline ability = 1 scale = 1.01 records = [] days = range(1, 365) for day in days: ability = ability*scale records.append(ability) plt.plot(days, records) plt.title('Be better everyday!') Text(0.5, 1.0, 'Be better everyday!')","title":"\u6bcf\u5929\u79ef\u7d2f\u4e00\u70b9\u70b9"},{"location":"PythonBasic/pythonisalang/#python_1","text":"\u9762\u5411\u5bf9\u8c61\u662f\u6700\u96be\u7406\u89e3\u7684\u90e8\u5206\uff0c\u8fd9\u91cc\u5927\u5bb6\u53ea\u9700\u8981\u8bb0\u4f4f \u7c7b\u578b\u548c\u5bf9\u8c61\u662f\u7d27\u5bc6\u7ed1\u5b9a\u7684\uff0c\u8bf4\u5bf9\u8c61\u5c31\u662f\u5728\u8bf4\u7c7b\u578b\u3002 \u4e0d\u540c\u7684\u7c7b\u578b\u6709\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u90fd\u662f\u4e3a\u4e86\u66f4\u9ad8\u6548\u7684\u5b9e\u73b0\u4eba\u7c7b\u9700\u6c42\u6216\u8005\u6570\u636e\u5206\u6790\u9700\u6c42 \u7c7b\u578b \u5b9e\u4f8b(\u5bf9\u8c61) \u5b9e\u4f8b(\u5bf9\u8c61) \u65b9\u6cd5 \u732a \u6751\u4e1c\u5934\u8001\u738b\u5bb6\u7684\u732a \u628a\u732a\u628a\u7cae\u98df\u53d8\u6210\u8089 \u732a.\u4ea7\u8089 \u725b \u6751\u4e1c\u5934\u8001\u5f20\u5bb6\u7684\u8015\u725b \u628a\u7cae\u98df\u53d8\u6210\u755c\u529b \u725b.\u8015\u5730 \u5217\u8868 hobbies = ['\u8dd1\u6b65', '\u4e52\u4e53\u7403'\uff0c '\u7bee\u7403'\uff0c'\u7bee\u7403'] \u7edf\u8ba1\u67d0\u7fa4\u4f53\u7231\u597d\u7684\u5206\u5e03, \u67e5\u770b\u5404\u7231\u597d\u7684\u4eba\u6570 hobbies.count('\u7bee\u7403') \u5b57\u7b26\u4e32 str1 = \"Hello\uff0cWorld!\" \u5c06\u6587\u672c\u5185\u5bb9\u7531World\u66f4\u6539\u4e3aPython str1.replace('World', 'Python') \u5b57\u5178 grade = {'David':98, 'Mary':88,...} \u65b9\u4fbf\u6570\u636e\u68c0\u7d22 grade.get('David') ... ... ... ...","title":"Python\u662f\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00"},{"location":"PythonBasic/pythonisalang/#python_2","text":"\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u9002\u5408\u5904\u7406\u4e0d\u540c\u7684\u6570\u636e\uff0c\u6709\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u3002 \u6570\u636e\u7c7b\u578b \u4f8b\u5b50 \u6570\u5b57 a = 5 \u5b57\u7b26\u4e32 my_str = \"abcdefg\" \u5217\u8868 my_list = [1, 2, 3] \u5143\u7ec4 my_tuple = (1, 2, 3) \u5b57\u5178 my_dict = {'David': 25, 'Mark':30} \u7a7a\u503c None","title":"Python\u4e2d\u7684\u6570\u636e\u7c7b\u578b"},{"location":"PythonBasic/regex/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3b\u8981\u7528\u4e8e\u6570\u636e\u6e05\u6d17\uff0c\u6bd4\u5982\u4ece\u810f\u4e71\u5dee\u7684\u6587\u672c\u4e2d\u62bd\u53d6\u51fa\u81ea\u5df1\u9700\u8981\u7684\u4fe1\u606f\u3002\u5e38\u89c1\u4e8e\u722c\u866b\u548c\u6587\u672c\u5206\u6790\u3002 \u4e00\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u7b26\u53f7 \u6309\u7167\u7b26\u53f7\u7684\u529f\u80fd\uff0c\u6211\u5c06\u5176\u5206\u4e3a\u4e09\u7c7b\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8868\u8fbe\u5f0f\u90fd\u662f\u7531\u8fd9\u4e09\u79cd\u7b26\u53f7\u7ec4\u6210\u7684\u3002 1.1 \u6b63\u5219\u5b57\u7b26 \u9884\u8b66\uff0c\u542c\u4e0d\u61c2\u770b\u4e0d\u61c2\uff0c\u90fd\u4e0d\u8981\u7d27\u7684\u3002\u4e0d\u8981\u7ede\u5c3d\u8111\u6c41\uff0c\u672c\u8282\u540e\u9762\u4f1a\u67f3\u6697\u82b1\u660e\u7684\u3002 \u6b63\u5219\u7b26\u53f7 \u63cf\u8ff0 \u5339\u914d\u81ea\u5df1\u65f6 \\ \u8f6c\u4e49\u5b57\u7b26\u3002\u4f8b\u5982\uff0c 'n' \u5339\u914d\u5b57\u7b26 'n'\u3002 '\\n' ( ) \u6807\u8bb0\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \\( \\) . \u5339\u914d\u9664\u6362\u884c\u7b26 \\n \u4e4b\u5916\u7684\u4efb\u4f55\u5355\u5b57\u7b26\u3002 \\. | |\u5de6\u53f3\u4e24\u4fa7\u5747\u53ef\u53c2\u4e0e\u5339\u914d \\d \u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u4e2a\u6570\u5b57 a-zA-Z \u5339\u914d\u5168\u90e8\u82f1\u6587\u5b57\u7b26 0-9 \u5339\u914d\u5168\u90e8\u6570\u5b57 \\s \u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684 \\n , \\t , \u7a7a\u683c [] \u4e2d\u62ec\u53f7\u5185\u4efb\u610f\u6b63\u5219\u7b26\u53f7\u5747\u53ef\u53c2\u4e0e\u5339\u914d \\[ \\] ^ \u5f53\u5728\u65b9\u62ec\u53f7\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\uff0c^\u5bf9\u5176\u540e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u4e86\u53cd\u4e49\u8868\u8fbe\u3002 \\^ 1.2 \u9650\u5b9a\u5b57\u7b26 \u63d0\u524d\u9884\u8b66\uff0c\u542c\u4e0d\u61c2\u4e0d\u8981\u7ede\u5c3d\u8111\u6c41\uff0c\u672c\u8282\u540e\u9762\u4f1a\u67f3\u6697\u82b1\u660e\u7684 \u6b63\u5219\u7b26\u53f7 \u63cf\u8ff0 \u5339\u914d\u81ea\u5df1\u65f6 * \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u591a\u6b21\u3002 \\* ? \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u4e00\u6b21 \\? + \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u4e00\u6b21\u6216\u591a\u6b21\u3002 \\+ {m} n \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u5339\u914d\u786e\u5b9a\u7684 m \u6b21\u3002 {m,} m \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u81f3\u5c11\u5339\u914dm \u6b21\u3002 {m, n} m \u548c n \u5747\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u5176\u4e2dm <= n\u3002\u6700\u5c11\u5339\u914d m \u6b21\u4e14\u6700\u591a\u5339\u914d n \u6b21\u3002 1.3 \u5b9a\u4f4d\u5b57\u7b26 \u9884\u8b66\uff0c\u542c\u4e0d\u61c2\u4e0d\u8981\u7ede\u5c3d\u8111\u6c41\uff0c\u672c\u8282\u540e\u9762\u4f1a\u67f3\u6697\u82b1\u660e\u7684 \u6b63\u5219\u7b26\u53f7 \u63cf\u8ff0 \u5339\u914d\u81ea\u5df1\u65f6 ^ \u5339\u914d\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002 \\^ $ \u5339\u914d\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u4f4d\u7f6e \\$ \\b \u5339\u914d\u4e00\u4e2a\u5355\u8bcd\u8fb9\u754c\uff0c\u5373\u5b57\u4e0e\u7a7a\u683c\u95f4\u7684\u4f4d\u7f6e \\B \u975e\u5355\u8bcd\u8fb9\u754c\u5339\u914d \u4e8c\u3001re\u5e93\u5e38\u7528\u65b9\u6cd5 \u81f3\u6697\u65f6\u523b\u5df2\u8fc7\uff0c\u5149\u660e\u5373\u5c06\u5230\u6765 re\u5e93\u5e38\u7528\u51fd\u6570 \u4f5c\u7528 re.findall(pattern, string) \u6839\u636epattern\u8fd4\u56de\u5339\u914d\u7ed3\u679c\uff08\u5217\u8868\uff09 | re.split(pattern, string) |\u4f7f\u7528pattern\u5206\u5272string\uff0c\u8fd4\u56de\u5217\u8868 | re.sub(pattern, repl, string) |\u4f7f\u7528repl\u66ff\u6362string\u4e2d\u7684pattern| \u4e09\u3001\u53ea\u9700\u8981\u638c\u63e1 \u4e07\u80fd\u7684\u767e\u5ea6\u8c37\u6b4c+\u4f60\u7684\u5c1d\u8bd5\uff0c\u6bd4\u4ec0\u4e48\u90fd\u5f3a\u5927 \u641c\u7d22\u5f15\u64ce\u68c0\u7d22\u5230\u81ea\u5df1\u9700\u8981\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u6700\u7b80\u5355\u6700\u597d\u7528\u8868\u8fbe\u5f0f (.*?) \u5728 \u6b63\u5219\u8868\u8fbe\u5f0f\u6d4b\u8bd5\u7f51\u7ad9 \u9a8c\u8bc1\u81ea\u5df1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f 3.1 \u68c0\u7d22\u627e\u5230\u81ea\u5df1\u9700\u8981\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u6bd4\u5982\u6211\u53ea\u9700\u8981\u4e2d\u6587\uff0c\u5176\u4f59\u5b57\u7b26\u7edf\u7edf\u4e0d\u8981\u3002 \u6211\u4f1a\u5728\u767e\u5ea6\u641c \u4e2d\u6587\u6b63\u5219\u8868\u8fbe\u5f0f \u53d1\u73b0\u5f88\u591a\u7f51\u9875\u4e2d\u7f51\u53cb\u63d0\u5230 [\\u4e00-\\u9fa5] \uff0c\u4e8e\u662f import re pattern = '[\\u4e00-\\u9fa5]+' string = \"\"\"Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74\u3002\\ \u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u3001\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u3001\u6570\u636e\u91c7\u96c6\u3001\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df\u3002\\ \u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002\"\"\" chinese_words = re.findall(pattern, string) chinese_text = ''.join(chinese_words) chinese_text '\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u8bde\u751f\u4e8e\u5e74\u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u6570\u636e\u91c7\u96c6\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u7684\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\u6211\u7528' 3.2 \u6700\u7b80\u5355\u6700\u597d\u7528\u8868\u8fbe\u5f0f (.*?) (.*?) \u7279\u522b\u597d\u7528\uff0cta\u7684\u6697\u53f7\u53ca\u4f7f\u7528\u53e3\u8bc0\u4e00\u5b9a\u8981\u80cc\u8fc7 pattern\u8bbe\u8ba1\u6b65\u9aa4\uff1a \u6b63\u5219\u7b26\u53f7 \u7ec4\u6210 \u6b63\u5219\u8868\u8fbe\u5f0f \uff0c\u7528\u4e8e \u5339\u914d \u9700\u8981\u7684\u5b57\u7b26\u3002 \u627e\u5230\u91cd\u590d\u7684\u4e00\u81f4\u7684\u89c4\u5f8b \u590d\u5236\u7c98\u8d34\u5230pattern\u4e2d \u6263\u6389 \u60f3\u8981\u7684\u6570\u636e \u66ff\u6362\u4e3a (.*?) \u6216\u8005 \u76f8\u5e94\u7684\u6b63\u5219\u7b26\u53f7\u8868\u8fbe\u5f0f* \u6bd4\u5982\u73b0\u5728\u9700\u8981\u5feb\u901f\u6316\u6398\u51faintros\u4e2d\u7684\u59d3\u540d\u3001\u7c4d\u8d2f\u548c\u5e74\u9f84 import re pattern = '\u6211\u53eb(.*?)\uff0c\u6765\u81ea(.*?)\uff0c\u4eca\u5e74(.*?)\u5c81\u3002' intros = ['\u6211\u53eb\u5f20\u4e09\uff0c\u6765\u81ea\u5c71\u4e1c\uff0c\u4eca\u5e7425\u5c81\u3002', '\u6211\u53eb\u674e\u56db\uff0c\u6765\u81ea\u6cb3\u5317\uff0c\u4eca\u5e7428\u5c81\u3002', '\u6211\u53eb\u738b\u4e94\uff0c\u6765\u81ea\u6cb3\u5357\uff0c\u4eca\u5e7424\u5c81\u3002'] for intro in intros: info = re.findall(pattern, intro) print(info) [('\u5f20\u4e09', '\u5c71\u4e1c', '25')] [('\u674e\u56db', '\u6cb3\u5317', '28')] [('\u738b\u4e94', '\u6cb3\u5357', '24')] \u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662fpattern\u4e2d\u7684(.*?)\u5de6\u53f3\u4e24\u4fa7\u5fc5\u987b\u6709\u5b57\u7b26\uff0c\u5426\u5219\u5339\u914d\u5931\u8d25\u3002 import re pattern = '(.*?)\uff0c\u6765\u81ea(.*?)\uff0c\u4eca\u5e74(.*?)' intros = ['\u6211\u53eb\u5f20\u4e09\uff0c\u6765\u81ea\u5c71\u4e1c\uff0c\u4eca\u5e7425\u5c81\u3002', '\u6211\u53eb\u674e\u56db\uff0c\u6765\u81ea\u6cb3\u5317\uff0c\u4eca\u5e7428\u5c81\u3002', '\u6211\u53eb\u738b\u4e94\uff0c\u6765\u81ea\u6cb3\u5357\uff0c\u4eca\u5e7424\u5c81\u3002'] for intro in intros: info = re.findall(pattern, intro) print(info) [('\u6211\u53eb\u5f20\u4e09', '\u5c71\u4e1c', '')] [('\u6211\u53eb\u674e\u56db', '\u6cb3\u5317', '')] [('\u6211\u53eb\u738b\u4e94', '\u6cb3\u5357', '')] \u7531\u4e8e '(.*?)\uff0c\u6765\u81ea(.*?)\uff0c\u4eca\u5e74(.*?)' \u4e2d\u6700\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u7684 (.*?) \u6ca1\u6709\u88ab\u5176\u4ed6\u5b57\u7b26\u5de6\u53f3\u5305\u88f9\uff0c\u5bfc\u81f4\u5339\u914d\u59d3\u540d\u548c\u5e74\u9f84\u5931\u8d25\u3002 import re pattern = '\u53eb(.*?)\uff0c\u6765\u81ea(.*?)\uff0c\u4eca\u5e74(.*?)\u5c81' intros = ['\u6211\u53eb\u5f20\u4e09\uff0c\u6765\u81ea\u5c71\u4e1c\uff0c\u4eca\u5e7425\u5c81\u3002', '\u6211\u53eb\u674e\u56db\uff0c\u6765\u81ea\u6cb3\u5317\uff0c\u4eca\u5e7428\u5c81\u3002', '\u6211\u53eb\u738b\u4e94\uff0c\u6765\u81ea\u6cb3\u5357\uff0c\u4eca\u5e7424\u5c81\u3002'] for intro in intros: info = re.findall(pattern, intro) print(info) [('\u5f20\u4e09', '\u5c71\u4e1c', '25')] [('\u674e\u56db', '\u6cb3\u5317', '28')] [('\u738b\u4e94', '\u6cb3\u5357', '24')] \u56db\u3001\u6848\u4f8b 4.1 \u627e\u51fa\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u5e74\u4efd import re pattern = '\\d{4}' string = \"\"\"Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74\u3002\\ \u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u3001\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u3001\u6570\u636e\u91c7\u96c6\u3001\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df\u3002\\ \u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002\"\"\" re.findall(pattern, string) ['1991'] 4.2 re.split(pattern, string) \u65ad\u53e5 pattern = '\uff1b|\u3002' string = \"\"\"Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74\uff1b\\ \u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u3001\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u3001\u6570\u636e\u91c7\u96c6\u3001\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df\u3002\\ \u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002\"\"\" res = re.split(pattern, string) res = [r for r in res if r] res ['Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74', '\u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u3001\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u3001\u6570\u636e\u91c7\u96c6\u3001\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df', '\u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python'] 4.3 re.sub(pattern, repl, string) \u5c06\u6570\u5b57\u66ff\u6362\u4e3aNUM pattern = '\\d+' repl = 'NUM' string = \"\"\"Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74\u3002\\ \u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002\"\"\" re.sub(pattern, repl, string) 'Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8eNUM\u5e74\u3002\u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u7684NUM%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002' 4.4 . \u7edf\u4e00\u8868\u8fbe \u5c06\u6307\u4ee3\u540c\u4e00\u4e2a\u4e3b\u4f53\u7684\u4e0d\u540c\u8868\u8fbe\u8bcd\u8bed\u7edf\u4e00\u4e3a\u540c\u4e00\u4e2a\u8bcd text = '\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u56fd\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u56fd\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u96c6\u56e2\u3002' pattern = '\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8|\u4e2d\u56fd\u4e2d\u94c1' repl = '\u4e2d\u94c1' re.sub(pattern, repl, text) '\u4e2d\u94c1\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u56fd\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u96c6\u56e2\u3002' text = '\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u56fd\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u56fd\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u96c6\u56e2\u3002' pattern = '[\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8|\u4e2d\u56fd\u4e2d\u94c1]+' repl = '\u4e2d\u94c1' re.sub(pattern, repl, text) '\u4e2d\u94c1\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u94c1\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u4e2d\u94c1\u3002' 4.5 \u5206\u5272\u6587\u672c\u6570\u636e\u7684\u7ae0\u8282 \u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u96f6\u767e text = \"\"\" \u7b2c\u4e00\u7bc7 Python\u7b80\u4ecb \u7b2c\u4e8c\u7bc7 Python\u5165\u95e8\u8bed\u6cd5 \u7b2c\u4e09\u7bc7 Python\u7f51\u7edc\u722c\u866b \u7b2c\u56db\u7bc7 \u6587\u672c\u6570\u636e\u7f16\u7801 \u7b2c\u4e94\u7bc7 \u6570\u636e\u5206\u6790 \u7b2c\u516d\u7bc7 \u53ef\u89c6\u5316\"\"\" pattern = '\u7b2c[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u96f6\u767e]+\u7bc7' res = re.split(pattern, text) res = [r.replace(' ', '') for r in res if ' '!=r] res ['Python\u7b80\u4ecb', 'Python\u5165\u95e8\u8bed\u6cd5', 'Python\u7f51\u7edc\u722c\u866b', '\u6587\u672c\u6570\u636e\u7f16\u7801', '\u6570\u636e\u5206\u6790', '\u53ef\u89c6\u5316'] 4.6 \u62bd\u53d6\u51fa\u6570\u5b57 \u6bd4\u5982\u65e5\u671f\u6570\u636e text = '\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u56fd\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u56fd\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u96c6\u56e2\u3002' pattern = '\\d+' '-'.join(re.findall(pattern, text)) '1950-3'","title":"\u6b63\u5219\u8868\u8fbe\u5f0fre\u5e93"},{"location":"PythonBasic/regex/#_1","text":"\u6309\u7167\u7b26\u53f7\u7684\u529f\u80fd\uff0c\u6211\u5c06\u5176\u5206\u4e3a\u4e09\u7c7b\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8868\u8fbe\u5f0f\u90fd\u662f\u7531\u8fd9\u4e09\u79cd\u7b26\u53f7\u7ec4\u6210\u7684\u3002","title":"\u4e00\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u7b26\u53f7"},{"location":"PythonBasic/regex/#11","text":"\u9884\u8b66\uff0c\u542c\u4e0d\u61c2\u770b\u4e0d\u61c2\uff0c\u90fd\u4e0d\u8981\u7d27\u7684\u3002\u4e0d\u8981\u7ede\u5c3d\u8111\u6c41\uff0c\u672c\u8282\u540e\u9762\u4f1a\u67f3\u6697\u82b1\u660e\u7684\u3002 \u6b63\u5219\u7b26\u53f7 \u63cf\u8ff0 \u5339\u914d\u81ea\u5df1\u65f6 \\ \u8f6c\u4e49\u5b57\u7b26\u3002\u4f8b\u5982\uff0c 'n' \u5339\u914d\u5b57\u7b26 'n'\u3002 '\\n' ( ) \u6807\u8bb0\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \\( \\) . \u5339\u914d\u9664\u6362\u884c\u7b26 \\n \u4e4b\u5916\u7684\u4efb\u4f55\u5355\u5b57\u7b26\u3002 \\. | |\u5de6\u53f3\u4e24\u4fa7\u5747\u53ef\u53c2\u4e0e\u5339\u914d \\d \u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u4e2a\u6570\u5b57 a-zA-Z \u5339\u914d\u5168\u90e8\u82f1\u6587\u5b57\u7b26 0-9 \u5339\u914d\u5168\u90e8\u6570\u5b57 \\s \u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684 \\n , \\t , \u7a7a\u683c [] \u4e2d\u62ec\u53f7\u5185\u4efb\u610f\u6b63\u5219\u7b26\u53f7\u5747\u53ef\u53c2\u4e0e\u5339\u914d \\[ \\] ^ \u5f53\u5728\u65b9\u62ec\u53f7\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\uff0c^\u5bf9\u5176\u540e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u4e86\u53cd\u4e49\u8868\u8fbe\u3002 \\^","title":"1.1 \u6b63\u5219\u5b57\u7b26"},{"location":"PythonBasic/regex/#12","text":"\u63d0\u524d\u9884\u8b66\uff0c\u542c\u4e0d\u61c2\u4e0d\u8981\u7ede\u5c3d\u8111\u6c41\uff0c\u672c\u8282\u540e\u9762\u4f1a\u67f3\u6697\u82b1\u660e\u7684 \u6b63\u5219\u7b26\u53f7 \u63cf\u8ff0 \u5339\u914d\u81ea\u5df1\u65f6 * \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u591a\u6b21\u3002 \\* ? \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u96f6\u6b21\u6216\u4e00\u6b21 \\? + \u5339\u914d\u524d\u9762\u7684\u5b50\u8868\u8fbe\u5f0f\u4e00\u6b21\u6216\u591a\u6b21\u3002 \\+ {m} n \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u5339\u914d\u786e\u5b9a\u7684 m \u6b21\u3002 {m,} m \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u81f3\u5c11\u5339\u914dm \u6b21\u3002 {m, n} m \u548c n \u5747\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u5176\u4e2dm <= n\u3002\u6700\u5c11\u5339\u914d m \u6b21\u4e14\u6700\u591a\u5339\u914d n \u6b21\u3002","title":"1.2 \u9650\u5b9a\u5b57\u7b26"},{"location":"PythonBasic/regex/#13","text":"\u9884\u8b66\uff0c\u542c\u4e0d\u61c2\u4e0d\u8981\u7ede\u5c3d\u8111\u6c41\uff0c\u672c\u8282\u540e\u9762\u4f1a\u67f3\u6697\u82b1\u660e\u7684 \u6b63\u5219\u7b26\u53f7 \u63cf\u8ff0 \u5339\u914d\u81ea\u5df1\u65f6 ^ \u5339\u914d\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002 \\^ $ \u5339\u914d\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u4f4d\u7f6e \\$ \\b \u5339\u914d\u4e00\u4e2a\u5355\u8bcd\u8fb9\u754c\uff0c\u5373\u5b57\u4e0e\u7a7a\u683c\u95f4\u7684\u4f4d\u7f6e \\B \u975e\u5355\u8bcd\u8fb9\u754c\u5339\u914d","title":"1.3 \u5b9a\u4f4d\u5b57\u7b26"},{"location":"PythonBasic/regex/#re","text":"\u81f3\u6697\u65f6\u523b\u5df2\u8fc7\uff0c\u5149\u660e\u5373\u5c06\u5230\u6765 re\u5e93\u5e38\u7528\u51fd\u6570 \u4f5c\u7528 re.findall(pattern, string) \u6839\u636epattern\u8fd4\u56de\u5339\u914d\u7ed3\u679c\uff08\u5217\u8868\uff09 | re.split(pattern, string) |\u4f7f\u7528pattern\u5206\u5272string\uff0c\u8fd4\u56de\u5217\u8868 | re.sub(pattern, repl, string) |\u4f7f\u7528repl\u66ff\u6362string\u4e2d\u7684pattern|","title":"\u4e8c\u3001re\u5e93\u5e38\u7528\u65b9\u6cd5"},{"location":"PythonBasic/regex/#_2","text":"\u4e07\u80fd\u7684\u767e\u5ea6\u8c37\u6b4c+\u4f60\u7684\u5c1d\u8bd5\uff0c\u6bd4\u4ec0\u4e48\u90fd\u5f3a\u5927 \u641c\u7d22\u5f15\u64ce\u68c0\u7d22\u5230\u81ea\u5df1\u9700\u8981\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u6700\u7b80\u5355\u6700\u597d\u7528\u8868\u8fbe\u5f0f (.*?) \u5728 \u6b63\u5219\u8868\u8fbe\u5f0f\u6d4b\u8bd5\u7f51\u7ad9 \u9a8c\u8bc1\u81ea\u5df1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f","title":"\u4e09\u3001\u53ea\u9700\u8981\u638c\u63e1"},{"location":"PythonBasic/regex/#31","text":"\u6bd4\u5982\u6211\u53ea\u9700\u8981\u4e2d\u6587\uff0c\u5176\u4f59\u5b57\u7b26\u7edf\u7edf\u4e0d\u8981\u3002 \u6211\u4f1a\u5728\u767e\u5ea6\u641c \u4e2d\u6587\u6b63\u5219\u8868\u8fbe\u5f0f \u53d1\u73b0\u5f88\u591a\u7f51\u9875\u4e2d\u7f51\u53cb\u63d0\u5230 [\\u4e00-\\u9fa5] \uff0c\u4e8e\u662f import re pattern = '[\\u4e00-\\u9fa5]+' string = \"\"\"Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74\u3002\\ \u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u3001\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u3001\u6570\u636e\u91c7\u96c6\u3001\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df\u3002\\ \u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002\"\"\" chinese_words = re.findall(pattern, string) chinese_text = ''.join(chinese_words) chinese_text '\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u8bde\u751f\u4e8e\u5e74\u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u6570\u636e\u91c7\u96c6\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u7684\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\u6211\u7528'","title":"3.1 \u68c0\u7d22\u627e\u5230\u81ea\u5df1\u9700\u8981\u7684\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"PythonBasic/regex/#32","text":"(.*?) \u7279\u522b\u597d\u7528\uff0cta\u7684\u6697\u53f7\u53ca\u4f7f\u7528\u53e3\u8bc0\u4e00\u5b9a\u8981\u80cc\u8fc7 pattern\u8bbe\u8ba1\u6b65\u9aa4\uff1a \u6b63\u5219\u7b26\u53f7 \u7ec4\u6210 \u6b63\u5219\u8868\u8fbe\u5f0f \uff0c\u7528\u4e8e \u5339\u914d \u9700\u8981\u7684\u5b57\u7b26\u3002 \u627e\u5230\u91cd\u590d\u7684\u4e00\u81f4\u7684\u89c4\u5f8b \u590d\u5236\u7c98\u8d34\u5230pattern\u4e2d \u6263\u6389 \u60f3\u8981\u7684\u6570\u636e \u66ff\u6362\u4e3a (.*?) \u6216\u8005 \u76f8\u5e94\u7684\u6b63\u5219\u7b26\u53f7\u8868\u8fbe\u5f0f* \u6bd4\u5982\u73b0\u5728\u9700\u8981\u5feb\u901f\u6316\u6398\u51faintros\u4e2d\u7684\u59d3\u540d\u3001\u7c4d\u8d2f\u548c\u5e74\u9f84 import re pattern = '\u6211\u53eb(.*?)\uff0c\u6765\u81ea(.*?)\uff0c\u4eca\u5e74(.*?)\u5c81\u3002' intros = ['\u6211\u53eb\u5f20\u4e09\uff0c\u6765\u81ea\u5c71\u4e1c\uff0c\u4eca\u5e7425\u5c81\u3002', '\u6211\u53eb\u674e\u56db\uff0c\u6765\u81ea\u6cb3\u5317\uff0c\u4eca\u5e7428\u5c81\u3002', '\u6211\u53eb\u738b\u4e94\uff0c\u6765\u81ea\u6cb3\u5357\uff0c\u4eca\u5e7424\u5c81\u3002'] for intro in intros: info = re.findall(pattern, intro) print(info) [('\u5f20\u4e09', '\u5c71\u4e1c', '25')] [('\u674e\u56db', '\u6cb3\u5317', '28')] [('\u738b\u4e94', '\u6cb3\u5357', '24')] \u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662fpattern\u4e2d\u7684(.*?)\u5de6\u53f3\u4e24\u4fa7\u5fc5\u987b\u6709\u5b57\u7b26\uff0c\u5426\u5219\u5339\u914d\u5931\u8d25\u3002 import re pattern = '(.*?)\uff0c\u6765\u81ea(.*?)\uff0c\u4eca\u5e74(.*?)' intros = ['\u6211\u53eb\u5f20\u4e09\uff0c\u6765\u81ea\u5c71\u4e1c\uff0c\u4eca\u5e7425\u5c81\u3002', '\u6211\u53eb\u674e\u56db\uff0c\u6765\u81ea\u6cb3\u5317\uff0c\u4eca\u5e7428\u5c81\u3002', '\u6211\u53eb\u738b\u4e94\uff0c\u6765\u81ea\u6cb3\u5357\uff0c\u4eca\u5e7424\u5c81\u3002'] for intro in intros: info = re.findall(pattern, intro) print(info) [('\u6211\u53eb\u5f20\u4e09', '\u5c71\u4e1c', '')] [('\u6211\u53eb\u674e\u56db', '\u6cb3\u5317', '')] [('\u6211\u53eb\u738b\u4e94', '\u6cb3\u5357', '')] \u7531\u4e8e '(.*?)\uff0c\u6765\u81ea(.*?)\uff0c\u4eca\u5e74(.*?)' \u4e2d\u6700\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u7684 (.*?) \u6ca1\u6709\u88ab\u5176\u4ed6\u5b57\u7b26\u5de6\u53f3\u5305\u88f9\uff0c\u5bfc\u81f4\u5339\u914d\u59d3\u540d\u548c\u5e74\u9f84\u5931\u8d25\u3002 import re pattern = '\u53eb(.*?)\uff0c\u6765\u81ea(.*?)\uff0c\u4eca\u5e74(.*?)\u5c81' intros = ['\u6211\u53eb\u5f20\u4e09\uff0c\u6765\u81ea\u5c71\u4e1c\uff0c\u4eca\u5e7425\u5c81\u3002', '\u6211\u53eb\u674e\u56db\uff0c\u6765\u81ea\u6cb3\u5317\uff0c\u4eca\u5e7428\u5c81\u3002', '\u6211\u53eb\u738b\u4e94\uff0c\u6765\u81ea\u6cb3\u5357\uff0c\u4eca\u5e7424\u5c81\u3002'] for intro in intros: info = re.findall(pattern, intro) print(info) [('\u5f20\u4e09', '\u5c71\u4e1c', '25')] [('\u674e\u56db', '\u6cb3\u5317', '28')] [('\u738b\u4e94', '\u6cb3\u5357', '24')]","title":"3.2 \u6700\u7b80\u5355\u6700\u597d\u7528\u8868\u8fbe\u5f0f(.*?)"},{"location":"PythonBasic/regex/#_3","text":"","title":"\u56db\u3001\u6848\u4f8b"},{"location":"PythonBasic/regex/#41","text":"import re pattern = '\\d{4}' string = \"\"\"Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74\u3002\\ \u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u3001\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u3001\u6570\u636e\u91c7\u96c6\u3001\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df\u3002\\ \u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002\"\"\" re.findall(pattern, string) ['1991']","title":"4.1 \u627e\u51fa\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u5e74\u4efd"},{"location":"PythonBasic/regex/#42-resplitpattern-string","text":"\u65ad\u53e5 pattern = '\uff1b|\u3002' string = \"\"\"Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74\uff1b\\ \u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u3001\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u3001\u6570\u636e\u91c7\u96c6\u3001\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df\u3002\\ \u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002\"\"\" res = re.split(pattern, string) res = [r for r in res if r] res ['Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74', '\u76ee\u524d\u4ee5\u5e7f\u6cdb\u5e94\u7528\u5728\u7f51\u7ad9\u5f00\u53d1\u3001\u6e38\u620f\u8f6f\u4ef6\u5f00\u53d1\u3001\u6570\u636e\u91c7\u96c6\u3001\u673a\u5668\u5b66\u4e60\u7b49\u591a\u4e2a\u9886\u57df', '\u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python']","title":"4.2 re.split(pattern, string)"},{"location":"PythonBasic/regex/#43-resubpattern-repl-string","text":"\u5c06\u6570\u5b57\u66ff\u6362\u4e3aNUM pattern = '\\d+' repl = 'NUM' string = \"\"\"Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8e1991\u5e74\u3002\\ \u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u768420%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002\"\"\" re.sub(pattern, repl, string) 'Python\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bde\u751f\u4e8eNUM\u5e74\u3002\u4e00\u822c\u60c5\u51b5\u4e0bPython\u662fJava\u7684NUM%\uff0c\u6240\u4ee5\u8bf4\u4eba\u751f\u82e6\u77ed\uff0c\u6211\u7528Python\u3002'","title":"4.3 re.sub(pattern, repl, string)"},{"location":"PythonBasic/regex/#44","text":"\u5c06\u6307\u4ee3\u540c\u4e00\u4e2a\u4e3b\u4f53\u7684\u4e0d\u540c\u8868\u8fbe\u8bcd\u8bed\u7edf\u4e00\u4e3a\u540c\u4e00\u4e2a\u8bcd text = '\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u56fd\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u56fd\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u96c6\u56e2\u3002' pattern = '\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8|\u4e2d\u56fd\u4e2d\u94c1' repl = '\u4e2d\u94c1' re.sub(pattern, repl, text) '\u4e2d\u94c1\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u56fd\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u96c6\u56e2\u3002' text = '\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u56fd\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u56fd\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u96c6\u56e2\u3002' pattern = '[\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8|\u4e2d\u56fd\u4e2d\u94c1]+' repl = '\u4e2d\u94c1' re.sub(pattern, repl, text) '\u4e2d\u94c1\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u94c1\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u4e2d\u94c1\u3002'","title":"4.4 . \u7edf\u4e00\u8868\u8fbe"},{"location":"PythonBasic/regex/#45","text":"\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u96f6\u767e text = \"\"\" \u7b2c\u4e00\u7bc7 Python\u7b80\u4ecb \u7b2c\u4e8c\u7bc7 Python\u5165\u95e8\u8bed\u6cd5 \u7b2c\u4e09\u7bc7 Python\u7f51\u7edc\u722c\u866b \u7b2c\u56db\u7bc7 \u6587\u672c\u6570\u636e\u7f16\u7801 \u7b2c\u4e94\u7bc7 \u6570\u636e\u5206\u6790 \u7b2c\u516d\u7bc7 \u53ef\u89c6\u5316\"\"\" pattern = '\u7b2c[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u96f6\u767e]+\u7bc7' res = re.split(pattern, text) res = [r.replace(' ', '') for r in res if ' '!=r] res ['Python\u7b80\u4ecb', 'Python\u5165\u95e8\u8bed\u6cd5', 'Python\u7f51\u7edc\u722c\u866b', '\u6587\u672c\u6570\u636e\u7f16\u7801', '\u6570\u636e\u5206\u6790', '\u53ef\u89c6\u5316']","title":"4.5 \u5206\u5272\u6587\u672c\u6570\u636e\u7684\u7ae0\u8282"},{"location":"PythonBasic/regex/#46","text":"\u6bd4\u5982\u65e5\u671f\u6570\u636e text = '\u4e2d\u56fd\u94c1\u8def\u5de5\u7a0b\u96c6\u56e2\u6709\u9650\u516c\u53f8\u6210\u7acb\u4e8e1950\u5e743\u6708\uff0c\u603b\u90e8\u4f4d\u4e8e\u5317\u4eac\u3002\u76ee\u524d\u4e2d\u56fd\u4e2d\u94c1\u5df2\u7ecf\u53d1\u5c55\u6210\u4e2d\u56fd\u548c\u4e9a\u6d32\u6700\u5927\u7684\u591a\u529f\u80fd\u7efc\u5408\u578b\u5efa\u8bbe\u96c6\u56e2\u3002' pattern = '\\d+' '-'.join(re.findall(pattern, text)) '1950-3'","title":"4.6 \u62bd\u53d6\u51fa\u6570\u5b57"},{"location":"PythonBasic/string/","text":"\u7f51\u7edc\u722c\u866b\u4e0e\u6587\u672c\u5206\u6790\u5b9e\u9645\u4e0a\u4e3b\u8981\u662f\u5bf9\u5b57\u7b26\u4e32\u505a\u7684\u5904\u7406\uff0c\u4e00\u5b9a\u8981\u719f\u6089\u5b57\u7b26\u4e32\u54e6 \u5b57\u7b26\u4e32string \u5b9a\u4e49 \u5b57\u7b26\u4e32\u662f\u4ee5 \u5355\u5f15\u53f7 \u6216 \u53cc\u5f15\u53f7 \u6216 \u4e09\u5f15\u53f7 \u62ec\u8d77\u6765\u7684\u4efb\u610f\u6587\u672c\uff0c\u5982 'abc' \"abc\" '''abc''' \"\"\"abc\"\"\" a = 'abc' a 'abc' \"abc\" 'abc' '''abc''' 'abc' \"\"\"abc\"\"\" 'abc' print('abc') print(\"abc\") print('''abc''') print(\"\"\"abc\"\"\") abc abc abc abc print('abc') print('efg') abc efg \u6ce8\u610f : \u8fd9\u91cc\u6240\u8bf4\u7684\u5f15\u53f7\u90fd\u662f\u82f1\u6587\u5f15\u53f7 '' \u6216 \"\" \u672c\u8eab\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 'abc' \u53ea\u6709a\uff0cb\uff0cc\u8fd93\u4e2a\u5b57\u7b26\u3002 notebook\u4e2d\u53ea\u663e\u793a\u6700\u540e\u4e00\u4e2a\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u4e86\u4e24\u4e2aprint Tips: \u8fd9\u91cc\u6240\u8bf4\u7684\u5f15\u53f7\u90fd\u662f\u82f1\u6587\u5f15\u53f7 '' \u6216 \"\" \u672c\u8eab\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 'abc' \u53ea\u6709a\uff0cb\uff0cc\u8fd93\u4e2a\u5b57\u7b26\u3002 notebook\u4e2d\u53ea\u663e\u793a\u6700\u540e\u4e00\u4e2a\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u4e86\u4e24\u4e2aprint \u62fc\u63a5+ \u6309\u987a\u5e8f\u62fc\u63a5 a = 'P' b = 'ython' print(a+b) print(b+a) Python ythonP a = 'P' print(a+b) print(b+a) \u5207\u7247 \u5207\u7247\u5c31\u50cf\u5207\u7cd5\uff0c\u628a\u81ea\u5df1\u60f3\u8981\u7684\u90a3\u5757\u5207\u4e0b\u6765 name = 'My Name is Mike' name[0] 'M' name[-15] 'M' name[3:6] 'Nam' name[-12:-9] 'Nam' name[0:2] 'My' name[:2] 'My' name[5:] 'me is Mike' name[-7:] 'is Mike' \u5207\u7247\u603b\u7ed3 \u5207\u7247\u8868\u8fbe\u5f0f \u89e3\u8bfb \u4ece\u5de6\u5f80\u53f3 \u7d22\u5f15\u503c\u4ece0\u5f00\u59cb\uff0c0\u8868\u793a'\u7b2c\u4e00\u4e2a' \u4ece\u53f3\u5411\u5de6 -1\u8868\u793a\u5012\u6570\u7b2c\u4e00\u4e2a\uff0c-2\u8868\u793a\u5012\u6570\u7b2c\u4e8c\u4e2a a:b \u9009\u53d6\u5217\u8868\u7d22\u5f15\u4f4d\u7f6e\u4e3a a\uff0ca+1...b-2, b-1 \u7684\u503c a: \u9009\u53d6\u5217\u8868\u4e2da\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20(\u542ba) :b \u9009\u53d6\u5217\u8868\u4e2db\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20(\u4e0d\u542bb) \u5b57\u7b26\u4e32\u5e38\u7528\u65b9\u6cd5 \u518d\u6b21\u5f3a\u8c03\uff0c\u6570\u636e\u7c7b(\u578b)\u4e0e\u732a\u725b\u7f8a\u4e0d\u540c\u7684\u52a8\u7269\u7c7b\u578b\u4e00\u6837\uff0c\u90fd\u6709\u6ee1\u8db3\u4eba\u7c7b\u9700\u8981\u7684\u7279\u6b8a\u672c\u9886(\u65b9\u6cd5)\u3002\u65b9\u6cd5\u53ef\u4ee5\u7406\u89e3\u4e3a\u6570\u636e\u7c7b(\u578b)\u4e00\u79cd\u7279\u6b8a\u7684\u672c\u6027\u3001\u5c5e\u6027\u3001\u7279\u6027 \u5b57\u7b26\u4e32\u5e38\u7528\u65b9\u6cd5 \u529f\u80fd str.lower() \u53d8\u5c0f\u5199 str.upper() \u53d8\u5927\u5199 str.split(sep) \u4f7f\u7528sep\u5c06\u5b57\u7b26\u4e32\u5206\u5272\uff0c\u9ed8\u8ba4sep\u4e3a\u7a7a\u683c str.replace(old, new) \u5c06str\u4e2d\u7684old\u66ff\u6362\u4e3anew str.format() \u5411str\u4e2d\u586b\u5145\u5185\u5bb9 words = 'Python is poweful!' words.lower() 'python is poweful!' words.upper() 'PYTHON IS POWEFUL!' words 'Python is poweful!' words.split(' ') ['Python', 'is', 'poweful!'] words.replace('Python', 'Python programing language') 'Python programing language is poweful!' \u9700\u8981\u53d1\u9001\u6bcf\u4e2a\u5458\u5de5\u7684\u5de5\u8d44\u7ec4\u6210\u8be6\u60c5\u3002 \"\u5f20\u4e09,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f2310\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5\u3002\u3002\u3002\u3002\" \"\u674e\u56db,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f3456\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5\u3002\u3002\u3002\u3002\" \"\u738b\u4e94,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f2431\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5\u3002\u3002\u3002\u3002\" \u5982\u4f55\u81ea\u52a8\u5316\u81ea\u52a8\u5316\u586b\u5145? template = '{name},\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f{salary}\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5' print(template.format(name='\u5f20\u4e09', salary='2310')) print(template.format(name='\u674e\u56db', salary='3456')) print(template.format(name='\u738b\u4e94', salary='2431')) \u5f20\u4e09,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f2310\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5 \u674e\u56db,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f3456\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5 \u738b\u4e94,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f2431\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5 # \u8f6c\u4e49\u7b26\\ \u5982\u679c\u5b57\u7b26\u4e32\u5185\u90e8\u65e2\u5305\u542b \u5355\u5f15\u53f7 \u53c8\u5305\u542b \u53cc\u5f15\u53f7 \uff0c \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f print('I'm \"OK\"!') File \"<ipython-input-28-af5dc904b170>\", line 1 print('I'm \"OK\"!') ^ SyntaxError: invalid syntax # \u53ef\u4ee5\u7528 \u8f6c\u4e49\u5b57\u7b26\\ \u6765\u6807\u8bc6\uff0c\u6bd4\u5982\uff1a print('I\\'m \\\"OK\\\"!') I'm \"OK\"! \u5e38\u89c1\u7684\u8f6c\u4e49\u7b26\u8fd8\u6709 \\n \u6362\u884c \\t \u5236\u8868\u7b26 \u5b57\u7b26\\ \u672c\u8eab\u4e5f\u8981\u8f6c\u4e49\uff0c\u6240\u4ee5 \\\\ \u8868\u793a\u7684\u5b57\u7b26\u5c31\u662f \\ \u53ef\u4ee5\u8bd5\u7740\u81ea\u5df1\u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\uff0c\u770b\u770b\u4e0b\u9762\u6253\u5370\u7ed3\u679c\u662f?\uff1a print('Hello\\tWorld!') print('\u8f6c\u4e49\\n\u6362\u884c!') print('\u53cd\u659c\u6760\u7ebf\\\\') print('Hello\\tWorld!') print('Hello World!') Hello World! Hello World! print('\u8f6c\u4e49\\n\u6362\u884c!') \u8f6c\u4e49 \u6362\u884c! print('\u53cd\u659c\u6760\u7ebf\\\\') \u53cd\u659c\u6760\u7ebf\\ r \u5982\u679c\u5b57\u7b26\u4e32\u91cc\u9762\u6709\u5f88\u591a\u5b57\u7b26\u90fd\u9700\u8981\u8f6c\u4e49\uff0c\u5c31\u9700\u8981\u52a0\u5f88\u591a \\ , \u4e3a\u4e86\u7b80\u5316\uff0cPython\u8fd8\u5141\u8bb8\u7528 r'' \u8868\u793a ''\u5185\u90e8 \u7684\u5b57\u7b26\u4e32\u9ed8\u8ba4\u4e0d\u8f6c\u4e49,\u4f8b\u5982 print('\\\\\\t\\\\') print(r'\\\\\\t\\\\') print('hello world!') print('\\\\\\t\\\\') \\ \\ print(r'\\\\\\t\\\\') \\\\\\t\\\\","title":"\u5b57\u7b26\u4e32"},{"location":"PythonBasic/string/#string","text":"","title":"\u5b57\u7b26\u4e32string"},{"location":"PythonBasic/string/#_1","text":"\u5b57\u7b26\u4e32\u662f\u4ee5 \u5355\u5f15\u53f7 \u6216 \u53cc\u5f15\u53f7 \u6216 \u4e09\u5f15\u53f7 \u62ec\u8d77\u6765\u7684\u4efb\u610f\u6587\u672c\uff0c\u5982 'abc' \"abc\" '''abc''' \"\"\"abc\"\"\" a = 'abc' a 'abc' \"abc\" 'abc' '''abc''' 'abc' \"\"\"abc\"\"\" 'abc' print('abc') print(\"abc\") print('''abc''') print(\"\"\"abc\"\"\") abc abc abc abc print('abc') print('efg') abc efg \u6ce8\u610f : \u8fd9\u91cc\u6240\u8bf4\u7684\u5f15\u53f7\u90fd\u662f\u82f1\u6587\u5f15\u53f7 '' \u6216 \"\" \u672c\u8eab\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 'abc' \u53ea\u6709a\uff0cb\uff0cc\u8fd93\u4e2a\u5b57\u7b26\u3002 notebook\u4e2d\u53ea\u663e\u793a\u6700\u540e\u4e00\u4e2a\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u4e86\u4e24\u4e2aprint Tips: \u8fd9\u91cc\u6240\u8bf4\u7684\u5f15\u53f7\u90fd\u662f\u82f1\u6587\u5f15\u53f7 '' \u6216 \"\" \u672c\u8eab\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 'abc' \u53ea\u6709a\uff0cb\uff0cc\u8fd93\u4e2a\u5b57\u7b26\u3002 notebook\u4e2d\u53ea\u663e\u793a\u6700\u540e\u4e00\u4e2a\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u4e86\u4e24\u4e2aprint","title":"\u5b9a\u4e49"},{"location":"PythonBasic/string/#_2","text":"\u6309\u987a\u5e8f\u62fc\u63a5 a = 'P' b = 'ython' print(a+b) print(b+a) Python ythonP a = 'P' print(a+b) print(b+a)","title":"\u62fc\u63a5+"},{"location":"PythonBasic/string/#_3","text":"\u5207\u7247\u5c31\u50cf\u5207\u7cd5\uff0c\u628a\u81ea\u5df1\u60f3\u8981\u7684\u90a3\u5757\u5207\u4e0b\u6765 name = 'My Name is Mike' name[0] 'M' name[-15] 'M' name[3:6] 'Nam' name[-12:-9] 'Nam' name[0:2] 'My' name[:2] 'My' name[5:] 'me is Mike' name[-7:] 'is Mike'","title":"\u5207\u7247"},{"location":"PythonBasic/string/#_4","text":"\u5207\u7247\u8868\u8fbe\u5f0f \u89e3\u8bfb \u4ece\u5de6\u5f80\u53f3 \u7d22\u5f15\u503c\u4ece0\u5f00\u59cb\uff0c0\u8868\u793a'\u7b2c\u4e00\u4e2a' \u4ece\u53f3\u5411\u5de6 -1\u8868\u793a\u5012\u6570\u7b2c\u4e00\u4e2a\uff0c-2\u8868\u793a\u5012\u6570\u7b2c\u4e8c\u4e2a a:b \u9009\u53d6\u5217\u8868\u7d22\u5f15\u4f4d\u7f6e\u4e3a a\uff0ca+1...b-2, b-1 \u7684\u503c a: \u9009\u53d6\u5217\u8868\u4e2da\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20(\u542ba) :b \u9009\u53d6\u5217\u8868\u4e2db\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20(\u4e0d\u542bb)","title":"\u5207\u7247\u603b\u7ed3"},{"location":"PythonBasic/string/#_5","text":"\u518d\u6b21\u5f3a\u8c03\uff0c\u6570\u636e\u7c7b(\u578b)\u4e0e\u732a\u725b\u7f8a\u4e0d\u540c\u7684\u52a8\u7269\u7c7b\u578b\u4e00\u6837\uff0c\u90fd\u6709\u6ee1\u8db3\u4eba\u7c7b\u9700\u8981\u7684\u7279\u6b8a\u672c\u9886(\u65b9\u6cd5)\u3002\u65b9\u6cd5\u53ef\u4ee5\u7406\u89e3\u4e3a\u6570\u636e\u7c7b(\u578b)\u4e00\u79cd\u7279\u6b8a\u7684\u672c\u6027\u3001\u5c5e\u6027\u3001\u7279\u6027 \u5b57\u7b26\u4e32\u5e38\u7528\u65b9\u6cd5 \u529f\u80fd str.lower() \u53d8\u5c0f\u5199 str.upper() \u53d8\u5927\u5199 str.split(sep) \u4f7f\u7528sep\u5c06\u5b57\u7b26\u4e32\u5206\u5272\uff0c\u9ed8\u8ba4sep\u4e3a\u7a7a\u683c str.replace(old, new) \u5c06str\u4e2d\u7684old\u66ff\u6362\u4e3anew str.format() \u5411str\u4e2d\u586b\u5145\u5185\u5bb9 words = 'Python is poweful!' words.lower() 'python is poweful!' words.upper() 'PYTHON IS POWEFUL!' words 'Python is poweful!' words.split(' ') ['Python', 'is', 'poweful!'] words.replace('Python', 'Python programing language') 'Python programing language is poweful!' \u9700\u8981\u53d1\u9001\u6bcf\u4e2a\u5458\u5de5\u7684\u5de5\u8d44\u7ec4\u6210\u8be6\u60c5\u3002 \"\u5f20\u4e09,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f2310\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5\u3002\u3002\u3002\u3002\" \"\u674e\u56db,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f3456\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5\u3002\u3002\u3002\u3002\" \"\u738b\u4e94,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f2431\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5\u3002\u3002\u3002\u3002\" \u5982\u4f55\u81ea\u52a8\u5316\u81ea\u52a8\u5316\u586b\u5145? template = '{name},\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f{salary}\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5' print(template.format(name='\u5f20\u4e09', salary='2310')) print(template.format(name='\u674e\u56db', salary='3456')) print(template.format(name='\u738b\u4e94', salary='2431')) \u5f20\u4e09,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f2310\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5 \u674e\u56db,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f3456\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5 \u738b\u4e94,\u4f60\u8fd9\u4e2a\u6708\u7684\u5de5\u8d44\u662f2431\u5143\uff1b\u4ee5\u4e0b\u662f\u4f60\u7684\u5de5\u8d44\u8be6\u60c5 # \u8f6c\u4e49\u7b26\\ \u5982\u679c\u5b57\u7b26\u4e32\u5185\u90e8\u65e2\u5305\u542b \u5355\u5f15\u53f7 \u53c8\u5305\u542b \u53cc\u5f15\u53f7 \uff0c \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f print('I'm \"OK\"!') File \"<ipython-input-28-af5dc904b170>\", line 1 print('I'm \"OK\"!') ^ SyntaxError: invalid syntax # \u53ef\u4ee5\u7528 \u8f6c\u4e49\u5b57\u7b26\\ \u6765\u6807\u8bc6\uff0c\u6bd4\u5982\uff1a print('I\\'m \\\"OK\\\"!') I'm \"OK\"! \u5e38\u89c1\u7684\u8f6c\u4e49\u7b26\u8fd8\u6709 \\n \u6362\u884c \\t \u5236\u8868\u7b26 \u5b57\u7b26\\ \u672c\u8eab\u4e5f\u8981\u8f6c\u4e49\uff0c\u6240\u4ee5 \\\\ \u8868\u793a\u7684\u5b57\u7b26\u5c31\u662f \\ \u53ef\u4ee5\u8bd5\u7740\u81ea\u5df1\u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\uff0c\u770b\u770b\u4e0b\u9762\u6253\u5370\u7ed3\u679c\u662f?\uff1a print('Hello\\tWorld!') print('\u8f6c\u4e49\\n\u6362\u884c!') print('\u53cd\u659c\u6760\u7ebf\\\\') print('Hello\\tWorld!') print('Hello World!') Hello World! Hello World! print('\u8f6c\u4e49\\n\u6362\u884c!') \u8f6c\u4e49 \u6362\u884c! print('\u53cd\u659c\u6760\u7ebf\\\\') \u53cd\u659c\u6760\u7ebf\\","title":"\u5b57\u7b26\u4e32\u5e38\u7528\u65b9\u6cd5"},{"location":"PythonBasic/string/#r","text":"\u5982\u679c\u5b57\u7b26\u4e32\u91cc\u9762\u6709\u5f88\u591a\u5b57\u7b26\u90fd\u9700\u8981\u8f6c\u4e49\uff0c\u5c31\u9700\u8981\u52a0\u5f88\u591a \\ , \u4e3a\u4e86\u7b80\u5316\uff0cPython\u8fd8\u5141\u8bb8\u7528 r'' \u8868\u793a ''\u5185\u90e8 \u7684\u5b57\u7b26\u4e32\u9ed8\u8ba4\u4e0d\u8f6c\u4e49,\u4f8b\u5982 print('\\\\\\t\\\\') print(r'\\\\\\t\\\\') print('hello world!') print('\\\\\\t\\\\') \\ \\ print(r'\\\\\\t\\\\') \\\\\\t\\\\","title":"r"},{"location":"PythonBasic/tuplesetlist/","text":"\u5f53\u4f60\u4e0d\u77e5\u9053\u7528\u4ec0\u4e48\u6570\u636e\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u8bb0\u5f97list\uff0c\u5927\u591a\u6570\u7684\u810f\u6d3b\u7d2f\u6d3bta\u90fd\u5e2e\u4f60\u641e\u5b9a \u5217\u8868list \u5b9a\u4e49 list\u662f\u4e00\u79cd \u6709\u5e8f \u7684\u96c6\u5408,\u5185\u90e8\u53ef\u4ee5\u7531\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u6210\u7684 \u73b0\u5728\u67095\u4f4d\u5458\u5de5\u7684\u6c47\u603b\u4fe1\u606f\uff0c id \u59d3\u540d \u5e74\u9f84 \u6027\u522b \u7231\u597d 1 David 25 Male Basketball, Pingpang, Hiking 2 Mary 23 Female Reading, Movies 3 Henry 23 Male Diving, Hiking 4 Swift 21 Male Football, Music 5 Lenard 26 Male Stay at Home \u73b0\u5728\u6211\u4eec\u9700\u8981\u7528\u4e00\u79cd\u683c\u5f0f\u53bb\u7ec4\u7ec75\u4f4d\u5458\u5de5\u7684\u4fe1\u606f\uff0c\u4ee5\u5217\u8868\u4e3a\u4f8b names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ages = [25, 23, 23, 21, 26] hobbies = [['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']] print(type(names)) print(type(ages)) print(type(hobbies)) print(names) print(ages) print(hobbies) <class 'list'> <class 'list'> <class 'list'> ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] [25, 23, 23, 21, 26] [['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']] \u591a\u60f3\u4e00\u4e0b\uff1a \u7ec4\u7ec7\u6570\u636e\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff0clist\u4e5f\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u53bb\u7ec4\u7ec7\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u60f3\u4e00\u60f3\u3002 \u62fc\u63a5 a1 = ['Michael', 'Bob'] a2 = ['David', 'Lee'] print(a1 + a2) print(a2 + a1) ['Michael', 'Bob', 'David', 'Lee'] ['David', 'Lee', 'Michael', 'Bob'] \u62c6\u5305 \u6ce8\u610f\uff1a \u7b49\u53f7\u4e24\u8fb9\u957f\u5ea6\u76f8\u540c name, age = ['David', 25] print(name) print(age) David 25 \u5207\u7247 \u5217\u8868\u7684\u5207\u7247\u4e0e\u5b57\u7b26\u4e32\u7c7b\u4f3c id \u59d3\u540d \u5e74\u9f84 \u6027\u522b \u7231\u597d \u6b63\u7d22\u5f15 \u5012\u7d22\u5f15 1 David 25 Male Basketball, Pingpang, Hiking 0 -5 2 Mary 23 Female Reading, Movies 1 -4 3 Henry 23 Male Diving, Hiking 2 -3 4 Swift 21 Male Football, Music 3 -2 5 Lenard 26 Male Stay at Home 4 -1 names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] names ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] print(names[2]) print(names[-3]) Henry Henry print(names[0:3]) print(names[-5:-2]) ['David', 'Mary', 'Henry'] ['David', 'Mary', 'Henry'] print(names[2:]) print(names[-3:]) ['Henry', 'Swift', 'Lenard'] ['Henry', 'Swift', 'Lenard'] print(names[:2]) print(names[:-3]) ['David', 'Mary'] ['David', 'Mary'] \u5217\u8868\u5e38\u7528\u65b9\u6cd5 \u5e38\u7528\u65b9\u6cd5 \u529f\u80fd list.append(a) \u5411list\u4e2d\u6dfb\u52a0\u5143\u7d20a list.extend(lst) \u5411list\u4e2d\u6dfb\u52a0\u5217\u8868lst list.count(a) \u7edf\u8ba1list\u4e2da\u7684\u4e2a\u6570 names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] print(names) names.append('Mary') print(names) ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary'] names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] print(names) names.extend(['Mary']) print(names) ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary'] ages = [25, 23, 23, 21, 26] print(ages.count(23)) 2 one = ['David'] print(one[-1]) print(one[0]) David David \u5143\u7ec4tuple \u5f62\u4f3c\u5217\u8868\uff0c\u4e5f\u6709 \u5143\u7ec4\u62fc\u63a5 \u5207\u7247 \u62c6\u5305 name_list = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] name_tuple = ('David', 'Mary', 'Henry', 'Swift', 'Lenard') print(type(name_list)) print(type(name_tuple)) print(name_list) print(name_tuple) <class 'list'> <class 'tuple'> ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ('David', 'Mary', 'Henry', 'Swift', 'Lenard') print(name_list==name_tuple) False \u96c6\u5408 names2 = ['David', 'Mary', 'David', 'Swift', 'David'] print(set(names2)) {'Swift', 'Mary', 'David'} \u96c6\u5408\u7684\u65b9\u6cd5 setdata.add(ele) \u5411setdata\u4e2d\u52a0\u5165ele name_set = set(names2) print(name_set) name_set.add('William') print(name_set) {'Swift', 'Mary', 'David'} {'William', 'Swift', 'Mary', 'David'} name_set[2] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-20-98cb669cc173> in <module> ----> 1 name_set[2] TypeError: 'set' object is not subscriptable \u6ce8\u610f\uff1a \u96c6\u5408\u4e0d\u80fd\u5207\u7247","title":"\u5217\u8868\u3001\u5143\u7ec4\u3001\u96c6\u5408"},{"location":"PythonBasic/tuplesetlist/#list","text":"","title":"\u5217\u8868list"},{"location":"PythonBasic/tuplesetlist/#_1","text":"list\u662f\u4e00\u79cd \u6709\u5e8f \u7684\u96c6\u5408,\u5185\u90e8\u53ef\u4ee5\u7531\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u6210\u7684 \u73b0\u5728\u67095\u4f4d\u5458\u5de5\u7684\u6c47\u603b\u4fe1\u606f\uff0c id \u59d3\u540d \u5e74\u9f84 \u6027\u522b \u7231\u597d 1 David 25 Male Basketball, Pingpang, Hiking 2 Mary 23 Female Reading, Movies 3 Henry 23 Male Diving, Hiking 4 Swift 21 Male Football, Music 5 Lenard 26 Male Stay at Home \u73b0\u5728\u6211\u4eec\u9700\u8981\u7528\u4e00\u79cd\u683c\u5f0f\u53bb\u7ec4\u7ec75\u4f4d\u5458\u5de5\u7684\u4fe1\u606f\uff0c\u4ee5\u5217\u8868\u4e3a\u4f8b names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ages = [25, 23, 23, 21, 26] hobbies = [['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']] print(type(names)) print(type(ages)) print(type(hobbies)) print(names) print(ages) print(hobbies) <class 'list'> <class 'list'> <class 'list'> ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] [25, 23, 23, 21, 26] [['Basketball', 'Pingpang', 'Hiking'], ['Reading', 'Movies'], ['Diving', 'Hiking'], ['Football', 'Music'], ['Stay at Home']] \u591a\u60f3\u4e00\u4e0b\uff1a \u7ec4\u7ec7\u6570\u636e\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff0clist\u4e5f\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u53bb\u7ec4\u7ec7\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u60f3\u4e00\u60f3\u3002","title":"\u5b9a\u4e49"},{"location":"PythonBasic/tuplesetlist/#_2","text":"a1 = ['Michael', 'Bob'] a2 = ['David', 'Lee'] print(a1 + a2) print(a2 + a1) ['Michael', 'Bob', 'David', 'Lee'] ['David', 'Lee', 'Michael', 'Bob']","title":"\u62fc\u63a5"},{"location":"PythonBasic/tuplesetlist/#_3","text":"\u6ce8\u610f\uff1a \u7b49\u53f7\u4e24\u8fb9\u957f\u5ea6\u76f8\u540c name, age = ['David', 25] print(name) print(age) David 25","title":"\u62c6\u5305"},{"location":"PythonBasic/tuplesetlist/#_4","text":"\u5217\u8868\u7684\u5207\u7247\u4e0e\u5b57\u7b26\u4e32\u7c7b\u4f3c id \u59d3\u540d \u5e74\u9f84 \u6027\u522b \u7231\u597d \u6b63\u7d22\u5f15 \u5012\u7d22\u5f15 1 David 25 Male Basketball, Pingpang, Hiking 0 -5 2 Mary 23 Female Reading, Movies 1 -4 3 Henry 23 Male Diving, Hiking 2 -3 4 Swift 21 Male Football, Music 3 -2 5 Lenard 26 Male Stay at Home 4 -1 names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] names ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] print(names[2]) print(names[-3]) Henry Henry print(names[0:3]) print(names[-5:-2]) ['David', 'Mary', 'Henry'] ['David', 'Mary', 'Henry'] print(names[2:]) print(names[-3:]) ['Henry', 'Swift', 'Lenard'] ['Henry', 'Swift', 'Lenard'] print(names[:2]) print(names[:-3]) ['David', 'Mary'] ['David', 'Mary']","title":"\u5207\u7247"},{"location":"PythonBasic/tuplesetlist/#_5","text":"\u5e38\u7528\u65b9\u6cd5 \u529f\u80fd list.append(a) \u5411list\u4e2d\u6dfb\u52a0\u5143\u7d20a list.extend(lst) \u5411list\u4e2d\u6dfb\u52a0\u5217\u8868lst list.count(a) \u7edf\u8ba1list\u4e2da\u7684\u4e2a\u6570 names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] print(names) names.append('Mary') print(names) ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary'] names = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] print(names) names.extend(['Mary']) print(names) ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ['David', 'Mary', 'Henry', 'Swift', 'Lenard', 'Mary'] ages = [25, 23, 23, 21, 26] print(ages.count(23)) 2 one = ['David'] print(one[-1]) print(one[0]) David David","title":"\u5217\u8868\u5e38\u7528\u65b9\u6cd5"},{"location":"PythonBasic/tuplesetlist/#tuple","text":"\u5f62\u4f3c\u5217\u8868\uff0c\u4e5f\u6709 \u5143\u7ec4\u62fc\u63a5 \u5207\u7247 \u62c6\u5305 name_list = ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] name_tuple = ('David', 'Mary', 'Henry', 'Swift', 'Lenard') print(type(name_list)) print(type(name_tuple)) print(name_list) print(name_tuple) <class 'list'> <class 'tuple'> ['David', 'Mary', 'Henry', 'Swift', 'Lenard'] ('David', 'Mary', 'Henry', 'Swift', 'Lenard') print(name_list==name_tuple) False","title":"\u5143\u7ec4tuple"},{"location":"PythonBasic/tuplesetlist/#_6","text":"names2 = ['David', 'Mary', 'David', 'Swift', 'David'] print(set(names2)) {'Swift', 'Mary', 'David'}","title":"\u96c6\u5408"},{"location":"PythonBasic/tuplesetlist/#_7","text":"setdata.add(ele) \u5411setdata\u4e2d\u52a0\u5165ele name_set = set(names2) print(name_set) name_set.add('William') print(name_set) {'Swift', 'Mary', 'David'} {'William', 'Swift', 'Mary', 'David'} name_set[2] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-20-98cb669cc173> in <module> ----> 1 name_set[2] TypeError: 'set' object is not subscriptable \u6ce8\u610f\uff1a \u96c6\u5408\u4e0d\u80fd\u5207\u7247","title":"\u96c6\u5408\u7684\u65b9\u6cd5"},{"location":"PythonBasic/win/","text":"\u6ce8\u610f\uff1a Anaconda\u548cPython\u90fd\u662fpython\u3002\u4e00\u5b9a\u8981\u8bb0\u4f4f\u4e8c\u9009\u5176\u4e00\uff0c\u4e0d\u8981\u90fd\u5b89\u88c5\uff0c\u4e0d\u7136\u5728\u5b66\u4e60python\u7b2c\u4e09\u65b9\u5305\u5b89\u88c5\u7684\u65f6\uff0c\u4f60\u4f1a\u9047\u5230\u4e00\u4e9b\u9ebb\u70e6\u3002 \u5982\u679c\u4e4b\u524d\u6ca1\u5b89\u88c5\u8fc7\u4e24\u4e2a\u8f6f\u4ef6\uff0c\u5efa\u8bae\u4ece\u5934\u5230\u5c3e\u6309\u7167\u6211\u7684\u89c6\u9891\u8fdb\u884c\u7535\u8111\u914d\u7f6e\u3002 Win\u73af\u5883\u914d\u7f6e \u8f6f\u4ef6\u5305\u4e0b\u8f7d \u94fe\u63a5: https://pan.baidu.com/s/1tbgGBcAnYSMZXp80F0nM1Q \u5bc6\u7801: t307 \u4e00\u3001Python\u5b89\u88c5 \u5b98\u7f51 https://www.python.org/ \u5b89\u88c5\u6ce8\u610f\u4e8b\u9879 \u63a8\u8350\u9009\u62e93.7.5. \u6700\u65b0\u7684bug\u6bd4\u8f83\u591a ==\u9009\u62e9 Install Now \u9ed8\u8ba4\u5b89\u88c5\u65b9\u5f0f== \u52fe\u9009 Add Python 3.x to PATH \uff0c\u8fd9\u6837\u547d\u4ee4\u884c\u53ef\u4ee5\u8c03\u7528python \u4e8c\u3001pip\u914d\u7f6e pip\u662fpython\u7684\u547d\u4ee4\u884c\u5b89\u88c5\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u6211\u4eec\u5b89\u88c5\u7b2c\u4e09\u65b9\u5e93\u3002 2.1 \u66f4\u6539pip\u955c\u50cf \u4e3a\u4e86\u4fdd\u8bc1\u5b89\u88c5\u7684\u901f\u5ea6\u548c\u6210\u529f\u7387\uff0c\u547d\u4ee4\u884c\u6267\u884c pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 2.2 \u4f7f\u7528\u65b9\u6cd5 pip install packagename 2.3 \u7b2c\u4e09\u65b9\u5e93\u5b89\u88c5\u65b9\u6cd5 pip\u5b89\u88c5\u6cd5 \u5355\u4e2a\u5e93\u7684\u5b89\u88c5\uff0c\u547d\u4ee4\u884c\u6267\u884c pip3 install \u5e93\u7684\u540d\u5b57 \u591a\u4e2a\u5e93\u7684\u5b89\u88c5\uff0c \u547d\u4ee4\u884c\u6267\u884c pip3 install -r requirements.txt pypi\u672c\u5730\u5b89\u88c5 \u5728https://pypi.org/ \u641c\u5e93\uff0c\u70b9\u8fdb\u53bb \u627eDownload files\uff0c\u4e0b\u8f7dwhl\u6216\u538b\u7f29\u6587\u4ef6\u5230\u684c\u9762\u3002\u4f8b\u5982\u6587\u4ef6\u540d xxx.whl \u547d\u4ee4\u884c\u4f9d\u6b21\u6267\u884c cd desktop pip3 install xxx.whl github\u672c\u5730\u5b89\u88c5\uff08\u5982github\u9879\u76ee\u4e2d\u5b58\u5728setup.py\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b89\u88c5\u4f7f\u7528\uff09 \u4e0b\u8f7dgithub\u9879\u76ee\u81f3\u684c\u9762\uff0c\u89e3\u538b \u547d\u4ee4\u4f9d\u6b21\u6267\u884c cd desktop python3 setup.py install \u4e09\u3001Jupyter notebook 3.1 \u5b89\u88c5 \u547d\u4ee4\u884c\u6267\u884c pip install jupyter 3.2 \u8c03\u7528 \u547d\u4ee4\u884c\u6267\u884c jupyter notebook 3.3 \u5e38\u7528\u5feb\u6377\u952e jupyter\u5185\u5feb\u6377\u952e \u529f\u80fd ESC+A\uff08ESC+B\uff09 \u5f53\u524d\u5355\u5143\u683c\u4e0a(\u4e0b)\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684Cell D+D \u5220\u9664\u5f53\u524d\u5355\u5143\u683c Shift+Enter \u6267\u884c\u5355\u5143\u683c\u5185\u7684Python\u4ee3\u7801 ESC+M \u5355\u5143\u683c\u7531\u4ee3\u7801\u6a21\u5f0f\u8f6c\u4e3a\u6807\u8bb0\u6a21\u5f0f \u4e2a\u4eba\u5efa\u8bae\uff1a Markdown\u8bed\u6cd5\u7279\u522b\u597d\u7528\uff0c\u5f3a\u70c8\u5efa\u8bae\u5b66\u4e60\uff0c\u987a\u4fbf\u5b89\u88c5\u4e00\u4e2aTypora\u8f6f\u4ef6\u3002 \u56db\u3001Tips \u73af\u5883\u914d\u7f6e\u592a\u96be\uff0c\u800c\u4e14\u6709\u65f6\u5019\u7535\u8111\u8fd8\u4f1a\u51fa\u73b0\u4e00\u4e9b\u89c6\u9891\u91cc\u51fa\u73b0\u4e0d\u4e86\u7684\u95ee\u9898\u3002\u8fd9\u65f6\u4e0d\u59a8\u5728==\u6dd8\u5b9d==\u641c python\u73af\u5883\u914d\u7f6e \uff0c\u5bfb\u627e\u4e00\u5bf9\u4e00\u8fdc\u7a0b\u534f\u52a9 jupyter\u4f7f\u7528\u65b9\u6cd5","title":"Win\u914d\u7f6e"},{"location":"PythonBasic/win/#win","text":"","title":"Win\u73af\u5883\u914d\u7f6e"},{"location":"PythonBasic/win/#_1","text":"\u94fe\u63a5: https://pan.baidu.com/s/1tbgGBcAnYSMZXp80F0nM1Q \u5bc6\u7801: t307","title":"\u8f6f\u4ef6\u5305\u4e0b\u8f7d"},{"location":"PythonBasic/win/#python","text":"\u5b98\u7f51 https://www.python.org/","title":"\u4e00\u3001Python\u5b89\u88c5"},{"location":"PythonBasic/win/#_2","text":"\u63a8\u8350\u9009\u62e93.7.5. \u6700\u65b0\u7684bug\u6bd4\u8f83\u591a ==\u9009\u62e9 Install Now \u9ed8\u8ba4\u5b89\u88c5\u65b9\u5f0f== \u52fe\u9009 Add Python 3.x to PATH \uff0c\u8fd9\u6837\u547d\u4ee4\u884c\u53ef\u4ee5\u8c03\u7528python","title":"\u5b89\u88c5\u6ce8\u610f\u4e8b\u9879"},{"location":"PythonBasic/win/#pip","text":"pip\u662fpython\u7684\u547d\u4ee4\u884c\u5b89\u88c5\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u6211\u4eec\u5b89\u88c5\u7b2c\u4e09\u65b9\u5e93\u3002","title":"\u4e8c\u3001pip\u914d\u7f6e"},{"location":"PythonBasic/win/#21-pip","text":"\u4e3a\u4e86\u4fdd\u8bc1\u5b89\u88c5\u7684\u901f\u5ea6\u548c\u6210\u529f\u7387\uff0c\u547d\u4ee4\u884c\u6267\u884c pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/","title":"2.1 \u66f4\u6539pip\u955c\u50cf"},{"location":"PythonBasic/win/#22","text":"pip install packagename","title":"2.2 \u4f7f\u7528\u65b9\u6cd5"},{"location":"PythonBasic/win/#23","text":"pip\u5b89\u88c5\u6cd5 \u5355\u4e2a\u5e93\u7684\u5b89\u88c5\uff0c\u547d\u4ee4\u884c\u6267\u884c pip3 install \u5e93\u7684\u540d\u5b57 \u591a\u4e2a\u5e93\u7684\u5b89\u88c5\uff0c \u547d\u4ee4\u884c\u6267\u884c pip3 install -r requirements.txt pypi\u672c\u5730\u5b89\u88c5 \u5728https://pypi.org/ \u641c\u5e93\uff0c\u70b9\u8fdb\u53bb \u627eDownload files\uff0c\u4e0b\u8f7dwhl\u6216\u538b\u7f29\u6587\u4ef6\u5230\u684c\u9762\u3002\u4f8b\u5982\u6587\u4ef6\u540d xxx.whl \u547d\u4ee4\u884c\u4f9d\u6b21\u6267\u884c cd desktop pip3 install xxx.whl github\u672c\u5730\u5b89\u88c5\uff08\u5982github\u9879\u76ee\u4e2d\u5b58\u5728setup.py\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b89\u88c5\u4f7f\u7528\uff09 \u4e0b\u8f7dgithub\u9879\u76ee\u81f3\u684c\u9762\uff0c\u89e3\u538b \u547d\u4ee4\u4f9d\u6b21\u6267\u884c cd desktop python3 setup.py install","title":"2.3 \u7b2c\u4e09\u65b9\u5e93\u5b89\u88c5\u65b9\u6cd5"},{"location":"PythonBasic/win/#jupyter-notebook","text":"","title":"\u4e09\u3001Jupyter notebook"},{"location":"PythonBasic/win/#31","text":"\u547d\u4ee4\u884c\u6267\u884c pip install jupyter","title":"3.1 \u5b89\u88c5"},{"location":"PythonBasic/win/#32","text":"\u547d\u4ee4\u884c\u6267\u884c jupyter notebook","title":"3.2 \u8c03\u7528"},{"location":"PythonBasic/win/#33","text":"jupyter\u5185\u5feb\u6377\u952e \u529f\u80fd ESC+A\uff08ESC+B\uff09 \u5f53\u524d\u5355\u5143\u683c\u4e0a(\u4e0b)\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684Cell D+D \u5220\u9664\u5f53\u524d\u5355\u5143\u683c Shift+Enter \u6267\u884c\u5355\u5143\u683c\u5185\u7684Python\u4ee3\u7801 ESC+M \u5355\u5143\u683c\u7531\u4ee3\u7801\u6a21\u5f0f\u8f6c\u4e3a\u6807\u8bb0\u6a21\u5f0f \u4e2a\u4eba\u5efa\u8bae\uff1a Markdown\u8bed\u6cd5\u7279\u522b\u597d\u7528\uff0c\u5f3a\u70c8\u5efa\u8bae\u5b66\u4e60\uff0c\u987a\u4fbf\u5b89\u88c5\u4e00\u4e2aTypora\u8f6f\u4ef6\u3002","title":"3.3 \u5e38\u7528\u5feb\u6377\u952e"},{"location":"PythonBasic/win/#tips","text":"\u73af\u5883\u914d\u7f6e\u592a\u96be\uff0c\u800c\u4e14\u6709\u65f6\u5019\u7535\u8111\u8fd8\u4f1a\u51fa\u73b0\u4e00\u4e9b\u89c6\u9891\u91cc\u51fa\u73b0\u4e0d\u4e86\u7684\u95ee\u9898\u3002\u8fd9\u65f6\u4e0d\u59a8\u5728==\u6dd8\u5b9d==\u641c python\u73af\u5883\u914d\u7f6e \uff0c\u5bfb\u627e\u4e00\u5bf9\u4e00\u8fdc\u7a0b\u534f\u52a9","title":"\u56db\u3001Tips"},{"location":"PythonBasic/win/#jupyter","text":"","title":"jupyter\u4f7f\u7528\u65b9\u6cd5"}]}