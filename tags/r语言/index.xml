<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>R语言 on 大邓和他的PYTHON</title>
    <link>/tags/r%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in R语言 on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 02 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/r%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可视化 | 使用ggdag包绘制有向图</title>
      <link>https://textdata.cn/blog/2023-06-02-r-ggdag/</link>
      <pubDate>Fri, 02 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-06-02-r-ggdag/</guid>
      <description>在tidyverse环境中使用ggdag可以轻松地使用dagitty。您可以直接整理dagitty对象，或使用方便的函数使用更接近R语言风格的语法创建DAGs。</description>
      <content:encoded><![CDATA[<p>在tidyverse环境中使用ggdag可以轻松地使用dagitty。您可以直接整理dagitty对象，或使用方便的函数使用更接近R语言风格的语法创建DAGs。</p>
<p><br><br></p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;ggdag&#34;)
</code></pre></div><p><br><br></p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">library</span><span class="p">(</span><span class="n">dagitty</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">ggdag</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>

<span class="n">dag</span> <span class="o">&lt;-</span> <span class="nf">dagitty</span><span class="p">(</span><span class="s">&#34;dag{y &lt;- z -&gt; x}&#34;</span><span class="p">)</span>
<span class="nf">tidy_dagitty</span><span class="p">(</span><span class="n">dag</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">ggdag</span><span class="p">(</span><span class="n">dag</span><span class="p">,</span> <span class="n">layout</span> <span class="o">=</span> <span class="s">&#34;circle&#34;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/1.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggdag</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>

<span class="c1">#  example from the dagitty package</span>
<span class="n">dag</span> <span class="o">&lt;-</span> <span class="n">dagitty</span><span class="o">::</span><span class="nf">dagitty</span><span class="p">(</span><span class="s">&#34;dag {
</span><span class="s">    y &lt;- x &lt;- z1 &lt;- v -&gt; z2 -&gt; y
</span><span class="s">    z1 &lt;- w1 &lt;-&gt; w2 -&gt; z2
</span><span class="s">    x &lt;- w1 -&gt; y
</span><span class="s">    x &lt;- w2 -&gt; y
</span><span class="s">    x [exposure]
</span><span class="s">    y [outcome]
</span><span class="s">  }&#34;</span><span class="p">)</span>

<span class="n">tidy_dag</span> <span class="o">&lt;-</span> <span class="nf">tidy_dagitty</span><span class="p">(</span><span class="n">dag</span><span class="p">)</span>
<span class="nf">ggdag</span><span class="p">(</span><span class="n">tidy_dag</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">theme_dag</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 使用word2vec词向量模型</title>
      <link>https://textdata.cn/blog/2022-10-12-r-word2vec/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-12-r-word2vec/</guid>
      <description>R语言训练和使用词向量word2vec模型</description>
      <content:encoded><![CDATA[


<p>Python的gensim库可以训练和使用word2vec模型，R语言中也有与之对应的<code>word2vec包</code>。word2vec是词嵌入技术中最常用的一种技术，如果对词嵌入不太了解，可以阅读前文</p>
<ul>
<li><a href="https://textdata.cn/blog/wordembeddingsinsocialscience/">转载 | 大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用</a></li>
<li><a href="https://textdata.cn/blog/from_sysbol_to_embeddings_in_computational_social_science/">转载 | 从符号到嵌入：计算社会科学的两种文本表示</a></li>
</ul>
<p>本文需要的R包</p>
<pre><code>install.packages(c(&quot;word2vec&quot;, &quot;jiebaR&quot;, &quot;tidyverse&quot;, &quot;readtext&quot;))</code></pre>
<p><br></p>
<div id="word2vec包常用函数" class="section level2">
<h2>word2vec包常用函数</h2>
<ul>
<li>word2vec 使用文本数据训练word2vec模型</li>
<li>as.matrix 获取词向量</li>
<li>doc2vec 获取文档向量</li>
<li>predict 获取</li>
<li>write.word2vec 保存word2vec模型至文件</li>
<li>read.word2vec 读取word2vec模型文件</li>
</ul>
<p><br></p>
</div>
<div id="准备数据" class="section level2">
<h2>准备数据</h2>
<p>原始数据是从网站下载的 <code>三体.txt</code>, 未分词处理，现在需要</p>
<ol style="list-style-type: decimal">
<li>读中文取txt数据</li>
<li>保留标点符号，进行分词处理</li>
<li>分词结果重新整理为类似英文(空格间隔词语的形式)字符串</li>
<li>结果存入新的txt</li>
</ol>
<pre class="r"><code>library(jiebaR)
library(tidyverse)
library(word2vec)


#导入数据
tri_body &lt;- readtext::readtext(&#39;data/三体.txt&#39;)$text 

#分词（保留标点符号）
tokenizer &lt;- worker(symbol=T)
tri_words &lt;- segment(tri_body, tokenizer)

# 整理为英文格式（词语之间加空格）
segmented_text &lt;- stringr::str_c(tri_words, collapse = &quot; &quot;) %&gt;% c()

#写入txt
readr::write_file(segmented_text, file=&#39;data/santi.txt&#39;)</code></pre>
<p><br></p>
</div>
<div id="训练word2vec模型" class="section level2">
<h2>训练word2vec模型</h2>
<pre><code>word2vec(
  x,
  type = c(&quot;cbow&quot;, &quot;skip-gram&quot;),
  dim = 50,
  window = ifelse(type == &quot;cbow&quot;, 5L, 10L),
  iter = 5L,
  lr = 0.05,
  min_count = 5L,
  split = c(&quot; \n,.-!?:;/\&quot;#$%&amp;&#39;()*+&lt;=&gt;@[]\\^_`{|}~\t\v\f\r&quot;, &quot;.\n?!&quot;),
  stopwords = character(),
  threads = 1L,
  ...
)</code></pre>
<ul>
<li>x 英文文本数据txt文件(中文数据txt文件是分词后的txt文件，空格间隔词语)</li>
<li>type 训练方式，默认CBOW</li>
<li>dim 词向量维度，默认50维</li>
<li>window 词向量窗口，默认5</li>
<li>iter 训练迭代次数，默认5</li>
<li>split 分词、分句对应的分隔符。</li>
<li>lr 学习率，默认0.05</li>
<li>min_count 词语在语料中至少要出现5次(低于5次的词语，训练好的结果中没有该词语）</li>
<li>stopwords 停用词表，默认空字符集</li>
<li>threads 并行加速，cpu核数，默认1。为了加速训练过程，可以使用 <code>parallel::detectCores()</code> 获得本电脑的核数</li>
</ul>
<pre class="r"><code>#训练10维的词向量模型
model &lt;- word2vec(x = &#39;data/santi.txt&#39;, 
                  dim = 10,  
                  iter = 20, 
                  split = c(&quot; &quot;,  &quot;。？！；&quot;),
                  threads = parallel::detectCores()) #并行，使用cpu多核加速

emb &lt;- as.matrix(model)

#显示6个词
head(emb)</code></pre>
<pre><code>##             [,1]       [,2]        [,3]        [,4]      [,5]        [,6]
## 煮   -1.02566934 -0.9271542 -0.42417252 -0.54280633 1.8847700  0.41640753
## 报   -0.83992052  1.9440031  0.09093992  0.83522910 1.7909089  0.72149992
## 悬空 -0.06369513 -1.3519955 -2.13137460 -0.06198586 0.6096401  1.32933748
## 略    1.74687469 -0.4278547 -0.33822438  1.08505321 2.0168977 -0.07693915
## 伏   -0.68947995 -1.4147453 -1.95522511 -0.39963767 0.5269030  0.30352208
## 石柱 -0.40561640 -1.3643234  0.30329546 -0.94012892 2.1579018  0.79654717
##            [,7]       [,8]       [,9]      [,10]
## 煮   -1.1708908 -0.7624418 -0.6275516  1.2417521
## 报    0.5235919  0.8448864 -0.2960095 -0.0773837
## 悬空  0.1527163 -0.1337370 -0.1646384  1.1892601
## 略   -0.3246748 -0.9813624  0.5045205  0.2771466
## 伏    0.3166684 -1.4238008 -1.0167172 -0.0976937
## 石柱  0.2237919  0.6933151  0.7412233 -0.7918702</code></pre>
<p><br></p>
</div>
<div id="查看某词的vector" class="section level2">
<h2>查看某词的vector</h2>
<p>查看词语 <code>汪淼</code> 的vector</p>
<pre class="r"><code>emb[&quot;汪淼&quot;,]</code></pre>
<pre><code>##  [1] -0.77559733 -0.90021265  0.66555792 -0.10277803  1.89924443 -0.88817298
##  [7] -1.32665634 -0.75938725 -0.09628224  1.18008399</code></pre>
<p>查看词语 <code>地球</code> 的vector</p>
<pre class="r"><code>emb[&quot;地球&quot;,]</code></pre>
<pre><code>##  [1]  0.29645494 -0.61688840  0.91209215 -0.64530188  0.62816381 -0.72807491
##  [7]  0.50655973  2.38137436  1.19238114 -0.09610342</code></pre>
<p><br></p>
</div>
<div id="predict" class="section level2">
<h2>predict()</h2>
<p>找到语料中，词语 <code>罗辑</code> 最相似的 20个词</p>
<pre class="r"><code>predict(model, &#39;罗辑&#39;, type=&#39;nearest&#39;, top_n = 20)</code></pre>
<pre><code>## $罗辑
##    term1    term2 similarity rank
## 1   罗辑     胡文  0.9744400    1
## 2   罗辑   申玉菲  0.9678891    2
## 3   罗辑   瓦季姆  0.9550550    3
## 4   罗辑 狄奥伦娜  0.9518393    4
## 5   罗辑     蓝西  0.9472395    5
## 6   罗辑     护士  0.9471439    6
## 7   罗辑   法扎兰  0.9458703    7
## 8   罗辑   白艾思  0.9451101    8
## 9   罗辑     坎特  0.9396626    9
## 10  罗辑     白蓉  0.9387447   10
## 11  罗辑   参谋长  0.9377206   11
## 12  罗辑   弗雷斯  0.9369408   12
## 13  罗辑   第一眼  0.9357565   13
## 14  罗辑     父亲  0.9350463   14
## 15  罗辑   多少次  0.9314436   15
## 16  罗辑     门去  0.9291503   16
## 17  罗辑     维德  0.9267251   17
## 18  罗辑     褐蚁  0.9203902   18
## 19  罗辑       刚  0.9200501   19
## 20  罗辑     吴岳  0.9191605   20</code></pre>
<p>查看均值向量（多个词向量中心的）的10个近义词</p>
<pre class="r"><code>vectors &lt;- emb[c(&quot;汪淼&quot;, &quot;罗辑&quot;, &quot;叶文洁&quot;), ]
centroid_vector &lt;- colMeans(vectors)

predict(model, centroid_vector, type = &quot;nearest&quot;, top_n = 10)</code></pre>
<pre><code>##        term similarity rank
## 1      罗辑  0.9185568    1
## 2  狄奥伦娜  0.9104245    2
## 3      文洁  0.9088279    3
## 4      汪淼  0.9054156    4
## 5    白艾思  0.9046930    5
## 6      张翔  0.9026827    6
## 7      尴尬  0.8952187    7
## 8      庄颜  0.8952166    8
## 9      皇帝  0.8949283    9
## 10     父亲  0.8915347   10</code></pre>
<p><br></p>
</div>
<div id="doc2vec" class="section level2">
<h2>doc2vec()</h2>
<ul>
<li>doc2vec(object, newdata, split = ” “)
<ul>
<li>object word2vec模型对象</li>
<li>newdata 文档列表(用空格间隔的字符串列表)</li>
<li>split 默认分隔符是空格</li>
</ul></li>
</ul>
<p>将文档转为向量</p>
<pre class="r"><code>docs &lt;- c(&quot;哦 ， 对不起 ， 汪 教授 。 这是 我们 史强 队长 。&quot;, 
          &quot; 丁仪 博士 ， 您 能否 把 杨冬 的 遗书 给 汪 教授 看 一下 ？ &quot;)

doc2vec(object=model, newdata = docs, split=&#39; &#39;)</code></pre>
<pre><code>##            [,1]       [,2]       [,3]     [,4]      [,5]       [,6]       [,7]
## [1,] -1.1769752 -0.1065619  0.1983950 1.734068 0.5478012 -0.8320528 -0.2387014
## [2,] -0.4827189  0.0664595 -0.2119484 1.895074 0.6729840 -0.3008853 -0.6857539
##            [,8]      [,9]      [,10]
## [1,] -0.5519856 -2.007002  0.4182127
## [2,] -0.5976922 -2.130454 -0.4653725</code></pre>
<p><br></p>
</div>
<div id="保存word2vec模型" class="section level2">
<h2>保存word2vec模型</h2>
<p>保存模型，一般有两个目的</p>
<ul>
<li>为了分享word2vec模型</li>
<li>避免反复训练模型，节约数据分析时间</li>
</ul>
<pre class="r"><code>word2vec::write.word2vec(x = model, 
                         #新建output文件夹，将模型存入output文件夹内
                         file = &quot;output/santi_word2vec.bin&quot;)</code></pre>
<pre><code>## [1] TRUE</code></pre>
<p><br></p>
</div>
<div id="导入预训练模型" class="section level2">
<h2>导入预训练模型</h2>
<p>导入 <code>output/santi_word2vec.bin</code> 的预训练word2vec模型</p>
<pre class="r"><code>pre_trained_model &lt;- word2vec::read.word2vec(file = &quot;output/santi_word2vec.bin&quot;)
pre_trained_emb &lt;- as.matrix(pre_trained_model)
head(pre_trained_emb)</code></pre>
<pre><code>##              [,1]       [,2]       [,3]       [,4]       [,5]        [,6]
## 回荡   -1.9563367 -0.3099073 -1.2969902 -0.5719763  1.1507142 -0.05515177
## 听证会  0.2756990  1.3702289 -1.3303705 -0.1827691  0.6622804 -1.92008448
## 纲领    0.4495552  1.9311246 -0.5812275 -0.1470096 -0.2678985 -0.01694358
## 很亮    0.3621844 -1.0048453  0.7036168 -2.0917876  0.6459805  1.18436253
## 秒      1.9033701  1.6510324 -0.2616904  0.3671210  1.0618066  0.06588747
## 杰森   -1.2904713 -1.2501229  0.3380587  0.8590797  1.6798494 -0.58775252
##              [,7]       [,8]       [,9]      [,10]
## 回荡    1.1082711 -0.2064489 -0.9264346 -0.7816723
## 听证会 -1.0952694  0.6120903 -0.1326561  0.7252344
## 纲领   -0.6097277  2.1051276 -0.2405726 -0.8808851
## 很亮    0.1964065 -1.3926132 -0.4042619 -0.1645472
## 秒     -0.8347995  0.2591044  0.3594093  1.1929117
## 杰森    0.4941484 -1.1393189 -0.4687541  0.9951217</code></pre>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 使用shiny的reactive表达式写应用程序</title>
      <link>https://textdata.cn/blog/2022-10-07-r-shiny-reactive/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-07-r-shiny-reactive/</guid>
      <description>使用shiny的reactive表达式写应用程序</description>
      <content:encoded><![CDATA[<blockquote>
<p>作者: 猫哥</p>
<p>波恩大学经济学专业， 计量经济学方向</p>
</blockquote>
<p>在之前的推文中，我们介绍了如何在R语言中，用Shiny包编写应用程序App。在这篇推文中，我们将要介绍Shiny包中一类独特且重要的表达式：reactive expressions。</p>
<p>在设计App时，我们希望App能够有较快的响应速度。但是，如果App的server函数中包含很多耗时较长的运算，那么应该怎么办呢？此时，就需要用到Reactive表达式。它能够控制程序中哪些部分需要更新运算，而哪些部分不需要更新，从而节省运算时间。</p>
<br>
<h2 id="案例stockvis">案例：stockVis</h2>
<p>此处，我们将通过一个案例来讲解reactive表达式。下图是stockVis的App界面，这个App能够帮助用户描绘相应股票的价格变动。感兴趣的读者可以根据<a href="https://shiny.rstudio.com/tutorial/written-tutorial/lesson6/">此处</a>的提示下载该App。</p>
<p><img loading="lazy" src="img/%e5%9b%be1.png" alt=""  />
</p>
<p>根据上图可以看出，用户需要首先选择股票（Symbol），然后选择观察时期(Data range)，再选择绘制原股票价格还是对数化后的股票价格，最后再选择是否股价中的通胀进行矫正。</p>
<p>在对这些选项进行了选择之后，stockVis首先用<code>getSymbols</code>函数从诸如<a href="https://consent.yahoo.com/v2/collectConsent?sessionId=3_cc-session_b4231433-d1e7-4b31-8341-a7d413ea7922">Yahoo finance</a>和<a href="https://fred.stlouisfed.org">Federal Reserve Bank of St. Louis</a>这样的网站中下载金融数据到R，然后再用<code>chartSeries</code>将股价描绘出来。</p>
<p>server函数中，用来生成图形的程序如下。在分析了该程序之后，我们会发现一个问题。比如，当我们重新选中“Plot y axis on the log scale”，那么<code>input$log</code>的值就会变化，那么就会导致整个<code>renderPlot</code>重新进行运算。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">output</span><span class="o">$</span><span class="n">plot</span> <span class="o">&lt;-</span> <span class="nf">renderPlot</span><span class="p">({</span>
  <span class="n">data</span> <span class="o">&lt;-</span> <span class="nf">getSymbols</span><span class="p">(</span><span class="n">input</span><span class="o">$</span><span class="n">symb</span><span class="p">,</span> <span class="n">src</span> <span class="o">=</span> <span class="s">&#34;yahoo&#34;</span><span class="p">,</span>
                     <span class="n">from</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">dates[1]</span><span class="p">,</span>
                     <span class="n">to</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">dates[2]</span><span class="p">,</span>
                     <span class="n">auto.assign</span> <span class="o">=</span> <span class="kc">FALSE</span><span class="p">)</span>

  <span class="nf">chartSeries</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">theme</span> <span class="o">=</span> <span class="nf">chartTheme</span><span class="p">(</span><span class="s">&#34;white&#34;</span><span class="p">),</span>
              <span class="n">type</span> <span class="o">=</span> <span class="s">&#34;line&#34;</span><span class="p">,</span> <span class="n">log.scale</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">log</span><span class="p">,</span> <span class="n">TA</span> <span class="o">=</span> <span class="kc">NULL</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div><p>而<code>renderPlot</code>每次重新运算时，首先会重新用<code>getSymbols</code>抓去数据，然后用<code>chartSeries</code>重新画图。然而，用<code>getSymbols</code>从Yahoo等网站抓取数据所花费的时间并不是可以忽略不计的。另外，如果抓取的过于频繁，我们的IP地址会被屏蔽，这是网站将我们错判为机器人，也是网站应对爬虫的常用做法。最关键的是，当我们只是重新选择“Plot y axis on the log scale”，我们并不希望重新抓取数据，而是希望在原有数据的基础上对数化即可。</p>
<br>
<h2 id="reactive表达式">Reactive表达式</h2>
<p>在遇到上述问题时，我们就需要用到reactive表达式。reactive表达式以ui函数里各种input变量作为输入。如下，reactive表达式的输入则是<code>input$symb</code>和<code>input$dates</code>。当<code>input$symb</code>和<code>input$dates</code>的值变化时，此处reactive表达式的输出结果才会发生变化，而不受<code>input$log</code>的影响。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">dataInput</span> <span class="o">&lt;-</span> <span class="nf">reactive</span><span class="p">({</span>
  <span class="nf">getSymbols</span><span class="p">(</span><span class="n">input</span><span class="o">$</span><span class="n">symb</span><span class="p">,</span> <span class="n">src</span> <span class="o">=</span> <span class="s">&#34;yahoo&#34;</span><span class="p">,</span>
    <span class="n">from</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">dates[1]</span><span class="p">,</span>
    <span class="n">to</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">dates[2]</span><span class="p">,</span>
    <span class="n">auto.assign</span> <span class="o">=</span> <span class="kc">FALSE</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div><p>所以，我们现在用上面的reactive表达式更新原先的程序，得到如下程序。<code>dataInput()</code>命令则是运行如上的reactive表达式。此时，如果我们只重新选择&quot;Plot y axis on the log scale&quot;，那么reactive表达式里的数据抓取过程并不会更新，而只有<code>renderPlot</code>里的<code>log.scale</code>参数会更新，这将节省程序运行时间，而且减少数据抓取次数，防止IP地址被封。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">output</span><span class="o">$</span><span class="n">plot</span> <span class="o">&lt;-</span> <span class="nf">renderPlot</span><span class="p">({</span>    
  <span class="nf">chartSeries</span><span class="p">(</span><span class="nf">dataInput</span><span class="p">(),</span> <span class="n">theme</span> <span class="o">=</span> <span class="nf">chartTheme</span><span class="p">(</span><span class="s">&#34;white&#34;</span><span class="p">),</span>
    <span class="n">type</span> <span class="o">=</span> <span class="s">&#34;line&#34;</span><span class="p">,</span> <span class="n">log.scale</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">log</span><span class="p">,</span> <span class="n">TA</span> <span class="o">=</span> <span class="kc">NULL</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div><p>reactive表达式不止<code>reactive()</code>，还包括<code>observe()</code>, <code>observeEvent()</code>和<code>eventReactive()</code>等等，详见<a href="https://shiny.rstudio.com/reference/shiny/1.6.0/">此处</a>。另外，reactive表达式只能包装在特定的、允许reactive表达式的函数中，如此处的<code>renderPlot</code>，而不能被包装在<code>plot</code>函数中。<code>render*</code>类函数都允许reactive表达式。</p>
<br>
<h2 id="总结">总结</h2>
<p>Reactive表达式的功能可被简单地总结为以下步骤：</p>
<ul>
<li>当你第一次运行程序时，reactive表达式会缓存运行结果。</li>
<li>当你下一次运行程序时，reactive表达式会自动检测输入值是否是最新的。在上例中，也就是说输入的<code>input$symb</code>和<code>input$dates</code>是否有变化。</li>
<li>如果有变化，则reactive会根据新输入值更新结果。</li>
<li>如果没变化，则reactive会直接使用缓存中的值。</li>
</ul>
<br>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://shiny.rstudio.com/tutorial/written-tutorial/lesson6/">https://shiny.rstudio.com/tutorial/written-tutorial/lesson6/</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 使用stargazer包输出格式化回归结果</title>
      <link>https://textdata.cn/blog/2022-10-07-r-stargazer/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-07-r-stargazer/</guid>
      <description>使用stargazer包输出格式化回归结果</description>
      <content:encoded><![CDATA[<blockquote>
<p>作者: 猫哥</p>
<p>波恩大学经济学专业， 计量经济学方向</p>
</blockquote>
<p>在实证分析过程中，各种回归模型十分常用，特别是参数模型。而且我们常常需要运行多种参数回归模型，并对参数估计值、显著性等统计性质进行比较。此时，如果用copy paste或者手动输入，那么则耗时耗力，且有一定错误率。如果你也有相同烦恼，那么stargazer包可以完美地解决你的烦恼。他可以快速、准确、清晰地输出回归结果。</p>
<br>
<h2 id="安装">安装</h2>
<p>与其它R包的安装方式无异，我们可以通过<code>install.packages()</code>和<code>library()</code>函数来下载和导入stargazer包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">install.packages</span><span class="p">(</span><span class="s">&#34;stargazer&#34;</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">stargazer</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="描述性统计值">描述性统计值</h2>
<p>在估计回归模型之前，我们常常也需要对数据的描述性统计性质进行分析，以便了解变量的分布和变量间的联合分布，这对后续的回归模型设定具有重要意义。stargazer包能使我们方便地分析描述性统计值。我们此处以R内自带数据集attitude为例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">stargazer</span><span class="p">(</span><span class="n">attitude</span><span class="p">,</span> <span class="n">type</span> <span class="o">=</span> <span class="s">&#34;text&#34;</span><span class="p">)</span>
</code></pre></div><p>运行上述程序后，我们就会得到下表。</p>
<p><img loading="lazy" src="img/%e5%9b%be1.png" alt=""  />
</p>
<p>如果需要输出latex或者html格式，那么指定<code>type=&quot;latex&quot;</code>或者<code>type=&quot;html&quot;</code>即可。当然，我们还有其他一些重要的参数。</p>
<ul>
<li><code>title</code>: 定义表格的标题</li>
<li><code>out</code>: 	定义导出文件的路径，文件类型可以是<code>.tex</code>, <code>.txt</code>, <code>.htm</code>或者<code>.html</code>。</li>
<li><code>flip</code>: 默认为FALSE。当定义为TRUE时，则表示转置，即各变量按列排列。</li>
<li><code>digits</code>: 定义输出数值的小数位数。</li>
</ul>
<br>
<h2 id="参数回归模型结果">参数回归模型结果</h2>
<p>此处，我们依然使用attitude数据包，以<code>rating</code>作为因变量，其他各变量作为协变量，用两个线性模型和一个Probit模型进行参数估计。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="c1">##  2 OLS models</span>
<span class="n">linear.1</span> <span class="o">&lt;-</span> <span class="nf">lm</span><span class="p">(</span><span class="n">rating</span> <span class="o">~</span> <span class="n">complaints</span> <span class="o">+</span> <span class="n">privileges</span> <span class="o">+</span> <span class="n">learning</span> 
                        <span class="o">+</span> <span class="n">raises</span> <span class="o">+</span> <span class="n">critical</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">attitude</span><span class="p">)</span>

<span class="n">linear.2</span> <span class="o">&lt;-</span> <span class="nf">lm</span><span class="p">(</span><span class="n">rating</span> <span class="o">~</span> <span class="n">complaints</span> <span class="o">+</span> <span class="n">privileges</span> <span class="o">+</span> <span class="n">learning</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">attitude</span><span class="p">)</span>

<span class="c1">## create an indicator dependent variable, and run a probit model</span>
 
<span class="n">attitude</span><span class="o">$</span><span class="n">high.rating</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">attitude</span><span class="o">$</span><span class="n">rating</span> <span class="o">&gt;</span> <span class="m">70</span><span class="p">)</span>
<span class="n">probit.model</span> <span class="o">&lt;-</span> <span class="nf">glm</span><span class="p">(</span><span class="n">high.rating</span> <span class="o">~</span> <span class="n">learning</span> <span class="o">+</span> <span class="n">critical</span> <span class="o">+</span> <span class="n">advance</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">attitude</span><span class="p">,</span>
                    <span class="n">family</span> <span class="o">=</span> <span class="nf">binomial</span><span class="p">(</span><span class="n">link</span> <span class="o">=</span> <span class="s">&#34;probit&#34;</span><span class="p">))</span>
</code></pre></div><p>在得到各模型后，我们可以运行以下程序汇总和输出三个模型的结果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">stargazer</span><span class="p">(</span><span class="n">linear.1</span><span class="p">,</span> <span class="n">linear.2</span><span class="p">,</span> <span class="n">probit.model</span><span class="p">,</span> <span class="n">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#34;Regression Results&#34;</span><span class="p">)</span>
</code></pre></div><p>汇总和输出结果如下表。</p>
<p><img loading="lazy" src="img/%e5%9b%be2.png" alt=""  />
</p>
<p>在输出回归结果时，我们也可以定义一些重要的参数。</p>
<ul>
<li><code>single.row</code>: 默认值为FALSE。当取值为TRUE，表示将参数和t统计值或其它参数统计值放在一行，而不是分上下放置。</li>
<li><code>ci</code>: 默认为FALSE。当取值为TRUE时，表示将在参数估计值后报告置信区间，而不是t统计值。</li>
<li><code>ci.level</code>: 定义置信度水平。</li>
<li><code>omit.stat</code>: 定义不需要报告的统计值。例如，<code>omit.stat=c(&quot;f&quot;.&quot;ser&quot;)</code>，表示不需要报告模型的F统计值和Residual Std. Error，即残差的标准误。</li>
<li><code>keep.stat</code>: 定义需要报告的统计值。默认是报告所有的协变量。例如，<code>keep.stat=&quot;n&quot;</code>，表示只需要报告样本量。</li>
<li><code>keep</code>: 定义需要包含在输出结果中的变量。当模型协变量数目很多，而我们又只关注个别变量的系数时，这个参数则能够起到作用。例如，<code>keep=c(&quot;complaints&quot;,&quot;learning&quot;,&quot;raises&quot;,&quot;critical&quot;)</code>。</li>
<li><code>order</code>: 定义输出结果中变量的顺序。例如，<code>order=c(&quot;learning&quot;, &quot;raises&quot;)</code>。</li>
</ul>
<br>
<h2 id="相关系数表">相关系数表</h2>
<p>stargazer包还能汇总整理相关系数表。以attitude数据集为例，运行以下程序即可获得相关系数表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">correlation.matrix</span> <span class="o">&lt;-</span> <span class="nf">cor</span><span class="p">(</span><span class="n">attitude</span><span class="p">)</span>
<span class="nf">stargazer</span><span class="p">(</span><span class="n">correlation.matrix</span><span class="p">,</span> <span class="n">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/%e5%9b%be3.png" alt=""  />
</p>
<br>
<h2 id="参考文献">参考文献</h2>
<p>Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables. R package version 5.2.2. <a href="https://CRAN.R-project.org/package=stargazer">https://CRAN.R-project.org/package=stargazer</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | renderthis包制作讲解动画、视频</title>
      <link>https://textdata.cn/blog/2022-09-27-r-renderthis/</link>
      <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-27-r-renderthis/</guid>
      <description>description用于SEO优化</description>
      <content:encoded><![CDATA[


]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 让统计更easy的easystats集合包</title>
      <link>https://textdata.cn/blog/2022-09-21-r-easystats/</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-21-r-easystats/</guid>
      <description>模板统计报告用</description>
      <content:encoded><![CDATA[<p><a href="https://easystats.github.io/easystats/index.html">easystats</a> 是 R 包集合，可提供统一且easy的代码进行 统计分析。</p>
<br>
<h2 id="与-tidyverse-有何不同">与 tidyverse 有何不同？</h2>
<p>tidyverse包集合，是 R语言 中非常流行的软件包集合（ggplot、dplyr、tidyr&hellip;&hellip;），它也使 R 的使用更加容易。那么，您应该选择 tidyverse 还是 easystats？</p>
<p><strong>两个都选！</strong></p>
<p>事实上，这两个生态系统的设计考虑了非常不同的目标。 tidyverse 包主要用于 <code>数据操作和探索</code>。而 easystats 更关注分析的最后阶段：<code>理解和解释您的结果，并在手稿或报告中报告它们</code>。您绝对可以在 tidyverse 工作流程中使用 easystats 功能！</p>
<p>easystats + tidyverse = ❤️</p>
<br>
<h2 id="easystats生态圈">easystats生态圈</h2>
<p>每个 easystats 包都有不同的范围和用途。这意味着您最好的开始方式是探索并选择您认为可能对您有用的那些。但是，由于它们的构建考虑了&quot;更大的图景&quot;，您会意识到使用更多它们会创建一个流畅的工作流程，因为这些包旨在协同工作。理想情况下，这些软件包可以协同工作，涵盖统计分析和数据可视化的所有方面。</p>
<ul>
<li><a href="https://easystats.github.io/report/">report</a>：📜 🎉 生成自动统计报告</li>
<li><a href="https://easystats.github.io/correlation/">correlation</a>：🔗 相关性的多合一包</li>
<li><a href="https://easystats.github.io/modelbased/">modelbased</a>：📈 基于统计模型估计效果、组平均值和组间对比</li>
<li><a href="https://easystats.github.io/bayestestR/">bayestestR</a>：👻 非常适合贝叶斯统计的初学者或专家</li>
<li><a href="https://easystats.github.io/effectsize/">effectize</a>: 🐉 计算、转换、解释和使用效果大小和标准化参数的索引</li>
<li><a href="https://easystats.github.io/see/">see</a> ：🎨 创建漂亮结果可视化的绘图</li>
<li><a href="https://easystats.github.io/parameters/">parameters</a>：📊 获取有关模型包含参数所有信息的表格</li>
<li><a href="https://easystats.github.io/performance/">performance</a>：💪模型的质量和性能指标（R2、ICC、LOO、AIC、BF、&hellip;）</li>
<li><a href="https://easystats.github.io/insight/">insight</a>：🔮 对于开发人员来说，一个包可以帮助您使用不同的模型和包</li>
<li><a href="https://easystats.github.io/datawizard/">datawizard</a>：🧙 清理和转换数据的魔法药水</li>
</ul>
<p>截止2022-09-21， easystats生态中各个包的下载情况</p>
<table>
<thead>
<tr>
<th style="text-align:left">Total</th>
<th style="text-align:left">insight</th>
<th style="text-align:left">bayestestR</th>
<th style="text-align:left">parameters</th>
<th style="text-align:left">performance</th>
<th style="text-align:left">datawizard</th>
<th style="text-align:left">effectsize</th>
<th style="text-align:left">correlation</th>
<th style="text-align:left">see</th>
<th style="text-align:left">modelbased</th>
<th style="text-align:left">report</th>
<th style="text-align:left">easystats</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">10,001,095</td>
<td style="text-align:left">3,085,739</td>
<td style="text-align:left">1,373,379</td>
<td style="text-align:left">1,363,678</td>
<td style="text-align:left">1,285,506</td>
<td style="text-align:left">1,159,097</td>
<td style="text-align:left">1,060,079</td>
<td style="text-align:left">277,541</td>
<td style="text-align:left">251,038</td>
<td style="text-align:left">94,089</td>
<td style="text-align:left">48,876</td>
<td style="text-align:left">2,073</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="easystats-trend.png" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;easystats&#34;)
</code></pre></div><br>
<h2 id="炫一下">炫一下</h2>
<p>easystats到底如何好用，今天只实验report包，该包号称 “从 R 到你的手稿”</p>
<p>报告的主要目标是弥合 R 的输出与手稿中包含的格式化结果之间的差距。 它根据最佳实践指南（例如 APA 期刊风格）自动生成模型和数据框架的报告，确保结果报告的标准化和质量。</p>
<p>生成iris数据集描述性统计信息的英文报告</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">report(iris)
</code></pre></div><br>
<p>生成线性回归模型的报告</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">library(report)

model &lt;- lm(Sepal.Length ~ Species, data = iris)
report(model)
</code></pre></div><p>更多内容请阅读 <a href="https://easystats.github.io/report/">report包</a> 的文档。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  使用ggsci包绘制sci风格图表</title>
      <link>https://textdata.cn/blog/2022-09-20-r-ggsci/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-20-r-ggsci/</guid>
      <description>使用R语言ggsci包定制sci风格的绘图</description>
      <content:encoded><![CDATA[


<p>今天分享一个R语言ggsci包，帮你绘制出美观舒服，又合期刊编辑审美风格的图表。</p>
<p><br></p>
<div id="安装" class="section level2">
<h2>安装</h2>
<pre class="r"><code>install.packages(&quot;ggsci&quot;)
#remotes::install_github(&quot;nanxstats/ggsci&quot;)</code></pre>
<p>使用 <code>vignette("ggsci")</code>可以查看ggsci的vignette。</p>
<p><br></p>
</div>
<div id="期刊风格" class="section level2">
<h2>期刊风格</h2>
<p>ggsci支持的主题风格主要参考自期刊、可视化库</p>
<table>
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<thead>
<tr class="header">
<th align="left">风格</th>
<th align="left">期刊、技术框架</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><strong>NPG</strong></td>
<td align="left">Nature旗下期刊(Nature Publishing Group)</td>
</tr>
<tr class="even">
<td align="left"><strong>AAAS</strong></td>
<td align="left">Science旗下期刊()</td>
</tr>
<tr class="odd">
<td align="left"><strong>NEJM</strong></td>
<td align="left">新英格兰医学杂志(New England Journal of Medicine)</td>
</tr>
<tr class="even">
<td align="left"><strong>Lancet</strong></td>
<td align="left">柳叶刀杂志(Lancet Oncology)</td>
</tr>
<tr class="odd">
<td align="left"><strong>JAMA</strong></td>
<td align="left">美国医学学会杂志(Journal of the American Medical Association)</td>
</tr>
<tr class="even">
<td align="left"><strong>JCO</strong></td>
<td align="left">临床肿瘤学杂志(Journal of Clinical Oncology)</td>
</tr>
<tr class="odd">
<td align="left"><strong>UCSCGB</strong></td>
<td align="left">UCSC基因组浏览器(UCSC Genome Browser)</td>
</tr>
<tr class="even">
<td align="left"><strong>D3</strong></td>
<td align="left">d3.js</td>
</tr>
<tr class="odd">
<td align="left">…</td>
<td align="left">…</td>
</tr>
</tbody>
</table>
<p><br></p>
</div>
<div id="基本图表" class="section level2">
<h2>基本图表</h2>
<p>这里准备一个常见的ggplot2图表</p>
<pre class="r"><code>library(&quot;ggsci&quot;)
library(&quot;ggplot2&quot;)
library(&quot;gridExtra&quot;)

data(&quot;diamonds&quot;)

p1 = ggplot(subset(diamonds, carat &gt;= 2.2),
       aes(x = table, y = price, colour = cut)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = &quot;loess&quot;, alpha = 0.05, size = 1, span = 1) +
  theme_bw()

p2 = ggplot(subset(diamonds, carat &gt; 2.2 &amp; depth &gt; 55 &amp; depth &lt; 70),
       aes(x = depth, fill = cut)) +
  geom_histogram(colour = &quot;black&quot;, binwidth = 1, position = &quot;dodge&quot;) +
  theme_bw()

grid.arrange(p1, p2, ncol=2)</code></pre>
<p><img src="/blog/2022-09-20-r-ggsci/index_files/figure-html/unnamed-chunk-2-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="gallery" class="section level2">
<h2>Gallery</h2>
<div id="npg" class="section level3">
<h3>NPG</h3>
<p>ature旗下期刊(Nature Publishing Group)配色风格</p>
<pre class="r"><code>p1_npg = p1 + scale_color_npg()
p2_npg = p2 + scale_fill_npg()
grid.arrange(p1_npg, p2_npg, ncol = 2)</code></pre>
<p><img src="/blog/2022-09-20-r-ggsci/index_files/figure-html/unnamed-chunk-3-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="aaas" class="section level3">
<h3>AAAS</h3>
<p>Science旗下期刊(American Association for the Advancement of Science)配色风格</p>
<pre class="r"><code>p1_aaas = p1 + scale_color_aaas()
p2_aaas = p2 + scale_fill_aaas()
grid.arrange(p1_aaas, p2_aaas, ncol = 2)</code></pre>
<p><img src="/blog/2022-09-20-r-ggsci/index_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="nejm" class="section level3">
<h3>NEJM</h3>
<p>新英格兰医学杂志(New England Journal of Medicine)配色风格</p>
<pre class="r"><code>p1_nejm = p1 + scale_color_nejm()
p2_nejm = p2 + scale_fill_nejm()
grid.arrange(p1_nejm, p2_nejm, ncol = 2)</code></pre>
<p><img src="/blog/2022-09-20-r-ggsci/index_files/figure-html/unnamed-chunk-5-1.png" width="672" />
<br></p>
</div>
<div id="lancet" class="section level3">
<h3>Lancet</h3>
<p>柳叶刀杂(Lancet)志配色风格</p>
<pre class="r"><code>p1_lancet = p1 + scale_color_lancet()
p2_lancet = p2 + scale_fill_lancet()
grid.arrange(p1_lancet, p2_lancet, ncol = 2)</code></pre>
<p><img src="/blog/2022-09-20-r-ggsci/index_files/figure-html/unnamed-chunk-6-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="jama" class="section level3">
<h3>JAMA</h3>
<p>美国医学学会杂志(Journal of the American Medical Association)配色风格</p>
<pre class="r"><code>p1_jama = p1 + scale_color_jama()
p2_jama = p2 + scale_fill_jama()
grid.arrange(p1_jama, p2_jama, ncol = 2)</code></pre>
<p><img src="/blog/2022-09-20-r-ggsci/index_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="jco" class="section level3">
<h3>JCO</h3>
<p>临床肿瘤学杂志(Journal of Clinical Oncology)配色风格</p>
<pre class="r"><code>p1_jco = p1 + scale_color_jco()
p2_jco = p2 + scale_fill_jco()
grid.arrange(p1_jco, p2_jco, ncol = 2)</code></pre>
<p><img src="/blog/2022-09-20-r-ggsci/index_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="d3" class="section level3">
<h3>D3</h3>
<p>d3.js配色风格</p>
<pre class="r"><code>p1_d3 = p1 + scale_color_d3()
p2_d3 = p2 + scale_fill_d3()
grid.arrange(p1_d3, p2_d3, ncol = 2)</code></pre>
<p><img src="/blog/2022-09-20-r-ggsci/index_files/figure-html/unnamed-chunk-9-1.png" width="672" /></p>
<p><br></p>
</div>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | ggpubr包让数据可视化更加优雅</title>
      <link>https://textdata.cn/blog/2022-09-20-r-ggplot2-ggpubr/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-20-r-ggplot2-ggpubr/</guid>
      <description>ggplot2能绘制很多美观图表，但是语法太难。ggpubr包让数据可视化更加优雅</description>
      <content:encoded><![CDATA[


<p><a href="https://ggplot2.tidyverse.org/">Hadley Wickham的ggplot2</a> 是一个出色且灵活的包，用于在 R 中进行优雅的数据可视化。但是，默认生成的图需要一些格式才能发送它们以供发布。 此外，要自定义 ggplot，语法是负责的，这提高了没有高级 R 编程技能的研究人员的难度。</p>
<p><strong><a href="https://rpkgs.datanovia.com/ggpubr">ggpubr包</a></strong> 提供了一些易于使用的功能，可以使用更简单的语法代码绘制出可供发表出版的图表。</p>
<p><br></p>
<div id="安装" class="section level2">
<h2>安装</h2>
<pre class="r"><code>install.packages(&quot;ggpubr&quot;)</code></pre>
<p><br>
## 折线图</p>
<pre class="r"><code>library(ggpubr)

df &lt;- data.frame(supp=rep(c(&quot;VC&quot;, &quot;OJ&quot;), each=3),
   dose=rep(c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;),2),
   len=c(6.8, 15, 33, 4.2, 10, 29.5))
#print(df)
#&gt;   supp dose  len
#&gt; 1   VC D0.5  6.8
#&gt; 2   VC   D1 15.0
#&gt; 3   VC   D2 33.0
#&gt; 4   OJ D0.5  4.2
#&gt; 5   OJ   D1 10.0
#&gt; 6   OJ   D2 29.5

# Plot &quot;len&quot; by &quot;dose&quot; and
# Change line types and point shapes by a second groups: &quot;supp&quot;
ggline(df, x=&quot;dose&quot;, y=&quot;len&quot;,
  linetype = &quot;supp&quot;, shape = &quot;supp&quot;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-2-1.png" width="672" /></p>
<pre class="r"><code># Change colors
# +++++++++++++++++++++

# Change color by group: &quot;supp&quot;
# Use custom color palette
ggline(df, x=&quot;dose&quot;, y=&quot;len&quot;,
   linetype = &quot;supp&quot;, shape = &quot;supp&quot;,
   color = &quot;supp&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;))</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-3-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="散点图" class="section level2">
<h2>散点图</h2>
<pre class="r"><code># Load data
data(&quot;mtcars&quot;)
df &lt;- mtcars
df$cyl &lt;- as.factor(df$cyl)
#head(df[, c(&quot;wt&quot;, &quot;mpg&quot;, &quot;cyl&quot;)], 3)
#&gt;                  wt  mpg cyl
#&gt; Mazda RX4     2.620 21.0   6
#&gt; Mazda RX4 Wag 2.875 21.0   6
#&gt; Datsun 710    2.320 22.8   4

# Textual annotation
# +++++++++++++++++
df$name &lt;- rownames(df)
ggscatter(df, x = &quot;wt&quot;, y = &quot;mpg&quot;,
   color = &quot;cyl&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;),
   label = &quot;name&quot;, repel = TRUE)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="饼形图" class="section level2">
<h2>饼形图</h2>
<pre class="r"><code>df &lt;- data.frame(
 group = c(&quot;Male&quot;, &quot;Female&quot;, &quot;Child&quot;),
  value = c(25, 25, 50))

#head(df)
#&gt;    group value
#&gt; 1   Male    25
#&gt; 2 Female    25
#&gt; 3  Child    50


# Basic pie charts
# ++++++++++++++++++++++++++++++++

ggpie(df, &quot;value&quot;, label = &quot;group&quot;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-5-1.png" width="672" /></p>
<pre class="r"><code>ggpie(df, &quot;value&quot;, label = &quot;group&quot;, fill=&quot;group&quot;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-6-1.png" width="672" /></p>
<pre class="r"><code>ggpie(df, &quot;value&quot;, label = &quot;group&quot;, fill=&quot;group&quot;, color=&#39;white&#39;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<pre class="r"><code>ggpie(df, &quot;value&quot;, label = &quot;group&quot;, fill=&quot;group&quot;, 
      palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;),
      color=&#39;white&#39;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
<pre class="r"><code>labs &lt;- paste0(df$group, &quot; (&quot;, df$value, &quot;%)&quot;)
#&gt; &quot;Male (25%)&quot;   &quot;Female (25%)&quot; &quot;Child (50%)&quot; 

ggpie(df, &quot;value&quot;, label = labs, fill=&quot;group&quot;, 
      palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;),
      color=&#39;white&#39;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-9-1.png" width="672" /></p>
<pre class="r"><code>labs &lt;- paste0(df$group, &quot; (&quot;, df$value, &quot;%)&quot;)
#&gt; &quot;Male (25%)&quot;   &quot;Female (25%)&quot; &quot;Child (50%)&quot; 

ggpie(df, &quot;value&quot;, label = labs, fill=&quot;group&quot;, 
      lab.pos = &quot;in&quot;, lab.font = &quot;white&quot;,
      palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;),
      color=&#39;white&#39;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-10-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="甜甜圈图" class="section level2">
<h2>甜甜圈图</h2>
<pre class="r"><code>#&gt; head(df)
#&gt;    group value
#&gt; 1   Male    25
#&gt; 2 Female    25
#&gt; 3  Child    50
#&gt; 
# Change the position and font color of labels
ggdonutchart(df, &quot;value&quot;, label = labs,
   lab.pos = &quot;in&quot;, lab.font = &quot;white&quot;,
   fill = &quot;group&quot;, color = &quot;white&quot;,
   palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;))</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-11-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="点图" class="section level2">
<h2>点图</h2>
<pre class="r"><code># Load data
data(&quot;mtcars&quot;)
dfm &lt;- mtcars
# Convert the cyl variable to a factor
dfm$cyl &lt;- as.factor(dfm$cyl)
# Add the name colums
dfm$name &lt;- rownames(dfm)
# Inspect the data
#head(dfm[, c(&quot;name&quot;, &quot;wt&quot;, &quot;mpg&quot;, &quot;cyl&quot;)])
#&gt;                                name    wt  mpg cyl
#&gt; Mazda RX4                 Mazda RX4 2.620 21.0   6
#&gt; Mazda RX4 Wag         Mazda RX4 Wag 2.875 21.0   6
#&gt; Datsun 710               Datsun 710 2.320 22.8   4
#&gt; Hornet 4 Drive       Hornet 4 Drive 3.215 21.4   6
#&gt; Hornet Sportabout Hornet Sportabout 3.440 18.7   8
#&gt; Valiant                     Valiant 3.460 18.1   6

ggdotchart(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;,
           color = &quot;cyl&quot;,                                # Color by groups
           palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), # Custom color palette
           sorting = &quot;ascending&quot;,                        # Sort value in descending order
           add = &quot;segments&quot;,                             # Add segments from y = 0 to dots
           ggtheme = theme_pubr()                        # ggplot2 theme
           )</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-12-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="密度图" class="section level2">
<h2>密度图</h2>
<pre class="r"><code>set.seed(1234)
wdata = data.frame(
   sex = factor(rep(c(&quot;F&quot;, &quot;M&quot;), each=200)),
   weight = c(rnorm(200, 55), rnorm(200, 58)))
#head(wdata, 4)
#&gt;   sex   weight
#&gt; 1   F 53.79293
#&gt; 2   F 55.27743
#&gt; 3   F 56.08444
#&gt; 4   F 52.65430

# Density plot with mean lines and marginal rug
# :::::::::::::::::::::::::::::::::::::::::::::::::::
# Change outline and fill colors by groups (&quot;sex&quot;)
# Use custom palette
ggdensity(wdata, x = &quot;weight&quot;, color=&#39;sex&#39;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-13-1.png" width="672" /></p>
<pre class="r"><code>ggdensity(wdata, x = &quot;weight&quot;, color=&#39;sex&#39;, add=&#39;mean&#39;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-14-1.png" width="672" /></p>
<pre class="r"><code>ggdensity(wdata, x = &quot;weight&quot;, color=&#39;sex&#39;, add=&#39;mean&#39;, rug=TRUE)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-15-1.png" width="672" /></p>
<pre class="r"><code>ggdensity(wdata, x = &quot;weight&quot;, color=&#39;sex&#39;, add=&#39;mean&#39;, rug=TRUE, fill=&#39;sex&#39;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-16-1.png" width="672" /></p>
<pre class="r"><code>ggdensity(wdata, x = &quot;weight&quot;, color=&#39;sex&#39;, add=&#39;mean&#39;, rug=TRUE, fill=&#39;sex&#39;, 
          palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;))</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-17-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="直方图" class="section level2">
<h2>直方图</h2>
<pre class="r"><code># Histogram plot with mean lines and marginal rug
# :::::::::::::::::::::::::::::::::::::::::::::::::::
# Change outline and fill colors by groups (&quot;sex&quot;)
# Use custom color palette
gghistogram(wdata, x = &quot;weight&quot;,
   add = &quot;mean&quot;, rug = TRUE,
   color = &quot;sex&quot;, fill = &quot;sex&quot;,
   palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;))</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-18-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="箱图" class="section level2">
<h2>箱图</h2>
<pre class="r"><code># Load data
data(&quot;ToothGrowth&quot;)
df &lt;- ToothGrowth
#head(df, 4)
#&gt;    len supp dose
#&gt; 1  4.2   VC  0.5
#&gt; 2 11.5   VC  0.5
#&gt; 3  7.3   VC  0.5
#&gt; 4  5.8   VC  0.5

# Box plots with jittered points
# :::::::::::::::::::::::::::::::::::::::::::::::::::
# Change outline colors by groups: dose
# Use custom color palette
# Add jitter points and change the shape by groups
 p &lt;- ggboxplot(df, x = &quot;dose&quot;, y = &quot;len&quot;, add = &quot;jitter&quot;,
                color = &quot;dose&quot;, shape = &quot;dose&quot;, 
                palette =c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;))
 p</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-19-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="条形图" class="section level2">
<h2>条形图</h2>
<pre class="r"><code># Load data
data(&quot;mtcars&quot;)
dfm &lt;- mtcars
# Convert the cyl variable to a factor
dfm$cyl &lt;- as.factor(dfm$cyl)
# Add the name colums
dfm$name &lt;- rownames(dfm)
# Inspect the data
#head(dfm[, c(&quot;name&quot;, &quot;wt&quot;, &quot;mpg&quot;, &quot;cyl&quot;)])
#&gt;                                name    wt  mpg cyl
#&gt; Mazda RX4                 Mazda RX4 2.620 21.0   6
#&gt; Mazda RX4 Wag         Mazda RX4 Wag 2.875 21.0   6
#&gt; Datsun 710               Datsun 710 2.320 22.8   4
#&gt; Hornet 4 Drive       Hornet 4 Drive 3.215 21.4   6
#&gt; Hornet Sportabout Hornet Sportabout 3.440 18.7   8
#&gt; Valiant                     Valiant 3.460 18.1   6

ggbarplot(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;,
          fill = &quot;cyl&quot;,               # change fill color by cyl
          color = &quot;white&quot;,            # Set bar border colors to white
          palette = &quot;jco&quot;,            # jco journal color palett. see ?ggpar
          sort.val = &quot;desc&quot;,          # Sort the value in dscending order
          sort.by.groups = TRUE,      # Sort inside each group
          x.text.angle = 90           # Rotate vertically x axis texts
          )</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-20-1.png" width="672" /></p>
<pre class="r"><code>ggbarplot(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;,
          fill = &quot;cyl&quot;,               # change fill color by cyl
          color = &quot;white&quot;,            # Set bar border colors to white
          palette = &quot;jco&quot;,            # jco journal color palett. see ?ggpar
          sort.val = &quot;desc&quot;,          # Sort the value in dscending order
          sort.by.groups = TRUE,      # Don&#39;t sort inside each group
          x.text.angle = 90,          # Rotate vertically x axis texts
          legend.title = &quot;CYL&quot;        # Set legend title
          )</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-21-1.png" width="672" />
<br></p>
</div>
<div id="表格" class="section level2">
<h2>表格</h2>
<pre class="r"><code>#Medium blue (mBlue) theme
ggtexttable(head(iris), rows = NULL, theme = ttheme(&quot;mBlue&quot;))</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-22-1.png" width="672" /></p>
<pre class="r"><code>main.title &lt;- &quot;Edgar Anderson&#39;s Iris Data&quot;
subtitle &lt;- paste0(
&quot;This famous (Fisher&#39;s or Anderson&#39;s) iris data set gives the measurements&quot;,
&quot; in centimeters of the variables sepal length and width and petal length and width,&quot;,
 &quot; respectively, for 50 flowers from each of 3 species of iris.&quot;,
 &quot; The species are Iris setosa, versicolor, and virginica.&quot;
) %&gt;%
 strwrap(width = 80) %&gt;%
 paste(collapse = &quot;\n&quot;)

tab &lt;- ggtexttable(head(iris), theme = ttheme(&quot;light&quot;))
tab %&gt;%
 tab_add_title(text = subtitle, face = &quot;plain&quot;, size = 10) %&gt;%
 tab_add_title(text = main.title, face = &quot;bold&quot;, padding = unit(0.1, &quot;line&quot;)) %&gt;%
 tab_add_footnote(text = &quot;*Table created using ggpubr&quot;, size = 10, face = &quot;italic&quot;)</code></pre>
<p><img src="/blog/2022-09-20-r-ggplot2-ggpubr/index_files/figure-html/unnamed-chunk-23-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  ggplot2简明绘图之直方图</title>
      <link>https://textdata.cn/blog/2022-09-04-r-ggplot2-histogram/</link>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-r-ggplot2-histogram/</guid>
      <description>教你理解图层、数geom、labs等函数，轻松上手ggplot2</description>
      <content:encoded><![CDATA[


<blockquote>
<p>原文: <a href="https://www.miriamheiss.com/posts/histogram-ggplot/" class="uri">https://www.miriamheiss.com/posts/histogram-ggplot/</a></p>
</blockquote>
<p>ggplot() 函数对任何数据科学家都是必不可少的, ta是一种非常简单的绘图函数。刚开始接触可能看起来很难， 不过不要害怕，因为一旦学了基础知识，一切都会变得清晰！ 让我们开始！</p>
<p>之前分享过 <a href="https://textdata.cn/blog/2022-09-04-r-ggplot2-simple-tutorial/">R语言 | ggplot2简明绘图之散点图</a>,是以散点图为例简单讲解ggplot2的绘图，今天我们将以直方图作为主讲图形。</p>
<p><img src="img/nobel-vis.png" /></p>
<p>直方图是另一种ggplot2常用的图形，与散点图类似，也是分多个图层进行逐层绘制。</p>
<p><br></p>
<div id="准备" class="section level2">
<h2>准备</h2>
<p>导入本文要用到的包</p>
<pre class="r"><code>library(tidyverse) </code></pre>
<pre><code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.0.9
## ✔ tidyr   1.2.0     ✔ stringr 1.4.1
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()</code></pre>
<pre class="r"><code>library(primer.data) #准备数据
library(showtext)</code></pre>
<pre><code>## Loading required package: sysfonts
## Loading required package: showtextdb</code></pre>
<pre class="r"><code>showtext_auto()  #显示中文

#install.packages(&quot;MetBrewer&quot;)
library(MetBrewer) #配色包</code></pre>
<p><br></p>
</div>
<div id="选择数据" class="section level2">
<h2>选择数据</h2>
<p>使用data()函数可以查看现有的数据集有哪些，</p>
<pre><code>data()</code></pre>
<p>这里选择nobel，使用View(nobel)可以在新打开一个窗口，方便了解数据</p>
<pre><code>View(nobel)</code></pre>
<p><img src="img/View.png" /></p>
<p><br></p>
</div>
<div id="画布gglot" class="section level2">
<h2>画布gglot</h2>
<p>画画需要画布，对于数据分析的绘图也是同理。导入相关R包后， 用ggplot函数构造一个画布。因为还没设定数据，所以这是一个空画布</p>
<pre class="r"><code>ggplot()</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-2-1.png" width="672" /></p>
<p>我们将使用 nobel数据集，传入数据的代码ggplot(data=nobel)</p>
<pre class="r"><code>ggplot(data=nobel)</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-3-1.png" width="672" /></p>
<p>画布看起来依然是空白的，不要紧张。理解这个之前类比PS这类绘图软件，将修图工作看做是很多个图层的叠加。现在我们使用时依然在最底层的ggplot图层，在ggplot函数内添加mapping=aes()参数，准备添加x轴、y轴、color。的图层。</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes())</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p>注意了，现在图层即将发生变化。我们选择设置x轴 <code>aes(x=year)</code></p>
<ul>
<li>x轴 year</li>
</ul>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-5-1.png" width="672" /></p>
<p>现在我们将开始添加高层次的图层，也会显示越来越多的信息。</p>
<p><br></p>
</div>
<div id="添加geom" class="section level2">
<h2>添加geom</h2>
<p>现在添加geom层，该层是通过 <code>+</code> 构建在ggplot层之上。这里使用 <code>geom_histogram()</code> 绘制直方图，</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year))+
  geom_histogram()</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-6-1.png" width="672" /></p>
<p>不错，接下来添加color</p>
<p><br></p>
</div>
<div id="fill和color" class="section level2">
<h2>fill和color</h2>
<p>按照学科对每个时期的诺奖进行专业分类，使用aes中的fill参数。</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year, fill=field))+
  geom_histogram()</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<p>但同一时期，不同专业之间没有边界区分，容易混乱。这里设置 <code>geom_histogram()</code> 的 <code>color="white"</code>。</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year, fill=field))+
  geom_histogram(color=&quot;white&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="更改配色" class="section level2">
<h2>更改配色</h2>
<p>更改geom层的颜色，所以该层紧贴geom层，且在geom层之上。设置方法可以使用 <code>scale_fill_manual()</code> 即可。<code>scale_fill_munual()</code> 中的values可以传入颜色字符串。</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year, fill=field))+
  scale_fill_manual(values=c(&quot;red&quot;,
                             &quot;orange&quot;,
                             &quot;yellow&quot;,
                             &quot;green&quot;,
                             &quot;blue&quot;,
                             &quot;purple&quot;))+
  geom_histogram(color=&quot;white&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-9-1.png" width="672" /></p>
<p>漂亮！ 这些颜色真的很明艳， <code>scale_fill_munual()</code> 还可以选择十六进制颜色字符串进行颜色自定义</p>
<pre class="r"><code>ggplot(data = nobel,
       mapping = aes(x = year,
                     fill = field)) +
  scale_fill_manual(values = c(&quot;#f73c39&quot;,
                               &quot;#f79b39&quot;,
                               &quot;#f7ee39&quot;,
                               &quot;#228c14&quot;,
                               &quot;#1e80c7&quot;,
                               &quot;#7c148c&quot;)) + 
  geom_histogram(color = &quot;white&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-10-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="配色包metbrewer" class="section level2">
<h2>配色包MetBrewer</h2>
<p>对于我们普通人而言， 不需要记住那么多颜色，只需要在配色方案中选择好看的配色即可。 <a href="https://github.com/BlakeRMills/MetBrewer">MetBrewer</a>是R语言的配色包，在文章开头已经提前导入了。下图是MetBrewer的配色方案，选择一种配色方案的名字,如Signac</p>
<p><img src="img/metbrewer_palettes.png" /></p>
<pre class="r"><code>ggplot(data = nobel,
       mapping = aes(x = year,
                     fill = field)) +
  #选择Signac配色方案，使用其中6种颜色
  scale_fill_manual(values = met.brewer(&#39;Signac&#39;, 6)) + 
  geom_histogram(color = &quot;white&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-11-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="标签labs" class="section level2">
<h2>标签labs</h2>
<p>现在我们需要用<code>labs()</code> 函数给图片添加标签图层。例如title、subtitle、caption、x、y、legend。</p>
<pre class="r"><code>ggplot(data = nobel,
       mapping = aes(x = year,
                     fill = field)) +
  scale_fill_manual(values = met.brewer(&quot;Signac&quot;, 6)) + 
  geom_histogram(color = &quot;white&quot;) +
  labs(title = &quot;Nobel prize laureate numbers have gone up in past 50 years&quot;,
       subtitle = &quot;Physics, Medicine, and Chemistry have largest numbers of laureates&quot;,
       x = &quot;Year&quot;,
       y = &quot;Number of laureates&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-12-1.png" width="672" /></p>
<p>现在x轴、y轴、标题都是大写，需要将field也大写。这里在labs(fill=‘Year’)更改year为Year</p>
<pre class="r"><code>ggplot(data = nobel,
       mapping = aes(x = year,
                     fill = field)) +
  scale_fill_manual(values = met.brewer(&quot;Signac&quot;, 6)) + 
  geom_histogram(color = &quot;white&quot;) +
  labs(title = &quot;Nobel prize laureate numbers have gone up in past 50 years&quot;,
       subtitle = &quot;Physics, Medicine, and Chemistry have largest numbers of laureates&quot;,
       x = &quot;Year&quot;,
       y = &quot;Number of laureates&quot;,
       fill=&#39;Field&#39;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-13-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="中文" class="section level2">
<h2>中文</h2>
<p>默认ggplot2不支持中文，为了能显示中文，使用showtext包。前文已提前导入并初始化</p>
<pre><code>library(showtext) #支持中文
showtext_auto()</code></pre>
<p>运行中文的代码</p>
<pre class="r"><code>#把学科转为中文
nobel2 &lt;- nobel %&gt;% 
  mutate(
    field = case_when(field==&#39;Chemistry&#39; ~ &#39;化学&#39;,
                       field==&#39;Economics&#39; ~ &#39;经济学&#39;,
                       field==&#39;Medicine&#39; ~ &#39;经济学&#39;,
                       field==&#39;Peace&#39; ~ &#39;和平&#39;,
                       field==&#39;Physics&#39; ~ &#39;物理学&#39;,
                       field==&#39;Literature&#39; ~ &#39;文学&#39;))



#绘图
ggplot(data = nobel2,
       mapping = aes(x = year,
                     fill = field)) +
  scale_fill_manual(values = met.brewer(&quot;Signac&quot;, 6)) + 
  geom_histogram(color = &quot;white&quot;) +
  labs(title = &quot;过去50年诺贝尔奖得主人数一直保持增长趋势&quot;,
       subtitle = &quot;物理学、医学和化学的获奖者人数最多&quot;,
       x = &quot;年份&quot;,
       y = &quot;获奖人数&quot;,
       fill=&#39;领域&#39;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-14-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | ggplot2简明绘图之动态图</title>
      <link>https://textdata.cn/blog/2022-09-04-r-ggplot2-ggplotly/</link>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-r-ggplot2-ggplotly/</guid>
      <description>轻松上手ggplotly</description>
      <content:encoded><![CDATA[
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/htmlwidgets/htmlwidgets.js"></script>
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/plotly-binding/plotly.js"></script>
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/typedarray/typedarray.min.js"></script>
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/jquery/jquery.min.js"></script>
<link href="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/crosstalk/css/crosstalk.min.css" rel="stylesheet" />
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/crosstalk/js/crosstalk.min.js"></script>
<link href="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/plotly-htmlwidgets-css/plotly-htmlwidgets.css" rel="stylesheet" />
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/plotly-main/plotly-latest.min.js"></script>


<blockquote>
<p>原文: <a href="https://www.miriamheiss.com/posts/graphing-with-ggplot/" class="uri">https://www.miriamheiss.com/posts/graphing-with-ggplot/</a></p>
</blockquote>
<p>ggplot() 函数对任何数据科学家都是必不可少的, ta是一种非常简单的绘图函数。刚开始接触可能看起来很难， 不过不要害怕，因为一旦学了基础知识，一切都会变得清晰！ 让我们开始！</p>
<p>ggplotly函数可以直接创建动态交互图标， 该函数内置于ggplot()中。 今天我们要绘制动态散点图</p>
<p><br></p>
<div id="准备" class="section level2">
<h2>准备</h2>
<p>导入本文要用到的包</p>
<pre class="r"><code>library(tidyverse) 
library(gapminder) #准备数据
library(MetBrewer) #配色包
library(plotly) #动态图</code></pre>
<p><br></p>
</div>
<div id="quick-start" class="section level2">
<h2>quick-start</h2>
<p>只要会ggplot，只增多一行代码即可绘制出动态图。鼠标悬浮处会显示一个黑色弹出框。</p>
<pre class="r"><code>library(plotly)
library(dplyr)
library(gapminder)

#选出2007年的数据
gapminder_2007 &lt;- gapminder %&gt;% 
  filter(year==&quot;2007&quot;) %&gt;% 
  dplyr::select(-year)

p &lt;- ggplot(data = gapminder_2007, 
            mapping = aes(x=gdpPercap, 
                          y=lifeExp, 
                          size = pop)) +
  geom_point(alpha=0.7)

#将静态图转为动态图
ggplotly(p)</code></pre>
<div id="htmlwidget-1" style="width:672px;height:480px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-1">{"x":{"data":[{"x":[974.5803384,5937.029526,6223.367465,4797.231267,12779.37964,34435.36744,36126.4927,29796.04834,1391.253792,33692.60508,1441.284873,3822.137084,7446.298803,12569.85177,9065.800825,10680.79282,1217.032994,430.0706916,1713.778686,2042.09524,36319.23501,706.016537,1704.063724,13171.63885,4959.114854,7006.580419,986.1478792,277.5518587,3632.557798,9645.06142,1544.750112,14619.22272,8948.102923,22833.30851,35278.41874,2082.481567,6025.374752,6873.262326,5581.180998,5728.353514,12154.08975,641.3695236,690.8055759,33207.0844,30470.0167,13206.48452,752.7497265,32170.37442,1327.60891,27538.41188,5186.050003,942.6542111,579.231743,1201.637154,3548.330846,39724.97867,18008.94444,36180.78919,2452.210407,3540.651564,11605.71449,4471.061906,40675.99635,25523.2771,28569.7197,7320.880262,31656.06806,4519.461171,1463.249282,1593.06548,23348.13973,47306.98978,10461.05868,1569.331442,414.5073415,12057.49928,1044.770126,759.3499101,12451.6558,1042.581557,1803.151496,10956.99112,11977.57496,3095.772271,9253.896111,3820.17523,823.6856205,944,4811.060429,1091.359778,36797.93332,25185.00911,2749.320965,619.6768924,2013.977305,49357.19017,22316.19287,2605.94758,9809.185636,4172.838464,7408.905561,3190.481016,15389.92468,20509.64777,19328.70901,7670.122558,10808.47561,863.0884639,1598.435089,21654.83194,1712.472136,9786.534714,862.5407561,47143.17964,18678.31435,25768.25759,926.1410683,9269.657808,28821.0637,3970.095407,2602.394995,4513.480643,33859.74835,37506.41907,4184.548089,28718.27684,1107.482182,7458.396327,882.9699438,18008.50924,7092.923025,8458.276384,1056.380121,33203.26128,42951.65309,10611.46299,11415.80569,2441.576404,3025.349798,2280.769906,1271.211593,469.7092981],"y":[43.828,76.423,72.301,42.731,75.32,81.235,79.829,75.635,64.062,79.441,56.728,65.554,74.852,50.728,72.39,73.005,52.295,49.58,59.723,50.43,80.653,44.741,50.651,78.553,72.961,72.889,65.152,46.462,55.322,78.782,48.328,75.748,78.273,76.486,78.332,54.791,72.235,74.994,71.338,71.878,51.579,58.04,52.947,79.313,80.657,56.735,59.448,79.406,60.022,79.483,70.259,56.007,46.388,60.916,70.198,82.208,73.338,81.757,64.698,70.65,70.964,59.545,78.885,80.745,80.546,72.567,82.603,72.535,54.11,67.297,78.623,77.588,71.993,42.592,45.678,73.952,59.443,48.303,74.241,54.467,64.164,72.801,76.195,66.803,74.543,71.164,42.082,62.069,52.906,63.785,79.762,80.204,72.899,56.867,46.859,80.196,75.64,65.483,75.537,71.752,71.421,71.688,75.563,78.098,78.746,76.442,72.476,46.242,65.528,72.777,63.062,74.002,42.568,79.972,74.663,77.926,48.159,49.339,80.941,72.396,58.556,39.613,80.884,81.701,74.143,78.4,52.517,70.616,58.42,69.819,73.923,71.777,51.542,79.425,78.242,76.384,73.747,74.249,73.422,62.698,42.384,43.487],"text":["gdpPercap:   974.5803<br />lifeExp: 43.828<br />pop:   31889923","gdpPercap:  5937.0295<br />lifeExp: 76.423<br />pop:    3600523","gdpPercap:  6223.3675<br />lifeExp: 72.301<br />pop:   33333216","gdpPercap:  4797.2313<br />lifeExp: 42.731<br />pop:   12420476","gdpPercap: 12779.3796<br />lifeExp: 75.320<br />pop:   40301927","gdpPercap: 34435.3674<br />lifeExp: 81.235<br />pop:   20434176","gdpPercap: 36126.4927<br />lifeExp: 79.829<br />pop:    8199783","gdpPercap: 29796.0483<br />lifeExp: 75.635<br />pop:     708573","gdpPercap:  1391.2538<br />lifeExp: 64.062<br />pop:  150448339","gdpPercap: 33692.6051<br />lifeExp: 79.441<br />pop:   10392226","gdpPercap:  1441.2849<br />lifeExp: 56.728<br />pop:    8078314","gdpPercap:  3822.1371<br />lifeExp: 65.554<br />pop:    9119152","gdpPercap:  7446.2988<br />lifeExp: 74.852<br />pop:    4552198","gdpPercap: 12569.8518<br />lifeExp: 50.728<br />pop:    1639131","gdpPercap:  9065.8008<br />lifeExp: 72.390<br />pop:  190010647","gdpPercap: 10680.7928<br />lifeExp: 73.005<br />pop:    7322858","gdpPercap:  1217.0330<br />lifeExp: 52.295<br />pop:   14326203","gdpPercap:   430.0707<br />lifeExp: 49.580<br />pop:    8390505","gdpPercap:  1713.7787<br />lifeExp: 59.723<br />pop:   14131858","gdpPercap:  2042.0952<br />lifeExp: 50.430<br />pop:   17696293","gdpPercap: 36319.2350<br />lifeExp: 80.653<br />pop:   33390141","gdpPercap:   706.0165<br />lifeExp: 44.741<br />pop:    4369038","gdpPercap:  1704.0637<br />lifeExp: 50.651<br />pop:   10238807","gdpPercap: 13171.6388<br />lifeExp: 78.553<br />pop:   16284741","gdpPercap:  4959.1149<br />lifeExp: 72.961<br />pop: 1318683096","gdpPercap:  7006.5804<br />lifeExp: 72.889<br />pop:   44227550","gdpPercap:   986.1479<br />lifeExp: 65.152<br />pop:     710960","gdpPercap:   277.5519<br />lifeExp: 46.462<br />pop:   64606759","gdpPercap:  3632.5578<br />lifeExp: 55.322<br />pop:    3800610","gdpPercap:  9645.0614<br />lifeExp: 78.782<br />pop:    4133884","gdpPercap:  1544.7501<br />lifeExp: 48.328<br />pop:   18013409","gdpPercap: 14619.2227<br />lifeExp: 75.748<br />pop:    4493312","gdpPercap:  8948.1029<br />lifeExp: 78.273<br />pop:   11416987","gdpPercap: 22833.3085<br />lifeExp: 76.486<br />pop:   10228744","gdpPercap: 35278.4187<br />lifeExp: 78.332<br />pop:    5468120","gdpPercap:  2082.4816<br />lifeExp: 54.791<br />pop:     496374","gdpPercap:  6025.3748<br />lifeExp: 72.235<br />pop:    9319622","gdpPercap:  6873.2623<br />lifeExp: 74.994<br />pop:   13755680","gdpPercap:  5581.1810<br />lifeExp: 71.338<br />pop:   80264543","gdpPercap:  5728.3535<br />lifeExp: 71.878<br />pop:    6939688","gdpPercap: 12154.0897<br />lifeExp: 51.579<br />pop:     551201","gdpPercap:   641.3695<br />lifeExp: 58.040<br />pop:    4906585","gdpPercap:   690.8056<br />lifeExp: 52.947<br />pop:   76511887","gdpPercap: 33207.0844<br />lifeExp: 79.313<br />pop:    5238460","gdpPercap: 30470.0167<br />lifeExp: 80.657<br />pop:   61083916","gdpPercap: 13206.4845<br />lifeExp: 56.735<br />pop:    1454867","gdpPercap:   752.7497<br />lifeExp: 59.448<br />pop:    1688359","gdpPercap: 32170.3744<br />lifeExp: 79.406<br />pop:   82400996","gdpPercap:  1327.6089<br />lifeExp: 60.022<br />pop:   22873338","gdpPercap: 27538.4119<br />lifeExp: 79.483<br />pop:   10706290","gdpPercap:  5186.0500<br />lifeExp: 70.259<br />pop:   12572928","gdpPercap:   942.6542<br />lifeExp: 56.007<br />pop:    9947814","gdpPercap:   579.2317<br />lifeExp: 46.388<br />pop:    1472041","gdpPercap:  1201.6372<br />lifeExp: 60.916<br />pop:    8502814","gdpPercap:  3548.3308<br />lifeExp: 70.198<br />pop:    7483763","gdpPercap: 39724.9787<br />lifeExp: 82.208<br />pop:    6980412","gdpPercap: 18008.9444<br />lifeExp: 73.338<br />pop:    9956108","gdpPercap: 36180.7892<br />lifeExp: 81.757<br />pop:     301931","gdpPercap:  2452.2104<br />lifeExp: 64.698<br />pop: 1110396331","gdpPercap:  3540.6516<br />lifeExp: 70.650<br />pop:  223547000","gdpPercap: 11605.7145<br />lifeExp: 70.964<br />pop:   69453570","gdpPercap:  4471.0619<br />lifeExp: 59.545<br />pop:   27499638","gdpPercap: 40675.9964<br />lifeExp: 78.885<br />pop:    4109086","gdpPercap: 25523.2771<br />lifeExp: 80.745<br />pop:    6426679","gdpPercap: 28569.7197<br />lifeExp: 80.546<br />pop:   58147733","gdpPercap:  7320.8803<br />lifeExp: 72.567<br />pop:    2780132","gdpPercap: 31656.0681<br />lifeExp: 82.603<br />pop:  127467972","gdpPercap:  4519.4612<br />lifeExp: 72.535<br />pop:    6053193","gdpPercap:  1463.2493<br />lifeExp: 54.110<br />pop:   35610177","gdpPercap:  1593.0655<br />lifeExp: 67.297<br />pop:   23301725","gdpPercap: 23348.1397<br />lifeExp: 78.623<br />pop:   49044790","gdpPercap: 47306.9898<br />lifeExp: 77.588<br />pop:    2505559","gdpPercap: 10461.0587<br />lifeExp: 71.993<br />pop:    3921278","gdpPercap:  1569.3314<br />lifeExp: 42.592<br />pop:    2012649","gdpPercap:   414.5073<br />lifeExp: 45.678<br />pop:    3193942","gdpPercap: 12057.4993<br />lifeExp: 73.952<br />pop:    6036914","gdpPercap:  1044.7701<br />lifeExp: 59.443<br />pop:   19167654","gdpPercap:   759.3499<br />lifeExp: 48.303<br />pop:   13327079","gdpPercap: 12451.6558<br />lifeExp: 74.241<br />pop:   24821286","gdpPercap:  1042.5816<br />lifeExp: 54.467<br />pop:   12031795","gdpPercap:  1803.1515<br />lifeExp: 64.164<br />pop:    3270065","gdpPercap: 10956.9911<br />lifeExp: 72.801<br />pop:    1250882","gdpPercap: 11977.5750<br />lifeExp: 76.195<br />pop:  108700891","gdpPercap:  3095.7723<br />lifeExp: 66.803<br />pop:    2874127","gdpPercap:  9253.8961<br />lifeExp: 74.543<br />pop:     684736","gdpPercap:  3820.1752<br />lifeExp: 71.164<br />pop:   33757175","gdpPercap:   823.6856<br />lifeExp: 42.082<br />pop:   19951656","gdpPercap:   944.0000<br />lifeExp: 62.069<br />pop:   47761980","gdpPercap:  4811.0604<br />lifeExp: 52.906<br />pop:    2055080","gdpPercap:  1091.3598<br />lifeExp: 63.785<br />pop:   28901790","gdpPercap: 36797.9333<br />lifeExp: 79.762<br />pop:   16570613","gdpPercap: 25185.0091<br />lifeExp: 80.204<br />pop:    4115771","gdpPercap:  2749.3210<br />lifeExp: 72.899<br />pop:    5675356","gdpPercap:   619.6769<br />lifeExp: 56.867<br />pop:   12894865","gdpPercap:  2013.9773<br />lifeExp: 46.859<br />pop:  135031164","gdpPercap: 49357.1902<br />lifeExp: 80.196<br />pop:    4627926","gdpPercap: 22316.1929<br />lifeExp: 75.640<br />pop:    3204897","gdpPercap:  2605.9476<br />lifeExp: 65.483<br />pop:  169270617","gdpPercap:  9809.1856<br />lifeExp: 75.537<br />pop:    3242173","gdpPercap:  4172.8385<br />lifeExp: 71.752<br />pop:    6667147","gdpPercap:  7408.9056<br />lifeExp: 71.421<br />pop:   28674757","gdpPercap:  3190.4810<br />lifeExp: 71.688<br />pop:   91077287","gdpPercap: 15389.9247<br />lifeExp: 75.563<br />pop:   38518241","gdpPercap: 20509.6478<br />lifeExp: 78.098<br />pop:   10642836","gdpPercap: 19328.7090<br />lifeExp: 78.746<br />pop:    3942491","gdpPercap:  7670.1226<br />lifeExp: 76.442<br />pop:     798094","gdpPercap: 10808.4756<br />lifeExp: 72.476<br />pop:   22276056","gdpPercap:   863.0885<br />lifeExp: 46.242<br />pop:    8860588","gdpPercap:  1598.4351<br />lifeExp: 65.528<br />pop:     199579","gdpPercap: 21654.8319<br />lifeExp: 72.777<br />pop:   27601038","gdpPercap:  1712.4721<br />lifeExp: 63.062<br />pop:   12267493","gdpPercap:  9786.5347<br />lifeExp: 74.002<br />pop:   10150265","gdpPercap:   862.5408<br />lifeExp: 42.568<br />pop:    6144562","gdpPercap: 47143.1796<br />lifeExp: 79.972<br />pop:    4553009","gdpPercap: 18678.3144<br />lifeExp: 74.663<br />pop:    5447502","gdpPercap: 25768.2576<br />lifeExp: 77.926<br />pop:    2009245","gdpPercap:   926.1411<br />lifeExp: 48.159<br />pop:    9118773","gdpPercap:  9269.6578<br />lifeExp: 49.339<br />pop:   43997828","gdpPercap: 28821.0637<br />lifeExp: 80.941<br />pop:   40448191","gdpPercap:  3970.0954<br />lifeExp: 72.396<br />pop:   20378239","gdpPercap:  2602.3950<br />lifeExp: 58.556<br />pop:   42292929","gdpPercap:  4513.4806<br />lifeExp: 39.613<br />pop:    1133066","gdpPercap: 33859.7484<br />lifeExp: 80.884<br />pop:    9031088","gdpPercap: 37506.4191<br />lifeExp: 81.701<br />pop:    7554661","gdpPercap:  4184.5481<br />lifeExp: 74.143<br />pop:   19314747","gdpPercap: 28718.2768<br />lifeExp: 78.400<br />pop:   23174294","gdpPercap:  1107.4822<br />lifeExp: 52.517<br />pop:   38139640","gdpPercap:  7458.3963<br />lifeExp: 70.616<br />pop:   65068149","gdpPercap:   882.9699<br />lifeExp: 58.420<br />pop:    5701579","gdpPercap: 18008.5092<br />lifeExp: 69.819<br />pop:    1056608","gdpPercap:  7092.9230<br />lifeExp: 73.923<br />pop:   10276158","gdpPercap:  8458.2764<br />lifeExp: 71.777<br />pop:   71158647","gdpPercap:  1056.3801<br />lifeExp: 51.542<br />pop:   29170398","gdpPercap: 33203.2613<br />lifeExp: 79.425<br />pop:   60776238","gdpPercap: 42951.6531<br />lifeExp: 78.242<br />pop:  301139947","gdpPercap: 10611.4630<br />lifeExp: 76.384<br />pop:    3447496","gdpPercap: 11415.8057<br />lifeExp: 73.747<br />pop:   26084662","gdpPercap:  2441.5764<br />lifeExp: 74.249<br />pop:   85262356","gdpPercap:  3025.3498<br />lifeExp: 73.422<br />pop:    4018332","gdpPercap:  2280.7699<br />lifeExp: 62.698<br />pop:   22211743","gdpPercap:  1271.2116<br />lifeExp: 42.384<br />pop:   11746035","gdpPercap:   469.7093<br />lifeExp: 43.487<br />pop:   12311143"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,0,0,1)","opacity":0.7,"size":[6.70929835135528,4.73930360976545,6.77527173254923,5.598900411863,7.07528369289545,6.12061399094626,5.2515712457991,4.1508288847182,10.1588656081799,5.44107849786917,5.24035330707835,5.33385387656466,4.86531670289218,4.40395768399738,10.9497220287062,5.16855282584858,5.7356199392208,5.26901439581437,5.72211801075065,5.9564773609874,6.77784403625228,4.8422259478741,5.42852631166044,5.86681801798997,22.6771653543307,7.23282911414924,4.15169850163956,7.9562662998771,4.76713328307226,4.81182340745332,5.97611663817011,4.85794694387522,5.52260397354913,5.42769965273683,4.97410786436283,4.06305719383881,5.35122378867242,5.69571313317988,8.43636871732964,5.1306777542305,4.08813627550005,4.90865391372741,8.32592567062337,4.94778140481952,7.84043376621969,4.36262596871136,4.41454467512776,8.49809123744673,6.25770233060098,5.46648280699294,5.61021330347734,5.40445197132612,4.3666011970112,5.27919109958551,5.18415329737334,5.13475345805415,5.40514308400654,3.9460291298415,21.1203680953071,11.5573968303758,8.11057131553749,6.49879524068774,4.8085649745634,5.07824026167466,7.74130405516196,4.6155666029278,9.65077587363648,5.03869129857133,6.87649613589243,6.28100350114513,7.4168446506104,4.56983839481089,4.78354392302204,4.480300710223,4.68010775450673,5.03693920169262,6.0461636385333,5.66517797748393,6.36196165910748,5.5697344023561,4.69148323166173,4.31315004312066,9.20063061292984,4.63065651672448,4.14203032052794,6.79437672410524,6.09253246174489,7.36876387589759,4.48845333089755,6.56775273775666,5.88528441607637,4.80944439195868,4.99737544049698,5.6338762963756,9.82271393327331,4.87472139425141,4.68175365529605,10.5466615830696,4.68733172329479,5.10307852744492,6.55670348636785,8.74086596862592,7.00115515259145,5.46138101214586,4.78640121163658,4.18215900239245,6.22484391610449,5.3111594952501,3.77952755905512,6.50384061768477,5.58747695964146,5.42123845033248,5.04848038390226,4.86541785279541,4.97176812735327,4.47964255788798,5.33382085391144,7.22380829377829,7.0812884751231,6.11737587407916,7.1561065468969,4.282361176813,5.32616181946541,5.19097245574501,6.05493528307165,6.27409491409121,6.98520027409899,7.97119993399054,5.00028803920838,4.26132881438327,5.43159101796171,8.16356363915206,6.580769078434,7.83015990857845,12.807919245623,4.71746231550028,6.42738713411734,8.57951329437571,4.79655097614072,6.22127948111281,5.54798462578679,5.59074371141117],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","showlegend":false,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(235,235,235,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[-2176.430056865,51811.172085565],"tickmode":"array","ticktext":["0","10000","20000","30000","40000","50000"],"tickvals":[0,10000,20000,30000,40000,50000],"categoryorder":"array","categoryarray":["0","10000","20000","30000","40000","50000"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(255,255,255,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"y","title":{"text":"gdpPercap","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[37.4635,84.7525],"tickmode":"array","ticktext":["40","50","60","70","80"],"tickvals":[40,50,60,70,80],"categoryorder":"array","categoryarray":["40","50","60","70","80"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(255,255,255,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"x","title":{"text":"lifeExp","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":null,"line":{"color":null,"width":0,"linetype":[]},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":false,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"pop","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"6d507cad2d7b":{"x":{},"y":{},"size":{},"type":"scatter"}},"cur_data":"6d507cad2d7b","visdat":{"6d507cad2d7b":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
<div id="画布gglot" class="section level2">
<h2>画布gglot</h2>
<p>用ggplot函数构造一个画布, 使用gapminder数据集</p>
<p><img src="img/gapminder.png" /></p>
<ul>
<li>将gdpPercap设定为x轴</li>
<li>将lifeExp设定为y轴</li>
</ul>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,
                     y = lifeExp))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-3-1.png" width="672" /></p>
<p>现在我们将开始添加高层次的图层，会显示越来越多的信息。</p>
<p><br></p>
</div>
<div id="添加geom" class="section level2">
<h2>添加geom</h2>
<p>现在添加geom层，该层是通过 <code>+</code> 构建在ggplot层之上。这里使用 <code>geom_ponit()</code> 绘制散点图，</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,
                     y = lifeExp))+
  geom_point() #透明度</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p>生成的图仅仅是黑白图，为了美观，可以设置为更靓丽的颜色。</p>
<p><br></p>
</div>
<div id="aescolor" class="section level2">
<h2>aes(color)</h2>
<p>二维空间显示三维信息，
- x轴 gdpPercap
- y轴 lifeExp
- color continent</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     color=continent))+ #大陆
  geom_point() </code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-5-1.png" width="672" /></p>
<p>现在可以清晰地看出哪些大陆更加富裕、更加健康, 要是配色再好看点就好了。</p>
<p><br></p>
</div>
<div id="调整配色" class="section level2">
<h2>调整配色</h2>
<p>在 [<a href="https://textdata.cn/blog/2022-09-04-r-ggplot2-histogram/" class="uri">https://textdata.cn/blog/2022-09-04-r-ggplot2-histogram/</a>]中首次使用了MetBrewer配色包。</p>
<p>这里会用5个具有区分度的颜色，我们选择 <code>Lakota</code> 配色方案。同时，在图中绘制对应的人口规模，以size方式显示。</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     size = pop,        #人口
                     color=continent))+ #大陆
  geom_point()+                
  scale_color_manual(values=met.brewer(&quot;Lakota&quot;, 5))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-6-1.png" width="672" /></p>
<p>为了让数据更加平滑，对x轴取对数</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     size = pop,        #人口
                     color=continent))+ #大陆
  geom_point()+                
  scale_color_manual(values = met.brewer(&quot;Lakota&quot;, 5))+
  scale_x_log10(breaks = c(400, 4000, 40000))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="更换主题" class="section level2">
<h2>更换主题</h2>
<p>使用 <code>theme_bw</code> 更改绘图的主题风格</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     size = pop,        #人口
                     color=continent))+ #大陆
  geom_point()+                
  scale_color_manual(values = met.brewer(&quot;Lakota&quot;, 5))+
  scale_x_log10(breaks = c(400, 4000, 40000))+
  theme_bw()</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="标签labs" class="section level2">
<h2>标签labs</h2>
<pre class="r"><code>p2 &lt;- ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     size = pop,        #人口
                     color=continent,   #大陆
                     text = country))+  #国家
  geom_point()+                #透明度
  scale_color_manual(values = met.brewer(&quot;Lakota&quot;, 5))+
  scale_x_log10(breaks = c(400, 4000, 40000))+
  theme_bw()+
  labs(title = &quot;Gdp and Life Expectancy in 142 countries&quot;,
       subtitle = &quot;Most of Africa is sick and poor,\nwhile Europe is thriving and rich&quot;,
       x = &quot;Gdp Per Capita&quot;,
       y = &quot;Life Expectancy&quot;,
       fill = &quot;Continent&quot;,
       size = &quot;Population&quot;)

p2</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-9-1.png" width="672" /></p>
<p>使用ggplotly将p2从静态图转为动态图， 鼠标悬浮处弹出圆圈对应的国家。</p>
<pre class="r"><code>ggplotly(p2, tooltip = &quot;text&quot;)</code></pre>
<div id="htmlwidget-2" style="width:672px;height:480px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-2">{"x":{"data":[{"x":[3.79402544509666,3.68099065562682,3.1587498285201,4.09933015629768,3.08530235219712,2.63353984732021,3.31007599301138,2.848814873635,3.23148583131337,2.99394204506796,2.44334414004637,3.56021253312911,3.18885823537455,3.31858116595608,3.74672610693845,4.08472243900371,2.80710831941093,2.83935583435696,4.12078722664154,2.87665060639063,3.1230701584329,2.9743524119827,2.76285235400399,3.16531831968284,3.19571467604724,2.61753222691212,4.08125724466051,3.01902074595738,2.88044194586588,3.0181100381011,3.25603221652431,4.03969130967891,3.58208328429303,2.91576148434958,3.68224081186337,2.79216530171644,3.30405457229069,3.88480230343241,2.93605531183875,3.20369500466057,3.23362351372365,2.93577962517273,2.96667714274902,3.96706370233863,3.41537321502711,3.65451158423759,3.04433674769752,2.94594592049266,3.85082524675123,3.02382022004224,3.10421784482941,2.67182915731664],"y":[72.301,42.731,56.728,50.728,52.295,49.58,50.43,44.741,50.651,65.152,46.462,55.322,48.328,54.791,71.338,51.579,58.04,52.947,56.735,59.448,60.022,56.007,46.388,54.11,42.592,45.678,73.952,59.443,48.303,54.467,64.164,72.801,71.164,42.082,52.906,56.867,46.859,76.442,46.242,65.528,63.062,42.568,48.159,49.339,58.556,39.613,52.517,58.42,73.923,51.542,42.384,43.487],"text":["Algeria","Angola","Benin","Botswana","Burkina Faso","Burundi","Cameroon","Central African Republic","Chad","Comoros","Congo, Dem. Rep.","Congo, Rep.","Cote d'Ivoire","Djibouti","Egypt","Equatorial Guinea","Eritrea","Ethiopia","Gabon","Gambia","Ghana","Guinea","Guinea-Bissau","Kenya","Lesotho","Liberia","Libya","Madagascar","Malawi","Mali","Mauritania","Mauritius","Morocco","Mozambique","Namibia","Niger","Nigeria","Reunion","Rwanda","Sao Tome and Principe","Senegal","Sierra Leone","Somalia","South Africa","Sudan","Swaziland","Tanzania","Togo","Tunisia","Uganda","Zambia","Zimbabwe"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(4,163,189,1)","opacity":1,"size":[6.77527173254923,5.598900411863,5.24035330707835,4.40395768399738,5.7356199392208,5.26901439581437,5.9564773609874,4.8422259478741,5.42852631166044,4.15169850163956,7.9562662998771,4.76713328307226,5.97611663817011,4.06305719383881,8.43636871732964,4.08813627550005,4.90865391372741,8.32592567062337,4.36262596871136,4.41454467512776,6.25770233060098,5.40445197132612,4.3666011970112,6.87649613589243,4.480300710223,4.68010775450673,5.03693920169262,6.0461636385333,5.66517797748393,5.5697344023561,4.69148323166173,4.31315004312066,6.79437672410524,6.09253246174489,4.48845333089755,5.6338762963756,9.82271393327331,4.18215900239245,5.3111594952501,3.77952755905512,5.58747695964146,5.04848038390226,5.33382085391144,7.22380829377829,7.1561065468969,4.282361176813,6.98520027409899,5.00028803920838,5.43159101796171,6.580769078434,5.54798462578679,5.59074371141117],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(4,163,189,1)"}},"hoveron":"points","name":"Africa","legendgroup":"Africa","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[4.10650977201769,3.58230625931688,3.95740617340857,4.56013669242519,4.11963981438709,3.84550611104731,3.98430499758718,3.95173097080165,3.77998406330737,3.83716291957619,3.75802981175127,3.71483669984604,3.0797733480287,3.55002410662006,3.86456330372846,4.07836889751077,3.43922544380543,3.99163295350919,3.6204315729333,3.86975405900188,4.28620284789525,4.25547776303394,4.632979883279,4.02577526370184,4.05750656798335],"y":[75.32,65.554,72.39,80.653,78.553,72.889,78.782,78.273,72.235,74.994,71.878,70.259,60.916,70.198,72.567,76.195,72.899,75.537,71.752,71.421,78.746,69.819,78.242,76.384,73.747],"text":["Argentina","Bolivia","Brazil","Canada","Chile","Colombia","Costa Rica","Cuba","Dominican Republic","Ecuador","El Salvador","Guatemala","Haiti","Honduras","Jamaica","Mexico","Nicaragua","Panama","Paraguay","Peru","Puerto Rico","Trinidad and Tobago","United States","Uruguay","Venezuela"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(240,190,61,1)","opacity":1,"size":[7.07528369289545,5.33385387656466,10.9497220287062,6.77784403625228,5.86681801798997,7.23282911414924,4.81182340745332,5.52260397354913,5.35122378867242,5.69571313317988,5.1306777542305,5.61021330347734,5.27919109958551,5.18415329737334,4.6155666029278,9.20063061292984,4.99737544049698,4.68733172329479,5.10307852744492,6.55670348636785,4.78640121163658,4.26132881438327,12.807919245623,4.71746231550028,6.42738713411734],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(240,190,61,1)"}},"hoveron":"points","name":"Americas","legendgroup":"Americas","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[2.98881764549129,4.47415867018597,3.143406361057,3.23395473727517,3.6954041667466,4.59906367268864,3.38955773121288,3.54908318988216,4.06467188236304,3.65041068311967,4.40693643553008,4.50045697098462,3.65508665949928,3.20223362703668,4.3682522837381,4.67492531406996,4.01957563822304,4.09522710701315,3.49076900592376,2.97497199429807,3.03796794384465,4.34862010618943,3.41596567540354,3.50385616482709,4.33555481758265,4.67341887079622,3.59880094359832,3.62164856315343,4.45815837772449,3.87264545733796,3.38767031916547,3.4807755960326,3.35808147396803],"y":[43.828,75.635,64.062,59.723,72.961,82.208,64.698,70.65,70.964,59.545,80.745,82.603,72.535,67.297,78.623,77.588,71.993,74.241,66.803,62.069,63.785,75.64,65.483,71.688,72.777,79.972,72.396,74.143,78.4,70.616,74.249,73.422,62.698],"text":["Afghanistan","Bahrain","Bangladesh","Cambodia","China","Hong Kong, China","India","Indonesia","Iran","Iraq","Israel","Japan","Jordan","Korea, Dem. Rep.","Korea, Rep.","Kuwait","Lebanon","Malaysia","Mongolia","Myanmar","Nepal","Oman","Pakistan","Philippines","Saudi Arabia","Singapore","Sri Lanka","Syria","Taiwan","Thailand","Vietnam","West Bank and Gaza","Yemen, Rep."],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(147,30,24,1)","opacity":1,"size":[6.70929835135528,4.1508288847182,10.1588656081799,5.72211801075065,22.6771653543307,5.13475345805415,21.1203680953071,11.5573968303758,8.11057131553749,6.49879524068774,5.07824026167466,9.65077587363648,5.03869129857133,6.28100350114513,7.4168446506104,4.56983839481089,4.78354392302204,6.36196165910748,4.63065651672448,7.36876387589759,6.56775273775666,4.68175365529605,10.5466615830696,8.74086596862592,6.50384061768477,4.86541785279541,6.11737587407916,6.05493528307165,6.27409491409121,7.97119993399054,8.57951329437571,4.79655097614072,6.22127948111281],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(147,30,24,1)"}},"hoveron":"points","name":"Asia","legendgroup":"Asia","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[3.77356920876217,4.55782580062218,4.52753459151331,3.87194045947979,4.02860349094832,4.16492428251317,4.35856884462783,4.54750911081685,4.52123074598147,4.48387269225076,4.50745611553652,4.43993889119905,4.25548825822109,4.55847803563392,4.60933819969144,4.45590597950278,3.96632461957789,4.56582342810493,4.69335042800253,4.18723649435127,4.31195820191596,4.03376444688129,3.990628940935,4.27133768016358,4.41108505321789,4.4597100052953,4.52968372605252,4.57410560181062,3.92728187211911,4.52118074293136],"y":[76.423,79.829,79.441,74.852,73.005,75.748,76.486,78.332,79.313,80.657,79.406,79.483,73.338,81.757,78.885,80.546,74.543,79.762,80.196,75.563,78.098,72.476,74.002,74.663,77.926,80.941,80.884,81.701,71.777,79.425],"text":["Albania","Austria","Belgium","Bosnia and Herzegovina","Bulgaria","Croatia","Czech Republic","Denmark","Finland","France","Germany","Greece","Hungary","Iceland","Ireland","Italy","Montenegro","Netherlands","Norway","Poland","Portugal","Romania","Serbia","Slovak Republic","Slovenia","Spain","Sweden","Switzerland","Turkey","United Kingdom"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(218,121,1,1)","opacity":1,"size":[4.73930360976545,5.2515712457991,5.44107849786917,4.86531670289218,5.16855282584858,4.85794694387522,5.42769965273683,4.97410786436283,4.94778140481952,7.84043376621969,8.49809123744673,5.46648280699294,5.40514308400654,3.9460291298415,4.8085649745634,7.74130405516196,4.14203032052794,5.88528441607637,4.87472139425141,7.00115515259145,5.46138101214586,6.22484391610449,5.42123845033248,4.97176812735327,4.47964255788798,7.0812884751231,5.32616181946541,5.19097245574501,8.16356363915206,7.83015990857845],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(218,121,1,1)"}},"hoveron":"points","name":"Europe","legendgroup":"Europe","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[4.53700472145269,4.40114211228811],"y":[81.235,80.204],"text":["Australia","New Zealand"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(36,125,63,1)","opacity":1,"size":[6.12061399094626,4.80944439195868],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(36,125,63,1)"}},"hoveron":"points","name":"Oceania","legendgroup":"Oceania","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":43.7625570776256,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"title":{"text":"Gdp and Life Expectancy in 142 countries","font":{"color":"rgba(0,0,0,1)","family":"","size":17.5342465753425},"x":0,"xref":"paper"},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[2.33084382564856,4.80585074240034],"tickmode":"array","ticktext":["400","4000","40000"],"tickvals":[2.60205999132796,3.60205999132796,4.60205999132796],"categoryorder":"array","categoryarray":["400","4000","40000"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(235,235,235,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"y","title":{"text":"Gdp Per Capita","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[37.4635,84.7525],"tickmode":"array","ticktext":["40","50","60","70","80"],"tickvals":[40,50,60,70,80],"categoryorder":"array","categoryarray":["40","50","60","70","80"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(235,235,235,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"x","title":{"text":"Life Expectancy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(51,51,51,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"continent<br />Population","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"6d507d3656d6":{"x":{},"y":{},"size":{},"colour":{},"text":{},"type":"scatter"}},"cur_data":"6d507d3656d6","visdat":{"6d507d3656d6":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  ggplot2简明绘图之散点图</title>
      <link>https://textdata.cn/blog/2022-09-04-r-ggplot2-scatter/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-r-ggplot2-scatter/</guid>
      <description>教你理解图层、数geom、labs等函数，轻松上手ggplot2</description>
      <content:encoded><![CDATA[


<blockquote>
<p>原文: <a href="https://www.miriamheiss.com/posts/graphing-with-ggplot/" class="uri">https://www.miriamheiss.com/posts/graphing-with-ggplot/</a></p>
</blockquote>
<p>ggplot() 函数对任何数据科学家都是必不可少的, ta是一种非常简单的绘图函数。刚开始接触可能看起来很难， 不过不要害怕，因为一旦学了基础知识，一切都会变得清晰！ 让我们开始！</p>
<div id="准备" class="section level2">
<h2>准备</h2>
<p>在这里，我需要导入本节需要的包。 <code>tidyverse</code> 包括八个包，其中之一是 <code>ggplot2</code>。 <code>primer.data</code>包 拥有比R 内置的更多的数据集。</p>
<pre class="r"><code>library(ggplot2)
library(primer.data) #准备数据
library(showtext)</code></pre>
<pre><code>## Loading required package: sysfonts</code></pre>
<pre><code>## Loading required package: showtextdb</code></pre>
<pre class="r"><code>showtext_auto()  #显示中文</code></pre>
</div>
<div id="画布gglot" class="section level2">
<h2>画布gglot</h2>
<p>画画需要画布，对于数据分析的绘图也是同理。导入相关R包后， 用ggplot函数构造一个画布。因为还没设定数据，所以这是一个空画布</p>
<pre class="r"><code>ggplot()</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-2-1.png" width="672" /></p>
<p>我们将使用nhanes数据集，传入数据的代码ggplot(data=nhanes)</p>
<pre class="r"><code>ggplot(data=nhanes)</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-3-1.png" width="672" /></p>
<p>画布看起来依然是空白的，不要紧张。理解这个之前类比PS这类绘图软件，将修图工作看做是很多个图层的叠加。现在我们使用时依然在最底层的ggplot图层，在ggplot函数内添加mapping=aes()参数，准备添加x轴、y轴、color。的图层。</p>
<p>Aesthetic mappings审美映射。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes())</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p>注意了，现在图层即将发生变化。我们选择设置x轴、y轴、color的字段。</p>
<ul>
<li>x轴 height身高</li>
<li>y轴 weight体重</li>
<li>color gender性别</li>
</ul>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-5-1.png" width="672" /></p>
<p>现在我们将开始添加高层次的图层，也会显示越来越多的信息。</p>
<p><br></p>
</div>
<div id="添加geom" class="section level2">
<h2>添加geom</h2>
<p>现在添加geom层(geom是geomeric缩写)，该层是通过 <code>+</code> 构建在ggplot层之上。这里使用 <code>geom_point()</code> 绘制散点图，</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping = aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point()</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-6-1.png" width="672" /></p>
<p>Wow! 不错的开始，不过这个图中的点互相之间重叠的有一点点严重，需要设定点的大小size和透明度alpha来控制重叠效果。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.3, size=0.5)</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<p>much better! 但能否按性别，分别绘制男、女的散点图。</p>
<p><br></p>
</div>
<div id="分面facet" class="section level2">
<h2>分面facet</h2>
<p>接下来添加一个分面函数 <code>facet_wrap</code>。该函数会分别生成男性分面、女性分面</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.3, size=0.5)+
  facet_wrap(~gender)</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
<p>现在我们有了两个分面图</p>
<p><br></p>
</div>
<div id="添加第二个geom" class="section level2">
<h2>添加第二个geom</h2>
<p>现在我们需要添加一个趋势线，可以使用 <code>geom_smooth()</code> 函数，因为geom_smooth和geom_point都是geom层的函数，理所当然它俩比 facet_wrap层更近一些。为了让趋势线更明显，将散点的透明度设置的更浅，比如0.1</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth()+
  facet_wrap(~gender)</code></pre>
<pre><code>## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39;</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-9-1.png" width="672" /></p>
<p>现在，我们想让趋势线更平滑一些。在<code>geom_smooth()</code>中，我们会设置 <code>method="loess"</code>以使得趋势线更平滑。 <code>formula=y~x</code>表示y的变化与x有关。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-10-1.png" width="672" />
<br></p>
</div>
<div id="标签labs" class="section level2">
<h2>标签labs</h2>
<p>现在我们需要用<code>labs()</code>函数给图片添加标签图层。例如title、subtitle、caption、x、y、legend。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-11-1.png" width="672" />
现在有了正副标题，横纵坐标没有数量单位，不太nice，这里更改为 <code>Height(cm)、Weight(kg)</code></p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-12-1.png" width="672" />
Awesome! 但图例Lengend中的 <code>gender</code> 依然是小写，我希望改为大写。我们知道x、y、color分别对应height、weight、gender，所以如果更改gender，需要设置的是color。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;,
       color=&quot;Gender&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-13-1.png" width="672" /></p>
<p>但是看到这个图片时，其他人会想原始数据是啥情况，怎么来的。这时候我们需要告诉大家nhances数据集来自于 <code>National Health and Nutrition Examination Survey</code>。通过设置labs的caption参数即可。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;,
       color=&quot;Gender&quot;,
       caption=&quot;Source: National Health and Nutrition Examination Survey&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-14-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="更改配色" class="section level2">
<h2>更改配色</h2>
<p>绘图已经相当完整，但geom层的散点颜色可能不是咱的最爱，如何设置颜色呢？</p>
<p>更改geom层的颜色，所以该层紧贴geom层，且在geom层之上。设置方法使用 <code>scale_color_manual()</code> 即可。<code>scale_color_munual()</code> 中的values可以传入颜色十六进制的字符串，还可以传入颜色字符串。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  scale_color_manual(values=c(&quot;magenta&quot;, &quot;blue&quot;))+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;,
       color=&quot;Gender&quot;,
       caption=&quot;Source: National Health and Nutrition Examination Survey&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-15-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="设置主题" class="section level2">
<h2>设置主题</h2>
<ul>
<li>theme_bw()</li>
<li>theme_dark()</li>
<li>theme_gray()</li>
<li>theme_light()</li>
<li>theme_minimal()</li>
</ul>
<pre class="r"><code>g &lt;- ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  scale_color_manual(values=c(&quot;magenta&quot;, &quot;blue&quot;))+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;,
       color=&quot;Gender&quot;,
       caption=&quot;Source: National Health and Nutrition Examination Survey&quot;)
  
g + theme_minimal()</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-16-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="保存" class="section level2">
<h2>保存</h2>
<pre class="r"><code>ggsave(
  filename = &quot;scatter.png&quot;,
  plot = g,
  width = 10,
  height = 8,
  dpi = 100,
  device = &quot;png&quot;
)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><br></p>
</div>
<div id="中文问题" class="section level2">
<h2>中文问题</h2>
<p>默认ggplot2不支持中文，为了能显示中文，需要使用showtext包</p>
<pre class="r"><code>library(ggplot2)
library(primer.data) #提供数据
library(showtext) #支持中文
showtext_auto()

ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  scale_color_manual(values=c(&quot;magenta&quot;, &quot;blue&quot;))+
  facet_wrap(~gender)+
  labs(title = &quot;美国身高&quot;,
       subtitle = &quot;平均而言，男性群体的身高会高于女性群体&quot;,
       x=&quot;身高(cm)&quot;,
       y=&quot;体重(kg)&quot;,
       color=&quot;性别&quot;,
       caption=&quot;数据源: National Health and Nutrition Examination Survey&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-18-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  使用officedown包在Rmarkdown中制作PPT</title>
      <link>https://textdata.cn/blog/2022-09-04-officedown-pptdocx/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-officedown-pptdocx/</guid>
      <description>使用officedown包在Rmarkdown中制作PPT</description>
      <content:encoded><![CDATA[


<p>使用officedown在Rmarkdown中写PPT/Word。本文只以PPT为例简单演示，不做细节讲解。</p>
<div id="安装" class="section level2">
<h2>安装</h2>
<pre class="r"><code>install.packages(c(&quot;officedown&quot;, &quot;rvg&quot;))</code></pre>
<p><br></p>
</div>
<div id="新建rmd" class="section level2">
<h2>新建Rmd</h2>
<p>按照截图，
<img src="img/1.png" />
<img src="img/2.png" /></p>
<p>会自动新建一个Rmd模板。
<img src="img/3.png" /></p>
<p>如果你自己想改动添加内容，自己改就行不用怕，大不了重新新建一个空白模板。</p>
<p><br></p>
</div>
<div id="渲染" class="section level2">
<h2>渲染</h2>
<p>内容Okay后，点击渲染</p>
<p><img src="img/4.png" /></p>
<p>渲染时会自动弹开MS PowerPoint</p>
<p><img src="img/5.png" /></p>
<p><br></p>
</div>
<div id="相关资料" class="section level2">
<h2>相关资料</h2>
<ul>
<li><a href="https://www.miriamheiss.com/posts/graphing-with-ggplot/" class="uri">https://www.miriamheiss.com/posts/graphing-with-ggplot/</a></li>
<li><a href="https://ardata-fr.github.io/officeverse/index.html" class="uri">https://ardata-fr.github.io/officeverse/index.html</a></li>
</ul>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  使用posterdown包制作学术会议海报</title>
      <link>https://textdata.cn/blog/2022-09-04-posterdown/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-posterdown/</guid>
      <description>使用posterdown包制作学术海报</description>
      <content:encoded><![CDATA[


<blockquote>
<p>原文: <a href="https://shilaan.rbind.io/post/academic-conference-posters-using-posterdown/" class="uri">https://shilaan.rbind.io/post/academic-conference-posters-using-posterdown/</a></p>
</blockquote>
<p>如果你认识我，你就会知道我喜欢用 R语言 做任何事情。 当需要创建我的第一个学术会议海报时，我知道我不想浪费任何时间在不同的软件环境之间移动或复制粘贴和手动格式化文本、表格、图形和结果。</p>
<p>相反，我想使用 RMarkdown 生成一个完全可复制且格式精美的会议海报。 原来; R 包 <a href="https://github.com/brentthorne/posterdown">posterdown</a> 使这变得非常简单！ 在这篇文章中，我将简要向您展示如何使用 posterdown 包创建自己的海报。</p>
<p>要先睹为快，您可以在此处找到我的第一个 posterdown 创建的 <a href="https://sjdm.org/presentations/2021-Poster-Alzahawi-Shilaan-crowds-variability-credibility~.pdf">海报</a> 以及此处的<a href="https://github.com/shilaan/Many-Analysts/blob/main/poster/GSPA_Poster.Rmd">基础代码</a>。</p>
<p><br></p>
<div id="安装" class="section level2">
<h2>安装</h2>
<pre class="r"><code>install.packages(&quot;posterdown&quot;)</code></pre>
<p><br></p>
</div>
<div id="新建rmd" class="section level2">
<h2>新建Rmd</h2>
<p>按照下面步骤点击从模板新建Rmarkdown
<code>File -&gt; Net File -&gt; R Markdown -&gt; From Template</code></p>
<p><img src="img/posterdown_tem.png" /></p>
<p>从中选择posterdown模板，有三种可供选择的子模板，即
- Posterdown HTML
- Posterdown betterland
- Posterdown Betterport</p>
<p>大致的样式如下</p>
<p><img src="img/posterdown_templates.png" /></p>
<p>虽然 HTML 模板看起来更像是经典的科学海报，但 Betterland 和 Betterport 模板创建的海报具有大量空间，专门用于呈现高传递性的(take-away)信息。
后两者的区别在于，Betterland 是横向的，而 Betterport 是纵向的。</p>
<p><br></p>
</div>
<div id="个性化" class="section level2">
<h2>个性化</h2>
<p>当选择了模板，就可以在Rmd文件内修改内容。如果对字号、字体等不太满意，还可以在修改yaml部分参数。</p>
<p><img src="img/code.png" /></p>
<p>最后点击Knit即可渲染出学术会议海报</p>
<p><br></p>
</div>
<div id="参考资料" class="section level2">
<h2>参考资料</h2>
<ul>
<li><a href="https://shilaan.rbind.io/post/academic-conference-posters-using-posterdown" class="uri">https://shilaan.rbind.io/post/academic-conference-posters-using-posterdown</a></li>
<li><a href="https://github.com/brentthorne/posterdown" class="uri">https://github.com/brentthorne/posterdown</a></li>
</ul>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 绘制中国地图</title>
      <link>https://textdata.cn/blog/2022-09-04-geospatial-plotting/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-geospatial-plotting/</guid>
      <description>使用ggplot2, leaflet, sf, terra包绘制中国地图</description>
      <content:encoded><![CDATA[


<p><br></p>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Latex | 为Rmarkdown配置tinytex环境</title>
      <link>https://textdata.cn/blog/2022-09-01-how_to_use_tinytex/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-01-how_to_use_tinytex/</guid>
      <description>不再使用动辄十几个G的Tex巨型软件包，从此中文latex文档，渲染不再是难题</description>
      <content:encoded><![CDATA[<p>R圈谢一辉大神开发的 <a href="https://yihui.org/tinytex/">tinytex</a>包，是一个强悍精干的Tex软件包。如果接触过LaTex的同学应该知道，配置好Latex的环境需要几个G，十分占用空间。其次，TinyTex将LaTex包的配置、安装、渲染简化为几个函数。</p>
<h2 id="配置tinytex">配置TinyTex</h2>
<p>安装和维护 <a href="https://yihui.org/tinytex/">TinyTex</a>环境十分简单，首先我们安装好R语言的tinytex包，之后用该包安装TinyTex软件。考虑到 <a href="https://ctan.org/mirrors/mirmon">Tex资源站CTAN</a>部署在海外，使用该站点下载资源包会很慢，所以这里配置为国内清华站点。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#安装R语言中的tinytex包
install.packages(&#34;tinytex&#34;)

#使用tinytex包安装TinyTex
tinytex::install_tinytex()

#设置资源镜像，加速资源的下载安装
tinytex::tlmgr_repo(&#39;http://mirrors.tuna.tsinghua.edu.cn/CTAN/&#39;)

#tinytex::tl_pkgs()  #查看安装的latex包
#length(tinytex::tl_pkgs())

#tinytex::tinytex_root()   # 查看默认安装路径
</code></pre></div><p><br><br></p>
<h2 id="编译">编译</h2>
<p>LaTex文档是一团源代码，我们需要将其编译(渲染)为PDF文件。</p>
<pre><code>#首先记得设置当前工作路径
setwd('tex文件所在的文件')

tinytex::pdflatex('英文tex文件路径')  
tinytex::xelatex('中英文tex文件路径') #推荐
tinytex::latexmk('中英文tex文件路径') #推荐
</code></pre>
<p>我们经常跟中英文一起打交道，所以编译方法使用xelatex。 pdflatex或xelatex渲染过程可能会缺一些包，需要手动安装。而latexmk会在编译过程中自动安装缺失的包，不过中文最后还是</p>
<blockquote>
<p>TinyTex缺点是初学者编译慢，用的越多越久，越好用，工具使用的收益曲线是向上的。而TexLive、MacTex等使用难度是水平的。</p>
</blockquote>
<p><br><br></p>
<h2 id="维护">维护</h2>
<p>TinyTeX 的主要维护工作应该是安装 LaTeX 包以及更新。</p>
<ul>
<li>如果编译 PDF 时出现缺失 LaTeX 包的错误信息，可以用命令行 <code>tinytex::tlmgr_search()</code></li>
<li>根据缺失文件名搜索包名，并用 <code>tinytex::tlmgr_install()</code> 安装缺失的包；</li>
<li>命令 <code>tinytex::tlmgr_update()</code> 可以更新整个 TeX Live 系统。R 用户可以使用 R 包 tinytex 中的相应函数，如：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">tinytex::tlmgr_search(&#39;framed.sty&#39;)  # 搜索包含 framed.sty 文件的 LaTeX 包
tinytex::tlmgr_install(&#39;framed&#39;)     # 安装 framed 包
tinytex::tlmgr_update()              # 更新 TeX Live
</code></pre></div><p>如果你想降低这些搜包、装包操作，可以考虑像 TexLive 那样装几个G。谢一辉大神今年推送了一个新资源，只需要安装4000个包2G的即可绑定常用资源包。</p>
<p>设置环境变量 <code>TINYTEX_INSTALLER=TinyTeX-2</code>, 之后运行以下代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># increase the download timeout to 2 hours just in case the
# default 1 hour is not enough (you can further increase it)
options(timeout = 7200)
tinytex::install_tinytex(bundle = &#39;TinyTeX-2&#39;)
</code></pre></div><p>勘察一下电脑内latex包数量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">length(tinytex::tl_pkgs())
</code></pre></div><p>Wow~~，达到4197!! 如果你愿意TinyTex，也可以变成HugeTex。最后再简单的工具，如果只看依然会看着容易用着难，还是要多动手的。</p>
<p><br><br></p>
<h2 id="学习资料">学习资料</h2>
<ul>
<li>
<p><a href="https://yihui.org/tinytex/cn/">https://yihui.org/tinytex/cn/</a></p>
</li>
<li>
<p><a href="https://yihui.org/tinytex/">https://yihui.org/tinytex/</a></p>
</li>
<li>
<p><a href="https://yihui.org/en/2022/05/tinytex-full/">https://yihui.org/en/2022/05/tinytex-full/</a></p>
</li>
<li>
<p><a href="https://github.com/rstudio/tinytex-releases/">https://github.com/rstudio/tinytex-releases/</a></p>
</li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>ymlthis包 | 为Rmarkdown文件轻松设置YMAL</title>
      <link>https://textdata.cn/blog/ymlthis_rmarkdown_ymal/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/ymlthis_rmarkdown_ymal/</guid>
      <description>Rmarkdown是R语言的代码文件类型，能渲染成html、pdf、doc等文件。但需要用到复杂的YAML进行参数设置，太难记住了。不过有了ymlthis包， 难度大大降低。</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="img/rmarkdown_function.png" alt=""  />
</p>
<p>Rmarkdown是R语言的代码文件类型，能渲染成html、pdf、doc等文件。但需要用到复杂的YAML进行参数设置，太难记住了。不过有了ymlthis包， 难度大大降低。</p>
<br>
<h2 id="安装ymlthis">安装ymlthis</h2>
<p>knit渲染效果一般由Rmarkdown开头的YAML设置。形如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">title: &#34;Rmarkdown用法&#34;
author: &#34;大邓&#34;
date: &#34;2022-07-21&#34;
output: 
  html_document:         #输出html
    toc: true            #生成目录
    toc_float: true      #目录浮动
    theme: readable      #readable主题
    number_sections: yes #章节自动排序号
    df_print: paged      #html中的data.frame数据能翻页
</code></pre></div><p>yaml比较难记住，很容易设置错误，可以安装 <code>ymlthis包</code>，该包可以帮我们省去记忆之苦。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;ymlthis&#34;)
</code></pre></div><br>
<h2 id="配置yaml">配置YAML</h2>
<p><a href="https://ymlthis.r-lib.org/index.html">ymlthis</a>安装成功后，就可以使用该快捷工具。在工具栏点击 <code>Addins</code></p>
<p><img loading="lazy" src="img/add_in_thisyml_1.jpg" alt=""  />
</p>
<p>找到 <code>Write New R Markdown or YAML File</code></p>
<p><img loading="lazy" src="img/add_in_thisyml_2.gif" alt=""  />
</p>
<p>复杂的 <a href="https://bookdown.org/yihui/rmarkdown/html-document.html">html渲染</a>参数设置，如标题、作者、渲染效果、目录、主题等，瞬间变的简单起来。</p>
<p>最后，.Rmd文件渲染为html文件的操作方法。</p>
<p><img loading="lazy" src="img/knit_to_html.png" alt=""  />
</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><strong>付费视频课程 | Python实证指标构建与文本分析</strong></li>
<li>大邓每年会有4场直播，五一、十一、寒、暑假，如果时间点接近，可考虑报名参与<a href="https://textdata.cn/blog/2022-05-workshop/7-Python.html">直播课</a>。</li>
<li>如果只意性价比，且已迫不及待想学，可以考虑直接报名大邓的<a href="https://textdata.cn/blog/management_python_course">录播课</a>。</li>
<li>如果不想学，也可以考虑外包。更建议找淘宝，如果找我咨询，请先阅读<a href="https://textdata.cn/blog/paid_for_service">有偿说明</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>blogdown包 | 使用R语言维护Hugo静态网站</title>
      <link>https://textdata.cn/blog/blogdown_for_hugo_website/</link>
      <pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/blogdown_for_hugo_website/</guid>
      <description>使用「R语言」 的 blogdown &#43; hugo &#43; &#43; githubPages 搭建静态博客系统，使用用 Rstudio 专注于写作。</description>
      <content:encoded><![CDATA[


<p>使用「R语言」 的 blogdown + hugo + + githubPages 搭建静态博客系统，使用用 Rstudio 专注于写作。</p>
<div id="hugo" class="section level2">
<h2>Hugo</h2>
<p>Hugo是一种特别受欢迎的静态站点框架，基于Go语言开发，建站速度和上手难度都很亲民。</p>
<p><img src="img/hugo.png" /></p>
<p><br><br></p>
</div>
<div id="blogdown" class="section level2">
<h2>Blogdown</h2>
<p>而 blogdown 是 R语言的建站包， 可以在Rstudio内一边写文档笔记一边渲染出html文件。下图是Rstudio 截图</p>
<p><img src="img/Rstudio_blogdown_panel.png" /></p>
<ul>
<li><strong>Rstudio左上角</strong> 为博客文档撰写区(代码、文档、图片)</li>
<li><strong>Rstudio左下方</strong> 为命令行区域</li>
<li><strong>Rstudio右下方</strong> 为博客文档渲染效果</li>
</ul>
<p><br></p>
<p>对了， blogdown作者 <a href="https://yihui.org/en/">谢益辉</a> 是一位中国人，他同时也是 <a href="https://bookdown.org/">bookdown</a>、 <a href="https://yihui.org/tinytex/">tinytex</a> 等包的作者。 学习R语言的同学应该很熟悉的。目前很多 R语言 优秀的文档都是使用 bookdown包，比如</p>
<p><img src="img/blogdown_gallery1.png" /> <img src="img/blogdown_gallery2.png" /></p>
<p><br><br></p>
</div>
<div id="工作流程旧" class="section level2">
<h2>工作流程(旧)</h2>
<p>从21年5月起，大邓第一次使用 <a href="https://textdata.cn/blog/hugo_website_test/">Hugo + Gihub Page</a> 建立个人博客站，之后又更换为 <a href="https://textdata.cn/blog/blog_add_comments_function/">hugo-papermod主题；新增留言功能</a>。界面美观，代码复制很方便，适合公众号关注者浏览学习。但对大邓而言，工作流程异常繁琐</p>
<ol style="list-style-type: decimal">
<li><strong>jupyter notebook</strong> 写代码文档，测试代码可运行。</li>
<li>从 <strong>jupyter</strong> 中下载为 <strong>markdown</strong> 文档，编辑用的工具是<strong>Typora</strong>。</li>
<li><strong>Hugo</strong>命令行更新本地(电脑内)的站点仓库。</li>
<li>使用 <strong>Github Desktop</strong> 推送至<strong>Github Page</strong></li>
</ol>
<p>操作步骤中，夹杂着大量的命令行操作，我也记不住这些命令行，是单独存放在一个markdown笔记中，用的时候复制一下。命令行给大家看看</p>
<pre><code>#切换至电脑博客仓库
cd /Users/大邓/Desktop/Blog/Github

#启动本地服务，浏览器测试
hugo server -t PaperMod --buildDrafts

#生成站点，待推送至github
hugo --theme=PaperMod --baseUrl=&#39;/&#39; --buildDrafts</code></pre>
<p><br></p>
<p>总之就是复杂，最近用 R语言 发现有 <strong>blogdown</strong>包 可以将其中的步骤压缩， 主要工作集中在 <strong>Rstudio</strong> 和 <strong>Github Desktop</strong>。</p>
<p><br><br></p>
</div>
<div id="新工作流程" class="section level2">
<h2>新工作流程</h2>
<ol style="list-style-type: decimal">
<li>在 <strong>Rstudio</strong> 内新建 <strong>Rmarkdown</strong> 文档，内部可进行 R语言(或Python) 的代码撰写</li>
<li>编译 <strong>Rmarkdown文档</strong> 为 html， <strong>Github Desktop</strong> 推送至仓库，更新站点。</li>
</ol>
<p>需要用到的命令，仅仅有以下4个</p>
<pre><code>    #新建博客 .Rmd文件
    blogdown::new_post()

    #启动本地服务，一遍写文档，网页渲染效果随时可见
    blogdown::serve_site()

    #停止本地服务
    blogdown::stop_server()

    #将.Rmd文件渲染为html等站点文件
    blogdown::build_site()</code></pre>
<p><br><br></p>
</div>
<div id="本文参考资料" class="section level2">
<h2>本文参考资料</h2>
<ul>
<li><a href="https://bookdown.org/yihui/blogdown/">blogdown Docs</a></li>
<li><a href="https://themes.gohugo.io/themes/hugo-papermod/">Hugo-PaperMod</a></li>
<li><a href="https://cosx.org/2018/01/build-blog-with-blogdown-hugo-netlify-github/">用 R 语言的 blogdown+hugo+netlify+github 建博客</a></li>
</ul>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用R将多个txt汇总到一个csv文件中</title>
      <link>https://textdata.cn/blog/multiple_txts_into_csv/</link>
      <pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/multiple_txts_into_csv/</guid>
      <description>使用R语言，对多个文件夹内的数百个txt汇总到一个csv文件内，有利于后续的文本分析。本文会用到readr、readtext等包。</description>
      <content:encoded><![CDATA[


<div id="任务" class="section level2">
<h2>任务</h2>
<p>使用R语言，对多个文件夹内的数百个txt汇总到一个csv文件内。</p>
<p><br><br></p>
</div>
<div id="数据集" class="section level2">
<h2>数据集</h2>
<p>01-21年，全国各地市政府工作报告数据集。</p>
<p><img src="img/provinces.png" /></p>
<p><img src="img/anhui.png" /></p>
<p><br><br></p>
</div>
<div id="任务分解" class="section level2">
<h2>任务分解</h2>
<ol style="list-style-type: decimal">
<li>使用list.files获取文件路径列表</li>
<li>定义需要的函数
<ul>
<li>使用readtext::readtext()函数读取报告文本</li>
<li>年份函数、省份函数</li>
</ul></li>
<li>对每个文件路径，根据2得到三个字段信息，构造tibble结构；</li>
<li>步骤2和步骤3使用bind_cols合并成一个tibble</li>
<li>readr::write_csv()函数存至data.csv</li>
<li>审查data.csv</li>
</ol>
<p>数据存在province文件内, 该<a href="province.zip"><strong>点击下载该数据集</strong></a></p>
<div id="txt路径列表" class="section level3">
<h3>1. txt路径列表</h3>
<p>使用 list.files函数查看</p>
<ul>
<li>文件夹路径列表</li>
<li>文件路径列表</li>
</ul>
<p>province内的文件夹路径列表</p>
<pre class="r"><code>dirs &lt;- list.files(&#39;province&#39;, full.names = TRUE)
head(dirs)</code></pre>
<pre><code>## [1] &quot;province/上海&quot;   &quot;province/云南&quot;   &quot;province/内蒙古&quot; &quot;province/北京&quot;  
## [5] &quot;province/吉林&quot;   &quot;province/四川&quot;</code></pre>
<p>所有省份文件夹内的文件路径列表</p>
<pre class="r"><code>files &lt;- list.files(dirs, full.names = TRUE)
head(files)</code></pre>
<pre><code>## [1] &quot;province/上海/2003年上海政府工作报告.txt&quot;
## [2] &quot;province/上海/2004年上海政府工作报告.txt&quot;
## [3] &quot;province/上海/2005年上海政府工作报告.txt&quot;
## [4] &quot;province/上海/2006年上海政府工作报告.txt&quot;
## [5] &quot;province/上海/2007年上海政府工作报告.txt&quot;
## [6] &quot;province/上海/2008年上海政府工作报告.txt&quot;</code></pre>
<p>共有617个txt文件</p>
<pre class="r"><code>length(files)</code></pre>
<pre><code>## [1] 617</code></pre>
<p><br></p>
</div>
<div id="readtext读取txt" class="section level3">
<h3>2.1 readtext读取txt</h3>
<p>使用 readtext::readtext 批量读取 多个txt</p>
<pre class="r"><code>txts_df &lt;- readtext::readtext(files)
head(txts_df)</code></pre>
<pre><code>## readtext object consisting of 6 documents and 0 docvars.
## # Description: df [6 × 2]
##   doc_id                     text                         
##   &lt;chr&gt;                      &lt;chr&gt;                        
## 1 2003年上海政府工作报告.txt &quot;\&quot;  各位代表， 现在\&quot;...&quot;   
## 2 2004年上海政府工作报告.txt &quot;\&quot; 各位代表：\n\n  \&quot;...&quot;   
## 3 2005年上海政府工作报告.txt &quot;\&quot;各位代表：\n\n　　现\&quot;...&quot;
## 4 2006年上海政府工作报告.txt &quot;\&quot;各位代表：\n　　上海\&quot;...&quot;
## 5 2007年上海政府工作报告.txt &quot;\&quot;　　政府工作报告\n　\&quot;...&quot;
## 6 2008年上海政府工作报告.txt &quot;\&quot;\n\t政府工作报告\n\n\&quot;...&quot;</code></pre>
<p>检查text字段长度，是否为617.</p>
<pre class="r"><code>length(txts_df[[&#39;text&#39;]])</code></pre>
<pre><code>## [1] 617</code></pre>
<p><br></p>
</div>
<div id="定义功能函数" class="section level3">
<h3>2.2 定义功能函数</h3>
<p>数据整理到一个csv，我们想保存四个字段，分别是</p>
<ul>
<li>txt文件名</li>
<li>年份</li>
<li>省(市)名</li>
<li>工作报告内容</li>
</ul>
<p>年份和省份需要通过定义函数实现~</p>
<pre class="r"><code>s&lt;-basename(&quot;province/上海/2003年上海政府工作报告.txt&quot;) 
substr(s, 1, 4)</code></pre>
<pre><code>## [1] &quot;2003&quot;</code></pre>
<pre class="r"><code>library(tidyverse)</code></pre>
<pre><code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.0.9
## ✔ tidyr   1.2.0     ✔ stringr 1.4.0
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()</code></pre>
<pre class="r"><code>year_func &lt;- function(filepath){
  year &lt;- filepath %&gt;% 
    basename() %&gt;% 
    substr(1, 4)
  return (year)
}

name_func &lt;- function(file){
  file &lt;- basename(file)
  name &lt;- gsub(&#39;政府工作报告.txt&#39;, &#39;&#39;, file) 
  name &lt;- stringr::str_sub(name, start=6)
  return (name)
}

file &lt;- &quot;province/上海/2003年上海政府工作报告.txt&quot;
year_func(file)</code></pre>
<pre><code>## [1] &quot;2003&quot;</code></pre>
<pre class="r"><code>name_func(file)</code></pre>
<pre><code>## [1] &quot;上海&quot;</code></pre>
<p>txts_df 是一个特殊的tibble数据类型。 现在需要构造年份、省份函数，获取另外一个tibble。</p>
<pre class="r"><code>year_province_df &lt;- tibble(
  year = year_func(txts_df$doc_id),
  province = lapply(txts_df$doc_id, name_func) %&gt;% unlist()
  )

head(year_province_df)</code></pre>
<pre><code>## # A tibble: 6 × 2
##   year  province
##   &lt;chr&gt; &lt;chr&gt;   
## 1 2003  上海    
## 2 2004  上海    
## 3 2005  上海    
## 4 2006  上海    
## 5 2007  上海    
## 6 2008  上海</code></pre>
<p><br></p>
</div>
<div id="合并两个tibble" class="section level3">
<h3>4. 合并两个tibble</h3>
<p>cbind_rows()合并两个tibble</p>
<pre class="r"><code>res_df &lt;- bind_cols(year_province_df, txts_df)
head(res_df)</code></pre>
<pre><code>## # A tibble: 6 × 4
##   year  province doc_id                     text                                
##   &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;                      &lt;chr&gt;                               
## 1 2003  上海     2003年上海政府工作报告.txt &quot;  各位代表， 现在，我代表上海市人… 
## 2 2004  上海     2004年上海政府工作报告.txt &quot; 各位代表：\n\n    现在，我代表上… 
## 3 2005  上海     2005年上海政府工作报告.txt &quot;各位代表：\n\n　　现在，我代表上海…
## 4 2006  上海     2006年上海政府工作报告.txt &quot;各位代表：\n　　上海市国民经济和社…
## 5 2007  上海     2007年上海政府工作报告.txt &quot;　　政府工作报告\n　　――2007年1月2…
## 6 2008  上海     2008年上海政府工作报告.txt &quot;\n\t政府工作报告\n\n\t——2008年1月2…</code></pre>
<p><br></p>
</div>
<div id="存入csv" class="section level3">
<h3>5. 存入csv</h3>
<p>使用 write.table(x, file, sep) 写入data.csv</p>
<ul>
<li>x 待存储数据对象</li>
<li>file csv文件路径</li>
<li>delim 分割符</li>
</ul>
<pre class="r"><code>?readr::write_csv</code></pre>
<pre class="r"><code>readr::write_csv(x=res_df, 
                 file=&#39;data.csv&#39;, 
                 col_names=T) </code></pre>
<p><br></p>
</div>
<div id="检查data.csv" class="section level3">
<h3>6. 检查data.csv</h3>
<p>尝试读取 <a href="data.csv">data.csv</a></p>
<pre class="r"><code>df &lt;- readr::read_csv(&#39;data.csv&#39;)</code></pre>
<pre><code>## Rows: 617 Columns: 4
## ── Column specification ────────────────────────────────────────────────────────
## Delimiter: &quot;,&quot;
## chr (3): province, doc_id, text
## dbl (1): year
## 
## ℹ Use `spec()` to retrieve the full column specification for this data.
## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
<pre class="r"><code>head(df)</code></pre>
<pre><code>## # A tibble: 6 × 4
##    year province doc_id                     text                                
##   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;                      &lt;chr&gt;                               
## 1  2003 上海     2003年上海政府工作报告.txt &quot;各位代表， 现在，我代表上海市人民… 
## 2  2004 上海     2004年上海政府工作报告.txt &quot;各位代表：\n\n    现在，我代表上海…
## 3  2005 上海     2005年上海政府工作报告.txt &quot;各位代表：\n\n　　现在，我代表上海…
## 4  2006 上海     2006年上海政府工作报告.txt &quot;各位代表：\n　　上海市国民经济和社…
## 5  2007 上海     2007年上海政府工作报告.txt &quot;　　政府工作报告\n　　――2007年1月2…
## 6  2008 上海     2008年上海政府工作报告.txt &quot;\n\t政府工作报告\n\n\t——2008年1月2…</code></pre>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>renv包 | R语言的项目环境管理库</title>
      <link>https://textdata.cn/blog/renv_environment_management_for_r/</link>
      <pubDate>Thu, 21 Jul 2022 18:43:10 +0600</pubDate>
      
      <guid>/blog/renv_environment_management_for_r/</guid>
      <description>如何提高代码的长期可重复性</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/2CTC8FRD_Y4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<br>
<h2 id="renvhttpsgithubcomrstudiorenv特性"><a href="https://github.com/rstudio/renv">renv</a>特性</h2>
<p>renv 包可帮助您为 R 项目创建可重现的环境。 使用 renv 使 R语言项目更：</p>
<ul>
<li>
<p><strong>『隔离的』</strong>：为一个项目安装新的或更新的包不会破坏其他项目，反之亦然。 那是因为 renv 为每个项目提供了自己的私有包。</p>
</li>
<li>
<p><strong>『便携的』</strong>：轻松将项目从一台计算机传输到另一台计算机，甚至跨不同平台。 renv 可以很容易地安装项目所依赖的包。</p>
</li>
<li>
<p><strong>『可重现的』</strong>： renv 记录项目所依赖的确切软件包版本，并确保无论您走到哪里都可以安装这些确切版本。</p>
</li>
</ul>
<p><br><br></p>
<h2 id="安装">安装</h2>
<p>从CRAN安装最新的 <code>renv</code>包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;renv&#34;)
</code></pre></div><p><br><br></p>
<h2 id="用法">用法</h2>
<h3 id="renvinit">renv::init()</h3>
<p>使用 <code>renv::init()</code> 来初始化新(或已有)项目的R环境。通过初始化可以为项目建立独立的私有包，确保项目所需包都能得到安装。</p>
<h3 id="renvsnapshot">renv::snapshot()</h3>
<p>保存项目状态， 项目用到的R包会记录在<code>lockfile</code>中，被称为<code>renv.lock</code>。</p>
<h3 id="renvrestore">renv::restore()</h3>
<p>之后，如果需要将项目文件夹转移到新的电脑， 可以通过   <code>renv::restore()</code> 来重装 lockfile文件记录到(项目需要的)的R包。</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在jupyter内运行R代码</title>
      <link>https://textdata.cn/blog/run_r_in_jupyter/</link>
      <pubDate>Sun, 29 May 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/run_r_in_jupyter/</guid>
      <description>在Jupyter中，通常是默认支持Python的，如何配置才能让R也能运行呢？</description>
      <content:encoded><![CDATA[<p>R和Python都是数据分析利器，最好能一起使用，发挥各自的优势。</p>
<p>在Jupyter中，通常是默认支持Python的，如何配置才能让R也能运行呢？</p>
<br>
<h2 id="配置步骤">配置步骤</h2>
<h3 id="step-1">step 1</h3>
<p>安装好R软件，打开命令行，输入R回车，调出R环境</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">R
</code></pre></div><p>在R环境中运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s">&#39;repr&#39;</span><span class="p">,</span> <span class="s">&#39;IRdisplay&#39;</span><span class="p">,</span> <span class="s">&#39;evaluate&#39;</span><span class="p">,</span> <span class="s">&#39;crayon&#39;</span><span class="p">,</span> <span class="s">&#39;pbdZMQ&#39;</span><span class="p">,</span> <span class="s">&#39;devtools&#39;</span><span class="p">,</span> <span class="s">&#39;uuid&#39;</span><span class="p">,</span> <span class="s">&#39;digest&#39;</span><span class="p">))</span>
</code></pre></div><br>
<h3 id="step-2">step 2</h3>
<p>继续在在R环境中运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="n">devtools</span><span class="o">::</span><span class="nf">install_github</span><span class="p">(</span><span class="s">&#39;IRkernel/IRkernel&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h3 id="step-3">step 3</h3>
<p>继续在R环境中运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="n">IRkernel</span><span class="o">::</span><span class="nf">installspec</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span>
</code></pre></div><br>
<br>
<h2 id="调用jupyter">调用Jupyter</h2>
<p>重新打开命令行，执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">jupyter notebook
</code></pre></div><p>弹出的界面中拥有了R的kernel</p>
<p><img loading="lazy" src="r_kernel.png" alt=""  />
</p>
<br>
<p>新建一个R的jupyter文件，运行下方代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">library</span><span class="p">(</span><span class="s">&#34;ggsci&#34;</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="s">&#34;ggplot2&#34;</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="s">&#34;gridExtra&#34;</span><span class="p">)</span>

<span class="nf">data</span><span class="p">(</span><span class="s">&#34;diamonds&#34;</span><span class="p">)</span>

<span class="n">p1</span> <span class="o">&lt;-</span> <span class="nf">ggplot</span><span class="p">(</span>
  <span class="nf">subset</span><span class="p">(</span><span class="n">diamonds</span><span class="p">,</span> <span class="n">carat</span> <span class="o">&gt;=</span> <span class="m">2.2</span><span class="p">),</span>
  <span class="nf">aes</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">table</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">price</span><span class="p">,</span> <span class="n">colour</span> <span class="o">=</span> <span class="n">cut</span><span class="p">)</span>
<span class="p">)</span> <span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">(</span><span class="n">alpha</span> <span class="o">=</span> <span class="m">0.7</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">geom_smooth</span><span class="p">(</span><span class="n">method</span> <span class="o">=</span> <span class="s">&#34;loess&#34;</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="m">0.05</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">span</span> <span class="o">=</span> <span class="m">1</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">theme_bw</span><span class="p">()</span>

<span class="n">p2</span> <span class="o">&lt;-</span> <span class="nf">ggplot</span><span class="p">(</span>
  <span class="nf">subset</span><span class="p">(</span><span class="n">diamonds</span><span class="p">,</span> <span class="n">carat</span> <span class="o">&gt;</span> <span class="m">2.2</span> <span class="o">&amp;</span> <span class="n">depth</span> <span class="o">&gt;</span> <span class="m">55</span> <span class="o">&amp;</span> <span class="n">depth</span> <span class="o">&lt;</span> <span class="m">70</span><span class="p">),</span>
  <span class="nf">aes</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">depth</span><span class="p">,</span> <span class="n">fill</span> <span class="o">=</span> <span class="n">cut</span><span class="p">)</span>
<span class="p">)</span> <span class="o">+</span>
  <span class="nf">geom_histogram</span><span class="p">(</span><span class="n">colour</span> <span class="o">=</span> <span class="s">&#34;black&#34;</span><span class="p">,</span> <span class="n">binwidth</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">position</span> <span class="o">=</span> <span class="s">&#34;dodge&#34;</span><span class="p">)</span> <span class="o">+</span>
  <span class="nf">theme_bw</span><span class="p">()</span>


<span class="n">p1_npg</span> <span class="o">&lt;-</span> <span class="n">p1</span> <span class="o">+</span> <span class="nf">scale_color_npg</span><span class="p">()</span>
<span class="n">p2_npg</span> <span class="o">&lt;-</span> <span class="n">p2</span> <span class="o">+</span> <span class="nf">scale_fill_npg</span><span class="p">()</span>
<span class="nf">grid.arrange</span><span class="p">(</span><span class="n">p1_npg</span><span class="p">,</span> <span class="n">p2_npg</span><span class="p">,</span> <span class="n">ncol</span> <span class="o">=</span> <span class="m">2</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="ggsci_plot.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TechWeekly-16 每周有趣有用的技术分享</title>
      <link>https://textdata.cn/blog/techweekly16/</link>
      <pubDate>Fri, 01 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/techweekly16/</guid>
      <description>本期TechWeekly主要是一些css、js类项目，可以起到点缀网站的效果。</description>
      <content:encoded><![CDATA[<p>本期TechWeekly主要是一些css、js类项目，可以起到点缀网站的效果。</p>
<p>建议大家如果有时间，可以了解下html/css，很简单的。如果使用Hugo这类建站框架，可以自己修改下字体颜色，以符合自己的审美。以后会考虑在这个博客站点中用到，于是整理出来本期TechWeekly。</p>
<br>
<h2 id="animatecss">Animate.css</h2>
<p><a href="https://animate.style/">https://animate.style/</a></p>
<p>CSS网页动画库</p>
<div style="text-align: center;">
<figure >
    <a href="https://animate.style/">
        <img src="img/animate.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问Animate网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="tabler">Tabler</h2>
<p><a href="https://github.com/tabler/tabler">https://github.com/tabler/tabler</a></p>
<p>Tabler 是基于 Bootstrap 构建的免费开源 HTML Dashboard UI Kit</p>
<div style="text-align: center;">
<figure >
    <a href="https://preview.tabler.io/">
        <img src="img/tabler.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问tabler网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="flowbite">Flowbite</h2>
<p><a href="https://github.com/themesberg/flowbite">https://github.com/themesberg/flowbite</a></p>
<p>使用 Tailwind CSS 构建的最受欢迎的交互式 UI 组件库</p>
<div style="text-align: center;">
<figure >
    <a href="https://flowbite.com/">
        <img src="img/flowbite.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问flowbite网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="sheetjs">SheetJs</h2>
<p><a href="https://github.com/SheetJS/sheetjs">https://github.com/SheetJS/sheetjs</a></p>
<ul>
<li>
<p>简化的电子表格</p>
</li>
<li>
<p>阅读、编辑和导出电子表格</p>
</li>
<li>
<p>适用于网络浏览器和服务器，</p>
</li>
<li>
<p>在 Office 365 中受 Microsoft 信任</p>
</li>
</ul>
<div style="text-align: center;">
<figure >
    <a href="https://sheetjs.com/">
        <img src="img/sheetjs.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="d3">D3</h2>
<p><a href="https://github.com/d3/d3">https://github.com/d3/d3</a></p>
<p>D3.js 是一个 JavaScript 可视化库。 D3 能使 HTML、SVG 和 CSS 等文件将数据可视化变为现实。</p>
<div style="text-align: center;">
<figure >
    <a href="https://d3js.org/">
        <img src="img/d3.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问网站</i></small></figcaption>
</figure>
</div>
<p>下面是D3制作的样例</p>
<div style="text-align: center;">
<figure >
    <a href="https://observablehq.com/@d3/gallery">
        <img src="img/d31.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问D3的Gallery</i></small></figcaption>
</figure>
</div>
<div style="text-align: center;">
<figure >
    <a href="https://observablehq.com/@d3/gallery">
        <img src="img/d32.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问D3的Gallery</i></small></figcaption>
</figure>
</div>
<div style="text-align: center;">
<figure >
    <a href="https://observablehq.com/@d3/gallery">
        <img src="img/d33.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问D3的Gallery</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="budibase">budibase</h2>
<p><a href="https://github.com/Budibase/budibase">https://github.com/Budibase/budibase</a></p>
<p>在几分钟内构建组织内网的应用程序，支持Supports PostgreSQL, MySQL, MSSQL, MongoDB, Rest API, Docker, K8s</p>
<div style="text-align: center;">
<figure >
    <a href="https://budibase.com/">
        <img src="img/budibase.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问budibase网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="vitae">vitae</h2>
<p><a href="https://pkg.mitchelloharawild.com/vitae/">https://pkg.mitchelloharawild.com/vitae/</a></p>
<p>使用Rmarkdown制作个人简历</p>
<div style="text-align: center;">
<figure >
    <a href="https://pkg.mitchelloharawild.com/vitae/">
        <img src="img/vitae.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问budibase网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="nextra">nextra</h2>
<p><a href="https://github.com/shuding/nextra">https://github.com/shuding/nextra</a></p>
<p>Nextra 是一个 Next.js 和 MDX 驱动的无代码站点生成器。1分钟即可制作出下图的静态网站。</p>
<div style="text-align: center;">
<figure >
    <a href="https://nextra.vercel.app/">
        <img src="img/nextra.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问nextra网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="pcolor">pcolor</h2>
<p>在Rstudio中自由的取色。</p>
<p>安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">devtools::install_github(&#34;shalom-lab/pcolor&#34;)
</code></pre></div><p>代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">libarary</span><span class="p">(</span><span class="n">pcolor</span><span class="p">)</span>

<span class="nf">pcolor</span><span class="p">()</span>
</code></pre></div><p>运行</p>
<p><img loading="lazy" src="img/pcolor.png" alt=""  />
</p>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Rmarkdown中调用Python代码</title>
      <link>https://textdata.cn/blog/call_python_code_in_rmarkdown/</link>
      <pubDate>Tue, 23 Nov 2021 18:40:10 +0600</pubDate>
      
      <guid>/blog/call_python_code_in_rmarkdown/</guid>
      <description>左手R，右手Python！</description>
      <content:encoded><![CDATA[<h1 id="rpy2简介">rpy2简介</h1>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E5%9C%A8Rmarkdown%E4%B8%AD%E8%B0%83%E7%94%A8Python%E4%BB%A3%E7%A0%81.zip">点击下载文本</a></p>
<br>
<p>Python和R是一对数据科学两大语言，在互联互通的路上，我感觉R更加的积极。还记得之前 <strong>Python中调用R的库-rpy2</strong>， 在Python使用R语言语法还是有些不自然。在R中调用Python体验十分棒，一起跟我看看吧。</p>
<p>reticulate包是可以让R语言非常流畅自然联通Python的关键。</p>
<p><strong>Rmarkdown预备知识</strong></p>
<p>Rmarkdown很像jupyter notbeook和markdown的结合。</p>
<ul>
<li>代码块</li>
<li>markdon文本</li>
</ul>
<br>
<h2 id="代码块">代码块</h2>
<p>在Rmarkdown中的代码块的开始都是以三引号、{}和语言名为标志，以三引号结尾。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">library(ggplot2)
ggplot(mpg, aes(x=displ, y=cty))+
  geom_point()
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">ggplot</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">displ</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">cty</span><span class="p">))</span><span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/unnamed-chunk-1-1.png" width="100%" />
    
    
</figure>

<p>后面设置好reticulate包后，就可以在Rmarkdown中使用python代码块，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import pandas as pd
df = pd.read_csv(&#39;test.csv&#39;)
df.head()
</code></pre></div><br>
<h2 id="markdown文本">markdown文本</h2>
<p>文本部分全部支持markdown语法，这里不做赘述。</p>
<h2 id="安装rpy">安装rpy</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;reticulate&#34;)
</code></pre></div><h2 id="环境设置">环境设置</h2>
<p>当我们在R代码块中设置好Python环境，就可以在Rmarkdown中跑Python代码。</p>
<br>
<h2 id="查询python">查询Python</h2>
<p>首先我们需要知道Python安装路径，可以在<strong>命令行</strong>中逐行执行下面代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">python3
import sys
sys.executable
</code></pre></div><p>我的mac电脑的Python安装路径为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/Library/Frameworks/Python.framework/Versions/3.7/bin/python3
</code></pre></div><br>
<h2 id="指定python">指定Python</h2>
<p>执行下方的代码(路径改为自己的Python安装路径)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="err">##</span> <span class="nx">Warning</span><span class="p">:</span> <span class="kn">package</span> <span class="err">&#39;</span><span class="nx">reticulate</span><span class="err">&#39;</span> <span class="nx">was</span> <span class="nx">built</span> <span class="nx">under</span> <span class="nx">R</span> <span class="nx">version</span> <span class="mf">3.6.2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">use_python</span><span class="p">(</span><span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/bin/python3&#39;</span><span class="p">)</span>
</code></pre></div><p>执行代码后，我们就可以愉快的使用Python代码</p>
<br>
<h1 id="运行python代码">运行Python代码</h1>
<p>在Rmarkdown中写Python代码块</p>
<h2 id="作图">作图</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span> 
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span> 
<span class="c1"># 计算正弦曲线上点的 x 和 y 坐标</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>  <span class="mi">3</span>  <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span>  <span class="mf">0.1</span><span class="p">)</span> 
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;sine wave form&#34;</span><span class="p">)</span>  
<span class="c1"># 使用 matplotlib 来绘制点</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> 
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/unnamed-chunk-3-1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="读取csv">读取csv</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;test.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;gbk&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">##      birthday   name               text  age  gender  height  weight
## 0  1985/10/08  Alice  我很开心，每天都这么快乐，我很幸福   35  female     175      55
## 1    95.07.07   Mary               我很难过   25  female     165      50
## 2    01-11-10   Mike              唉，真难受   19    male     180      75
## 3      90/2/8  Smith          无所谓开心还是难过   30    male     175      70
## 4      93-1-5  Henry          每天赚一万，真爽！   27    male     185      80
</code></pre></div><p>返回的df是Python对象，我们可以看到表格不好看，这是R中的Python对象。</p>
<br>
<h2 id="在r代码块中调用python变量对象">在R代码块中调用Python变量(对象)</h2>
<p>刚刚讲的都是在Rmakdown中运行Python代码块，并不是在R代码块中运行Python代码或者调用Python变量。</p>
<h3 id="pypython_variable_name">py$python_variable_name</h3>
<p>R代码块中调用Python方法</p>
<p>py$python_variable_name</p>
<ul>
<li>py相当于Python中的对象</li>
<li>$ 相当于Python中的<strong>点</strong></li>
<li>python_variable_name 是Python代码块中的变量名</li>
</ul>
<p>比如在上文中Python的变量df，在R中调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">py</span><span class="o">$</span><span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="100%" />
    
    
</figure>

<p>现在调用Python对象df时，R会默认将其转为R对象，所以内容一样，样式似乎变好看了。</p>
<h3 id="r代码块中导入python库">R代码块中导入Python库</h3>
<p>使用os库的listdir函数查询当前项目文件夹内的文件列表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [&#39;reticulate学习.md&#39;, &#39;test.csv&#39;, &#39;test.py&#39;, &#39;reticulate学习.html&#39;, &#39;reticulate学习_files&#39;, &#39;reticulate.pdf&#39;, &#39;reticulate学习.Rmd&#39;, &#39;data.py&#39;]
</code></pre></div><p>在R代码块中实现上方的Python功能，如下，很简单</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>

<span class="c1">#导入库</span>
<span class="n">os</span> <span class="o">&lt;-</span> <span class="nf">import</span><span class="p">(</span><span class="s">&#34;os&#34;</span><span class="p">)</span>

<span class="c1">#os库的listdir函数</span>
<span class="n">os</span><span class="o">$</span><span class="nf">listdir</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;reticulate学习.md&#34;    &#34;test.csv&#34;             &#34;test.py&#34;             
## [4] &#34;reticulate学习.html&#34;  &#34;reticulate学习_files&#34; &#34;reticulate.pdf&#34;      
## [7] &#34;reticulate学习.Rmd&#34;   &#34;data.py&#34;
</code></pre></div><p>可以发现</p>
<ul>
<li><code>import(&quot;os)</code>代替了<code>import os</code></li>
<li><code>$</code>代替了<code>.</code></li>
<li><code>&lt;-</code> 代替了 <code>=</code></li>
</ul>
<p>再熟悉一下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
<span class="n">pd</span> <span class="o">&lt;-</span> <span class="nf">import</span><span class="p">(</span><span class="s">&#34;pandas&#34;</span><span class="p">)</span>
<span class="n">df2</span> <span class="o">&lt;-</span> <span class="n">pd</span><span class="o">$</span><span class="nf">read_csv</span><span class="p">(</span><span class="s">&#34;test.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#34;gbk&#34;</span><span class="p">)</span>
<span class="n">df2</span>
</code></pre></div>
<figure >
    
        <img src="img/df2.png" width="100%" />
    
    
</figure>

<p>需要注意的是，在R代码块中执行Python代码时，默认会将Python对象转为R对象。</p>
<h3 id="source_python">source_python()</h3>
<p>使用reticulate包中的source_python(&lsquo;py文件路径&rsquo;)可以导入py文件中的变量，这样就可以在R代码块中使用外部变量。例如我在data.py中准备A和B两个字符串</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A = &#39;我是张三,&#39;
B = &#39;来自河北&#39;
</code></pre></div><p>在R代码块中运行data.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>

<span class="nf">source_python</span><span class="p">(</span><span class="s">&#34;data.py&#34;</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;我是张三,&#34;
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">print</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;来自河北&#34;
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">paste0</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;我是张三,来自河北&#34;
</code></pre></div><h2 id="py_run_file">py_run_file()</h2>
<p>在R代码块中运行项目文件夹中的test.py文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
<span class="nf">py_run_file</span><span class="p">(</span><span class="s">&#34;test.py&#34;</span><span class="p">)</span>
</code></pre></div><h1 id="数据类型对比">数据类型对比</h1>
<table>
<thead>
<tr>
<th>R</th>
<th>Python</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td>Single-element vector</td>
<td>Scalar</td>
<td><code>1</code>, <code>1L</code>, <code>TRUE</code>, <code>&quot;foo&quot;</code></td>
</tr>
<tr>
<td>Multi-element vector</td>
<td>List</td>
<td><code>c(1.0, 2.0, 3.0)</code>, <code>c(1L, 2L, 3L)</code></td>
</tr>
<tr>
<td>List of multiple types</td>
<td>Tuple</td>
<td><code>list(1L, TRUE, &quot;foo&quot;)</code></td>
</tr>
<tr>
<td>Named list</td>
<td>Dict</td>
<td><code>list(a = 1L, b = 2.0)</code>, <code>dict(x = x_data)</code></td>
</tr>
<tr>
<td>Matrix/Array</td>
<td>NumPy ndarray</td>
<td><code>matrix(c(1,2,3,4), nrow = 2, ncol = 2)</code></td>
</tr>
<tr>
<td>Data Frame</td>
<td>Pandas DataFrame</td>
<td><code>data.frame(x = c(1,2,3), y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</code></td>
</tr>
<tr>
<td>Function</td>
<td>Python function</td>
<td><code>function(x) x + 1</code></td>
</tr>
<tr>
<td>NULL, TRUE, FALSE</td>
<td>None, True, False</td>
<td><code>NULL</code>, <code>TRUE</code>, <code>FALSE</code></td>
</tr>
</tbody>
</table>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>plotnine绘图 | python的ggplot2语法绘图包</title>
      <link>https://textdata.cn/blog/plotnine/</link>
      <pubDate>Tue, 23 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/plotnine/</guid>
      <description>ggplot2语法，三行代码绘图</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/plotnine%E5%8C%85%E5%AD%A6%E4%B9%A0-Python%E7%89%88%E7%9A%84ggplot2.ipynb">点击跳转到下载链接页面</a></p>
<br>
<p>R语言的ggplot2绘图能力超强，python虽有matplotlib，但是语法臃肿，使用复杂，入门极难，seaborn的出现稍微改善了matplotlib代码量问题，但是定制化程度依然需要借助matplotlib，使用难度依然很大。</p>
<p>好消息是python中有一个plotnine包，可以实现绝大多数ggplot2的绘图功能，两者语法十分相似，R和Python的语法转换成本大大降低。</p>
<ul>
<li>plotnine文档
<a href="https://plotnine.readthedocs.io/en/latest/">https://plotnine.readthedocs.io/en/latest/</a></li>
<li>R语言ggplot2文档
<a href="https://ggplot2.tidyverse.org/reference/index.html">https://ggplot2.tidyverse.org/reference/index.html</a></li>
</ul>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">plotnine</span>

</code></pre></div><h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine.data</span> <span class="kn">import</span> <span class="n">mpg</span>

<span class="c1">#dataframe</span>
<span class="n">mpg</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">manufacturer</th>
<th style="text-align:left">model</th>
<th style="text-align:right">displ</th>
<th style="text-align:right">year</th>
<th style="text-align:right">cyl</th>
<th style="text-align:left">trans</th>
<th style="text-align:left">drv</th>
<th style="text-align:right">cty</th>
<th style="text-align:right">hwy</th>
<th style="text-align:left">fl</th>
<th style="text-align:left">class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">1.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">4</td>
<td style="text-align:left">auto(l5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">18</td>
<td style="text-align:right">29</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">1.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">4</td>
<td style="text-align:left">manual(m5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">21</td>
<td style="text-align:right">29</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2008</td>
<td style="text-align:right">4</td>
<td style="text-align:left">manual(m6)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">20</td>
<td style="text-align:right">31</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2008</td>
<td style="text-align:right">4</td>
<td style="text-align:left">auto(av)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">21</td>
<td style="text-align:right">30</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">6</td>
<td style="text-align:left">auto(l5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">16</td>
<td style="text-align:right">26</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
</tbody>
</table>
<h2 id="快速作图qplot">快速作图qplot</h2>
<p>我们先直接看最简单好用的快速作图函数qplot(x, y, data)</p>
<ul>
<li>横坐标displ</li>
<li>纵坐标cty</li>
<li>数据mpg</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">qplot</span>

<span class="n">qplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> 
      <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">,</span>
      <span class="n">data</span><span class="o">=</span><span class="n">mpg</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_6_0.png" width="800" />
    
    
</figure>

<h2 id="ggplot图层">ggplot图层</h2>
<p>qplot是快速作图函数，如果想让图更好看，进行私人订制，那么我们需要进行图层设计</p>
<p>首先设置ggplot图层（相当于买了一个高级画布），</p>
<ul>
<li>数据mpg</li>
<li>横坐标x轴为displ</li>
<li>纵坐标y轴cty</li>
</ul>
<p>在plotnine中，变量所对应的数据均可通过字段名调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">geom_point</span><span class="p">,</span> <span class="n">aes</span>

<span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_8_0.png" width="800" />
    
    
</figure>

<h2 id="图层叠加">图层叠加</h2>
<p>我们可以看到，已经绘制出一个空的ggplot图层，x轴为displ，y轴为cty。</p>
<p>接下来我们给这个图层上加上数据对应的散点，使用geom_point()直接追加在ggplot图层之上即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_10_0.png" width="800" />
    
    
</figure>

<h2 id="color">color</h2>
<p>在上图中，散点是没有区分每辆车的气缸数cyl。</p>
<p>在geom_point()中，我们可以按照气缸数cyl分门别类，按照颜色显示出来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;cyl&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_12_0.png" width="800" />
    
    
</figure>

<p>上图挺好看的，有时候需要绘制的字段是离散型数值，但是上色后可能不够明显，需要声明该字段为离散型。这时候用factor()来告诉plotnine，这个字段是离散型数值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;factor(cyl)&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_14_0.png" width="800" />
    
    
</figure>

<h2 id="size">size</h2>
<p>有时候为了增加可视化显示的维度数，还可以考虑加入点的大小size</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="s1">&#39;hwy&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_16_0.png" width="800" />
    
    
</figure>

<h2 id="梯度色">梯度色</h2>
<p>如果你想自己设置颜色的梯度，可以通过scale_color_gradient设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">scale_color_gradient</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
<span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;hwy&#39;</span><span class="p">))</span>
<span class="o">+</span> <span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_18_0.png" width="800" />
    
    
</figure>

<h2 id="条形图">条形图</h2>
<p>plotnine中可绘制的图有很多，刚刚已经讲了散点图，接下来我们看看plotnine中的条形图。</p>
<p>首先准备一下数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;variable&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">],</span>
    <span class="s1">&#39;category&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Female&#39;</span><span class="p">,</span> <span class="s1">&#39;Male&#39;</span><span class="p">,</span> <span class="s1">&#39;1-24&#39;</span><span class="p">,</span> <span class="s1">&#39;25-54&#39;</span><span class="p">,</span> <span class="s1">&#39;55+&#39;</span><span class="p">,</span> <span class="s1">&#39;Lo&#39;</span><span class="p">,</span> <span class="s1">&#39;Lo-Med&#39;</span><span class="p">,</span> <span class="s1">&#39;Med&#39;</span><span class="p">,</span> <span class="s1">&#39;High&#39;</span><span class="p">],</span>
    <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">40</span><span class="p">],</span>
<span class="p">})</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Categorical</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">],</span> <span class="n">categories</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Categorical</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">],</span> <span class="n">categories</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">])</span>

<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">variable</th>
<th style="text-align:left">category</th>
<th style="text-align:right">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">gender</td>
<td style="text-align:left">Female</td>
<td style="text-align:right">60</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">gender</td>
<td style="text-align:left">Male</td>
<td style="text-align:right">40</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">age</td>
<td style="text-align:left">1-24</td>
<td style="text-align:right">50</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">age</td>
<td style="text-align:left">25-54</td>
<td style="text-align:right">30</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">age</td>
<td style="text-align:left">55+</td>
<td style="text-align:right">20</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Lo</td>
<td style="text-align:right">10</td>
</tr>
<tr>
<td style="text-align:right">6</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Lo-Med</td>
<td style="text-align:right">25</td>
</tr>
<tr>
<td style="text-align:right">7</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Med</td>
<td style="text-align:right">25</td>
</tr>
<tr>
<td style="text-align:right">8</td>
<td style="text-align:left">income</td>
<td style="text-align:left">High</td>
<td style="text-align:right">40</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">aes</span><span class="p">,</span> <span class="n">geom_text</span><span class="p">,</span> <span class="n">position_dodge</span><span class="p">,</span> <span class="n">geom_point</span>

<span class="c1">#调整文本位置</span>
<span class="n">dodge_text</span> <span class="o">=</span> <span class="n">position_dodge</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">0.9</span><span class="p">)</span>                              <span class="c1"># new</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">,</span> 
                <span class="n">y</span><span class="o">=</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> 
                <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;category&#39;</span><span class="p">))</span> <span class="c1">#类别填充颜色</span>
 <span class="o">+</span> <span class="n">geom_col</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="s1">&#39;dodge&#39;</span><span class="p">,</span> 
            <span class="n">show_legend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>   <span class="c1"># modified</span>
 <span class="o">+</span> <span class="n">geom_text</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="o">=-</span><span class="mf">.5</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;category&#39;</span><span class="p">),</span>                          <span class="c1"># new</span>
             <span class="n">position</span><span class="o">=</span><span class="n">dodge_text</span><span class="p">,</span>
             <span class="n">color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span>  <span class="c1">#文本颜色</span>
             <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>   <span class="c1">#字号</span>
             <span class="n">angle</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="c1">#文本的角度</span>
             <span class="n">va</span><span class="o">=</span><span class="s1">&#39;top&#39;</span><span class="p">)</span>
    
 <span class="o">+</span> <span class="n">lims</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>                                                 <span class="c1"># new</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_22_0.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine.data</span> <span class="kn">import</span> <span class="n">economics_long</span>

<span class="n">economics_long</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">date</th>
<th style="text-align:left">variable</th>
<th style="text-align:right">value</th>
<th style="text-align:right">value01</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">1967-07-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">507.4</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">1967-08-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">510.5</td>
<td style="text-align:right">0.000266001</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">1967-09-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">516.3</td>
<td style="text-align:right">0.00076368</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">1967-10-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">512.9</td>
<td style="text-align:right">0.000471937</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">1967-11-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">518.1</td>
<td style="text-align:right">0.000918132</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">aes</span><span class="p">,</span> <span class="n">geom_line</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">economics_long</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;value01&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">))</span>
 <span class="o">+</span> <span class="n">geom_line</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_25_0.png" width="800" />
    
    
</figure>

<p>plotnine目前已经支持绝大多数ggplot2，但是文档方面没有ggplot2全，所以学习plotnine时可以参考ggplot2。</p>
<ul>
<li>plotnine文档
<a href="https://plotnine.readthedocs.io/en/latest/">https://plotnine.readthedocs.io/en/latest/</a></li>
<li>R语言ggplot2文档
<a href="https://ggplot2.tidyverse.org/reference/index.html">https://ggplot2.tidyverse.org/reference/index.html</a></li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>rpy2包 | 在Jupyter中调用R语言的代码</title>
      <link>https://textdata.cn/blog/call_r_language_code_in_jupyter/</link>
      <pubDate>Mon, 22 Nov 2021 17:40:10 +0600</pubDate>
      
      <guid>/blog/call_r_language_code_in_jupyter/</guid>
      <description>文本数据分析利器Python和R语言！</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E5%9C%A8jupyter%E4%B8%AD%E8%B0%83%E7%94%A8R%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81.zip">点击下载</a></p>
<br>
<p>在数据分析中，Python和R各有千秋，虽然Python或R都能在数据分析打通关，从采集、清洗(预处理)、分析、可视化，但是在不同的环节，不同的语言易用程度不同。Python胜在干脏活累活，诸如数据采集、数据清洗、机器学习等；而R语言胜在统计分析、可视化等。所以，如果你正好Python和R都入门了，可以考虑两者结合。那么就会遇到今天的问题-<strong>如何在jupyter中使用R语言代码？</strong></p>
<h2 id="rpy2包">rpy2包</h2>
<p>rpy2包首先是Python包，ta衔接了Python和R，通过rpy2可以运行R语言相关代码、函数、包。</p>
<p>在Jupyter notebook中主要有两种情况</p>
<ol>
<li>单元格中以Python为主，可以插入<strong>R的代码字符串</strong></li>
<li>单个的单元格要么只有<strong>R代码</strong>，要么只有<strong>Python代码</strong></li>
</ol>
<p>遇到这类问题，各位的电脑要确保</p>
<ol>
<li>电脑已经安装了Python和R</li>
<li>已安装rpy2包</li>
</ol>
<p>安装rpy2包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">rpy2</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="c1">#R代码运行会尽量以DataFrame显示</span>
<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#运行R代码</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="s1">&#39;R代码字符串&#39;</span><span class="p">)</span>
</code></pre></div><h2 id="运行r代码">运行R代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">rpy2</span><span class="o">.</span><span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="s1">&#39;R代码字符串&#39;</span><span class="p">)</span>

</code></pre></div><p>rpy2.robjects.r()函数会识别 <strong>R代码字符串</strong>, 并将其执行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>
<span class="kn">import</span> <span class="nn">warnings</span> 
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="c1">#直接声明，data frame强制转为DataFrame</span>
<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#R代码</span>
<span class="n">r_code</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">library(dplyr)
</span><span class="s2">
</span><span class="s2">text &lt;- c(&#34;Because I could not stop for Death -&#34;,
</span><span class="s2">          &#34;He kindly stopped for me -&#34;,
</span><span class="s2">          &#34;The Carriage held but just Ourselves -&#34;,
</span><span class="s2">          &#34;and Immortality&#34;)
</span><span class="s2">          
</span><span class="s2">text_df &lt;- tibble(docid=1:4, text=text)
</span><span class="s2">text_df
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="c1">#运行R代码</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="n">r_code</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">docid</th>
<th style="text-align:left">text</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">Because I could not stop for Death -</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">He kindly stopped for me -</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">The Carriage held but just Ourselves -</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
<td style="text-align:left">and Immortality</td>
</tr>
</tbody>
</table>
<ol>
<li>准备一个R代码r_code，该代码会生成R语言的tibble数据类型(R语言中的一种data frame)。</li>
<li>robjects.r(r_code) 运行R代码(字符串)</li>
<li>在本例中，使用pandas2ri.activate()强制声明，在Python中将变量text_df以pandas.DataFrame显示</li>
</ol>
<h2 id="调用r数据集">调用R数据集</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">rpy2.robjects.r.data(&#39;R的数据集名&#39;)
</code></pre></div><p>调用R的数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
</code></pre></div><ul>
<li>robjects.r.data(&lsquo;R数据集名&rsquo;) 准备R数据集，此时Python并没有显示该数据集，可以理解为准备数据</li>
<li><code>robjects.r['R数据集名']</code> 导入R的数据集</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#准备iris</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">data</span><span class="p">(</span><span class="s1">&#39;iris&#39;</span><span class="p">)</span>
<span class="c1">#导入iris</span>
<span class="n">iris</span> <span class="o">=</span> <span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">[</span><span class="s1">&#39;iris&#39;</span><span class="p">]</span>
<span class="n">iris</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">Sepal.Length</th>
<th style="text-align:right">Sepal.Width</th>
<th style="text-align:right">Petal.Length</th>
<th style="text-align:right">Petal.Width</th>
<th style="text-align:left">Species</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">5.1</td>
<td style="text-align:right">3.5</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">4.9</td>
<td style="text-align:right">3</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">4.7</td>
<td style="text-align:right">3.2</td>
<td style="text-align:right">1.3</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">4.6</td>
<td style="text-align:right">3.1</td>
<td style="text-align:right">1.5</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3.6</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
</tbody>
</table>
<h2 id="调用r语言包">调用R语言包</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">rpy2</span><span class="o">.</span><span class="n">robjects</span><span class="o">.</span><span class="n">packages</span><span class="o">.</span><span class="n">importr</span><span class="p">(</span><span class="s1">&#39;R包名&#39;</span><span class="p">)</span>
</code></pre></div><p>R语言中的readr包有read_csv()函数，可以读取csv文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">rpy2.robjects.packages</span> <span class="kn">import</span> <span class="n">importr</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#导入R语言中的readr包</span>
<span class="n">readr</span> <span class="o">=</span> <span class="n">importr</span><span class="p">(</span><span class="s2">&#34;readr&#34;</span><span class="p">)</span>
<span class="c1">#使用readr包中的read_csv()函数</span>
<span class="n">mtcars</span> <span class="o">=</span> <span class="n">readr</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;mtcars.csv&#34;</span><span class="p">)</span>
<span class="n">mtcars</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">car</th>
<th style="text-align:right">mpg</th>
<th style="text-align:right">cyl</th>
<th style="text-align:right">disp</th>
<th style="text-align:right">hp</th>
<th style="text-align:right">drat</th>
<th style="text-align:right">wt</th>
<th style="text-align:right">qsec</th>
<th style="text-align:right">vs</th>
<th style="text-align:right">am</th>
<th style="text-align:right">gear</th>
<th style="text-align:right">carb</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">Mazda RX4</td>
<td style="text-align:right">21</td>
<td style="text-align:right">6</td>
<td style="text-align:right">160</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.9</td>
<td style="text-align:right">2.62</td>
<td style="text-align:right">16.46</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">Mazda RX4 Wag</td>
<td style="text-align:right">21</td>
<td style="text-align:right">6</td>
<td style="text-align:right">160</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.9</td>
<td style="text-align:right">2.875</td>
<td style="text-align:right">17.02</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">Datsun 710</td>
<td style="text-align:right">22.8</td>
<td style="text-align:right">4</td>
<td style="text-align:right">108</td>
<td style="text-align:right">93</td>
<td style="text-align:right">3.85</td>
<td style="text-align:right">2.32</td>
<td style="text-align:right">18.61</td>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">Hornet 4 Drive</td>
<td style="text-align:right">21.4</td>
<td style="text-align:right">6</td>
<td style="text-align:right">258</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.08</td>
<td style="text-align:right">3.215</td>
<td style="text-align:right">19.44</td>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">Hornet Sportabout</td>
<td style="text-align:right">18.7</td>
<td style="text-align:right">8</td>
<td style="text-align:right">360</td>
<td style="text-align:right">175</td>
<td style="text-align:right">3.15</td>
<td style="text-align:right">3.44</td>
<td style="text-align:right">17.02</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
</tr>
</tbody>
</table>
<h2 id="cell只运行r代码">Cell只运行R代码</h2>
<p>上面的几个章节中，每个cell中代码均为Python和R的混用，如果在Cell中只运行R代码，</p>
<ol>
<li>可以先单独在一个cell中运行 <code>%load_ext rpy2.ipython</code>,</li>
<li>在另外一个cell中使用<code>%%R</code>声明本cell中使用的是R代码。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">%</span><span class="n">load_ext</span> <span class="n">rpy2</span><span class="o">.</span><span class="n">ipython</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="o">%%</span><span class="n">R</span>

<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>

<span class="nf">ggplot</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">Sepal.Length</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="n">Sepal.Width</span><span class="p">,</span> 
                 <span class="n">color</span><span class="o">=</span><span class="n">Species</span><span class="p">))</span><span class="o">+</span>
<span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="output_17_0.png" width="100%" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="o">%%</span><span class="n">R</span> <span class="o">-</span><span class="n">h</span> <span class="m">550</span> <span class="o">-</span><span class="n">w</span> <span class="m">800</span>  <span class="c1">#设置宽、高</span>

<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>

<span class="nf">ggplot</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">Sepal.Length</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="n">Sepal.Width</span><span class="p">,</span> 
                 <span class="n">color</span><span class="o">=</span><span class="n">Species</span><span class="p">))</span><span class="o">+</span>
<span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="output_18_0.png" width="100%" />
    
    
</figure>

<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
