<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>chatGPT on 大邓和他的PYTHON</title>
    <link>/tags/chatgpt/</link>
    <description>Recent content in chatGPT on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/chatgpt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>“使用 chatGPT 写 Python 网络爬虫”</title>
      <link>https://textdata.cn/blog/2023-02-15-write-web-scraper-with-chatgpt/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-15-write-web-scraper-with-chatgpt/</guid>
      <description>在以上的操作中，Step1  **找网址规律** 只要你把已经有规律性的内容丢给ta，ta能给你生成对应的代码。Step2  **发起访问** 这一步是需要我们重点测试的，因为chatgpt不能联网，一定确保访问ok，且获取的源代码中含有我们关注的信息。Step3 **解析数据** 把输入的html源代码和输出的数据中蕴含着规律丢给ta，需要重点检查 Step4 **存至csv** 没啥问题 Step5 **代码汇总** **Bug最多，最容易睁眼瞎写代码**。我明明采集hiadadeng.github.io， 结果有几次给我汇总的代码采集的是别的网站。定位方式偷换为BeautifulSoup。所以如果能懂爬虫五步法，可以自己负责提问题，负责每个环节的检查，最终的汇总Step5暂时不要交给chatGPT，还是留给我们自己吧。</description>
      <content:encoded><![CDATA[<h2 id="相关内容">相关内容</h2>
<ul>
<li><a href="https://textdata.cn/blog/2023-02-01-v2net-science-network/">科学上网工具v2net</a></li>
<li><a href="https://textdata.cn/blog/2023-02-15-how-to-sign-up-the-chatgpt-accout-and-upgrade-to-plus/">如何注册chatGPT账号</a></li>
<li><a href="https://textdata.cn/blog/2023-02-11-credit_card_for_chatgpt-plus/">使用虚拟信用卡，国内用户升级为chatGPT plus会员</a></li>
<li><a href="chatgpt-wirte-scraper.png"><strong>本次chatgpt写爬虫完整截图</strong></a></li>
</ul>
<p><br><br></p>
<p>昨晚看到 <a href="https://www.bilibili.com/video/BV14T411Z7FE/">王树易老师</a> 的视频，挺有收获，做了下chatGPT写爬虫的尝试。</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV14T411Z7FE&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<br>
<h2 id="写爬虫流程">写爬虫流程</h2>
<h3 id="大邓">大邓</h3>
<p>chatgpt你好，我是大邓，下面是大邓使用Python写爬虫的步骤</p>
<table>
<thead>
<tr>
<th>Step</th>
<th>步骤名</th>
<th>解决的问题</th>
<th>实现的功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>1</strong></td>
<td>请求</td>
<td>网页数据在哪里？</td>
<td>发现网址url规律</td>
</tr>
<tr>
<td><strong>2</strong></td>
<td>请求</td>
<td>如何获取网页数据？</td>
<td>先尝试使用requests成功访问一个url，拿到一个页面数据</td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>解析</td>
<td>从html中定位需要的数据</td>
<td>使用pyquery对这一个页面的网页数据进行解析</td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>解析</td>
<td>从json中定位需要的数据</td>
<td>使用json 或 resp.json() 进行json网页数据解析</td>
</tr>
<tr>
<td><strong>4</strong></td>
<td>存储</td>
<td>如何存储数据</td>
<td>使用csv库将数据存储到csv文件中</td>
</tr>
<tr>
<td><strong>5</strong></td>
<td>整合</td>
<td>重复2-4</td>
<td>for循环对所有的url进行访问解析存储</td>
</tr>
</tbody>
</table>
<p>我将按照步骤逐步提问你。可以开始了吗<br></p>
<h3 id="chatgpt">chatGPT</h3>
<p>可以的，我很乐意为您提供帮助。请继续提问。</p>
<p><br><br></p>
<h2 id="step1-网页数据在哪里">Step1 网页数据在哪里？</h2>
<h3 id="大邓-1">大邓</h3>
<p><img loading="lazy" src="img/blog_post_list.png" alt=""  />
</p>
<p>博客 <a href="https://textdata.cn/">https://textdata.cn/</a> 使用的github page构建的，生成的网站是静态网站， 页面是HTML类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">page1</span>  <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">textdata</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">page</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span>
<span class="n">page2</span>  <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">textdata</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">page</span><span class="o">/</span><span class="mi">2</span><span class="o">/</span>
<span class="n">page3</span>  <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">textdata</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">page</span><span class="o">/</span><span class="mi">3</span><span class="o">/</span>
<span class="o">......</span>
</code></pre></div><p>请使用字符串format方法，for循环，生成10页的网址。代码要简洁、易读。</p>
<br>
<h3 id="chatgpt-1">chatGPT</h3>
<p>您可以这样生成10页的网址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">base_url</span> <span class="o">=</span> <span class="s2">&#34;https://textdata.cn/blog/page/</span><span class="si">{}</span><span class="s2">/&#34;</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">base_url</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</code></pre></div><p>这样的代码很简洁，很容易理解。您只需要在base_url字符串中指定占位符，然后在format方法中填充实际的数字即可。</p>
<p><br><br></p>
<h2 id="step2-如何获取网页数据">Step2 如何获取网页数据？</h2>
<h3 id="大邓-2">大邓</h3>
<p>写一个完整的代码很难，但是可以把问题抽象成一个局部与整体的关系。先把重复出现的局部搞明白，再使用for循环把整体解决。 现在我试图用requests的get方法访问</p>
<p>url = <a href="https://textdata.cn/blog/page/2">https://textdata.cn/blog/page/2</a></p>
<p>注意要加入headers， 代码要简洁，有阅读性！</p>
<br>
<h3 id="chatgpt-2">chatGPT</h3>
<p>您可以这样使用requests库的get方法访问网页数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://textdata.cn/blog/page/2&#34;</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36&#34;</span>
<span class="p">}</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>

<span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Failed to access the page with status code:&#34;</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</code></pre></div><p>这样的代码非常简洁，容易理解。您只需要指定请求的URL和请求头，然后调用requests.get方法即可。如果请求成功（即响应状态码为200），则打印响应的网页数据；否则，打印响应的状态码。</p>
<p><br><br></p>
<h2 id="step3-从html中定位需要的数据">Step3 从html中定位需要的数据</h2>
<h3 id="大邓-3">大邓</h3>
<p>博客 <a href="https://textdata.cn/">https://textdata.cn/</a> 是静态网站， 页面是HTML类型， 可以使用pyquery对这一个页面的网页数据进行解析。</p>
<p>由于chatgpt 不能联网访问， 我将</p>
<p>url = &lsquo;<a href="https://textdata.cn/blog/page/2/">https://textdata.cn/blog/page/2/</a>’</p>
<p>对应的html源代码提供给你作为 response.text, 提供给你, 我需要你用pyquery帮我抽取出aritcle_infos，为了省事， 这里的 aritcle_infos 我只写了3个记录，请给我输出5个记录的。</p>
<p>代码要简洁、可阅读性高。返回的代码里不要显示 response.text 源代码内容， 只以变量 response.text 显示。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">response</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">main</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;main&#34;</span><span class="o">&gt;</span> 
<span class="o">&lt;</span><span class="n">header</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;page-header&#34;</span><span class="o">&gt;&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;breadcrumbs&#34;</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&#34;/&#34;</span> <span class="n">target</span><span class="o">=</span><span class="s2">&#34;_blank&#34;</span><span class="o">&gt;</span><span class="n">Home</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Blogs</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">header</span><span class="o">&gt;</span>
<span class="o">...</span>
<span class="o">&lt;</span><span class="n">article</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;post-entry&#34;</span><span class="o">&gt;</span> 
<span class="o">&lt;</span><span class="n">figure</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;entry-cover&#34;</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">loading</span><span class="o">=</span><span class="s2">&#34;lazy&#34;</span> <span class="n">src</span><span class="o">=</span><span class="s2">&#34;/images/blog/race-bar-pyanimate.png&#34;</span> <span class="n">alt</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">figure</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">header</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;entry-header&#34;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">pynimate库</span> <span class="o">|</span> <span class="n">绘制动态可视化图</span>
    <span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">header</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">section</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;entry-content&#34;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pynimate</span> <span class="n">创建条形数据动画</span><span class="err">。</span><span class="o">...&lt;/</span><span class="n">p</span><span class="o">&gt;</span>


<span class="o">&lt;</span><span class="n">article</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;post-entry&#34;</span><span class="o">&gt;</span> 
<span class="o">&lt;</span><span class="n">figure</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;entry-cover&#34;</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">loading</span><span class="o">=</span><span class="s2">&#34;lazy&#34;</span> <span class="n">src</span><span class="o">=</span><span class="s2">&#34;/images/blog/chatgplt-plus.jpg&#34;</span> <span class="n">alt</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">figure</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">header</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;entry-header&#34;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">使用虚拟信用卡</span><span class="err">，</span><span class="n">国内用户升级为chatGPT</span> <span class="n">plus会员</span>
    <span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">header</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">section</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;entry-content&#34;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">使用虚拟信用卡</span><span class="err">，</span><span class="n">国内用户升级为chatGPT</span> <span class="n">plus会员</span><span class="o">...&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

    <span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">在巨型语言模型时代竞争</span><span class="err">：</span><span class="n">OpenAI</span> <span class="n">vs</span> <span class="n">谷歌</span>
    <span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">header</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">section</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;entry-content&#34;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">在未来</span><span class="err">，</span><span class="n">巨型语言模型将继续发挥重要作用</span><span class="err">，</span><span class="n">并不断推动人工智能的发展</span><span class="err">。</span><span class="n">随着技术的不断提高</span><span class="err">，</span><span class="n">它们将越来越智能</span><span class="err">，</span><span class="n">更加逼近人类语言的表达能力</span><span class="err">，</span><span class="n">从而改变人类的生活和工作方式</span><span class="err">。</span><span class="o">...&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
    
<span class="o">...</span>
    
  <span class="o">&lt;/</span><span class="n">nav</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">footer</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="n">main</span><span class="o">&gt;</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">aritcle_infos = [(&#39;pynimate库 | 绘制动态可视化图&#39;, 
</span><span class="s2">   &#39;https://textdata.cn/blog/2023-02-11-pyanimate-create-vis-video/&#39;,
</span><span class="s2">   &#39;2023-02-09&#39;,
</span><span class="s2">   &#39;pynimate 创建条形数据动画。...&#39;),
</span><span class="s2">  
</span><span class="s2">  (&#39;使用 chatGPT 做词频统计&amp;词云图&#39;,
</span><span class="s2">   &#39;https://textdata.cn/blog/2023-02-11-chatgpt-plus-for-text-mining/&#39;,
</span><span class="s2">   &#39;2023-02-09&#39;,
</span><span class="s2">   &#39;使用 chatGPT 做词频统计&amp;词云图，过程使用pandas、pyecharts、jieba等库。...&#39;),
</span><span class="s2">   
</span><span class="s2">   (&#39;使用虚拟信用卡，国内用户升级为chatGPT plus会员&#39;,
</span><span class="s2">    &#39;https://textdata.cn/blog/2023-02-11-credit_card_for_chatgpt-plus/&#39;,
</span><span class="s2">    &#39;2023-02-09&#39;,
</span><span class="s2">    &#39;使用虚拟信用卡，国内用户升级为chatGPT plus会员...&#39;)
</span><span class="s2">  ]
</span></code></pre></div><br>
<h3 id="chatgpt-3">chatGPT</h3>
<p>使用pyquery解析HTML，可以通过对HTML中的标签和属性进行查询获取相关数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pyquery</span> <span class="kn">import</span> <span class="n">PyQuery</span> <span class="k">as</span> <span class="n">pq</span>

<span class="n">html</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span>
<span class="n">doc</span> <span class="o">=</span> <span class="n">pq</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>

<span class="n">aritcle_infos</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">article</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">(</span><span class="s1">&#39;article.post-entry&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">title</span> <span class="o">=</span> <span class="n">article</span><span class="p">(</span><span class="s1">&#39;header.entry-header h2&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
    <span class="n">link</span> <span class="o">=</span> <span class="n">article</span><span class="p">(</span><span class="s1">&#39;a.entry-link&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
    <span class="n">date</span> <span class="o">=</span> <span class="n">article</span><span class="p">(</span><span class="s1">&#39;footer.entry-footer span&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">)[:</span><span class="mi">10</span><span class="p">]</span>
    <span class="n">description</span> <span class="o">=</span> <span class="n">article</span><span class="p">(</span><span class="s1">&#39;section.entry-content p&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
    <span class="n">aritcle_infos</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">title</span><span class="p">,</span> <span class="n">link</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">description</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="n">aritcle_infos</span><span class="p">[:</span><span class="mi">5</span><span class="p">])</span>
</code></pre></div><p><br><br></p>
<h2 id="step4-存储至csv">Step4 存储至csv</h2>
<h3 id="大邓-4">大邓</h3>
<p>使用csv库， 把Step3中得到的 aritcle_infos数据， 存储到csv文件中。csv文件编码为 utf-8编码， 字段名依次是title, link, date, intro。代码要简洁、可阅读性高。</p>
<br>
<h3 id="chatgpt-4">chatGPT</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">csv</span>

<span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;aritcle_infos.csv&#39;</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">([</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;link&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;intro&#39;</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">info</span> <span class="ow">in</span> <span class="n">aritcle_infos</span><span class="p">:</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="step5-整合">Step5 整合</h2>
<h3 id="大邓-5">大邓</h3>
<p>采集hidadeng网 10 个页面的数据，存储到csv。使用for循环，重复Step2、Step3、Step4，  代码整理汇总到这次结果中。</p>
<p>注意是用requests库、pyquery、csv库代码变量前后衔接对应，代码要简洁、可阅读性高。注意，不要生成新的pyquery定位方式。</p>
<p>爬虫采集过程中，容易出现小错误，请让代码中带有try-except, 增强代码的健壮性。</p>
<br>
<h3 id="chatgpt-5">chatGPT</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">pyquery</span> <span class="kn">import</span> <span class="n">PyQuery</span> <span class="k">as</span> <span class="n">pq</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="k">def</span> <span class="nf">get_article_info</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
            <span class="n">html</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span>
            <span class="n">doc</span> <span class="o">=</span> <span class="n">pq</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
            <span class="n">title</span> <span class="o">=</span> <span class="n">doc</span><span class="p">(</span><span class="s1">&#39;.entry-title a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
            <span class="n">link</span> <span class="o">=</span> <span class="n">doc</span><span class="p">(</span><span class="s1">&#39;.entry-title a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
            <span class="n">date</span> <span class="o">=</span> <span class="n">doc</span><span class="p">(</span><span class="s1">&#39;.entry-date&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
            <span class="n">intro</span> <span class="o">=</span> <span class="n">doc</span><span class="p">(</span><span class="s1">&#39;.entry-summary p&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
            <span class="n">article_info</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;title&#39;</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="s1">&#39;link&#39;</span><span class="p">:</span> <span class="n">link</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">:</span> <span class="n">date</span><span class="p">,</span> <span class="s1">&#39;intro&#39;</span><span class="p">:</span> <span class="n">intro</span><span class="p">}</span>
            <span class="k">return</span> <span class="n">article_info</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="kc">None</span>

<span class="k">def</span> <span class="nf">save_to_csv</span><span class="p">(</span><span class="n">article_infos</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;article_infos.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;link&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;intro&#39;</span><span class="p">])</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">article_info</span> <span class="ow">in</span> <span class="n">article_infos</span><span class="p">:</span>
            <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">article_info</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">base_url</span> <span class="o">=</span> <span class="s1">&#39;https://hidadeng.com/page/&#39;</span>
    <span class="n">article_infos</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">base_url</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">article_info</span> <span class="o">=</span> <span class="n">get_article_info</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">article_info</span><span class="p">:</span>
            <span class="n">article_infos</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">article_info</span><span class="p">)</span>
    <span class="n">save_to_csv</span><span class="p">(</span><span class="n">article_infos</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div><p><br><br></p>
<h2 id="总结">总结</h2>
<p>在以上的操作中，</p>
<ul>
<li>Step1  <strong>找网址规律</strong> 只要你把已经有规律性的内容丢给ta，ta能给你生成对应的代码。</li>
<li>Step2  <strong>发起访问</strong> 这一步是需要我们重点测试的，因为chatgpt不能联网，一定确保访问ok，且获取的源代码中含有我们关注的信息。</li>
<li>Step3 <strong>解析数据</strong> 把输入的html源代码和输出的数据中蕴含着规律丢给ta，需要重点检查</li>
<li>Step4 <strong>存至csv</strong> 没啥问题</li>
<li>Step5 <strong>代码汇总</strong> <strong>Bug最多，最容易睁眼瞎写代码</strong>。我明明采集hiadadeng.github.io， 结果有几次给我汇总的代码采集的是别的网站。定位方式偷换为BeautifulSoup。</li>
</ul>
<p>所以如果能懂爬虫五步法，可以自己负责提问题，负责每个环节的检查，最终的汇总Step5暂时不要交给chatGPT，还是留给我们自己吧。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">支持开票 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何注册chatGPT账号</title>
      <link>https://textdata.cn/blog/2023-02-15-how-to-sign-up-the-chatgpt-accout-and-upgrade-to-plus/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-15-how-to-sign-up-the-chatgpt-accout-and-upgrade-to-plus/</guid>
      <description>如何注册chatGPT，如何升级为PLUS用户</description>
      <content:encoded><![CDATA[<h2 id="一拦路虎">一、拦路虎</h2>
<p>使用chatGPT PLUS前，我们将面临有几个拦路虎</p>
<ol>
<li>如何科学上网</li>
<li>海外手机号</li>
<li>国外的信用卡</li>
</ol>
<p>搞定了这些问题， 我们就可以愉悦的使用chatGPT</p>
<p><img loading="lazy" src="img/chatgpt-is-a-joke.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="二注册chatgpt">二、注册chatGPT</h2>
<p>注册 chatGPT，需要先科学上网， 教程之前分享过 <a href="https://textdata.cn/blog/2023-02-01-v2net-science-network/">科学上网v2net</a> ，需要注意， 代理节点推荐选用美国、日本，全局模式访问外网。</p>
<h3 id="21-自己注册">2.1 自己注册</h3>
<p>搞定了 chatGPT 页面的访问后，需要使用国外可用的手机号， 才能注册chatGPT， 这时候可以用<a href="https://sms-activate.org/">接码平台https://sms-activate.org/</a>，</p>
<h3 id="22-找代理注册账号">2.2 找代理注册账号</h3>
<p>或者花钱 <a href="https://shop.terobox.com/?from=1059">找代理网https://shop.terobox.com/</a> 注册chatGPT账号。对了， 大邓自己的账号就是找代理注册的。</p>
<p><img loading="lazy" src="img/chatgpt-register-page.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="三chatgpt-plus">三、chatGPT PLUS</h2>
<p>chatGPT短短一个月，注册用户狂涨至 一亿用户， 是目前发展最迅猛的 网络应用。这就导致短时间大规模的访问让chatGPT服务有点绷不住了， 出现网络连接不稳定、响应速度变慢。 而且chatGPT的功能也被阉割， 不像最初那么智能。解决办法只有一个&mdash;使用超能力，20美金将账号提升至PLUS。有两种PLUS升级方式</p>
<h3 id="21-虚拟信用卡">2.1 虚拟信用卡</h3>
<p>升级chatGPT PLUS的难点在于你的信用卡是否可用。比如大邓，即使是VISA卡， 升级PLUS也不支持。解决办法是看大邓写的<a href="https://textdata.cn/blog/2023-02-11-credit_card_for_chatgpt-plus/">虚拟信用卡使用教程</a> ， PLUS最终使用成本大概 <strong>150元（21美元/月） ， 大邓个人推荐自己搭建虚拟信用卡</strong>。确保在**「全局VPN+浏览器无痕模式」下进行注册及升级PLUS的操作**</p>
<h3 id="32-找代理升级账号">3.2 找代理升级账号</h3>
<p>如果觉得操作起来比较繁琐复杂，如果你经济状况还okay， 可以使用 <a href="https://shop.terobox.com/?from=1059">代理网https://shop.terobox.com/</a> ，但就是有些小贵， 要300元啊，两倍于自己搞。</p>
<p><img loading="lazy" src="img/chatgpt-register-page.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">支持开票 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据清洗 | 借助 chatGPT 设计正则表达式</title>
      <link>https://textdata.cn/blog/2023-02-12-regex-expression-generated-by-chatgpt/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-12-regex-expression-generated-by-chatgpt/</guid>
      <description>使用 chatGPT 做正则表达式做数据清洗。</description>
      <content:encoded><![CDATA[<p>正则表达式可以帮我们，对给定输入的数据input_data，设定一定的规律pattern，输出干净结果output_data的工具。</p>
<p>但对于小白而言，很多时候，我们知道 input_data 和 output_data， 但不知道如何设计 表达式pattern，毕竟即使是计算机专业的学生，如果不系统钻研，都不一定会快速上手，更遑论我们文科生小白。<strong>chatGPT 是一种具有极强学习和推理能力的工具， 我们需要先研究数据中的规律，抽象出能实现目的的 input_data 和 output_data， 丢给chatGPT帮我们设计</strong>。</p>
<p>接下来的人机对话中，input_data 和 output 为视频课程《Python实证指标构建与文本分析》正则表达式章节的实验数据。实验下来， 比通过谷歌百度搜效率高多了，准确率也不错。</p>
<br>
<h2 id="问题1-提取个人信息">问题1-提取个人信息</h2>
<h3 id="deng">deng:</h3>
<p>我正在学习Python正则表达式，将给出实验文本数据input_data，以及我想从中抽取出的内容output_data。请帮我设计对应的正则表达式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">input_text</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;大家好，我叫张三,来自河北，今年30岁。&#39;</span><span class="p">,</span>                      
              <span class="s1">&#39;大家好，我叫李四,来自山东，今年25岁。&#39;</span><span class="p">,</span>                     
              <span class="s1">&#39;大家好，我叫王五,来自内蒙古，今年22岁。&#39;</span><span class="p">]</span> 


<span class="n">output</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;河北&#39;</span><span class="p">,</span> <span class="s1">&#39;30&#39;</span><span class="p">),</span> 
          <span class="p">(</span><span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="s1">&#39;山东&#39;</span><span class="p">,</span> <span class="s1">&#39;25&#39;</span><span class="p">),</span> 
          <span class="p">(</span><span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="s1">&#39;内蒙古&#39;</span><span class="p">,</span> <span class="s1">&#39;22&#39;</span><span class="p">)]</span> 
</code></pre></div><h3 id="chatgpt">chatGPT:</h3>
<p>下面是匹配上述input_data和output_data的正则表达式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="n">input_data</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;大家好，我叫张三,来自河北，今年30岁。&#39;</span><span class="p">,</span> 
              <span class="s1">&#39;大家好，我叫李四,来自山东，今年25岁。&#39;</span><span class="p">,</span>
              <span class="s1">&#39;大家好，我叫王五,来自内蒙古，今年22岁。&#39;</span><span class="p">]</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">text</span> <span class="ow">in</span> <span class="n">input_text</span><span class="p">:</span>
    
    <span class="n">res</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;我叫(.*),来自(.*)，今年(.*)岁&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
    <span class="n">output_data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
    
<span class="nb">print</span><span class="p">(</span><span class="n">output_data</span><span class="p">)</span>
</code></pre></div><p>这段代码将使用正则表达式 <code>r&quot;我叫(.*),来自(.*),今年(\d+)岁&quot;</code> 匹配 <code>input_data</code> 中的内容，并将每一行的匹配结果存储在 <code>output_data</code> 列表中。</p>
<br>
<h2 id="问题2-提取出数据中的年份">问题2-提取出数据中的年份。</h2>
<h3 id="deng-1">deng:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">intput_data = &#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年22。目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;

output_data = [&#39;1991&#39;]
</code></pre></div><h3 id="chatgpt-1">chatGPT：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span> 
<span class="n">intput_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年22。目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span> 
<span class="n">output_data</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\b\d</span><span class="si">{4}</span><span class="s1">\b&#39;</span><span class="p">,</span> <span class="n">intput_data</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">output_data</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="问题3-resplit分割句子">问题3-re.split分割句子</h2>
<h3 id="deng-2">deng:</h3>
<p>用re.split 分割 input_data ，生成output_data， 设计刚刚的正则表达式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">intput_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年22。目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Python是一门面向对象的编程语言&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;诞生于1991年&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;一般情况下Python是Java的20%&#39;</span><span class="p">]</span>

</code></pre></div><h3 id="chatgpt-2">chatGPT：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="n">input_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年22。目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[。,]&#39;</span><span class="p">,</span> <span class="n">input_data</span><span class="p">)</span>
<span class="n">output_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="s1">&#39;。&#39;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">output_data</span> <span class="k">if</span> <span class="n">i</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="n">output_data</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="问题4-resub替换数字为num">问题4-re.sub替换数字为NUM</h2>
<h3 id="deng-3">deng:</h3>
<p>使用正则表达式 re.sub 实现从input_data到output_data的转换。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">input_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年。</span><span class="se">\
</span><span class="se"></span><span class="s2">一般情况下Python代码量是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="s1">&#39;Python是一门面向对象的编程语言，诞生于NUM年。一般情况下Python代码量是Java的NUM%，所以说人生苦短，我用Python。&#39;</span>
</code></pre></div><h3 id="chatgpt-3">chatGPT</h3>
<p>您可以使用正则表达式 re.sub 来实现将所有数字替换为 &lsquo;NUM&rsquo; 的转换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="n">input_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年。</span><span class="se">\
</span><span class="se"></span><span class="s2">一般情况下Python代码量是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\d+&#39;</span><span class="p">,</span> <span class="s1">&#39;NUM&#39;</span><span class="p">,</span> <span class="n">input_data</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">output_data</span><span class="p">)</span>
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用 chatGPT 做词频统计&amp;词云图</title>
      <link>https://textdata.cn/blog/2023-02-11-chatgpt-plus-for-text-mining/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-11-chatgpt-plus-for-text-mining/</guid>
      <description>使用 chatGPT 做词频统计&amp;amp;词云图，过程使用pandas、pyecharts、jieba等库。</description>
      <content:encoded><![CDATA[<h2 id="任务描述">任务描述</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">请用Python撰写一个中文文本分析的代码，进行词频统计、绘制词云图。

分析的数据是csv文件，过程使用pandas、pyecharts、jieba等库。

代码生成后，按照数据导入、数据清洗、数据分析、结果展示四个章节部分对代码进行中文讲解，格式为markdown。
</code></pre></div><br>
<h2 id="需要注意">需要注意</h2>
<ul>
<li>chatGPT需要科学上网才能使用， 推荐 <a href="https://textdata.cn/blog/2023-02-01-v2net-science-network/"><strong>科学上网工具v2net</strong></a>。</li>
<li>如果想升级为chatGPT Plus，需要使用国外的虚拟信用卡，推荐阅读[<strong>使用虚拟信用卡，国内用户升级为chatGPT plus会员</strong>]https://textdata.cn/blog/2023-02-11-credit_card_for_chatgpt-plus)</li>
</ul>
<br>
<h2 id="说明">说明</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">- 以下内容，80%左右内容为chatGPT生成，大邓工作主要是准备实验数据，调试代码，编辑章节。
- 实验环境chatGPT PLUS，今天刚刚花了20美元，使用全局网络模式下，chatGPT响应更稳定快速。
- chatGPT PLUS虽然很强，结果依然有问题，最初生成的词云图是基于wordcloud库，
  该库不支持中文，绘制的图片是乱码的。这里指导ta改为pyecharts制作词云图。
</code></pre></div><p>如需了解升级 <strong>chatGPT plus</strong> 教程(国内信用卡不支持，绑定需要国外的信用卡)， 可以私信大邓 <strong>37233583</strong>9， 备注【<strong>姓名-学校-专业</strong>】</p>
<br>
<h2 id="下载本文codezip"><a href="code.zip">下载本文</a></h2>
<p><a href="code.zip">点击下载本文代码&amp;数据</a></p>
<br>
<h2 id="一数据导入">一、数据导入</h2>
<p>首先需要导入需要的库：pandas、jieba、pyecharts等。如果电脑没有相应的库，可以命令行中执行以下安装命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install pyecharts
pip3 install jieba
</code></pre></div><p>读取csv文件，使用pandas库的read_csv函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Bar</span><span class="p">,</span> <span class="n">WordCloud</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<h2 id="二数据清洗">二、数据清洗</h2>
<p>清洗数据是文本分析的第一步，这里需要对数据进行去重、去除空值、去除停用词等操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 去重</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>

<span class="c1"># 去除空值</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>

<span class="c1"># 加载停用词表</span>
<span class="n">stopwords</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;stopwords.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">stopwords</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>

<span class="c1"># 分词，并去除停用词</span>
<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
<span class="k">for</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;desc&#39;</span><span class="p">]:</span>
    <span class="n">seg_list</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">seg_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">:</span>
            <span class="n">text</span> <span class="o">+=</span> <span class="n">word</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>

<span class="c1">#查看text部分内容</span>
<span class="n">text</span><span class="p">[:</span><span class="mi">200</span><span class="p">]</span>
</code></pre></div><pre><code>Building prefix dict from the default dictionary ...
Dumping model to file cache /var/folders/y0/4gqxky0s2t94x1c1qhlwr6100000gn/T/jieba.cache
Loading model cost 0.460 seconds.
Prefix dict has been built successfully.
</code></pre>
<p>Run</p>
<pre><code>'唐天宝 十四年 长安城 小吏 李善德 突然 接到 一个 任务 贵妃 诞日 之前 岭南 运来 新鲜 荔枝 荔枝 “ 一日 色变 两日 香变 三日 味变 ” 岭南 长安 五千余里 山水 迢 ... ◆ 编辑 推荐   ★ 〇 一年 国际 布克奖 美国 国家图书奖 短 名单 作品   ★ 入选 〇 二一 年度 纽约时报 书评 周刊 十大 好书   ★ 入选 奥巴马 〇 一年 夏季 阅读 书单   ★ .'
</code></pre>
<br>
<h2 id="三数据分析">三、数据分析</h2>
<p>使用jieba库对文本进行分词处理，然后<strong>统计每个词语的出现频率</strong>。这里使用Python的字典数据结构进行计数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 分词</span>
<span class="n">seg_list</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

<span class="c1"># 统计词频</span>
<span class="n">word_count</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">seg_list</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>  <span class="c1"># 只统计长度大于等于2的词语</span>
        <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">word_count</span><span class="p">:</span>
            <span class="n">word_count</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">word_count</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">word_count</span>
</code></pre></div><p>Run</p>
<pre><code>{'唐天宝': 4,
 '十四年': 2,
 '长安城': 4,
 '小吏': 2,
 '李善德': 2,
 '突然': 5,
 '接到': 2,
 ......
 '文笔': 1,
 '行云流水': 1,
 '医学': 1,
 '研究生': 1,
 '大为': 1,
 '空怀': 1,
 '壮志': 1,
 '无职无权': 1,
 '时来运转': 1,
 '有名': 2,
 '有利': 1,
 '真切': 1,
 '旅程': 1,
 '困扰': 1,
 '傅真': 1,
 '暌违': 1,
 '七年': 1,
 ...}
</code></pre>
<br>
<h2 id="四结果展现">四、结果展现</h2>
<p>接下来，根据统计结果绘制词云图和柱状图。</p>
<h3 id="41-词云图">4.1 词云图</h3>
<p>绘制词云图，使用pyecharts的WordCloud库：
<img loading="lazy" src="img/wordcloud.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">WordCloud</span>


<span class="n">wordfreqs</span> <span class="o">=</span> <span class="p">[(</span><span class="n">w</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span><span class="p">,</span><span class="n">f</span> <span class="ow">in</span> <span class="n">word_count</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>


<span class="p">(</span>
    <span class="n">WordCloud</span><span class="p">()</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">data_pair</span><span class="o">=</span><span class="n">wordfreqs</span><span class="p">,</span> <span class="n">word_size_range</span><span class="o">=</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;词频分析&#34;</span><span class="p">,</span> <span class="n">title_textstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TextStyleOpts</span><span class="p">(</span><span class="n">font_size</span><span class="o">=</span><span class="mi">23</span><span class="p">)</span>
        <span class="p">),</span>
        <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;词云图.html&#34;</span><span class="p">)</span>  <span class="c1">#存储位置</span>
<span class="p">)</span>
</code></pre></div><h3 id="42-柱状图">4.2 柱状图</h3>
<p>绘制柱状图</p>
<p><img loading="lazy" src="img/bar.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="c1"># </span>
<span class="n">top_n</span> <span class="o">=</span> <span class="mi">20</span>
<span class="n">word_count_sorted</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">word_count</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">word_top_n</span> <span class="o">=</span> <span class="n">word_count_sorted</span><span class="p">[:</span><span class="n">top_n</span><span class="p">]</span>

<span class="n">bar</span> <span class="o">=</span> <span class="n">Bar</span><span class="p">()</span>
<span class="n">bar</span><span class="o">.</span><span class="n">add_xaxis</span><span class="p">([</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">word_top_n</span><span class="p">])</span>
<span class="n">bar</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s2">&#34;词频&#34;</span><span class="p">,</span> <span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">word_top_n</span><span class="p">])</span>
<span class="n">bar</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;词频统计&#34;</span><span class="p">),</span> <span class="n">xaxis_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">AxisOpts</span><span class="p">(</span><span class="n">axislabel_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">rotate</span><span class="o">=-</span><span class="mi">15</span><span class="p">)))</span>
<span class="n">bar</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;word_count.html&#34;</span><span class="p">)</span>

</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用虚拟信用卡，国内用户升级为chatGPT plus会员</title>
      <link>https://textdata.cn/blog/2023-02-11-credit_card_for_chatgpt-plus/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-11-credit_card_for_chatgpt-plus/</guid>
      <description>可能周围很多朋友已经注册了 chatGPT， 想体验更稳定快速的plus版， 结果升级 chatGPT plus 时发现openAI不支持国内的信用卡。大邓的信用卡是 **中国银行VISA卡**，也不支持。参考了一些网上的教程，可以使用 **虚拟信用卡** 来搞定升级chatGPT plus的任务，耗时10min左右。使用虚拟信用卡，国内用户升级为chatGPT plus会员</description>
      <content:encoded><![CDATA[<h2 id="如何chatgpt-plus升级">如何chatGPT plus升级</h2>
<p>可能周围很多朋友已经注册了 chatGPT， 想体验更稳定快速的plus版， 结果升级 chatGPT plus 时发现openAI不支持国内的信用卡。大邓的信用卡是 <strong>中国银行VISA卡</strong>，也不支持。参考了一些网上的教程，可以使用 <strong>虚拟信用卡</strong> 来搞定升级chatGPT plus的任务，耗时10min左右。确保在**「全局VPN+浏览器无痕模式」下进行注册及升级PLUS的操作**</p>
<blockquote>
<p>Note:</p>
<p>虚拟信用卡是一种创新的支付工具，为消费者提供更安全、更便捷的网上支付体验。与传统信用卡不同，虚拟信用卡能够提供更多的安全性和便利性，同时还具有更广泛的使用范围。</p>
</blockquote>
<p>大邓用的 <strong>诺贝nobepay</strong> 的虚拟信用卡服务商，我已经充值并开通了一张卡，效果不错。</p>
<br>
<h2 id="诺贝nobepay">诺贝nobepay</h2>
<p>诺贝nobepay的特点如下：</p>
<ul>
<li>支持自定义姓名和地址信息，也可以<strong>一键生成虚拟地址</strong>；</li>
<li>无限开卡，随用随开，不用的卡可以删除，剩余余额将自动返还到账户，可以在下次使用；</li>
<li>费用透明，仅收取开卡费和充值手续费，没有其他隐藏费用；</li>
<li>多功能使用，可以用于日常购物消费，支持绑定美国PayPal，支持阿里云国际绑定，支持Google Play等；</li>
<li>支持人民币充值，只能使用绑定的微信充值，充值速度很快；</li>
<li>支持派安盈、万里汇、空中云汇、银行电汇、ach美元充值；</li>
</ul>
<br>
<h2 id="注册地址">注册地址</h2>
<p><strong>注册地址：<a href="https://nobepay.com/app/login?type=azmzep&amp;code=514DF0">https://nobepay.com</a>，邀请码： 514DF0</strong></p>
<br>
<p><img loading="lazy" src="img/nobe.png" alt=""  />
</p>
<p>注册后，充值前需要进行实名验证，根据提示，使用手机内的浏览器，扫码人脸验证即可。</p>
<br>
<p><strong>注册地址：<a href="https://nobepay.com/app/login?type=azmzep&amp;code=514DF0">https://nobepay.com</a>，邀请码： 514DF0</strong></p>
<br>
<h2 id="充值操作">充值操作</h2>
<p>需要注意，诺贝nobepay 有在线充值、客服充值、USDT充值等几种方式，</p>
<p><img loading="lazy" src="img/money_in.png" alt=""  />
</p>
<p>大邓选的 <strong>在线充值</strong>，最低充值门槛 <strong>500</strong> 元，高于990元，需要找客服代充。</p>
<p><img loading="lazy" src="img/account_cash.png" alt=""  />
</p>
<br>
<h2 id="注意">注意</h2>
<p><strong>nobepay 对于薅羊毛和拒付等不当行为非常重视，一旦发现，立即封号</strong>，不会通知您并退还任何资金。因此，请您在使用诺贝nobepay时遵守相关规则，以确保您的账户安全。</p>
<br>
<h2 id="开卡">开卡</h2>
<p>充值完成后，您就可以开始使用诺贝nobepay的虚拟信用卡了。该平台支持多种虚拟信用卡类型，如果您不确定哪种卡适合您，可以咨询在线客服。</p>
<p>注意，开卡是需要收费的，费用根据所选卡片不同而异，一般在1-5美元之间。充值的最低限额为10美元，部分卡片的最低限额要求为30美元，并需要支付3%的服务费。因此，费用的组成为：开卡费（1-5美元）+充值（最低10美元）+服务费（充值费用的3%）。</p>
<p>开卡时，点击<strong>随机地址</strong> 可以选择生成随机地址，构造出虚拟的姓名和地址(<strong>不要直接写我截图的个人信息，因为我已经用了，你们再用会有冲突</strong>)。</p>
<p><img loading="lazy" src="img/creadit_card.png" alt=""  />
</p>
<br>
<p>点击<strong>开卡</strong>，大概1min左右就在<strong>卡片列表</strong>中看到激活的卡片。</p>
<h2 id="总结">总结</h2>
<p>请注意，</p>
<ul>
<li>
<p>注册诺贝nobepay需要邀请码，并且需要先进行实名认证才能使用该服务。</p>
</li>
<li>
<p>在线充值仅支持微信支付，微信号和实名认证需要保持一致，最低充值金额为500元。</p>
</li>
<li>
<p>诺贝nobepay适合没有实体信用卡但需要进行海淘的用户，或者担心实体信用卡信息泄露的用户。</p>
</li>
<li>
<p>在删除卡片之前，请先解绑该卡片与所有服务商的关联，以避免出现拒付情况。</p>
</li>
</ul>
<p>诺贝nobepay存在一些不足，例如，开通的虚拟卡仅有1年的有效期，并且存在开卡费和服务费。因此，请您在使用诺贝nobepay之前仔细考虑您的需求和消费情况。</p>
<p><strong>注册地址：<a href="https://nobepay.com/app/login?type=azmzep&amp;code=514DF0">https://nobepay.com</a>，邀请码： 514DF0</strong></p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>科学上网工具v2net</title>
      <link>https://textdata.cn/blog/2023-02-01-v2net-science-network/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-01-v2net-science-network/</guid>
      <description>科学上网是指使用技术手段绕过审查机制，访问被限制或禁止的网站，从而获得自由获取信息的途径。科学上网最常见的方法是VPN (Virtual Private Network 的缩写)，它可以通过建立一个私密的网络来实现访问被限制网站的目的。大邓用过很多翻墙工具，一般每个账号的月费30&#43;元， 而且限制终端数量。最近上手了v2net，每个月低至1.9美元，10G流量，不限终端使用数量。</description>
      <content:encoded><![CDATA[<h2 id="前提">前提</h2>
<p>声明一下， 翻出来是为了学习外面的知识，更好的建设我们伟大的祖国。</p>
<br>
<h2 id="科学上网">科学上网</h2>
<p>科学上网是指使用技术手段绕过审查机制，访问被限制或禁止的网站，从而获得自由获取信息的途径。科学上网最常见的方法是VPN (Virtual Private Network 的缩写)，它可以通过建立一个私密的网络来实现访问被限制网站的目的。大邓用过很多翻墙工具，一般每个账号的月费30+元， 而且限制终端数量。最近上手了v2net，每个月低至1.9美元，10G流量，不限终端使用数量。</p>
<br>
<h2 id="v2nethttpmainv2raycxaffphpaff2758"><a href="http://main.v2ray.cx/aff.php?aff=2758">v2net</a></h2>
<p><img loading="lazy" src="img/v2net.png" alt=""  />
</p>
<p><a href="http://main.v2ray.cx/aff.php?aff=2758">v2net</a> 的资费有很多档， 可以先花0.2美元试一试。<a href="http://main.v2ray.cx/aff.php?aff=2758">v2net访问链接 http://main.v2ray.cx/aff.php?aff=2758</a></p>
<p><img loading="lazy" src="img/fee.png" alt=""  />
</p>
<br>
<h2 id="注意">注意</h2>
<p>科学上网是一种在限制互联网自由获取信息的情况下，使用技术手段获得信息自由的方法。需要注意的是，科学上网并不是一种完全安全的方法，它也存在一定的风险和威胁，用户需要格外小心保护自己的隐私和安全, 应该了解相关法律，以免造成不必要的法律风险。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
