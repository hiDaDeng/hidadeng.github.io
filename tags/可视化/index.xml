<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>可视化 on 大邓和他的PYTHON</title>
    <link>/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
    <description>Recent content in 可视化 on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 10 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LovelyPlots库 | 格式化科学论文、论文和演示文稿的可视化图形</title>
      <link>https://hidadeng.github.io/blog/2022-12-10-lovelyplots/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-12-10-lovelyplots/</guid>
      <description>LovelyPlots库可以很好地格式化科学论文、论文和演示文稿的可视化图形，同时使它们在 Adobe Illustrator 中完全可编辑。</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/killiansheriff/LovelyPlots">LovelyPlots库</a> 可以很好地格式化科学论文、论文和演示文稿的可视化图形，同时使它们在 Adobe Illustrator 中完全可编辑。</p>
<p>此外，.svg 导出选项允许图形自动调整其字体以适应您文档的字体。 例如，导入到 .tex 文件中的 .svg 图形将自动生成为您的 .tex 文件中使用的文本字体。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install LovelyPlots
</code></pre></div><br>
<h2 id="样例">样例</h2>
<p><img loading="lazy" src="out/ipynb&#43;use_mathtext.svg" alt=""  />

<img loading="lazy" src="out/ipynb&#43;use_mathtext&#43;colors5-light.svg" alt=""  />

<img loading="lazy" src="out/ipynb&#43;use_mathtext&#43;colors10-ls.svg" alt=""  />

<img loading="lazy" src="out/ipynb&#43;use_mathtext&#43;colors10-markers.svg" alt=""  />

<img loading="lazy" src="out/classicmpl.svg" alt=""  />

<img loading="lazy" src="out/ipynb.svg" alt=""  />
</p>
<br>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="k">def</span> <span class="nf">MB_speed</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">T</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Maxwell-Boltzmann speed distribution for speeds&#34;&#34;&#34;</span>
    <span class="n">kB</span> <span class="o">=</span> <span class="mf">1.38e-23</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">(</span><span class="n">m</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">kB</span> <span class="o">*</span> <span class="n">T</span><span class="p">))</span> <span class="o">**</span> <span class="mf">1.5</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">v</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">m</span> <span class="o">*</span> <span class="n">v</span><span class="o">**</span><span class="mi">2</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">kB</span> <span class="o">*</span> <span class="n">T</span><span class="p">))</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">plot_dist</span><span class="p">(</span>
    <span class="n">temperatures</span><span class="p">,</span>
    <span class="n">v</span><span class="p">,</span>
    <span class="n">mass</span><span class="o">=</span><span class="mi">85</span> <span class="o">*</span> <span class="mf">1.66e-27</span><span class="p">,</span>
    <span class="n">pparam</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;xlabel&#34;</span><span class="p">:</span> <span class="s2">&#34;Speed&#34;</span><span class="p">,</span> <span class="s2">&#34;ylabel&#34;</span><span class="p">:</span> <span class="s2">&#34;Speed distribution&#34;</span><span class="p">},</span>
    <span class="n">save_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
<span class="p">):</span>

    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">T</span> <span class="ow">in</span> <span class="n">temperatures</span><span class="p">:</span>
        <span class="n">fv</span> <span class="o">=</span> <span class="n">MB_speed</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">mass</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">fv</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;T=</span><span class="si">{</span><span class="n">T</span><span class="si">}</span><span class="s2">K&#34;</span><span class="p">)</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">**</span><span class="n">pparam</span><span class="p">)</span>
        <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">save_name</span><span class="p">)</span>


<span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">temperatures</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">75</span><span class="p">)]</span>





<span class="n">styles</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span>
        <span class="s2">&#34;ipynb&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use_mathtext&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s2">&#34;ipynb&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use_mathtext&#34;</span><span class="p">,</span>
        <span class="s2">&#34;colors5-light&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s2">&#34;ipynb&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use_mathtext&#34;</span><span class="p">,</span>
        <span class="s2">&#34;colors10-ls&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s2">&#34;ipynb&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use_mathtext&#34;</span><span class="p">,</span>
        <span class="s2">&#34;colors10-markers&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span><span class="s2">&#34;classic&#34;</span><span class="p">],</span>
    <span class="p">[</span><span class="s2">&#34;ipynb&#34;</span><span class="p">],</span>
<span class="p">]</span>
<span class="n">names</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;out/ipynb+use_mathtext.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/ipynb+use_mathtext+colors5-light.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/ipynb+use_mathtext+colors10-ls.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/ipynb+use_mathtext+colors10-markers.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/classicmpl.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/ipynb.png&#34;</span><span class="p">,</span>
<span class="p">]</span>


<span class="k">for</span> <span class="n">style</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">styles</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">(</span><span class="n">style</span><span class="p">):</span>
        <span class="n">plot_dist</span><span class="p">(</span><span class="n">temperatures</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">save_name</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>BERTopic | 使用推特数据构建动态主题模型</title>
      <link>https://hidadeng.github.io/blog/2022-12-03-dynamic_topic_model_with_bertopic/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-12-03-dynamic_topic_model_with_bertopic/</guid>
      <description>在本文中将使用BERTopic库，对美国前总统Trump推特数据集，构建动态主题模型DTM(Dynamic Topic Modeling)，可视化文档数据集中不同主题随时间的演变(变迁)。</description>
      <content:encoded><![CDATA[<p>在本文中将使用 BERTopic 库，对美国前总统 Trump 推特数据集，构建动态主题模型 DTM(Dynamic Topic Modeling)，可视化文档数据集中不同主题随时间的演变(变迁)。<strong>文末有代码下载方式</strong></p>
<br>
<h2 id="安装">安装</h2>
<p>为保证代码可复现，保证你我电脑中 bertopic 版本一致，先查看大邓电脑的 bertopic 版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">bertopic</span>

<span class="c1">#本文bertopic版本</span>
<span class="n">bertopic</span><span class="o">.</span><span class="n">__version__</span>
</code></pre></div><p>Run</p>
<pre><code>'0.12.0'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#推荐指定版本安装；</span>
<span class="c1">#!pip3 install bertopic==0.12.0</span>

<span class="c1">#不指定版本安装</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">bertopic</span>
</code></pre></div><br>
<h2 id="导入数据">导入数据</h2>
<p>这里准备了twitter账号 @realDonalTrump 中 2021年的推特数据，  点击下载 <a href="code.zip"><strong>数据及代码</strong></a>。</p>
<ul>
<li>我们只分析原推特，不分析每条推特的回复。</li>
<li>因为要分析推特随时间的主题变化，需要准备 <strong>推特</strong> 及对应的 <strong>推文时间</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># 导入数据</span>
<span class="n">trump_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;trump_twitter_2021.csv&#39;</span><span class="p">)</span>
<span class="n">trump_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span><span class="p">:</span><span class="nd">only-of-type</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">top</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">thead</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">text-align</span><span class="p">:</span> <span class="kc">right</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">table</span> <span class="na">border</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;dataframe&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;text-align: right;&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>id<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>text<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>isRetweet<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>isDeleted<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>device<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>favorites<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>retweets<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>date<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>isFlagged<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>98454970654916608<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Republicans and Democrats have both created ou...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>TweetDeck<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>49<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>255<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2011-08-02 18:07:48<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1234653427789070336<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>I was thrilled to be back in the Great city of...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Twitter for iPhone<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>73748<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>17404<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-03-03 01:34:50<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1218010753434820614<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>RT @CBS_Herridge: READ: Letter to surveillance...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>t<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Twitter for iPhone<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>7396<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-01-17 03:22:47<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1304875170860015617<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>The Unsolicited Mail In Ballot Scam is a major...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Twitter for iPhone<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>80527<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>23502<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-09-12 20:10:58<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1218159531554897920<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>RT @MZHemingway: Very friendly telling of even...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>t<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Twitter for iPhone<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>9081<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-01-17 13:13:59<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div><br>
<h2 id="预处理">预处理</h2>
<ul>
<li>使用正则表达式 清除推文中的http链接</li>
<li>剔除@符</li>
<li>使用正则表达式 剔除 非英文字符</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="c1">#预处理函数clean_text</span>
<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&#34;http\S+&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34; &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">if</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;@&#39;</span><span class="p">])</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&#34;[^a-zA-Z]+&#34;</span><span class="p">,</span> <span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">text</span>


<span class="n">test_text</span> <span class="o">=</span> <span class="s1">&#39;hello @Apple, https://apple.com 李John&#39;</span>
<span class="c1">#验证函数有效性</span>
<span class="n">clean_text</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">test_text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>'hello john'
</code></pre>
<br>
<ul>
<li>对text字段使用预处理函数 clean_text</li>
<li>只保留原推文</li>
<li>准备推特tweets和时间戳 timestamps</li>
</ul>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#清洗字段text</span>
<span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">clean_text</span><span class="p">)</span>

<span class="c1">#只保留特朗普原推文(剔除特朗普的Retweet)</span>
<span class="c1">#推文内容不能为”“</span>
<span class="n">trump_df</span> <span class="o">=</span> <span class="n">trump_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;isRetweet&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;f&#34;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span><span class="p">),</span> <span class="p">:]</span>

<span class="c1">#准备tweets及对应的timestamps</span>
<span class="n">tweets</span> <span class="o">=</span> <span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span>
<span class="n">timestamps</span> <span class="o">=</span> <span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span>

<span class="n">tweets</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<pre><code>'republicans and democrats have both created our economic problems '
</code></pre>
<br>
<h2 id="初始化bertopic">初始化BERTopic</h2>
<p>在模型初始化阶段，使用所有推文数据， 会忽略时间维度。 该步骤会把所有时间段中出现的主题都提前训练识别出来。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">bertopic</span> <span class="kn">import</span> <span class="n">BERTopic</span>

<span class="c1">#大邓这里，运行了不到1小时</span>
<span class="c1">#特朗普比较活跃，什么内容都会参与，所以这里设置一个话题数下限为35，话题数上限不设置</span>
<span class="n">topic_model</span> <span class="o">=</span> <span class="n">BERTopic</span><span class="p">(</span><span class="n">min_topic_size</span><span class="o">=</span><span class="mi">35</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">topics</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">tweets</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Downloading:   0%|          | 0.00/1.18k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/190 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/10.6k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/612 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/116 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/39.3k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/349 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/90.9M [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/53.0 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/112 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/466k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/350 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/13.2k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/232k [00:00&lt;?, ?B/s]
    Batches:   0%|          | 0/1418 [00:00&lt;?, ?it/s]

    2022-12-04 22:04:02,964 - BERTopic - Transformed documents to Embeddings
    2022-12-04 22:05:13,606 - BERTopic - Reduced dimensionality
    2022-12-04 22:05:17,814 - BERTopic - Clustered reduced embeddings
</code></pre></div><br>
<p>抽取出所有的话题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">freq</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic_info</span><span class="p">()</span>

<span class="c1">#话题总数</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">freq</span><span class="p">))</span>
<span class="n">freq</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    169
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span><span class="p">:</span><span class="nd">only-of-type</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">top</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">thead</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">text-align</span><span class="p">:</span> <span class="kc">right</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">table</span> <span class="na">border</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;dataframe&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;text-align: right;&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Topic<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Count<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Name<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>-1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>15098<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>-1_the_to_is_of<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3182<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0_run_president_trump_donald<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1821<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1_crowd_carolina_join_thank<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1084<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2_golf_course_doral_scotland<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1030<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3_border_wall_immigration_mexico<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>5<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>811<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>4_china_trade_tariffs_chinese<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>6<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>5<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>642<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>5_obamacare_healthcare_repeal_website<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>7<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>6<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>638<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>6_hillary_clinton_crooked_she<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>8<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>7<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>607<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>7_amp_it_you_to<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>9<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>8<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>562<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>8_media_fake_news_failing<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div><br>
<p>-1 意识是所有的离群点(异类)推文，应该被忽略掉。接下来让我们看一下 Topic-4 的特征词及其权重</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#topic-4的特征词及权重</span>
<span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [(&#39;china&#39;, 0.05289416225000891),
     (&#39;tariffs&#39;, 0.024471004754487165),
     (&#39;trade&#39;, 0.02437576425026641),
     (&#39;chinese&#39;, 0.013643270667358017),
     (&#39;us&#39;, 0.011206804363719649),
     (&#39;farmers&#39;, 0.01113584970813823),
     (&#39;our&#39;, 0.010197907480148342),
     (&#39;deal&#39;, 0.010014612658730073),
     (&#39;we&#39;, 0.009043537683534882),
     (&#39;countries&#39;, 0.00901653033214627)]
</code></pre></div><br>
<p>在二维空间中使用  Intertopic Distance Map 可视化所有主题。该图可以让我们继续创建 DTM 前，判断主题数设置的是否充分够用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fig</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_topics</span><span class="p">()</span>
<span class="n">fig</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/topics.png" alt=""  />
</p>
<p>渲染的可视化文件太大，这里感兴趣的可以 <a href="topics.html">点击查看动态效果图</a></p>
<br>
<h2 id="构建dtm">构建DTM</h2>
<p>在 构建动态主题模型 前， 不同时间段中出现的主题需要预先都训练好。</p>
<ul>
<li>docs 文档数据，对应于本文的 tweets</li>
<li>timestamps 时间戳，对应于本文的 timestamps</li>
<li>global_tuning 是否将某个主题在 时间t 的主题表示向量 与 其全局主题表示向量 进行平均</li>
<li>evolution_tuning 是否将某个主题在 时间t 的主题表示向量 与 该主题在时间t-1 的主题表示向量 进行平均</li>
<li>nr_bins 时间段内含有的时间戳(点)数量。在数千个不同的时间戳中提取主题在计算上是低效的, 可以合并 20 个时间戳为一个时间段</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topics_over_time</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">topics_over_time</span><span class="p">(</span><span class="n">docs</span><span class="o">=</span><span class="n">tweets</span><span class="p">,</span> 
                                                <span class="n">timestamps</span><span class="o">=</span><span class="n">timestamps</span><span class="p">,</span> 
                                                <span class="n">global_tuning</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> 
                                                <span class="n">evolution_tuning</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> 
                                                <span class="n">nr_bins</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

<span class="n">topics_over_time</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span><span class="p">:</span><span class="nd">only-of-type</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">top</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">thead</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">text-align</span><span class="p">:</span> <span class="kc">right</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">table</span> <span class="na">border</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;dataframe&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;text-align: right;&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Topic<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Words<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Frequency<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Timestamp<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Name<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>-1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>donald, keychain, champion, trump, contest<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>20<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>-1_the_to_is_of<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>donald, execute, imagination, step, randal<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>9<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0_run_president_trump_donald<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>begun, schedule, ahead, international, scotland<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2_golf_course_doral_scotland<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>cling, wallflower, persona, walls, rather<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3_border_wall_immigration_mexico<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>10<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>independence, safe, here, enjoy, happy<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>10_veterans_honor_heroes_our<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1880<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>162<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>ratings, fredo, frank, bad, based<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>162_ratings_machine_show_sided<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1881<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>163<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>yes, no, way, absolutely,<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>163_yes_no_absolutely_way<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1882<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>164<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>twitter, trending, section, trends, conservative<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>13<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>164_twitter_trending_conservative_sectio...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1883<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>165<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>york, eaten, hell, new, blasio<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>165_york_ny_new_wonerful<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1884<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>167<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>mixing, courthouse, mocked, notes, prosecuted<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>167_jury_judge_guilty_foreperson<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>1885 rows × 5 columns<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div><br>
<h2 id="可视化dtm">可视化DTM</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#模型中一共有169个主题，这里显示前Top10的主题的演变</span>
<span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_topics_over_time</span><span class="p">(</span><span class="n">topics_over_time</span><span class="p">,</span> <span class="n">top_n_topics</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/dtm.png" alt=""  />

渲染的可视化文件太大，这里感兴趣的可以 <a href="dtm.html">点击查看动态效果图</a></p>
<br>
<h3 id="获取本文代码">获取本文代码</h3>
<p>点击获取 <a href="code.zip"><strong>数据及代码</strong></a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>可视化 | 绘制《三体》人物关系网络图</title>
      <link>https://hidadeng.github.io/blog/2022-11-29-santi-relationship-visualization-with-pyecharts/</link>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-29-santi-relationship-visualization-with-pyecharts/</guid>
      <description>可视化 | 绘制《三体》人物关系网络图</description>
      <content:encoded><![CDATA[<p>今天逛B站，看到《三体》三部曲全部人物关系数据可视化视频</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1z5411W7ED&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<p>于是动手写了今天的技术文。绘制人物网络关系图，需要有</p>
<ul>
<li>节点数据； 节点名、节点属性</li>
<li>边数据； source、target、weight</li>
<li>可视化工具(Gephi软件或Python的可视化包)</li>
</ul>
<br>
<h2 id="本文代码">本文代码</h2>
<p><a href="%E4%B8%89%E4%BD%93%E5%B0%8F%E8%AF%B4-%E4%BA%BA%E7%89%A9%E5%85%B3%E7%B3%BB%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96.zip">点击下载</a></p>
<p><br><br></p>
<h2 id="节点-人物数据">节点-人物数据</h2>
<p>绘制人物关系网络图，首先需要有网络节点数据</p>
<ul>
<li>name 人物名称</li>
<li>desc 人物简介</li>
<li>stage 人物出现在三体小说的哪个阶段</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">nodes_info_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data/三体人物.xlsx&#39;</span><span class="p">)</span>
<span class="n">nodes_info_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="边-人物关系数据">边-人物关系数据</h2>
<p>将节点数据依次在三体小说文本中按行进行检索，如果每行同时出现两个人物，两个人物会构建一个边。人物关系网络图可以用gephi软件进行绘制， 绘制需要两个csv文件，即</p>
<ul>
<li>三体_nodes.csv</li>
<li>三体_edges.csv</li>
</ul>
<p>实现代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">codecs</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">():</span>
    <span class="n">jieba</span><span class="o">.</span><span class="n">add_word</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="n">nodes</span> <span class="o">=</span> <span class="p">{}</span>			<span class="c1"># 姓名字典，保存人物，该字典的键为人物名称，值为该人物在全文中出现的次数</span>
<span class="n">relationships</span> <span class="o">=</span> <span class="p">{}</span>	<span class="c1"># 关系字典，保存人物关系的有向边，该字典的键为有向边的起点，值为一个字典edge，edge的键是有向边的终点，值是有向边的权值，代表两个人物之间联系的紧密程度</span>
<span class="n">lineNodes</span> <span class="o">=</span> <span class="p">[]</span>		<span class="c1"># 每段内人物关系，是一个缓存变量，保存对每一段分词得到当前段中出现的人物名称，lineName[i]是一个列表，列表中存储第i段中出现过的人物</span>


<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/三体.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
		<span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>		<span class="c1"># 分词并返回该词词性</span>
		<span class="n">lineNodes</span><span class="o">.</span><span class="n">append</span><span class="p">([])</span>		<span class="c1"># 为新读入的一段添加人物名称列表</span>
		<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
			<span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">():</span>
				<span class="n">lineNodes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>		<span class="c1"># 为当前段的环境增加一个人物</span>
				<span class="k">if</span> <span class="n">nodes</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
					<span class="n">nodes</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
				<span class="n">nodes</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>					<span class="c1"># 该人物出现次数加 1</span>
                

<span class="c1"># explore relationships   对于 lineNames 中每一行，我们为该行中出现的所有人物两两相连。如果两个人物之间尚未有边建立，则将新建的边权值设为 1，否则将已存在的边的权值加 1。这种方法将产生很多的冗余边，这些冗余边将在最后处理。</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lineNodes</span><span class="p">:</span>					<span class="c1"># 对于每一段</span>
	<span class="k">for</span> <span class="n">node1</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>					
		<span class="k">for</span> <span class="n">node2</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>				<span class="c1"># 每段中的任意两个人</span>
			<span class="k">if</span> <span class="n">node1</span> <span class="o">==</span> <span class="n">node2</span><span class="p">:</span>
				<span class="k">continue</span>
			<span class="k">if</span> <span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">node2</span><span class="p">)</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>		<span class="c1"># 若两人尚未同时出现则新建项</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span><span class="o">=</span> <span class="mi">1</span>
			<span class="k">else</span><span class="p">:</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span> <span class="o">=</span> <span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span><span class="o">+</span> <span class="mi">1</span>		<span class="c1"># 两人共同出现次数加 1</span>


<span class="c1"># output   将已经建好的 names 和 relationships 输出到文本，以方便 gephi 可视化处理。输出边的过程中可以过滤可能是冗余的边，这里假设共同出现次数少于 3 次的是冗余边，则在输出时跳过这样的边。输出的节点集合保存为 busan_node.txt ，边集合保存为 busan_edge.node 。</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;output/三体_nodes.csv&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf1</span><span class="p">:</span>
	<span class="n">writer1</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf1</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">])</span>
	<span class="n">writer1</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">times</span> <span class="ow">in</span> <span class="n">nodes</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
		<span class="n">line</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">:</span> <span class="n">times</span><span class="p">}</span>
		<span class="n">writer1</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>



<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;output/三体_edges.csv&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf2</span><span class="p">:</span>
	<span class="n">writer2</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf2</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">])</span>
	<span class="n">writer2</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">edges</span> <span class="ow">in</span> <span class="n">relationships</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
		<span class="k">for</span> <span class="n">target</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="n">edges</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
			<span class="k">if</span> <span class="n">weight</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">:</span>
				<span class="n">line</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;source&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">:</span><span class="n">target</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">:</span><span class="n">w</span><span class="p">}</span>
				<span class="n">writer2</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</code></pre></div><br>
<p>查看 三体_nodes.csv 文件样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">nodes_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;output/三体_nodes.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">nodes_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<p>查看 三体_edges.csv 文件样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">edges_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;output/三体_edges.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">edges_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="绘制关系图">绘制关系图</h2>
<p>本文不讲解gephi，感兴趣的可以去B站搜gephi使用方法。 实现可视化，除了gephi， 也可以使用pyechart库实现不错的可视化效果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>


<span class="n">nodes_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">edges_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">categories_data</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">nodes_df</span><span class="o">.</span><span class="n">label</span><span class="p">,</span> <span class="n">nodes_df</span><span class="o">.</span><span class="n">weight</span><span class="p">):</span>
    <span class="n">category</span> <span class="o">=</span> <span class="n">nodes_info_df</span><span class="p">[</span><span class="n">nodes_info_df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;stage&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="c1">##使用weight作为圆点的值，除以10，防止圆点太大占满整个屏幕.</span>
    <span class="n">node_info</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">node</span><span class="p">),</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="n">weight</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span><span class="p">:</span> <span class="n">category</span><span class="p">,</span> <span class="s2">&#34;value&#34;</span><span class="p">:</span> <span class="n">weight</span><span class="o">/</span><span class="mi">10</span><span class="p">}</span>
    <span class="n">nodes_data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_info</span><span class="p">)</span>

<span class="k">for</span> <span class="n">ix</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">edges_df</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">edges_df</span><span class="o">.</span><span class="n">source</span><span class="p">,</span> <span class="n">edges_df</span><span class="o">.</span><span class="n">target</span><span class="p">):</span>
    <span class="n">edges_data</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">ix</span><span class="p">,</span> <span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">source</span><span class="p">,</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">target</span><span class="p">})</span>

<span class="k">for</span> <span class="n">category</span> <span class="ow">in</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;stage&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()):</span> 
    <span class="n">categories_data</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="n">category</span><span class="p">})</span>


<span class="n">c</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">Graph</span><span class="p">(</span><span class="n">init_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">InitOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="s2">&#34;1000px&#34;</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="s2">&#34;600px&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="o">=</span><span class="n">nodes_data</span><span class="p">,</span>
        <span class="n">links</span><span class="o">=</span><span class="n">edges_data</span><span class="p">,</span>
        <span class="n">categories</span><span class="o">=</span><span class="n">categories_data</span><span class="p">,</span>
        <span class="n">layout</span><span class="o">=</span><span class="s2">&#34;circular&#34;</span><span class="p">,</span>
        <span class="n">is_rotate_label</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">&#34;source&#34;</span><span class="p">,</span> <span class="n">curve</span><span class="o">=</span><span class="mf">0.3</span><span class="p">),</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;三体人物关系图&#34;</span><span class="p">),</span>
        <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">orient</span><span class="o">=</span><span class="s2">&#34;vertical&#34;</span><span class="p">,</span> <span class="n">pos_left</span><span class="o">=</span><span class="s2">&#34;2%&#34;</span><span class="p">,</span> <span class="n">pos_top</span><span class="o">=</span><span class="s2">&#34;20%&#34;</span><span class="p">),</span>
    <span class="p">)</span>
<span class="p">)</span>

<span class="n">c</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s1">&#39;output/三体_graph.html&#39;</span><span class="p">)</span>
<span class="n">c</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div><p>Run</p>


<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Awesome-pyecharts</title>
            <script type="text/javascript" src="https://assets.pyecharts.org/assets/echarts.min.js"></script>

</head>
<body>
    <div id="e97ab300531a4c0ca1574681e578906a" class="chart-container" style="width:1000px; height:600px;"></div>
    <script>
        var chart_e97ab300531a4c0ca1574681e578906a = echarts.init(
            document.getElementById('e97ab300531a4c0ca1574681e578906a'), 'white', {renderer: 'canvas'});
        var option_e97ab300531a4c0ca1574681e578906a = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "graph",
            "layout": "circular",
            "symbolSize": 10,
            "circular": {
                "rotateLabel": true
            },
            "force": {
                "repulsion": 50,
                "edgeLength": 50,
                "gravity": 0.2
            },
            "label": {
                "show": true,
                "position": "right",
                "margin": 8
            },
            "lineStyle": {
                "show": true,
                "width": 1,
                "opacity": 1,
                "curveness": 0.3,
                "type": "solid",
                "color": "source"
            },
            "roam": true,
            "draggable": false,
            "focusNodeAdjacency": true,
            "data": [
                {
                    "name": "\u6c6a\u6dfc",
                    "symbolSize": 64.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 64.1
                },
                {
                    "name": "\u53f2\u5f3a",
                    "symbolSize": 24.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 24.7
                },
                {
                    "name": "\u5e38\u4f1f\u601d",
                    "symbolSize": 9.4,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 9.4
                },
                {
                    "name": "\u6768\u51ac",
                    "symbolSize": 6.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 6.5
                },
                {
                    "name": "\u4e01\u4eea",
                    "symbolSize": 17.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 17.2
                },
                {
                    "name": "\u7533\u7389\u83f2",
                    "symbolSize": 4.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 4.9
                },
                {
                    "name": "\u8c46\u8c46",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u9b4f\u6210",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.0
                },
                {
                    "name": "\u6f58\u5bd2",
                    "symbolSize": 4.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 4.7
                },
                {
                    "name": "\u674e\u7476",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.2
                },
                {
                    "name": "\u53f6\u6587\u6d01",
                    "symbolSize": 47.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 47.2
                },
                {
                    "name": "\u6960\u6960",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u6d0b\u6d0b",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u54aa\u54aa",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u6c99\u745e\u5c71",
                    "symbolSize": 2.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.5
                },
                {
                    "name": "\u53f6\u54f2\u6cf0",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.0
                },
                {
                    "name": "\u767d\u6c90\u9716",
                    "symbolSize": 2.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.9
                },
                {
                    "name": "\u9a6c\u94a2",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u7a0b\u4e3d\u534e",
                    "symbolSize": 0.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.9
                },
                {
                    "name": "\u53f6\u6587\u96ea",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.4
                },
                {
                    "name": "\u96f7\u5fd7\u6210",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.5
                },
                {
                    "name": "\u6768\u536b\u5b81",
                    "symbolSize": 7.8,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 7.8
                },
                {
                    "name": "\u5a01\u5c14\u900a",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.4
                },
                {
                    "name": "\u58a8\u5b50",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.1
                },
                {
                    "name": "\u5f90\u51b0\u51b0",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.7
                },
                {
                    "name": "\u4f0a\u6587\u65af",
                    "symbolSize": 8.8,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 8.8
                },
                {
                    "name": "\u62c9\u83f2\u5c14",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u6838\u5f39\u5973\u5b69",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u9f50\u730e\u5934",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u5927\u51e4",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 1.1
                },
                {
                    "name": "\u9ea6\u514b",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.8
                },
                {
                    "name": "\u65af\u5766\u987f",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.3
                },
                {
                    "name": "1379\u53f7\u76d1\u542c\u5458",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u5143\u9996",
                    "symbolSize": 7.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 7.9
                },
                {
                    "name": "\u667a\u5b50",
                    "symbolSize": 46.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 46.4
                },
                {
                    "name": "\u6797\u4e91",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u7f57\u8f91",
                    "symbolSize": 129.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 129.4
                },
                {
                    "name": "\u5434\u5cb3",
                    "symbolSize": 6.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 6.1
                },
                {
                    "name": "\u7ae0\u5317\u6d77",
                    "symbolSize": 31.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 31.6
                },
                {
                    "name": "\u96f7\u5fb7\u5c14",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.0
                },
                {
                    "name": "\u743c\u65af",
                    "symbolSize": 0.9,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.9
                },
                {
                    "name": "\u6590\u5179\u7f57\u5c06\u519b",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.7
                },
                {
                    "name": "\u5f20\u63f4\u671d",
                    "symbolSize": 4.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 4.3
                },
                {
                    "name": "\u6768\u664b\u6587",
                    "symbolSize": 3.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.4
                },
                {
                    "name": "\u82d7\u798f\u5168",
                    "symbolSize": 2.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.0
                },
                {
                    "name": "\u53f2\u6653\u660e",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.5
                },
                {
                    "name": "\u4f3d\u5c14\u8bfa\u592b",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u767d\u84c9",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.4
                },
                {
                    "name": "\u574e\u7279",
                    "symbolSize": 7.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 7.6
                },
                {
                    "name": "\u8428\u4f0a",
                    "symbolSize": 5.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 5.3
                },
                {
                    "name": "\u5c71\u6749\u60e0\u5b50",
                    "symbolSize": 6.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 6.4
                },
                {
                    "name": "\u6797\u683c",
                    "symbolSize": 4.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 4.8
                },
                {
                    "name": "\u4f3d\u5c14\u5b81",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.5
                },
                {
                    "name": "\u827e\u4f26",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.1
                },
                {
                    "name": "\u4e95\u4e0a\u5b8f\u4e00",
                    "symbolSize": 0.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.6
                },
                {
                    "name": "\u5e84\u989c",
                    "symbolSize": 12.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 12.5
                },
                {
                    "name": "\u54c8\u91cc\u65af",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u5f20\u7fd4",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.1
                },
                {
                    "name": "\u5f20\u5ef6",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.5
                },
                {
                    "name": "\u6653\u8679",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u51ef\u745f\u7433",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u718a\u6587",
                    "symbolSize": 1.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.5
                },
                {
                    "name": "\u90ed\u6b63\u660e",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u4e1c\u65b9\u5ef6\u7eea",
                    "symbolSize": 8.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 8.4
                },
                {
                    "name": "\u80af\u535a\u58eb",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.4
                },
                {
                    "name": "\u7f57\u5bbe\u900a\u5c06\u519b",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u5217\u6587",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.8
                },
                {
                    "name": "\u4e95\u4e0a\u660e",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.1
                },
                {
                    "name": "\u897f\u5b50",
                    "symbolSize": 2.9,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.9
                },
                {
                    "name": "\u8d75\u946b",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.1
                },
                {
                    "name": "\u674e\u7ef4",
                    "symbolSize": 2.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.0
                },
                {
                    "name": "\u84dd\u897f",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.0
                },
                {
                    "name": "\u65af\u79d1\u7279",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.3
                },
                {
                    "name": "\u6cd5\u624e\u5170",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u72c4\u5965\u4f26\u5a1c",
                    "symbolSize": 5.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 5.2
                },
                {
                    "name": "\u4e91\u5929\u660e",
                    "symbolSize": 31.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 31.6
                },
                {
                    "name": "\u5f20\u533b\u751f",
                    "symbolSize": 1.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.6
                },
                {
                    "name": "\u8001\u674e",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u80e1\u6587",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.3
                },
                {
                    "name": "\u7a0b\u5fc3",
                    "symbolSize": 151.7,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 151.7
                },
                {
                    "name": "\u4f55\u535a\u58eb",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.1
                },
                {
                    "name": "\u4e8e\u7ef4\u6c11",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.4
                },
                {
                    "name": "\u67ef\u66fc\u7433",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.0
                },
                {
                    "name": "\u4e54\u4f9d\u5a1c",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.3
                },
                {
                    "name": "\u516c\u5143\u4eba",
                    "symbolSize": 1.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.6
                },
                {
                    "name": "\u6bd5\u4e91\u5cf0",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u66f9\u5f6c",
                    "symbolSize": 8.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 8.8
                },
                {
                    "name": "\u4f0a\u4e07",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.5
                },
                {
                    "name": "\u5b89\u4e1c\u8bfa\u592b",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.4
                },
                {
                    "name": "\u97e6\u65af\u7279",
                    "symbolSize": 2.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.8
                },
                {
                    "name": "\u6234\u6587",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.1
                },
                {
                    "name": "\u6734\u4e49\u541b",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.7
                },
                {
                    "name": "\u827e\u514b",
                    "symbolSize": 2.5,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.5
                },
                {
                    "name": "\u8587\u62c9",
                    "symbolSize": 1.9,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.9
                },
                {
                    "name": "\u5218\u6653\u660e",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u5173\u4e00\u5e06",
                    "symbolSize": 26.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 26.2
                },
                {
                    "name": "\u5f17\u96f7\u65af",
                    "symbolSize": 3.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.8
                },
                {
                    "name": "\u79cb\u539f\u73b2\u5b50",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u891a\u5ca9",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.5
                },
                {
                    "name": "\u5353\u6587",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.0
                },
                {
                    "name": "\u6df1\u6c34\u738b\u5b50",
                    "symbolSize": 3.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.4
                },
                {
                    "name": "\u9732\u73e0\u516c\u4e3b",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u7a7a\u7075\u753b\u5e08",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u9488\u773c\u753b\u5e08",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u957f\u5e06",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.3
                },
                {
                    "name": "\u5df4\u52d2\u83ab",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.8
                },
                {
                    "name": "\u6770\u68ee",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u5a01\u7eb3\u5c14",
                    "symbolSize": 1.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.3
                },
                {
                    "name": "\u9ad8way",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.1
                },
                {
                    "name": "\u5e03\u83b1\u5c14",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u6b4c\u8005",
                    "symbolSize": 4.9,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 4.9
                }
            ],
            "categories": [
                {
                    "name": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b"
                },
                {
                    "name": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797"
                },
                {
                    "name": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f"
                }
            ],
            "edgeLabel": {
                "show": false,
                "position": "top",
                "margin": 8
            },
            "edgeSymbol": [
                null,
                null
            ],
            "edgeSymbolSize": 10,
            "links": [
                {
                    "id": 0,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 1,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 2,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 3,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 4,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 5,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u9b4f\u6210"
                },
                {
                    "id": 6,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 7,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 8,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6c99\u745e\u5c71"
                },
                {
                    "id": 9,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u58a8\u5b50"
                },
                {
                    "id": 10,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 11,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u5f90\u51b0\u51b0"
                },
                {
                    "id": 12,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u65af\u5766\u987f"
                },
                {
                    "id": 13,
                    "source": "\u53f2\u5f3a",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 14,
                    "source": "\u53f2\u5f3a",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 15,
                    "source": "\u53f2\u5f3a",
                    "target": "\u65af\u5766\u987f"
                },
                {
                    "id": 16,
                    "source": "\u53f2\u5f3a",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 17,
                    "source": "\u53f2\u5f3a",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 18,
                    "source": "\u53f2\u5f3a",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 19,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 20,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 21,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 22,
                    "source": "\u6768\u51ac",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 23,
                    "source": "\u6768\u51ac",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 24,
                    "source": "\u6768\u51ac",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 25,
                    "source": "\u6768\u51ac",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 26,
                    "source": "\u6768\u51ac",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 27,
                    "source": "\u4e01\u4eea",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 28,
                    "source": "\u4e01\u4eea",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 29,
                    "source": "\u4e01\u4eea",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 30,
                    "source": "\u4e01\u4eea",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 31,
                    "source": "\u4e01\u4eea",
                    "target": "\u897f\u5b50"
                },
                {
                    "id": 32,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 33,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u9b4f\u6210"
                },
                {
                    "id": 34,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 35,
                    "source": "\u9b4f\u6210",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 36,
                    "source": "\u9b4f\u6210",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 37,
                    "source": "\u6f58\u5bd2",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 38,
                    "source": "\u6f58\u5bd2",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 39,
                    "source": "\u6f58\u5bd2",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 40,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 41,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 42,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6c99\u745e\u5c71"
                },
                {
                    "id": 43,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u53f6\u54f2\u6cf0"
                },
                {
                    "id": 44,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u767d\u6c90\u9716"
                },
                {
                    "id": 45,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u7a0b\u4e3d\u534e"
                },
                {
                    "id": 46,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u53f6\u6587\u96ea"
                },
                {
                    "id": 47,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 48,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u96f7\u5fd7\u6210"
                },
                {
                    "id": 49,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 50,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 51,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 52,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u5927\u51e4"
                },
                {
                    "id": 53,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 54,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 55,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 56,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u5e84\u989c"
                },
                {
                    "id": 57,
                    "source": "\u6c99\u745e\u5c71",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 58,
                    "source": "\u6c99\u745e\u5c71",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 59,
                    "source": "\u53f6\u54f2\u6cf0",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 60,
                    "source": "\u53f6\u54f2\u6cf0",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 61,
                    "source": "\u767d\u6c90\u9716",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 62,
                    "source": "\u7a0b\u4e3d\u534e",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 63,
                    "source": "\u53f6\u6587\u96ea",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 64,
                    "source": "\u96f7\u5fd7\u6210",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 65,
                    "source": "\u96f7\u5fd7\u6210",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 66,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u96f7\u5fd7\u6210"
                },
                {
                    "id": 67,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 68,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u53f6\u54f2\u6cf0"
                },
                {
                    "id": 69,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 70,
                    "source": "\u58a8\u5b50",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 71,
                    "source": "\u5f90\u51b0\u51b0",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 72,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 73,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u9ea6\u514b"
                },
                {
                    "id": 74,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 75,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 76,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 77,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u5927\u51e4"
                },
                {
                    "id": 78,
                    "source": "\u5927\u51e4",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 79,
                    "source": "\u5927\u51e4",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 80,
                    "source": "\u9ea6\u514b",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 81,
                    "source": "\u65af\u5766\u987f",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 82,
                    "source": "\u65af\u5766\u987f",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 83,
                    "source": "\u5143\u9996",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 84,
                    "source": "\u667a\u5b50",
                    "target": "\u5143\u9996"
                },
                {
                    "id": 85,
                    "source": "\u667a\u5b50",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 86,
                    "source": "\u667a\u5b50",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 87,
                    "source": "\u667a\u5b50",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 88,
                    "source": "\u667a\u5b50",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 89,
                    "source": "\u667a\u5b50",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 90,
                    "source": "\u667a\u5b50",
                    "target": "\u6234\u6587"
                },
                {
                    "id": 91,
                    "source": "\u667a\u5b50",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 92,
                    "source": "\u667a\u5b50",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 93,
                    "source": "\u667a\u5b50",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 94,
                    "source": "\u7f57\u8f91",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 95,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 96,
                    "source": "\u7f57\u8f91",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 97,
                    "source": "\u7f57\u8f91",
                    "target": "\u767d\u84c9"
                },
                {
                    "id": 98,
                    "source": "\u7f57\u8f91",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 99,
                    "source": "\u7f57\u8f91",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 100,
                    "source": "\u7f57\u8f91",
                    "target": "\u4f3d\u5c14\u5b81"
                },
                {
                    "id": 101,
                    "source": "\u7f57\u8f91",
                    "target": "\u5e84\u989c"
                },
                {
                    "id": 102,
                    "source": "\u7f57\u8f91",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 103,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 104,
                    "source": "\u7f57\u8f91",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 105,
                    "source": "\u7f57\u8f91",
                    "target": "\u5f20\u7fd4"
                },
                {
                    "id": 106,
                    "source": "\u7f57\u8f91",
                    "target": "\u5c71\u6749\u60e0\u5b50"
                },
                {
                    "id": 107,
                    "source": "\u7f57\u8f91",
                    "target": "\u718a\u6587"
                },
                {
                    "id": 108,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 109,
                    "source": "\u7f57\u8f91",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 110,
                    "source": "\u7f57\u8f91",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 111,
                    "source": "\u5434\u5cb3",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 112,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u5434\u5cb3"
                },
                {
                    "id": 113,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 114,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 115,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 116,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u4e1c\u65b9\u5ef6\u7eea"
                },
                {
                    "id": 117,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 118,
                    "source": "\u6590\u5179\u7f57\u5c06\u519b",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 119,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u6768\u664b\u6587"
                },
                {
                    "id": 120,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u82d7\u798f\u5168"
                },
                {
                    "id": 121,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 122,
                    "source": "\u6768\u664b\u6587",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 123,
                    "source": "\u6768\u664b\u6587",
                    "target": "\u82d7\u798f\u5168"
                },
                {
                    "id": 124,
                    "source": "\u82d7\u798f\u5168",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 125,
                    "source": "\u82d7\u798f\u5168",
                    "target": "\u6768\u664b\u6587"
                },
                {
                    "id": 126,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 127,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 128,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 129,
                    "source": "\u767d\u84c9",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 130,
                    "source": "\u574e\u7279",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 131,
                    "source": "\u574e\u7279",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 132,
                    "source": "\u574e\u7279",
                    "target": "\u5f20\u7fd4"
                },
                {
                    "id": 133,
                    "source": "\u8428\u4f0a",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 134,
                    "source": "\u8428\u4f0a",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 135,
                    "source": "\u8428\u4f0a",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 136,
                    "source": "\u5c71\u6749\u60e0\u5b50",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 137,
                    "source": "\u6797\u683c",
                    "target": "\u6590\u5179\u7f57\u5c06\u519b"
                },
                {
                    "id": 138,
                    "source": "\u6797\u683c",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 139,
                    "source": "\u6797\u683c",
                    "target": "\u80af\u535a\u58eb"
                },
                {
                    "id": 140,
                    "source": "\u4f3d\u5c14\u5b81",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 141,
                    "source": "\u5e84\u989c",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 142,
                    "source": "\u5e84\u989c",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 143,
                    "source": "\u5f20\u7fd4",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 144,
                    "source": "\u5f20\u7fd4",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 145,
                    "source": "\u718a\u6587",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 146,
                    "source": "\u4e1c\u65b9\u5ef6\u7eea",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 147,
                    "source": "\u4e1c\u65b9\u5ef6\u7eea",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 148,
                    "source": "\u80af\u535a\u58eb",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 149,
                    "source": "\u5217\u6587",
                    "target": "\u4e95\u4e0a\u660e"
                },
                {
                    "id": 150,
                    "source": "\u4e95\u4e0a\u660e",
                    "target": "\u5217\u6587"
                },
                {
                    "id": 151,
                    "source": "\u897f\u5b50",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 152,
                    "source": "\u8d75\u946b",
                    "target": "\u674e\u7ef4"
                },
                {
                    "id": 153,
                    "source": "\u674e\u7ef4",
                    "target": "\u8d75\u946b"
                },
                {
                    "id": 154,
                    "source": "\u84dd\u897f",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 155,
                    "source": "\u84dd\u897f",
                    "target": "\u4e1c\u65b9\u5ef6\u7eea"
                },
                {
                    "id": 156,
                    "source": "\u84dd\u897f",
                    "target": "\u65af\u79d1\u7279"
                },
                {
                    "id": 157,
                    "source": "\u65af\u79d1\u7279",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 158,
                    "source": "\u6cd5\u624e\u5170",
                    "target": "\u72c4\u5965\u4f26\u5a1c"
                },
                {
                    "id": 159,
                    "source": "\u72c4\u5965\u4f26\u5a1c",
                    "target": "\u6cd5\u624e\u5170"
                },
                {
                    "id": 160,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u5f20\u533b\u751f"
                },
                {
                    "id": 161,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u8001\u674e"
                },
                {
                    "id": 162,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u80e1\u6587"
                },
                {
                    "id": 163,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 164,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u4f55\u535a\u58eb"
                },
                {
                    "id": 165,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u4e8e\u7ef4\u6c11"
                },
                {
                    "id": 166,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 167,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u6df1\u6c34\u738b\u5b50"
                },
                {
                    "id": 168,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u7a7a\u7075\u753b\u5e08"
                },
                {
                    "id": 169,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 170,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 171,
                    "source": "\u5f20\u533b\u751f",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 172,
                    "source": "\u5f20\u533b\u751f",
                    "target": "\u8001\u674e"
                },
                {
                    "id": 173,
                    "source": "\u8001\u674e",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 174,
                    "source": "\u8001\u674e",
                    "target": "\u5f20\u533b\u751f"
                },
                {
                    "id": 175,
                    "source": "\u80e1\u6587",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 176,
                    "source": "\u80e1\u6587",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 177,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 178,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u80e1\u6587"
                },
                {
                    "id": 179,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4f55\u535a\u58eb"
                },
                {
                    "id": 180,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4e8e\u7ef4\u6c11"
                },
                {
                    "id": 181,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u67ef\u66fc\u7433"
                },
                {
                    "id": 182,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 183,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u516c\u5143\u4eba"
                },
                {
                    "id": 184,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 185,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u6bd5\u4e91\u5cf0"
                },
                {
                    "id": 186,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 187,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 188,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u66f9\u5f6c"
                },
                {
                    "id": 189,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u6770\u68ee"
                },
                {
                    "id": 190,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 191,
                    "source": "\u4f55\u535a\u58eb",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 192,
                    "source": "\u4f55\u535a\u58eb",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 193,
                    "source": "\u4e8e\u7ef4\u6c11",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 194,
                    "source": "\u4e8e\u7ef4\u6c11",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 195,
                    "source": "\u67ef\u66fc\u7433",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 196,
                    "source": "\u516c\u5143\u4eba",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 197,
                    "source": "\u6bd5\u4e91\u5cf0",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 198,
                    "source": "\u6bd5\u4e91\u5cf0",
                    "target": "\u66f9\u5f6c"
                },
                {
                    "id": 199,
                    "source": "\u66f9\u5f6c",
                    "target": "\u6bd5\u4e91\u5cf0"
                },
                {
                    "id": 200,
                    "source": "\u66f9\u5f6c",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 201,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u6234\u6587"
                },
                {
                    "id": 202,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 203,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u5353\u6587"
                },
                {
                    "id": 204,
                    "source": "\u6234\u6587",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 205,
                    "source": "\u6234\u6587",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 206,
                    "source": "\u827e\u514b",
                    "target": "\u8587\u62c9"
                },
                {
                    "id": 207,
                    "source": "\u8587\u62c9",
                    "target": "\u827e\u514b"
                },
                {
                    "id": 208,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 209,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u5353\u6587"
                },
                {
                    "id": 210,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 211,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 212,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 213,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 214,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 215,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 216,
                    "source": "\u5353\u6587",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 217,
                    "source": "\u5353\u6587",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 218,
                    "source": "\u6df1\u6c34\u738b\u5b50",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 219,
                    "source": "\u6df1\u6c34\u738b\u5b50",
                    "target": "\u9732\u73e0\u516c\u4e3b"
                },
                {
                    "id": 220,
                    "source": "\u9732\u73e0\u516c\u4e3b",
                    "target": "\u6df1\u6c34\u738b\u5b50"
                },
                {
                    "id": 221,
                    "source": "\u9732\u73e0\u516c\u4e3b",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 222,
                    "source": "\u7a7a\u7075\u753b\u5e08",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 223,
                    "source": "\u7a7a\u7075\u753b\u5e08",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 224,
                    "source": "\u957f\u5e06",
                    "target": "\u9732\u73e0\u516c\u4e3b"
                },
                {
                    "id": 225,
                    "source": "\u957f\u5e06",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 226,
                    "source": "\u957f\u5e06",
                    "target": "\u7a7a\u7075\u753b\u5e08"
                },
                {
                    "id": 227,
                    "source": "\u6770\u68ee",
                    "target": "\u7a0b\u5fc3"
                }
            ]
        }
    ],
    "legend": [
        {
            "data": [
                "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f"
            ],
            "selected": {
                "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b": true,
                "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797": true,
                "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f": true
            },
            "show": true,
            "left": "2%",
            "top": "20%",
            "orient": "vertical",
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "showContent": true,
        "alwaysShowContent": false,
        "showDelay": 0,
        "hideDelay": 100,
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0,
        "padding": 5
    },
    "title": [
        {
            "text": "\u4e09\u4f53\u4eba\u7269\u5173\u7cfb\u56fe",
            "padding": 5,
            "itemGap": 10
        }
    ]
};
        chart_e97ab300531a4c0ca1574681e578906a.setOption(option_e97ab300531a4c0ca1574681e578906a);
    </script>
</body>
</html>

<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  ggplot2简明绘图之直方图</title>
      <link>https://hidadeng.github.io/blog/2022-09-04-r-ggplot2-histogram/</link>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-r-ggplot2-histogram/</guid>
      <description>教你理解图层、数geom、labs等函数，轻松上手ggplot2</description>
      <content:encoded><![CDATA[


<blockquote>
<p>原文: <a href="https://www.miriamheiss.com/posts/histogram-ggplot/" class="uri">https://www.miriamheiss.com/posts/histogram-ggplot/</a></p>
</blockquote>
<p>ggplot() 函数对任何数据科学家都是必不可少的, ta是一种非常简单的绘图函数。刚开始接触可能看起来很难， 不过不要害怕，因为一旦学了基础知识，一切都会变得清晰！ 让我们开始！</p>
<p>之前分享过 <a href="https://hidadeng.github.io/blog/2022-09-04-r-ggplot2-simple-tutorial/">R语言 | ggplot2简明绘图之散点图</a>,是以散点图为例简单讲解ggplot2的绘图，今天我们将以直方图作为主讲图形。</p>
<p><img src="img/nobel-vis.png" /></p>
<p>直方图是另一种ggplot2常用的图形，与散点图类似，也是分多个图层进行逐层绘制。</p>
<p><br></p>
<div id="准备" class="section level2">
<h2>准备</h2>
<p>导入本文要用到的包</p>
<pre class="r"><code>library(tidyverse) </code></pre>
<pre><code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.0.9
## ✔ tidyr   1.2.0     ✔ stringr 1.4.1
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()</code></pre>
<pre class="r"><code>library(primer.data) #准备数据
library(showtext)</code></pre>
<pre><code>## Loading required package: sysfonts
## Loading required package: showtextdb</code></pre>
<pre class="r"><code>showtext_auto()  #显示中文

#install.packages(&quot;MetBrewer&quot;)
library(MetBrewer) #配色包</code></pre>
<p><br></p>
</div>
<div id="选择数据" class="section level2">
<h2>选择数据</h2>
<p>使用data()函数可以查看现有的数据集有哪些，</p>
<pre><code>data()</code></pre>
<p>这里选择nobel，使用View(nobel)可以在新打开一个窗口，方便了解数据</p>
<pre><code>View(nobel)</code></pre>
<p><img src="img/View.png" /></p>
<p><br></p>
</div>
<div id="画布gglot" class="section level2">
<h2>画布gglot</h2>
<p>画画需要画布，对于数据分析的绘图也是同理。导入相关R包后， 用ggplot函数构造一个画布。因为还没设定数据，所以这是一个空画布</p>
<pre class="r"><code>ggplot()</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-2-1.png" width="672" /></p>
<p>我们将使用 nobel数据集，传入数据的代码ggplot(data=nobel)</p>
<pre class="r"><code>ggplot(data=nobel)</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-3-1.png" width="672" /></p>
<p>画布看起来依然是空白的，不要紧张。理解这个之前类比PS这类绘图软件，将修图工作看做是很多个图层的叠加。现在我们使用时依然在最底层的ggplot图层，在ggplot函数内添加mapping=aes()参数，准备添加x轴、y轴、color。的图层。</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes())</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p>注意了，现在图层即将发生变化。我们选择设置x轴 <code>aes(x=year)</code></p>
<ul>
<li>x轴 year</li>
</ul>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-5-1.png" width="672" /></p>
<p>现在我们将开始添加高层次的图层，也会显示越来越多的信息。</p>
<p><br></p>
</div>
<div id="添加geom" class="section level2">
<h2>添加geom</h2>
<p>现在添加geom层，该层是通过 <code>+</code> 构建在ggplot层之上。这里使用 <code>geom_histogram()</code> 绘制直方图，</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year))+
  geom_histogram()</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-6-1.png" width="672" /></p>
<p>不错，接下来添加color</p>
<p><br></p>
</div>
<div id="fill和color" class="section level2">
<h2>fill和color</h2>
<p>按照学科对每个时期的诺奖进行专业分类，使用aes中的fill参数。</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year, fill=field))+
  geom_histogram()</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<p>但同一时期，不同专业之间没有边界区分，容易混乱。这里设置 <code>geom_histogram()</code> 的 <code>color="white"</code>。</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year, fill=field))+
  geom_histogram(color=&quot;white&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="更改配色" class="section level2">
<h2>更改配色</h2>
<p>更改geom层的颜色，所以该层紧贴geom层，且在geom层之上。设置方法可以使用 <code>scale_fill_manual()</code> 即可。<code>scale_fill_munual()</code> 中的values可以传入颜色字符串。</p>
<pre class="r"><code>ggplot(data=nobel,
       mapping=aes(x=year, fill=field))+
  scale_fill_manual(values=c(&quot;red&quot;,
                             &quot;orange&quot;,
                             &quot;yellow&quot;,
                             &quot;green&quot;,
                             &quot;blue&quot;,
                             &quot;purple&quot;))+
  geom_histogram(color=&quot;white&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-9-1.png" width="672" /></p>
<p>漂亮！ 这些颜色真的很明艳， <code>scale_fill_munual()</code> 还可以选择十六进制颜色字符串进行颜色自定义</p>
<pre class="r"><code>ggplot(data = nobel,
       mapping = aes(x = year,
                     fill = field)) +
  scale_fill_manual(values = c(&quot;#f73c39&quot;,
                               &quot;#f79b39&quot;,
                               &quot;#f7ee39&quot;,
                               &quot;#228c14&quot;,
                               &quot;#1e80c7&quot;,
                               &quot;#7c148c&quot;)) + 
  geom_histogram(color = &quot;white&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-10-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="配色包metbrewer" class="section level2">
<h2>配色包MetBrewer</h2>
<p>对于我们普通人而言， 不需要记住那么多颜色，只需要在配色方案中选择好看的配色即可。 <a href="https://github.com/BlakeRMills/MetBrewer">MetBrewer</a>是R语言的配色包，在文章开头已经提前导入了。下图是MetBrewer的配色方案，选择一种配色方案的名字,如Signac</p>
<p><img src="img/metbrewer_palettes.png" /></p>
<pre class="r"><code>ggplot(data = nobel,
       mapping = aes(x = year,
                     fill = field)) +
  #选择Signac配色方案，使用其中6种颜色
  scale_fill_manual(values = met.brewer(&#39;Signac&#39;, 6)) + 
  geom_histogram(color = &quot;white&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-11-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="标签labs" class="section level2">
<h2>标签labs</h2>
<p>现在我们需要用<code>labs()</code> 函数给图片添加标签图层。例如title、subtitle、caption、x、y、legend。</p>
<pre class="r"><code>ggplot(data = nobel,
       mapping = aes(x = year,
                     fill = field)) +
  scale_fill_manual(values = met.brewer(&quot;Signac&quot;, 6)) + 
  geom_histogram(color = &quot;white&quot;) +
  labs(title = &quot;Nobel prize laureate numbers have gone up in past 50 years&quot;,
       subtitle = &quot;Physics, Medicine, and Chemistry have largest numbers of laureates&quot;,
       x = &quot;Year&quot;,
       y = &quot;Number of laureates&quot;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-12-1.png" width="672" /></p>
<p>现在x轴、y轴、标题都是大写，需要将field也大写。这里在labs(fill=‘Year’)更改year为Year</p>
<pre class="r"><code>ggplot(data = nobel,
       mapping = aes(x = year,
                     fill = field)) +
  scale_fill_manual(values = met.brewer(&quot;Signac&quot;, 6)) + 
  geom_histogram(color = &quot;white&quot;) +
  labs(title = &quot;Nobel prize laureate numbers have gone up in past 50 years&quot;,
       subtitle = &quot;Physics, Medicine, and Chemistry have largest numbers of laureates&quot;,
       x = &quot;Year&quot;,
       y = &quot;Number of laureates&quot;,
       fill=&#39;Field&#39;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-13-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="中文" class="section level2">
<h2>中文</h2>
<p>默认ggplot2不支持中文，为了能显示中文，使用showtext包。前文已提前导入并初始化</p>
<pre><code>library(showtext) #支持中文
showtext_auto()</code></pre>
<p>运行中文的代码</p>
<pre class="r"><code>#把学科转为中文
nobel2 &lt;- nobel %&gt;% 
  mutate(
    field = case_when(field==&#39;Chemistry&#39; ~ &#39;化学&#39;,
                       field==&#39;Economics&#39; ~ &#39;经济学&#39;,
                       field==&#39;Medicine&#39; ~ &#39;经济学&#39;,
                       field==&#39;Peace&#39; ~ &#39;和平&#39;,
                       field==&#39;Physics&#39; ~ &#39;物理学&#39;,
                       field==&#39;Literature&#39; ~ &#39;文学&#39;))



#绘图
ggplot(data = nobel2,
       mapping = aes(x = year,
                     fill = field)) +
  scale_fill_manual(values = met.brewer(&quot;Signac&quot;, 6)) + 
  geom_histogram(color = &quot;white&quot;) +
  labs(title = &quot;过去50年诺贝尔奖得主人数一直保持增长趋势&quot;,
       subtitle = &quot;物理学、医学和化学的获奖者人数最多&quot;,
       x = &quot;年份&quot;,
       y = &quot;获奖人数&quot;,
       fill=&#39;领域&#39;)</code></pre>
<pre><code>## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-histogram/index_files/figure-html/unnamed-chunk-14-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | ggplot2简明绘图之动态图</title>
      <link>https://hidadeng.github.io/blog/2022-09-04-r-ggplot2-ggplotly/</link>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-r-ggplot2-ggplotly/</guid>
      <description>轻松上手ggplotly</description>
      <content:encoded><![CDATA[
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/htmlwidgets/htmlwidgets.js"></script>
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/plotly-binding/plotly.js"></script>
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/typedarray/typedarray.min.js"></script>
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/jquery/jquery.min.js"></script>
<link href="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/crosstalk/css/crosstalk.min.css" rel="stylesheet" />
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/crosstalk/js/crosstalk.min.js"></script>
<link href="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/plotly-htmlwidgets-css/plotly-htmlwidgets.css" rel="stylesheet" />
<script src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/plotly-main/plotly-latest.min.js"></script>


<blockquote>
<p>原文: <a href="https://www.miriamheiss.com/posts/graphing-with-ggplot/" class="uri">https://www.miriamheiss.com/posts/graphing-with-ggplot/</a></p>
</blockquote>
<p>ggplot() 函数对任何数据科学家都是必不可少的, ta是一种非常简单的绘图函数。刚开始接触可能看起来很难， 不过不要害怕，因为一旦学了基础知识，一切都会变得清晰！ 让我们开始！</p>
<p>ggplotly函数可以直接创建动态交互图标， 该函数内置于ggplot()中。 今天我们要绘制动态散点图</p>
<p><br></p>
<div id="准备" class="section level2">
<h2>准备</h2>
<p>导入本文要用到的包</p>
<pre class="r"><code>library(tidyverse) 
library(gapminder) #准备数据
library(MetBrewer) #配色包
library(plotly) #动态图</code></pre>
<p><br></p>
</div>
<div id="quick-start" class="section level2">
<h2>quick-start</h2>
<p>只要会ggplot，只增多一行代码即可绘制出动态图。鼠标悬浮处会显示一个黑色弹出框。</p>
<pre class="r"><code>library(plotly)
library(dplyr)
library(gapminder)

#选出2007年的数据
gapminder_2007 &lt;- gapminder %&gt;% 
  filter(year==&quot;2007&quot;) %&gt;% 
  dplyr::select(-year)

p &lt;- ggplot(data = gapminder_2007, 
            mapping = aes(x=gdpPercap, 
                          y=lifeExp, 
                          size = pop)) +
  geom_point(alpha=0.7)

#将静态图转为动态图
ggplotly(p)</code></pre>
<div id="htmlwidget-1" style="width:672px;height:480px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-1">{"x":{"data":[{"x":[974.5803384,5937.029526,6223.367465,4797.231267,12779.37964,34435.36744,36126.4927,29796.04834,1391.253792,33692.60508,1441.284873,3822.137084,7446.298803,12569.85177,9065.800825,10680.79282,1217.032994,430.0706916,1713.778686,2042.09524,36319.23501,706.016537,1704.063724,13171.63885,4959.114854,7006.580419,986.1478792,277.5518587,3632.557798,9645.06142,1544.750112,14619.22272,8948.102923,22833.30851,35278.41874,2082.481567,6025.374752,6873.262326,5581.180998,5728.353514,12154.08975,641.3695236,690.8055759,33207.0844,30470.0167,13206.48452,752.7497265,32170.37442,1327.60891,27538.41188,5186.050003,942.6542111,579.231743,1201.637154,3548.330846,39724.97867,18008.94444,36180.78919,2452.210407,3540.651564,11605.71449,4471.061906,40675.99635,25523.2771,28569.7197,7320.880262,31656.06806,4519.461171,1463.249282,1593.06548,23348.13973,47306.98978,10461.05868,1569.331442,414.5073415,12057.49928,1044.770126,759.3499101,12451.6558,1042.581557,1803.151496,10956.99112,11977.57496,3095.772271,9253.896111,3820.17523,823.6856205,944,4811.060429,1091.359778,36797.93332,25185.00911,2749.320965,619.6768924,2013.977305,49357.19017,22316.19287,2605.94758,9809.185636,4172.838464,7408.905561,3190.481016,15389.92468,20509.64777,19328.70901,7670.122558,10808.47561,863.0884639,1598.435089,21654.83194,1712.472136,9786.534714,862.5407561,47143.17964,18678.31435,25768.25759,926.1410683,9269.657808,28821.0637,3970.095407,2602.394995,4513.480643,33859.74835,37506.41907,4184.548089,28718.27684,1107.482182,7458.396327,882.9699438,18008.50924,7092.923025,8458.276384,1056.380121,33203.26128,42951.65309,10611.46299,11415.80569,2441.576404,3025.349798,2280.769906,1271.211593,469.7092981],"y":[43.828,76.423,72.301,42.731,75.32,81.235,79.829,75.635,64.062,79.441,56.728,65.554,74.852,50.728,72.39,73.005,52.295,49.58,59.723,50.43,80.653,44.741,50.651,78.553,72.961,72.889,65.152,46.462,55.322,78.782,48.328,75.748,78.273,76.486,78.332,54.791,72.235,74.994,71.338,71.878,51.579,58.04,52.947,79.313,80.657,56.735,59.448,79.406,60.022,79.483,70.259,56.007,46.388,60.916,70.198,82.208,73.338,81.757,64.698,70.65,70.964,59.545,78.885,80.745,80.546,72.567,82.603,72.535,54.11,67.297,78.623,77.588,71.993,42.592,45.678,73.952,59.443,48.303,74.241,54.467,64.164,72.801,76.195,66.803,74.543,71.164,42.082,62.069,52.906,63.785,79.762,80.204,72.899,56.867,46.859,80.196,75.64,65.483,75.537,71.752,71.421,71.688,75.563,78.098,78.746,76.442,72.476,46.242,65.528,72.777,63.062,74.002,42.568,79.972,74.663,77.926,48.159,49.339,80.941,72.396,58.556,39.613,80.884,81.701,74.143,78.4,52.517,70.616,58.42,69.819,73.923,71.777,51.542,79.425,78.242,76.384,73.747,74.249,73.422,62.698,42.384,43.487],"text":["gdpPercap:   974.5803<br />lifeExp: 43.828<br />pop:   31889923","gdpPercap:  5937.0295<br />lifeExp: 76.423<br />pop:    3600523","gdpPercap:  6223.3675<br />lifeExp: 72.301<br />pop:   33333216","gdpPercap:  4797.2313<br />lifeExp: 42.731<br />pop:   12420476","gdpPercap: 12779.3796<br />lifeExp: 75.320<br />pop:   40301927","gdpPercap: 34435.3674<br />lifeExp: 81.235<br />pop:   20434176","gdpPercap: 36126.4927<br />lifeExp: 79.829<br />pop:    8199783","gdpPercap: 29796.0483<br />lifeExp: 75.635<br />pop:     708573","gdpPercap:  1391.2538<br />lifeExp: 64.062<br />pop:  150448339","gdpPercap: 33692.6051<br />lifeExp: 79.441<br />pop:   10392226","gdpPercap:  1441.2849<br />lifeExp: 56.728<br />pop:    8078314","gdpPercap:  3822.1371<br />lifeExp: 65.554<br />pop:    9119152","gdpPercap:  7446.2988<br />lifeExp: 74.852<br />pop:    4552198","gdpPercap: 12569.8518<br />lifeExp: 50.728<br />pop:    1639131","gdpPercap:  9065.8008<br />lifeExp: 72.390<br />pop:  190010647","gdpPercap: 10680.7928<br />lifeExp: 73.005<br />pop:    7322858","gdpPercap:  1217.0330<br />lifeExp: 52.295<br />pop:   14326203","gdpPercap:   430.0707<br />lifeExp: 49.580<br />pop:    8390505","gdpPercap:  1713.7787<br />lifeExp: 59.723<br />pop:   14131858","gdpPercap:  2042.0952<br />lifeExp: 50.430<br />pop:   17696293","gdpPercap: 36319.2350<br />lifeExp: 80.653<br />pop:   33390141","gdpPercap:   706.0165<br />lifeExp: 44.741<br />pop:    4369038","gdpPercap:  1704.0637<br />lifeExp: 50.651<br />pop:   10238807","gdpPercap: 13171.6388<br />lifeExp: 78.553<br />pop:   16284741","gdpPercap:  4959.1149<br />lifeExp: 72.961<br />pop: 1318683096","gdpPercap:  7006.5804<br />lifeExp: 72.889<br />pop:   44227550","gdpPercap:   986.1479<br />lifeExp: 65.152<br />pop:     710960","gdpPercap:   277.5519<br />lifeExp: 46.462<br />pop:   64606759","gdpPercap:  3632.5578<br />lifeExp: 55.322<br />pop:    3800610","gdpPercap:  9645.0614<br />lifeExp: 78.782<br />pop:    4133884","gdpPercap:  1544.7501<br />lifeExp: 48.328<br />pop:   18013409","gdpPercap: 14619.2227<br />lifeExp: 75.748<br />pop:    4493312","gdpPercap:  8948.1029<br />lifeExp: 78.273<br />pop:   11416987","gdpPercap: 22833.3085<br />lifeExp: 76.486<br />pop:   10228744","gdpPercap: 35278.4187<br />lifeExp: 78.332<br />pop:    5468120","gdpPercap:  2082.4816<br />lifeExp: 54.791<br />pop:     496374","gdpPercap:  6025.3748<br />lifeExp: 72.235<br />pop:    9319622","gdpPercap:  6873.2623<br />lifeExp: 74.994<br />pop:   13755680","gdpPercap:  5581.1810<br />lifeExp: 71.338<br />pop:   80264543","gdpPercap:  5728.3535<br />lifeExp: 71.878<br />pop:    6939688","gdpPercap: 12154.0897<br />lifeExp: 51.579<br />pop:     551201","gdpPercap:   641.3695<br />lifeExp: 58.040<br />pop:    4906585","gdpPercap:   690.8056<br />lifeExp: 52.947<br />pop:   76511887","gdpPercap: 33207.0844<br />lifeExp: 79.313<br />pop:    5238460","gdpPercap: 30470.0167<br />lifeExp: 80.657<br />pop:   61083916","gdpPercap: 13206.4845<br />lifeExp: 56.735<br />pop:    1454867","gdpPercap:   752.7497<br />lifeExp: 59.448<br />pop:    1688359","gdpPercap: 32170.3744<br />lifeExp: 79.406<br />pop:   82400996","gdpPercap:  1327.6089<br />lifeExp: 60.022<br />pop:   22873338","gdpPercap: 27538.4119<br />lifeExp: 79.483<br />pop:   10706290","gdpPercap:  5186.0500<br />lifeExp: 70.259<br />pop:   12572928","gdpPercap:   942.6542<br />lifeExp: 56.007<br />pop:    9947814","gdpPercap:   579.2317<br />lifeExp: 46.388<br />pop:    1472041","gdpPercap:  1201.6372<br />lifeExp: 60.916<br />pop:    8502814","gdpPercap:  3548.3308<br />lifeExp: 70.198<br />pop:    7483763","gdpPercap: 39724.9787<br />lifeExp: 82.208<br />pop:    6980412","gdpPercap: 18008.9444<br />lifeExp: 73.338<br />pop:    9956108","gdpPercap: 36180.7892<br />lifeExp: 81.757<br />pop:     301931","gdpPercap:  2452.2104<br />lifeExp: 64.698<br />pop: 1110396331","gdpPercap:  3540.6516<br />lifeExp: 70.650<br />pop:  223547000","gdpPercap: 11605.7145<br />lifeExp: 70.964<br />pop:   69453570","gdpPercap:  4471.0619<br />lifeExp: 59.545<br />pop:   27499638","gdpPercap: 40675.9964<br />lifeExp: 78.885<br />pop:    4109086","gdpPercap: 25523.2771<br />lifeExp: 80.745<br />pop:    6426679","gdpPercap: 28569.7197<br />lifeExp: 80.546<br />pop:   58147733","gdpPercap:  7320.8803<br />lifeExp: 72.567<br />pop:    2780132","gdpPercap: 31656.0681<br />lifeExp: 82.603<br />pop:  127467972","gdpPercap:  4519.4612<br />lifeExp: 72.535<br />pop:    6053193","gdpPercap:  1463.2493<br />lifeExp: 54.110<br />pop:   35610177","gdpPercap:  1593.0655<br />lifeExp: 67.297<br />pop:   23301725","gdpPercap: 23348.1397<br />lifeExp: 78.623<br />pop:   49044790","gdpPercap: 47306.9898<br />lifeExp: 77.588<br />pop:    2505559","gdpPercap: 10461.0587<br />lifeExp: 71.993<br />pop:    3921278","gdpPercap:  1569.3314<br />lifeExp: 42.592<br />pop:    2012649","gdpPercap:   414.5073<br />lifeExp: 45.678<br />pop:    3193942","gdpPercap: 12057.4993<br />lifeExp: 73.952<br />pop:    6036914","gdpPercap:  1044.7701<br />lifeExp: 59.443<br />pop:   19167654","gdpPercap:   759.3499<br />lifeExp: 48.303<br />pop:   13327079","gdpPercap: 12451.6558<br />lifeExp: 74.241<br />pop:   24821286","gdpPercap:  1042.5816<br />lifeExp: 54.467<br />pop:   12031795","gdpPercap:  1803.1515<br />lifeExp: 64.164<br />pop:    3270065","gdpPercap: 10956.9911<br />lifeExp: 72.801<br />pop:    1250882","gdpPercap: 11977.5750<br />lifeExp: 76.195<br />pop:  108700891","gdpPercap:  3095.7723<br />lifeExp: 66.803<br />pop:    2874127","gdpPercap:  9253.8961<br />lifeExp: 74.543<br />pop:     684736","gdpPercap:  3820.1752<br />lifeExp: 71.164<br />pop:   33757175","gdpPercap:   823.6856<br />lifeExp: 42.082<br />pop:   19951656","gdpPercap:   944.0000<br />lifeExp: 62.069<br />pop:   47761980","gdpPercap:  4811.0604<br />lifeExp: 52.906<br />pop:    2055080","gdpPercap:  1091.3598<br />lifeExp: 63.785<br />pop:   28901790","gdpPercap: 36797.9333<br />lifeExp: 79.762<br />pop:   16570613","gdpPercap: 25185.0091<br />lifeExp: 80.204<br />pop:    4115771","gdpPercap:  2749.3210<br />lifeExp: 72.899<br />pop:    5675356","gdpPercap:   619.6769<br />lifeExp: 56.867<br />pop:   12894865","gdpPercap:  2013.9773<br />lifeExp: 46.859<br />pop:  135031164","gdpPercap: 49357.1902<br />lifeExp: 80.196<br />pop:    4627926","gdpPercap: 22316.1929<br />lifeExp: 75.640<br />pop:    3204897","gdpPercap:  2605.9476<br />lifeExp: 65.483<br />pop:  169270617","gdpPercap:  9809.1856<br />lifeExp: 75.537<br />pop:    3242173","gdpPercap:  4172.8385<br />lifeExp: 71.752<br />pop:    6667147","gdpPercap:  7408.9056<br />lifeExp: 71.421<br />pop:   28674757","gdpPercap:  3190.4810<br />lifeExp: 71.688<br />pop:   91077287","gdpPercap: 15389.9247<br />lifeExp: 75.563<br />pop:   38518241","gdpPercap: 20509.6478<br />lifeExp: 78.098<br />pop:   10642836","gdpPercap: 19328.7090<br />lifeExp: 78.746<br />pop:    3942491","gdpPercap:  7670.1226<br />lifeExp: 76.442<br />pop:     798094","gdpPercap: 10808.4756<br />lifeExp: 72.476<br />pop:   22276056","gdpPercap:   863.0885<br />lifeExp: 46.242<br />pop:    8860588","gdpPercap:  1598.4351<br />lifeExp: 65.528<br />pop:     199579","gdpPercap: 21654.8319<br />lifeExp: 72.777<br />pop:   27601038","gdpPercap:  1712.4721<br />lifeExp: 63.062<br />pop:   12267493","gdpPercap:  9786.5347<br />lifeExp: 74.002<br />pop:   10150265","gdpPercap:   862.5408<br />lifeExp: 42.568<br />pop:    6144562","gdpPercap: 47143.1796<br />lifeExp: 79.972<br />pop:    4553009","gdpPercap: 18678.3144<br />lifeExp: 74.663<br />pop:    5447502","gdpPercap: 25768.2576<br />lifeExp: 77.926<br />pop:    2009245","gdpPercap:   926.1411<br />lifeExp: 48.159<br />pop:    9118773","gdpPercap:  9269.6578<br />lifeExp: 49.339<br />pop:   43997828","gdpPercap: 28821.0637<br />lifeExp: 80.941<br />pop:   40448191","gdpPercap:  3970.0954<br />lifeExp: 72.396<br />pop:   20378239","gdpPercap:  2602.3950<br />lifeExp: 58.556<br />pop:   42292929","gdpPercap:  4513.4806<br />lifeExp: 39.613<br />pop:    1133066","gdpPercap: 33859.7484<br />lifeExp: 80.884<br />pop:    9031088","gdpPercap: 37506.4191<br />lifeExp: 81.701<br />pop:    7554661","gdpPercap:  4184.5481<br />lifeExp: 74.143<br />pop:   19314747","gdpPercap: 28718.2768<br />lifeExp: 78.400<br />pop:   23174294","gdpPercap:  1107.4822<br />lifeExp: 52.517<br />pop:   38139640","gdpPercap:  7458.3963<br />lifeExp: 70.616<br />pop:   65068149","gdpPercap:   882.9699<br />lifeExp: 58.420<br />pop:    5701579","gdpPercap: 18008.5092<br />lifeExp: 69.819<br />pop:    1056608","gdpPercap:  7092.9230<br />lifeExp: 73.923<br />pop:   10276158","gdpPercap:  8458.2764<br />lifeExp: 71.777<br />pop:   71158647","gdpPercap:  1056.3801<br />lifeExp: 51.542<br />pop:   29170398","gdpPercap: 33203.2613<br />lifeExp: 79.425<br />pop:   60776238","gdpPercap: 42951.6531<br />lifeExp: 78.242<br />pop:  301139947","gdpPercap: 10611.4630<br />lifeExp: 76.384<br />pop:    3447496","gdpPercap: 11415.8057<br />lifeExp: 73.747<br />pop:   26084662","gdpPercap:  2441.5764<br />lifeExp: 74.249<br />pop:   85262356","gdpPercap:  3025.3498<br />lifeExp: 73.422<br />pop:    4018332","gdpPercap:  2280.7699<br />lifeExp: 62.698<br />pop:   22211743","gdpPercap:  1271.2116<br />lifeExp: 42.384<br />pop:   11746035","gdpPercap:   469.7093<br />lifeExp: 43.487<br />pop:   12311143"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,0,0,1)","opacity":0.7,"size":[6.70929835135528,4.73930360976545,6.77527173254923,5.598900411863,7.07528369289545,6.12061399094626,5.2515712457991,4.1508288847182,10.1588656081799,5.44107849786917,5.24035330707835,5.33385387656466,4.86531670289218,4.40395768399738,10.9497220287062,5.16855282584858,5.7356199392208,5.26901439581437,5.72211801075065,5.9564773609874,6.77784403625228,4.8422259478741,5.42852631166044,5.86681801798997,22.6771653543307,7.23282911414924,4.15169850163956,7.9562662998771,4.76713328307226,4.81182340745332,5.97611663817011,4.85794694387522,5.52260397354913,5.42769965273683,4.97410786436283,4.06305719383881,5.35122378867242,5.69571313317988,8.43636871732964,5.1306777542305,4.08813627550005,4.90865391372741,8.32592567062337,4.94778140481952,7.84043376621969,4.36262596871136,4.41454467512776,8.49809123744673,6.25770233060098,5.46648280699294,5.61021330347734,5.40445197132612,4.3666011970112,5.27919109958551,5.18415329737334,5.13475345805415,5.40514308400654,3.9460291298415,21.1203680953071,11.5573968303758,8.11057131553749,6.49879524068774,4.8085649745634,5.07824026167466,7.74130405516196,4.6155666029278,9.65077587363648,5.03869129857133,6.87649613589243,6.28100350114513,7.4168446506104,4.56983839481089,4.78354392302204,4.480300710223,4.68010775450673,5.03693920169262,6.0461636385333,5.66517797748393,6.36196165910748,5.5697344023561,4.69148323166173,4.31315004312066,9.20063061292984,4.63065651672448,4.14203032052794,6.79437672410524,6.09253246174489,7.36876387589759,4.48845333089755,6.56775273775666,5.88528441607637,4.80944439195868,4.99737544049698,5.6338762963756,9.82271393327331,4.87472139425141,4.68175365529605,10.5466615830696,4.68733172329479,5.10307852744492,6.55670348636785,8.74086596862592,7.00115515259145,5.46138101214586,4.78640121163658,4.18215900239245,6.22484391610449,5.3111594952501,3.77952755905512,6.50384061768477,5.58747695964146,5.42123845033248,5.04848038390226,4.86541785279541,4.97176812735327,4.47964255788798,5.33382085391144,7.22380829377829,7.0812884751231,6.11737587407916,7.1561065468969,4.282361176813,5.32616181946541,5.19097245574501,6.05493528307165,6.27409491409121,6.98520027409899,7.97119993399054,5.00028803920838,4.26132881438327,5.43159101796171,8.16356363915206,6.580769078434,7.83015990857845,12.807919245623,4.71746231550028,6.42738713411734,8.57951329437571,4.79655097614072,6.22127948111281,5.54798462578679,5.59074371141117],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","showlegend":false,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(235,235,235,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[-2176.430056865,51811.172085565],"tickmode":"array","ticktext":["0","10000","20000","30000","40000","50000"],"tickvals":[0,10000,20000,30000,40000,50000],"categoryorder":"array","categoryarray":["0","10000","20000","30000","40000","50000"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(255,255,255,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"y","title":{"text":"gdpPercap","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[37.4635,84.7525],"tickmode":"array","ticktext":["40","50","60","70","80"],"tickvals":[40,50,60,70,80],"categoryorder":"array","categoryarray":["40","50","60","70","80"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(255,255,255,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"x","title":{"text":"lifeExp","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":null,"line":{"color":null,"width":0,"linetype":[]},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":false,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"pop","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"6d507cad2d7b":{"x":{},"y":{},"size":{},"type":"scatter"}},"cur_data":"6d507cad2d7b","visdat":{"6d507cad2d7b":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
<div id="画布gglot" class="section level2">
<h2>画布gglot</h2>
<p>用ggplot函数构造一个画布, 使用gapminder数据集</p>
<p><img src="img/gapminder.png" /></p>
<ul>
<li>将gdpPercap设定为x轴</li>
<li>将lifeExp设定为y轴</li>
</ul>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,
                     y = lifeExp))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-3-1.png" width="672" /></p>
<p>现在我们将开始添加高层次的图层，会显示越来越多的信息。</p>
<p><br></p>
</div>
<div id="添加geom" class="section level2">
<h2>添加geom</h2>
<p>现在添加geom层，该层是通过 <code>+</code> 构建在ggplot层之上。这里使用 <code>geom_ponit()</code> 绘制散点图，</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,
                     y = lifeExp))+
  geom_point() #透明度</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p>生成的图仅仅是黑白图，为了美观，可以设置为更靓丽的颜色。</p>
<p><br></p>
</div>
<div id="aescolor" class="section level2">
<h2>aes(color)</h2>
<p>二维空间显示三维信息，
- x轴 gdpPercap
- y轴 lifeExp
- color continent</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     color=continent))+ #大陆
  geom_point() </code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-5-1.png" width="672" /></p>
<p>现在可以清晰地看出哪些大陆更加富裕、更加健康, 要是配色再好看点就好了。</p>
<p><br></p>
</div>
<div id="调整配色" class="section level2">
<h2>调整配色</h2>
<p>在 [<a href="https://hidadeng.github.io/blog/2022-09-04-r-ggplot2-histogram/" class="uri">https://hidadeng.github.io/blog/2022-09-04-r-ggplot2-histogram/</a>]中首次使用了MetBrewer配色包。</p>
<p>这里会用5个具有区分度的颜色，我们选择 <code>Lakota</code> 配色方案。同时，在图中绘制对应的人口规模，以size方式显示。</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     size = pop,        #人口
                     color=continent))+ #大陆
  geom_point()+                
  scale_color_manual(values=met.brewer(&quot;Lakota&quot;, 5))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-6-1.png" width="672" /></p>
<p>为了让数据更加平滑，对x轴取对数</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     size = pop,        #人口
                     color=continent))+ #大陆
  geom_point()+                
  scale_color_manual(values = met.brewer(&quot;Lakota&quot;, 5))+
  scale_x_log10(breaks = c(400, 4000, 40000))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="更换主题" class="section level2">
<h2>更换主题</h2>
<p>使用 <code>theme_bw</code> 更改绘图的主题风格</p>
<pre class="r"><code>ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     size = pop,        #人口
                     color=continent))+ #大陆
  geom_point()+                
  scale_color_manual(values = met.brewer(&quot;Lakota&quot;, 5))+
  scale_x_log10(breaks = c(400, 4000, 40000))+
  theme_bw()</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="标签labs" class="section level2">
<h2>标签labs</h2>
<pre class="r"><code>p2 &lt;- ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap,     #gdp
                     y = lifeExp,       #预期寿命
                     size = pop,        #人口
                     color=continent,   #大陆
                     text = country))+  #国家
  geom_point()+                #透明度
  scale_color_manual(values = met.brewer(&quot;Lakota&quot;, 5))+
  scale_x_log10(breaks = c(400, 4000, 40000))+
  theme_bw()+
  labs(title = &quot;Gdp and Life Expectancy in 142 countries&quot;,
       subtitle = &quot;Most of Africa is sick and poor,\nwhile Europe is thriving and rich&quot;,
       x = &quot;Gdp Per Capita&quot;,
       y = &quot;Life Expectancy&quot;,
       fill = &quot;Continent&quot;,
       size = &quot;Population&quot;)

p2</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-ggplotly/index_files/figure-html/unnamed-chunk-9-1.png" width="672" /></p>
<p>使用ggplotly将p2从静态图转为动态图， 鼠标悬浮处弹出圆圈对应的国家。</p>
<pre class="r"><code>ggplotly(p2, tooltip = &quot;text&quot;)</code></pre>
<div id="htmlwidget-2" style="width:672px;height:480px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-2">{"x":{"data":[{"x":[3.79402544509666,3.68099065562682,3.1587498285201,4.09933015629768,3.08530235219712,2.63353984732021,3.31007599301138,2.848814873635,3.23148583131337,2.99394204506796,2.44334414004637,3.56021253312911,3.18885823537455,3.31858116595608,3.74672610693845,4.08472243900371,2.80710831941093,2.83935583435696,4.12078722664154,2.87665060639063,3.1230701584329,2.9743524119827,2.76285235400399,3.16531831968284,3.19571467604724,2.61753222691212,4.08125724466051,3.01902074595738,2.88044194586588,3.0181100381011,3.25603221652431,4.03969130967891,3.58208328429303,2.91576148434958,3.68224081186337,2.79216530171644,3.30405457229069,3.88480230343241,2.93605531183875,3.20369500466057,3.23362351372365,2.93577962517273,2.96667714274902,3.96706370233863,3.41537321502711,3.65451158423759,3.04433674769752,2.94594592049266,3.85082524675123,3.02382022004224,3.10421784482941,2.67182915731664],"y":[72.301,42.731,56.728,50.728,52.295,49.58,50.43,44.741,50.651,65.152,46.462,55.322,48.328,54.791,71.338,51.579,58.04,52.947,56.735,59.448,60.022,56.007,46.388,54.11,42.592,45.678,73.952,59.443,48.303,54.467,64.164,72.801,71.164,42.082,52.906,56.867,46.859,76.442,46.242,65.528,63.062,42.568,48.159,49.339,58.556,39.613,52.517,58.42,73.923,51.542,42.384,43.487],"text":["Algeria","Angola","Benin","Botswana","Burkina Faso","Burundi","Cameroon","Central African Republic","Chad","Comoros","Congo, Dem. Rep.","Congo, Rep.","Cote d'Ivoire","Djibouti","Egypt","Equatorial Guinea","Eritrea","Ethiopia","Gabon","Gambia","Ghana","Guinea","Guinea-Bissau","Kenya","Lesotho","Liberia","Libya","Madagascar","Malawi","Mali","Mauritania","Mauritius","Morocco","Mozambique","Namibia","Niger","Nigeria","Reunion","Rwanda","Sao Tome and Principe","Senegal","Sierra Leone","Somalia","South Africa","Sudan","Swaziland","Tanzania","Togo","Tunisia","Uganda","Zambia","Zimbabwe"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(4,163,189,1)","opacity":1,"size":[6.77527173254923,5.598900411863,5.24035330707835,4.40395768399738,5.7356199392208,5.26901439581437,5.9564773609874,4.8422259478741,5.42852631166044,4.15169850163956,7.9562662998771,4.76713328307226,5.97611663817011,4.06305719383881,8.43636871732964,4.08813627550005,4.90865391372741,8.32592567062337,4.36262596871136,4.41454467512776,6.25770233060098,5.40445197132612,4.3666011970112,6.87649613589243,4.480300710223,4.68010775450673,5.03693920169262,6.0461636385333,5.66517797748393,5.5697344023561,4.69148323166173,4.31315004312066,6.79437672410524,6.09253246174489,4.48845333089755,5.6338762963756,9.82271393327331,4.18215900239245,5.3111594952501,3.77952755905512,5.58747695964146,5.04848038390226,5.33382085391144,7.22380829377829,7.1561065468969,4.282361176813,6.98520027409899,5.00028803920838,5.43159101796171,6.580769078434,5.54798462578679,5.59074371141117],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(4,163,189,1)"}},"hoveron":"points","name":"Africa","legendgroup":"Africa","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[4.10650977201769,3.58230625931688,3.95740617340857,4.56013669242519,4.11963981438709,3.84550611104731,3.98430499758718,3.95173097080165,3.77998406330737,3.83716291957619,3.75802981175127,3.71483669984604,3.0797733480287,3.55002410662006,3.86456330372846,4.07836889751077,3.43922544380543,3.99163295350919,3.6204315729333,3.86975405900188,4.28620284789525,4.25547776303394,4.632979883279,4.02577526370184,4.05750656798335],"y":[75.32,65.554,72.39,80.653,78.553,72.889,78.782,78.273,72.235,74.994,71.878,70.259,60.916,70.198,72.567,76.195,72.899,75.537,71.752,71.421,78.746,69.819,78.242,76.384,73.747],"text":["Argentina","Bolivia","Brazil","Canada","Chile","Colombia","Costa Rica","Cuba","Dominican Republic","Ecuador","El Salvador","Guatemala","Haiti","Honduras","Jamaica","Mexico","Nicaragua","Panama","Paraguay","Peru","Puerto Rico","Trinidad and Tobago","United States","Uruguay","Venezuela"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(240,190,61,1)","opacity":1,"size":[7.07528369289545,5.33385387656466,10.9497220287062,6.77784403625228,5.86681801798997,7.23282911414924,4.81182340745332,5.52260397354913,5.35122378867242,5.69571313317988,5.1306777542305,5.61021330347734,5.27919109958551,5.18415329737334,4.6155666029278,9.20063061292984,4.99737544049698,4.68733172329479,5.10307852744492,6.55670348636785,4.78640121163658,4.26132881438327,12.807919245623,4.71746231550028,6.42738713411734],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(240,190,61,1)"}},"hoveron":"points","name":"Americas","legendgroup":"Americas","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[2.98881764549129,4.47415867018597,3.143406361057,3.23395473727517,3.6954041667466,4.59906367268864,3.38955773121288,3.54908318988216,4.06467188236304,3.65041068311967,4.40693643553008,4.50045697098462,3.65508665949928,3.20223362703668,4.3682522837381,4.67492531406996,4.01957563822304,4.09522710701315,3.49076900592376,2.97497199429807,3.03796794384465,4.34862010618943,3.41596567540354,3.50385616482709,4.33555481758265,4.67341887079622,3.59880094359832,3.62164856315343,4.45815837772449,3.87264545733796,3.38767031916547,3.4807755960326,3.35808147396803],"y":[43.828,75.635,64.062,59.723,72.961,82.208,64.698,70.65,70.964,59.545,80.745,82.603,72.535,67.297,78.623,77.588,71.993,74.241,66.803,62.069,63.785,75.64,65.483,71.688,72.777,79.972,72.396,74.143,78.4,70.616,74.249,73.422,62.698],"text":["Afghanistan","Bahrain","Bangladesh","Cambodia","China","Hong Kong, China","India","Indonesia","Iran","Iraq","Israel","Japan","Jordan","Korea, Dem. Rep.","Korea, Rep.","Kuwait","Lebanon","Malaysia","Mongolia","Myanmar","Nepal","Oman","Pakistan","Philippines","Saudi Arabia","Singapore","Sri Lanka","Syria","Taiwan","Thailand","Vietnam","West Bank and Gaza","Yemen, Rep."],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(147,30,24,1)","opacity":1,"size":[6.70929835135528,4.1508288847182,10.1588656081799,5.72211801075065,22.6771653543307,5.13475345805415,21.1203680953071,11.5573968303758,8.11057131553749,6.49879524068774,5.07824026167466,9.65077587363648,5.03869129857133,6.28100350114513,7.4168446506104,4.56983839481089,4.78354392302204,6.36196165910748,4.63065651672448,7.36876387589759,6.56775273775666,4.68175365529605,10.5466615830696,8.74086596862592,6.50384061768477,4.86541785279541,6.11737587407916,6.05493528307165,6.27409491409121,7.97119993399054,8.57951329437571,4.79655097614072,6.22127948111281],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(147,30,24,1)"}},"hoveron":"points","name":"Asia","legendgroup":"Asia","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[3.77356920876217,4.55782580062218,4.52753459151331,3.87194045947979,4.02860349094832,4.16492428251317,4.35856884462783,4.54750911081685,4.52123074598147,4.48387269225076,4.50745611553652,4.43993889119905,4.25548825822109,4.55847803563392,4.60933819969144,4.45590597950278,3.96632461957789,4.56582342810493,4.69335042800253,4.18723649435127,4.31195820191596,4.03376444688129,3.990628940935,4.27133768016358,4.41108505321789,4.4597100052953,4.52968372605252,4.57410560181062,3.92728187211911,4.52118074293136],"y":[76.423,79.829,79.441,74.852,73.005,75.748,76.486,78.332,79.313,80.657,79.406,79.483,73.338,81.757,78.885,80.546,74.543,79.762,80.196,75.563,78.098,72.476,74.002,74.663,77.926,80.941,80.884,81.701,71.777,79.425],"text":["Albania","Austria","Belgium","Bosnia and Herzegovina","Bulgaria","Croatia","Czech Republic","Denmark","Finland","France","Germany","Greece","Hungary","Iceland","Ireland","Italy","Montenegro","Netherlands","Norway","Poland","Portugal","Romania","Serbia","Slovak Republic","Slovenia","Spain","Sweden","Switzerland","Turkey","United Kingdom"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(218,121,1,1)","opacity":1,"size":[4.73930360976545,5.2515712457991,5.44107849786917,4.86531670289218,5.16855282584858,4.85794694387522,5.42769965273683,4.97410786436283,4.94778140481952,7.84043376621969,8.49809123744673,5.46648280699294,5.40514308400654,3.9460291298415,4.8085649745634,7.74130405516196,4.14203032052794,5.88528441607637,4.87472139425141,7.00115515259145,5.46138101214586,6.22484391610449,5.42123845033248,4.97176812735327,4.47964255788798,7.0812884751231,5.32616181946541,5.19097245574501,8.16356363915206,7.83015990857845],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(218,121,1,1)"}},"hoveron":"points","name":"Europe","legendgroup":"Europe","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[4.53700472145269,4.40114211228811],"y":[81.235,80.204],"text":["Australia","New Zealand"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(36,125,63,1)","opacity":1,"size":[6.12061399094626,4.80944439195868],"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(36,125,63,1)"}},"hoveron":"points","name":"Oceania","legendgroup":"Oceania","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":43.7625570776256,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"title":{"text":"Gdp and Life Expectancy in 142 countries","font":{"color":"rgba(0,0,0,1)","family":"","size":17.5342465753425},"x":0,"xref":"paper"},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[2.33084382564856,4.80585074240034],"tickmode":"array","ticktext":["400","4000","40000"],"tickvals":[2.60205999132796,3.60205999132796,4.60205999132796],"categoryorder":"array","categoryarray":["400","4000","40000"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(235,235,235,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"y","title":{"text":"Gdp Per Capita","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[37.4635,84.7525],"tickmode":"array","ticktext":["40","50","60","70","80"],"tickvals":[40,50,60,70,80],"categoryorder":"array","categoryarray":["40","50","60","70","80"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(235,235,235,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"x","title":{"text":"Life Expectancy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(51,51,51,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"continent<br />Population","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"6d507d3656d6":{"x":{},"y":{},"size":{},"colour":{},"text":{},"type":"scatter"}},"cur_data":"6d507d3656d6","visdat":{"6d507d3656d6":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  ggplot2简明绘图之散点图</title>
      <link>https://hidadeng.github.io/blog/2022-09-04-r-ggplot2-scatter/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-r-ggplot2-scatter/</guid>
      <description>教你理解图层、数geom、labs等函数，轻松上手ggplot2</description>
      <content:encoded><![CDATA[


<blockquote>
<p>原文: <a href="https://www.miriamheiss.com/posts/graphing-with-ggplot/" class="uri">https://www.miriamheiss.com/posts/graphing-with-ggplot/</a></p>
</blockquote>
<p>ggplot() 函数对任何数据科学家都是必不可少的, ta是一种非常简单的绘图函数。刚开始接触可能看起来很难， 不过不要害怕，因为一旦学了基础知识，一切都会变得清晰！ 让我们开始！</p>
<div id="准备" class="section level2">
<h2>准备</h2>
<p>在这里，我需要导入本节需要的包。 <code>tidyverse</code> 包括八个包，其中之一是 <code>ggplot2</code>。 <code>primer.data</code>包 拥有比R 内置的更多的数据集。</p>
<pre class="r"><code>library(ggplot2)
library(primer.data) #准备数据
library(showtext)</code></pre>
<pre><code>## Loading required package: sysfonts</code></pre>
<pre><code>## Loading required package: showtextdb</code></pre>
<pre class="r"><code>showtext_auto()  #显示中文</code></pre>
</div>
<div id="画布gglot" class="section level2">
<h2>画布gglot</h2>
<p>画画需要画布，对于数据分析的绘图也是同理。导入相关R包后， 用ggplot函数构造一个画布。因为还没设定数据，所以这是一个空画布</p>
<pre class="r"><code>ggplot()</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-2-1.png" width="672" /></p>
<p>我们将使用nhanes数据集，传入数据的代码ggplot(data=nhanes)</p>
<pre class="r"><code>ggplot(data=nhanes)</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-3-1.png" width="672" /></p>
<p>画布看起来依然是空白的，不要紧张。理解这个之前类比PS这类绘图软件，将修图工作看做是很多个图层的叠加。现在我们使用时依然在最底层的ggplot图层，在ggplot函数内添加mapping=aes()参数，准备添加x轴、y轴、color。的图层。</p>
<p>Aesthetic mappings审美映射。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes())</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-4-1.png" width="672" /></p>
<p>注意了，现在图层即将发生变化。我们选择设置x轴、y轴、color的字段。</p>
<ul>
<li>x轴 height身高</li>
<li>y轴 weight体重</li>
<li>color gender性别</li>
</ul>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-5-1.png" width="672" /></p>
<p>现在我们将开始添加高层次的图层，也会显示越来越多的信息。</p>
<p><br></p>
</div>
<div id="添加geom" class="section level2">
<h2>添加geom</h2>
<p>现在添加geom层(geom是geomeric缩写)，该层是通过 <code>+</code> 构建在ggplot层之上。这里使用 <code>geom_point()</code> 绘制散点图，</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping = aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point()</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-6-1.png" width="672" /></p>
<p>Wow! 不错的开始，不过这个图中的点互相之间重叠的有一点点严重，需要设定点的大小size和透明度alpha来控制重叠效果。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.3, size=0.5)</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<p>much better! 但能否按性别，分别绘制男、女的散点图。</p>
<p><br></p>
</div>
<div id="分面facet" class="section level2">
<h2>分面facet</h2>
<p>接下来添加一个分面函数 <code>facet_wrap</code>。该函数会分别生成男性分面、女性分面</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.3, size=0.5)+
  facet_wrap(~gender)</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
<p>现在我们有了两个分面图</p>
<p><br></p>
</div>
<div id="添加第二个geom" class="section level2">
<h2>添加第二个geom</h2>
<p>现在我们需要添加一个趋势线，可以使用 <code>geom_smooth()</code> 函数，因为geom_smooth和geom_point都是geom层的函数，理所当然它俩比 facet_wrap层更近一些。为了让趋势线更明显，将散点的透明度设置的更浅，比如0.1</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth()+
  facet_wrap(~gender)</code></pre>
<pre><code>## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39;</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-9-1.png" width="672" /></p>
<p>现在，我们想让趋势线更平滑一些。在<code>geom_smooth()</code>中，我们会设置 <code>method="loess"</code>以使得趋势线更平滑。 <code>formula=y~x</code>表示y的变化与x有关。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-10-1.png" width="672" />
<br></p>
</div>
<div id="标签labs" class="section level2">
<h2>标签labs</h2>
<p>现在我们需要用<code>labs()</code>函数给图片添加标签图层。例如title、subtitle、caption、x、y、legend。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-11-1.png" width="672" />
现在有了正副标题，横纵坐标没有数量单位，不太nice，这里更改为 <code>Height(cm)、Weight(kg)</code></p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-12-1.png" width="672" />
Awesome! 但图例Lengend中的 <code>gender</code> 依然是小写，我希望改为大写。我们知道x、y、color分别对应height、weight、gender，所以如果更改gender，需要设置的是color。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;,
       color=&quot;Gender&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-13-1.png" width="672" /></p>
<p>但是看到这个图片时，其他人会想原始数据是啥情况，怎么来的。这时候我们需要告诉大家nhances数据集来自于 <code>National Health and Nutrition Examination Survey</code>。通过设置labs的caption参数即可。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;,
       color=&quot;Gender&quot;,
       caption=&quot;Source: National Health and Nutrition Examination Survey&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-14-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="更改配色" class="section level2">
<h2>更改配色</h2>
<p>绘图已经相当完整，但geom层的散点颜色可能不是咱的最爱，如何设置颜色呢？</p>
<p>更改geom层的颜色，所以该层紧贴geom层，且在geom层之上。设置方法使用 <code>scale_color_manual()</code> 即可。<code>scale_color_munual()</code> 中的values可以传入颜色十六进制的字符串，还可以传入颜色字符串。</p>
<pre class="r"><code>ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  scale_color_manual(values=c(&quot;magenta&quot;, &quot;blue&quot;))+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;,
       color=&quot;Gender&quot;,
       caption=&quot;Source: National Health and Nutrition Examination Survey&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-15-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="设置主题" class="section level2">
<h2>设置主题</h2>
<ul>
<li>theme_bw()</li>
<li>theme_dark()</li>
<li>theme_gray()</li>
<li>theme_light()</li>
<li>theme_minimal()</li>
</ul>
<pre class="r"><code>g &lt;- ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  scale_color_manual(values=c(&quot;magenta&quot;, &quot;blue&quot;))+
  facet_wrap(~gender)+
  labs(title = &quot;Heights in the U.S.&quot;,
       subtitle = &quot;On average, men weigh more and are taller than women&quot;,
       x=&quot;Height (cm)&quot;,
       y=&quot;Weight (kg)&quot;,
       color=&quot;Gender&quot;,
       caption=&quot;Source: National Health and Nutrition Examination Survey&quot;)
  
g + theme_minimal()</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-16-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="保存" class="section level2">
<h2>保存</h2>
<pre class="r"><code>ggsave(
  filename = &quot;scatter.png&quot;,
  plot = g,
  width = 10,
  height = 8,
  dpi = 100,
  device = &quot;png&quot;
)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><br></p>
</div>
<div id="中文问题" class="section level2">
<h2>中文问题</h2>
<p>默认ggplot2不支持中文，为了能显示中文，需要使用showtext包</p>
<pre class="r"><code>library(ggplot2)
library(primer.data) #提供数据
library(showtext) #支持中文
showtext_auto()

ggplot(data=nhanes,
       mapping=aes(
         x=height,
         y=weight,
         color=gender))+
  geom_point(alpha=0.1, size=0.5)+
  geom_smooth(method=&quot;loess&quot;, formula=y~x)+
  scale_color_manual(values=c(&quot;magenta&quot;, &quot;blue&quot;))+
  facet_wrap(~gender)+
  labs(title = &quot;美国身高&quot;,
       subtitle = &quot;平均而言，男性群体的身高会高于女性群体&quot;,
       x=&quot;身高(cm)&quot;,
       y=&quot;体重(kg)&quot;,
       color=&quot;性别&quot;,
       caption=&quot;数据源: National Health and Nutrition Examination Survey&quot;)</code></pre>
<pre><code>## Warning: Removed 366 rows containing non-finite values (stat_smooth).</code></pre>
<pre><code>## Warning: Removed 366 rows containing missing values (geom_point).</code></pre>
<p><img src="/blog/2022-09-04-r-ggplot2-scatter/index_files/figure-html/unnamed-chunk-18-1.png" width="672" /></p>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>在jupyter中显示pdf内容</title>
      <link>https://hidadeng.github.io/blog/render_pdf_content_in_jupyter/</link>
      <pubDate>Thu, 21 Jul 2022 18:43:10 +0600</pubDate>
      
      <guid>/blog/render_pdf_content_in_jupyter/</guid>
      <description>使用IPython的display可以将pdf内容渲染到jupyter内</description>
      <content:encoded><![CDATA[<p>使用IPython的display可以将pdf内容渲染到jupyter内，代码如下</p>
<h2 id="pdf文件">pdf文件</h2>
<p>本地pdf文件，可以在jupyter内显示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">IFrame</span>
<span class="n">IFrame</span><span class="p">(</span><span class="s1">&#39;管理者短视主义影响企业长期投资吗_基于文本分析和机器学习_胡楠.pdf&#39;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">450</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/%e4%bc%9a%e8%ae%a1.png" alt=""  />
</p>
<br>
<h2 id="pdf链接">pdf链接</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">IFrame</span>
<span class="n">IFrame</span><span class="p">(</span><span class="s1">&#39;https://arxiv.org/pdf/1406.2661.pdf&#39;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">450</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/arxiv.png" alt=""  />
</p>
<br>
<h2 id="长期征稿">长期征稿</h2>
<div style="text-align: center;">
<figure >
    <a href="https://hidadeng.github.io/blog/call_for_paper/">
        <img src="/images/blog/call_for_paper.png" width="100%" />
    </a>
    <figcaption><small><i>点击了解投稿</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="招募小伙伴">招募小伙伴</h2>
<div style="text-align: center;">
<figure >
    <a href="https://hidadeng.github.io/blog/we_need_you/">
        <img src="/images/blog/we_need_you.png" width="100%" />
    </a>
    <figcaption><small><i>点击加入我们</i></small></figcaption>
</figure>
</div>
<h2 id="文本分析视频课">文本分析视频课</h2>
<p>想轻松而快捷的深刻了解一个领域，看视频(直播)学习是一个不错的方式。</p>
<ul>
<li>
<p>大邓每年会有4场直播，五一、十一、寒、暑假，如果时间点接近，可考虑报名参与<a href="https://hidadeng.github.io/blog/2022-05-workshop/7-Python.html">直播课</a>。</p>
</li>
<li>
<p>如果只意性价比，且已迫不及待想学，可以考虑直接报名大邓的<a href="https://hidadeng.github.io/blog/management_python_course">录播课</a>。</p>
</li>
<li>
<p>如果不想学，也可以考虑外包。更建议找淘宝，如果找我咨询，请先阅读<a href="https://hidadeng.github.io/blog/paid_for_service">有偿说明</a></p>
</li>
</ul>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
<br>
]]></content:encoded>
    </item>
    
    <item>
      <title>改善matplotlib在jupyter内的渲染效果</title>
      <link>https://hidadeng.github.io/blog/matplotlib_config_settings_in_jupyter/</link>
      <pubDate>Thu, 21 Jul 2022 18:43:10 +0600</pubDate>
      
      <guid>/blog/matplotlib_config_settings_in_jupyter/</guid>
      <description>matplotlib能绘制出美观的图，是一个挺好用的绘图包，但是在jupyter内渲染的图很丑，有种模糊感。</description>
      <content:encoded><![CDATA[<h2 id="标量位图">标量(位)图</h2>
<p>matplotlib能绘制出美观的图，是一个挺好用的绘图包，但是在jupyter内渲染的图很丑，有种模糊感。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="c1"># Data for plotting</span>
<span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">t</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">xlabel</span><span class="o">=</span><span class="s1">&#39;time (s)&#39;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;voltage (mV)&#39;</span><span class="p">,</span>
       <span class="n">title</span><span class="o">=</span><span class="s1">&#39;About as simple as it gets, folks&#39;</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">grid</span><span class="p">()</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="%e4%b8%8b%e8%bd%bd.png" alt=""  />
</p>
<p>​</p>
<br>
<h2 id="矢量图">矢量图</h2>
<p>实际上，jupyter notebook内加上一行配置，就能让matplotlib输出矢量图(放大缩小不改变图片样子)。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">%config InlineBackend.figure_format = &#39;svg&#39;
</code></pre></div><p>配置后，浏览器会渲染出更精细化的图，如下图所示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="o">%</span><span class="n">config</span> <span class="n">InlineBackend</span><span class="o">.</span><span class="n">figure_format</span> <span class="o">=</span> <span class="s1">&#39;svg&#39;</span>



<span class="c1"># Data for plotting</span>
<span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">t</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">xlabel</span><span class="o">=</span><span class="s1">&#39;time (s)&#39;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;voltage (mV)&#39;</span><span class="p">,</span>
       <span class="n">title</span><span class="o">=</span><span class="s1">&#39;About as simple as it gets, folks&#39;</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">grid</span><span class="p">()</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="output_5_0.svg" alt="svg"  />
</p>
<br>
<h2 id="保存">保存</h2>
<p>savefig可以保存为.pdf、.eps、 .svg、 .png等不同格式文件。 其中.pdf 或者 .eps 能方便地插入到 latex 中！</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="o">%</span><span class="n">config</span> <span class="n">InlineBackend</span><span class="o">.</span><span class="n">figure_format</span> <span class="o">=</span> <span class="s1">&#39;svg&#39;</span>



<span class="c1"># Data for plotting</span>
<span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">t</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">xlabel</span><span class="o">=</span><span class="s1">&#39;time (s)&#39;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;voltage (mV)&#39;</span><span class="p">,</span>
       <span class="n">title</span><span class="o">=</span><span class="s1">&#39;About as simple as it gets, folks&#39;</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">grid</span><span class="p">()</span>

<span class="c1">#矢量图svg</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s1">&#39;三角函数图.svg&#39;</span><span class="p">)</span>

<span class="c1">#标量图设置dpi高一点，输出的图精致一些</span>
<span class="c1">#plt.savefig(fname=&#39;三角函数图.png&#39;, dpi=300)</span>
<span class="c1">#plt.savefig(fname=&#39;三角函数图.pdf&#39;, dpi=300)</span>
<span class="c1">#plt.savefig(fname=&#39;三角函数图.svg&#39;, dpi=300)</span>
</code></pre></div><p><img loading="lazy" src="output_5_0.svg" alt="svg"  />

​</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TechWeekly-18 每周有趣有用的技术分享</title>
      <link>https://hidadeng.github.io/blog/techweekly18/</link>
      <pubDate>Mon, 30 May 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/techweekly18/</guid>
      <description>&lt;h2 id=&#34;svgartista&#34;&gt;svgartista&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://svgartista.net/&#34;&gt;https://svgartista.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;svg动画制作网站&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/svgartista.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;rawgraphs&#34;&gt;rawgraphs&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/19-svg-generators.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://app.rawgraphs.io/&#34;&gt;https://app.rawgraphs.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;免费制作炫酷的可视化图表，在底层，该工具使用 D3.js(一个出色的 JavaScript 可视化库)，可数据进行可视化。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/intro-rawgraphs-small.mp4&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;RAWGraphs 团队提供了一系列关于如何使用该工具的视频教程。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;jiffyreader&#34;&gt;jiffyreader&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jiffyreader.com/&#34;&gt;https://www.jiffyreader.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过对单词局部位置加粗，让读者更好更快阅读英文。安装该插件后，理论上能让大脑处理速度加快10+倍。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/jiffyreader1.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/jiffyreader2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;了解课程&#34;&gt;了解课程&lt;/h2&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;figure &gt;
    &lt;a href=&#34;https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596&#34;&gt;
        &lt;img src=&#34;/images/bg/management_data_mining_with_python_course.png&#34; width=&#34;100%&#34; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;点击上方图片购买课程&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://hidadeng.github.io/blog/management_python_course/&#34;&gt;点击进入详情页&lt;/a&gt;&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h2 id="svgartista">svgartista</h2>
<p><a href="https://svgartista.net/">https://svgartista.net/</a></p>
<p>svg动画制作网站</p>
<p><img loading="lazy" src="img/svgartista.png" alt=""  />
</p>
<br>
<h2 id="rawgraphs">rawgraphs</h2>
<p><img loading="lazy" src="img/19-svg-generators.png" alt=""  />
</p>
<p><a href="https://app.rawgraphs.io/">https://app.rawgraphs.io/</a></p>
<p>免费制作炫酷的可视化图表，在底层，该工具使用 D3.js(一个出色的 JavaScript 可视化库)，可数据进行可视化。</p>
<p><img loading="lazy" src="img/intro-rawgraphs-small.mp4" alt=""  />
</p>
<p>RAWGraphs 团队提供了一系列关于如何使用该工具的视频教程。</p>
<br>
<h2 id="jiffyreader">jiffyreader</h2>
<p><a href="https://www.jiffyreader.com/">https://www.jiffyreader.com/</a></p>
<p>通过对单词局部位置加粗，让读者更好更快阅读英文。安装该插件后，理论上能让大脑处理速度加快10+倍。</p>
<p><img loading="lazy" src="img/jiffyreader1.png" alt=""  />
</p>
<p><img loading="lazy" src="img/jiffyreader2.png" alt=""  />
</p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>TechWeekly-17 每周有趣有用的技术分享</title>
      <link>https://hidadeng.github.io/blog/techweekly17/</link>
      <pubDate>Wed, 25 May 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/techweekly17/</guid>
      <description>&lt;h2 id=&#34;朋友圈转发截图生成工具&#34;&gt;朋友圈转发截图生成工具&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://akarin.dev/WechatMomentScreenshot/&#34;&gt;点击这里使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本工具仅可用于个人应付各类强制要求转发朋友圈的情形，请不要用于以下用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将生成的截图用于造谣诽谤、微商宣传等非法或令人反感的用途&lt;/li&gt;
&lt;li&gt;使用各种方式大量批量生成截图&lt;/li&gt;
&lt;li&gt;将源代码或生成的截图有偿售卖&lt;/li&gt;
&lt;li&gt;以 “关注○○，发送○○获取工具地址” 等方式为自己的公众号引流（想要推荐的话，在正文里留下地址或二维码之类的就没问题～）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/wechat.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;这个小工具是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个因为不喜欢也不想往朋友圈发某些不得不发的废文而做出来的摸鱼产物。&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;生成的截图中，文字部分能否出现表情符号？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微信中除 Emoji 之外的其它表情符号实际上是特定的文本，复制后粘贴到别处时就可以看到，在微信中则显示为表情符号。&lt;/p&gt;
&lt;p&gt;比如这个表情，从简体中文版微信中发送的实际上是[再见]，繁体中文是[再見]，英文是[Bye]。即使不选择表情符号而是手动输入[再见]、[再見]或[Bye]（任选一个输入即可，和微信的语言设置无关），发送后它们都会显示为。&lt;/p&gt;
&lt;p&gt;在这个小工具的“正文”处输入表情符号对应的文本，生成截图时也会被替换成对应的表情符号～&lt;/p&gt;
&lt;p&gt;目前仅支持简体中文、繁体中文、英文版微信的表情文本。从使用其他语言的微信发送一条带有表情的消息然后复制到这里，生成的截图中不一定会出现对应的表情符号。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;cleanmywechat&#34;&gt;CleanMyWechat&lt;/h2&gt;
&lt;p&gt;自动删除 PC 端微信自动下载的大量文件、视频、图片等数据内容，解放一年几十 G 的空间占用。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/%e7%8e%b0%e7%8a%b6.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;该工具不会删除文字的聊天记录，请放心使用。请给个 &lt;strong&gt;Star&lt;/strong&gt; 吧，非常感谢！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现已经支持 Windows 系统中的所有微信版本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/blackboxo/CleanMyWechat&#34;&gt;https://github.com/blackboxo/CleanMyWechat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/run_clean_my_wechat.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;清理Mac中的微信数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时按下command+shift+G三个键， 输入&amp;amp;回车&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/%e7%8e%b0%e7%8a%b62.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;在我的mac中，微信软件的缓存也达到7.42G。Mac的空间十分珍贵，直接删掉，怕以后数据比较难恢复，我采取的办法是转移至移动硬盘。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;正则表达式解析&#34;&gt;正则表达式解析&lt;/h2&gt;
&lt;p&gt;可以测试正则表达式匹配效果，而且将表达式匹配功能以流程图的方式展示出来，对初学regex的小白非常友好。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://devtoolcafe.com/tools/regex#!flags=img&amp;amp;re=&#34;&gt;https://devtoolcafe.com/tools/regex#!flags=img&amp;amp;re=&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/devtoolcafe.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;b站视频下载&#34;&gt;B站视频下载&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/leiurayer/downkyi&#34;&gt;https://github.com/leiurayer/downkyi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;哔哩下载姬（DownKyi）是一个简单易用的哔哩哔哩视频下载工具，具有简洁的界面，流畅的操作逻辑。哔哩下载姬可以下载几乎所有的B站视频，并输出mp4格式的文件；采用Aria下载器多线程下载，采用FFmpeg对视频进行混流、提取音视频等操作。目前&lt;strong&gt;仅支持Win&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持二维码登录&lt;/li&gt;
&lt;li&gt;支持视频、番剧、剧集、电影、课程下载&lt;/li&gt;
&lt;li&gt;支持8K、4K、HDR、杜比视界、杜比全景声下载&lt;/li&gt;
&lt;li&gt;支持用户收藏夹、订阅、稍后再看、历史记录下载&lt;/li&gt;
&lt;li&gt;支持弹幕下载、样式设置&lt;/li&gt;
&lt;li&gt;支持字幕下载&lt;/li&gt;
&lt;li&gt;支持封面下载&lt;/li&gt;
&lt;li&gt;支持自定义文件命名&lt;/li&gt;
&lt;li&gt;支持断点续传&lt;/li&gt;
&lt;li&gt;支持Aria2c&lt;/li&gt;
&lt;li&gt;支持下载历史记录保存&lt;/li&gt;
&lt;li&gt;支持av、BV互转&lt;/li&gt;
&lt;li&gt;支持弹幕发送者查询&lt;/li&gt;
&lt;li&gt;支持音视频分离&lt;/li&gt;
&lt;li&gt;支持去水印&lt;/li&gt;
&lt;li&gt;支持检查更新&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;musicn&#34;&gt;Musicn&lt;/h2&gt;
&lt;p&gt;🎵 一个下载高品质音乐的命令行工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zonemeen/musicn&#34;&gt;https://github.com/zonemeen/musicn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/musicn.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;exping&#34;&gt;exping&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://exping.world/&#34;&gt;https://exping.world/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标记你的品味地图
让你的地图更有价&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;bookmark&#34;&gt;bookmark&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bookmark.style/&#34;&gt;https://www.bookmark.style/&lt;/a&gt;
将任意链接转为美观的、带二维码样式的分享卡片&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/bookmark.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;orion-浏览器httpsbrowserkagicom&#34;&gt;&lt;a href=&#34;https://browser.kagi.com/&#34;&gt;Orion 浏览器&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一种基于 Webkit 的新浏览器，只能用于 MacOS 和 iOS，但是能安装 Chrome 的插件，目前还是测试版。据说体验非常好，胜过 Safari。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/orion.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;了解课程&#34;&gt;了解课程&lt;/h2&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;figure &gt;
    &lt;a href=&#34;https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596&#34;&gt;
        &lt;img src=&#34;/images/bg/management_data_mining_with_python_course.png&#34; width=&#34;100%&#34; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;点击上方图片购买课程&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://hidadeng.github.io/blog/management_python_course/&#34;&gt;点击进入详情页&lt;/a&gt;&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h2 id="朋友圈转发截图生成工具">朋友圈转发截图生成工具</h2>
<p><a href="https://akarin.dev/WechatMomentScreenshot/">点击这里使用</a></p>
<p>本工具仅可用于个人应付各类强制要求转发朋友圈的情形，请不要用于以下用途：</p>
<ul>
<li>将生成的截图用于造谣诽谤、微商宣传等非法或令人反感的用途</li>
<li>使用各种方式大量批量生成截图</li>
<li>将源代码或生成的截图有偿售卖</li>
<li>以 “关注○○，发送○○获取工具地址” 等方式为自己的公众号引流（想要推荐的话，在正文里留下地址或二维码之类的就没问题～）</li>
</ul>
<p><img loading="lazy" src="img/wechat.png" alt=""  />
</p>
<br>
<p><strong>这个小工具是什么？</strong></p>
<p>一个因为不喜欢也不想往朋友圈发某些不得不发的废文而做出来的摸鱼产物。</p>
<br>
<p><strong>生成的截图中，文字部分能否出现表情符号？</strong></p>
<p>微信中除 Emoji 之外的其它表情符号实际上是特定的文本，复制后粘贴到别处时就可以看到，在微信中则显示为表情符号。</p>
<p>比如这个表情，从简体中文版微信中发送的实际上是[再见]，繁体中文是[再見]，英文是[Bye]。即使不选择表情符号而是手动输入[再见]、[再見]或[Bye]（任选一个输入即可，和微信的语言设置无关），发送后它们都会显示为。</p>
<p>在这个小工具的“正文”处输入表情符号对应的文本，生成截图时也会被替换成对应的表情符号～</p>
<p>目前仅支持简体中文、繁体中文、英文版微信的表情文本。从使用其他语言的微信发送一条带有表情的消息然后复制到这里，生成的截图中不一定会出现对应的表情符号。</p>
<br>
<h2 id="cleanmywechat">CleanMyWechat</h2>
<p>自动删除 PC 端微信自动下载的大量文件、视频、图片等数据内容，解放一年几十 G 的空间占用。</p>
<p><img loading="lazy" src="img/%e7%8e%b0%e7%8a%b6.png" alt=""  />
</p>
<p>该工具不会删除文字的聊天记录，请放心使用。请给个 <strong>Star</strong> 吧，非常感谢！</p>
<p><strong>现已经支持 Windows 系统中的所有微信版本。</strong></p>
<p><a href="https://github.com/blackboxo/CleanMyWechat">https://github.com/blackboxo/CleanMyWechat</a></p>
<p><img loading="lazy" src="img/run_clean_my_wechat.png" alt=""  />
</p>
<br>
<p><strong>清理Mac中的微信数据</strong></p>
<p>同时按下command+shift+G三个键， 输入&amp;回车</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat
</code></pre></div><p><img loading="lazy" src="img/%e7%8e%b0%e7%8a%b62.png" alt=""  />
</p>
<p>在我的mac中，微信软件的缓存也达到7.42G。Mac的空间十分珍贵，直接删掉，怕以后数据比较难恢复，我采取的办法是转移至移动硬盘。</p>
<br>
<h2 id="正则表达式解析">正则表达式解析</h2>
<p>可以测试正则表达式匹配效果，而且将表达式匹配功能以流程图的方式展示出来，对初学regex的小白非常友好。</p>
<p><a href="https://devtoolcafe.com/tools/regex#!flags=img&amp;re=">https://devtoolcafe.com/tools/regex#!flags=img&amp;re=</a></p>
<p><img loading="lazy" src="img/devtoolcafe.png" alt=""  />
</p>
<br>
<h2 id="b站视频下载">B站视频下载</h2>
<p><a href="https://github.com/leiurayer/downkyi">https://github.com/leiurayer/downkyi</a></p>
<p>哔哩下载姬（DownKyi）是一个简单易用的哔哩哔哩视频下载工具，具有简洁的界面，流畅的操作逻辑。哔哩下载姬可以下载几乎所有的B站视频，并输出mp4格式的文件；采用Aria下载器多线程下载，采用FFmpeg对视频进行混流、提取音视频等操作。目前<strong>仅支持Win</strong></p>
<ul>
<li>支持二维码登录</li>
<li>支持视频、番剧、剧集、电影、课程下载</li>
<li>支持8K、4K、HDR、杜比视界、杜比全景声下载</li>
<li>支持用户收藏夹、订阅、稍后再看、历史记录下载</li>
<li>支持弹幕下载、样式设置</li>
<li>支持字幕下载</li>
<li>支持封面下载</li>
<li>支持自定义文件命名</li>
<li>支持断点续传</li>
<li>支持Aria2c</li>
<li>支持下载历史记录保存</li>
<li>支持av、BV互转</li>
<li>支持弹幕发送者查询</li>
<li>支持音视频分离</li>
<li>支持去水印</li>
<li>支持检查更新</li>
</ul>
<br>
<h2 id="musicn">Musicn</h2>
<p>🎵 一个下载高品质音乐的命令行工具</p>
<p><a href="https://github.com/zonemeen/musicn">https://github.com/zonemeen/musicn</a></p>
<p><img loading="lazy" src="img/musicn.gif" alt=""  />
</p>
<h2 id="exping">exping</h2>
<p><a href="https://exping.world/">https://exping.world/</a></p>
<p>标记你的品味地图
让你的地图更有价</p>
<br>
<h2 id="bookmark">bookmark</h2>
<p><a href="https://www.bookmark.style/">https://www.bookmark.style/</a>
将任意链接转为美观的、带二维码样式的分享卡片</p>
<p><img loading="lazy" src="img/bookmark.png" alt=""  />
</p>
<br>
<h2 id="orion-浏览器httpsbrowserkagicom"><a href="https://browser.kagi.com/">Orion 浏览器</a></h2>
<p>一种基于 Webkit 的新浏览器，只能用于 MacOS 和 iOS，但是能安装 Chrome 的插件，目前还是测试版。据说体验非常好，胜过 Safari。</p>
<p><img loading="lazy" src="img/orion.png" alt=""  />
</p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyEcharts库 | 绘制社交关系网络图</title>
      <link>https://hidadeng.github.io/blog/pyecharts_graph_vis/</link>
      <pubDate>Sat, 07 May 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/pyecharts_graph_vis/</guid>
      <description>使用pyecharts绘制社交关系网络图</description>
      <content:encoded><![CDATA[<p>使用pyecharts绘制社交网络关系图，直接上代码。</p>
<h2 id="代码">代码</h2>
<p><a href="pyecharts_graph_vis_code.zip">点击下载代码</a></p>
<br>
<h2 id="base">base</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点1&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点2&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点3&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">30</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点4&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">40</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点5&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">50</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点6&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">40</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点7&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">30</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点8&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">},</span>
<span class="p">]</span>
<span class="n">links</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
        <span class="n">links</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">i</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">),</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">j</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">)})</span>

        
<span class="p">(</span>
    <span class="n">Graph</span><span class="p">()</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">links</span><span class="p">,</span> <span class="n">repulsion</span><span class="o">=</span><span class="mi">8000</span><span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Graph-基本示例&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;graph_base.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="graph_base.html">graph_base</a></p>
<p><img loading="lazy" src="img/base.png" alt=""  />
</p>
<br>
<h2 id="weibo">weibo</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/weibo.json&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">nodes</span><span class="p">,</span> <span class="n">links</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">cont</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">userl</span> <span class="o">=</span> <span class="n">j</span>


<span class="p">(</span>
    <span class="n">Graph</span><span class="p">()</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="p">,</span>
        <span class="n">links</span><span class="p">,</span>
        <span class="n">categories</span><span class="p">,</span>
        <span class="n">repulsion</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">curve</span><span class="o">=</span><span class="mf">0.2</span><span class="p">),</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Graph-微博转发关系图&#34;</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;graph_weibo.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="graph_weibo.html">graph_weibo</a></p>
<p><img loading="lazy" src="img/weibo.png" alt=""  />
</p>
<br>
<h2 id="npm">npm</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">Gallery 使用 pyecharts 1.1.0
</span><span class="s2">参考地址: https://echarts.apache.org/examples/editor.html?c=graph-npm
</span><span class="s2">
</span><span class="s2">目前无法实现的功能:
</span><span class="s2">
</span><span class="s2">1、暂无
</span><span class="s2">&#34;&#34;&#34;</span>




<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/npmdepgraph.min10.json&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>

    
<span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s2">&#34;x&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;x&#34;</span><span class="p">],</span>
        <span class="s2">&#34;y&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">],</span>
        <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;id&#34;</span><span class="p">],</span>
        <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;label&#34;</span><span class="p">],</span>
        <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;size&#34;</span><span class="p">],</span>
        <span class="s2">&#34;itemStyle&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;normal&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;color&#34;</span><span class="p">]}},</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s2">&#34;nodes&#34;</span><span class="p">]</span>
<span class="p">]</span>

<span class="n">edges</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">edge</span><span class="p">[</span><span class="s2">&#34;sourceID&#34;</span><span class="p">],</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">edge</span><span class="p">[</span><span class="s2">&#34;targetID&#34;</span><span class="p">]}</span> <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s2">&#34;edges&#34;</span><span class="p">]</span>
<span class="p">]</span>



<span class="p">(</span>
    <span class="n">Graph</span><span class="p">(</span><span class="n">init_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">InitOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="s2">&#34;1600px&#34;</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="s2">&#34;800px&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="o">=</span><span class="n">nodes</span><span class="p">,</span>
        <span class="n">links</span><span class="o">=</span><span class="n">edges</span><span class="p">,</span>
        <span class="n">layout</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span>
        <span class="n">is_roam</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">is_focusnode</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">curve</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;NPM Dependencies&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;npm_dependencies.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="npm_dependencies.html">npm_dependencies</a></p>
<p><img loading="lazy" src="img/npm.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TransBigData库 | 出租车GPS数据处理</title>
      <link>https://hidadeng.github.io/blog/trans_big_data_examples_taxi_data/</link>
      <pubDate>Thu, 28 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/trans_big_data_examples_taxi_data/</guid>
      <description>地理信息数据处理包TransBigData</description>
      <content:encoded><![CDATA[<h2 id="taxi-gps数据处理">Taxi GPS数据处理</h2>
<p>B站-同济小旭学长</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1na411i7sd&page=3"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="taxi_code_trans_big_data.zip">download the code</a></p>
<br>
<p>在这个例子中，我们将介绍如何使用 TransBigData 包来高效处理 Taxi GPS 数据。首先，导入 TransBigData 并使用 pandas 读取数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">mapclassify</span><span class="o">==</span><span class="mf">2.4.3</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">transbigdata</span><span class="o">==</span><span class="mf">0.4.7</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">keplergl</span><span class="o">==</span><span class="mf">0.3.2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">transbigdata</span> <span class="k">as</span> <span class="nn">tbd</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="c1"># Read data</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/TaxiData-Sample.csv&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
<span class="n">data</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">,</span> <span class="s1">&#39;Speed&#39;</span><span class="p">]</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Read the GeoDataFrame of the study area</span>
<span class="n">sz</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;data/sz.json&#39;</span><span class="p">)</span>
<span class="n">sz</span><span class="o">.</span><span class="n">crs</span> <span class="o">=</span> <span class="kc">None</span>
<span class="n">sz</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> 
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">sz</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">);</span>
</code></pre></div><p><img loading="lazy" src="img/output_4_0.png" alt="png"  />
</p>
<br>
<h2 id="数据预处理">数据预处理</h2>
<p>TransBigData 集成了几种常用的数据预处理方法。 使用<code>tbd.clean_outofshape</code>方法，给定研究区域的数据和GeoDataFrame，可以删除研究区域外的数据。 <code>tbd.clean_taxi_status</code> 方法可以过滤掉乘客状态（OpenStatus）瞬时变化的数据。 使用预处理方式时，需要将对应的列名作为参数传入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Data Preprocessing</span>
<span class="c1"># Delete the data outside of the study area</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">clean_outofshape</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">sz</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">],</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>

<span class="c1"># Delete the data with instantaneous changes in passenger status</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">clean_taxi_status</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
</code></pre></div><br>
<h2 id="数据网格化">数据网格化</h2>
<p>数据分布最基本的表达方式是地理网格的形式；</p>
<p>数据网格化后，每个 GPS 数据点映射到相应的网格。 对于数据网格化，首先需要确定网格化参数（可以理解为定义一个网格坐标系）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 数据网格化</span>
<span class="c1"># 定义边界并生成网格参数（经纬度）</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">[</span><span class="mf">113.6</span><span class="p">,</span> <span class="mf">22.4</span><span class="p">,</span> <span class="mf">114.8</span><span class="p">,</span> <span class="mf">22.9</span><span class="p">]</span>
<span class="n">params</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">area_to_params</span><span class="p">(</span><span class="n">bounds</span><span class="p">,</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</code></pre></div><pre><code>{'slon': 113.6, 'slat': 22.4, 'deltalon': 0.004872390756896538, 'deltalat': 0.004496605206422906, 'theta': 0, 'method': 'rect', 'gridsize': 500}
</code></pre>
<p>获得网格化参数后，下一步就是将 GPS 映射到其对应的网格上。</p>
<p>使用 <code>tbd.GPS_to_grids</code>，它将生成 <code>LONCOL</code> 列和 <code>LATCOL</code> 列。 两列一起可以指定一个网格：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Mapping GPS data to grids</span>
<span class="n">data</span><span class="p">[</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;LATCOL&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">GPS_to_grid</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Lng&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Lat&#39;</span><span class="p">],</span> <span class="n">params</span><span class="p">)</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df3.png" alt="png"  />
</p>
<p>计算每个网格中的数据量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Aggregate data into grids</span>
<span class="n">datatest</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">,</span> <span class="s1">&#39;LATCOL&#39;</span><span class="p">])[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df4.png" alt="png"  />
</p>
<p>将生成网格的geometry并将其转换为 GeoDataFrame</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Generate the geometry for grids</span>
<span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">grid_to_polygon</span><span class="p">([</span><span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">],</span> <span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;LATCOL&#39;</span><span class="p">]],</span> <span class="n">params</span><span class="p">)</span>

<span class="c1"># Change it into GeoDataFrame</span>
<span class="c1"># import geopandas as gpd</span>
<span class="n">datatest</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">GeoDataFrame</span><span class="p">(</span><span class="n">datatest</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df5.png" alt="png"  />
</p>
<p>绘制生成的网格：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span> 
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>

<span class="c1"># tbd.plot_map(plt, bounds, zoom=10, style=4)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_16_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="c1"># plt.legend(fontsize=10)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_17_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;OrRd&#39;</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="c1"># plt.legend(fontsize=10)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_18_0.png" alt="png"  />

​</p>
<br>
<h2 id="origin-destinationod-提取和汇总出租车行程">Origin-destination(OD) 提取和汇总出租车行程</h2>
<p>使用 <code>tbd.taxigps_to_od</code> 方法并传入对应的列名来提取出租车行程 OD：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Extract taxi OD from GPS data</span>
<span class="n">oddata</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">taxigps_to_od</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">col</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
<span class="n">oddata</span>
</code></pre></div><p><img loading="lazy" src="img/df6.png" alt="png"  />
</p>
<p>聚合提取的 OD 并生成 LineString GeoDataFrame</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Gridding and aggragate data</span>
<span class="n">od_gdf</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">odagg_grid</span><span class="p">(</span><span class="n">oddata</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df7.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="c1"># data_grid_count.plot(ax=ax1, column=&#39;VehicleNum&#39;, legend=True, cmap=&#39;OrRd&#39;, scheme=&#39;quantiles&#39;)</span>

<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD Trips&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_23_0.png" alt="png"  />

​</p>
<br>
<h2 id="将-od-聚合成多边形">将 OD 聚合成多边形</h2>
<p><code>TransBigData</code> 还提供了将 OD 聚合成多边形的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Aggragate OD data to polygons </span>
<span class="c1"># without passing gridding parameters, the algorithm will map the data </span>
<span class="c1"># to polygons directly using their coordinates</span>
<span class="n">od_gdf</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">odagg_shape</span><span class="p">(</span><span class="n">oddata</span><span class="p">,</span> <span class="n">sz</span><span class="p">,</span> <span class="n">round_accuracy</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD Trips&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p><img loading="lazy" src="img/output_25_0.png" alt="png"  />
</p>
<br>
<h2 id="基于-matplotlib-的地图绘制">基于 Matplotlib 的地图绘制</h2>
<p><code>TransBigData</code> 还在 matplotlib 中提供底图加载。 在使用此方法之前，您需要设置您的 mapboxtoken 和底图的存储位置，请参见：<a href="https://transbigdata.readthedocs.io/en/latest/plot_map.html">此链接</a>。<code>tbd.plot_map</code> 添加底图和 tbd.plotscale 以添加比例和指南针：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Create figure</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">sca</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span>

<span class="c1"># Load basemap</span>
<span class="n">tbd</span><span class="o">.</span><span class="n">plot_map</span><span class="p">(</span><span class="n">plt</span><span class="p">,</span> <span class="n">bounds</span><span class="p">,</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

<span class="c1"># Define an ax for colorbar</span>
<span class="n">cax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">axes</span><span class="p">([</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.33</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD</span><span class="se">\n</span><span class="s1">Matrix&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">sca</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span>

<span class="c1"># Plot the OD</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span> <span class="n">cax</span><span class="o">=</span><span class="n">cax</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># Plot the polygons</span>
<span class="n">sz</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">facecolor</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">),</span> <span class="n">linewidths</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># Add compass and scale</span>
<span class="n">tbd</span><span class="o">.</span><span class="n">plotscale</span><span class="p">(</span><span class="n">ax</span><span class="p">,</span> <span class="n">bounds</span><span class="o">=</span><span class="n">bounds</span><span class="p">,</span> <span class="n">textsize</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">compasssize</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">2000</span><span class="p">,</span> <span class="n">rect</span><span class="o">=</span><span class="p">[</span><span class="mf">0.06</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">bounds</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">bounds</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_27_0.png" alt="png"  />

​</p>
<br>
## 提取出租车轨迹
使用`the.taxigps_traj_point`方法，输入GPS数据和OD数据，可以提取轨迹点
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data_deliver</span><span class="p">,</span> <span class="n">data_idle</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">taxigps_traj_point</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">oddata</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Time&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
<span class="n">data_deliver</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df8.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data_idle</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df9.png" alt="png"  />
</p>
<p>生成轨迹图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">traj_deliver</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">points_to_traj</span><span class="p">(</span><span class="n">data_deliver</span><span class="p">)</span>
<span class="n">traj_deliver</span><span class="o">.</span><span class="n">plot</span><span class="p">();</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_33_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">traj_idle</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">points_to_traj</span><span class="p">(</span><span class="n">data_idle</span><span class="p">[</span><span class="n">data_idle</span><span class="p">[</span><span class="s1">&#39;OpenStatus&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">])</span>
<span class="n">traj_idle</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_34_1.png" alt="png"  />

​</p>
<br>
<h2 id="轨迹可视化trajectories-visualization">轨迹可视化Trajectories visualization</h2>
<p><code>TransBigData</code> 的内置可视化功能利用了可视化包 <code>keplergl</code> ，使用简单代码即可在 Jupyter notebook 上交互式地显示轨迹数据。</p>
<p>要使用此方法，请为 python 安装 <code>keplergl</code> 包：</p>
<blockquote>
<p>pip3 install keplergl</p>
</blockquote>
<p>安装后，需要按照 <a href="https://transbigdata.readthedocs.io/en/latest/visualization.html">link</a> 配置jupyter notebook</p>
<p>Visualization of trajectory data:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">tbd</span><span class="o">.</span><span class="n">visualization_trip</span><span class="p">(</span><span class="n">data_deliver</span><span class="p">)</span>
</code></pre></div><pre><code>Processing trajectory data...
Generate visualization...
User Guide: https://docs.kepler.gl/docs/keplergl-jupyter
</code></pre>
<p><img loading="lazy" src="img/trajec.png" alt=""  />
</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyPlutchik库 | 可视化文本的情绪轮(情绪指纹)</title>
      <link>https://hidadeng.github.io/blog/pyplutchik_emotion_circle/</link>
      <pubDate>Sun, 03 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/pyplutchik_emotion_circle/</guid>
      <description>越来越多的社交网络学者， 为测量情绪， 基于**心理学家 Robert Plutchik** 提出的模型（通常简称为“**Plutchik轮**”，人类的情绪一共有8大类）制作了大量的情绪可视化作品。在某种程度上，Plutchik轮可以看做情绪指纹，例如不同的电影题材在8类情绪的分布是不一样的。</description>
      <content:encoded><![CDATA[<p>越来越多的社交网络学者， 为测量情绪， 基于<strong>心理学家 Robert Plutchik</strong> 提出的模型（通常简称为“<strong>Plutchik轮</strong>”，人类的情绪一共有8大类）制作了大量的情绪可视化作品。在某种程度上，Plutchik轮可以看做情绪指纹，例如不同的电影题材在8类情绪的分布是不一样的。</p>
<p><img loading="lazy" src="img/imdb_full.png" alt=""  />
</p>
<p>今天介绍 <strong>PyPlutchik</strong>，这是一个 Python 库，专门用于在文本或语料库中可视化 Plutchik 的情绪。 PyPlutchik 绘制 Plutchik 的花朵，每个情感花瓣的大小取决于语料库中检测到或注释了多少情感，也代表每个情感花瓣的三个强度程度。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install pyplutchik
</code></pre></div><br>
<h2 id="usage">Usage</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pyplutchik</span> <span class="kn">import</span> <span class="n">plutchik</span>

<span class="n">emotions</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;joy&#39;</span><span class="p">:</span> <span class="mf">0.6</span><span class="p">,</span>
            <span class="s1">&#39;trust&#39;</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
            <span class="s1">&#39;fear&#39;</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span>
            <span class="s1">&#39;surprise&#39;</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span>
            <span class="s1">&#39;sadness&#39;</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span>
            <span class="s1">&#39;disgust&#39;</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span>
            <span class="s1">&#39;anger&#39;</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
            <span class="s1">&#39;anticipation&#39;</span><span class="p">:</span> <span class="mf">0.6</span><span class="p">}</span>
            
<span class="n">plutchik</span><span class="p">(</span><span class="n">emotions</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="功能特性">功能特性</h2>
<p>PyPlutchik 提供了一个即插即用的工具，用于在文本或语料库中定量表示 Plutchik 的情绪。 它尊重 Plutchik 轮中每个花瓣的原始颜色和空间位移。</p>
<p>在 Pyplutchik 中，用户可以只传递一个字典作为唯一参数，其中字典的键必须是 8 种基本情绪。 每个值必须是 ∈ [0, 1]。</p>
<p><img loading="lazy" src="img/example01.png" alt=""  />
</p>
<br>
<p>每类情绪存在三种强度，下表是Pyplutchik的8大类情绪三种强度汇总。</p>
<p>用户还可以给每个情绪传入一个长度是3的列表，依次表示情绪在低、中、高三种强度的程度，数值0 和 1 之间。</p>
<table>
<thead>
<tr>
<th>Lower intensity</th>
<th>Emotion</th>
<th>Higher intensity</th>
</tr>
</thead>
<tbody>
<tr>
<td>Annoyance</td>
<td>Anger</td>
<td>Rage</td>
</tr>
<tr>
<td>Interest</td>
<td>Anticipation</td>
<td>Vigilance</td>
</tr>
<tr>
<td>Serenity</td>
<td>Joy</td>
<td>Ecstasy</td>
</tr>
<tr>
<td>Acceptance</td>
<td>Trust</td>
<td>Admiration</td>
</tr>
<tr>
<td>Apprehension</td>
<td>Fear</td>
<td>Terror</td>
</tr>
<tr>
<td>Distraction</td>
<td>Surprise</td>
<td>Amazement</td>
</tr>
<tr>
<td>Pensiveness</td>
<td>Sadness</td>
<td>Grief</td>
</tr>
<tr>
<td>Boredom</td>
<td>Disgust</td>
<td>Loathing</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="img/example02.png" alt=""  />
</p>
<br>
<p>PyPlutchik 也可表征用户数据中的主要二元、次要二元、二元和相反的情绪。 它会自动从字典的关键字中了解用户想要显示什么样的二元组。</p>
<p><img loading="lazy" src="img/example03.png" alt=""  />
</p>
<br>
<h2 id="绘图技巧">绘图技巧</h2>
<p>可以专注于情绪子集，不会忽视其他情绪，将情绪列表作为参数“<strong>highlight_emotions</strong>”的值传递：</p>
<p><img loading="lazy" src="img/highlight_emotions.png" alt=""  />
</p>
<p>我们可以比较同一亚马逊语料库的不同子组，将我们的可视化并排放置，并仅突出显示愤怒、厌恶和恐惧的花瓣，以轻松发现这些负面情绪在 5 星评论中的表现如何低于 1 星评论 .</p>
<p><img loading="lazy" src="img/amazon.png" alt=""  />
</p>
<br>
<p>或者可以隐藏坐标、刻度和标签，只绘制花瓣，使用参数 <code>show_coordinates = False</code> 和 <code>show_ticklabels = False</code>。下图是imdb不同电影的情绪轮</p>
<p><img loading="lazy" src="img/imdb_full.png" alt=""  />
</p>
<br>
<h2 id="查看文档">查看文档</h2>
<p>有关所有参数的文档和示例库，请参见<a href="Documentation.html">文档</a></p>
<p><a href="PyPlutchik.zip"><strong>文档下载</strong></a></p>
<p>🔥 PyPlutchik 2.0 即将推出！ 新功能包括从文本中提取情感并检查非主题词典。 敬请期待……🔥</p>
<br>
<h2 id="说明">说明</h2>
<p>如果使用PyPlutchik，请在文献中说明，格式如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Semeraro A, Vilella S, Ruffo G (2021) PyPlutchik: Visualising and comparing emotion-annotated corpora PLOS ONE 16(9):e0256503.https://doi.org/10.1371/journal.pone.0256503
</code></pre></div><br>
<h2 id="semeraro的研究">Semeraro的研究</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Semeraro, Alfonso, Salvatore Vilella, Giancarlo Ruffo, and Massimo Stella. &#34;Writing about COVID-19 vaccines: Emotional profiling unravels how mainstream and alternative press framed AstraZeneca, Pfizer and vaccination campaigns.&#34; *arXiv preprint arXiv:2201.07538* (2022).
</code></pre></div><ul>
<li><strong>摘要</strong>: 自 2020 年 11 月宣布 COVID-19 疫苗以来，媒体和社交媒体对 COVID-19 疫苗进行了大量辩论。由于大多数研究都集中在社交媒体中的 COVID-19 虚假信息上，与其他来源相比，主流新闻媒体如何构建 COVID-19 叙述很少受到关注。为了填补这一空白，我们使用认知网络科学和自然语言处理来重建 5745 条关于 COVID-19 疫苗的新闻的随时间变化的语义和情感框架。我们的数据集涵盖了 8 个月内的 17 个网点，其中包括在 Facebook（500 万总股数）和 Twitter（20 万股总股数）上大量转发的意大利新闻文章。我们发现主流消息来源构建“疫苗/疫苗”的总体概念的方式始终具有高度的信任/预期和较少的厌恶。在替代来源构建 COVID-19 疫苗的方式中，这些情绪严重缺失。在疫苗的特定实例中发现了更多差异。另类新闻包括以强烈的悲伤来描述阿斯利康疫苗的标题，而主流标题中没有。与“阿斯利康”相比，主流新闻最初将“辉瑞”与副作用（例如“过敏”、“反应”、“发烧”）相关联更多。随着后一种疫苗的暂停，在 2021 年 3 月 15 日，我们发现了一种语义/情感转变：即使是主流文章标题都将“阿斯利康”框定为在语义上更丰富与副作用的负面关联，而“辉瑞”则经历了积极的效价转变，主要与其更高的效率有关。血栓形成与可怕的概念联想一起进入了疫苗的框架，而死亡这个词经历了情感转变，在替代标题中转向恐惧，在主流标题中失去了希望的内涵，缺乏预期。我们的发现揭示了媒体采用的围绕 COVID-19 疫苗的情感叙述的关键方面，强调了了解替代媒体和主流媒体如何报道疫苗接种新闻的必要性。</li>
<li><strong>Keywords</strong>: natural language processing, text analysis, complex networks, cognitive network science, COVID-19, COVID-19 vaccines
<img loading="lazy" src="img/figure2.png" alt=""  />

<img loading="lazy" src="img/figure3.png" alt=""  />

<img loading="lazy" src="img/figure4.png" alt=""  />
</li>
</ul>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bloxs包 | 可在notebook中使用的交互可视化包</title>
      <link>https://hidadeng.github.io/blog/bloxs_interactive_visualization/</link>
      <pubDate>Fri, 01 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/bloxs_interactive_visualization/</guid>
      <description>Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。</description>
      <content:encoded><![CDATA[<p>Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。</p>
<p>它适用于：Jupyter Notebook、Google Colab、Deepnote、Kaggle Notebook、<a href="https://github.com/mljar/mercury">Mercury</a>。</p>
<p><img loading="lazy" src="img/bloxs_demo.gif" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install bloxs
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">from bloxs import B
B(1234, &#34;Bloxs in notebook!&#34;)
</code></pre></div><p><img loading="lazy" src="img/test_bloxs.png" alt=""  />
</p>
<br>
<h2 id="案例">案例</h2>
<table>
<thead>
<tr>
<th>Bloxs</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td><img loading="lazy" src="img/number.png" alt=""  />
</td>
<td><code>B(1234, &quot;Bloxs in notebook!&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/percent.png" alt=""  />
</td>
<td><code>B(1999, &quot;Percent change!&quot;, percent_change=10)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/emojis.png" alt=""  />
</td>
<td><code>B(&quot;🎉🎉🎉&quot;, &quot;Works with emojis&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/progress.png" alt=""  />
</td>
<td><code>B(&quot;68%&quot;, &quot;Loading progress&quot;, progress=68)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/progress_color.png" alt=""  />
</td>
<td><code>B(&quot;68%&quot;, &quot;Loading progress&quot;, progress=68, color=&quot;green&quot;)</code> 颜色color参数可以设为&quot;blue&quot;, &ldquo;red&rdquo;, &ldquo;green&rdquo; 或十六进制表示 (例如&quot;#fa33fa&quot;)</td>
</tr>
<tr>
<td><img loading="lazy" src="img/line_chart.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display line chart&quot;, points=[1,4,2,3,5,6])</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/line_chart_color.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display line chart&quot;, points=[1,4,2,3,5,6], color=&quot;red&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/stepped.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display stepped chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;stepped&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/bar_chart.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display bar chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;bar&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/bar_chart_color.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display bar chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;bar&quot;, color=&quot;green&quot;)</code></td>
</tr>
</tbody>
</table>
<br>
<p>可以在一行内整合多个图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">B([
    B(1999, &#34;Percent change!&#34;, percent_change=10),
    B(&#34;🎉🎉🎉&#34;, &#34;Works with emojis&#34;),
    B(&#34;68%&#34;, &#34;Loading progress&#34;, progress=68),
    B(1234, &#34;Bloxs in notebook!&#34;)
])
</code></pre></div><p><img loading="lazy" src="img/several_bloxs_2.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">B([
    B(&#34;786&#34;, &#34;Display bar chart&#34;, points=[1,4,2,3,5,6], chart_type=&#34;bar&#34;, color=&#34;green&#34;),
    B(&#34;123&#34;, &#34;Display line chart&#34;, points=[1,4,2,3,5,6], color=&#34;red&#34;),
    B(&#34;123&#34;, &#34;Display stepped chart&#34;, points=[1,4,2,3,5,6], chart_type=&#34;stepped&#34;)
])
</code></pre></div><p><img loading="lazy" src="img/several_bloxs.png" alt=""  />
</p>
<br>
<p>如果想在自己电脑中实验上述代码，可以点击 <a href="https://deepnote.com/project/bloxs-ZNGnsap0R7ea8LeZY0uarQ/%2Fnotebook.ipynb">notebook</a> 下载。</p>
<br>
<h2 id="结合mercury用bloxs">结合Mercury用Bloxs</h2>
<p><a href="https://github.com/mljar/mercury">Mercury</a> 是一个用于将笔记本转换为交互式网络应用程序的框架。 它基于 YAML 配置将小部件添加到笔记本中。 下面展示了一个带有 bloxs 的笔记本，以及作为 Mercury 的 Web 应用程序的同一笔记本。</p>
<p><img loading="lazy" src="img/bloxs_notebook.gif" alt=""  />
</p>
<br>
<h2 id="mercury网页应用">Mercury网页应用</h2>
<p><a href="https://mercury.mljar.com/app/5">Demo</a></p>
<p><img loading="lazy" src="img/bloxs_mercury.gif" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TechWeekly-16 每周有趣有用的技术分享</title>
      <link>https://hidadeng.github.io/blog/techweekly16/</link>
      <pubDate>Fri, 01 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/techweekly16/</guid>
      <description>本期TechWeekly主要是一些css、js类项目，可以起到点缀网站的效果。</description>
      <content:encoded><![CDATA[<p>本期TechWeekly主要是一些css、js类项目，可以起到点缀网站的效果。</p>
<p>建议大家如果有时间，可以了解下html/css，很简单的。如果使用Hugo这类建站框架，可以自己修改下字体颜色，以符合自己的审美。以后会考虑在这个博客站点中用到，于是整理出来本期TechWeekly。</p>
<br>
<h2 id="animatecss">Animate.css</h2>
<p><a href="https://animate.style/">https://animate.style/</a></p>
<p>CSS网页动画库</p>
<div style="text-align: center;">
<figure >
    <a href="https://animate.style/">
        <img src="img/animate.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问Animate网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="tabler">Tabler</h2>
<p><a href="https://github.com/tabler/tabler">https://github.com/tabler/tabler</a></p>
<p>Tabler 是基于 Bootstrap 构建的免费开源 HTML Dashboard UI Kit</p>
<div style="text-align: center;">
<figure >
    <a href="https://preview.tabler.io/">
        <img src="img/tabler.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问tabler网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="flowbite">Flowbite</h2>
<p><a href="https://github.com/themesberg/flowbite">https://github.com/themesberg/flowbite</a></p>
<p>使用 Tailwind CSS 构建的最受欢迎的交互式 UI 组件库</p>
<div style="text-align: center;">
<figure >
    <a href="https://flowbite.com/">
        <img src="img/flowbite.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问flowbite网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="sheetjs">SheetJs</h2>
<p><a href="https://github.com/SheetJS/sheetjs">https://github.com/SheetJS/sheetjs</a></p>
<ul>
<li>
<p>简化的电子表格</p>
</li>
<li>
<p>阅读、编辑和导出电子表格</p>
</li>
<li>
<p>适用于网络浏览器和服务器，</p>
</li>
<li>
<p>在 Office 365 中受 Microsoft 信任</p>
</li>
</ul>
<div style="text-align: center;">
<figure >
    <a href="https://sheetjs.com/">
        <img src="img/sheetjs.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="d3">D3</h2>
<p><a href="https://github.com/d3/d3">https://github.com/d3/d3</a></p>
<p>D3.js 是一个 JavaScript 可视化库。 D3 能使 HTML、SVG 和 CSS 等文件将数据可视化变为现实。</p>
<div style="text-align: center;">
<figure >
    <a href="https://d3js.org/">
        <img src="img/d3.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问网站</i></small></figcaption>
</figure>
</div>
<p>下面是D3制作的样例</p>
<div style="text-align: center;">
<figure >
    <a href="https://observablehq.com/@d3/gallery">
        <img src="img/d31.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问D3的Gallery</i></small></figcaption>
</figure>
</div>
<div style="text-align: center;">
<figure >
    <a href="https://observablehq.com/@d3/gallery">
        <img src="img/d32.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问D3的Gallery</i></small></figcaption>
</figure>
</div>
<div style="text-align: center;">
<figure >
    <a href="https://observablehq.com/@d3/gallery">
        <img src="img/d33.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问D3的Gallery</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="budibase">budibase</h2>
<p><a href="https://github.com/Budibase/budibase">https://github.com/Budibase/budibase</a></p>
<p>在几分钟内构建组织内网的应用程序，支持Supports PostgreSQL, MySQL, MSSQL, MongoDB, Rest API, Docker, K8s</p>
<div style="text-align: center;">
<figure >
    <a href="https://budibase.com/">
        <img src="img/budibase.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问budibase网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="vitae">vitae</h2>
<p><a href="https://pkg.mitchelloharawild.com/vitae/">https://pkg.mitchelloharawild.com/vitae/</a></p>
<p>使用Rmarkdown制作个人简历</p>
<div style="text-align: center;">
<figure >
    <a href="https://pkg.mitchelloharawild.com/vitae/">
        <img src="img/vitae.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问budibase网站</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="nextra">nextra</h2>
<p><a href="https://github.com/shuding/nextra">https://github.com/shuding/nextra</a></p>
<p>Nextra 是一个 Next.js 和 MDX 驱动的无代码站点生成器。1分钟即可制作出下图的静态网站。</p>
<div style="text-align: center;">
<figure >
    <a href="https://nextra.vercel.app/">
        <img src="img/nextra.png" width="100%" />
    </a>
    <figcaption><small><i>点击图片访问nextra网站</i></small></figcaption>
</figure>
</div>
<br>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>streamlit|任务周期表生成器</title>
      <link>https://hidadeng.github.io/blog/periodic-table-creator/</link>
      <pubDate>Tue, 29 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/periodic-table-creator/</guid>
      <description>这个周期表生成器的想法是创建一个关于 自然语言处理任务周期表的博客。 在 Streamlit 的帮助下并受到此 Bokeh的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1mu411i7Jv&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<p>这个<strong>周期表生成器</strong>的想法是创建一个关于 <a href="https://www.innerdoc.com/periodic-table-of-nlp-tasks/">自然语言处理任务周期表</a> 的博客。 在 Streamlit 的帮助下并受到此 Bokeh <a href="https://docs.bokeh.org/en/latest/docs/gallery/periodic.html">图库示例</a> 的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！</p>
<p>大邓的作用仅仅是将其汉化，没有做布局上的新创新。</p>
<br>
<h2 id="下载">下载</h2>
<p>点击下载<a href="periodic-table-creator.zip"><strong>periodic-table-creator</strong></a>项目压缩文件夹</p>
<br>
<p>下面是自定义的<strong>任务周期表</strong>示例。 在这种情况下：对于自然语言处理任务！</p>
<p><img loading="lazy" src="img/periodic-table-generator-customize-content.png" alt="alt text"  />
</p>
<br>
<h2 id="安装运行">安装&amp;运行</h2>
<p>打开命令行(终端),</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install streamlit==1.8.1
pip3 install bokeh==2.4.1


#切换至项目文件夹periodic-table-creator
cd periodic-table-creator

#运行streamlit
streamlit run periodic_table_creator.py
</code></pre></div><p>此时在命令行中会出现</p>
<p><img loading="lazy" src="img/terminal.png" alt=""  />
</p>
<p>点击<strong>Local URL</strong>对应的链接，或者将该链接复制粘贴到浏览器，即可访问。</p>
<p><img loading="lazy" src="img/firstrun.png" alt=""  />
</p>
<br>
<h2 id="导入数据">导入数据</h2>
<p>创建自己特有的<strong>任务周期表</strong>需要导入自由的csv数据。可以[点击这里] (periodic-table-creator/periodic_nlp.csv) 下载并查看数据格式，或者运行案例时， 点击按钮&quot;Edit CSV text&quot; 查看示例数据格式。</p>
<ul>
<li>表的字符名(列名): <code>atomicnumber;group;period;symbol;elementname;groupname;color;url;excerpt</code></li>
<li>csv文件的分隔符使用英文格式下的 <code>;</code>或<code>,</code></li>
<li>csv文件使用utf-8编码</li>
</ul>
<p><img loading="lazy" src="img/periodic-table-generator-load-content.png" alt=""  />
</p>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用streamlit制作自然语言处理发展时间线页面</title>
      <link>https://hidadeng.github.io/blog/nlp-history-timeline/</link>
      <pubDate>Sun, 27 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/nlp-history-timeline/</guid>
      <description>使用streamlit制作自然语言处理发展时间线页面</description>
      <content:encoded><![CDATA[<h2 id="说明">说明</h2>
<p>这个案例使用<a href="https://streamlit.io">Streamlit</a> 和 <a href="http://timeline.knightlab.com/">TimelineJS</a> 制作， 通过时间线方式展示自然语言处理领域发展。大家可以将其改造为公司发展时间线、人生里程碑时间线等等。</p>
<br>
<h2 id="下载运行">下载&amp;运行</h2>
<ul>
<li><a href="nlp-history-timeline.zip">点击此处下载代码</a>   <a href="https://hidadeng.github.io/blog/nlp-history-timeline/nlp-history-timeline.zip">https://hidadeng.github.io/blog/nlp-history-timeline/nlp-history-timeline.zip</a></li>
<li>解压nlp-history-timeline.zip文件夹，放置于<strong>桌面</strong></li>
<li>打开命令行(终端)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#切换到nlp-history-timeline
cd nlp-history-timeline

#安装需要的包
pip3 install -r requirements.txt

#运行timeline_app.py
streamlit run timeline_app.py
</code></pre></div><br>
<h2 id="使用方式">使用方式</h2>
<ul>
<li><a href="https://www.innerdoc.com/nlp-timeline-demo/">点击打开案例网站</a></li>
</ul>
<p>下面是网页的一个时间点</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/demo-timeline.png" width="100%" />
    
    <figcaption><small><i>自然语言处理发展时间线</i></small></figcaption>
</figure>
</div>
<br>
<p>你也可以浏览的原始数据文件，格式为json。下图可以看到json的是由</p>
<ul>
<li>36个字典，即36个时间点</li>
<li>每个字典中有很多字段，如url图片链接、headline、year年份、text简介等。</li>
</ul>
<div style="text-align: center;">
<figure >
    
        <img src="img/demo-data.png" width="100%" />
    
    <figcaption><small><i>时间线案例数据</i></small></figcaption>
</figure>
</div>
<br>
<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用altair绘制漂亮的股票价格趋势图</title>
      <link>https://hidadeng.github.io/blog/time-series-annotation/</link>
      <pubDate>Sun, 27 Mar 2022 10:42:10 +0600</pubDate>
      
      <guid>/blog/time-series-annotation/</guid>
      <description>使用altair绘制漂亮的股票价格趋势图</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://share.streamlit.io/streamlit/example-app-time-series-annotation/main">
        <img src="img/stockevolution.svg" width="100%" />
    </a>
    <figcaption><small><i>点击</i></small></figcaption>
</figure>
</div>
<p>使用altair绘制漂亮的股票价格趋势图, 直接上代码。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">altair</span>
</code></pre></div><br>
<h2 id="案例数据">案例数据</h2>
<p>这里使用vega_datasets中提供的数据做测试，返回的结果是dataframe类型的数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">stocks</span><span class="p">()</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">source</span><span class="p">[</span><span class="n">source</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="s2">&#34;2004-01-01&#34;</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">source</span>

<span class="n">get_data</span><span class="p">()</span>
</code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>symbol</th>
      <th>date</th>
      <th>price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>49</th>
      <td>MSFT</td>
      <td>2004-02-01</td>
      <td>21.77</td>
    </tr>
    <tr>
      <th>50</th>
      <td>MSFT</td>
      <td>2004-03-01</td>
      <td>20.46</td>
    </tr>
    <tr>
      <th>51</th>
      <td>MSFT</td>
      <td>2004-04-01</td>
      <td>21.45</td>
    </tr>
    <tr>
      <th>52</th>
      <td>MSFT</td>
      <td>2004-05-01</td>
      <td>21.53</td>
    </tr>
    <tr>
      <th>53</th>
      <td>MSFT</td>
      <td>2004-06-01</td>
      <td>23.44</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>555</th>
      <td>AAPL</td>
      <td>2009-11-01</td>
      <td>199.91</td>
    </tr>
    <tr>
      <th>556</th>
      <td>AAPL</td>
      <td>2009-12-01</td>
      <td>210.73</td>
    </tr>
    <tr>
      <th>557</th>
      <td>AAPL</td>
      <td>2010-01-01</td>
      <td>192.06</td>
    </tr>
    <tr>
      <th>558</th>
      <td>AAPL</td>
      <td>2010-02-01</td>
      <td>204.62</td>
    </tr>
    <tr>
      <th>559</th>
      <td>AAPL</td>
      <td>2010-03-01</td>
      <td>223.02</td>
    </tr>
  </tbody>
</table>
<p>364 rows × 3 columns</p>
</div>
<br>
<h2 id="完整代码">完整代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">altair</span> <span class="k">as</span> <span class="nn">alt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>
<span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">stocks</span><span class="p">()</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">source</span><span class="p">[</span><span class="n">source</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="s2">&#34;2004-01-01&#34;</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">source</span>

<span class="k">def</span> <span class="nf">get_chart</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">hover</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">selection_single</span><span class="p">(</span>
        <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;date&#34;</span><span class="p">],</span>
        <span class="n">nearest</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">on</span><span class="o">=</span><span class="s2">&#34;mouseover&#34;</span><span class="p">,</span>
        <span class="n">empty</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">lines</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;股票价格趋势&#34;</span><span class="p">)</span>
        <span class="o">.</span><span class="n">mark_line</span><span class="p">()</span>
        <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
            <span class="n">x</span><span class="o">=</span><span class="s2">&#34;date&#34;</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="s2">&#34;price&#34;</span><span class="p">,</span>
            <span class="n">color</span><span class="o">=</span><span class="s2">&#34;symbol&#34;</span><span class="p">,</span>
            <span class="c1"># strokeDash=&#34;symbol&#34;,</span>
        <span class="p">)</span>
    <span class="p">)</span>

    <span class="c1"># Draw points on the line, and highlight based on selection</span>
    <span class="n">points</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">transform_filter</span><span class="p">(</span><span class="n">hover</span><span class="p">)</span><span class="o">.</span><span class="n">mark_circle</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">65</span><span class="p">)</span>

    <span class="c1"># Draw a rule at the location of the selection</span>
    <span class="n">tooltips</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
        <span class="o">.</span><span class="n">mark_rule</span><span class="p">()</span>
        <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
            <span class="n">x</span><span class="o">=</span><span class="s2">&#34;yearmonthdate(date)&#34;</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="s2">&#34;price&#34;</span><span class="p">,</span>
            <span class="n">opacity</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">condition</span><span class="p">(</span><span class="n">hover</span><span class="p">,</span> <span class="n">alt</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="mf">0.3</span><span class="p">),</span> <span class="n">alt</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span>
            <span class="n">tooltip</span><span class="o">=</span><span class="p">[</span>
                <span class="n">alt</span><span class="o">.</span><span class="n">Tooltip</span><span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;日期&#34;</span><span class="p">),</span>
                <span class="n">alt</span><span class="o">.</span><span class="n">Tooltip</span><span class="p">(</span><span class="s2">&#34;price&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;价格 (USD)&#34;</span><span class="p">),</span>
            <span class="p">],</span>
        <span class="p">)</span>
        <span class="o">.</span><span class="n">add_selection</span><span class="p">(</span><span class="n">hover</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="p">(</span><span class="n">lines</span> <span class="o">+</span> <span class="n">points</span> <span class="o">+</span> <span class="n">tooltips</span><span class="p">)</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>


<span class="c1"># Original time series chart. Omitted `get_chart` for clarity</span>
<span class="n">chart</span> <span class="o">=</span> <span class="n">get_chart</span><span class="p">(</span><span class="n">get_data</span><span class="p">())</span>

<span class="c1"># Input annotations</span>
<span class="n">ANNOTATIONS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="s2">&#34;Mar 01, 2008&#34;</span><span class="p">,</span> <span class="s2">&#34;Pretty good day for GOOG&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Dec 01, 2007&#34;</span><span class="p">,</span> <span class="s2">&#34;Something&#39;s going wrong for GOOG &amp; AAPL&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Nov 01, 2008&#34;</span><span class="p">,</span> <span class="s2">&#34;Market starts again thanks to...&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Dec 01, 2009&#34;</span><span class="p">,</span> <span class="s2">&#34;Small crash for GOOG after...&#34;</span><span class="p">),</span>
<span class="p">]</span>

<span class="c1"># Create a chart with annotations</span>
<span class="n">annotations_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">ANNOTATIONS</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="s2">&#34;event&#34;</span><span class="p">])</span>
<span class="n">annotations_df</span><span class="o">.</span><span class="n">date</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">annotations_df</span><span class="o">.</span><span class="n">date</span><span class="p">)</span>
<span class="n">annotations_df</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">annotation_layer</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">annotations_df</span><span class="p">)</span>
    <span class="o">.</span><span class="n">mark_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">ticker</span><span class="p">,</span> <span class="n">dx</span><span class="o">=</span><span class="n">ticker_dx</span><span class="p">,</span> <span class="n">dy</span><span class="o">=</span><span class="n">ticker_dy</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="s2">&#34;center&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="s2">&#34;date:T&#34;</span><span class="p">,</span>
        <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s2">&#34;y:Q&#34;</span><span class="p">),</span>
        <span class="n">tooltip</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;event&#34;</span><span class="p">],</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="p">)</span>



<span class="p">(</span><span class="n">chart</span> <span class="o">+</span> <span class="n">annotation_layer</span><span class="p">)</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/stockevolution.svg" alt=""  />
</p>
<br>
<h2 id="代码下载time-series-annotationzip"><a href="time-series-annotation.zip">代码下载</a></h2>
<br>
<h2 id="出处">出处</h2>
<p><a href="https://share.streamlit.io/streamlit/example-app-time-series-annotation/main">https://share.streamlit.io/streamlit/example-app-time-series-annotation/main</a></p>
<br>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用WeasyPrint自动生成pdf报告文件</title>
      <link>https://hidadeng.github.io/blog/weasyprint_auto_report/</link>
      <pubDate>Sun, 27 Mar 2022 10:41:10 +0600</pubDate>
      
      <guid>/blog/weasyprint_auto_report/</guid>
      <description>自动化办公，可使用WeasyPrint自动生成pdf报告文件</description>
      <content:encoded><![CDATA[<p>Pandas非常善于处理大规模数据，支持将结果导出到CSV，Excel，HTML，json等文件中。 如果您想将 <code>多种信息（excel、图片等）组合</code> 到一个文档中，那么事情变得更加困难。 例如，如果要在一个Excel工作表上放置两个DataFrame，则需要使用相应的Excel库才能输出。 这当然是OK的，但走起来真不简单。 本文将介绍一种方法，将多种 <code>信息（excel、图片等）组合</code> 成一个 <code>HTML模板</code> ，然后使用<code>Jinja模板和WeasyPrint</code> 再将其转换为独立的PDF文档。</p>
<br>
<h2 id="操作流程">操作流程</h2>
<p>使用Pandas将数据输出到Excel文件中的多个工作表或者用DataFrames创建多个Excel文件非常方便。 但是，如果您想将 <code>多种信息（excel、图片等）组合</code> 输出到一个文件中，那么直接从Pandas进行操作的方法并不多。 幸运的是，万能的python大法有很多选项可以帮助我们。</p>
<p>在本文中，我将采用以下流程来创建多页PDF文档。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/pdf-conversion-pipeline.png" width="100%" />
    
    
</figure>
</div>
<br>
<h2 id="工具">工具</h2>
<p>我决定使用HTML作为模板语言，因为它可能是生成结构化数据最便捷的方法，支持各种格式数据（如图片、excel表）。我也认为每个人都知道（或可以弄清楚）足够的HTML知识来生成一个简单的报告。</p>
<p>这个工作流程中最困难的部分是弄清楚如何将HTML呈现为PDF。我觉得还没有最佳的解决方案，但我选择了 <code>WeasyPrint</code> ，因为它仍然在积极维护，我发现我可以相对容易地使它工作。作为替代方案，我过去使用过xhtml2pdf，它的效果也很好，遗憾的是该库缺乏文档说明，但它已存在一段时间，并且确实可以从HTML生成PDF。</p>
<br>
<h2 id="数据">数据</h2>
<p>如上所述，我们将使用之前文章中的相同数据集。 为了使这一切成为一个独立的文章，下面是我如何导入数据,做描述性统计，及并生成关于CPU和软件销售的 <code>数据透视表</code> 。</p>
<p>导入模块，并读入销售渠道信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;salesfunnel.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Account</th>
      <th>Name</th>
      <th>Rep</th>
      <th>Manager</th>
      <th>Product</th>
      <th>Quantity</th>
      <th>Price</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>1</td>
      <td>30000</td>
      <td>presented</td>
    </tr>
    <tr>
      <th>1</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>Software</td>
      <td>1</td>
      <td>10000</td>
      <td>presented</td>
    </tr>
    <tr>
      <th>2</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>Maintenance</td>
      <td>2</td>
      <td>5000</td>
      <td>pending</td>
    </tr>
    <tr>
      <th>3</th>
      <td>737550</td>
      <td>Fritsch, Russel and Anderson</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>1</td>
      <td>35000</td>
      <td>declined</td>
    </tr>
    <tr>
      <th>4</th>
      <td>146832</td>
      <td>Kiehn-Spinka</td>
      <td>Daniel Hilton</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>2</td>
      <td>65000</td>
      <td>won</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<p>对数据做透视表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sales_report</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Manager&#34;</span><span class="p">,</span> <span class="s2">&#34;Rep&#34;</span><span class="p">,</span> <span class="s2">&#34;Product&#34;</span><span class="p">],</span> 
                              <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Price&#34;</span><span class="p">,</span> <span class="s2">&#34;Quantity&#34;</span><span class="p">],</span>
                              <span class="n">aggfunc</span><span class="o">=</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">],</span> 
                              <span class="n">fill_value</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">sales_report</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}

.dataframe thead tr:last-of-type th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th colspan="2" halign="left">sum</th>
      <th colspan="2" halign="left">mean</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th>Price</th>
      <th>Quantity</th>
      <th>Price</th>
      <th>Quantity</th>
    </tr>
    <tr>
      <th>Manager</th>
      <th>Rep</th>
      <th>Product</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">Debra Henley</th>
      <th rowspan="3" valign="top">Craig Booker</th>
      <th>CPU</th>
      <td>65000</td>
      <td>2</td>
      <td>32500</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>Maintenance</th>
      <td>5000</td>
      <td>2</td>
      <td>5000</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>Software</th>
      <td>10000</td>
      <td>1</td>
      <td>10000</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">Daniel Hilton</th>
      <th>CPU</th>
      <td>105000</td>
      <td>4</td>
      <td>52500</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>Software</th>
      <td>10000</td>
      <td>1</td>
      <td>10000</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h2 id="模板">模板</h2>
<p>DataFrame拥有to_html()的方法，可以将dataframe数据转化为含有HTML格式的字符串。</p>
<p>但是随着您的报告变得越来越复杂或您选择将Jinja模板用于您的网络应用，jinja的这些功能将为您提供良好的服务。Jinja的另一个不错的功能是它包含多个内置过滤器，这些过滤器允许我们以Pandas中难以做到的方式格式化我们的一些数据。</p>
<p>为了在我们的应用程序中使用Jinja，我们需要做三件事：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1. 创建一个模板
2. 将变量添加到模板上下文中
3. 将模板渲染为HTML
</code></pre></div><br>
<p>这是一个非常简单的模板，我们称之为myreport.html：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{ title }}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Sales Funnel Report - National<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
     {{ national_pivot_table }}
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>上面html代码中拥有 <code>{{title}} 和 {{national_pivot_table }}</code> 这两个关键词。这两个关键词用来接收需要渲染的数据，比如图片对象、dataframe对象等。</p>
<p>要填充这些变量，我们需要创建一个Jinja环境并获取我们的模板对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">jinja2</span> <span class="kn">import</span> <span class="n">Environment</span><span class="p">,</span> <span class="n">FileSystemLoader</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">Environment</span><span class="p">(</span><span class="n">loader</span><span class="o">=</span><span class="n">FileSystemLoader</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
<span class="n">template</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s1">&#39;myreport.html&#39;</span><span class="p">)</span>
</code></pre></div><p>在上面的示例中，我假设模板位于当前目录中，但您可以将完整路径放到模板位置。</p>
<p>另一个关键组件是 <code>env</code> 的创建。 这个变量是我们将数据（或对象）填充给模板的方式。 我们创建了一个名为 <code>template_var</code> 的字典，其中包含我们想要传递给模板的所有变量。</p>
<p><code>请注意变量的名称如何与我们的模板匹配。即名称要与myreport.html中的{{}}夹住的关键词一样。</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">template_vars</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span> <span class="p">:</span> <span class="s2">&#34;Sales Funnel Report - National&#34;</span><span class="p">,</span>
                 <span class="s2">&#34;national_pivot_table&#34;</span><span class="p">:</span> <span class="n">sales_report</span><span class="o">.</span><span class="n">to_html</span><span class="p">()}</span>
</code></pre></div><p>最后一步是将 <code>template_vars</code> 渲染到html模板中，并输出为html字符串，最终我们将使用该html字符串来生成pdf报告。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">html_out</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">template_vars</span><span class="p">)</span>
</code></pre></div><p>为简洁起见，我不会显示完整的HTML，但您应该明白这一点。</p>
<br>
<h2 id="生成pdf">生成pdf</h2>
<p>pdf报告的生成部分相当简单，这里用到weasyprint库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">weasyprint</span> <span class="kn">import</span> <span class="n">HTML</span>
<span class="n">HTML</span><span class="p">(</span><span class="n">string</span><span class="o">=</span><span class="n">html_out</span><span class="p">)</span><span class="o">.</span><span class="n">write_pdf</span><span class="p">(</span><span class="s2">&#34;report.pdf&#34;</span><span class="p">)</span>
</code></pre></div><div style="text-align: center;">
<figure >
    
        <img src="img/ugly_table.png" width="100%" />
    
    
</figure>
</div>
<p>但是打开的pdf样式很简单，白底黑字并不美观。之所以这样是因为我们没有使用自定义样式表css，但是咱们不熟悉css，有一种简单的办法就是用成熟的css，这里我用的<code>typography.css</code> 作为填充表格时的样式表。这个css的优点有：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1. 相对较小且易于理解
2. 可以在PDF引擎中运行而不会抛出错误和警告
3. 能让表格表格看起来很美观
</code></pre></div><p>让我们尝试使用我们更新的样式表重新渲染它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">HTML</span><span class="p">(</span><span class="n">string</span><span class="o">=</span><span class="n">html_out</span><span class="p">)</span><span class="o">.</span><span class="n">write_pdf</span><span class="p">(</span><span class="s1">&#39;beautiful_report.pdf&#39;</span><span class="p">,</span> <span class="n">stylesheets</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;typography.css&#34;</span><span class="p">])</span>
</code></pre></div><div style="text-align: center;">
<figure >
    
        <img src="img/beautiful_table.png" width="100%" />
    
    
</figure>
</div>
<p>添加了一个stylesheets参数就让输出结果瞬间变得高端大气上档次。</p>
<br>
<h2 id="更多">更多</h2>
<p>如果想更加丰富的输出pdf报告，大家回去需要查阅jinja文档，找一些css样式表。</p>
<br>
<h2 id="下载weasyprint_auto_reportzip"><a href="weasyprint_auto_report.zip">下载</a></h2>
<p><a href="weasyprint_auto_report.zip">点击这里</a>下载本文需要的实验数据及代码</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Python计算地图中两点距离及方位角</title>
      <link>https://hidadeng.github.io/blog/how_to_calculate_geo_distance_in_python/</link>
      <pubDate>Thu, 17 Mar 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/how_to_calculate_geo_distance_in_python/</guid>
      <description>使用Python的geographiclib包可以用来计算地理信息，诸如两城市距离、方位角等信息</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="img/earth.jpg" alt=""  />
</p>
<br>
<h2 id="下载本文代码使用python计算地图中两点距离及方位角ipynb"><a href="%E4%BD%BF%E7%94%A8Python%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9B%BE%E4%B8%AD%E4%B8%A4%E7%82%B9%E8%B7%9D%E7%A6%BB%E5%8F%8A%E6%96%B9%E4%BD%8D%E8%A7%92.ipynb">下载本文代码</a></h2>
<br>
<h2 id="如何计算地图中两点距离及角度">如何计算地图中两点距离及角度</h2>
<p>例如北京市北纬40.1，东经116.6； 哈尔滨市北纬45.7567, 东经126.6424</p>
<p>感兴趣的童鞋也可去看问题出处</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/3932502/calculate-angle-between-two-latitude-longitude-points/51415608">https://stackoverflow.com/questions/3932502/calculate-angle-between-two-latitude-longitude-points/51415608</a></p>
</blockquote>
<p>在回答中，看到有地理信息系统Python包geographiclib，可以计算两点距离和角度。</p>
<br>
<h2 id="安装geographiclib">安装geographiclib</h2>
<p><a href="https://geographiclib.sourceforge.io/1.52/python/">https://geographiclib.sourceforge.io/1.52/python/</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">geographiclib</span><span class="o">==</span><span class="mf">1.52</span>
</code></pre></div><br>
<h2 id="计算距离">计算距离</h2>
<p>注意，在接下来的计算中，将北纬、东经表示为正数。将南纬、西经表示为负数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">distance</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。
</span><span class="s2">    dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负
</span><span class="s2">    beiwei2: 地点2的纬度数
</span><span class="s2">    dongjing2: 地点2的经度数
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">from</span> <span class="nn">geographiclib.geodesic</span> <span class="kn">import</span> <span class="n">Geodesic</span>
    <span class="n">geod</span> <span class="o">=</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">WGS84</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">geod</span><span class="o">.</span><span class="n">Inverse</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">g</span><span class="p">[</span><span class="s1">&#39;s12&#39;</span><span class="p">]</span><span class="o">/</span><span class="mi">1000</span>
    <span class="k">return</span> <span class="n">distance</span>
    

<span class="c1">#北京Beijing与哈尔滨harbin</span>
<span class="n">distance</span><span class="p">(</span><span class="mf">40.1</span><span class="p">,</span> <span class="mf">116.6</span><span class="p">,</span> <span class="mf">45.7567</span><span class="p">,</span> <span class="mf">126.6424</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>1031.617791888516
</code></pre>
<p><img loading="lazy" src="img/%e8%b7%9d%e7%a6%bb.png" alt=""  />
</p>
<br>
<h2 id="方位角azimuth">方位角azimuth</h2>
<p>两个地点在地图中所处的相对位置，称之为方位角azimuth。方位角最大度数360度，</p>
<ul>
<li>0度表示正北</li>
<li>90度表示正西</li>
<li>180度表示正南</li>
<li>270度表示正西</li>
<li>360度表示正北</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">azimuth</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。
</span><span class="s2">    dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负
</span><span class="s2">    beiwei2: 地点2的纬度数
</span><span class="s2">    dongjing2: 地点2的经度数
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">from</span> <span class="nn">geographiclib.geodesic</span> <span class="kn">import</span> <span class="n">Geodesic</span>
    <span class="n">geod</span> <span class="o">=</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">WGS84</span>
    <span class="n">l</span> <span class="o">=</span> <span class="n">geod</span><span class="o">.</span><span class="n">InverseLine</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">s12</span> <span class="o">=</span> <span class="n">distance</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">Position</span><span class="p">(</span><span class="n">s12</span><span class="p">,</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">STANDARD</span> <span class="o">|</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">LONG_UNROLL</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">g</span><span class="p">[</span><span class="s1">&#39;azi2&#39;</span><span class="p">]</span>

<span class="c1">#北京 哈尔滨</span>
<span class="n">azimuth</span><span class="p">(</span><span class="mf">40.1</span><span class="p">,</span> <span class="mf">116.6</span><span class="p">,</span> <span class="mf">45.7567</span><span class="p">,</span> <span class="mf">126.6424</span><span class="p">)</span>
</code></pre></div><pre><code>56.03961942267271
</code></pre>
<p>按照azimuth定义，56度的解读为 哈尔滨位于北京的东北方向。</p>
<p>同理可以计算西安与杭州</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#西安， 杭州</span>
<span class="n">azimuth</span><span class="p">(</span><span class="mf">34.2658</span><span class="p">,</span> <span class="mf">108.9541</span><span class="p">,</span> <span class="mf">30.2741</span><span class="p">,</span> <span class="mf">120.1552</span><span class="p">)</span>
</code></pre></div><pre><code>115.1506923699206
</code></pre>
<p>杭州位于西安的115度，即东南方向</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Python中使用Greppo构建的地理空间仪表板</title>
      <link>https://hidadeng.github.io/blog/geospatial_with_greppo/</link>
      <pubDate>Sat, 12 Mar 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/geospatial_with_greppo/</guid>
      <description>缺乏前端、后端和网络开发经验可能会限制使用 Python 制作网络应用程序。 在Python中使用 Greppo构建的地理空间仪表板</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="vector-demo.zip">
        <img src="img/1.gif" width="100%" />
    </a>
    <figcaption><small><i>点击本图下载本文项目代码</i></small></figcaption>
</figure>
</div>
<h2 id="下载项目数据代码vector-demozip"><a href="vector-demo.zip">下载项目数据代码</a></h2>
<p><strong>地理空间数据分析</strong>已成为数据科学中的一个常见领域。对于地理空间数据科学来说也不例外。支持 GeoPandas、Shapely 和 Rasterio 等项目的社区使 Python 成为地理空间分析的首选。</p>
<br>
<h2 id="greppo快速简单的地理空间仪表板构建方法">Greppo：快速简单的地理空间仪表板构建方法</h2>
<p>Greppo 是一个用于构建地理空间网络应用程序的开源 Python 框架。 它提供了可随时使用的前端和后端组件作为函数，充当前端交互组件和绑定的后端变量之间的 API。 要了解有关心智模型的更多信息，<a href="https://docs.greppo.io/mental-model.html">请参阅此页面</a>。</p>
<p>无需太多前端、后端、Web 开发经验，您就可以在 5 分钟内使用 Python 构建和部署功能齐全的 Web 应用程序。</p>
<ul>
<li>GitHub存储库：https://github.com/greppo-io/greppo</li>
<li>文档：https://docs.greppo.io/</li>
<li>网站：https://greppo.io/</li>
</ul>
<blockquote>
<p>在本教程中，我们将使用 Greppo 在 Python 中构建地理空间仪表板。 我们将通过设置环境、安装、导入数据、为我们的仪表板放入组件并为其提供服务来工作。 您将需要了解 Python、GeoPandas 和地理空间分析的基础知识。
入门…</p>
</blockquote>
<p>首先要做的是安装本文需要的 Python 第三方库。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install greppo geopandas
</code></pre></div><p>下载本教程所需的数据集。 本教程的所有数据和代码都可以在这个 GitHub 存储库中找到：greppo-demo/vector-demo（数据源：https://github.com/openpolis/geojson-italy）</p>
<br>
<h2 id="编写仪表板脚本">编写仪表板脚本</h2>
<p>我们首先为项目设置文件夹结构。 我将使用以下项目文件夹结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">└── vector-demo
    ├── app.py
    ├── cities.geojson
    ├── regions.geojson
    └── roads.geojson
</code></pre></div><p>该应用程序的主控脚本是 app.py。</p>
<br>
<h2 id="step-0启动服务器">Step 0：启动服务器</h2>
<p>启动服务器，请打开**终端（windows对应的是命令行cmd）**并按照这些说明进行操作。</p>
<p>首先，终端中执行<code>cd vector_demo</code>将工作目录切换为 (cd) 项目文件夹 <strong>vector_demo</strong>。</p>
<p>然后，终端执行<code>greppo serve app.py</code>, 启动服务器。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/2.png" width="90%" />
    
    <figcaption><small><i>在命令行中启动服务器</i></small></figcaption>
</figure>
</div>
<p>然后，您将看到 Uvicorn 服务器在指定位置（类似于链接）运行。 复制网址链接，并将其粘贴到浏览器中。 然后它将加载应用程序。 如果您对 app.py 进行了任何更改，您将在浏览器页面上看到对您的应用的更新更改。</p>
<br>
<h2 id="step-1构建应用程序的基本脚手架">Step 1：构建应用程序的基本脚手架。</h2>
<p>即导入 greppo 包，并在地图中添加 base_layer。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Open Street Map&#34;</span><span class="p">,</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://</span><span class="si">{s}</span><span class="s2">.tile.openstreetmap.org/</span><span class="si">{z}</span><span class="s2">/</span><span class="si">{x}</span><span class="s2">/</span><span class="si">{y}</span><span class="s2">.png&#34;</span><span class="p">,</span>
    <span class="n">subdomains</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
    <span class="n">attribution</span><span class="o">=</span><span class="s1">&#39;(C) OpenStreetMap contributors&#39;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span><span class="n">provider</span><span class="o">=</span><span class="s2">&#34;CartoDB Positron&#34;</span><span class="p">)</span>
</code></pre></div><p>您需要先从 greppo 导入应用程序。 此应用程序对象将用作您的应用程序前端的接口，并为前端和后端之间的 2 路通信提供 API。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/3.png" width="90%" />
    
    
</figure>
</div>
<p>要将 base_layer 添加到您的应用程序地图，只需使用带有所需参数的应用程序 API 方法 app.base_layer()。 请<a href="https://docs.greppo.io/">参阅文档</a>以了解什么是必需的和什么是可选的。 base_layer 方法提供了两种方法来指定基本瓦片层。 一种是使用 name 和 url 属性。 另一种方法是使用提供者的名称。</p>
<br>
<h2 id="step-2导入数据集并将其显示为叠加层">Step 2：导入数据集并将其显示为叠加层。</h2>
<p>使用 geopandas，我们可以将矢量数据集作为 GeoDataFrame 导入。 然后可以使用 app.vector_layer() 方法在 Web 应用程序上的地图上对其进行可视化。
在这里，我要导入三个不同的数据集，每个数据集都有多边形（意大利不同地区的边界）、线（意大利的主要高速公路）和点（意大利的主要城市）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
<span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">regions</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Regions of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Polygons showing the boundaries of regions of Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;fillColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#4daf4a&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">roads</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Highways in Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Lines showing the major highways in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#377eb8&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">cities</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Cities of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Points showing the cities in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#e41a1c&#34;</span><span class="p">},</span>
    <span class="n">visible</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div><p>使用方法 app.vector_layer() 作为前端的 API，我们可以显示矢量数据。 您需要传入名称，其他参数是可选的。 虽然，将颜色或填充颜色传递给样式是区分和识别每一层的好习惯。 由于前端基于 Leaflet，所有样式都符合 Leaflet 的规范，可以在文档中找到。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/4.png" width="100%" />
    
    
</figure>
</div>
<p>您可以在此处找到 vector_layer 和样式的所有信息。 注意：您也可以制作 Choropleth 地图。 可以在此处找到其文档。</p>
<br>
<h2 id="step-3显示应用内文本应用标题和应用描述">Step 3：显示应用内文本、应用标题和应用描述</h2>
<p>为了使 Web 应用程序有用，它需要携带一些文本以向其用户提供一些指导和上下文。 这些可以显示在组件旁边的侧边栏上。 使用 app.display() 方法可以在 web-app 上显示降价文本。 使用相同的方法，可以设置应用程序的标题和描述。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;Vector demo&#39;</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;description&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;A Greppo demo app for vector data using GeoJSON data.&#39;</span><span class="p">)</span>

<span class="n">text_1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">## About the web-app
</span><span class="s2">The dashboard shows the boundaries of the regions of Italy as polygons, 
</span><span class="s2">the major arterial higways as lines and the major cities of each region as points.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-1&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">text_1</span><span class="p">)</span>
</code></pre></div><p>app.display() 接受两个参数 name 和 value 。 虽然 value 承载要显示的文本，但 name 必须是唯一的，并带有文本的标识符。 如果 name=&lsquo;title&rsquo; 传递的值是应用程序的标题，如果 name=&lsquo;description&rsquo; 传递的值是应用程序的描述。 如果没有这两者中的任何一个，该应用程序将带有其默认标题和描述。 鼓励设置应用程序的标题和描述。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/5.png" width="100%" />
    
    
</figure>
</div>
<br>
<h2 id="step-4将数据显示为图表">Step 4：将数据显示为图表</h2>
<p>数据应用程序几乎没有将数据显示为图表。 Greppo 还允许您将数据显示为图表。 可以在文档中找到有关图表及其用法的信息。 这里，作为一个例子，展示了一个条形图，app.bar_chart()。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-2&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;The following displays the count of polygons, lines and points as a barchart.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">bar_chart</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;Geometry count&#39;</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;A bar-cart showing the count of each geometry-type in the datasets.&#39;</span><span class="p">,</span>
              <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;polygons&#39;</span><span class="p">,</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="s1">&#39;points&#39;</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">regions</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">roads</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)],</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#984ea3&#39;</span><span class="p">)</span>
</code></pre></div><p>图表所需的参数是名称、x 和 y 值。 可以添加描述和颜色来为应用程序用户提供更好的上下文。 名称和描述与图表一起显示。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/6.png" width="90%" />
    
    
</figure>
</div>
<br>
<h2 id="结论">结论</h2>
<p>让我们全面了解一下我们在这里所做的事情。 我们的目标是使用 Greppo 创建一个地理空间 web 应用程序，以显示一些 GIS 矢量数据，并添加组件以为应用程序的用户提供更好的上下文。 这是该应用程序的完整代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;Vector demo&#39;</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;description&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;A Greppo demo app for vector data using GeoJSON data.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Open Street Map&#34;</span><span class="p">,</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://</span><span class="si">{s}</span><span class="s2">.tile.openstreetmap.org/</span><span class="si">{z}</span><span class="s2">/</span><span class="si">{x}</span><span class="s2">/</span><span class="si">{y}</span><span class="s2">.png&#34;</span><span class="p">,</span>
    <span class="n">subdomains</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
    <span class="n">attribution</span><span class="o">=</span><span class="s1">&#39;(C) OpenStreetMap contributors&#39;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">provider</span><span class="o">=</span><span class="s2">&#34;CartoDB Positron&#34;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">regions</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Regions of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Polygons showing the boundaries of regions of Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;fillColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#4daf4a&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">roads</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Highways in Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Lines showing the major highways in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#377eb8&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">cities</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Cities of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Points showing the cities in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#e41a1c&#34;</span><span class="p">},</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">text_1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">## About the web-app
</span><span class="s2">
</span><span class="s2">The dashboard shows the boundaries of the regions of Italy as polygons, the 
</span><span class="s2">major arterial higways as lines and the major cities of each region as points.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-1&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">text_1</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-2&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;The following displays the count of polygons, lines and points as a barchart.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">bar_chart</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;Geometry count&#39;</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;A bar-cart showing the count of each geometry-type in the datasets.&#39;</span><span class="p">,</span>
              <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;polygons&#39;</span><span class="p">,</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="s1">&#39;points&#39;</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">regions</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">roads</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)],</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#984ea3&#39;</span><span class="p">)</span>
</code></pre></div><p>运行效果如下</p>
<div style="text-align: center;">
<figure >
    <a href="vector-demo.zip">
        <img src="img/1.gif" width="100%" />
    </a>
    <figcaption><small><i>点击本图下载本文项目代码</i></small></figcaption>
</figure>
</div>
<h2 id="下载项目数据代码vector-demozip-1"><a href="vector-demo.zip">下载项目数据代码</a></h2>
<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyCatFlow库|类别数据时间序列可视化库</title>
      <link>https://hidadeng.github.io/blog/pycatflow/</link>
      <pubDate>Sun, 05 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pycatflow/</guid>
      <description>大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。</description>
      <content:encoded><![CDATA[<p>大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。</p>
<h2 id="pycatflow">PyCatFlow</h2>
<p>PyCatFlow 是一个 Python 包，用于可视化<strong>类别数据的时间变化</strong>。它的灵感来自 Bernhard Rieder 的可视化工具 <strong>RankFlow</strong>，它允许将排名列表随着时间的推移进行可视化，例如，Google 或 YouTube 上查询的搜索结果的变化。在我看来，尽管它的用户界面极简,RankFlow 是一个非常有用的工具，而且我很难为其准备数据。事实证明，这些困难主要源于“滥用”RankFlow，或者用更积极的术语来说，它源于将 RankFlow 用于其设计目的以外的其他目的。</p>
<h2 id="背景了解rankflow">背景：了解RankFlow</h2>
<p>RankFlow 允许比较排名列表（随着时间的推移）。 在最简单的形式中，它需要以每列代表一个排名列表的方式排列表格数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Time 1,Time 2,Time 3,Time 4
Item 1,Item 1,Item 1,Item 2
Item 2,Item 4,Item 2,Item 1
Item 3,Item 2,Item 4,Item 4
Item 4,Item 3,Item 5,Item 5
</code></pre></div><p>每个排名列表都可以通过权重进行补充，从而为数据添加另一层信息。 例如，如果我们采用 YouTube 搜索结果数据，则可以将观看次数、赞成票数或赞成票反对率用作权重信息。 为简单起见，示例数据仅由排名列表组成，并在以下流程图中显示结果。</p>

<figure >
    
        <img src="img/rankflow.png" width="800" />
    
    
</figure>

<p>为了加快图表的后处理速度，我决定创建一个类似于 RankFlow 的可视化工具，它非常适合不包含显式排名信息但可能包含额外分类数据的时间数据。</p>
<h2 id="pycatflow快速上手">PyCatFlow快速上手</h2>

<figure >
    
        <img src="img/sample_viz.png" width="800" />
    
    
</figure>

<p>如果我们用两种不同颜色，灰色和绿色分别表示男生和女生，然后每一个格子表示一类电影，横轴是男生和女生随着时间推移看的不同的电影，这样我们就可以一目了然男生和女生的喜好的变化，真的是太直观了！
PyCatFlow大大方便了我们对于类别特征随着时间变化的分析。</p>
<p><strong>准备数据</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/sample_data_ChatterBot_Requirements.csv&#34;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">column</th>
<th style="text-align:left">items</th>
<th style="text-align:left">category</th>
<th style="text-align:right">column order</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">fuzzywuzzy</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">requests</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">requests-oauthlib</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">pymongo</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">jsondatabase</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pycatflow</span> <span class="k">as</span> <span class="nn">pcf</span>

<span class="c1"># Load and parse data from file</span>
<span class="n">fname</span><span class="o">=</span><span class="s2">&#34;data/sample_data_ChatterBot_Requirements.csv&#34;</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="s2">&#34;column&#34;</span><span class="p">,</span> <span class="n">nodes</span><span class="o">=</span><span class="s2">&#34;items&#34;</span><span class="p">,</span> <span class="n">categories</span><span class="o">=</span><span class="s2">&#34;category&#34;</span><span class="p">,</span> <span class="n">column_order</span><span class="o">=</span><span class="s2">&#34;column order&#34;</span><span class="p">)</span>

<span class="s1">&#39;&#39;&#39;
</span><span class="s1">visualize(data, spacing=50, node_size=10, width=None, height=None, minValue=1, maxValue=10, node_scaling=&#34;linear&#34;,
</span><span class="s1">          connection_type=&#34;semi-curved&#34;, color_startEnd=True, color_categories=True, nodes_color=&#34;gray&#34;,
</span><span class="s1">          start_node_color=&#34;green&#34;, end_node_color=&#34;red&#34;, palette=None, show_labels=True,
</span><span class="s1">          label_text=&#34;item&#34;, label_font=&#34;sans-serif&#34;, label_color=&#34;black&#34;, label_size=5,
</span><span class="s1">          label_shortening=&#34;clip&#34;, label_position=&#34;nodes&#34;, line_opacity=0.5, line_stroke_color=&#34;white&#34;,
</span><span class="s1">          line_stroke_width=0.5, line_stroke_thick=0.5, legend=True, sort_by=&#34;frequency&#34;)
</span><span class="s1">&#39;&#39;&#39;</span>

<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="c1">#save visualization to files</span>
<span class="n">viz</span><span class="o">.</span><span class="n">savePng</span><span class="p">(</span><span class="s1">&#39;sample_viz.png&#39;</span><span class="p">)</span>
<span class="n">viz</span><span class="o">.</span><span class="n">saveSvg</span><span class="p">(</span><span class="s1">&#39;sample_viz.svg&#39;</span><span class="p">)</span>

<span class="c1">#show visualization</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Another option is to visualize the graph with curved connections.</span>
<span class="c1"># The implementation of this connection type draws on https://github.com/bernorieder/RankFlow</span>

<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">connection_type</span><span class="o">=</span><span class="s1">&#39;curved&#39;</span><span class="p">)</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The third option are straight connections between nodes</span>
<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">connection_type</span><span class="o">=</span><span class="s1">&#39;straight&#39;</span><span class="p">)</span>

<span class="c1"># show visualization</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>

<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/bumatic/PyCatFlow">https://github.com/bumatic/PyCatFlow</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>科学绘图matplotlib</title>
      <link>https://hidadeng.github.io/blog/sci_matplotlib/</link>
      <pubDate>Wed, 24 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/sci_matplotlib/</guid>
      <description>字段丰富，适合玩数据分析</description>
      <content:encoded><![CDATA[<p>Python 科学可视化领域是巨大的，由无数工具组成，从最通用和最广泛使用的工具到更专业和机密的工具。其中一些工具是基于社区的，而另一些则是由公司开发的。有些是专门为 Web 制作的，有些仅适用于桌面，有些处理 3D 和大数据，而有些则针对完美的 2D 渲染。</p>
<p>在这个图景中，Matplotlib 有着非常特别的地方。</p>
<ul>
<li>它是一个多功能且功能强大的库，可让您设计非常高质量的图形，适用于<strong>科学出版</strong>。</li>
<li>它还提供了一个简单直观的界面以及一个面向对象的架构，允许您调整图形中的任何内容。</li>
<li>最后，它可以用作常规图形库以设计非科学图形。</li>
</ul>
<br>
<h2 id="本书章节四个部分">本书章节四个部分</h2>
<ul>
<li>
<p>第一部分 Matplotlib 库的基本原理。</p>
<p>这包括回顾构成图形的不同部分、不同的坐标系、可用的比例和投影，我们还将介绍一些与排版和颜色相关的概念。</p>
</li>
<li>
<p>第二部分 图形涉及实践。</p>
<p>在介绍了一些生成更好图形的简单规则之后，我们将继续解释 Matplotlib 默认值和样式系统，然后再深入研究图形布局组织。然后我们将探索可用的不同类型的情节，看看如何用不同的元素装饰一个人物。</p>
</li>
<li>
<p>第三部分 更高级的概念</p>
<p>即 3D 图形、优化和动画。第四部分也是最后一部分是展示集合。</p>
</li>
</ul>
<br>
<h2 id="美图展览">美图展览</h2>
<p>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>
</p>
<br>
<h2 id="案例代码">案例代码</h2>

<figure >
    
        <img src="img/matplotlib.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.textpath</span> <span class="kn">import</span> <span class="n">TextPath</span>
<span class="kn">from</span> <span class="nn">matplotlib.patches</span> <span class="kn">import</span> <span class="n">PathPatch</span>
<span class="kn">from</span> <span class="nn">matplotlib.collections</span> <span class="kn">import</span> <span class="n">PolyCollection</span>
<span class="kn">from</span> <span class="nn">matplotlib.font_manager</span> <span class="kn">import</span> <span class="n">FontProperties</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">font_manager</span> <span class="k">as</span> <span class="n">fm</span><span class="p">,</span> <span class="n">rcParams</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>

<span class="c1">#更改字体，支持中文。</span>
<span class="n">prop</span> <span class="o">=</span> <span class="n">FontProperties</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s1">&#39;fonts/Alibaba-PuHuiTi-Bold.otf&#39;</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

<span class="n">red</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">233</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">255</span><span class="p">])</span> <span class="o">/</span> <span class="mi">255</span>
<span class="n">darkred</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">130</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">255</span><span class="p">])</span> <span class="o">/</span> <span class="mi">255</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mf">14.8</span> <span class="o">/</span> <span class="mf">2.54</span><span class="p">,</span> <span class="mi">21</span> <span class="o">/</span> <span class="mf">2.54</span><span class="p">))</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">add_axes</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">aspect</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">xlim</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span> <span class="n">ylim</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mf">14.2</span><span class="p">,</span> <span class="mf">14.2</span><span class="p">])</span>
<span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s2">&#34;off&#34;</span><span class="p">)</span>

<span class="c1"># Text path</span>
<span class="n">path</span> <span class="o">=</span> <span class="n">TextPath</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="s2">&#34;MATPLOTLIB库&#34;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">prop</span><span class="o">=</span><span class="n">prop</span><span class="p">)</span>

<span class="c1"># Text centering</span>
<span class="n">V</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">vertices</span>
<span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span> <span class="o">=</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">min</span><span class="p">(),</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
<span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span> <span class="o">=</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">min</span><span class="p">(),</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
<span class="n">V</span> <span class="o">-=</span> <span class="p">(</span><span class="n">xmin</span> <span class="o">+</span> <span class="n">xmax</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">ymin</span> <span class="o">+</span> <span class="n">ymax</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>


<span class="c1"># Compute shadow by iterating over text path segments</span>
<span class="n">polys</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">iter_segments</span><span class="p">(</span><span class="n">curves</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">MOVETO</span><span class="p">:</span>
        <span class="n">points</span> <span class="o">=</span> <span class="p">[</span><span class="n">point</span><span class="p">]</span>
    <span class="k">elif</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">LINETO</span><span class="p">:</span>
        <span class="n">points</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">CLOSEPOLY</span><span class="p">:</span>
        <span class="n">points</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">points</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">points</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">p0</span><span class="p">,</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
            <span class="n">polys</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p1</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">),</span> <span class="n">p0</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">)])</span>

<span class="c1"># Display shadow</span>
<span class="n">collection</span> <span class="o">=</span> <span class="n">PolyCollection</span><span class="p">(</span>
    <span class="n">polys</span><span class="p">,</span> <span class="n">closed</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="n">darkred</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=-</span><span class="mi">10</span>
<span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">add_collection</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>

<span class="c1"># Display text</span>
<span class="n">patch</span> <span class="o">=</span> <span class="n">PathPatch</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="s2">&#34;white&#34;</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">add_artist</span><span class="p">(</span><span class="n">patch</span><span class="p">)</span>

<span class="c1"># Transparent gradient to fade out shadow</span>
<span class="n">I</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">200</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span> <span class="o">+</span> <span class="n">red</span>
<span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=-</span><span class="mi">20</span><span class="p">,</span> <span class="n">clip_on</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">I</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">I</span><span class="p">))</span>
<span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">clip_on</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>


<span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span>
    <span class="mf">6.5</span><span class="p">,</span>
    <span class="o">-</span><span class="mf">1.75</span><span class="p">,</span>
    <span class="s2">&#34;一个多功能的科学可视化库&#34;</span><span class="p">,</span>
    <span class="n">color</span><span class="o">=</span><span class="s2">&#34;white&#34;</span><span class="p">,</span>
    <span class="n">ha</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">,</span>
    <span class="n">va</span><span class="o">=</span><span class="s2">&#34;baseline&#34;</span><span class="p">,</span>
    <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="c1">#family=&#34;Pacifico&#34;,</span>
    <span class="n">zorder</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
    <span class="n">fontproperties</span><span class="o">=</span><span class="n">prop</span>
<span class="p">)</span>

<span class="c1"># Save and show result</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s2">&#34;text-shadow.pdf&#34;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s2">&#34;text-shadow.png&#34;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><br>
<h2 id="电子书下载">电子书下载</h2>
<p>您可以阅读 PDF（95Mo，首选站点）这本书，该书是开放访问的，托管在 HAL 上，HAL 是一个面向学术界的法国开放档案馆。最新版本也可以在 GitHub 上找到。本书的来源（包括代码示例）可在 github.com/rougier/scientific-visualization-book 上找到。</p>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hiDaDeng/DaDengAndHisPython/tree/master/matplotlib%E7%BB%98%E5%9B%BE%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87">点击下载</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Rmarkdown中调用Python代码</title>
      <link>https://hidadeng.github.io/blog/call_python_code_in_rmarkdown/</link>
      <pubDate>Tue, 23 Nov 2021 18:40:10 +0600</pubDate>
      
      <guid>/blog/call_python_code_in_rmarkdown/</guid>
      <description>左手R，右手Python！</description>
      <content:encoded><![CDATA[<h1 id="rpy2简介">rpy2简介</h1>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E5%9C%A8Rmarkdown%E4%B8%AD%E8%B0%83%E7%94%A8Python%E4%BB%A3%E7%A0%81.zip">点击下载文本</a></p>
<br>
<p>Python和R是一对数据科学两大语言，在互联互通的路上，我感觉R更加的积极。还记得之前 <strong>Python中调用R的库-rpy2</strong>， 在Python使用R语言语法还是有些不自然。在R中调用Python体验十分棒，一起跟我看看吧。</p>
<p>reticulate包是可以让R语言非常流畅自然联通Python的关键。</p>
<p><strong>Rmarkdown预备知识</strong></p>
<p>Rmarkdown很像jupyter notbeook和markdown的结合。</p>
<ul>
<li>代码块</li>
<li>markdon文本</li>
</ul>
<br>
<h2 id="代码块">代码块</h2>
<p>在Rmarkdown中的代码块的开始都是以三引号、{}和语言名为标志，以三引号结尾。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">library(ggplot2)
ggplot(mpg, aes(x=displ, y=cty))+
  geom_point()
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">ggplot</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">displ</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">cty</span><span class="p">))</span><span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/unnamed-chunk-1-1.png" width="100%" />
    
    
</figure>

<p>后面设置好reticulate包后，就可以在Rmarkdown中使用python代码块，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import pandas as pd
df = pd.read_csv(&#39;test.csv&#39;)
df.head()
</code></pre></div><br>
<h2 id="markdown文本">markdown文本</h2>
<p>文本部分全部支持markdown语法，这里不做赘述。</p>
<h2 id="安装rpy">安装rpy</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;reticulate&#34;)
</code></pre></div><h2 id="环境设置">环境设置</h2>
<p>当我们在R代码块中设置好Python环境，就可以在Rmarkdown中跑Python代码。</p>
<br>
<h2 id="查询python">查询Python</h2>
<p>首先我们需要知道Python安装路径，可以在<strong>命令行</strong>中逐行执行下面代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">python3
import sys
sys.executable
</code></pre></div><p>我的mac电脑的Python安装路径为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/Library/Frameworks/Python.framework/Versions/3.7/bin/python3
</code></pre></div><br>
<h2 id="指定python">指定Python</h2>
<p>执行下方的代码(路径改为自己的Python安装路径)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="err">##</span> <span class="nx">Warning</span><span class="p">:</span> <span class="kn">package</span> <span class="err">&#39;</span><span class="nx">reticulate</span><span class="err">&#39;</span> <span class="nx">was</span> <span class="nx">built</span> <span class="nx">under</span> <span class="nx">R</span> <span class="nx">version</span> <span class="mf">3.6.2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">use_python</span><span class="p">(</span><span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/bin/python3&#39;</span><span class="p">)</span>
</code></pre></div><p>执行代码后，我们就可以愉快的使用Python代码</p>
<br>
<h1 id="运行python代码">运行Python代码</h1>
<p>在Rmarkdown中写Python代码块</p>
<h2 id="作图">作图</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span> 
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span> 
<span class="c1"># 计算正弦曲线上点的 x 和 y 坐标</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>  <span class="mi">3</span>  <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span>  <span class="mf">0.1</span><span class="p">)</span> 
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;sine wave form&#34;</span><span class="p">)</span>  
<span class="c1"># 使用 matplotlib 来绘制点</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> 
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/unnamed-chunk-3-1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="读取csv">读取csv</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;test.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;gbk&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">##      birthday   name               text  age  gender  height  weight
## 0  1985/10/08  Alice  我很开心，每天都这么快乐，我很幸福   35  female     175      55
## 1    95.07.07   Mary               我很难过   25  female     165      50
## 2    01-11-10   Mike              唉，真难受   19    male     180      75
## 3      90/2/8  Smith          无所谓开心还是难过   30    male     175      70
## 4      93-1-5  Henry          每天赚一万，真爽！   27    male     185      80
</code></pre></div><p>返回的df是Python对象，我们可以看到表格不好看，这是R中的Python对象。</p>
<br>
<h2 id="在r代码块中调用python变量对象">在R代码块中调用Python变量(对象)</h2>
<p>刚刚讲的都是在Rmakdown中运行Python代码块，并不是在R代码块中运行Python代码或者调用Python变量。</p>
<h3 id="pypython_variable_name">py$python_variable_name</h3>
<p>R代码块中调用Python方法</p>
<p>py$python_variable_name</p>
<ul>
<li>py相当于Python中的对象</li>
<li>$ 相当于Python中的<strong>点</strong></li>
<li>python_variable_name 是Python代码块中的变量名</li>
</ul>
<p>比如在上文中Python的变量df，在R中调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">py</span><span class="o">$</span><span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="100%" />
    
    
</figure>

<p>现在调用Python对象df时，R会默认将其转为R对象，所以内容一样，样式似乎变好看了。</p>
<h3 id="r代码块中导入python库">R代码块中导入Python库</h3>
<p>使用os库的listdir函数查询当前项目文件夹内的文件列表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [&#39;reticulate学习.md&#39;, &#39;test.csv&#39;, &#39;test.py&#39;, &#39;reticulate学习.html&#39;, &#39;reticulate学习_files&#39;, &#39;reticulate.pdf&#39;, &#39;reticulate学习.Rmd&#39;, &#39;data.py&#39;]
</code></pre></div><p>在R代码块中实现上方的Python功能，如下，很简单</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>

<span class="c1">#导入库</span>
<span class="n">os</span> <span class="o">&lt;-</span> <span class="nf">import</span><span class="p">(</span><span class="s">&#34;os&#34;</span><span class="p">)</span>

<span class="c1">#os库的listdir函数</span>
<span class="n">os</span><span class="o">$</span><span class="nf">listdir</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;reticulate学习.md&#34;    &#34;test.csv&#34;             &#34;test.py&#34;             
## [4] &#34;reticulate学习.html&#34;  &#34;reticulate学习_files&#34; &#34;reticulate.pdf&#34;      
## [7] &#34;reticulate学习.Rmd&#34;   &#34;data.py&#34;
</code></pre></div><p>可以发现</p>
<ul>
<li><code>import(&quot;os)</code>代替了<code>import os</code></li>
<li><code>$</code>代替了<code>.</code></li>
<li><code>&lt;-</code> 代替了 <code>=</code></li>
</ul>
<p>再熟悉一下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
<span class="n">pd</span> <span class="o">&lt;-</span> <span class="nf">import</span><span class="p">(</span><span class="s">&#34;pandas&#34;</span><span class="p">)</span>
<span class="n">df2</span> <span class="o">&lt;-</span> <span class="n">pd</span><span class="o">$</span><span class="nf">read_csv</span><span class="p">(</span><span class="s">&#34;test.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#34;gbk&#34;</span><span class="p">)</span>
<span class="n">df2</span>
</code></pre></div>
<figure >
    
        <img src="img/df2.png" width="100%" />
    
    
</figure>

<p>需要注意的是，在R代码块中执行Python代码时，默认会将Python对象转为R对象。</p>
<h3 id="source_python">source_python()</h3>
<p>使用reticulate包中的source_python(&lsquo;py文件路径&rsquo;)可以导入py文件中的变量，这样就可以在R代码块中使用外部变量。例如我在data.py中准备A和B两个字符串</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A = &#39;我是张三,&#39;
B = &#39;来自河北&#39;
</code></pre></div><p>在R代码块中运行data.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>

<span class="nf">source_python</span><span class="p">(</span><span class="s">&#34;data.py&#34;</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;我是张三,&#34;
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">print</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;来自河北&#34;
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">paste0</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;我是张三,来自河北&#34;
</code></pre></div><h2 id="py_run_file">py_run_file()</h2>
<p>在R代码块中运行项目文件夹中的test.py文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
<span class="nf">py_run_file</span><span class="p">(</span><span class="s">&#34;test.py&#34;</span><span class="p">)</span>
</code></pre></div><h1 id="数据类型对比">数据类型对比</h1>
<table>
<thead>
<tr>
<th>R</th>
<th>Python</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td>Single-element vector</td>
<td>Scalar</td>
<td><code>1</code>, <code>1L</code>, <code>TRUE</code>, <code>&quot;foo&quot;</code></td>
</tr>
<tr>
<td>Multi-element vector</td>
<td>List</td>
<td><code>c(1.0, 2.0, 3.0)</code>, <code>c(1L, 2L, 3L)</code></td>
</tr>
<tr>
<td>List of multiple types</td>
<td>Tuple</td>
<td><code>list(1L, TRUE, &quot;foo&quot;)</code></td>
</tr>
<tr>
<td>Named list</td>
<td>Dict</td>
<td><code>list(a = 1L, b = 2.0)</code>, <code>dict(x = x_data)</code></td>
</tr>
<tr>
<td>Matrix/Array</td>
<td>NumPy ndarray</td>
<td><code>matrix(c(1,2,3,4), nrow = 2, ncol = 2)</code></td>
</tr>
<tr>
<td>Data Frame</td>
<td>Pandas DataFrame</td>
<td><code>data.frame(x = c(1,2,3), y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</code></td>
</tr>
<tr>
<td>Function</td>
<td>Python function</td>
<td><code>function(x) x + 1</code></td>
</tr>
<tr>
<td>NULL, TRUE, FALSE</td>
<td>None, True, False</td>
<td><code>NULL</code>, <code>TRUE</code>, <code>FALSE</code></td>
</tr>
</tbody>
</table>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>科研绘图SciencePlots库</title>
      <link>https://hidadeng.github.io/blog/scienceplots/</link>
      <pubDate>Tue, 23 Nov 2021 18:40:10 +0600</pubDate>
      
      <guid>/blog/scienceplots/</guid>
      <description>科研可视化绘图包</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/SciencePlot%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE.zip">https://github.com/hidadeng/DaDengAndHisPython/blob/master/SciencePlot科研绘图.zip</a></p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">SciencePlots</span>

</code></pre></div><pre><code>Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple/
Collecting SciencePlots
  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/c2/44/7b5c0ecd6f2862671a076425546f86ac540bc48c1a618a82d6faa3b26f58/SciencePlots-1.0.9.tar.gz (10 kB)
  Installing build dependencies ... [?25l/
</code></pre>
<p><strong>tips</strong>:</p>
<p>SciencePlots库需要电脑安装LaTex，其中</p>
<ul>
<li>MacOS电脑安装MacTex  <a href="https://www.tug.org/mactex/">https://www.tug.org/mactex/</a></li>
<li>Windows电脑安装MikTex  <a href="https://miktex.org/">https://miktex.org/</a></li>
</ul>
<h2 id="初始化绘图样式">初始化绘图样式</h2>
<p>在SciencePlots库中科研绘图样式都是用的science</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="s1">&#39;science&#39;</span><span class="p">)</span>
</code></pre></div><p>当然你也可以同时设置多个样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;ieee&#39;</span><span class="p">])</span>
</code></pre></div><p>在上面的代码中， <strong>ieee</strong> 会覆盖掉 <strong>science</strong> 中的某些参数（列宽、字号等）， 以达到符合 <strong>IEEE</strong>论文的绘图要求</p>
<p>如果要临时使用某种绘图样式，科研使用如下语法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#注意，此处是语法示例，</span>
<span class="c1">#如要运行， 请提前准备好x和y的数据</span>
<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;ieee&#39;</span><span class="p">]):</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><h2 id="案例">案例</h2>
<p>定义函数曲线， 准备数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="k">def</span> <span class="nf">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">**</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">x</span> <span class="o">**</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">p</span><span class="p">))</span>

<span class="n">pparam</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">xlabel</span><span class="o">=</span><span class="s1">&#39;Voltage (mV)&#39;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;Current ($\mu$A)&#39;</span><span class="p">)</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.75</span><span class="p">,</span> <span class="mf">1.25</span><span class="p">,</span> <span class="mi">201</span><span class="p">)</span>
</code></pre></div><h3 id="science样式">science样式</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">]):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Order&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">autoscale</span><span class="p">(</span><span class="n">tight</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">**</span><span class="n">pparam</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig1.pdf&#39;</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig1.jpg&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_12_0.png" width="800" />
    
    
</figure>

<h3 id="scienceieee样式">science+ieee样式</h3>
<p>针对IEEE论文准备的<strong>science+ieee</strong>样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;ieee&#39;</span><span class="p">]):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">100</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Order&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">autoscale</span><span class="p">(</span><span class="n">tight</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">**</span><span class="n">pparam</span><span class="p">)</span>
    <span class="c1"># Note: $\mu$ doesn&#39;t work with Times font (used by ieee style)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;Current (\textmu A)&#39;</span><span class="p">)</span>  
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig2a.pdf&#39;</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig2a.jpg&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_14_0.png" width="800" />
    
    
</figure>

<h3 id="sciencescatter样式">science+scatter样式</h3>
<p><strong>IEEE</strong> 要求图形以黑白打印时必须可读。 <strong>ieee</strong> 样式还可以将图形宽度设置为适合IEEE论文的一列。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;scatter&#39;</span><span class="p">]):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="s1">&#39;k--&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">fill_between</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mf">2.2</span><span class="p">,</span> <span class="mf">1.8</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mf">1.8</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">],</span>
                    <span class="n">color</span><span class="o">=</span><span class="s1">&#39;dodgerblue&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="n">y1</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">r</span><span class="s2">&#34;$^\#$</span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Sample&#39;</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">xlbl</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&#34;$\log_</span><span class="si">{10}</span><span class="s2">\left(\frac{L_\mathrm</span><span class="si">{IR}</span><span class="s2">}{\mathrm</span><span class="si">{L}</span><span class="s2">_\odot}\right)$&#34;</span>
    <span class="n">ylbl</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&#34;$\log_</span><span class="si">{10}</span><span class="s2">\left(\frac{L_\mathrm</span><span class="si">{6.2}</span><span class="s2">}{\mathrm</span><span class="si">{L}</span><span class="s2">_\odot}\right)$&#34;</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="n">xlbl</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="n">ylbl</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig3.pdf&#39;</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig3.jpg&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_16_0.png" width="800" />
    
    
</figure>

<h3 id="dark_background-sciencehigh-vis">dark_background +science+high-vis</h3>
<p>您还可以将这些样式与Matplotlib随附的其他样式结合使用。 例如，dark_background +science+high-vis样式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">([</span><span class="s1">&#39;dark_background&#39;</span><span class="p">,</span> <span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;high-vis&#39;</span><span class="p">]):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Order&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">autoscale</span><span class="p">(</span><span class="n">tight</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">**</span><span class="n">pparam</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig5.pdf&#39;</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;figures/fig5.jpg&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_18_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>plotnine绘图 | python的ggplot2语法绘图包</title>
      <link>https://hidadeng.github.io/blog/plotnine/</link>
      <pubDate>Tue, 23 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/plotnine/</guid>
      <description>ggplot2语法，三行代码绘图</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/plotnine%E5%8C%85%E5%AD%A6%E4%B9%A0-Python%E7%89%88%E7%9A%84ggplot2.ipynb">点击跳转到下载链接页面</a></p>
<br>
<p>R语言的ggplot2绘图能力超强，python虽有matplotlib，但是语法臃肿，使用复杂，入门极难，seaborn的出现稍微改善了matplotlib代码量问题，但是定制化程度依然需要借助matplotlib，使用难度依然很大。</p>
<p>好消息是python中有一个plotnine包，可以实现绝大多数ggplot2的绘图功能，两者语法十分相似，R和Python的语法转换成本大大降低。</p>
<ul>
<li>plotnine文档
<a href="https://plotnine.readthedocs.io/en/latest/">https://plotnine.readthedocs.io/en/latest/</a></li>
<li>R语言ggplot2文档
<a href="https://ggplot2.tidyverse.org/reference/index.html">https://ggplot2.tidyverse.org/reference/index.html</a></li>
</ul>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">plotnine</span>

</code></pre></div><h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine.data</span> <span class="kn">import</span> <span class="n">mpg</span>

<span class="c1">#dataframe</span>
<span class="n">mpg</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">manufacturer</th>
<th style="text-align:left">model</th>
<th style="text-align:right">displ</th>
<th style="text-align:right">year</th>
<th style="text-align:right">cyl</th>
<th style="text-align:left">trans</th>
<th style="text-align:left">drv</th>
<th style="text-align:right">cty</th>
<th style="text-align:right">hwy</th>
<th style="text-align:left">fl</th>
<th style="text-align:left">class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">1.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">4</td>
<td style="text-align:left">auto(l5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">18</td>
<td style="text-align:right">29</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">1.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">4</td>
<td style="text-align:left">manual(m5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">21</td>
<td style="text-align:right">29</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2008</td>
<td style="text-align:right">4</td>
<td style="text-align:left">manual(m6)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">20</td>
<td style="text-align:right">31</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2008</td>
<td style="text-align:right">4</td>
<td style="text-align:left">auto(av)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">21</td>
<td style="text-align:right">30</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">6</td>
<td style="text-align:left">auto(l5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">16</td>
<td style="text-align:right">26</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
</tbody>
</table>
<h2 id="快速作图qplot">快速作图qplot</h2>
<p>我们先直接看最简单好用的快速作图函数qplot(x, y, data)</p>
<ul>
<li>横坐标displ</li>
<li>纵坐标cty</li>
<li>数据mpg</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">qplot</span>

<span class="n">qplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> 
      <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">,</span>
      <span class="n">data</span><span class="o">=</span><span class="n">mpg</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_6_0.png" width="800" />
    
    
</figure>

<h2 id="ggplot图层">ggplot图层</h2>
<p>qplot是快速作图函数，如果想让图更好看，进行私人订制，那么我们需要进行图层设计</p>
<p>首先设置ggplot图层（相当于买了一个高级画布），</p>
<ul>
<li>数据mpg</li>
<li>横坐标x轴为displ</li>
<li>纵坐标y轴cty</li>
</ul>
<p>在plotnine中，变量所对应的数据均可通过字段名调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">geom_point</span><span class="p">,</span> <span class="n">aes</span>

<span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_8_0.png" width="800" />
    
    
</figure>

<h2 id="图层叠加">图层叠加</h2>
<p>我们可以看到，已经绘制出一个空的ggplot图层，x轴为displ，y轴为cty。</p>
<p>接下来我们给这个图层上加上数据对应的散点，使用geom_point()直接追加在ggplot图层之上即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_10_0.png" width="800" />
    
    
</figure>

<h2 id="color">color</h2>
<p>在上图中，散点是没有区分每辆车的气缸数cyl。</p>
<p>在geom_point()中，我们可以按照气缸数cyl分门别类，按照颜色显示出来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;cyl&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_12_0.png" width="800" />
    
    
</figure>

<p>上图挺好看的，有时候需要绘制的字段是离散型数值，但是上色后可能不够明显，需要声明该字段为离散型。这时候用factor()来告诉plotnine，这个字段是离散型数值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;factor(cyl)&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_14_0.png" width="800" />
    
    
</figure>

<h2 id="size">size</h2>
<p>有时候为了增加可视化显示的维度数，还可以考虑加入点的大小size</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="s1">&#39;hwy&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_16_0.png" width="800" />
    
    
</figure>

<h2 id="梯度色">梯度色</h2>
<p>如果你想自己设置颜色的梯度，可以通过scale_color_gradient设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">scale_color_gradient</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
<span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;hwy&#39;</span><span class="p">))</span>
<span class="o">+</span> <span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_18_0.png" width="800" />
    
    
</figure>

<h2 id="条形图">条形图</h2>
<p>plotnine中可绘制的图有很多，刚刚已经讲了散点图，接下来我们看看plotnine中的条形图。</p>
<p>首先准备一下数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;variable&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">],</span>
    <span class="s1">&#39;category&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Female&#39;</span><span class="p">,</span> <span class="s1">&#39;Male&#39;</span><span class="p">,</span> <span class="s1">&#39;1-24&#39;</span><span class="p">,</span> <span class="s1">&#39;25-54&#39;</span><span class="p">,</span> <span class="s1">&#39;55+&#39;</span><span class="p">,</span> <span class="s1">&#39;Lo&#39;</span><span class="p">,</span> <span class="s1">&#39;Lo-Med&#39;</span><span class="p">,</span> <span class="s1">&#39;Med&#39;</span><span class="p">,</span> <span class="s1">&#39;High&#39;</span><span class="p">],</span>
    <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">40</span><span class="p">],</span>
<span class="p">})</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Categorical</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">],</span> <span class="n">categories</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Categorical</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">],</span> <span class="n">categories</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">])</span>

<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">variable</th>
<th style="text-align:left">category</th>
<th style="text-align:right">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">gender</td>
<td style="text-align:left">Female</td>
<td style="text-align:right">60</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">gender</td>
<td style="text-align:left">Male</td>
<td style="text-align:right">40</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">age</td>
<td style="text-align:left">1-24</td>
<td style="text-align:right">50</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">age</td>
<td style="text-align:left">25-54</td>
<td style="text-align:right">30</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">age</td>
<td style="text-align:left">55+</td>
<td style="text-align:right">20</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Lo</td>
<td style="text-align:right">10</td>
</tr>
<tr>
<td style="text-align:right">6</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Lo-Med</td>
<td style="text-align:right">25</td>
</tr>
<tr>
<td style="text-align:right">7</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Med</td>
<td style="text-align:right">25</td>
</tr>
<tr>
<td style="text-align:right">8</td>
<td style="text-align:left">income</td>
<td style="text-align:left">High</td>
<td style="text-align:right">40</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">aes</span><span class="p">,</span> <span class="n">geom_text</span><span class="p">,</span> <span class="n">position_dodge</span><span class="p">,</span> <span class="n">geom_point</span>

<span class="c1">#调整文本位置</span>
<span class="n">dodge_text</span> <span class="o">=</span> <span class="n">position_dodge</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">0.9</span><span class="p">)</span>                              <span class="c1"># new</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">,</span> 
                <span class="n">y</span><span class="o">=</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> 
                <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;category&#39;</span><span class="p">))</span> <span class="c1">#类别填充颜色</span>
 <span class="o">+</span> <span class="n">geom_col</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="s1">&#39;dodge&#39;</span><span class="p">,</span> 
            <span class="n">show_legend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>   <span class="c1"># modified</span>
 <span class="o">+</span> <span class="n">geom_text</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="o">=-</span><span class="mf">.5</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;category&#39;</span><span class="p">),</span>                          <span class="c1"># new</span>
             <span class="n">position</span><span class="o">=</span><span class="n">dodge_text</span><span class="p">,</span>
             <span class="n">color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span>  <span class="c1">#文本颜色</span>
             <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>   <span class="c1">#字号</span>
             <span class="n">angle</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="c1">#文本的角度</span>
             <span class="n">va</span><span class="o">=</span><span class="s1">&#39;top&#39;</span><span class="p">)</span>
    
 <span class="o">+</span> <span class="n">lims</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>                                                 <span class="c1"># new</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_22_0.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine.data</span> <span class="kn">import</span> <span class="n">economics_long</span>

<span class="n">economics_long</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">date</th>
<th style="text-align:left">variable</th>
<th style="text-align:right">value</th>
<th style="text-align:right">value01</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">1967-07-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">507.4</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">1967-08-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">510.5</td>
<td style="text-align:right">0.000266001</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">1967-09-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">516.3</td>
<td style="text-align:right">0.00076368</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">1967-10-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">512.9</td>
<td style="text-align:right">0.000471937</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">1967-11-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">518.1</td>
<td style="text-align:right">0.000918132</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">aes</span><span class="p">,</span> <span class="n">geom_line</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">economics_long</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;value01&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">))</span>
 <span class="o">+</span> <span class="n">geom_line</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_25_0.png" width="800" />
    
    
</figure>

<p>plotnine目前已经支持绝大多数ggplot2，但是文档方面没有ggplot2全，所以学习plotnine时可以参考ggplot2。</p>
<ul>
<li>plotnine文档
<a href="https://plotnine.readthedocs.io/en/latest/">https://plotnine.readthedocs.io/en/latest/</a></li>
<li>R语言ggplot2文档
<a href="https://ggplot2.tidyverse.org/reference/index.html">https://ggplot2.tidyverse.org/reference/index.html</a></li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>YelpDaset | 酒店管理类数据集10&#43;G</title>
      <link>https://hidadeng.github.io/blog/yelpdataset_10g/</link>
      <pubDate>Sat, 20 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/yelpdataset_10g/</guid>
      <description>Yelp数据集是我们用于个人，教育和学术目的的业务，评论和用户数据的子集。字段丰富，适合玩数据分析</description>
      <content:encoded><![CDATA[<h2 id="数据集下载">数据集下载</h2>
<p>链接:https://pan.baidu.com/s/1rUfj7NYYAnM3NuFWCHyPpA 密码:ux8z</p>
<p>在昨天发的文章里提到了yelp数据集，官网显示&quot;Yelp数据集是我们用于个人，教育和学术目的的业务，评论和用户数据的子集。 以JSON文件形式提供，可用于在学习如何制作移动应用程序的同时，向学生介绍数据库，学习NLP或提供示例生产数据。&quot;</p>
<p>yelp官网显示，这个数据集亮点如下：</p>
<ul>
<li>668+w条评论</li>
<li>19+w个商业机构</li>
<li>20w张图片</li>
<li>10个都市区域</li>
<li>字段包括:营业时间、是否泊车、可用性和环境</li>
</ul>
<p><img loading="lazy" src="img/yelp.png" alt=""  />
</p>
<p>在kaggle上也能看到使用这个数据集的案例，说不定有你需要的分析方法。</p>
<p><img loading="lazy" src="img/kaggle.png" alt=""  />
</p>
<p>我已经从yelp官网下载了数据, 参照kaggle的很多例子，咱们也在自己电脑上跑跑简单的分析</p>
<h2 id="business数据读取">business数据读取</h2>
<p>kaggle中的数据是csv文件，咱这里是json，略有不同，但读取都可以用pandas读取</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#一开始用注释掉的代码，有bug，经过百度找到lines=True解决方案</span>
<span class="c1">#business = pd.read_json(&#39;yelp_dataset/business.json&#39;)</span>
<span class="n">business</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="s1">&#39;yelp_dataset/business.json&#39;</span><span class="p">,</span> <span class="n">lines</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">business</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/1.png" alt=""  />
</p>
<h2 id="评分分布">评分分布</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="n">sns</span><span class="o">.</span><span class="n">color_palette</span><span class="p">()</span>
</code></pre></div><pre><code>[(0.12156862745098039, 0.4666666666666667, 0.7058823529411765),
 (1.0, 0.4980392156862745, 0.054901960784313725),
 (0.17254901960784313, 0.6274509803921569, 0.17254901960784313),
 (0.8392156862745098, 0.15294117647058825, 0.1568627450980392),
 (0.5803921568627451, 0.403921568627451, 0.7411764705882353),
 (0.5490196078431373, 0.33725490196078434, 0.29411764705882354),
 (0.8901960784313725, 0.4666666666666667, 0.7607843137254902),
 (0.4980392156862745, 0.4980392156862745, 0.4980392156862745),
 (0.7372549019607844, 0.7411764705882353, 0.13333333333333333),
 (0.09019607843137255, 0.7450980392156863, 0.8117647058823529)]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>

<span class="n">colors</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">color_palette</span><span class="p">()</span>
<span class="n">rating</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;stars&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">rating</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">rating</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> 
            <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
            <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">9</span><span class="p">],</span>
            <span class="n">rot</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#字体倾斜角度</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Rating Distribution of Yelp&#39;</span><span class="p">,</span><span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_5_0.png" alt=""  />
</p>
<h2 id="行业统计">行业统计</h2>
<p>查看行业店家数量分布</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="k">else</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
<span class="n">category_str</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">])</span>
<span class="n">category_list</span> <span class="o">=</span> <span class="n">category_str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
<span class="n">category_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">category_list</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">])</span>
<span class="n">top15_category</span> <span class="o">=</span> <span class="n">category_df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()[:</span><span class="mi">15</span><span class="p">]</span>
<span class="n">top15_category</span>
<span class="n">top15_category</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span>
                    <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">20</span><span class="p">],</span>
                    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> 
                    <span class="n">rot</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
                    <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Top 20 Category in Yelp&#39;</span><span class="p">,</span>
          <span class="n">fontsize</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> 
          <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_7_0.png" alt=""  />
</p>
<h2 id="城市分布">城市分布</h2>
<p>显示yelp中Top20城</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">citys</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;city&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()[:</span><span class="mi">20</span><span class="p">]</span>
<span class="n">citys</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="c1">#降序，原地修改原始数据</span>
<span class="n">citys</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;barh&#39;</span><span class="p">,</span>   <span class="c1">#水平条形图</span>
           <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
           <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
           <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">20</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Top 20 city in the Yelp&#39;</span><span class="p">,</span> 
          <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> 
          <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_9_0.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用pandas_bokeh做可视化</title>
      <link>https://hidadeng.github.io/blog/pandas_bokeh_vis/</link>
      <pubDate>Thu, 18 Nov 2021 17:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_bokeh_vis/</guid>
      <description>简洁数据可视化</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96pandas_bokeh.zip">点击下载代码</a></p>
<h2 id="pandas_bokeh">pandas_bokeh</h2>
<p>pandas_bokeh可以使得dataframe直接调用bokeh底层代码。通过使用pandas_bokeh，可以在notebook或者html中显示，语法相比于bokeh更简洁易用。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pandas_bokeh</span>
</code></pre></div><h2 id="快速上手">快速上手</h2>
<p>对fruits.csv做一个条形图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">fruits</th>
<th style="text-align:right">2015</th>
<th style="text-align:right">2016</th>
<th style="text-align:right">2017</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">苹果</td>
<td style="text-align:right">2</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">梨</td>
<td style="text-align:right">1</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">香蕉</td>
<td style="text-align:right">4</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">草莓</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">樱桃</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">橘子</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">pandas_bokeh</span>
<span class="kn">import</span> <span class="nn">warnings</span> 
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s2">&#34;ignore&#34;</span><span class="p">)</span> <span class="c1">#忽略某些不影响程序的提示</span>

<span class="c1">#在notebook中能显示可视化结果</span>
<span class="n">pandas_bokeh</span><span class="o">.</span><span class="n">output_notebook</span><span class="p">()</span>

<span class="c1">#将fruits列设置为行索引</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>


<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> 
              <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;fruits&#39;</span><span class="p">,</span> <span class="c1">#将fruits列选做x轴</span>
              <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;2015&#39;</span><span class="p">,</span> <span class="s1">&#39;2016&#39;</span><span class="p">,</span> <span class="s1">&#39;2017&#39;</span><span class="p">],</span> <span class="c1">#将年份选做y轴</span>
              <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;水果价格(元/斤)&#39;</span><span class="p">,</span>
              <span class="n">title</span><span class="o">=</span><span class="s1">&#39;水果&#39;</span><span class="p">,</span>
              <span class="n">show_figure</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#显示</span>
</code></pre></div>
<figure >
    
        <img src="img/2.gif" width="800" />
    
    
</figure>

<p>上面的例子已经可以看到该库的简洁优美之处，现在我们多学点</p>
<h2 id="pandas_bokeh输出设定">pandas_bokeh输出设定</h2>
<ul>
<li>pandas_bokeh.output_notebook() 在notebook中能显示可视化结果</li>
<li>pandas_bokeh.output_file(filename) 将结果输出到html文件中</li>
</ul>
<h2 id="支持可视化图种类">支持可视化图种类</h2>
<ul>
<li>line</li>
<li>bar</li>
<li>point</li>
<li>scatter</li>
<li>histogram</li>
<li>area</li>
<li>pie</li>
<li>map</li>
</ul>
<p>以bar为例，调用可视化接口时，有以下两种使用方法</p>
<ul>
<li>df.plot_bokeh.line(&hellip;)</li>
<li>df.plot_bokeh(kind=&lsquo;line&rsquo;)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fake_stocks.xlsx&#39;</span><span class="p">)</span>

<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;line&#34;</span><span class="p">,</span> 
              <span class="n">x</span><span class="o">=</span><span class="s1">&#39;日期&#39;</span><span class="p">,</span> <span class="c1">#将excel中的日期列当做x轴</span>
              <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Google&#39;</span><span class="p">,</span> <span class="s1">&#39;Apple&#39;</span><span class="p">])</span> <span class="c1">#将&#39;Google&#39;, &#39;Apple&#39;两列作为y轴</span>
</code></pre></div>
<figure >
    
        <img src="img/3.gif" width="800" />
    
    
</figure>

<h2 id="高级参数">高级参数</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">figsize</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">xlim</span><span class="p">,</span> <span class="n">ylim</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span>
              <span class="n">logx</span><span class="p">,</span> <span class="n">logy</span><span class="p">,</span> <span class="n">xticks</span><span class="p">,</span> <span class="n">yticks</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">colormap</span><span class="p">,</span> <span class="n">hovertool</span><span class="p">,</span> 
              <span class="n">zooming</span><span class="p">,</span> <span class="n">panning</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div><ul>
<li>kind: 支持的图种类&quot;line&quot;, &ldquo;point&rdquo;, &ldquo;scatter&rdquo;, &ldquo;bar&rdquo; ,&ldquo;histogram&quot;等</li>
<li>x: 选中数据某列名作为x轴。如果x不传入参数，会默认使用df的索引作为x轴</li>
<li>y: 将数据中的某列或某些列指定为y轴</li>
<li>figsize: 图的尺寸,如figsize=(600, 350)</li>
<li>title:  图的标题</li>
<li>xlim/ylim: 设置图的x轴和y轴的范围</li>
<li>xlabel/ylabel: 设置x轴和y轴的名字</li>
<li>logx/logy: 布尔型值，对x和y的数据是否进行log变换</li>
<li>xticks/yticks: 显性定义横纵坐标刻度</li>
<li>color: 对图中使用同一的颜色，如果想定义多种颜色，请使用colormap参数</li>
<li>colormap: 可以对图中的不同对象设置颜色， 传入的是颜色字符串列表。</li>
<li>hovertool: 默认True，鼠标放在图上会悬浮显示具体信息。</li>
<li>zooming: 布尔值，默认True支持缩放</li>
<li>panning: 布尔值，默认True支持平移</li>
<li>kwargs**: 更多参数设定请看官方文档</li>
</ul>
<h2 id="文档">文档</h2>
<ul>
<li>pandas_bokeh文档地址https://github.com/PatrikHlobil/Pandas-Bokeh</li>
<li>Bokeh官方文档地址https://docs.bokeh.org/en/latest/</li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>2021最流行的8张可视化图</title>
      <link>https://hidadeng.github.io/blog/8_most_popular_vis/</link>
      <pubDate>Wed, 10 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/8_most_popular_vis/</guid>
      <description>炫酷可视化案例集锦尽在本文</description>
      <content:encoded><![CDATA[<h2 id="1-酒精消费">1. 酒精消费</h2>
<p>此可视化显示了 2001 年至 2018 年人均（人均）饮酒量最高的国家。有趣的是，这段时间的最高国家主要由东非和欧洲国家组成。</p>
<p>如果您想了解更多关于全球酒精消费的信息，请查看牛津关于全球酒精消费的报告</p>
<p><a href="https://ourworldindata.org/alcohol-consumptio">https://ourworldindata.org/alcohol-consumptio</a></p>
<p>以防万一您感兴趣，这种类型的数据可视化称为条形图竞赛。 我相信你已经在 YouTube 和 Reddit 上看到了很多这样的内容。 如果您想自己构建一个，这里有一个教程，您可以查看</p>
<p><a href="https://towardsdatascience.com/step-by-step-tutorial-create-a-bar-chart-race-animation-da7d5fcd7079">https://towardsdatascience.com/step-by-step-tutorial-create-a-bar-chart-race-animation-da7d5fcd7079</a></p>
<br>
<h2 id="2-健康财富的221年">2. 健康&amp;财富的221年</h2>
<p>通常少即是多，但这是我最喜欢的可视化，因为它以清晰的方式传达了如此多的信息，而且非常积极！</p>
<p>此可视化显示了每个国家的财富（人均 GDP）和健康（平均预期寿命）如何随时间变化。 圆圈的大小代表每个国家的人口，颜色代表每个国家所属的大陆。</p>
<p>看到我们作为一个物种走了多远真是太神奇了，是吧？</p>
<p><a href="https://www.reddit.com/r/dataisbeautiful/comments/lmlrks/oc_our_health_and_wealth_over_221_years/">https://www.reddit.com/r/dataisbeautiful/comments/lmlrks/oc_our_health_and_wealth_over_221_years/</a></p>
<br>
<h2 id="3-地球光纤电缆网络-3d-地图">3. 地球光纤电缆网络 3D 地图</h2>
<p>这个由 Tyler Morgan 创建的可视化是世界光缆网络的 3D 地图。 该网络用于传输电话信号、互联网通信和电视信号。</p>
<p>真正看到我们在全球范围内的相互联系是非常疯狂的，不是吗？</p>
<p>这是使用 rayrender 和 geojsonsf 包在 R 中创建的。 如果您想查看完整代码，可以在此处查看。</p>
<p><a href="https://gist.github.com/tylermorganwall/b222fcebcac3de56a6e144d73d166322">https://gist.github.com/tylermorganwall/b222fcebcac3de56a6e144d73d166322</a></p>
<br>
<h2 id="4-美国covid病例增长">4. 美国Covid病例增长</h2>
<p>我不是特别喜欢花哨的数据可视化，因为它们通常不像简单的图形（如折线图）那样有效地传达信息。 但是，因为这个动画非常独特（而且有点令人不安），我觉得有必要将它添加到前 10 个可视化效果中。</p>
<p>虽然没有轴可以告诉我们绝对数字，但它是一个简洁的可视化，向我们展示了与 2020 年年初相比，COVID 病例数的增长速度。</p>
<p>这是使用 d3 创建的，完整代码可以在这里找到。</p>
<p><a href="https://observablehq.com/@bagami/the-us-covid-syringe">https://observablehq.com/@bagami/the-us-covid-syringe</a></p>
<br>
<h2 id="5-美国-covid-等值线图">5. 美国 COVID 等值线图</h2>
<p>此可视化告诉我们，从 2020 年 2 月开始到 2021 年 10 月，美国的 COVID 病例是如何增长的。有趣的是，您可以清楚地看到这一时期 COVID 的“波浪”。</p>
<p>这种类型的可视化被称为<strong>等值线图</strong>，它在比较不同地区（州、国家、大陆等）的特定变量随着时间的推移非常强大。</p>
<p>如果你想学习如何用 Python 构建一个，我在这里写了一份创建 Choropleth 地图的分步指南。</p>
<p><a href="https://towardsdatascience.com/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5">https://towardsdatascience.com/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5</a></p>
<br>
<h2 id="6-所有精神疾病的地图">6. 所有精神疾病的地图</h2>
<p>此可视化显示了 DSM-5 中的每一种精神障碍，它代表精神障碍诊断和统计手册。 它是美国精神障碍的标准分类。
有 20 多个类别和数百种疾病，一旦您开始了解它，这种可视化可能会花费比您想象的更多的时间。</p>
<p><a href="https://www.reddit.com/r/dataisbeautiful/comments/kugn7e/oc_every_mental_disorder_diagnosis_in_the_dsm5/">https://www.reddit.com/r/dataisbeautiful/comments/kugn7e/oc_every_mental_disorder_diagnosis_in_the_dsm5/</a></p>
<p><a href="https://webcache.googleusercontent.com/search?q=cache:LY74prf8a0gJ:https://www.psychiatry.org/File%2520Library/Psychiatrists/Practice/DSM/APA_DSM-5-Contents.pdf+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us&amp;client=safari">https://webcache.googleusercontent.com/search?q=cache:LY74prf8a0gJ:https://www.psychiatry.org/File%2520Library/Psychiatrists/Practice/DSM/APA_DSM-5-Contents.pdf+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us&amp;client=safari</a></p>
<br>
<h2 id="7-我们的塑料去哪儿了">7. 我们的塑料去哪儿了？</h2>
<p>该动画展示了塑料的生命周期，以及其中大部分的结束位置。 可悲的是，很明显，我们没有像我们应该回收的那样回收尽可能多的塑料，惊人的 60% 最终被填埋或进入海洋。</p>
<p>这种类型的可视化是一个动画桑基图，它类似于树图，因为它将数据分解为几个子组并按比例表示值。</p>
<p>如果您想学习如何在 Python 中构建 Sankey 图，请查看此链接。</p>
<p><a href="https://towardsdatascience.com/sankey-diagram-basics-with-pythons-plotly-7a13d557401a">https://towardsdatascience.com/sankey-diagram-basics-with-pythons-plotly-7a13d557401a</a></p>
<br>
<h2 id="8--近60年来top-100-艺术家">8.  近60年来，Top 100 艺术家</h2>
<p>最后，这个可视化显示了 Billboard 1960 年到 2020 年的前 100 位艺术家。我个人喜欢这个图表，因为它提供了很多信息：你可以看到顶级艺术家是谁，他们什么时候最流行，以及他们有多少歌曲 称霸排行榜！</p>
<p>你认识多少艺术家？</p>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://hidadeng.github.io/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用matplotlib绘制超可爱超萌化的图表</title>
      <link>https://hidadeng.github.io/blog/cute_matplotlib/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/cute_matplotlib/</guid>
      <description>萌化matplotlib图</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031%E4%BD%BF%E7%94%A8matplotlib%E7%BB%98%E5%88%B6%E5%8D%A1%E9%80%9A%E5%8C%96%E5%9B%BE%E8%A1%A8">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031使用matplotlib绘制卡通化图表</a></p>
<p>数据可视化是讲故事的好方法，从中可以轻松地吸收信息并识别数据中的模式。我们的一位学生决定使用 Matplotlib 在 Python 中创建数据可视化，以了解 Netflix 上可用的不同类型的内容。本文将重点介绍使用 Matplotlib 以一种有趣的方式进行数据可视化。</p>
<p>在 Netflix 上看完精彩的节目或电影后，您有没有想过 Netflix 为您提供了如此多的惊人内容？当然，我并不孤单，不是吗？一个想法会导致另一个想法，在不知不觉中，您已经下定决心进行探索性数据分析，以了解更多关于最受欢迎的演员是谁以及哪个国家/地区更喜欢哪种类型的信息。</p>
<p>使用 Python 制作常规的条形图和饼图，虽然它们在传达结果方面做得很好，但我想为这个项目添加一些有趣的元素。</p>
<p>我最近了解到你可以在 Python 最流行的数据可视化库 Matplotlib 中创建类似 xkcd 的绘图，并决定我应该在这个项目中整理我所有的 Matplotlib 可视化，只是为了让事情变得更有趣。</p>
<p>一起来看看数据怎么说吧！</p>
<br>
<h2 id="导入数据">导入数据</h2>
<p>7787部电影/TV节目的信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;netflix_titles.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="netflix历年发展里程碑">Netflix历年发展里程碑</h2>
<p>描述一下 Netflix 多年来演变的时间表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.dpi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">200</span>


<span class="c1"># these go on the numbers below</span>
<span class="n">tl_dates</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;1997</span><span class="se">\n</span><span class="s2">Founded&#34;</span><span class="p">,</span>
    <span class="s2">&#34;1998</span><span class="se">\n</span><span class="s2">Mail Service&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2003</span><span class="se">\n</span><span class="s2">Goes Public&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2007</span><span class="se">\n</span><span class="s2">Streaming service&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2016</span><span class="se">\n</span><span class="s2">Goes Global&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2021</span><span class="se">\n</span><span class="s2">Netflix &amp; Chill&#34;</span>
<span class="p">]</span>
<span class="n">tl_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="c1"># the numbers go on these</span>
<span class="n">tl_sub_x</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mf">6.5</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>

<span class="n">tl_sub_times</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;1998&#34;</span><span class="p">,</span><span class="s2">&#34;2000&#34;</span><span class="p">,</span><span class="s2">&#34;2006&#34;</span><span class="p">,</span><span class="s2">&#34;2010&#34;</span><span class="p">,</span><span class="s2">&#34;2012&#34;</span>
<span class="p">]</span>

<span class="n">tl_text</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;Netflix.com launched&#34;</span><span class="p">,</span>
    <span class="s2">&#34;Starts</span><span class="se">\n</span><span class="s2">Personal</span><span class="se">\n</span><span class="s2">Recommendations&#34;</span><span class="p">,</span><span class="s2">&#34;Billionth DVD Delivery&#34;</span><span class="p">,</span><span class="s2">&#34;Canadian</span><span class="se">\n</span><span class="s2">Launch&#34;</span><span class="p">,</span><span class="s2">&#34;UK Launch&#34;</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
<span class="c1"># Set figure &amp; Axes</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">constrained_layout</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mf">1.75</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

    <span class="c1"># Timeline : line</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">xmin</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">xmax</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;deeppink&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Timeline : Date Points</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;palevioletred&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
    <span class="c1"># Timeline : Time Points</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">,</span><span class="n">zorder</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

    <span class="c1"># Date Text</span>
    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">date</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">tl_dates</span><span class="p">):</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.55</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
                <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">,</span>
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>

    <span class="c1"># Stemplot : vertical line</span>
    <span class="n">levels</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">))</span>
    <span class="n">levels</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.3</span>
    <span class="n">levels</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.3</span>
    <span class="n">markerline</span><span class="p">,</span> <span class="n">stemline</span><span class="p">,</span> <span class="n">baseline</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">levels</span><span class="p">,</span> <span class="n">use_line_collection</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">baseline</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">markerline</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">stemline</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">)</span>

    <span class="c1"># Text</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">txt</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">tl_sub_times</span><span class="p">,</span> <span class="n">tl_text</span><span class="p">):</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mf">1.3</span><span class="o">*</span><span class="p">(</span><span class="n">idx</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
                <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">,</span>
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>

        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mf">1.3</span><span class="o">*</span><span class="p">(</span><span class="n">idx</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mf">0.6</span><span class="p">,</span> <span class="n">txt</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
            <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">)</span>

    <span class="c1"># Spine</span>
    <span class="k">for</span> <span class="n">spine</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">&#34;left&#34;</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">spines</span><span class="p">[</span><span class="n">spine</span><span class="p">]</span><span class="o">.</span><span class="n">set_visible</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>

    <span class="c1"># Ticks</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">([])</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticks</span><span class="p">([])</span>

    <span class="c1"># Title</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s2">&#34;Netflix through the years&#34;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s2">&#34;bold&#34;</span><span class="p">,</span> <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="mf">2.4</span><span class="p">,</span><span class="mf">1.57</span><span class="p">,</span><span class="s2">&#34;From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?&#34;</span><span class="p">,</span> <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;mediumblue&#39;</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="电影-vs-电视综艺">电影 vs 电视综艺</h2>
<p>接下来，我决定看一下电影与电视节目的比例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;type&#34;</span>
<span class="n">grouped</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">grouped</span> <span class="o">=</span> <span class="n">grouped</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="n">col</span> <span class="p">:</span> <span class="s2">&#34;count&#34;</span><span class="p">,</span> <span class="s2">&#34;index&#34;</span> <span class="p">:</span> <span class="n">col</span><span class="p">})</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">explode</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>  <span class="c1"># only &#34;explode&#34; the 2nd slice (i.e. &#39;TV Show&#39;)</span>
    <span class="n">fig1</span><span class="p">,</span> <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">ax1</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">grouped</span><span class="p">[</span><span class="s2">&#34;count&#34;</span><span class="p">],</span> <span class="n">explode</span><span class="o">=</span><span class="n">explode</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">grouped</span><span class="p">[</span><span class="s2">&#34;type&#34;</span><span class="p">],</span> <span class="n">autopct</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%1.1f%%</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="n">shadow</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">startangle</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>
    <span class="n">ax1</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;equal&#39;</span><span class="p">)</span>  <span class="c1"># Equal aspect ratio ensures that pie is drawn as a circle.</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="内容最多的国家">内容最多的国家</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;country&#34;</span>

<span class="n">categories</span> <span class="o">=</span> <span class="s2">&#34;, &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span>
<span class="n">counter_list</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
<span class="n">counter_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span> <span class="k">if</span> <span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span><span class="p">]</span>
<span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">]</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">y_pos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">))</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">y_pos</span><span class="p">,</span> <span class="n">values</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticks</span><span class="p">(</span><span class="n">y_pos</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticklabels</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">invert_yaxis</span><span class="p">()</span>  <span class="c1"># labels read top-to-bottom</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;Content&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;Countries with most content&#39;</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be3.png" width="100%" />
    
    
</figure>

<br>
<h2 id="最流行的导演">最流行的导演</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">import</span> <span class="n">figure</span>
<span class="kn">import</span> <span class="nn">math</span>

<span class="n">colours</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;orangered&#34;</span><span class="p">,</span> <span class="s2">&#34;mediumseagreen&#34;</span><span class="p">,</span> <span class="s2">&#34;darkturquoise&#34;</span><span class="p">,</span> <span class="s2">&#34;mediumpurple&#34;</span><span class="p">,</span> <span class="s2">&#34;deeppink&#34;</span><span class="p">,</span> <span class="s2">&#34;indianred&#34;</span><span class="p">]</span>
<span class="n">countries_list</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;United States&#34;</span><span class="p">,</span> <span class="s2">&#34;India&#34;</span><span class="p">,</span> <span class="s2">&#34;United Kingdom&#34;</span><span class="p">,</span> <span class="s2">&#34;Japan&#34;</span><span class="p">,</span> <span class="s2">&#34;France&#34;</span><span class="p">,</span> <span class="s2">&#34;Canada&#34;</span><span class="p">]</span>
<span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;director&#34;</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">figure</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
    <span class="n">x</span><span class="o">=</span><span class="mi">1</span>
    <span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries_list</span><span class="p">:</span>
        <span class="n">country_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;country&#34;</span><span class="p">]</span><span class="o">==</span><span class="n">country</span><span class="p">]</span>
        <span class="n">categories</span> <span class="o">=</span> <span class="s2">&#34;, &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">country_df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span>
        <span class="n">counter_list</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
        <span class="n">counter_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span> <span class="k">if</span> <span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span><span class="p">]</span>
        <span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">:</span>
            <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span><span class="n">values</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">colours</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">values_int</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
        <span class="n">x</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s1">&#39;Popular Directors with the most content&#39;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be4.png" width="100%" />
    
    
</figure>

<br>
<h2 id="netflix-专注于什么样的内容">Netflix 专注于什么样的内容？</h2>
<p>我还想浏览评级栏并比较 Netflix 为儿童、青少年和成人制作的内容量——以及这些年来他们的重点是否从一个群体转移到另一个群体。</p>
<p>为此，我首先查看了 DataFrame 中的独特评级：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;date_added&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;date_added&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;date_added&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">year</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;Int64&#39;</span><span class="p">)</span>


<span class="n">ratings_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;TV-MA&#39;</span><span class="p">,</span> <span class="s1">&#39;R&#39;</span><span class="p">,</span> <span class="s1">&#39;PG-13&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-14&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-PG&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-G&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y7&#39;</span><span class="p">,</span> <span class="s1">&#39;PG&#39;</span><span class="p">,</span> <span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="s1">&#39;NC-17&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y7-FV&#39;</span><span class="p">]</span>
<span class="n">ratings_group_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span> <span class="s1">&#39;Mature&#39;</span><span class="p">]</span>
<span class="n">ratings_dict</span><span class="o">=</span><span class="p">{</span>
    <span class="s1">&#39;TV-G&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;G&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-PG&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y7&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;PG&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y7-FV&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;PG-13&#39;</span><span class="p">:</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-14&#39;</span><span class="p">:</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-MA&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span><span class="p">,</span>
    <span class="s1">&#39;R&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span><span class="p">,</span>
    <span class="s1">&#39;NC-17&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="n">rating_val</span><span class="p">,</span> <span class="n">rating_group</span> <span class="ow">in</span> <span class="n">ratings_dict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">rating</span> <span class="o">==</span> <span class="n">rating_val</span><span class="p">,</span> <span class="s2">&#34;rating&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">rating_group</span>
    
    
    
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;rating_val&#39;</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
<span class="n">x</span><span class="o">=</span><span class="mi">0</span>
<span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;kinda</span><span class="se">\n</span><span class="s1">less&#39;</span><span class="p">,</span> <span class="s1">&#39;not so</span><span class="se">\n</span><span class="s1">bad&#39;</span><span class="p">,</span> <span class="s1">&#39;holyshit</span><span class="se">\n</span><span class="s1">that</span><span class="se">\&#39;</span><span class="s1">s too</span><span class="se">\n</span><span class="s1">many&#39;</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">ratings_group_list</span><span class="p">:</span>
        <span class="n">grouped</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;rating&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">r</span><span class="p">]</span>
        <span class="n">year_df</span> <span class="o">=</span> <span class="n">grouped</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;year_added&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
        <span class="n">year_df</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">],</span> <span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;rating_val&#39;</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="n">colours</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">marker</span><span class="o">=</span><span class="s1">&#39;o&#39;</span><span class="p">)</span>
        <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2008</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">]))</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([</span><span class="mi">200</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">1000</span><span class="p">],</span> <span class="n">labels</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">values_int</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Count of shows and movies that Netflix</span><span class="se">\n</span><span class="s1"> has been producing for different audiences&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Year&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Content Count&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
        <span class="n">x</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">ratings_group_list</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be5.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Shifterator库 | 词移图分辨两文本用词风格差异</title>
      <link>https://hidadeng.github.io/blog/shifterator_text_vis/</link>
      <pubDate>Tue, 26 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/shifterator_text_vis/</guid>
      <description>图文代码理解两文本用词风格差异</description>
      <content:encoded><![CDATA[<p>以往对比两个文本数据差异，比较简单的技术实现方法是生成两文个词云图，但是词云图无法直观显示词语层面的权重。</p>
<p><strong>Shifterator</strong>包提供了构建词移图的功能，垂直条形图可以量化哪些词会导致<strong>两个文本</strong>之间的成对差异以及它们如何起作用。 通过允许您查看单词使用方式的变化，单词转换可帮助您对情绪、熵和分歧进行分析，这些分析从根本上来说更具可解释性。</p>
<p>Shifterator亮点：</p>
<ul>
<li>提供可解释的工具，用于将文本作为数据处理并映射出两个文本相似性或差异性</li>
<li>实现常见的文本比较度量，包括相对频率、香农熵、Tsallis熵、Kullback-Leibler散度和 Jensen-Shannon 散度。</li>
<li>基于字典的情绪分析方法计算的加权平均值。</li>
<li>在研究初期可用于诊断数据、感知测量误差。</li>
</ul>
<p>计算社会科学家、数字人文主义者和其他文本分析从业者都可以使用 Shifterator 从文本数据构建可靠、稳健和可解释的故事。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">shifterator</span><span class="o">==</span><span class="mf">0.2.2</span>
</code></pre></div><br>
<h2 id="导入数据">导入数据</h2>
<p>准备的外卖csv数据，含label和review两个字段。</p>
<p>其中label是好评差评的标注，</p>
<ul>
<li>0为差评，</li>
<li>1为好评</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">reviews_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/WaiMai8k.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">reviews_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="800" />
    
    
</figure>

<p>有个疑问，外卖好差评中的用词有什么差异(区别/特点)？</p>
<h2 id="准备两组文本数据">准备两组文本数据</h2>
<p>shifterator需要两组文本数据，格式为长度相同的词频统计字典。</p>
<p>按照label类别，将数据整理为两个文本数据。在准备的过程中，我们需要做一些清洗操作</p>
<ul>
<li>清除非中文字符，如网址、邮箱、标点符号</li>
<li>清除信息量比较低的停用词</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">collections</span>
<span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">re</span> 

<span class="n">texts_neg</span> <span class="o">=</span> <span class="n">reviews_df</span><span class="p">[</span><span class="n">reviews_df</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;review&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
<span class="n">texts_pos</span> <span class="o">=</span> <span class="n">reviews_df</span><span class="p">[</span><span class="n">reviews_df</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;review&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">docs</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;清洗文本中的非中文字符、停用词，返回词频统计结果
</span><span class="s2">    docs : 待处理的文档列表
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">stop_words</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/stopwords.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&#34;[</span><span class="se">\u4e00</span><span class="s2">-</span><span class="se">\u9fa5</span><span class="s2">]+&#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stop_words</span><span class="p">]</span>
    <span class="n">wordfreq_dict</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wordfreq_dict</span>


<span class="n">clean_texts_neg</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">texts_neg</span><span class="p">)</span>
<span class="n">clean_texts_pos</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">texts_pos</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="无聊的传统绘图">无聊的传统绘图</h2>
<p>使用条形图、词云图绘制，为了缩小代码量，这里只绘制差评数据。需要注意的是matplotlib不显示中文，这里需要先使用下面三行代码获取电脑中自带的中文字体列表mpl_fonts，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib.font_manager</span> <span class="kn">import</span> <span class="n">FontManager</span>
 
<span class="n">mpl_fonts</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">FontManager</span><span class="p">()</span><span class="o">.</span><span class="n">ttflist</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mpl_fonts</span><span class="p">)</span>
</code></pre></div><p>经过运行，我的电脑mpl_fonts里有<strong>Arial Unicode MS</strong> ，后面用matplotlib显示中文的地方，我都使用该字体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#准备DataFrame数据</span>
<span class="n">common_neg</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clean_texts_neg</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span>
                             <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">])</span>

<span class="n">common_pos</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clean_texts_pos</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span>
                             <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">font_scale</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set_style</span><span class="p">(</span><span class="s2">&#34;whitegrid&#34;</span><span class="p">)</span>

<span class="c1">#为了显示中文</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s2">&#34;font&#34;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">)</span>


<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>

<span class="c1">#绘制水平条形图</span>
<span class="n">common_neg</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;words&#39;</span><span class="p">,</span>
                     <span class="n">y</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span>
                      <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span>
                      <span class="n">color</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s2">&#34;外卖差评常见词&#34;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_9_0.png" width="800" />
    
    
</figure>

<p>绘制词云图，这里使用的pyecharts包。由于该包作者更新强度比较大，为了保证日后本教程仍可正常运行，这里提供当前我使用的pyecharts相关的版本，大家可以运行下面代码保证运行出正确结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">==</span><span class="mf">1.6.2</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">javascripthon</span><span class="o">==</span><span class="mf">0.0.6</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">jupyter</span><span class="o">-</span><span class="n">installer</span><span class="o">==</span><span class="mf">0.0.3</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">snapshot</span><span class="o">==</span><span class="mf">0.2.0</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">WordCloud</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>

<span class="n">wordfreqs</span> <span class="o">=</span> <span class="p">[(</span><span class="n">w</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span><span class="p">,</span><span class="n">f</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">(</span><span class="n">clean_texts_neg</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>


<span class="n">wc</span> <span class="o">=</span> <span class="n">WordCloud</span><span class="p">()</span>
<span class="n">wc</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">data_pair</span><span class="o">=</span><span class="n">wordfreqs</span><span class="p">,</span> <span class="n">word_size_range</span><span class="o">=</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>
<span class="n">wc</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;外卖差评词云图&#34;</span><span class="p">,</span> 
                                             <span class="n">title_textstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TextStyleOpts</span><span class="p">(</span><span class="n">font_size</span><span class="o">=</span><span class="mi">23</span><span class="p">)),</span>
                   <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
<span class="n">wc</span><span class="o">.</span><span class="n">load_javascript</span><span class="p">()</span>
<span class="n">wc</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e8%af%8d%e4%ba%91%e5%9b%be.png" width="800" />
    
    
</figure>

<h2 id="使用shifterator绘制词移图">使用Shifterator绘制词移图</h2>
<p>终于要用到 <strong>Shifterator</strong> 包了！ 我们可以使用这个包根据频率和情绪（或其他值）比较负面和正面的外卖评论，这里我只计算了频率作为权重</p>
<h3 id="熵移图entropy-shift">熵移图Entropy shift</h3>
<p>第一幅图是entropy shift graph</p>
<p>具体信息请查看文档  <a href="https://github.com/ryanjgallagher/shifterator">https://github.com/ryanjgallagher/shifterator</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">shifterator</span> <span class="kn">import</span> <span class="n">EntropyShift</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s2">&#34;font&#34;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">)</span>

<span class="n">entropy_shift</span> <span class="o">=</span> <span class="n">EntropyShift</span><span class="p">(</span><span class="n">type2freq_1</span><span class="o">=</span><span class="n">clean_texts_neg</span><span class="p">,</span>
                             <span class="n">type2freq_2</span><span class="o">=</span><span class="n">clean_texts_pos</span><span class="p">,</span>
                             <span class="n">base</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">entropy_shift</span><span class="o">.</span><span class="n">get_shift_graph</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;外卖差评 vs 外卖好评&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output141.png" width="800" />
    
    
</figure>

<p>看起来最能决定外卖差评的用语是配送时间，其次才是口味。</p>
<p>最能决定外卖好评的似乎是口味，其次才是配送时间。</p>
<p>通过Shifterator我们能够看出不同词在不同文本中的作用程度。需要注意的是，我们只使用了最高的前15词频，所以显示的词有些少</p>
<h2 id="总结">总结</h2>
<p>希望本文能对你的研究有帮助，代码下载地址</p>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator%E5%AD%A6%E4%B9%A0">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator学习</a></p>
<p>代码撰写调试不易，希望帮忙转载</p>

<figure >
    
        <img src="img/Python%e4%b8%93%e6%a0%8f%e8%af%be.jpg" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
