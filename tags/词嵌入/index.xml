<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>词嵌入 on 大邓和他的PYTHON</title>
    <link>/tags/%E8%AF%8D%E5%B5%8C%E5%85%A5/</link>
    <description>Recent content in 词嵌入 on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 03 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E8%AF%8D%E5%B5%8C%E5%85%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可视化 | 词嵌入模型用于计算社科领域刻板印象等信息（含代码）</title>
      <link>https://hidadeng.github.io/blog/2023-03-03-extracts-cognitive-information-and-visualization-with-embedings/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-03-03-extracts-cognitive-information-and-visualization-with-embedings/</guid>
      <description>语言的文字反映了人类思想的结构，使我们能够在个人之间传递思想， 而使用大规模语料训练得来的词嵌入模型蕴含着这类信息。 英文的词嵌入在社会科学中的应用教程较多，大家可以谷歌查询，我主要想丰富中文数据的教程。</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1CY4y11712&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<p>语言的文字反映了人类思想的结构，使我们能够在个人之间传递思想， 而使用大规模语料训练得来的词嵌入模型往往蕴含着这类信息。</p>
<br>
<h3 id="11-国内外社科方面的应用">1.1 国内外社科方面的应用</h3>
<p><strong>在国内社科领域， 应用词嵌入 主要用来做情感分析</strong>，大致的算法(思路)是</p>
<ol>
<li>训练词向量模型</li>
<li>根据词向量cosine或欧几里得距离，度量词语的相似性，进而扩展某种概念词典</li>
<li>检查扩充的概念词典，剔除无效词后。</li>
<li>使用整理好的概念词典，统计文本中出现该概念的词频，当做该概念的代理指标。</li>
</ol>
<p>但词嵌入在国外很火，不止用来扩展词典，还能应用到<strong>社会学(计算社会学，研究较多)、政治学、管理学</strong>等学科，不用调查问卷也能做出**「量化方法实证研究」**， 如 **发散思维计算、刻板印象、性别种族歧视、词语百年来语义变迁、女性高管就职后公司内性别观念变化、测量创新力(发散思维)**等议题。</p>
<p>下图是「阶级财富性别与运动」，摘自2019年文化几何学这篇论文。</p>
<p><img loading="lazy" src="img/sport_class_fortune.png" alt=""  />
</p>
<blockquote>
<p>Kozlowski, Austin C., Matt Taddy, and James A. Evans. &ldquo;The geometry of culture: Analyzing the meanings of class through word embeddings.&rdquo; American Sociological Review 84, no. 5 (2019): 905-949.</p>
</blockquote>
<p>本文主要内容是实现这类文化几何学图的中文可视化。</p>
<br>
<h3 id="12-之前分享过的资料">1.2 之前分享过的资料</h3>
<p>之前大邓分享过的词嵌入稍有涉及，感兴趣的可以阅读我之前分享的文章</p>
<ul>
<li><a href="https://hidadeng.github.io/blog/douban_w2v/">豆瓣影评 | 探索词向量妙处</a></li>
<li><a href="https://hidadeng.github.io/blog/2022-10-16-python-word-mover-s-distance/">Python | 词移距离(Word Mover’s Distance)</a></li>
<li><a href="https://hidadeng.github.io/blog/wordbias/">WordBias库 | 发现偏见(刻板印象)的交互式工具</a></li>
<li><a href="https://hidadeng.github.io/blog/embeddingsandattitude/">词嵌入测量不同群体对某概念的态度(偏见)</a></li>
<li><a href="https://hidadeng.github.io/blog/whatlies_word2vec/">whatlies库 | 可视化词向量</a></li>
<li><a href="https://hidadeng.github.io/blog//2022-11-14-pnas_naming_unrelated_words_predicts_creativity/">PNAS | 使用语义距离测量一个人的创新力(发散思维)得分</a></li>
<li><a href="https://hidadeng.github.io/blog/embeddings_resource_usage_method/">中文词向量资源汇总 &amp; 使用方法</a></li>
<li><a href="https://hidadeng.github.io/blog/2023-03-15-39faq-about-word-embeddings-for-social-science/">词嵌入技术在社会科学领域进行数据挖掘常见39个FAQ汇总</a></li>
<li><a href="https://hidadeng.github.io/blog/wordembeddingsinsocialscience/">转载 | 大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用</a></li>
</ul>
<br>
<p>但可视化分享的不多，<strong>本文将用公开的中文预训练模型，验证可视化中文圈的群体记忆、刻板印象、偏见等信息</strong>。在此先放一张论文中两个截图， <strong>语义概念向量</strong> 一般是由语义相反的两组词构成。</p>
<p><img loading="lazy" src="img/size.png" alt=""  />

<img loading="lazy" src="img/%e4%ba%8c%e5%85%83%e6%a6%82%e5%bf%b5%e7%bb%84.png" alt=""  />
</p>
<blockquote>
<p>Grand, G., Blank, I.A., Pereira, F. and Fedorenko, E., 2022. <strong>Semantic projection recovers rich human knowledge of multiple object features from word embeddings</strong>. <em>Nature Human Behaviour</em>, pp.1-13.</p>
</blockquote>
<br>
<h3 id="概念向量的计算方法">概念向量的计算方法</h3>
<ul>
<li>二维坐标系下，点和向量都可以用二维数组(m, n)表示。同理，在n维空间中，点和向量都是n维数组。</li>
<li>将多个近义的词向量， 通过平均法创建出一个 <strong>均值端点</strong>。</li>
<li>语义完全相反的两个<strong>均值端点</strong>， 通过减法操作， 得到 <strong>概念向量</strong></li>
</ul>
<br>
<h3 id="为啥每个端点向量用多个词计算">为啥每个端点向量用多个词计算？</h3>
<p>单个词变动较大， 为了保证语义的稳定性，最好是找一组词构成概念的一个端点。</p>
<p><br><br></p>
<h2 id="二准备工作">二、准备工作</h2>
<p>下载预训练模型，可以查看这篇文章获取</p>
<p><a href="https://hidadeng.github.io/blog/embeddings_resource_usage_method/">中文词向量资源汇总 &amp; 使用方法</a></p>
<p>之后安装好本节需要的python包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">whatlies</span><span class="o">==</span><span class="mf">0.7.0</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">matplotlib_inline</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">gensim</span><span class="o">==</span><span class="mf">4.2.0</span>
</code></pre></div><p><br><br></p>
<h2 id="三导入预训练模型">三、导入预训练模型</h2>
<p>使用 gensim 库导入预训练模型，这里我本地保留的是预训练模型是word2vec中的sgns算法训练出来的。 导入后的数据是 KeyedVectors 类型的数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models.keyedvectors</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="c1"># 微博 sgns.weibo.word.bz2 为例  </span>
<span class="n">weibo_wv</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;embeddings/sgns.weibo.word.bz2&#39;</span><span class="p">,</span> 
                                             <span class="n">binary</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> 
                                             <span class="n">unicode_errors</span><span class="o">=</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="c1"># 知乎 sgns.renmin.word.bz2</span>
<span class="n">zhihu_wv</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;embeddings/sgns.zhihu.word.bz2&#39;</span><span class="p">,</span> 
                                              <span class="n">binary</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> 
                                              <span class="n">unicode_errors</span><span class="o">=</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="c1"># 中文维基 </span>
<span class="n">wiki_wv</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;embeddings/sgns.wiki.word.bz2&#39;</span><span class="p">,</span> 
                                              <span class="n">binary</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> 
                                              <span class="n">unicode_errors</span><span class="o">=</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h3 id="31-预训练模型的词汇量">3.1 预训练模型的词汇量</h3>
<p>weibo_wv、zhihu_wv、wiki_wv是KeyedVectors类型的数据，可以直接查看词汇量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;预训练模型词汇量&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;微博: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">weibo_wv</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;知乎: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">zhihu_wv</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;中文维基: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">wiki_wv</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">预训练模型词汇量

微博:  195202
知乎:  259949
中文维基:  352277
</code></pre></div><br>
<h3 id="32-通用词">3.2 通用词</h3>
<p>使用不同数据集训练，得到的语言模型所含词语会有差异。这里我们查看通用词一共有多少</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">wiki_vocab</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">wiki_wv</span><span class="o">.</span><span class="n">index_to_key</span><span class="p">)</span>
<span class="n">zhihu_vocab</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">zhihu_wv</span><span class="o">.</span><span class="n">index_to_key</span><span class="p">)</span>
<span class="n">weibo_vocab</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">weibo_wv</span><span class="o">.</span><span class="n">index_to_key</span><span class="p">)</span>

<span class="c1">#交集</span>
<span class="n">common_vocab</span> <span class="o">=</span> <span class="n">wiki_vocab</span> <span class="o">&amp;</span> <span class="n">zhihu_vocab</span> <span class="o">&amp;</span>  <span class="n">weibo_vocab</span><span class="c1"># intersection</span>

<span class="nb">len</span><span class="p">(</span><span class="n">common_vocab</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">118539
</code></pre></div><br>
<h3 id="33-提取某个词的向量">3.3 提取某个词的向量</h3>
<p>以维基百科为例， 查看「幸福」的词向量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#只显示向量的前20个数字</span>
<span class="n">wiki_wv</span><span class="p">[</span><span class="s1">&#39;幸福&#39;</span><span class="p">][:</span><span class="mi">20</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([ 0.159344,  0.280468, -0.236876, -0.198076, -0.170838,  0.027264,
           -0.349646,  0.289169, -0.421038, -0.470539,  0.247534,  0.112968,
            0.355498,  0.479956,  0.093291,  0.081054, -0.046995, -0.624586,
            0.568242,  0.16665 ], dtype=float32)
</code></pre></div><br>
<h3 id="34-查看词向量的维度">3.4 查看词向量的维度</h3>
<p>查看向量的长度（维度），以「幸福」为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;预训练模型维度数&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;微博: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">weibo_wv</span><span class="p">[</span><span class="s2">&#34;幸福&#34;</span><span class="p">]))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;知乎: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">zhihu_wv</span><span class="p">[</span><span class="s2">&#34;幸福&#34;</span><span class="p">]))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;中文维基: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">wiki_wv</span><span class="p">[</span><span class="s2">&#34;幸福&#34;</span><span class="p">]))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">预训练模型维度数
微博:  300
知乎:  300
中文维基:  300
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#单个词向量的尺寸</span>
<span class="n">wiki_wv</span><span class="p">[</span><span class="s1">&#39;幸福&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(300,)
</code></pre></div><br>
<h3 id="35-计算多个词向量的均值向量">3.5 计算多个词向量的均值向量</h3>
<p>先看一下多个词提取后得到的数据形状</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">wiki_wv</span><span class="p">[[</span><span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;男孩&#39;</span><span class="p">,</span> <span class="s1">&#39;父亲&#39;</span><span class="p">,</span> <span class="s1">&#39;爷爷&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(4, 300)
</code></pre></div><br>
<p>4个词，每个词都是300维的词向量。如果计算4个词向量的均值向量，返回的尺寸应该是 (300,)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">male_vector</span> <span class="o">=</span> <span class="n">wiki_wv</span><span class="p">[[</span><span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;男孩&#39;</span><span class="p">,</span> <span class="s1">&#39;父亲&#39;</span><span class="p">,</span> <span class="s1">&#39;爷爷&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">male_vector</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(300,)
</code></pre></div><br>
<h3 id="36-最相似的词">3.6 最相似的词</h3>
<p>网上的教程经常分享最相似的词，这里我们也实验一下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">wiki_wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="s2">&#34;社会&#34;</span><span class="p">,</span> <span class="n">topn</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;于社会&#39;, 0.6210986971855164),
(&#39;社会上&#39;, 0.5995474457740784),
(&#39;社会关系&#39;, 0.5894029140472412),
(&#39;各阶层&#39;, 0.5799717903137207),
(&#39;社会制度&#39;, 0.5777087211608887),
(&#39;社会变迁&#39;, 0.5756841897964478),
(&#39;令社会&#39;, 0.575627326965332),
(&#39;社会变革&#39;, 0.5755838751792908),
(&#39;思想观念&#39;, 0.5752044916152954),
(&#39;社会存在&#39;, 0.573627769947052)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">weibo_wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="s2">&#34;社会&#34;</span><span class="p">,</span> <span class="n">topn</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;金钱至上&#39;, 0.5815222859382629),
(&#39;各阶层&#39;, 0.5668456554412842),
(&#39;福利制度&#39;, 0.5532322525978088),
(&#39;官与民&#39;, 0.5526734590530396),
(&#39;高考制度&#39;, 0.5515810251235962),
(&#39;资源分配&#39;, 0.5500271916389465),
(&#39;功利主义&#39;, 0.5484314560890198),
(&#39;分级制&#39;, 0.5450907349586487),
(&#39;功利化&#39;, 0.5432640910148621),
(&#39;法制建设&#39;, 0.5420899391174316)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">zhihu_wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="s2">&#34;社会&#34;</span><span class="p">,</span> <span class="n">topn</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;社会存在&#39;, 0.6277482509613037),
 (&#39;社会生活&#39;, 0.613935649394989),
(&#39;社会群体&#39;, 0.6123108863830566),
(&#39;社会意识&#39;, 0.6055717468261719),
(&#39;物欲横流&#39;, 0.6041101217269897),
(&#39;民主决策&#39;, 0.602908194065094),
(&#39;阶级分化&#39;, 0.59609454870224),
(&#39;社会上&#39;, 0.5932644605636597),
(&#39;于社会&#39;, 0.5919737219810486),
(&#39;法制化&#39;, 0.5820874571800232)]
</code></pre></div><p><br><br></p>
<h2 id="四-可视化">四、 可视化</h2>
<p>为了让中文可以在matplotlib正常显示， 需要先运行下方代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">platform</span>
<span class="kn">import</span> <span class="nn">matplotlib_inline</span>
<span class="n">matplotlib_inline</span><span class="o">.</span><span class="n">backend_inline</span><span class="o">.</span><span class="n">set_matplotlib_formats</span><span class="p">(</span><span class="s1">&#39;png&#39;</span><span class="p">,</span> <span class="s1">&#39;svg&#39;</span><span class="p">)</span>

<span class="n">system</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>  <span class="c1"># 获取操作系统类型</span>

<span class="k">if</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Windows&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;SimHei&#39;</span><span class="p">}</span>
<span class="k">elif</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Darwin&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">}</span>
<span class="k">else</span><span class="p">:</span>
    <span class="c1"># 如果是其他系统，可以使用系统默认字体</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;sans-serif&#39;</span><span class="p">}</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s1">&#39;font&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">font</span><span class="p">)</span>  <span class="c1"># 设置全局字体</span>
</code></pre></div><br>
<h3 id="41-运动的贫富和性别属性">4.1 运动的贫富和性别属性</h3>
<p>先看一个最难的例子， 后面的例子都是围绕ta展开的。</p>
<ul>
<li><strong>性别向量</strong> 由 <strong>男性均值端点向量</strong> 和 <strong>女性均值端点向量</strong> 计算得来</li>
<li><strong>贫富向量</strong> 由 <strong>富裕均值端点向量</strong> 和 <strong>贫穷均值端点向量</strong> 计算得来</li>
</ul>
<p>需要注意， 不论是 <strong>性别向量</strong>、<strong>贫富向量</strong> 还是运动词的词向量，都是 300维的向量。 如果在低维空间，例如2维坐标轴中可视化，需要做投影操作。这里需要一点大学线性代数的点乘知识。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 获取需要绘制的单词列表</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;足球&#39;</span><span class="p">,</span> <span class="s1">&#39;拳击&#39;</span><span class="p">,</span> <span class="s1">&#39;高尔夫&#39;</span><span class="p">,</span> <span class="s1">&#39;棒球&#39;</span><span class="p">,</span> <span class="s1">&#39;芭蕾&#39;</span><span class="p">]</span>

<span class="c1"># 获取词向量，并转换为 NumPy 数组</span>
<span class="n">vectors</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">wiki_wv</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">])</span>

<span class="c1"># 选择两个词向量作为新坐标系的 x 轴和 y 轴</span>
<span class="n">x_axis</span> <span class="o">=</span> <span class="n">wiki_wv</span><span class="p">[[</span><span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;男孩&#39;</span><span class="p">,</span> <span class="s1">&#39;父亲&#39;</span><span class="p">,</span> <span class="s1">&#39;爷爷&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">-</span> <span class="n">wiki_wv</span><span class="p">[[</span><span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;女孩&#39;</span><span class="p">,</span> <span class="s1">&#39;母亲&#39;</span><span class="p">,</span> <span class="s1">&#39;奶奶&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">y_axis</span> <span class="o">=</span> <span class="n">wiki_wv</span><span class="p">[[</span><span class="s1">&#39;贫穷&#39;</span><span class="p">,</span> <span class="s1">&#39;拮据&#39;</span><span class="p">,</span> <span class="s1">&#39;囊中羞涩&#39;</span><span class="p">,</span> <span class="s1">&#39;困难&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">-</span> <span class="n">wiki_wv</span><span class="p">[[</span><span class="s1">&#39;富裕&#39;</span><span class="p">,</span> <span class="s1">&#39;富有&#39;</span><span class="p">,</span> <span class="s1">&#39;贵气&#39;</span><span class="p">,</span> <span class="s1">&#39;财富&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># 计算每个词向量在新坐标系中的投影</span>
<span class="n">x_coords</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vectors</span><span class="p">,</span> <span class="n">x_axis</span><span class="p">)</span>
<span class="n">y_coords</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vectors</span><span class="p">,</span> <span class="n">y_axis</span><span class="p">)</span>

<span class="c1"># 绘制图形</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">x_coords</span><span class="p">,</span> <span class="n">y_coords</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">word</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">words</span><span class="p">):</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="p">(</span><span class="n">x_coords</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y_coords</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>

<span class="c1"># 绘制 x 轴和 y 轴的十字线</span>
<span class="n">ax</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">axvline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="o">-</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="o">-</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;性别(男左女右)&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;贫富(贫下富上)&#39;</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;运动的贫富和性别属性&#39;</span><span class="p">)</span>
<span class="c1">#plt.show()</span>

<span class="c1">#保存</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s2">&#34;img/运动的贫富和性别属性.png&#34;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/output_24_0.svg" alt="svg"  />
</p>
<br>
<h3 id="42-使用whatlies处理数据">4.2 使用whatlies处理数据</h3>
<p>上面的可视化代码太长了，使用whatlies可以简化代码量。我们把 KeyedVectors类 转为 EmbeddingSet类，这里就可以更容易的把点显示为带箭头的向量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">whatlies</span> <span class="kn">import</span> <span class="n">Embedding</span><span class="p">,</span> <span class="n">EmbeddingSet</span>

<span class="c1"># load vectors as whatlies EmbeddingSet</span>
<span class="n">wiki_emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="o">.</span><span class="n">from_names_X</span><span class="p">(</span><span class="n">names</span><span class="o">=</span><span class="n">wiki_wv</span><span class="o">.</span><span class="n">index_to_key</span><span class="p">,</span> 
                                     <span class="n">X</span><span class="o">=</span><span class="n">wiki_wv</span><span class="o">.</span><span class="n">vectors</span><span class="p">)</span>

<span class="n">weibo_emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="o">.</span><span class="n">from_names_X</span><span class="p">(</span><span class="n">names</span><span class="o">=</span><span class="n">weibo_wv</span><span class="o">.</span><span class="n">index_to_key</span><span class="p">,</span>
                                      <span class="n">X</span> <span class="o">=</span> <span class="n">weibo_wv</span><span class="o">.</span><span class="n">vectors</span><span class="p">)</span>

<span class="n">zhihu_emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="o">.</span><span class="n">from_names_X</span><span class="p">(</span><span class="n">names</span><span class="o">=</span><span class="n">zhihu_wv</span><span class="o">.</span><span class="n">index_to_key</span><span class="p">,</span> 
                                      <span class="n">X</span><span class="o">=</span><span class="n">zhihu_wv</span><span class="o">.</span><span class="n">vectors</span><span class="p">)</span>

</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># list similar words, n=10</span>
<span class="n">wiki_emb</span><span class="o">.</span><span class="n">score_similar</span><span class="p">(</span><span class="s2">&#34;社会&#34;</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(Emb[社会], 5.960464477539063e-08),
(Emb[于社会], 0.3789013624191284),
(Emb[社会上], 0.4004524350166321),
(Emb[社会关系], 0.410597026348114),
(Emb[各阶层], 0.42002809047698975),
(Emb[社会制度], 0.4222911596298218),
(Emb[社会变迁], 0.42431581020355225),
(Emb[令社会], 0.42437267303466797),
(Emb[社会变革], 0.424416184425354),
(Emb[思想观念], 0.4247954487800598)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">weibo_emb</span><span class="o">.</span><span class="n">score_similar</span><span class="p">(</span><span class="s2">&#34;社会&#34;</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(Emb[社会], 0.0),
(Emb[金钱至上], 0.41847753524780273),
(Emb[各阶层], 0.43315428495407104),
(Emb[福利制度], 0.4467676877975464),
(Emb[官与民], 0.4473266005516052),
(Emb[高考制度], 0.4484187364578247),
(Emb[资源分配], 0.44997286796569824),
(Emb[功利主义], 0.4515683650970459),
(Emb[分级制], 0.45490920543670654),
(Emb[功利化], 0.4567357897758484)]
</code></pre></div><br>
<h3 id="43-whatlies默认可视化">4.3 whatlies默认可视化</h3>
<p>使用whatlies默认的效果绘制如下，但需要注意， 这里的Dimension0和Dimension1的含义是未知的。所以除了可视化， 含义解读起来比较困难。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># the default X and Y axes are the first two dimensions of the embedding vectors</span>
<span class="n">wiki_emb</span><span class="p">[</span><span class="s2">&#34;马&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;arrow&#34;</span><span class="p">,</span> 
                   <span class="n">color</span><span class="o">=</span><span class="s2">&#34;purple&#34;</span><span class="p">)</span>

<span class="n">wiki_emb</span><span class="p">[</span><span class="s2">&#34;鲨鱼&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;arrow&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;blue&#34;</span><span class="p">)</span>

<span class="n">wiki_emb</span><span class="p">[</span><span class="s2">&#34;鸟类&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;arrow&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;green&#34;</span><span class="p">)</span>
<span class="n">wiki_emb</span><span class="p">[</span><span class="s2">&#34;人&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;arrow&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">)</span>
<span class="n">wiki_emb</span><span class="p">[</span><span class="s2">&#34;蛇&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;arrow&#34;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;black&#34;</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_30_0.svg" alt="svg"  />
</p>
<br>
<h3 id="44-使用端点向量当基向量">4.4 使用端点向量当基向量</h3>
<p>使用端点向量当基向量，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">vecs</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[</span><span class="s2">&#34;美国&#34;</span><span class="p">,</span> <span class="s2">&#34;中国&#34;</span><span class="p">,</span> <span class="s2">&#34;俄罗斯&#34;</span><span class="p">,</span> <span class="s2">&#34;韩国&#34;</span><span class="p">]</span>

<span class="n">vecs</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span><span class="n">wiki_emb</span><span class="p">[</span><span class="s2">&#34;弱小&#34;</span><span class="p">],</span> 
          <span class="n">y_axis</span><span class="o">=</span><span class="n">wiki_emb</span><span class="p">[</span><span class="s2">&#34;强大&#34;</span><span class="p">],</span> 
          <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;purple&#34;</span><span class="p">,</span> <span class="s2">&#34;green&#34;</span><span class="p">,</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="s2">&#34;red&#34;</span><span class="p">])</span>

<span class="c1">#plt.show()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;国家强弱&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s2">&#34;img/国家强弱.png&#34;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/output_32_0.svg" alt="svg"  />
</p>
<br>
<p>按照我们的理解， 强大与弱小是方向相反的。但是如果将这两个词分别做基向量。如图所示，就体现不出方向。</p>
<p>同时，因为给定有意义的基向量作为坐标轴向量， 坐标轴含有了意义，可视化的结果可以看出语义信息的亲疏远近。</p>
<p>可以看到， 中美俄是大国强国，韩国是小国军事弱国。</p>
<br>
<h3 id="45-使用概念向量当做基向量">4.5 使用概念向量当做基向量</h3>
<p>当使用概念向量做基向量， 我们就能保留住词语之间的正反方向。避免 4.4 反义词之间无法体现方向性信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#待考察词</span>
<span class="n">vecs</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[</span><span class="s1">&#39;足球&#39;</span><span class="p">,</span> <span class="s2">&#34;斗殴&#34;</span><span class="p">,</span> <span class="s1">&#39;高尔夫&#39;</span><span class="p">,</span> <span class="s1">&#39;篮球&#39;</span><span class="p">,</span> <span class="s1">&#39;芭蕾&#39;</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;富裕&#39;</span><span class="p">,</span> <span class="s1">&#39;贫穷&#39;</span><span class="p">,</span> <span class="s1">&#39;乒乓球&#39;</span><span class="p">,</span> <span class="s1">&#39;举重&#39;</span><span class="p">]</span>

<span class="c1">#性别概念向量</span>
<span class="n">sex_vector</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;女孩&#39;</span><span class="p">,</span> <span class="s1">&#39;母亲&#39;</span><span class="p">,</span> <span class="s1">&#39;奶奶&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span> <span class="o">-</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;男孩&#39;</span><span class="p">,</span> <span class="s1">&#39;父亲&#39;</span><span class="p">,</span> <span class="s1">&#39;爷爷&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span>
<span class="c1">#贫富概念向量</span>
<span class="n">disparity_vector</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;富裕&#39;</span><span class="p">,</span> <span class="s1">&#39;富有&#39;</span><span class="p">,</span> <span class="s1">&#39;贵气&#39;</span><span class="p">,</span> <span class="s1">&#39;财富&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span> <span class="o">-</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;贫穷&#39;</span><span class="p">,</span> <span class="s1">&#39;拮据&#39;</span><span class="p">,</span> <span class="s1">&#39;囊中羞涩&#39;</span><span class="p">,</span> <span class="s1">&#39;困难&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span> 

<span class="c1">#概念向量 做 基向量</span>
<span class="n">vecs</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span> <span class="n">sex_vector</span><span class="p">,</span> 
          <span class="n">y_axis</span><span class="o">=</span> <span class="n">disparity_vector</span><span class="p">,</span> 
          <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;purple&#34;</span><span class="p">,</span> <span class="s2">&#34;green&#34;</span><span class="p">,</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="s2">&#34;red&#34;</span><span class="p">])</span>


<span class="c1">#plt.show()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;运动中体现的贫富与性别信息&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;性别(男左女右)&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;贫富(贫下富上)&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s2">&#34;img/运动中体现的贫富与性别信息.png&#34;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/output_34_0.svg" alt="svg"  />
</p>
<br>
<p>刚刚的图中加入了<code>男、女、贫穷、富裕</code>四个词，是为了帮助我们识别出方向来的，判断横纵坐标的含义和方向性。现在我们可以去掉这四个词，绘制更美观的图。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">vecs</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[</span><span class="s1">&#39;足球&#39;</span><span class="p">,</span> <span class="s1">&#39;高尔夫&#39;</span><span class="p">,</span> <span class="s1">&#39;篮球&#39;</span><span class="p">,</span> <span class="s1">&#39;芭蕾&#39;</span><span class="p">,</span> <span class="s1">&#39;乒乓球&#39;</span><span class="p">,</span> <span class="s1">&#39;举重&#39;</span><span class="p">,</span> <span class="s1">&#39;徒步&#39;</span><span class="p">]</span>

<span class="n">sex_vector</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;女孩&#39;</span><span class="p">,</span> <span class="s1">&#39;母亲&#39;</span><span class="p">,</span> <span class="s1">&#39;奶奶&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span> <span class="o">-</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;男孩&#39;</span><span class="p">,</span> <span class="s1">&#39;父亲&#39;</span><span class="p">,</span> <span class="s1">&#39;爷爷&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span> 
<span class="n">disparity_vector</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;富裕&#39;</span><span class="p">,</span> <span class="s1">&#39;富有&#39;</span><span class="p">,</span> <span class="s1">&#39;贵气&#39;</span><span class="p">,</span> <span class="s1">&#39;财富&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span> <span class="o">-</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;贫穷&#39;</span><span class="p">,</span> <span class="s1">&#39;拮据&#39;</span><span class="p">,</span> <span class="s1">&#39;囊中羞涩&#39;</span><span class="p">,</span> <span class="s1">&#39;困难&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span> 

<span class="n">vecs</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span> <span class="n">sex_vector</span><span class="p">,</span> 
          <span class="n">y_axis</span><span class="o">=</span> <span class="n">disparity_vector</span><span class="p">,</span> 
          <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;purple&#34;</span><span class="p">,</span> <span class="s2">&#34;green&#34;</span><span class="p">,</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="s2">&#34;red&#34;</span><span class="p">])</span>

<span class="c1">#plt.show()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;运动中体现的贫富与性别信息&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>


<span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="o">-</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="o">-</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">axvline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">)</span>

<span class="c1">#plt.axis(&#39;off&#39;)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;性别(男左女右)&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;贫富(贫下富上)&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s2">&#34;img/运动中体现的贫富与性别信息.png&#34;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/output_36_0.png" alt="svg"  />
</p>
<br>
<p>从上图可以看出， 在wiki百科中记录下的， 我们对不同运动是存在贫富、性别化的信息。这些信息根据研究场景，解读为<strong>刻板印象、态度偏好、文化记忆</strong>等。 我们再看一个例子， 把中国动物(含神兽)分别在性别维度和尺寸维度可视化。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">vecs</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[</span><span class="s1">&#39;虎&#39;</span><span class="p">,</span> <span class="s1">&#39;龙&#39;</span><span class="p">,</span> <span class="s1">&#39;猫&#39;</span><span class="p">,</span> <span class="s1">&#39;燕子&#39;</span><span class="p">,</span> <span class="s1">&#39;蝴蝶&#39;</span><span class="p">]</span>

<span class="n">sex_vector</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;女孩&#39;</span><span class="p">,</span> <span class="s1">&#39;母亲&#39;</span><span class="p">,</span> <span class="s1">&#39;奶奶&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span><span class="o">-</span><span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;男孩&#39;</span><span class="p">,</span> <span class="s1">&#39;父亲&#39;</span><span class="p">,</span> <span class="s1">&#39;爷爷&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span>
<span class="n">size_vector</span> <span class="o">=</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;大&#39;</span><span class="p">,</span> <span class="s1">&#39;庞&#39;</span><span class="p">,</span> <span class="s1">&#39;巨&#39;</span><span class="p">,</span> <span class="s1">&#39;高&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span> <span class="o">-</span> <span class="n">wiki_emb</span><span class="p">[[</span><span class="s1">&#39;矮&#39;</span><span class="p">,</span> <span class="s1">&#39;小&#39;</span><span class="p">,</span> <span class="s1">&#39;微&#39;</span><span class="p">,</span> <span class="s1">&#39;毫&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">average</span><span class="p">()</span>


<span class="n">vecs</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span> <span class="n">sex_vector</span><span class="p">,</span> 
          <span class="n">y_axis</span><span class="o">=</span> <span class="n">size_vector</span><span class="p">,</span> 
          <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;purple&#34;</span><span class="p">,</span> <span class="s2">&#34;green&#34;</span><span class="p">,</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="s2">&#34;yellow&#34;</span><span class="p">,</span> <span class="s2">&#34;grey&#34;</span><span class="p">])</span>

<span class="c1">#plt.show()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;文化中动物词蕴含的性别化和尺寸信息&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>


<span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="o">-</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="o">-</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">axvline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">)</span>

<span class="c1">#plt.axis(&#39;off&#39;)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;性别(男左女右)&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;尺寸(下小上大)&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s2">&#34;img/文化中动物词蕴含的性别化和尺寸信息.png&#34;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/output_38_0.svg" alt="svg"  />
</p>
<p><br><br></p>
<h2 id="代码获取">代码获取</h2>
<p>公众号:  大邓和他的Python， 同日期推文， 付费阅读获取全文教程、数据、代码~</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">支持开票 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>simpleT5 库 | 根据英文摘要内容生成标题</title>
      <link>https://hidadeng.github.io/blog/2023-02-23-simplet5-one-line-summary/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-23-simplet5-one-line-summary/</guid>
      <description>T5（Text-to-Text Transfer Transformer）是一种基于 Transformer 架构的自然语言处理模型，由 Google Brain 团队开发。T5 模型采用了 encoder-decoder 架构，其中 encoder 将输入文本编码为向量，decoder 则从该向量生成目标文本。T5 模型的特点是将所有自然语言处理任务都视为“从输入文本到输出文本”的转换问题，它可以通过在任务之间共享模型参数和预训练模型来轻松地应用于各种 NLP 任务，如**文本分类、命名实体识别、文本摘要、问答系统**等。 与其他 NLP 模型不同的是，T5 模型使用了一种称为“text-to-text”方法的统一输入输出架构，使得所有 NLP 任务都能转化为文本转换问题，从而使得模型训练更加高效。</description>
      <content:encoded><![CDATA[<p>simpleT5 是基于 PyTorch 实现的 T5 模型库，旨在为用户提供一种简单、易用、可定制的 T5 模型工具。T5（Text-to-Text Transfer Transformer）是一种基于 Transformer 架构的自然语言处理模型，由 Google Brain 团队开发。T5 模型采用了 encoder-decoder 架构，其中 encoder 将输入文本编码为向量，decoder 则从该向量生成目标文本。</p>
<p><img loading="lazy" src="img/new_text_to_text.jpg" alt=""  />
</p>
<p>simpleT5 的设计目标是尽可能地减少 T5 模型的使用门槛，以方便用户在自然语言处理任务中快速应用 T5 模型，从而节省大量的模型开发时间和成本。</p>
<p>simpleT5 提供了一个简单的 API 接口，用户只需要提供输入文本和模型参数，即可轻松地使用 T5 模型进行文本转换任务，如<strong>文本摘要、机器翻译、对话系统</strong>等。simpleT5 还提供了一些预训练模型，包括 T5-small、T5-base 和 T5-large 等不同规模的模型，用户可以根据任务需求选择合适的模型。</p>
<p>除此之外，simpleT5 还提供了一些有用的工具和功能，如文本预处理、数据集加载、训练日志记录等，以帮助用户更轻松地进行模型训练和调试。simpleT5 的开发者们还提供了详细的文档和示例代码，以帮助用户更快地上手使用该库。</p>
<p>总之，simpleT5 为用户提供了一种快速、方便、可定制的 T5 模型工具，可以帮助用户在自然语言处理任务中更加高效地应用 T5 模型，节省大量的开发时间和成本。</p>
<p><br><br></p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">simplet5</span>
</code></pre></div><p><br><br></p>
<h2 id="快速上手">快速上手</h2>
<p>t5模型有很多，如下图，今天以huggingface中公开的模型 <strong>snrspeaks/t5-one-line-summary为例， 展示 「根据传入的摘要内容生成对应的标题」。</strong></p>
<p><img loading="lazy" src="img/t5-models.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># pip install --upgrade simplet5</span>
<span class="kn">from</span> <span class="nn">simplet5</span> <span class="kn">import</span> <span class="n">SimpleT5</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">SimpleT5</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">load_model</span><span class="p">(</span><span class="s2">&#34;t5&#34;</span><span class="p">,</span><span class="s2">&#34;snrspeaks/t5-one-line-summary&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Global seed set to 42
    Downloading:   100%|          | 0.00/1.36k [00:00&lt;?, ?B/s]
    Downloading:   100%|          | 0.00/850M [00:00&lt;?, ?B/s]
    Downloading:   100%|          | 0.00/1.84k [00:00&lt;?, ?B/s]
    Downloading:   100%|          | 0.00/773k [00:00&lt;?, ?B/s]
    Downloading:   100%|          | 0.00/1.32M [00:00&lt;?, ?B/s]
    Downloading:   100%|          | 0.00/1.74k [00:00&lt;?, ?B/s]
</code></pre></div><br>
<p>根据英文摘要生成标题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">abstract</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;We describe a system called Overton, whose main design goal is to support engineers in building, monitoring, and improving production 
</span><span class="s2">machine learning systems. Key challenges engineers face are monitoring fine-grained quality, diagnosing errors in sophisticated applications, and 
</span><span class="s2">handling contradictory or incomplete supervision data. Overton automates the life cycle of model construction, deployment, and monitoring by providing a 
</span><span class="s2">set of novel high-level, declarative abstractions. Overton&#39;s vision is to shift developers to these higher-level tasks instead of lower-level machine learning tasks. 
</span><span class="s2">In fact, using Overton, engineers can build deep-learning-based applications without writing any code in frameworks like TensorFlow. For over a year, 
</span><span class="s2">Overton has been used in production to support multiple applications in both near-real-time applications and back-of-house processing. In that time, 
</span><span class="s2">Overton-based applications have answered billions of queries in multiple languages and processed trillions of records reducing errors 1.7-2.9 times versus production systems.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">abstract</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>['Overton: Building, Deploying, and Monitoring Deep Machine Learning Systems']
</code></pre>
<br>
<p>根据摘要生成多个标题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">abstract</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;We describe a system called Overton, whose main design goal is to support engineers in building, monitoring, and improving production 
</span><span class="s2">machine learning systems. Key challenges engineers face are monitoring fine-grained quality, diagnosing errors in sophisticated applications, and 
</span><span class="s2">handling contradictory or incomplete supervision data. Overton automates the life cycle of model construction, deployment, and monitoring by providing a 
</span><span class="s2">set of novel high-level, declarative abstractions. Overton&#39;s vision is to shift developers to these higher-level tasks instead of lower-level machine learning tasks. 
</span><span class="s2">In fact, using Overton, engineers can build deep-learning-based applications without writing any code in frameworks like TensorFlow. For over a year, 
</span><span class="s2">Overton has been used in production to support multiple applications in both near-real-time applications and back-of-house processing. In that time, 
</span><span class="s2">Overton-based applications have answered billions of queries in multiple languages and processed trillions of records reducing errors 1.7-2.9 times versus production systems.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="c1">#根据摘要生成5个标题</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">abstract</span><span class="p">,</span> 
              <span class="n">num_return_sequences</span><span class="o">=</span><span class="n">n</span><span class="p">,</span> 
              <span class="n">num_beams</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<pre><code>['Overton: Building, Deploying, and Monitoring Deep Machine Learning Systems',
 'Overton: Building, Deployment, and Improving Production Machine Learning Systems',
 'Overton: Building, Deploying, and Monitoring Machine Learning Systems for Engineers',
 'Overton: Building, Deploying, and Monitoring Machine Learning Systems',
 'Overton: Building, Deployment, and Monitoring Deep Machine Learning Systems']
</code></pre>
<p><br><br></p>
<h2 id="simplet5微调">simpleT5微调</h2>
<p>在 T5 模型的预训练阶段，它使用了巨大的文本语料库进行无监督的训练，以学习将输入文本转换为输出文本的能力。</p>
<p>预训练阶段结束后，T5 模型可以通过微调或迁移学习的方式用于各种下游 NLP 任务中，以实现最先进的性能表现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>

<span class="n">path</span> <span class="o">=</span> <span class="s2">&#34;https://raw.githubusercontent.com/Shivanandroy/T5-Finetuning-PyTorch/main/data/news_summary.csv&#34;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># simple5库传入的数据是DataFrames，必须含 &#34;source_text&#34; 和 &#34;target_text&#34;这两个字段。</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;headlines&#34;</span><span class="p">:</span><span class="s2">&#34;target_text&#34;</span><span class="p">,</span> <span class="s2">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;source_text&#34;</span><span class="p">})</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span><span class="s1">&#39;source_text&#39;</span><span class="p">,</span> <span class="s1">&#39;target_text&#39;</span><span class="p">]]</span>

<span class="c1"># T5 模型微调时候，source_text 数据都加入了前缀关键词summarise， 告诉 T5模型要做总结类任务的微调。</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;source_text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;summarize: &#34;</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;source_text&#39;</span><span class="p">]</span>
<span class="n">df</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<p>查看数据的形状</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">train_df</span><span class="p">,</span> <span class="n">test_df</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
<span class="n">train_df</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">test_df</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">((78720, 2), (19681, 2))
</code></pre></div><br>
<p>开始进行 T5 模型的微调</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">simplet5</span> <span class="kn">import</span> <span class="n">SimpleT5</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">SimpleT5</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_type</span><span class="o">=</span><span class="s2">&#34;t5&#34;</span><span class="p">,</span> <span class="n">model_name</span><span class="o">=</span><span class="s2">&#34;t5-base&#34;</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">train_df</span><span class="o">=</span><span class="n">train_df</span><span class="p">[:</span><span class="mi">5000</span><span class="p">],</span>
            <span class="n">eval_df</span><span class="o">=</span><span class="n">test_df</span><span class="p">[:</span><span class="mi">100</span><span class="p">],</span> 
            <span class="n">source_max_token_len</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> 
            <span class="n">target_max_token_len</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> 
            <span class="n">batch_size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">max_epochs</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">use_gpu</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Downloading: 100%
792k/792k [00:36&lt;00:00, 21.6kB/s]

Downloading: 100%
1.39M/1.39M [00:02&lt;00:00, 641kB/s]

Downloading: 100%
1.20k/1.20k [00:00&lt;00:00, 3.50kB/s]

Downloading: 100%
892M/892M [00:32&lt;00:00, 27.4MB/s]

GPU available: True, used: True
TPU available: False, using: 0 TPU cores
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]

  | Name  | Type                       | Params
-----------------------------------------------------
0 | model | T5ForConditionalGeneration | 222 M 
-----------------------------------------------------
222 M     Trainable params
0         Non-trainable params
222 M     Total params
891.614   Total estimated model params size (MB)
Validation sanity check: 0%
0/2 [22:52&lt;?, ?it/s]
Global seed set to 42
Epoch 2: 100%
638/638 [04:07&lt;00:00, 2.57it/s, loss=1.02, v_num=0, val_loss=1.200, train_loss=1.130]
Validating: 100%
13/13 [00:01&lt;00:00, 7.43it/s]
Validating: 100%
13/13 [00:01&lt;00:00, 7.29it/s]
Validating: 100%
13/13 [00:01&lt;00:00, 7.30it/s]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># let&#39;s load the trained model for inferencing:</span>
<span class="n">model</span><span class="o">.</span><span class="n">load_model</span><span class="p">(</span><span class="s2">&#34;t5&#34;</span><span class="p">,</span><span class="s2">&#34;outputs/SimpleT5-epoch-2-train-loss-0.9478&#34;</span><span class="p">,</span> <span class="n">use_gpu</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="n">text_to_summarize</span><span class="o">=</span><span class="s2">&#34;&#34;&#34;summarize: Rahul Gandhi has replied to Goa CM Manohar Parrikar&#39;s letter, 
</span><span class="s2">which accused the Congress President of using his &#34;visit to an ailing man for political gains&#34;. 
</span><span class="s2">&#34;He&#39;s under immense pressure from the PM after our meeting and needs to demonstrate his loyalty by attacking me,&#34; 
</span><span class="s2">Gandhi wrote in his letter. Parrikar had clarified he didn&#39;t discuss Rafale deal with Rahul.
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">text_to_summarize</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;Rahul responds to Goa CM accusing him of using visit for political gain&#39;]
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://hidadeng.github.io/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://hidadeng.github.io/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://hidadeng.github.io/blog/management_python_course/">支持开票 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
