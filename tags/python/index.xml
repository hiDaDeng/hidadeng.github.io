<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on 大邓和他的PYTHON</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 12 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>词向量 | 使用1亿B站用户签名训练word2vec词向量</title>
      <link>https://textdata.cn/blog/2023-11-12-using-100m-bilibili-user-sign-data-to-training-word2vec/</link>
      <pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-12-using-100m-bilibili-user-sign-data-to-training-word2vec/</guid>
      <description>&lt;h2 id=&#34;一用户签名&#34;&gt;一、用户签名&lt;/h2&gt;
&lt;p&gt;1亿B站用户群体十分庞大，文本中蕴含着这个群体的认知信息(如兴趣、身份、座右铭等)，如果能用签名训练word2vec词向量模型，说不定就有利用这个模型，对每个用户签名进行量化,  对用户进行分类。 本文要解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建语料训练出模型&lt;/li&gt;
&lt;li&gt;简单看看模型训练效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二准备语料&#34;&gt;二、准备语料&lt;/h2&gt;
&lt;p&gt;Kaggle网有1亿B站用户数据集，下载地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/datasets/beats0/bilibili-user&#34;&gt;https://www.kaggle.com/datasets/beats0/bilibili-user&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前分享过 &lt;a href=&#34;&#34;&gt;数据集 | 哔哩哔哩 1 亿用户数据&lt;/a&gt; ， 阅读此文可以熟悉pandas的一些基本操作，如数据读取、文本操作等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#从kaggle下载B站1亿用户数据&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;User.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#签名非空的记录&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dropna&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sign&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;数据集用户数量: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;数据集用户数量: 100000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;将9093092个非空签名汇总到 &lt;em&gt;&lt;strong&gt;B站用户签名语料.txt&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;B站用户签名语料.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tolist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码运行后，得到 302M &lt;em&gt;&lt;strong&gt;B站用户签名语料.txt&lt;/strong&gt;&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三训练word2vec&#34;&gt;三、训练Word2Vec&lt;/h2&gt;
&lt;p&gt;我使用的自己 &lt;strong&gt;未公开&lt;/strong&gt; 的cntext 2.0.0版本， Bug频出，等调整好了再公开。&lt;/p&gt;
&lt;h3 id=&#34;31-安装cntext&#34;&gt;3.1 安装cntext&lt;/h3&gt;
&lt;p&gt;将 cntext-2.0.0-py3-none-any.whl 放置于桌面，打开 &lt;strong&gt;cmd&lt;/strong&gt;  (苹果电脑打开terminal)， 输入cd desktop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在 &lt;strong&gt;cmd&lt;/strong&gt;  (苹果电脑打开terminal) 中使用pip3 安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip3 install cntext-2.0.0-py3-none-any.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文末有cntext-2.0.0-py3-none-any.whl获取方式&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;32-训练word2vec&#34;&gt;3.2 训练word2vec&lt;/h3&gt;
&lt;p&gt;cntext训练时候Word2Vec模型参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window = 6&lt;/li&gt;
&lt;li&gt;vector_size = 100&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#cntext2.0.0未公开，获取2.0.0请阅读文末获取方式&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cntext&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ct&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W2VModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;corpus_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;B站用户签名语料.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Starting Processing Corpus ...
Start Training! This may take a while. Please be patient...
Traning word2vec model took 1329 seconds
Note: The Word2Vec model has been saved to output/Word2Vec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;耗时1329s， 模型训练完成！得到的模型文件，如下截图&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/word2vec.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四使用word2vec&#34;&gt;四、使用word2vec&lt;/h2&gt;
&lt;h3 id=&#34;41-读取模型&#34;&gt;4.1 读取模型&lt;/h3&gt;
&lt;p&gt;使用gensim录入模型 “&lt;strong&gt;B站用户签名语料&lt;/strong&gt;.100.6.bin” ,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gensim.models&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyedVectors&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyedVectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;output/Word2Vec/B站用户签名语料.100.6.bin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;模型词汇量: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;模型词汇量:  343650
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;42-查询某词的词向量&#34;&gt;4.2 查询某词的词向量&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;w2v.wv[&amp;#39;高冷&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;array([-1.1872591e+00, -1.2438694e+00, -9.4200081e-01, -4.0355644e+00,
        3.3588424e-01, -4.2525402e-01, -4.1175735e-01,  1.8802526e+00,
       -3.5992053e-01,  2.8361969e+00, -1.1437206e+00,  4.4662678e-01,
        1.2098696e+00,  7.2761238e-02,  3.0633178e-01,  6.7496544e-01,
       -3.0175522e-01, -1.1573459e+00, -7.4999934e-01,  1.6484009e+00,
        1.3102854e+00,  1.0134944e+00,  1.0711597e+00, -1.2194906e+00,
        2.1523576e+00, -4.4606316e-01,  1.0664939e+00,  5.3640699e-01,
        1.1061722e+00, -2.7679250e-01,  8.6652651e-02,  1.6876321e-02,
        6.3120401e-01, -1.6914845e-02,  9.6446878e-01,  1.7046971e+00,
       -1.7395537e+00,  1.7914917e+00, -1.3069035e+00,  6.6770411e-01,
       -3.4902021e-01, -1.3345592e-02, -4.3595994e-01, -5.1443088e-01,
        1.0884547e+00, -3.3695351e-02, -5.7088321e-01,  1.4533000e+00,
        8.0498764e-03,  9.2341286e-01, -1.6219637e-01, -2.5400406e-01,
       -1.4215972e-01,  7.1577376e-01, -1.2812414e+00, -1.7630520e-01,
       -1.7600318e+00, -1.4759690e+00, -2.3313001e-01, -8.8995326e-01,
        4.5749718e-01,  2.1950055e-02,  2.5749078e-01, -7.6623499e-01,
        3.1834408e-03,  7.2732526e-01, -2.5459883e+00, -1.5240467e+00,
        2.4574394e+00,  7.3715413e-01,  2.2769032e+00,  1.7492032e+00,
       -4.1084039e-01,  6.4300962e-02,  6.2454116e-01, -4.0486854e-02,
        7.7100635e-01, -1.9729427e+00, -8.4130460e-01, -3.0110097e-01,
       -1.0786959e+00, -1.9136167e+00, -1.7037696e-01, -7.3208618e-03,
        4.8502678e-01, -1.0348318e+00,  3.1141058e-01,  2.9913974e-01,
       -2.1714316e-01, -3.1645024e+00,  7.0972210e-03,  7.8701675e-01,
       -2.2510442e-01, -9.8428482e-01,  1.0685140e+00,  2.1938827e+00,
       -9.1963351e-01,  6.3011467e-01, -1.1531134e+00, -9.2123538e-02],
      dtype=float32)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;43-查看近义词&#34;&gt;4.3 查看近义词&lt;/h3&gt;
&lt;p&gt;通过给定词语，查看其近义词，可以了解模型训练的好坏。语义捕捉的合理，说明语料合理，模型训练的好。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#列表中可以传入任意多个词，这里大邓偷懒，都只传入了一两个词&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most_similar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;高冷&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[(&amp;#39;腹黑&amp;#39;, 0.8282514810562134),
 (&amp;#39;呆萌&amp;#39;, 0.8148132562637329),
 (&amp;#39;傲娇&amp;#39;, 0.7791209816932678),
 (&amp;#39;逗比&amp;#39;, 0.7720615863800049),
 (&amp;#39;闷骚&amp;#39;, 0.7617782354354858),
 (&amp;#39;精分&amp;#39;, 0.7545589208602905),
 (&amp;#39;文静&amp;#39;, 0.7545390725135803),
 (&amp;#39;慢热&amp;#39;, 0.7387350797653198),
 (&amp;#39;自恋&amp;#39;, 0.7299264669418335),
 (&amp;#39;淑女&amp;#39;, 0.7261008620262146),
 (&amp;#39;耿直&amp;#39;, 0.7238353490829468),
 (&amp;#39;帅气&amp;#39;, 0.7233086824417114),
 (&amp;#39;暖男&amp;#39;, 0.720333456993103),
 (&amp;#39;内向&amp;#39;, 0.7159033417701721),
 (&amp;#39;蠢&amp;#39;, 0.7157402038574219),
 (&amp;#39;逗逼&amp;#39;, 0.7091616988182068),
 (&amp;#39;神经质&amp;#39;, 0.7085140347480774),
 (&amp;#39;女汉子&amp;#39;, 0.707956850528717),
 (&amp;#39;毒舌&amp;#39;, 0.7058071494102478),
 (&amp;#39;逗&amp;#39;, 0.7048983573913574)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most_similar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;女汉子&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[(&amp;#39;女汉纸&amp;#39;, 0.8832258582115173),
 (&amp;#39;汉子&amp;#39;, 0.8506060838699341),
 (&amp;#39;萌妹子&amp;#39;, 0.8475067615509033),
 (&amp;#39;暖男&amp;#39;, 0.8445340394973755),
 (&amp;#39;女神经&amp;#39;, 0.838117241859436),
 (&amp;#39;萌妹纸&amp;#39;, 0.8303463459014893),
 (&amp;#39;闷骚&amp;#39;, 0.8296418786048889),
 (&amp;#39;妹纸&amp;#39;, 0.8289912343025208),
 (&amp;#39;软妹子&amp;#39;, 0.8211091756820679),
 (&amp;#39;腹黑&amp;#39;, 0.8019399046897888),
 (&amp;#39;汉纸&amp;#39;, 0.7941007614135742),
 (&amp;#39;糙汉子&amp;#39;, 0.7915611267089844),
 (&amp;#39;孩纸&amp;#39;, 0.783301055431366),
 (&amp;#39;处女座&amp;#39;, 0.7807960510253906),
 (&amp;#39;腐女&amp;#39;, 0.779699444770813),
 (&amp;#39;宅女&amp;#39;, 0.7794589400291443),
 (&amp;#39;软妹&amp;#39;, 0.7725212574005127),
 (&amp;#39;小萝莉&amp;#39;, 0.7603519558906555),
 (&amp;#39;摩羯座&amp;#39;, 0.7602179646492004),
 (&amp;#39;呆萌&amp;#39;, 0.7555979490280151)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most_similar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;流氓&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[(&amp;#39;风骚&amp;#39;, 0.7411526441574097),
 (&amp;#39;气质&amp;#39;, 0.7314842343330383),
 (&amp;#39;霸道&amp;#39;, 0.7147162556648254),
 (&amp;#39;伪装成&amp;#39;, 0.7128302454948425),
 (&amp;#39;天生&amp;#39;, 0.7044478058815002),
 (&amp;#39;十足&amp;#39;, 0.6987764835357666),
 (&amp;#39;斯文&amp;#39;, 0.6978859901428223),
 (&amp;#39;禽兽&amp;#39;, 0.6960264444351196),
 (&amp;#39;病态&amp;#39;, 0.6890178322792053),
 (&amp;#39;才华&amp;#39;, 0.6817525029182434),
 (&amp;#39;正派&amp;#39;, 0.6785053610801697),
 (&amp;#39;文静&amp;#39;, 0.6763062477111816),
 (&amp;#39;聪慧&amp;#39;, 0.6758238077163696),
 (&amp;#39;自恋&amp;#39;, 0.6680983901023865),
 (&amp;#39;凡夫俗子&amp;#39;, 0.6680223345756531),
 (&amp;#39;冷血&amp;#39;, 0.6673165559768677),
 (&amp;#39;白痴&amp;#39;, 0.666796863079071),
 (&amp;#39;清纯&amp;#39;, 0.6666175127029419),
 (&amp;#39;愤青&amp;#39;, 0.6663431525230408),
 (&amp;#39;颇具&amp;#39;, 0.6648291945457458)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most_similar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;内向&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[(&amp;#39;外向&amp;#39;, 0.8674373030662537),
 (&amp;#39;腼腆&amp;#39;, 0.8610992431640625),
 (&amp;#39;开朗&amp;#39;, 0.8451307415962219),
 (&amp;#39;神经质&amp;#39;, 0.8253246545791626),
 (&amp;#39;孤僻&amp;#39;, 0.8227512836456299),
 (&amp;#39;胆小&amp;#39;, 0.7949897050857544),
 (&amp;#39;慢热&amp;#39;, 0.7939849495887756),
 (&amp;#39;大大咧咧&amp;#39;, 0.7869692444801331),
 (&amp;#39;古怪&amp;#39;, 0.7838969230651855),
 (&amp;#39;情绪化&amp;#39;, 0.7805034518241882),
 (&amp;#39;幽默&amp;#39;, 0.7713088989257812),
 (&amp;#39;不爱说话&amp;#39;, 0.76982182264328),
 (&amp;#39;活泼&amp;#39;, 0.7689502239227295),
 (&amp;#39;闷骚&amp;#39;, 0.766051173210144),
 (&amp;#39;记仇&amp;#39;, 0.7653043270111084),
 (&amp;#39;极度&amp;#39;, 0.7642502784729004),
 (&amp;#39;敏感&amp;#39;, 0.7624457478523254),
 (&amp;#39;自卑&amp;#39;, 0.7609980702400208),
 (&amp;#39;很宅&amp;#39;, 0.7600659132003784),
 (&amp;#39;矫情&amp;#39;, 0.7573622465133667)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most_similar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;牛&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;牛B&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[(&amp;#39;牛皮&amp;#39;, 0.7266886830329895),
 (&amp;#39;叼&amp;#39;, 0.7169520258903503),
 (&amp;#39;吊&amp;#39;, 0.7075901627540588),
 (&amp;#39;流弊&amp;#39;, 0.6949068307876587),
 (&amp;#39;张嘴&amp;#39;, 0.6911835074424744),
 (&amp;#39;逼人&amp;#39;, 0.6845391988754272),
 (&amp;#39;欠揍&amp;#39;, 0.6771396994590759),
 (&amp;#39;这块&amp;#39;, 0.6755802035331726),
 (&amp;#39;他妈&amp;#39;, 0.672274112701416),
 (&amp;#39;像不像&amp;#39;, 0.6720238924026489),
 (&amp;#39;长帅&amp;#39;, 0.669898509979248),
 (&amp;#39;跟个&amp;#39;, 0.6674190163612366),
 (&amp;#39;仁波切&amp;#39;, 0.6618945002555847),
 (&amp;#39;隔壁老王&amp;#39;, 0.6596662998199463),
 (&amp;#39;捞&amp;#39;, 0.6594889760017395),
 (&amp;#39;能装&amp;#39;, 0.658306896686554),
 (&amp;#39;盗号狗&amp;#39;, 0.6573488116264343),
 (&amp;#39;竟敢&amp;#39;, 0.654305636882782),
 (&amp;#39;牛掰&amp;#39;, 0.6534903049468994),
 (&amp;#39;老实&amp;#39;, 0.6533665657043457)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most_similar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;色&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[(&amp;#39;不遇倾城&amp;#39;, 0.7234371304512024),
 (&amp;#39;柔&amp;#39;, 0.6971151232719421),
 (&amp;#39;温&amp;#39;, 0.696250855922699),
 (&amp;#39;浮&amp;#39;, 0.6961503028869629),
 (&amp;#39;牡丹&amp;#39;, 0.6916242241859436),
 (&amp;#39;薄&amp;#39;, 0.6892343759536743),
 (&amp;#39;飘逸&amp;#39;, 0.687305212020874),
 (&amp;#39;丝&amp;#39;, 0.6816737651824951),
 (&amp;#39;彩&amp;#39;, 0.6801170110702515),
 (&amp;#39;骨&amp;#39;, 0.6786245703697205),
 (&amp;#39;细&amp;#39;, 0.6709766387939453),
 (&amp;#39;春&amp;#39;, 0.6705066561698914),
 (&amp;#39;羽&amp;#39;, 0.6662278771400452),
 (&amp;#39;沁&amp;#39;, 0.6659229397773743),
 (&amp;#39;华&amp;#39;, 0.6649417281150818),
 (&amp;#39;唇&amp;#39;, 0.6640968322753906),
 (&amp;#39;露&amp;#39;, 0.6638047695159912),
 (&amp;#39;墨&amp;#39;, 0.663625180721283),
 (&amp;#39;阳&amp;#39;, 0.6616363525390625),
 (&amp;#39;碧&amp;#39;, 0.6599227786064148)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;五获取资源&#34;&gt;五、获取资源&lt;/h2&gt;
&lt;p&gt;内容整理不易， 本文内容分免费和付费部分。 免费部分可以直接下载数据、构建语料、使用word2vec模型。 付费部分主要是cntext，用于训练word2vec模型。 如果对本文感兴趣，可加微信 372335839， 备注「姓名-学校-专业」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;免费获取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1亿用户数据集 &lt;a href=&#34;https://www.kaggle.com/datasets/beats0/bilibili-user&#34;&gt;https://www.kaggle.com/datasets/beats0/bilibili-user&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;B站用户签名语料.100.6.bin&lt;/strong&gt;     链接: &lt;a href=&#34;https://pan.baidu.com/s/1SM6fWZ3Jt7VFaZ2dedt5CA&#34;&gt;https://pan.baidu.com/s/1SM6fWZ3Jt7VFaZ2dedt5CA&lt;/a&gt; 提取码: bzmp&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;50元   获得cntext-2.0.0-py3-none-any.whl&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一用户签名">一、用户签名</h2>
<p>1亿B站用户群体十分庞大，文本中蕴含着这个群体的认知信息(如兴趣、身份、座右铭等)，如果能用签名训练word2vec词向量模型，说不定就有利用这个模型，对每个用户签名进行量化,  对用户进行分类。 本文要解决</p>
<ul>
<li>构建语料训练出模型</li>
<li>简单看看模型训练效果</li>
</ul>
<p><br><br></p>
<h2 id="二准备语料">二、准备语料</h2>
<p>Kaggle网有1亿B站用户数据集，下载地址</p>
<blockquote>
<p><a href="https://www.kaggle.com/datasets/beats0/bilibili-user">https://www.kaggle.com/datasets/beats0/bilibili-user</a></p>
</blockquote>
<p>之前分享过 <a href="">数据集 | 哔哩哔哩 1 亿用户数据</a> ， 阅读此文可以熟悉pandas的一些基本操作，如数据读取、文本操作等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#从kaggle下载B站1亿用户数据</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;User.csv&#39;</span><span class="p">)</span>

<span class="c1">#签名非空的记录</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;sign&#39;</span><span class="p">])</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;数据集用户数量: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">))</span>
<span class="n">df2</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">数据集用户数量: 100000000
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<p>将9093092个非空签名汇总到 <em><strong>B站用户签名语料.txt</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;B站用户签名语料.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">df2</span><span class="o">.</span><span class="n">sign</span><span class="o">.</span><span class="n">tolist</span><span class="p">()))</span>
</code></pre></div><p>代码运行后，得到 302M <em><strong>B站用户签名语料.txt</strong></em> 。</p>
<p><br><br></p>
<h2 id="三训练word2vec">三、训练Word2Vec</h2>
<p>我使用的自己 <strong>未公开</strong> 的cntext 2.0.0版本， Bug频出，等调整好了再公开。</p>
<h3 id="31-安装cntext">3.1 安装cntext</h3>
<p>将 cntext-2.0.0-py3-none-any.whl 放置于桌面，打开 <strong>cmd</strong>  (苹果电脑打开terminal)， 输入cd desktop</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd desktop
</code></pre></div><p>之后在 <strong>cmd</strong>  (苹果电脑打开terminal) 中使用pip3 安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext-2.0.0-py3-none-any.whl
</code></pre></div><p>文末有cntext-2.0.0-py3-none-any.whl获取方式</p>
<br>
<h3 id="32-训练word2vec">3.2 训练word2vec</h3>
<p>cntext训练时候Word2Vec模型参数</p>
<ul>
<li>window = 6</li>
<li>vector_size = 100</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#cntext2.0.0未公开，获取2.0.0请阅读文末获取方式</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">W2VModel</span><span class="p">(</span><span class="n">corpus_file</span><span class="o">=</span><span class="s1">&#39;B站用户签名语料.txt&#39;</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">window</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">vector_size</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Starting Processing Corpus ...
Start Training! This may take a while. Please be patient...
Traning word2vec model took 1329 seconds
Note: The Word2Vec model has been saved to output/Word2Vec
</code></pre></div><p>耗时1329s， 模型训练完成！得到的模型文件，如下截图</p>
<p><img loading="lazy" src="img/word2vec.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="四使用word2vec">四、使用word2vec</h2>
<h3 id="41-读取模型">4.1 读取模型</h3>
<p>使用gensim录入模型 “<strong>B站用户签名语料</strong>.100.6.bin” ,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;output/Word2Vec/B站用户签名语料.100.6.bin&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;模型词汇量: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">模型词汇量:  343650
</code></pre></div><br>
<h3 id="42-查询某词的词向量">4.2 查询某词的词向量</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">w2v.wv[&#39;高冷&#39;]
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-1.1872591e+00, -1.2438694e+00, -9.4200081e-01, -4.0355644e+00,
        3.3588424e-01, -4.2525402e-01, -4.1175735e-01,  1.8802526e+00,
       -3.5992053e-01,  2.8361969e+00, -1.1437206e+00,  4.4662678e-01,
        1.2098696e+00,  7.2761238e-02,  3.0633178e-01,  6.7496544e-01,
       -3.0175522e-01, -1.1573459e+00, -7.4999934e-01,  1.6484009e+00,
        1.3102854e+00,  1.0134944e+00,  1.0711597e+00, -1.2194906e+00,
        2.1523576e+00, -4.4606316e-01,  1.0664939e+00,  5.3640699e-01,
        1.1061722e+00, -2.7679250e-01,  8.6652651e-02,  1.6876321e-02,
        6.3120401e-01, -1.6914845e-02,  9.6446878e-01,  1.7046971e+00,
       -1.7395537e+00,  1.7914917e+00, -1.3069035e+00,  6.6770411e-01,
       -3.4902021e-01, -1.3345592e-02, -4.3595994e-01, -5.1443088e-01,
        1.0884547e+00, -3.3695351e-02, -5.7088321e-01,  1.4533000e+00,
        8.0498764e-03,  9.2341286e-01, -1.6219637e-01, -2.5400406e-01,
       -1.4215972e-01,  7.1577376e-01, -1.2812414e+00, -1.7630520e-01,
       -1.7600318e+00, -1.4759690e+00, -2.3313001e-01, -8.8995326e-01,
        4.5749718e-01,  2.1950055e-02,  2.5749078e-01, -7.6623499e-01,
        3.1834408e-03,  7.2732526e-01, -2.5459883e+00, -1.5240467e+00,
        2.4574394e+00,  7.3715413e-01,  2.2769032e+00,  1.7492032e+00,
       -4.1084039e-01,  6.4300962e-02,  6.2454116e-01, -4.0486854e-02,
        7.7100635e-01, -1.9729427e+00, -8.4130460e-01, -3.0110097e-01,
       -1.0786959e+00, -1.9136167e+00, -1.7037696e-01, -7.3208618e-03,
        4.8502678e-01, -1.0348318e+00,  3.1141058e-01,  2.9913974e-01,
       -2.1714316e-01, -3.1645024e+00,  7.0972210e-03,  7.8701675e-01,
       -2.2510442e-01, -9.8428482e-01,  1.0685140e+00,  2.1938827e+00,
       -9.1963351e-01,  6.3011467e-01, -1.1531134e+00, -9.2123538e-02],
      dtype=float32)
</code></pre></div><br>
<h3 id="43-查看近义词">4.3 查看近义词</h3>
<p>通过给定词语，查看其近义词，可以了解模型训练的好坏。语义捕捉的合理，说明语料合理，模型训练的好。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#列表中可以传入任意多个词，这里大邓偷懒，都只传入了一两个词</span>
<span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">([</span><span class="s1">&#39;高冷&#39;</span><span class="p">],</span> <span class="n">topn</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;腹黑&#39;, 0.8282514810562134),
 (&#39;呆萌&#39;, 0.8148132562637329),
 (&#39;傲娇&#39;, 0.7791209816932678),
 (&#39;逗比&#39;, 0.7720615863800049),
 (&#39;闷骚&#39;, 0.7617782354354858),
 (&#39;精分&#39;, 0.7545589208602905),
 (&#39;文静&#39;, 0.7545390725135803),
 (&#39;慢热&#39;, 0.7387350797653198),
 (&#39;自恋&#39;, 0.7299264669418335),
 (&#39;淑女&#39;, 0.7261008620262146),
 (&#39;耿直&#39;, 0.7238353490829468),
 (&#39;帅气&#39;, 0.7233086824417114),
 (&#39;暖男&#39;, 0.720333456993103),
 (&#39;内向&#39;, 0.7159033417701721),
 (&#39;蠢&#39;, 0.7157402038574219),
 (&#39;逗逼&#39;, 0.7091616988182068),
 (&#39;神经质&#39;, 0.7085140347480774),
 (&#39;女汉子&#39;, 0.707956850528717),
 (&#39;毒舌&#39;, 0.7058071494102478),
 (&#39;逗&#39;, 0.7048983573913574)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">([</span><span class="s1">&#39;女汉子&#39;</span><span class="p">],</span> <span class="n">topn</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;女汉纸&#39;, 0.8832258582115173),
 (&#39;汉子&#39;, 0.8506060838699341),
 (&#39;萌妹子&#39;, 0.8475067615509033),
 (&#39;暖男&#39;, 0.8445340394973755),
 (&#39;女神经&#39;, 0.838117241859436),
 (&#39;萌妹纸&#39;, 0.8303463459014893),
 (&#39;闷骚&#39;, 0.8296418786048889),
 (&#39;妹纸&#39;, 0.8289912343025208),
 (&#39;软妹子&#39;, 0.8211091756820679),
 (&#39;腹黑&#39;, 0.8019399046897888),
 (&#39;汉纸&#39;, 0.7941007614135742),
 (&#39;糙汉子&#39;, 0.7915611267089844),
 (&#39;孩纸&#39;, 0.783301055431366),
 (&#39;处女座&#39;, 0.7807960510253906),
 (&#39;腐女&#39;, 0.779699444770813),
 (&#39;宅女&#39;, 0.7794589400291443),
 (&#39;软妹&#39;, 0.7725212574005127),
 (&#39;小萝莉&#39;, 0.7603519558906555),
 (&#39;摩羯座&#39;, 0.7602179646492004),
 (&#39;呆萌&#39;, 0.7555979490280151)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">([</span><span class="s1">&#39;流氓&#39;</span><span class="p">],</span> <span class="n">topn</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;风骚&#39;, 0.7411526441574097),
 (&#39;气质&#39;, 0.7314842343330383),
 (&#39;霸道&#39;, 0.7147162556648254),
 (&#39;伪装成&#39;, 0.7128302454948425),
 (&#39;天生&#39;, 0.7044478058815002),
 (&#39;十足&#39;, 0.6987764835357666),
 (&#39;斯文&#39;, 0.6978859901428223),
 (&#39;禽兽&#39;, 0.6960264444351196),
 (&#39;病态&#39;, 0.6890178322792053),
 (&#39;才华&#39;, 0.6817525029182434),
 (&#39;正派&#39;, 0.6785053610801697),
 (&#39;文静&#39;, 0.6763062477111816),
 (&#39;聪慧&#39;, 0.6758238077163696),
 (&#39;自恋&#39;, 0.6680983901023865),
 (&#39;凡夫俗子&#39;, 0.6680223345756531),
 (&#39;冷血&#39;, 0.6673165559768677),
 (&#39;白痴&#39;, 0.666796863079071),
 (&#39;清纯&#39;, 0.6666175127029419),
 (&#39;愤青&#39;, 0.6663431525230408),
 (&#39;颇具&#39;, 0.6648291945457458)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">([</span><span class="s1">&#39;内向&#39;</span><span class="p">],</span> <span class="n">topn</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;外向&#39;, 0.8674373030662537),
 (&#39;腼腆&#39;, 0.8610992431640625),
 (&#39;开朗&#39;, 0.8451307415962219),
 (&#39;神经质&#39;, 0.8253246545791626),
 (&#39;孤僻&#39;, 0.8227512836456299),
 (&#39;胆小&#39;, 0.7949897050857544),
 (&#39;慢热&#39;, 0.7939849495887756),
 (&#39;大大咧咧&#39;, 0.7869692444801331),
 (&#39;古怪&#39;, 0.7838969230651855),
 (&#39;情绪化&#39;, 0.7805034518241882),
 (&#39;幽默&#39;, 0.7713088989257812),
 (&#39;不爱说话&#39;, 0.76982182264328),
 (&#39;活泼&#39;, 0.7689502239227295),
 (&#39;闷骚&#39;, 0.766051173210144),
 (&#39;记仇&#39;, 0.7653043270111084),
 (&#39;极度&#39;, 0.7642502784729004),
 (&#39;敏感&#39;, 0.7624457478523254),
 (&#39;自卑&#39;, 0.7609980702400208),
 (&#39;很宅&#39;, 0.7600659132003784),
 (&#39;矫情&#39;, 0.7573622465133667)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">([</span><span class="s1">&#39;牛&#39;</span><span class="p">,</span> <span class="s1">&#39;牛B&#39;</span><span class="p">],</span> <span class="n">topn</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;牛皮&#39;, 0.7266886830329895),
 (&#39;叼&#39;, 0.7169520258903503),
 (&#39;吊&#39;, 0.7075901627540588),
 (&#39;流弊&#39;, 0.6949068307876587),
 (&#39;张嘴&#39;, 0.6911835074424744),
 (&#39;逼人&#39;, 0.6845391988754272),
 (&#39;欠揍&#39;, 0.6771396994590759),
 (&#39;这块&#39;, 0.6755802035331726),
 (&#39;他妈&#39;, 0.672274112701416),
 (&#39;像不像&#39;, 0.6720238924026489),
 (&#39;长帅&#39;, 0.669898509979248),
 (&#39;跟个&#39;, 0.6674190163612366),
 (&#39;仁波切&#39;, 0.6618945002555847),
 (&#39;隔壁老王&#39;, 0.6596662998199463),
 (&#39;捞&#39;, 0.6594889760017395),
 (&#39;能装&#39;, 0.658306896686554),
 (&#39;盗号狗&#39;, 0.6573488116264343),
 (&#39;竟敢&#39;, 0.654305636882782),
 (&#39;牛掰&#39;, 0.6534903049468994),
 (&#39;老实&#39;, 0.6533665657043457)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="o">.</span><span class="n">most_similar</span><span class="p">([</span><span class="s1">&#39;色&#39;</span><span class="p">],</span> <span class="n">topn</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;不遇倾城&#39;, 0.7234371304512024),
 (&#39;柔&#39;, 0.6971151232719421),
 (&#39;温&#39;, 0.696250855922699),
 (&#39;浮&#39;, 0.6961503028869629),
 (&#39;牡丹&#39;, 0.6916242241859436),
 (&#39;薄&#39;, 0.6892343759536743),
 (&#39;飘逸&#39;, 0.687305212020874),
 (&#39;丝&#39;, 0.6816737651824951),
 (&#39;彩&#39;, 0.6801170110702515),
 (&#39;骨&#39;, 0.6786245703697205),
 (&#39;细&#39;, 0.6709766387939453),
 (&#39;春&#39;, 0.6705066561698914),
 (&#39;羽&#39;, 0.6662278771400452),
 (&#39;沁&#39;, 0.6659229397773743),
 (&#39;华&#39;, 0.6649417281150818),
 (&#39;唇&#39;, 0.6640968322753906),
 (&#39;露&#39;, 0.6638047695159912),
 (&#39;墨&#39;, 0.663625180721283),
 (&#39;阳&#39;, 0.6616363525390625),
 (&#39;碧&#39;, 0.6599227786064148)]
</code></pre></div><br>
<br>
<h2 id="五获取资源">五、获取资源</h2>
<p>内容整理不易， 本文内容分免费和付费部分。 免费部分可以直接下载数据、构建语料、使用word2vec模型。 付费部分主要是cntext，用于训练word2vec模型。 如果对本文感兴趣，可加微信 372335839， 备注「姓名-学校-专业」</p>
<ul>
<li>
<p>免费获取</p>
<ul>
<li>
<p>1亿用户数据集 <a href="https://www.kaggle.com/datasets/beats0/bilibili-user">https://www.kaggle.com/datasets/beats0/bilibili-user</a></p>
</li>
<li>
<p><strong>B站用户签名语料.100.6.bin</strong>     链接: <a href="https://pan.baidu.com/s/1SM6fWZ3Jt7VFaZ2dedt5CA">https://pan.baidu.com/s/1SM6fWZ3Jt7VFaZ2dedt5CA</a> 提取码: bzmp</p>
</li>
</ul>
</li>
<li>
<p>50元   获得cntext-2.0.0-py3-none-any.whl</p>
</li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>预训练模型(付费) | 使用1000w专利摘要训练word2vec模型，可用于开发词典</title>
      <link>https://textdata.cn/blog/2023-11-10-training-word2vec-model-using-china-3751w-patent-application-dataset/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-10-training-word2vec-model-using-china-3751w-patent-application-dataset/</guid>
      <description>&lt;h2 id=&#34;一说明&#34;&gt;一、说明&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/&#34;&gt;**3571万条专利申请数据集(1985-2022年) **&lt;/a&gt; 中随机抽取了28%的 「&lt;strong&gt;专利摘要&lt;/strong&gt;」，构成6.14G的训练语料(千万级别)， 耗时6小时，训练得到word2vec模型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意， 100%全部语料有24G， 使用服务区内存128G，跑了20小时预处理还没完成，内存就炸了。&lt;/p&gt;
&lt;p&gt;没办法，我不会优化代码性能，所以只能抽取28%的文本数据来训练word2vec&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;p&gt;本文需要用到新cntext，因为bug较多， 直接上传到PyPi，将导致之前制作的课程和公众号推文相关内容全部重新一遍。&lt;/p&gt;
&lt;h2 id=&#34;一语料构建&#34;&gt;一、语料构建&lt;/h2&gt;
&lt;p&gt;随机抽取28%的记录，构成千万专利文本摘要训练语料。&lt;/p&gt;
&lt;p&gt;为了防止电脑内存爆炸， 对任意单个大csv文件，分批次读取，每次读10w行。最终将专利摘要文本保存到txt文件中，编码方式为utf-8。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果想开发一些词典，可以跳过此部分内容，并不影响代码运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/screen-datasets.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#将代码放在csv数据文件夹内&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1000w专利摘要.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;txtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#获得当前文件夹内所有的csv文件路径&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;csvfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#分批次读取csv，每次读10w行&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;#剔除专利摘要为空的记录&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dropna&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inplace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;专利摘要&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;#随机抽取28%的记录&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;sample_df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frac&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.28&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;txtf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample_df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;专利摘要&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tolist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终得到的&lt;strong&gt;1000w专利摘要.txt&lt;/strong&gt; 文件有6.14G&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h2 id=&#34;二训练word2vec&#34;&gt;二、训练word2vec&lt;/h2&gt;
&lt;p&gt;我使用的自己 &lt;strong&gt;未公开&lt;/strong&gt; 的cntext 2.0.0版本， Bug频出，等调整好了再公开。&lt;/p&gt;
&lt;h3 id=&#34;21-安装&#34;&gt;2.1 安装&lt;/h3&gt;
&lt;p&gt;将 cntext-2.0.0-py3-none-any.whl 放置于桌面，打开 &lt;strong&gt;cmd&lt;/strong&gt;  (苹果电脑打开terminal)， 输入cd desktop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在 &lt;strong&gt;cmd&lt;/strong&gt;  (苹果电脑打开terminal) 中使用pip3 安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip3 install cntext-2.0.0-py3-none-any.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文末有cntext-2.0.0-py3-none-any.whl获取方式&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Word2Vec模型参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window = 6&lt;/li&gt;
&lt;li&gt;vector_size = 100&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#cntext为2.0.0&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cntext&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ct&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;w2v_model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W2VModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;corpus_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1000w专利摘要.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;chinese&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;w2v_model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;window_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Starting Preprocessing Corpus ...
Starting Training! This may take a while.Please be patient...
Traning word2vec model took 22806 seconds
Note: The Word2Vec model hase saved to output/Word2Vec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/model-dir.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;cntext.W2VModel训练中考虑到了词组情况，为了将&amp;quot;科学技术&amp;quot;这类短语词(词组)也纳入到word2vec训练中， 使用到gensim.models.phrases.Phrase。&lt;/p&gt;
&lt;p&gt;大邓不会优化性能，训练word2vec时，预处理部分占用内存很大，  我用的服务器内存128G， 训练时间6.335小时。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三使用词向量&#34;&gt;三、使用词向量&lt;/h2&gt;
&lt;h3 id=&#34;31-录入模型&#34;&gt;3.1 录入模型&lt;/h3&gt;
&lt;p&gt;需要注意， 专利模型文件是三个哦， 三个是一个整体，不要随意删除&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/model-dir.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#2.0.0版本cntext，未公开&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cntext&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ct&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_w2v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Word2Vec/1000w专利摘要文本.100.6.bin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Loading word2vec model...
&amp;lt;gensim.models.word2vec.Word2Vec at 0x2afb3f650&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;32-词汇量&#34;&gt;3.2 词汇量&lt;/h3&gt;
&lt;p&gt;查看模型中的词汇量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#模型中词汇量
len(w2v.wv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;1120752
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;33-查看词向量&#34;&gt;3.3 查看词向量&lt;/h3&gt;
&lt;p&gt;查看任意词的词向量，例如“&lt;strong&gt;创新&lt;/strong&gt;”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#查看 ”创新” 的词向量&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创新&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;array([-2.3267136 ,  2.3038454 ,  2.8232517 , -3.23959   , -2.9036384 ,
       -2.0450666 , -1.5516403 ,  0.00575857, -0.64638597,  1.3585284 ,
       -1.7491045 , -1.3659543 ,  1.9901325 , -1.5066692 ,  0.5094756 ,
       -1.7032526 , -0.35252815, -4.00833   ,  3.5424068 , -0.0426405 ,
       -0.24548595, -0.7675196 ,  2.366155  , -0.18583044,  0.83989865,
        1.5965563 ,  0.30173486, -0.80054444,  2.0068777 ,  1.770656  ,
        0.06608703, -2.5833828 ,  1.7995895 , -0.281671  ,  0.06354411,
        1.2502885 ,  1.1960976 , -0.19735877, -2.3988242 ,  1.0004953 ,
        0.950612  , -2.9186552 ,  2.5141885 ,  0.5993077 ,  1.2969743 ,
       -3.7506597 ,  2.6031113 , -0.30022916, -1.0615158 , -0.2402753 ,
       -0.29447314, -1.7101966 , -2.6812305 ,  1.1898949 , -0.34348696,
       -1.7013234 ,  0.27328706, -0.67401695, -2.8010712 , -1.5993378 ,
        0.55218667, -0.15136468,  0.67049694,  0.6745255 , -0.80350083,
        2.254024  , -0.8005472 , -2.0170422 ,  2.882873  , -0.46188217,
        0.8481421 , -1.3741239 ,  0.7432127 ,  1.1100464 , -0.64173746,
       -1.3264686 , -1.991515  , -0.27887765, -0.62801987, -3.0960062 ,
       -3.2658167 , -0.065689  ,  2.5853407 , -1.6554247 , -0.49887556,
       -2.146973  , -0.45912525,  0.28037554,  1.0885888 ,  1.6503012 ,
        1.0013059 ,  0.3194557 ,  3.0309706 , -4.5257196 ,  0.4644844 ,
        3.0723457 ,  0.49002075,  2.4370434 , -0.7763012 ,  3.2541463 ],
      dtype=float32)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;&lt;strong&gt;注意: 如果查询的词未在模型中，会出现KeyError报错&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;牛逼&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/error.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;34-最相似词&#34;&gt;3.4 最相似词&lt;/h3&gt;
&lt;p&gt;与&amp;rsquo;创新&#39;, &amp;lsquo;颠覆&amp;rsquo;最相似的20个词&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#词语列表中可传入任意多个词，
#大邓词穷，只想到这两个相似的种子词
w2v.wv.most_similar([&amp;#39;创新&amp;#39;, &amp;#39;颠覆&amp;#39;], topn=20)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[(&amp;#39;革新&amp;#39;, 0.8313461542129517),
 (&amp;#39;变革&amp;#39;, 0.8260877728462219),
 (&amp;#39;革命性&amp;#39;, 0.79015052318573),
 (&amp;#39;从根本上改变&amp;#39;, 0.7867545485496521),
 (&amp;#39;改革&amp;#39;, 0.7788680791854858),
 (&amp;#39;技术创新&amp;#39;, 0.7715167999267578),
 (&amp;#39;核心技术&amp;#39;, 0.7679213881492615),
 (&amp;#39;独创&amp;#39;, 0.7668667435646057),
 (&amp;#39;创新型&amp;#39;, 0.7655373811721802),
 (&amp;#39;颠覆性&amp;#39;, 0.7575560212135315),
 (&amp;#39;借鉴&amp;#39;, 0.7570509910583496),
 (&amp;#39;全新&amp;#39;, 0.7496902942657471),
 (&amp;#39;有别于&amp;#39;, 0.7489079236984253),
 (&amp;#39;打破常规&amp;#39;, 0.7397119402885437),
 (&amp;#39;改变目前&amp;#39;, 0.735921323299408),
 (&amp;#39;打破传统&amp;#39;, 0.7265862226486206),
 (&amp;#39;大胆&amp;#39;, 0.7247217893600464),
 (&amp;#39;加以改进&amp;#39;, 0.7223487496376038),
 (&amp;#39;划时代&amp;#39;, 0.7221404910087585),
 (&amp;#39;改变过去&amp;#39;, 0.7220492959022522)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;刚刚的运行，体现模型很好的学习到了专利摘要中的语义关系。&lt;/p&gt;
&lt;p&gt;如果我想开发三个词典，分别是 &lt;strong&gt;创新&lt;/strong&gt;、&lt;strong&gt;成本&lt;/strong&gt;、&lt;strong&gt;质量&lt;/strong&gt; ，想直接将结果保存到txt中，可以运行如下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;seeds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创新概念&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创新&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;颠覆&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
         &lt;span class=&#34;s1&#34;&gt;&amp;#39;成本概念&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;成本&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
         &lt;span class=&#34;s1&#34;&gt;&amp;#39;质量概念&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;质量&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;#word2vec词向量&lt;/span&gt;
                     &lt;span class=&#34;n&#34;&gt;seeddict&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seeds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#种子词字典&lt;/span&gt;
                     &lt;span class=&#34;n&#34;&gt;topn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;#保留20个最相似的词&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Finish! 创新概念 candidates saved to output/Word2Vec
Finish! 成本概念 candidates saved to output/Word2Vec
Finish! 质量概念 candidates saved to output/Word2Vec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/similar-words.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四获取资源&#34;&gt;四、获取资源&lt;/h2&gt;
&lt;p&gt;内容整理不易， 如果对本文感兴趣，可加微信 372335839， 备注「姓名-学校-专业」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100元   获得
&lt;ul&gt;
&lt;li&gt;Word2Vec模型文件&lt;/li&gt;
&lt;li&gt;cntext-2.0.0-py3-none-any.whl&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;200元 获得
&lt;ul&gt;
&lt;li&gt;3751专利数据集&lt;/li&gt;
&lt;li&gt;Word2Vec模型文件&lt;/li&gt;
&lt;li&gt;cntext-2.0.0-py3-none-any.whl&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一说明">一、说明</h2>
<p><a href="https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/">**3571万条专利申请数据集(1985-2022年) **</a> 中随机抽取了28%的 「<strong>专利摘要</strong>」，构成6.14G的训练语料(千万级别)， 耗时6小时，训练得到word2vec模型。</p>
<blockquote>
<p>需要注意， 100%全部语料有24G， 使用服务区内存128G，跑了20小时预处理还没完成，内存就炸了。</p>
<p>没办法，我不会优化代码性能，所以只能抽取28%的文本数据来训练word2vec</p>
</blockquote>
<br>
<p>本文需要用到新cntext，因为bug较多， 直接上传到PyPi，将导致之前制作的课程和公众号推文相关内容全部重新一遍。</p>
<h2 id="一语料构建">一、语料构建</h2>
<p>随机抽取28%的记录，构成千万专利文本摘要训练语料。</p>
<p>为了防止电脑内存爆炸， 对任意单个大csv文件，分批次读取，每次读10w行。最终将专利摘要文本保存到txt文件中，编码方式为utf-8。</p>
<blockquote>
<p>如果想开发一些词典，可以跳过此部分内容，并不影响代码运行。</p>
</blockquote>
<p><img loading="lazy" src="img/screen-datasets.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#将代码放在csv数据文件夹内</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;1000w专利摘要.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">txtf</span><span class="p">:</span>
    <span class="c1">#获得当前文件夹内所有的csv文件路径</span>
    <span class="n">csvfs</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="s1">&#39;.csv&#39;</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">csvf</span> <span class="ow">in</span> <span class="n">csvfs</span><span class="p">:</span>
        <span class="c1">#分批次读取csv，每次读10w行</span>
        <span class="n">chunk_dfs</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="mi">100000</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">chunk_df</span> <span class="ow">in</span> <span class="n">chunk_dfs</span><span class="p">:</span>
            <span class="c1">#剔除专利摘要为空的记录</span>
            <span class="n">chunk_df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;专利摘要&#39;</span><span class="p">])</span>
            <span class="c1">#随机抽取28%的记录</span>
            <span class="n">sample_df</span> <span class="o">=</span> <span class="n">chunk_df</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span><span class="mf">0.28</span><span class="p">)</span>
            <span class="n">txtf</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sample_df</span><span class="p">[</span><span class="s1">&#39;专利摘要&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()))</span>
</code></pre></div><p>最终得到的<strong>1000w专利摘要.txt</strong> 文件有6.14G<br><br><br></p>
<h2 id="heading"></h2>
<h2 id="二训练word2vec">二、训练word2vec</h2>
<p>我使用的自己 <strong>未公开</strong> 的cntext 2.0.0版本， Bug频出，等调整好了再公开。</p>
<h3 id="21-安装">2.1 安装</h3>
<p>将 cntext-2.0.0-py3-none-any.whl 放置于桌面，打开 <strong>cmd</strong>  (苹果电脑打开terminal)， 输入cd desktop</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd desktop
</code></pre></div><p>之后在 <strong>cmd</strong>  (苹果电脑打开terminal) 中使用pip3 安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext-2.0.0-py3-none-any.whl
</code></pre></div><p>文末有cntext-2.0.0-py3-none-any.whl获取方式</p>
<br>
<p>Word2Vec模型参数</p>
<ul>
<li>window = 6</li>
<li>vector_size = 100</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#cntext为2.0.0</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">W2VModel</span><span class="p">(</span><span class="n">corpus_file</span><span class="o">=</span><span class="s1">&#39;1000w专利摘要.txt&#39;</span><span class="p">,</span>
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>

<span class="n">w2v_model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">vector_size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Starting Preprocessing Corpus ...
Starting Training! This may take a while.Please be patient...
Traning word2vec model took 22806 seconds
Note: The Word2Vec model hase saved to output/Word2Vec
</code></pre></div><p><img loading="lazy" src="img/model-dir.png" alt=""  />
</p>
<p>cntext.W2VModel训练中考虑到了词组情况，为了将&quot;科学技术&quot;这类短语词(词组)也纳入到word2vec训练中， 使用到gensim.models.phrases.Phrase。</p>
<p>大邓不会优化性能，训练word2vec时，预处理部分占用内存很大，  我用的服务器内存128G， 训练时间6.335小时。</p>
<p><br><br></p>
<h2 id="三使用词向量">三、使用词向量</h2>
<h3 id="31-录入模型">3.1 录入模型</h3>
<p>需要注意， 专利模型文件是三个哦， 三个是一个整体，不要随意删除</p>
<p><img loading="lazy" src="img/model-dir.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#2.0.0版本cntext，未公开</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">w2v</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_w2v</span><span class="p">(</span><span class="s1">&#39;Word2Vec/1000w专利摘要文本.100.6.bin&#39;</span><span class="p">)</span>
<span class="n">w2v</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Loading word2vec model...
&lt;gensim.models.word2vec.Word2Vec at 0x2afb3f650&gt;
</code></pre></div><br>
<h3 id="32-词汇量">3.2 词汇量</h3>
<p>查看模型中的词汇量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#模型中词汇量
len(w2v.wv)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1120752
</code></pre></div><br>
<h3 id="33-查看词向量">3.3 查看词向量</h3>
<p>查看任意词的词向量，例如“<strong>创新</strong>”</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#查看 ”创新” 的词向量</span>
<span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="p">[</span><span class="s1">&#39;创新&#39;</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-2.3267136 ,  2.3038454 ,  2.8232517 , -3.23959   , -2.9036384 ,
       -2.0450666 , -1.5516403 ,  0.00575857, -0.64638597,  1.3585284 ,
       -1.7491045 , -1.3659543 ,  1.9901325 , -1.5066692 ,  0.5094756 ,
       -1.7032526 , -0.35252815, -4.00833   ,  3.5424068 , -0.0426405 ,
       -0.24548595, -0.7675196 ,  2.366155  , -0.18583044,  0.83989865,
        1.5965563 ,  0.30173486, -0.80054444,  2.0068777 ,  1.770656  ,
        0.06608703, -2.5833828 ,  1.7995895 , -0.281671  ,  0.06354411,
        1.2502885 ,  1.1960976 , -0.19735877, -2.3988242 ,  1.0004953 ,
        0.950612  , -2.9186552 ,  2.5141885 ,  0.5993077 ,  1.2969743 ,
       -3.7506597 ,  2.6031113 , -0.30022916, -1.0615158 , -0.2402753 ,
       -0.29447314, -1.7101966 , -2.6812305 ,  1.1898949 , -0.34348696,
       -1.7013234 ,  0.27328706, -0.67401695, -2.8010712 , -1.5993378 ,
        0.55218667, -0.15136468,  0.67049694,  0.6745255 , -0.80350083,
        2.254024  , -0.8005472 , -2.0170422 ,  2.882873  , -0.46188217,
        0.8481421 , -1.3741239 ,  0.7432127 ,  1.1100464 , -0.64173746,
       -1.3264686 , -1.991515  , -0.27887765, -0.62801987, -3.0960062 ,
       -3.2658167 , -0.065689  ,  2.5853407 , -1.6554247 , -0.49887556,
       -2.146973  , -0.45912525,  0.28037554,  1.0885888 ,  1.6503012 ,
        1.0013059 ,  0.3194557 ,  3.0309706 , -4.5257196 ,  0.4644844 ,
        3.0723457 ,  0.49002075,  2.4370434 , -0.7763012 ,  3.2541463 ],
      dtype=float32)
</code></pre></div><br>
<p><strong>注意: 如果查询的词未在模型中，会出现KeyError报错</strong>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="p">[</span><span class="s1">&#39;牛逼&#39;</span><span class="p">]</span>
</code></pre></div><p><img loading="lazy" src="img/error.png" alt=""  />
</p>
<br>
<h3 id="34-最相似词">3.4 最相似词</h3>
<p>与&rsquo;创新', &lsquo;颠覆&rsquo;最相似的20个词</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#词语列表中可传入任意多个词，
#大邓词穷，只想到这两个相似的种子词
w2v.wv.most_similar([&#39;创新&#39;, &#39;颠覆&#39;], topn=20)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;革新&#39;, 0.8313461542129517),
 (&#39;变革&#39;, 0.8260877728462219),
 (&#39;革命性&#39;, 0.79015052318573),
 (&#39;从根本上改变&#39;, 0.7867545485496521),
 (&#39;改革&#39;, 0.7788680791854858),
 (&#39;技术创新&#39;, 0.7715167999267578),
 (&#39;核心技术&#39;, 0.7679213881492615),
 (&#39;独创&#39;, 0.7668667435646057),
 (&#39;创新型&#39;, 0.7655373811721802),
 (&#39;颠覆性&#39;, 0.7575560212135315),
 (&#39;借鉴&#39;, 0.7570509910583496),
 (&#39;全新&#39;, 0.7496902942657471),
 (&#39;有别于&#39;, 0.7489079236984253),
 (&#39;打破常规&#39;, 0.7397119402885437),
 (&#39;改变目前&#39;, 0.735921323299408),
 (&#39;打破传统&#39;, 0.7265862226486206),
 (&#39;大胆&#39;, 0.7247217893600464),
 (&#39;加以改进&#39;, 0.7223487496376038),
 (&#39;划时代&#39;, 0.7221404910087585),
 (&#39;改变过去&#39;, 0.7220492959022522)]
</code></pre></div><br>
<p>刚刚的运行，体现模型很好的学习到了专利摘要中的语义关系。</p>
<p>如果我想开发三个词典，分别是 <strong>创新</strong>、<strong>成本</strong>、<strong>质量</strong> ，想直接将结果保存到txt中，可以运行如下代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">seeds</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;创新概念&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;创新&#39;</span><span class="p">,</span> <span class="s1">&#39;颠覆&#39;</span><span class="p">],</span>
         <span class="s1">&#39;成本概念&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;成本&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">],</span>
         <span class="s1">&#39;质量概念&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;质量&#39;</span><span class="p">]}</span>

<span class="n">ct</span><span class="o">.</span><span class="n">expand_dictionary</span><span class="p">(</span><span class="n">wv</span><span class="o">=</span><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="p">,</span>       <span class="c1">#word2vec词向量</span>
                     <span class="n">seeddict</span><span class="o">=</span><span class="n">seeds</span><span class="p">,</span>  <span class="c1">#种子词字典</span>
                     <span class="n">topn</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>         <span class="c1">#保留20个最相似的词</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Finish! 创新概念 candidates saved to output/Word2Vec
Finish! 成本概念 candidates saved to output/Word2Vec
Finish! 质量概念 candidates saved to output/Word2Vec
</code></pre></div><p><img loading="lazy" src="img/similar-words.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="四获取资源">四、获取资源</h2>
<p>内容整理不易， 如果对本文感兴趣，可加微信 372335839， 备注「姓名-学校-专业」</p>
<ul>
<li>100元   获得
<ul>
<li>Word2Vec模型文件</li>
<li>cntext-2.0.0-py3-none-any.whl</li>
</ul>
</li>
<li>200元 获得
<ul>
<li>3751专利数据集</li>
<li>Word2Vec模型文件</li>
<li>cntext-2.0.0-py3-none-any.whl</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>bidict库 | Python双向映射功能，让字典更好用</title>
      <link>https://textdata.cn/blog/2023-11-10-bidirectional-mapping-library/</link>
      <pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-10-bidirectional-mapping-library/</guid>
      <description>&lt;p&gt;字典是一种键值对key-value pair数据结构， 用key查询到对应的值value， 但不能用value查到对应的key。但有时我们面对的分析任务，需要用value查到对应的key， bidict可以帮我们实现这一特性。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;一安装&#34;&gt;一、安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip install bidict
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;二快速开始&#34;&gt;二、快速开始&lt;/h2&gt;
&lt;h3 id=&#34;21-基本操作&#34;&gt;2.1 基本操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;bidict&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bidict&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bidict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;华为&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Huawei&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;比亚迪&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;BYD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;吉利&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Geely&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;微软&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Microsoft&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;苹果&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Apple&amp;#39;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;华为&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Microsoft&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Huawei
微软
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;22-get方法&#34;&gt;2.2 get方法&lt;/h3&gt;
&lt;p&gt;跟Python字典类似，如果字典中没有对应的key，直接查询会出现KeyError错误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;三星&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
Cell In[5], line 1
----&amp;gt; 1 test_data[&amp;#39;三星&amp;#39;]

File /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/bidict/_base.py:523, in BidictBase.__getitem__(self, key)
    521 def __getitem__(self, key: KT) -&amp;gt; VT:
    522     &amp;#34;&amp;#34;&amp;#34;*x.__getitem__(key) ⟺ x[key]*&amp;#34;&amp;#34;&amp;#34;
--&amp;gt; 523     return self._fwdm[key]

KeyError: &amp;#39;三星&amp;#39;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;使用get方法则可避免错误发生。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;test_data.get(&amp;#39;三星&amp;#39;, &amp;#39;missing&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;missing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;23-update方法&#34;&gt;2.3 update方法&lt;/h3&gt;
&lt;p&gt;update方法可以用来&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改key的value&lt;/li&gt;
&lt;li&gt;新增key-value-pair&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#更新值&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;华为&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;HUAWEI&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#新增key-value-pair&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;三星&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Samsung&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;华为&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;三星&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;HUAWEI
Samsung
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;24-pop方法&#34;&gt;2.4 pop方法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;test_data.pop(&amp;#39;三星&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#39;Samsung&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;此时再查看会发现test_data已经没有了三星相关的键值对&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;test_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;bidict({&amp;#39;华为&amp;#39;: &amp;#39;HUAWEI&amp;#39;, 
&amp;#39;比亚迪&amp;#39;: &amp;#39;BYD&amp;#39;, 
&amp;#39;吉利&amp;#39;: &amp;#39;Geely&amp;#39;, 
&amp;#39;微软&amp;#39;: &amp;#39;Microsoft&amp;#39;, 
&amp;#39;苹果&amp;#39;: &amp;#39;Apple&amp;#39;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p>字典是一种键值对key-value pair数据结构， 用key查询到对应的值value， 但不能用value查到对应的key。但有时我们面对的分析任务，需要用value查到对应的key， bidict可以帮我们实现这一特性。</p>
<br>
<h2 id="一安装">一、安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install bidict
</code></pre></div><br>
<h2 id="二快速开始">二、快速开始</h2>
<h3 id="21-基本操作">2.1 基本操作</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">bidict</span> <span class="kn">import</span> <span class="n">bidict</span>

<span class="n">test_data</span> <span class="o">=</span> <span class="n">bidict</span><span class="p">({</span>
   <span class="s1">&#39;华为&#39;</span><span class="p">:</span> <span class="s1">&#39;Huawei&#39;</span><span class="p">,</span>
   <span class="s1">&#39;比亚迪&#39;</span><span class="p">:</span> <span class="s1">&#39;BYD&#39;</span><span class="p">,</span>
   <span class="s1">&#39;吉利&#39;</span><span class="p">:</span> <span class="s1">&#39;Geely&#39;</span><span class="p">,</span>
   <span class="s1">&#39;微软&#39;</span><span class="p">:</span> <span class="s1">&#39;Microsoft&#39;</span><span class="p">,</span>
   <span class="s1">&#39;苹果&#39;</span><span class="p">:</span> <span class="s1">&#39;Apple&#39;</span>
<span class="p">})</span>

<span class="nb">print</span><span class="p">(</span><span class="n">test_data</span><span class="p">[</span><span class="s1">&#39;华为&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">test_data</span><span class="o">.</span><span class="n">inverse</span><span class="p">[</span><span class="s1">&#39;Microsoft&#39;</span><span class="p">])</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Huawei
微软
</code></pre></div><br>
<h3 id="22-get方法">2.2 get方法</h3>
<p>跟Python字典类似，如果字典中没有对应的key，直接查询会出现KeyError错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_data</span><span class="p">[</span><span class="s1">&#39;三星&#39;</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
Cell In[5], line 1
----&gt; 1 test_data[&#39;三星&#39;]

File /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/bidict/_base.py:523, in BidictBase.__getitem__(self, key)
    521 def __getitem__(self, key: KT) -&gt; VT:
    522     &#34;&#34;&#34;*x.__getitem__(key) ⟺ x[key]*&#34;&#34;&#34;
--&gt; 523     return self._fwdm[key]

KeyError: &#39;三星&#39;

</code></pre></div><br>
<p>使用get方法则可避免错误发生。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">test_data.get(&#39;三星&#39;, &#39;missing&#39;)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">missing
</code></pre></div><br>
<h3 id="23-update方法">2.3 update方法</h3>
<p>update方法可以用来</p>
<ul>
<li>更改key的value</li>
<li>新增key-value-pair</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#更新值</span>
<span class="n">test_data</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">华为</span><span class="o">=</span><span class="s1">&#39;HUAWEI&#39;</span><span class="p">)</span>

<span class="c1">#新增key-value-pair</span>
<span class="n">test_data</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">三星</span><span class="o">=</span><span class="s1">&#39;Samsung&#39;</span><span class="p">)</span>


<span class="nb">print</span><span class="p">(</span><span class="n">test_data</span><span class="p">[</span><span class="s1">&#39;华为&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">test_data</span><span class="p">[</span><span class="s1">&#39;三星&#39;</span><span class="p">])</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">HUAWEI
Samsung
</code></pre></div><br>
<h3 id="24-pop方法">2.4 pop方法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">test_data.pop(&#39;三星&#39;)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&#39;Samsung&#39;
</code></pre></div><br>
<p>此时再查看会发现test_data已经没有了三星相关的键值对</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">test_data
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">bidict({&#39;华为&#39;: &#39;HUAWEI&#39;, 
&#39;比亚迪&#39;: &#39;BYD&#39;, 
&#39;吉利&#39;: &#39;Geely&#39;, 
&#39;微软&#39;: &#39;Microsoft&#39;, 
&#39;苹果&#39;: &#39;Apple&#39;})
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>csv转xslx可节约存储空间</title>
      <link>https://textdata.cn/blog/2023-11-09-how-to-transform-big-csv-to-xlsx/</link>
      <pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-09-how-to-transform-big-csv-to-xlsx/</guid>
      <description>&lt;h2 id=&#34;csv转xlsx&#34;&gt;csv转xlsx&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-05-07-china-law-judgment-documents-datasets/&#34;&gt;&lt;strong&gt;93G数据集(付费) | 中国裁判文书网(2010-2021)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-04-12-china-mainland-corporate-registration-information/&#34;&gt;&lt;strong&gt;数据集(付费) | 2亿条中国大陆工商企业注册信息&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/&#34;&gt;&lt;strong&gt;数据集(付费) | 3571万条专利申请数据集(1985-2022年)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前分享的数据集都是体量特别大，而且都是用csv格式存储。之前有 &lt;a href=&#34;https://textdata.cn/blog/2023-03-23-china-a-share-market-dataset-mda-from-01-to-21/&#34;&gt;&lt;strong&gt;数据集(付费) | 2001年-2022年A股上市公司年报&amp;amp;管理层讨论与分析&lt;/strong&gt;&lt;/a&gt; 显示同样的信息量，使用xlsx所占用的存储空间比csv要小很多。如果能将这些数据集转成xlsx，将大大方便分享，且能节约后续读取数据的速度，但要记住xlsx最多只能存储104万行(记录)。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/a-dataset.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;今天以3751w专利申请数据为例， 将csv转为xlsx。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/screen-datasets.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;p&gt;我们希望程序能够自动读取csv， 不论csv中有多少行，每个xlsx最多存储100w行。&lt;/p&gt;
&lt;p&gt;将代码放置于数据集文件夹内，即ipynb文件与多个csv文件同处于一个文件夹内。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#获取csv文件路径列表&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;csvfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#批次读取，即每次只读100w行&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#文件名计数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;file_counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;#每个chunk不超过100w行&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;xlsxf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.xlsx&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file_counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;c1&#34;&gt;#将chunk存到xlsx中&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xlsxf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;n&#34;&gt;file_counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="csv转xlsx">csv转xlsx</h2>
<ul>
<li><a href="https://textdata.cn/blog/2023-05-07-china-law-judgment-documents-datasets/"><strong>93G数据集(付费) | 中国裁判文书网(2010-2021)</strong></a></li>
<li><a href="https://textdata.cn/blog/2023-04-12-china-mainland-corporate-registration-information/"><strong>数据集(付费) | 2亿条中国大陆工商企业注册信息</strong></a></li>
<li><a href="https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/"><strong>数据集(付费) | 3571万条专利申请数据集(1985-2022年)</strong></a></li>
</ul>
<p>之前分享的数据集都是体量特别大，而且都是用csv格式存储。之前有 <a href="https://textdata.cn/blog/2023-03-23-china-a-share-market-dataset-mda-from-01-to-21/"><strong>数据集(付费) | 2001年-2022年A股上市公司年报&amp;管理层讨论与分析</strong></a> 显示同样的信息量，使用xlsx所占用的存储空间比csv要小很多。如果能将这些数据集转成xlsx，将大大方便分享，且能节约后续读取数据的速度，但要记住xlsx最多只能存储104万行(记录)。</p>
<p><img loading="lazy" src="img/a-dataset.png" alt=""  />
</p>
<p>今天以3751w专利申请数据为例， 将csv转为xlsx。</p>
<p><img loading="lazy" src="img/screen-datasets.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="代码">代码</h2>
<p>我们希望程序能够自动读取csv， 不论csv中有多少行，每个xlsx最多存储100w行。</p>
<p>将代码放置于数据集文件夹内，即ipynb文件与多个csv文件同处于一个文件夹内。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#获取csv文件路径列表</span>
<span class="n">csvfs</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="s1">&#39;.csv&#39;</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>


<span class="k">for</span> <span class="n">csvf</span> <span class="ow">in</span> <span class="n">csvfs</span><span class="p">:</span>
    <span class="c1">#批次读取，即每次只读100w行</span>
    <span class="n">chunk_dfs</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="mi">1000000</span><span class="p">)</span>
    <span class="c1">#文件名计数</span>
    <span class="n">file_counter</span> <span class="o">=</span> <span class="mi">1</span>
    
    <span class="c1">#每个chunk不超过100w行</span>
    <span class="k">for</span> <span class="n">chunk_df</span> <span class="ow">in</span> <span class="n">chunk_dfs</span><span class="p">:</span>
        <span class="n">xlsxf</span> <span class="o">=</span> <span class="n">csvf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;_</span><span class="si">{}</span><span class="s1">.xlsx&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">file_counter</span><span class="p">)</span>
        
        <span class="c1">#将chunk存到xlsx中</span>
        <span class="n">chunk_df</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="n">xlsxf</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
        
        <span class="n">file_counter</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>免费下载 | 进阶Python学习资料</title>
      <link>https://textdata.cn/blog/2023-07-19-advanced-python-mastery/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-07-19-advanced-python-mastery/</guid>
      <description>&lt;h2 id=&#34;一advanced-python-mastery&#34;&gt;一、Advanced Python Mastery&lt;/h2&gt;
&lt;h3 id=&#34;11-概要&#34;&gt;1.1 概要&lt;/h3&gt;
&lt;p&gt;这是一门&lt;strong&gt;以练习为导向的高级 Python 编程课程&lt;/strong&gt;，十多年来在企业培训循环中经过了数百次实战测试。 由 David Beazley 撰写，Python Cookbook 第三版 (O&amp;rsquo;Reilly) 和 Python Distilled (Addison-Wesley) 的作者。&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;12-目标受众&#34;&gt;1.2 目标受众&lt;/h3&gt;
&lt;p&gt;本课程适合那些想要超越简短脚本而编写更复杂程序的 Python 程序员。 主题重点关注流行库和框架中使用的编程技术。 主要目标是更好地理解 Python 语言本身，以便您能够理解其他人的代码，并将新发现的知识应用到您自己的项目中。&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;13-如何参加课程&#34;&gt;1.3 如何参加课程&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/resource.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;要学习本课程，您应该首先将 GitHub 存储库分叉/克隆到您自己的计算机上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假设您在适当的 Python 开发环境中本地工作。 这意味着正确安装 Python、编辑器/IDE 以及您通常安装以在 Python 上工作的任何其他工具。 由于使用多个文件和模块导入，不建议使用Notebooks。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PythonMastery.pdf&lt;/strong&gt; 文件包含详细的演示幻灯片(共548页)。 课程练习和建议的时间安排都有明确的说明。 您需要将其保留在身边（我建议您下载并使用本地 PDF 查看器进行查看）。 从这里开始！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excercise/&lt;/strong&gt; 包含所有课程练习。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Solutions/&lt;/strong&gt;  已完全制定出解决方案代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data/&lt;/strong&gt; 包含课程中使用的一些数据文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成功完成该课程可能需要 &lt;strong&gt;30-50 小时&lt;/strong&gt;的工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二获取学习资料&#34;&gt;二、获取学习资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Github下载  &lt;a href=&#34;https://github.com/dabeaz-course/python-mastery.git&#34;&gt;https://github.com/dabeaz-course/python-mastery.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;百度网盘 链接: &lt;a href=&#34;https://pan.baidu.com/s/1bwWM33rM37a2Uq0lUbSqnA&#34;&gt;https://pan.baidu.com/s/1bwWM33rM37a2Uq0lUbSqnA&lt;/a&gt; 提取码: 7z87&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一advanced-python-mastery">一、Advanced Python Mastery</h2>
<h3 id="11-概要">1.1 概要</h3>
<p>这是一门<strong>以练习为导向的高级 Python 编程课程</strong>，十多年来在企业培训循环中经过了数百次实战测试。 由 David Beazley 撰写，Python Cookbook 第三版 (O&rsquo;Reilly) 和 Python Distilled (Addison-Wesley) 的作者。</p>
<br>
<h3 id="12-目标受众">1.2 目标受众</h3>
<p>本课程适合那些想要超越简短脚本而编写更复杂程序的 Python 程序员。 主题重点关注流行库和框架中使用的编程技术。 主要目标是更好地理解 Python 语言本身，以便您能够理解其他人的代码，并将新发现的知识应用到您自己的项目中。</p>
<br>
<h3 id="13-如何参加课程">1.3 如何参加课程</h3>
<p><img loading="lazy" src="img/resource.png" alt=""  />
</p>
<ul>
<li>
<p>要学习本课程，您应该首先将 GitHub 存储库分叉/克隆到您自己的计算机上。</p>
</li>
<li>
<p>假设您在适当的 Python 开发环境中本地工作。 这意味着正确安装 Python、编辑器/IDE 以及您通常安装以在 Python 上工作的任何其他工具。 由于使用多个文件和模块导入，不建议使用Notebooks。</p>
</li>
<li>
<p><strong>PythonMastery.pdf</strong> 文件包含详细的演示幻灯片(共548页)。 课程练习和建议的时间安排都有明确的说明。 您需要将其保留在身边（我建议您下载并使用本地 PDF 查看器进行查看）。 从这里开始！</p>
</li>
<li>
<p><strong>Excercise/</strong> 包含所有课程练习。</p>
</li>
<li>
<p><strong>Solutions/</strong>  已完全制定出解决方案代码。</p>
</li>
<li>
<p><strong>Data/</strong> 包含课程中使用的一些数据文件。</p>
</li>
<li>
<p>成功完成该课程可能需要 <strong>30-50 小时</strong>的工作。</p>
</li>
</ul>
<p><br><br></p>
<h2 id="二获取学习资料">二、获取学习资料</h2>
<ul>
<li>Github下载  <a href="https://github.com/dabeaz-course/python-mastery.git">https://github.com/dabeaz-course/python-mastery.git</a></li>
<li>百度网盘 链接: <a href="https://pan.baidu.com/s/1bwWM33rM37a2Uq0lUbSqnA">https://pan.baidu.com/s/1bwWM33rM37a2Uq0lUbSqnA</a> 提取码: 7z87</li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PNAS | 历史文本中的语言积极性反映了动态的环境和心理因素(含Python代码)</title>
      <link>https://textdata.cn/blog/2023-03-13-linguistic-positivity-in-historical-texts-reflects-dynamic-environmental-and-psychological-factors/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-03-13-linguistic-positivity-in-historical-texts-reflects-dynamic-environmental-and-psychological-factors/</guid>
      <description>Linguistic positivity in historical texts reflects dynamic environmental and psychological factors历史文本中的语言积极性反映了动态的环境和心理因素</description>
      <content:encoded><![CDATA[<p>分享一篇研究语言积极倾向的论文，论文中使用Python工具进行词频统计，大大降低了人工成本，提高了科研效率。</p>
<p>该论文发表在PNAS：</p>
<blockquote>
<p>Iliev, R., Hoover, J., Dehghani, M. and Axelrod, R., 2016. <strong>Linguistic positivity in historical texts reflects dynamic environmental and psychological factors</strong>. <em>Proceedings of the National Academy of Sciences</em>, <em>113</em>(49), pp.E7871-E7879.</p>
</blockquote>
<p><br><br></p>
<h2 id="一研究背景">一、研究背景</h2>
<p>作者指出：当前关于 <strong>LPB(language positivity bias)作用机制</strong> 的驱动因素有普遍的普遍的认知偏差、情感状态、客观环境和社会规范，但是究竟是哪种机制驱动LPB，以及这种影响是否可能是由于这些或其他因素子集之间的相互作用驱动的，尚无研究讨论。造成这种不确定性的一个原因是，以前对 LPB 的调查采用了语言的共时方法，并且无法提供任何洞察力来了解 LPB 在给定语言中是否或在何种程度上具有跨时间和上下文的稳定。在该研究中，作者采用了一种将 LPB 视为动态现象的方法。具体来说，使用两个带时间戳的美国英语语料库，研究 LPB 中的经度变化作为主观、客观和社会因素的函数。这种方法可以研究 LPB 的历时变化，这是一个未探索的影响维度，而且还可以在先前提出的 LPB 解释之间进行裁决。</p>
<p><br><br></p>
<h2 id="二研究过程">二、研究过程</h2>
<p>提出五个假设：</p>
<ol>
<li>
<p>LPB没有线性趋势</p>
</li>
<li>
<p>LPB 随着时间的推移而增加。</p>
</li>
<li>
<p>LPB 随着时间的推移而减少。</p>
</li>
<li>
<p>LPB 的变化来预测，环境恶化将与LPB的降低相关联。</p>
</li>
<li>
<p>LPB的变化将通过集体影响的变化来预测，因此国家层面幸福感的下降将与LPB的下降相关。</p>
</li>
</ol>
<p>开展四个研究：</p>
<ol>
<li>
<p>线性趋势</p>
</li>
<li>
<p>战争伤亡人数</p>
</li>
<li>
<p>经济苦难</p>
</li>
<li>
<p>主观幸福</p>
</li>
</ol>
<p><br><br></p>
<h2 id="三数据来源">三、数据来源</h2>
<ol>
<li><strong>情感词典</strong>：使用了语言查询和字数统计 (LIWC) 词典 (56) 中的正面和负面情绪词类别，其中包含 907 个词和词干。正面类别有 408 个条目，负面类别有 499 个条目。</li>
<li><strong>战争伤亡人数</strong>：使用了来自美国退伍军人事务部 (57) 的情况说明书中的数据，并计算了过去两个世纪美国参与的战争中美国军人的平均伤亡人数。</li>
<li><strong>痛苦指数</strong>：使用了来自 <a href="http://www.miseryindex.us">www.miseryindex.us</a> 的数据，其中包含 1948 年至 2015 年期间美国的苦难指数指标。</li>
<li><strong>幸福指数</strong>：使用了世界幸福数据库中有关美国幸福感的调查数据。</li>
</ol>
<p><br><br></p>
<h2 id="四研究发现">四、研究发现：</h2>
<ol>
<li>美式英语中情感词的使用随着时间的推移而减少。</li>
<li>发现了 LPB 纵向下降趋势的令人信服的证据。这种趋势在谷歌 Ngrams 语料库中非常强烈，在纽约时报语料库中略显重要。</li>
<li>发现 LPB 也随着战争的伤亡人数而减少。</li>
<li>LPB 可以通过客观环境的不太极端的测量来预测。在控制时间后，我们发现痛苦指数较高的年份在两个语料库中的 LPB 水平往往较低。</li>
<li>发现 LPB 的短期波动随全国幸福指数的变化而变化。</li>
<li>这些结果进一步证实了LPB 不能简单地解释为普遍认知机制的功能。</li>
</ol>
<p><br><br></p>
<h2 id="五代码">五、代码</h2>
<p>为简化学习难度，论文细节部分不展开。本文主要给大家展示用Python做情感词频统计、词频历时折线图这两部分内容。先安装需要的包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
!pip3 install pyecharts==1.6.2
!pip3 install pyecharts-javascripthon==0.0.6              
!pip3 install pyecharts-jupyter-installer==0.0.3              
!pip3 install pyecharts-snapshot==0.2.0 
</code></pre></div><br>
<h3 id="51-实验数据集">5.1 实验数据集</h3>
<p>美国政治在其年轻的生命周期中经历了许多意识形态的动荡。这些动荡被称为政治时代。“政治时代是指在历史和政治科学中使用的一种美国政治模式，用于分类存在于美国的政党制度。” 数据集作者创建这个数据集的原因是为了正确讨论过去的政治事件，了解各个时期的政治平台和氛围是很重要的。例如，民主党和共和党的政治理念在不同的时期发生了巨大的变化，党派之间的理念也在不断转变、涌现和消失。截至目前为止，美国政治中已经公认了6个政治时代，分别是：</p>
<ol>
<li>第一党派制度（1792年至1824年）</li>
<li>第二党派制度（1828年至1854年）</li>
<li>第三党派制度（1854年至1895年）</li>
<li>第四党派制度（1896年至1932年）</li>
<li>第五党派制度（1932年至1964年）</li>
<li>第六党派制度（1964年至今）</li>
</ol>
<p>我将总统同一个年度的演讲汇总到一起，最终得到  <a href="yearly_american_speech_dataset.csv">yearly_american_speech_dataset.csv</a> 。
<br></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;yearly_american_speech_dataset.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;Date&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<br>
<h3 id="52-小实验">5.2 小实验</h3>
<p>写代码讲究先把任务抽象化， 将大问题拆解成可组装的小问题。即先小后大，先局部后整体。这里推荐用Python中的cntext库，该库文档清晰，代码简洁。先安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">!pip3 install scikit-learn==1.0
!pip3 install cntext==1.8.4
</code></pre></div><br>
<p>最简单的情感分析，即分析一句话 text 的正负面情感词出现的词频。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;What a sunny day!&#39;</span>

<span class="n">diction</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;sunny&#39;</span><span class="p">,</span> <span class="s1">&#39;good&#39;</span><span class="p">],</span>
           <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;bad&#39;</span><span class="p">,</span> <span class="s1">&#39;terrible&#39;</span><span class="p">]}</span>

<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>
             <span class="n">diction</span><span class="o">=</span><span class="n">diction</span><span class="p">,</span>
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>{'pos_num': 1,
 'neg_num': 0,
 'stopword_num': 1,
 'word_num': 5,
 'sentence_num': 1}
</code></pre>
<br>
<p>根据自定义的词典diciton， 可以看出 <strong>What a sunny day!</strong> 中有1个pos类词，0个neg类词。</p>
<br>
<h3 id="53-找个公开的情感词典">5.3 找个公开的情感词典</h3>
<p>计算文本中正负面情感词出现次数， 需要有情感词词表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#查看cntext内置的词典</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">ct</span><span class="o">.</span><span class="n">dict_pkl_list</span><span class="p">()</span>
</code></pre></div><pre><code>['DUTIR.pkl',
 'HOWNET.pkl',
 'Chinese_Loughran_McDonald_Financial_Sentiment.pkl',
 'sentiws.pkl',
 'ChineseFinancialFormalUnformalSentiment.pkl',
 'Chinese_Digitalization.pkl',
 'ANEW.pkl',
 'LSD2015.pkl',
 'NRC.pkl',
 'geninqposneg.pkl',
 'HuLiu.pkl',
 'Loughran_McDonald_Financial_Sentiment.pkl',
 'AFINN.pkl',
 'ADV_CONJ.pkl',
 'STOPWORDS.pkl',
 'Concreteness.pkl',
 'ChineseEmoBank.pkl']
</code></pre>
<p>查看NRC词典的信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#NRC词典</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;NRC词典描述: &#39;</span><span class="p">,</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;Desc&#39;</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;NRC参考文献: &#39;</span><span class="p">,</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;Refer&#39;</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;NRC词典内词表有: &#39;</span><span class="p">,</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Pos词表前10个词: &#39;</span><span class="p">,</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;positive&#39;</span><span class="p">][:</span><span class="mi">10</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Neg词表前10个词: &#39;</span><span class="p">,</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;negative&#39;</span><span class="p">][:</span><span class="mi">10</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>NRC词典描述:  The NRC Emotion Lexicon is a list of English words and their associations with eight basic emotions (anger, fear, anticipation, trust, surprise, sadness, joy, and disgust) and two sentiments (negative and positive). The annotations were manually done by crowdsourcing.

NRC参考文献:  Crowdsourcing a Word-Emotion Association Lexicon, Saif Mohammad and Peter Turney, Computational Intelligence, 29 (3), 436-465, 2013.

NRC词典内词表有:  dict_keys(['anger', 'anticipation', 'disgust', 'fear', 'joy', 'negative', 'positive', 'sadness', 'surprise', 'trust'])

Pos词表前10个词:  ['abba', 'ability', 'abovementioned', 'absolute', 'absolution', 'absorbed', 'abundance', 'abundant', 'academic', 'academy']

Neg词表前10个词:  ['abandon', 'abandoned', 'abandonment', 'abduction', 'aberrant', 'aberration', 'abhor', 'abhorrent', 'abject', 'abnormal']
</code></pre>
<br>
<h3 id="54-情感词频统计">5.4 情感词频统计</h3>
<p>使用cntext设计一个函数，将计算得到的文本词数/正(负)面词出现次数, 得到情感词在文中的占比，方便后续的可视化绘图。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">emotion_analysis</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">diction</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;positive&#39;</span><span class="p">],</span>
               <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;negative&#39;</span><span class="p">],</span>
               <span class="s1">&#39;anger&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;anger&#39;</span><span class="p">],</span>
               <span class="s1">&#39;anticipation&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;anticipation&#39;</span><span class="p">],</span>
               <span class="s1">&#39;disgust&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;disgust&#39;</span><span class="p">],</span>
               <span class="s1">&#39;fear&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;fear&#39;</span><span class="p">],</span>
               <span class="s1">&#39;joy&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;joy&#39;</span><span class="p">],</span>
               <span class="s1">&#39;sadness&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;sadness&#39;</span><span class="p">],</span>
               <span class="s1">&#39;surprise&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;surprise&#39;</span><span class="p">],</span>
               <span class="s1">&#39;trust&#39;</span><span class="p">:</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;NRC.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;NRC&#39;</span><span class="p">][</span><span class="s1">&#39;trust&#39;</span><span class="p">]}</span>
    
    <span class="n">res</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>
                       <span class="n">diction</span><span class="o">=</span><span class="n">diction</span><span class="p">,</span>
                       <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>


<span class="c1">#实验ok</span>
<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;What a sunny day!&#39;</span>
<span class="n">emotion_analysis</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>pos_num             1
neg_num             0
anger_num           0
anticipation_num    1
disgust_num         0
fear_num            0
joy_num             1
sadness_num         0
surprise_num        1
trust_num           0
stopword_num        1
word_num            5
sentence_num        1
dtype: int64
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;Transcript&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">emotion_analysis</span><span class="p">)</span>
<span class="n">df2</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
<br></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">columns</span>
</code></pre></div><p>Run</p>
<pre><code>Index(['pos_num', 'neg_num', 'anger_num', 'anticipation_num', 'disgust_num',
       'fear_num', 'joy_num', 'sadness_num', 'surprise_num', 'trust_num',
       'stopword_num', 'word_num', 'sentence_num'],
      dtype='object')
</code></pre>
<br>
<p>计算情感、情绪的词频(占比)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;pos&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;pos_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">grouped_df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;neg&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;neg_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;anger&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;anger_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;anticipation&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;anticipation_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;disgust&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;disgust_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;fear&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;fear_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;joy&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;joy_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;sadness&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;sadness_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;surprise&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;surprise_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;trust&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;trust_num&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;word_num&#39;</span><span class="p">]</span>
<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;SentiScore&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;pos_num&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;neg_num&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;pos_num&#39;</span><span class="p">]</span><span class="o">+</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;neg_num&#39;</span><span class="p">])</span>
</code></pre></div><br>
<p>合并数据数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">res_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df</span><span class="p">,</span> <span class="n">df2</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">res_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="六可视化">六、可视化</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">res_df</span><span class="o">.</span><span class="n">columns</span>
</code></pre></div><p>Run</p>
<pre><code>Index(['pos_num', 'neg_num', 'anger_num', 'anticipation_num', 'disgust_num',
       'fear_num', 'joy_num', 'sadness_num', 'surprise_num', 'trust_num',
       'stopword_num', 'word_num', 'sentence_num', 'pos', 'neg', 'anger',
       'anticipation', 'disgust', 'fear', 'joy', 'sadness', 'surprise',
       'trust'],
      dtype='object')
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Line</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>


<span class="c1"># 创建折线图对象</span>
<span class="n">line_chart1</span> <span class="o">=</span> <span class="n">Line</span><span class="p">()</span>


<span class="c1"># 添加 x 轴和 y 轴数据</span>
<span class="n">line_chart1</span><span class="o">.</span><span class="n">add_xaxis</span><span class="p">(</span><span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;Date&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">())</span>
<span class="n">line_chart1</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;Sentiment Score&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;SentiScore&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                     <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>


<span class="c1"># 配置图表选项</span>
<span class="n">line_chart1</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
    <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;美国总统演讲情感得分年度历时可视化&#34;</span><span class="p">),</span>
    <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">trigger</span><span class="o">=</span><span class="s2">&#34;axis&#34;</span><span class="p">,</span> <span class="n">axis_pointer_type</span><span class="o">=</span><span class="s2">&#34;cross&#34;</span><span class="p">),</span>
    <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">pos_right</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">,</span>
                                <span class="n">orient</span><span class="o">=</span><span class="s2">&#34;vertical&#34;</span><span class="p">,</span>
                                <span class="n">pos_top</span><span class="o">=</span><span class="s2">&#34;center&#34;</span><span class="p">)</span>
<span class="p">)</span>

<span class="c1"># 显示图表</span>
<span class="n">line_chart1</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div><p><a href="line_chart1.html"><img loading="lazy" src="img/%e5%9b%be1.png" alt=""  />
</a></p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Line</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>


<span class="c1"># 创建折线图对象</span>
<span class="n">line_chart2</span> <span class="o">=</span> <span class="n">Line</span><span class="p">()</span>


<span class="c1"># 添加 x 轴和 y 轴数据</span>
<span class="n">line_chart2</span><span class="o">.</span><span class="n">add_xaxis</span><span class="p">(</span><span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;Date&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">())</span>

<span class="n">line_chart2</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;Positive&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;pos&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="n">line_chart2</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;Negative&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;neg&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="c1"># 配置图表选项</span>
<span class="n">line_chart2</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
    <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;美国总统演讲正、负面情感年度历时可视化&#34;</span><span class="p">),</span>
    <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">trigger</span><span class="o">=</span><span class="s2">&#34;axis&#34;</span><span class="p">,</span> <span class="n">axis_pointer_type</span><span class="o">=</span><span class="s2">&#34;cross&#34;</span><span class="p">),</span>
    <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">pos_right</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">,</span>
                                <span class="n">orient</span><span class="o">=</span><span class="s2">&#34;vertical&#34;</span><span class="p">,</span>
                                <span class="n">pos_top</span><span class="o">=</span><span class="s2">&#34;center&#34;</span><span class="p">)</span>
<span class="p">)</span>

<span class="c1"># 显示图表</span>
<span class="n">line_chart2</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div><p><a href="line_chart2.html"><img loading="lazy" src="img/%e5%9b%be2.png" alt=""  />
</a><br></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Line</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>


<span class="c1"># 创建折线图对象</span>
<span class="n">line_chart3</span> <span class="o">=</span> <span class="n">Line</span><span class="p">()</span>

<span class="c1"># 添加 x 轴和 y 轴数据</span>
<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_xaxis</span><span class="p">(</span><span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;Date&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">())</span>

<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;anger&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;anger&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;anticipation&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;anticipation&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;disgust&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;disgust&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;fear&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;fear&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;joy&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;joy&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;sadness&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;sadness&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;surprise&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;surprise&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="n">line_chart3</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s1">&#39;trust&#39;</span><span class="p">,</span> 
                      <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;trust&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span>
                      <span class="n">itemstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">ItemStyleOpts</span><span class="p">(</span><span class="n">opacity</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>


<span class="c1"># 配置图表选项</span>
<span class="n">line_chart3</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
    <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;美国总统8类情绪词用量年度历时可视化&#34;</span><span class="p">),</span>
    <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">trigger</span><span class="o">=</span><span class="s2">&#34;axis&#34;</span><span class="p">,</span> <span class="n">axis_pointer_type</span><span class="o">=</span><span class="s2">&#34;cross&#34;</span><span class="p">),</span>
    <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">pos_right</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">,</span>
                                <span class="n">orient</span><span class="o">=</span><span class="s2">&#34;vertical&#34;</span><span class="p">,</span>
                                <span class="n">pos_top</span><span class="o">=</span><span class="s2">&#34;center&#34;</span><span class="p">)</span>
<span class="p">)</span>

<span class="c1"># 显示图表</span>
<span class="n">line_chart3</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div><p><a href="line_chart3.html"><img loading="lazy" src="img/%e5%9b%be3.png" alt=""  />
</a>
<a href="line_chart3.html"><img loading="lazy" src="img/%e5%9b%be4.png" alt=""  />
</a></p>
<p>最后一张图中trust指标在08年前后几年是下降趋势，可能的原因是， 那个阶段正是08年金融危机，美国政府为了救华尔街， 用公民腰包里的钱补贴华尔街金融巨鳄。信任下降。</p>
<p><br><br></p>
<h2 id="七保存">七、保存</h2>
<p>情感计算过程得到的 res_df 和 可视化结果line_chart 建议都保存起来， 方便下次可以快速进入可视化阶段。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">res_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s1">&#39;sentiment_anlysis_result.csv&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">line_chart1</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s1">&#39;line_chart1.html&#39;</span><span class="p">)</span>
<span class="n">line_chart2</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s1">&#39;line_chart2.html&#39;</span><span class="p">)</span>
<span class="n">line_chart3</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s1">&#39;line_chart3.html&#39;</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="资料下载">资料下载</h2>
<ul>
<li><a href="code.ipynb">代码</a></li>
<li><a href="yearly_american_speech_dataset.csv">数据</a></li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>LovelyPlots库 | 格式化科学论文、论文和演示文稿的可视化图形</title>
      <link>https://textdata.cn/blog/2022-12-10-lovelyplots/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-12-10-lovelyplots/</guid>
      <description>LovelyPlots库可以很好地格式化科学论文、论文和演示文稿的可视化图形，同时使它们在 Adobe Illustrator 中完全可编辑。</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/killiansheriff/LovelyPlots">LovelyPlots库</a> 可以很好地格式化科学论文、论文和演示文稿的可视化图形，同时使它们在 Adobe Illustrator 中完全可编辑。</p>
<p>此外，.svg 导出选项允许图形自动调整其字体以适应您文档的字体。 例如，导入到 .tex 文件中的 .svg 图形将自动生成为您的 .tex 文件中使用的文本字体。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install LovelyPlots
</code></pre></div><br>
<h2 id="样例">样例</h2>
<p><img loading="lazy" src="out/ipynb&#43;use_mathtext.svg" alt=""  />

<img loading="lazy" src="out/ipynb&#43;use_mathtext&#43;colors5-light.svg" alt=""  />

<img loading="lazy" src="out/ipynb&#43;use_mathtext&#43;colors10-ls.svg" alt=""  />

<img loading="lazy" src="out/ipynb&#43;use_mathtext&#43;colors10-markers.svg" alt=""  />

<img loading="lazy" src="out/classicmpl.svg" alt=""  />

<img loading="lazy" src="out/ipynb.svg" alt=""  />
</p>
<br>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="k">def</span> <span class="nf">MB_speed</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">T</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Maxwell-Boltzmann speed distribution for speeds&#34;&#34;&#34;</span>
    <span class="n">kB</span> <span class="o">=</span> <span class="mf">1.38e-23</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">(</span><span class="n">m</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">kB</span> <span class="o">*</span> <span class="n">T</span><span class="p">))</span> <span class="o">**</span> <span class="mf">1.5</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">v</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">m</span> <span class="o">*</span> <span class="n">v</span><span class="o">**</span><span class="mi">2</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">kB</span> <span class="o">*</span> <span class="n">T</span><span class="p">))</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">plot_dist</span><span class="p">(</span>
    <span class="n">temperatures</span><span class="p">,</span>
    <span class="n">v</span><span class="p">,</span>
    <span class="n">mass</span><span class="o">=</span><span class="mi">85</span> <span class="o">*</span> <span class="mf">1.66e-27</span><span class="p">,</span>
    <span class="n">pparam</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;xlabel&#34;</span><span class="p">:</span> <span class="s2">&#34;Speed&#34;</span><span class="p">,</span> <span class="s2">&#34;ylabel&#34;</span><span class="p">:</span> <span class="s2">&#34;Speed distribution&#34;</span><span class="p">},</span>
    <span class="n">save_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
<span class="p">):</span>

    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">T</span> <span class="ow">in</span> <span class="n">temperatures</span><span class="p">:</span>
        <span class="n">fv</span> <span class="o">=</span> <span class="n">MB_speed</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">mass</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">fv</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;T=</span><span class="si">{</span><span class="n">T</span><span class="si">}</span><span class="s2">K&#34;</span><span class="p">)</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">**</span><span class="n">pparam</span><span class="p">)</span>
        <span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="n">save_name</span><span class="p">)</span>


<span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">temperatures</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">75</span><span class="p">)]</span>





<span class="n">styles</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span>
        <span class="s2">&#34;ipynb&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use_mathtext&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s2">&#34;ipynb&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use_mathtext&#34;</span><span class="p">,</span>
        <span class="s2">&#34;colors5-light&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s2">&#34;ipynb&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use_mathtext&#34;</span><span class="p">,</span>
        <span class="s2">&#34;colors10-ls&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s2">&#34;ipynb&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use_mathtext&#34;</span><span class="p">,</span>
        <span class="s2">&#34;colors10-markers&#34;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span><span class="s2">&#34;classic&#34;</span><span class="p">],</span>
    <span class="p">[</span><span class="s2">&#34;ipynb&#34;</span><span class="p">],</span>
<span class="p">]</span>
<span class="n">names</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;out/ipynb+use_mathtext.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/ipynb+use_mathtext+colors5-light.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/ipynb+use_mathtext+colors10-ls.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/ipynb+use_mathtext+colors10-markers.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/classicmpl.png&#34;</span><span class="p">,</span>
    <span class="s2">&#34;out/ipynb.png&#34;</span><span class="p">,</span>
<span class="p">]</span>


<span class="k">for</span> <span class="n">style</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">styles</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">context</span><span class="p">(</span><span class="n">style</span><span class="p">):</span>
        <span class="n">plot_dist</span><span class="p">(</span><span class="n">temperatures</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">save_name</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据集 | 585w企业工商注册信息</title>
      <link>https://textdata.cn/blog/2022-12-07-585w-chinese-enterprise-registration-data/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-12-07-585w-chinese-enterprise-registration-data/</guid>
      <description>585w企业工商注册信息</description>
      <content:encoded><![CDATA[<p>1978-2019.4,  585w中国大陆企业注册信息</p>
<p>文末有 enterprise-registration-data-of-chinese-mainland.csv 数据获取方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;enterprise-registration-data-of-chinese-mainland.csv&#39;</span><span class="p">,</span> 
                 <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> 
                 <span class="c1">#忽略有问题的记录</span>
                 <span class="n">on_bad_lines</span><span class="o">=</span><span class="s1">&#39;skip&#39;</span><span class="p">)</span>

<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#剔除大邓广告</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;企业类型&#39;</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;公众号: 大邓和他的Python&#39;</span><span class="p">]</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#记录</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">))</span>

<span class="c1">#</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;字段有: &#39;</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&#39;记录数: 12756270&#39;

&#39;字段有: [&#39;企业名称&#39;, &#39;统一社会信用代码&#39;, &#39;注册日期&#39;, &#39;企业类型&#39;, &#39;法人代表&#39;, &#39;注册资金&#39;, &#39;经营范围&#39;, &#39;所在省份&#39;,
       &#39;地区&#39;, &#39;注册地址&#39;]&#39;
</code></pre></div><br>
<p>但数据可能会有重复，这里以企业名称作为唯一标识，可以查看真实的数据量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;真实记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;企业名称&#39;</span><span class="p">])))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&#39;真实记录数: 5888382&#39;
</code></pre></div><br>
<br>
<h2 id="二如何将多个csv汇总到一个csv中">二、如何将多个csv汇总到一个csv中？</h2>
<p>那么这个enterprise-registration-data-of-chinese-mainland.csv怎么来的？</p>
<p>原始的数据集结构</p>
<p><img loading="lazy" src="img/screen-1.png" alt=""  />

<img loading="lazy" src="img/screen-2.png" alt=""  />
</p>
<br>
<p>先局部实验成功后，推广到整体。</p>
<ol>
<li>获取路径列表</li>
<li>尝试读取任意一个csv文件</li>
<li>尝试合并两个df</li>
<li>合并所有csv到一个文件内</li>
</ol>
<br>
<h3 id="21-获取路径列表">2.1 获取路径列表</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#大邓电脑为Mac</span>
<span class="c1">#Mac容易在文件夹中生成奇怪的.DS_Store</span>
<span class="c1">#该操作为获取文件夹列表，同时剔除.DS_Store</span>
<span class="n">y_dirs</span> <span class="o">=</span> <span class="p">[</span><span class="n">di</span> <span class="k">for</span> <span class="n">di</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;csv&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="s1">&#39;.DS_Store&#39;</span><span class="o">!=</span><span class="n">di</span><span class="p">]</span>
<span class="k">for</span> <span class="n">y_dir</span> <span class="ow">in</span> <span class="n">y_dirs</span><span class="p">:</span>
    <span class="c1">#在年份文件夹内有很多csv文件</span>
    <span class="n">fs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;csv/</span><span class="si">{}</span><span class="s1">/</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y_dir</span><span class="p">,</span> <span class="n">fn</span><span class="p">)</span> 
          <span class="k">for</span> <span class="n">fn</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;csv/</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y_dir</span><span class="p">))</span>
          <span class="k">if</span> <span class="s1">&#39;.csv&#39;</span> <span class="ow">in</span> <span class="n">fn</span><span class="p">]</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">fs</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">......
......
[&#39;csv/2013/河南.csv&#39;, &#39;csv/2013/青海.csv&#39;, &#39;csv/2013/河北.csv&#39;, &#39;csv/2013/浙江.csv&#39;, &#39;csv/2013/内蒙古.csv&#39;, &#39;csv/2013/辽宁.csv&#39;, &#39;csv/2013/天津.csv&#39;, &#39;csv/2013/福建.csv&#39;, &#39;csv/2013/吉林.csv&#39;, &#39;csv/2013/西藏.csv&#39;, &#39;csv/2013/四川.csv&#39;, &#39;csv/2013/云南.csv&#39;, &#39;csv/2013/宁夏.csv&#39;, &#39;csv/2013/新疆.csv&#39;, &#39;csv/2013/安徽.csv&#39;, &#39;csv/2013/重庆.csv&#39;, &#39;csv/2013/贵州.csv&#39;, &#39;csv/2013/湖南.csv&#39;, &#39;csv/2013/海南.csv&#39;, &#39;csv/2013/湖北.csv&#39;, &#39;csv/2013/江西.csv&#39;, &#39;csv/2013/广东.csv&#39;, &#39;csv/2013/北京.csv&#39;, &#39;csv/2013/山西.csv&#39;, &#39;csv/2013/上海.csv&#39;, &#39;csv/2013/陕西.csv&#39;, &#39;csv/2013/黑龙江.csv&#39;, &#39;csv/2013/甘肃.csv&#39;, &#39;csv/2013/江苏.csv&#39;, &#39;csv/2013/山东.csv&#39;, &#39;csv/2013/广西.csv&#39;]

[&#39;csv/2014/河南.csv&#39;, &#39;csv/2014/青海.csv&#39;, &#39;csv/2014/河北.csv&#39;, &#39;csv/2014/浙江.csv&#39;, &#39;csv/2014/内蒙古.csv&#39;, &#39;csv/2014/辽宁.csv&#39;, &#39;csv/2014/天津.csv&#39;, &#39;csv/2014/福建.csv&#39;, &#39;csv/2014/吉林.csv&#39;, &#39;csv/2014/西藏.csv&#39;, &#39;csv/2014/四川.csv&#39;, &#39;csv/2014/云南.csv&#39;, &#39;csv/2014/宁夏.csv&#39;, &#39;csv/2014/新疆.csv&#39;, &#39;csv/2014/安徽.csv&#39;, &#39;csv/2014/重庆.csv&#39;, &#39;csv/2014/贵州.csv&#39;, &#39;csv/2014/湖南.csv&#39;, &#39;csv/2014/海南.csv&#39;, &#39;csv/2014/湖北.csv&#39;, &#39;csv/2014/江西.csv&#39;, &#39;csv/2014/广东.csv&#39;, &#39;csv/2014/北京.csv&#39;, &#39;csv/2014/山西.csv&#39;, &#39;csv/2014/上海.csv&#39;, &#39;csv/2014/陕西.csv&#39;, &#39;csv/2014/黑龙江.csv&#39;, &#39;csv/2014/甘肃.csv&#39;, &#39;csv/2014/江苏.csv&#39;, &#39;csv/2014/山东.csv&#39;, &#39;csv/2014/广西.csv&#39;]

[&#39;csv/2015/河南.csv&#39;, &#39;csv/2015/青海.csv&#39;, &#39;csv/2015/河北.csv&#39;, &#39;csv/2015/浙江.csv&#39;, &#39;csv/2015/内蒙古.csv&#39;, &#39;csv/2015/辽宁.csv&#39;, &#39;csv/2015/天津.csv&#39;, &#39;csv/2015/福建.csv&#39;, &#39;csv/2015/吉林.csv&#39;, &#39;csv/2015/西藏.csv&#39;, &#39;csv/2015/四川.csv&#39;, &#39;csv/2015/云南.csv&#39;, &#39;csv/2015/宁夏.csv&#39;, &#39;csv/2015/新疆.csv&#39;, &#39;csv/2015/安徽.csv&#39;, &#39;csv/2015/重庆.csv&#39;, &#39;csv/2015/贵州.csv&#39;, &#39;csv/2015/湖南.csv&#39;, &#39;csv/2015/海南.csv&#39;, &#39;csv/2015/湖北.csv&#39;, &#39;csv/2015/江西.csv&#39;, &#39;csv/2015/广东.csv&#39;, &#39;csv/2015/北京.csv&#39;, &#39;csv/2015/山西.csv&#39;, &#39;csv/2015/上海.csv&#39;, &#39;csv/2015/陕西.csv&#39;, &#39;csv/2015/黑龙江.csv&#39;, &#39;csv/2015/甘肃.csv&#39;, &#39;csv/2015/江苏.csv&#39;, &#39;csv/2015/山东.csv&#39;, &#39;csv/2015/广西.csv&#39;]

.....
.....
</code></pre></div><p><br><br></p>
<h3 id="22-尝试读取任意一个csv文件">2.2 尝试读取任意一个csv文件</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;csv/2012/辽宁.csv&#39;</span><span class="p">,</span> 
                  <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> 
                  <span class="n">on_bad_lines</span><span class="o">=</span><span class="s1">&#39;skip&#39;</span><span class="p">)</span>

<span class="n">df1</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;csv/2013/青海.csv&#39;</span><span class="p">,</span> 
                  <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> 
                  <span class="n">on_bad_lines</span><span class="o">=</span><span class="s1">&#39;skip&#39;</span><span class="p">)</span>

<span class="n">df2</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df4.png" alt=""  />
</p>
<br>
<h3 id="23-尝试合并两个df">2.3 尝试合并两个df</h3>
<p>两个df垂直方向堆积，不增加字段种类，所以选择 pd.concat函数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df12</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span> <span class="n">df2</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">df12</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#检查记录数</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df1</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df12</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">10246
4417
14663
</code></pre></div><br>
<h3 id="24-合并所有csv到一个文件内">2.4 合并所有csv到一个文件内</h3>
<p>将步骤1、2、3代码整理，汇总</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#存df列表</span>
<span class="n">dfs</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1">#文件路径列表</span>
<span class="n">y_dirs</span> <span class="o">=</span> <span class="p">[</span><span class="n">di</span> <span class="k">for</span> <span class="n">di</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;csv&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="s1">&#39;.DS_Store&#39;</span><span class="o">!=</span><span class="n">di</span><span class="p">]</span>
<span class="k">for</span> <span class="n">y_dir</span> <span class="ow">in</span> <span class="n">y_dirs</span><span class="p">:</span>
    <span class="n">csvfs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;csv/</span><span class="si">{}</span><span class="s1">/</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y_dir</span><span class="p">,</span> <span class="n">fn</span><span class="p">)</span> 
             <span class="k">for</span> <span class="n">fn</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;csv/</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y_dir</span><span class="p">))</span>
             <span class="k">if</span> <span class="s1">&#39;.csv&#39;</span> <span class="ow">in</span> <span class="n">fn</span><span class="p">]</span>
    
    <span class="k">for</span> <span class="n">csvf</span> <span class="ow">in</span> <span class="n">csvfs</span><span class="p">:</span>
        
        <span class="c1">#读取csv，得到df</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">on_bad_lines</span><span class="o">=</span><span class="s1">&#39;skip&#39;</span><span class="p">)</span>
        <span class="c1">#存入df列表</span>
        <span class="n">dfs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
        
<span class="c1">#合并dfs为alldf</span>
<span class="n">alldf</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">dfs</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">#导出为data.csv</span>
<span class="n">alldf</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s1">&#39;enterprise-registration-data-of-chinese-mainland.csv&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="三数据获取">三、数据获取</h2>
<p>转发本文至朋友圈集赞50+， 加微信372335839， 备注【姓名-学校-专业-1200w工商】获取本文数据。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>BERTopic | 使用推特数据构建动态主题模型</title>
      <link>https://textdata.cn/blog/2022-12-03-dynamic_topic_model_with_bertopic/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-12-03-dynamic_topic_model_with_bertopic/</guid>
      <description>在本文中将使用BERTopic库，对美国前总统Trump推特数据集，构建动态主题模型DTM(Dynamic Topic Modeling)，可视化文档数据集中不同主题随时间的演变(变迁)。</description>
      <content:encoded><![CDATA[<p>在本文中将使用 BERTopic 库，对美国前总统 Trump 推特数据集，构建动态主题模型 DTM(Dynamic Topic Modeling)，可视化文档数据集中不同主题随时间的演变(变迁)。<strong>文末有代码下载方式</strong></p>
<br>
<h2 id="安装">安装</h2>
<p>为保证代码可复现，保证你我电脑中 bertopic 版本一致，先查看大邓电脑的 bertopic 版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">bertopic</span>

<span class="c1">#本文bertopic版本</span>
<span class="n">bertopic</span><span class="o">.</span><span class="n">__version__</span>
</code></pre></div><p>Run</p>
<pre><code>'0.12.0'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#推荐指定版本安装；</span>
<span class="c1">#!pip3 install bertopic==0.12.0</span>

<span class="c1">#不指定版本安装</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">bertopic</span>
</code></pre></div><br>
<h2 id="导入数据">导入数据</h2>
<p>这里准备了twitter账号 @realDonalTrump 中 2021年的推特数据，  点击下载 <a href="code.zip"><strong>数据及代码</strong></a>。</p>
<ul>
<li>我们只分析原推特，不分析每条推特的回复。</li>
<li>因为要分析推特随时间的主题变化，需要准备 <strong>推特</strong> 及对应的 <strong>推文时间</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># 导入数据</span>
<span class="n">trump_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;trump_twitter_2021.csv&#39;</span><span class="p">)</span>
<span class="n">trump_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span><span class="p">:</span><span class="nd">only-of-type</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">top</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">thead</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">text-align</span><span class="p">:</span> <span class="kc">right</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">table</span> <span class="na">border</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;dataframe&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;text-align: right;&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>id<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>text<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>isRetweet<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>isDeleted<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>device<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>favorites<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>retweets<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>date<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>isFlagged<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>98454970654916608<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Republicans and Democrats have both created ou...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>TweetDeck<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>49<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>255<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2011-08-02 18:07:48<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1234653427789070336<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>I was thrilled to be back in the Great city of...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Twitter for iPhone<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>73748<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>17404<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-03-03 01:34:50<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1218010753434820614<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>RT @CBS_Herridge: READ: Letter to surveillance...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>t<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Twitter for iPhone<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>7396<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-01-17 03:22:47<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1304875170860015617<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>The Unsolicited Mail In Ballot Scam is a major...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Twitter for iPhone<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>80527<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>23502<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-09-12 20:10:58<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1218159531554897920<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>RT @MZHemingway: Very friendly telling of even...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>t<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>Twitter for iPhone<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>9081<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-01-17 13:13:59<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>f<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div><br>
<h2 id="预处理">预处理</h2>
<ul>
<li>使用正则表达式 清除推文中的http链接</li>
<li>剔除@符</li>
<li>使用正则表达式 剔除 非英文字符</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="c1">#预处理函数clean_text</span>
<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&#34;http\S+&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34; &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">if</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;@&#39;</span><span class="p">])</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&#34;[^a-zA-Z]+&#34;</span><span class="p">,</span> <span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">text</span>


<span class="n">test_text</span> <span class="o">=</span> <span class="s1">&#39;hello @Apple, https://apple.com 李John&#39;</span>
<span class="c1">#验证函数有效性</span>
<span class="n">clean_text</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">test_text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>'hello john'
</code></pre>
<br>
<ul>
<li>对text字段使用预处理函数 clean_text</li>
<li>只保留原推文</li>
<li>准备推特tweets和时间戳 timestamps</li>
</ul>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#清洗字段text</span>
<span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">clean_text</span><span class="p">)</span>

<span class="c1">#只保留特朗普原推文(剔除特朗普的Retweet)</span>
<span class="c1">#推文内容不能为”“</span>
<span class="n">trump_df</span> <span class="o">=</span> <span class="n">trump_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;isRetweet&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&#34;f&#34;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span><span class="p">),</span> <span class="p">:]</span>

<span class="c1">#准备tweets及对应的timestamps</span>
<span class="n">tweets</span> <span class="o">=</span> <span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span>
<span class="n">timestamps</span> <span class="o">=</span> <span class="n">trump_df</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span>

<span class="n">tweets</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<pre><code>'republicans and democrats have both created our economic problems '
</code></pre>
<br>
<h2 id="初始化bertopic">初始化BERTopic</h2>
<p>在模型初始化阶段，使用所有推文数据， 会忽略时间维度。 该步骤会把所有时间段中出现的主题都提前训练识别出来。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">bertopic</span> <span class="kn">import</span> <span class="n">BERTopic</span>

<span class="c1">#大邓这里，运行了不到1小时</span>
<span class="c1">#特朗普比较活跃，什么内容都会参与，所以这里设置一个话题数下限为35，话题数上限不设置</span>
<span class="n">topic_model</span> <span class="o">=</span> <span class="n">BERTopic</span><span class="p">(</span><span class="n">min_topic_size</span><span class="o">=</span><span class="mi">35</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">topics</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">tweets</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Downloading:   0%|          | 0.00/1.18k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/190 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/10.6k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/612 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/116 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/39.3k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/349 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/90.9M [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/53.0 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/112 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/466k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/350 [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/13.2k [00:00&lt;?, ?B/s]
    Downloading:   0%|          | 0.00/232k [00:00&lt;?, ?B/s]
    Batches:   0%|          | 0/1418 [00:00&lt;?, ?it/s]

    2022-12-04 22:04:02,964 - BERTopic - Transformed documents to Embeddings
    2022-12-04 22:05:13,606 - BERTopic - Reduced dimensionality
    2022-12-04 22:05:17,814 - BERTopic - Clustered reduced embeddings
</code></pre></div><br>
<p>抽取出所有的话题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">freq</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic_info</span><span class="p">()</span>

<span class="c1">#话题总数</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">freq</span><span class="p">))</span>
<span class="n">freq</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    169
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span><span class="p">:</span><span class="nd">only-of-type</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">top</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">thead</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">text-align</span><span class="p">:</span> <span class="kc">right</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">table</span> <span class="na">border</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;dataframe&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;text-align: right;&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Topic<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Count<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Name<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>-1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>15098<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>-1_the_to_is_of<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3182<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0_run_president_trump_donald<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1821<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1_crowd_carolina_join_thank<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1084<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2_golf_course_doral_scotland<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1030<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3_border_wall_immigration_mexico<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>5<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>811<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>4_china_trade_tariffs_chinese<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>6<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>5<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>642<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>5_obamacare_healthcare_repeal_website<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>7<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>6<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>638<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>6_hillary_clinton_crooked_she<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>8<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>7<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>607<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>7_amp_it_you_to<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>9<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>8<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>562<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>8_media_fake_news_failing<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div><br>
<p>-1 意识是所有的离群点(异类)推文，应该被忽略掉。接下来让我们看一下 Topic-4 的特征词及其权重</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#topic-4的特征词及权重</span>
<span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [(&#39;china&#39;, 0.05289416225000891),
     (&#39;tariffs&#39;, 0.024471004754487165),
     (&#39;trade&#39;, 0.02437576425026641),
     (&#39;chinese&#39;, 0.013643270667358017),
     (&#39;us&#39;, 0.011206804363719649),
     (&#39;farmers&#39;, 0.01113584970813823),
     (&#39;our&#39;, 0.010197907480148342),
     (&#39;deal&#39;, 0.010014612658730073),
     (&#39;we&#39;, 0.009043537683534882),
     (&#39;countries&#39;, 0.00901653033214627)]
</code></pre></div><br>
<p>在二维空间中使用  Intertopic Distance Map 可视化所有主题。该图可以让我们继续创建 DTM 前，判断主题数设置的是否充分够用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fig</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_topics</span><span class="p">()</span>
<span class="n">fig</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/topics.png" alt=""  />
</p>
<p>渲染的可视化文件太大，这里感兴趣的可以 <a href="topics.html">点击查看动态效果图</a></p>
<br>
<h2 id="构建dtm">构建DTM</h2>
<p>在 构建动态主题模型 前， 不同时间段中出现的主题需要预先都训练好。</p>
<ul>
<li>docs 文档数据，对应于本文的 tweets</li>
<li>timestamps 时间戳，对应于本文的 timestamps</li>
<li>global_tuning 是否将某个主题在 时间t 的主题表示向量 与 其全局主题表示向量 进行平均</li>
<li>evolution_tuning 是否将某个主题在 时间t 的主题表示向量 与 该主题在时间t-1 的主题表示向量 进行平均</li>
<li>nr_bins 时间段内含有的时间戳(点)数量。在数千个不同的时间戳中提取主题在计算上是低效的, 可以合并 20 个时间戳为一个时间段</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topics_over_time</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">topics_over_time</span><span class="p">(</span><span class="n">docs</span><span class="o">=</span><span class="n">tweets</span><span class="p">,</span> 
                                                <span class="n">timestamps</span><span class="o">=</span><span class="n">timestamps</span><span class="p">,</span> 
                                                <span class="n">global_tuning</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> 
                                                <span class="n">evolution_tuning</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> 
                                                <span class="n">nr_bins</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

<span class="n">topics_over_time</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span><span class="p">:</span><span class="nd">only-of-type</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">middle</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">tbody</span> <span class="nt">tr</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">vertical-align</span><span class="p">:</span> <span class="kc">top</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="p">.</span><span class="nc">dataframe</span> <span class="nt">thead</span> <span class="nt">th</span> <span class="p">{</span>
        <span class="k">text-align</span><span class="p">:</span> <span class="kc">right</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">table</span> <span class="na">border</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;dataframe&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;text-align: right;&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Topic<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Words<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Frequency<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Timestamp<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Name<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>-1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>donald, keychain, champion, trump, contest<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>20<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>-1_the_to_is_of<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>donald, execute, imagination, step, randal<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>9<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>0_run_president_trump_donald<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>begun, schedule, ahead, international, scotland<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2_golf_course_doral_scotland<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>cling, wallflower, persona, walls, rather<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3_border_wall_immigration_mexico<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>10<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>independence, safe, here, enjoy, happy<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2009-04-30 12:30:07.596999936<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>10_veterans_honor_heroes_our<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1880<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>162<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>ratings, fredo, frank, bad, based<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>162_ratings_machine_show_sided<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1881<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>163<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>yes, no, way, absolutely,<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>163_yes_no_absolutely_way<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1882<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>164<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>twitter, trending, section, trends, conservative<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>13<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>164_twitter_trending_conservative_sectio...<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1883<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>165<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>york, eaten, hell, new, blasio<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>165_york_ny_new_wonerful<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>1884<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>167<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>mixing, courthouse, mocked, notes, prosecuted<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>2020-06-09 07:29:57.849999872<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>167_jury_judge_guilty_foreperson<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>1885 rows × 5 columns<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div><br>
<h2 id="可视化dtm">可视化DTM</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#模型中一共有169个主题，这里显示前Top10的主题的演变</span>
<span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_topics_over_time</span><span class="p">(</span><span class="n">topics_over_time</span><span class="p">,</span> <span class="n">top_n_topics</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/dtm.png" alt=""  />

渲染的可视化文件太大，这里感兴趣的可以 <a href="dtm.html">点击查看动态效果图</a></p>
<br>
<h3 id="获取本文代码">获取本文代码</h3>
<p>点击获取 <a href="code.zip"><strong>数据及代码</strong></a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>安装python包出现报错：Microsoft Visual 14.0 or greater is required. 怎么办？</title>
      <link>https://textdata.cn/blog/2022-10-09-visual_c&#43;&#43;14_is_required/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-09-visual_c&#43;&#43;14_is_required/</guid>
      <description>安装python包出现报错：Microsoft Visual 14.0 or greater is required. 怎么办？</description>
      <content:encoded><![CDATA[<blockquote>
<p>转载自</p>
<ul>
<li>作者: 潮享教育李老师</li>
<li>出处: <a href="https://blog.csdn.net/andyleo0111/article/details/118738910">https://blog.csdn.net/andyleo0111/article/details/118738910</a></li>
</ul>
</blockquote>
<h2 id="一问题诊断">一、问题诊断</h2>
<p><strong>安装python包出现报错: Microsoft Visual 14.0 or greater is required. 怎么办？</strong></p>
<p>使用Python下载第三方库，pip也更新了，镜像也使用了，网络也没有问题，但是还是下载报错了，出现一大片红色报错信息怎么办？？？</p>
<p>要解决这个问题，总共分为三个步骤：</p>
<br>
<p><strong>第一步：查看报错信息</strong></p>
<p>![](img/01-microsoft visual c14.jpeg)</p>
<p><strong>第二步：根据报错信息，发现报错原因是因为缺少Microsoft Visual C++ 14.0</strong></p>
<p>报错提示：Microsoft Visual 14.0 or greater is required.</p>
<p><strong>第三步：下载、安装Microsoft Visual C++ 14.0即可完美解决问题！</strong></p>
<p>(如下链接下载即可，包含了默认文件，不用担心文件程序损坏和包丢失的问题，全自动安装成功)</p>
<br>
<h2 id="二解决问题">二、解决问题</h2>
<h3 id="21-下载软件">2.1 下载软件</h3>
<p>链接: <a href="https://pan.baidu.com/s/1c8tUHKmVYYTsueV-MVGNTQ">https://pan.baidu.com/s/1c8tUHKmVYYTsueV-MVGNTQ</a> 提取码: 5jic</p>
<h3 id="22-双击安装">2.2 双击安装</h3>
<p>下载之后解压文件，双击VisualCppBuildTools_Full.exe</p>
<p><img loading="lazy" src="img/02-visualcppbuildtools_full.png" alt=""  />
</p>
<h3 id="23-初始化文件">2.3 初始化文件&hellip;</h3>
<p><img loading="lazy" src="img/03-%e5%88%9d%e5%a7%8b%e5%8c%96.png" alt=""  />
</p>
<h3 id="24-安装文件">2.4 安装文件</h3>
<p><img loading="lazy" src="img/04-%e5%ae%89%e8%a3%85.png" alt=""  />
</p>
<h3 id="25-安装文件中">2.5 安装文件中&hellip;</h3>
<p><img loading="lazy" src="img/05-%e5%ae%89%e8%a3%85%e4%b8%ad.png" alt=""  />
</p>
<h3 id="26-问题解决收工">2.6 问题解决，收工！！！</h3>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>ManagementScience | 使用网络算法识别创新的颠覆性与否</title>
      <link>https://textdata.cn/blog/2022-09-07-management-science-disrupt-science-and-technology/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-07-management-science-disrupt-science-and-technology/</guid>
      <description>The CD index is a new approach to finding important points in evolving networks. When applied to large-scale data sets like U.S. patent citations, the index is useful for identifying influential innovations and other features of technological change.</description>
      <content:encoded><![CDATA[


<p>颠覆式创新是一个很火的概念，在创新创业、科学学等研究中，每个专利、论文的正文中都会引用关系，而引用关系会构成一个引用网络。</p>
<p>那么创新如何从网络形态进行区分，如何计算网络节点的创新程度，本文列举两篇与此相关的论文，分别是 Management science 和 Science 。</p>
<p><br><br></p>
<div id="文献摘要" class="section level2">
<h2>文献摘要</h2>
<p><strong>Funk, Russell J., and Jason Owen-Smith. “A dynamic network measure of technological change.” <em>Management science</em> 63, no. 3 (2017): 791-817.</strong></p>
<p>该文使用网络分析方法研究技术变革，论文认为 <strong>颠覆性的新发明，通过将发明者的注意力转移到或远离这些发明所依赖的知识，来重塑相互关联的技术网络。即更广的视野或更久远的视角，往往有利于颠覆性创新的产生</strong>。<strong>基于该思路，本文开发了新发明的颠覆性与否的计算指标cdindex</strong>。我们将这些指标应用于大学研究商业化的分析，并发现 <strong>联邦研究资金推动校园产生颠覆性创新，而商业联系会有利于巩固现状的创新</strong>。通过量化新技术，我们提出的指数允许基于专利的创新研究捕捉概念上重要的现象， 这些现象无法通过既定措施检测到。该测量方法提供了支持创新、创业、技术战略、科学政策和社会网络理论研究的理论发展的经验见解。</p>
<blockquote>
<p>Abstract: This article outlines a network approach to the study of technological change. We propose that new inventions reshape networks of interlinked technologies by shifting inventors’ attention to or away from the knowledge on which those inventions build. Using this approach, we develop novel indexes of the extent to which a new invention consolidates or destabilizes existing technology streams. We apply these indexes in analyses of university research commercialization and ﬁnd that, although federal research funding pushes campuses to create inventions that are more destabilizing, deeper commercial ties lead them to produce technologies that consolidate the status quo. By quantifying the eﬀects that new technologies have on their predecessors, the indexes we propose allow patent-based studies of innovation to capture conceptually important phenomena that are not detectable with established measures. The measurement approach presented here oﬀers empirical insights that support theoretical development in studies of innovation, entrepreneurship, technology strategy, science policy, and social network theory.</p>
</blockquote>
<p><br></p>
<p><strong>Wu, Lingfei, Dashun Wang, and James A. Evans. “Large teams develop and small teams disrupt science and technology.” Nature 566, no. 7744 (2019): 378-382.</strong></p>
<p>当今科学和技术最普遍的趋势之一是各个领域的大型团队的增长，因为孤独的研究人员和小型团队的流行程度正在减少 。团队规模的增加归因于科学活动的专业化、通信技术的改进 或需要跨学科解决方案的现代问题的复杂性。团队规模的这种转变引发了一个问题，即大团队所产生的科技特征是否以及如何不同于小团队。分析了 1954-2014 年期间超过 6500 万篇论文、专利和软件产品，证明在此期间，<strong>较小的团队倾向于将拉长到更大的时间尺度，借鉴过去，用新的想法和机会来颠覆科学和技术；而较大的团队倾向于聚焦于当前流行的，完善当前现有的</strong>。不论团队大小，均对于蓬勃发展的科学技术生态至关重要，并表明，为实现这一目标，科学政策应旨在支持团队规模的多样性。</p>
<blockquote>
<p>Abstract: One of the most universal trends in science and technology today is the growth of large teams in all areas, as solitary researchers and small teams diminish in prevalence. Increases in team size have been attributed to the specialization of scientific activities,
improvements in communication technology, or the complexity
of modern problems that require interdisciplinary solutions.This shift in team size raises the question of whether and how the character of the science and technology produced by large teams differs from that of small teams. Here we analyse more than 65 million papers, patents and software products that span the period 1954–2014, and demonstrate that across this period smaller teams have tended to disrupt science and technology with new ideas and opportunities, whereas larger teams have tended to develop existing ones. Work from larger teams builds on morerecent and popular developments, and attention to their work comes
immediately. By contrast, contributions by smaller teams search more deeply into the past, are viewed as disruptive to science and technology and succeed further into the future—if at all. Observed differences between small and large teams are magnified for higherimpact work, with small teams known for disruptive work and large teams for developing work. Differences in topic and research design
account for a small part of the relationship between team size and disruption; most of the effect occurs at the level of the individual, as people move between smaller and larger teams. These results demonstrate that both small and large teams are essential to a flourishing ecology of science and technology, and suggest that, to achieve this, science policies should aim to support a diversity of team sizes.</p>
</blockquote>
<p><br><br></p>
</div>
<div id="算法对比" class="section level2">
<h2>算法对比</h2>
<p>我没阅读两篇论文，仅就颠覆性与否的计算方法和图例，感觉算法实现差不多。</p>
<div class="figure">
<img src="img/cdindex-managent_science_2017.png" alt="" />
<p class="caption">上图为2017年Management Science的插图</p>
</div>
<p><br></p>
<div class="figure">
<img src="img/disruption_nature_2019.png" alt="" />
<p class="caption">上图为2019年Nature的插图</p>
</div>
<p><br><br></p>
</div>
<div id="代码数据" class="section level2">
<h2>代码数据</h2>
<p>下面分别为Management2017和Nature2019的主页，均含数据和代码。</p>
<p><a href="http://russellfunk.org/cdindex/"><img src="img/cdindex-homepage.png" /></a></p>
<p><br></p>
<p><a href="https://lingfeiwu.github.io/smallTeams/"><img src="img/nature2019-disrupt-homepage.png" /></a></p>
<p><br><br></p>
</div>
<div id="算法实现" class="section level2">
<h2>算法实现</h2>
<p>按照时间优先原则，本文就只分享Management2017论文作者Funk, Russell开源了cdindex库 (开发语言C和Python) ，安装</p>
<p><br></p>
<pre><code>pip3 install cdindex</code></pre>
<p>将Management2017 cdindex算法图 标注为如下图， 下图中左右两个网络节点是相同的，只需构造一套节点，两套边数据即可完成实验。</p>
<p><img src="img/cdindex-managent_science_2017_demo.png" /></p>
<p><br></p>
<p>我们就直接上代码</p>
<pre class="python"><code>import cdindex
import datetime

#节点，理解为专利号或者论文doi号；同时节点有先后时间属性
vertices = [{&quot;name&quot;: &quot;x1&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x2&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x3&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x4&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
        
           {&quot;name&quot;: &quot;y&quot;, &quot;time&quot;: datetime.datetime(1991, 1, 1)},
          
           {&quot;name&quot;: &quot;z1&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z2&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z3&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z4&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z5&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z6&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)}]
           
    
#edges_1边关系
#edges_1中的y为颠覆型
edges_1 = [{&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;y&quot;},
           
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x1&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x2&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x3&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x4&quot;}]


#edges_2边关系 
#edges_2中的y为巩固型
edges_2 = [{&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;y&quot;},
           
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x1&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x2&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x3&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x4&quot;},
          
          {&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;x1&quot;},
          {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;x1&quot;},
          {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;x2&quot;},
           
          {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;x3&quot;},
          {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;x3&quot;},
          {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;x4&quot;},
          {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;x4&quot;}]



# 构建两个网络
graph1 = cdindex.Graph() #颠覆型
graph2 = cdindex.Graph() #发展型

# 添加节点
for vertex in vertices:
    graph1.add_vertex(vertex[&quot;name&quot;], cdindex.timestamp_from_datetime(vertex[&quot;time&quot;]))
    graph2.add_vertex(vertex[&quot;name&quot;], cdindex.timestamp_from_datetime(vertex[&quot;time&quot;]))

# 添加引用关系
for edge in edges_1:
    graph1.add_edge(edge[&quot;source&quot;], edge[&quot;target&quot;])
for edge in edges_2:
    graph2.add_edge(edge[&quot;source&quot;], edge[&quot;target&quot;])
    
    
#y研究发布后1825天内，引用y的论文(专利)列入网络。
t_delta = int(datetime.timedelta(days=1825).total_seconds())

#计算cdindex得分
score1 = graph1.cdindex(&quot;y&quot;, t_delta)
score2 = graph2.cdindex(&quot;y&quot;, t_delta)

print(&#39;左侧-网络中的y节点的cdinex得分: {}, 节点y 为颠覆性创新&#39;.format(score1))</code></pre>
<pre><code>## 左侧-网络中的y节点的cdinex得分: 1.0, 节点y 为颠覆性创新</code></pre>
<p><br></p>
<pre class="python"><code>print(&#39;右侧-网络中的y节点的cdinex得分: {}, 节点y 为发展性创新&#39;.format(score2))</code></pre>
<pre><code>## 右侧-网络中的y节点的cdinex得分: -1.0, 节点y 为发展性创新</code></pre>
<p><br><br></p>
</div>
<div id="cdindex" class="section level2">
<h2>cdindex</h2>
<p>对比Python的结果，与论文计算过程，完全一致。cdindex内部实现我不太熟悉，如果想了解cdindex内部实现，可前往 <a href="https://github.com/russellfunk/cdindex" class="uri">https://github.com/russellfunk/cdindex</a> 阅读cdindex库的源码。
<img src="img/cdindex-managent_science_2017.png" /></p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>百度指数 | 使用qdata采集百度指数</title>
      <link>https://textdata.cn/blog/qdata_collect_baidu_index/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/qdata_collect_baidu_index/</guid>
      <description>百度指数数据采集</description>
      <content:encoded><![CDATA[<p>之前一直没有好的办法采集，最近发现一个神奇的qdata包可以采集<a href="https://index.baidu.com/v2/index.html#/">百度指数</a>不太好采集。</p>
<h2 id="安装">安装</h2>
<p>打开命令行(cmd、terminal)，</p>
<pre><code># 避免与pycryptodome冲突
pip3 uninstall pycrypto  

#安装最新的qdata
pip3 install --upgrade qdata
</code></pre>
<p><br><br></p>
<h2 id="百度指数">百度指数</h2>
<p><a href="https://github.com/longxiaofei/spider-BaiduIndex">qdata包</a>内置百度指数的省份(城市)对应的地区代码，以省份代码为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">qdata.baidu_index</span> <span class="kn">import</span> <span class="n">PROVINCE_CODE</span><span class="p">,</span> <span class="n">CITY_CODE</span>

<span class="n">PROVINCE_CODE</span>
</code></pre></div><p>Run</p>
<pre><code>{'山东': '901',
 '贵州': '902',
 '江西': '903',
 '重庆': '904',
 '内蒙古': '905',
 '湖北': '906',
 '辽宁': '907',
 '湖南': '908',
....
 '甘肃': '925',
 '新疆': '926',
 '河南': '927',
 '安徽': '928',
 '山西': '929',
 '海南': '930',
 '台湾': '931',
 '西藏': '932',
 '香港': '933',
 '澳门': '934'}
</code></pre>
<p><br><br></p>
<h2 id="案例">案例</h2>
<p><img loading="lazy" src="img/baidu_index.png" alt=""  />
</p>
<p>采集</p>
<ul>
<li>时间段 <code>2022-05-01 ~ 2022-08-01</code></li>
<li>地区 <code>山东</code></li>
<li>关键词 <code>['疫情', '锻炼', '居家']</code></li>
</ul>
<p>的百度指数数据。</p>
<p><br><br></p>
<h3 id="准备你的cookie">准备你的cookie</h3>
<p>在命令行 <strong>Python环境</strong> 下运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">qdata.baidu_login</span> <span class="kn">import</span> <span class="n">get_cookie_by_qr_login</span>
<span class="n">get_cookie_by_qr_login</span><span class="p">()</span>
</code></pre></div><p>上方代码运行结束后，弹出一个二维码窗体。</p>
<p><img loading="lazy" src="img/get_cookie.png" alt=""  />
</p>
<p>使用百度相关app，笔者使用 <strong>百度网盘app</strong> 扫码, 命令行内出现了一串字符串就是cookie。</p>
<p><img loading="lazy" src="img/cmd_cookie.jpg" alt=""  />
</p>
<br>
<h3 id="代码">代码</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">qdata.baidu_index</span> <span class="kn">import</span> <span class="n">PROVINCE_CODE</span>
<span class="kn">from</span> <span class="nn">qdata.baidu_index</span> <span class="kn">import</span> <span class="n">get_search_index</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="n">province</span> <span class="o">=</span> <span class="s1">&#39;山东&#39;</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;网购&#39;</span><span class="p">,</span> <span class="s1">&#39;居家&#39;</span><span class="p">]</span>
<span class="n">start_dt</span> <span class="o">=</span> <span class="s1">&#39;2022-07-01&#39;</span>
<span class="n">end_dt</span> <span class="o">=</span> <span class="s1">&#39;2022-08-01&#39;</span>

<span class="c1">#你的cookie</span>
<span class="n">cookie</span> <span class="o">=</span> <span class="s1">&#39;你的cookie&#39;</span>

<span class="c1">#数据存储于data文件夹内</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/</span><span class="si">{}</span><span class="s1">.csv&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">province</span><span class="p">),</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf</span><span class="p">:</span>
    <span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;province&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;index&#39;</span><span class="p">]</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">info</span> <span class="ow">in</span> <span class="n">get_search_index</span><span class="p">(</span><span class="n">keywords_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">keywords</span><span class="p">],</span> 
                                  <span class="n">start_date</span> <span class="o">=</span> <span class="n">start_dt</span><span class="p">,</span> 
                                  <span class="n">end_date</span> <span class="o">=</span> <span class="n">end_dt</span><span class="p">,</span> 
                                  <span class="n">area</span>  <span class="o">=</span> <span class="n">PROVINCE_CODE</span><span class="p">[</span><span class="n">province</span><span class="p">],</span>
                                  <span class="n">cookies</span> <span class="o">=</span> <span class="n">cookie</span><span class="p">):</span>

        
        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;province&#39;</span><span class="p">:</span> <span class="n">province</span><span class="p">,</span>
                <span class="s1">&#39;type&#39;</span><span class="p">:</span> <span class="n">info</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">],</span>
                <span class="s1">&#39;date&#39;</span><span class="p">:</span> <span class="n">info</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">],</span> 
                <span class="s1">&#39;index&#39;</span><span class="p">:</span> <span class="n">info</span><span class="p">[</span><span class="s1">&#39;index&#39;</span><span class="p">]}</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>{'province': '山东', 'type': 'all', 'date': '2022-07-01', 'index': '200'}
{'province': '山东', 'type': 'all', 'date': '2022-07-02', 'index': '148'}
{'province': '山东', 'type': 'all', 'date': '2022-07-03', 'index': '257'}

...
{'province': '山东', 'type': 'pc', 'date': '2022-07-01', 'index': '59'}
{'province': '山东', 'type': 'pc', 'date': '2022-07-02', 'index': '0'}
{'province': '山东', 'type': 'pc', 'date': '2022-07-03', 'index': '118'}

...
{'province': '山东', 'type': 'wise', 'date': '2022-07-01', 'index': '141'}
{'province': '山东', 'type': 'wise', 'date': '2022-07-02', 'index': '148'}
{'province': '山东', 'type': 'wise', 'date': '2022-07-03', 'index': '139'}
</code></pre>
<p>type字段的含义</p>
<ul>
<li>all 信息来自 <code>PC+移动</code></li>
<li>pc 信息来自 <code>PC</code></li>
<li>wise 信息来自 <code>移动</code></li>
</ul>
<p><code>山东 2022-07-01 PC+移动</code> 的指数是 <code>200</code>， 刚好等于 <code>pc59+移动141</code> ，也等于 <code>网购65+居家135</code> 。</p>
<p><img loading="lazy" src="img/baidu_index.png" alt=""  />
</p>
<p>最后数据存储于data文件夹内，如下图。</p>
<p><img loading="lazy" src="img/data.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>17G数据 | 企业社会责任报告数据集</title>
      <link>https://textdata.cn/blog/coporate_social_responsibility_datasets/</link>
      <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/coporate_social_responsibility_datasets/</guid>
      <description>近年来，企业社会责任（csr)已成为全球学术界研究的热点。国内外各大顶刊都先后刊登了多篇关于csr的文章，比如《企业绿色创新实践如何破解“和谐共生”难题？》（发表于管理世界）、《负责任的国际投资：ESG与中国OFDI》（发表于经济研究）、《Is my company really doing good? Factors influencing employees&amp;#39; evaluation of the authenticity of their company&amp;#39;s corporate social responsibility engagement》（发表于JBR）等。这些文章核心变量的构建大都基于对企业社会责任报告的内容分析和挖掘。比如《企业绿色创新实践如何破解“和谐共生”难题？》的被解释变量（绿色创新）以及部分解释变量（二元合法性和伦理型领导）。可见，社会责任报告对于我们研究esg至关重要。因此，接下来小编就带大家爬取深交所上市公司历年的社会责任报告，希望能够给大家带来一些帮助。In recent years, corporate social responsibility (csr) has become a research hotspot in the global academic circles. Major top journals at home and abroad have successively published many articles on CSR, such as How can corporate green innovation practice solve the problem of harmonious symbiosis? (published in Governance World), Responsible International Investment: ESG and China&amp;#39;s OFDI (published in Economic Research), Is my company really doing good? Factors influencing employees&amp;#39; evaluation of the authenticity of their company&amp;#39;s corporate social responsibility engagement (published in JBR) et al. The construction of core variables in these articles is mostly based on the content analysis and mining of corporate social responsibility reports. For example, How can corporate green innovation practice solve the problem of harmonious symbiosis? 》The explained variable (green innovation) and part of the explanatory variables (dual legitimacy and ethical leadership). It can be seen that the social responsibility report is very important for us to study esg. Therefore, the next editor will take you to crawl the social responsibility reports of companies listed on the Shenzhen Stock Exchange over the years, hoping to bring you some help.</description>
      <content:encoded><![CDATA[<blockquote>
<p>作者:张延丰 哈工程在读博士</p>
</blockquote>
<p>近年来，企业社会责任（csr)已成为全球学术界研究的热点。国内外各大顶刊都先后刊登了多篇关于csr的文章，比如《企业绿色创新实践如何破解“和谐共生”难题？》（发表于管理世界）、《负责任的国际投资：ESG与中国OFDI》（发表于经济研究）、《Is my company really doing good? Factors influencing employees' evaluation of the authenticity of their company&rsquo;s corporate social responsibility engagement》（发表于JBR）等。这些文章核心变量的构建大都基于对企业社会责任报告的内容分析和挖掘。比如《企业绿色创新实践如何破解“和谐共生”难题？》的被解释变量（绿色创新）以及部分解释变量（二元合法性和伦理型领导）。可见，社会责任报告对于我们研究esg至关重要。因此，接下来小编就带大家爬取深交所上市公司历年的社会责任报告，希望能够给大家带来一些帮助。</p>
<br>
<h2 id="获取数据集">获取数据集</h2>
<p>采集4000多个pdf文件。经过数据清洗，将20G的pdf数据，汇总整理到170M的csv文件内。</p>
<p><img loading="lazy" src="img/datasets.png" alt=""  />
</p>
<p>数据整理不易，如需获取本数据集，<strong>请转发本文至朋友圈集赞满30+</strong>， 加微信【372335839】，备注【深圳ESG数据集】</p>
<img src="img/wechat.jpg" style="zoom:50%;" />
<p><br><br></p>
<h2 id="一构建网络爬虫">一、构建网络爬虫</h2>
<p>数据采集分为多个步骤</p>
<ol>
<li>找网址规律(GET or POST), 构造url参数</li>
<li>伪装请求，防止被封</li>
<li>构造csv，存储信心</li>
<li>执行整个爬虫</li>
</ol>
<h3 id="11-url">1.1 url</h3>
<p>打开X交所的 <a href="http://www.szse.cn/disclosure/listed/notice/">http://www.szse.cn/disclosure/listed/notice/</a> ，同时打开浏览器开发者工具network面板，在截图左侧输入框输入关键词 『社会责任报告』，按下回车。</p>
<p>此时开发者工具network面板出现很多网络交换信息， 点击检查发现下图</p>
<p><img loading="lazy" src="img/01-%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" alt=""  />
</p>
<p>发现该页面数据是<strong>POST</strong>请求，网址为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">http://www.szse.cn/api/disc/announcement/annList?random=random参数
</code></pre></div><h3 id="12-headers">1.2 headers</h3>
<p>同时也能发现伪装头参数，现将两个重要信息整理为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://www.szse.cn/api/disc/announcement/annList?random=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">())</span>

<span class="c1">#伪装头</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Accept&#39;</span><span class="p">:</span> <span class="s1">&#39;application/json, text/javascript, */*; q=0.01&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Accept-Encoding&#39;</span><span class="p">:</span> <span class="s1">&#39;gzip, deflate&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Accept-Language&#39;</span><span class="p">:</span> <span class="s1">&#39;zh-CN,zh;q=0.9,en;q=0.8&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Host&#39;</span><span class="p">:</span> <span class="s1">&#39;www.szse.cn&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Origin&#39;</span><span class="p">:</span> <span class="s1">&#39;http://www.szse.cn&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Proxy-Connection&#39;</span><span class="p">:</span> <span class="s1">&#39;close&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;http://www.szse.cn/disclosure/listed/fixed/index.html&#39;</span><span class="p">,</span>
           <span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#39;</span><span class="p">,</span>
           <span class="s1">&#39;X-Request-Type&#39;</span><span class="p">:</span> <span class="s1">&#39;ajax&#39;</span><span class="p">,</span>
           <span class="s1">&#39;X-Requested-With&#39;</span><span class="p">:</span> <span class="s1">&#39;XMLHttpRequest&#39;</span><span class="p">}</span>
</code></pre></div><h3 id="13-data参数">1.3 data参数</h3>
<p>POST请求需要构造data参数，在开发者对应于payload, 整理为Python格式</p>
<p><img loading="lazy" src="img/02-payload.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
</code></pre></div><p><br><br></p>
<h3 id="14-preview">1.4 preview</h3>
<p>看到左侧渲染后的数据，同时也能在开发者工具network面板看到肉眼背后的源数据。我们使用preview预览截图再次确认网址规律没有问题。</p>
<p><img loading="lazy" src="img/03-data-preview.jpg" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">keyword</span> <span class="o">=</span> <span class="s1">&#39;社会责任报告&#39;</span>
<span class="n">page</span> <span class="o">=</span> <span class="mi">1</span>

<span class="c1">#post方法参数</span>
<span class="n">payload</span> <span class="o">=</span><span class="p">{</span><span class="s2">&#34;seDate&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">],</span>
           <span class="s2">&#34;searchKey&#34;</span><span class="p">:</span> <span class="p">[</span><span class="n">keyword</span><span class="p">],</span>
           <span class="s2">&#34;channelCode&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;listedNotice_disc&#34;</span><span class="p">],</span>
           <span class="s2">&#34;pageSize&#34;</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
           <span class="s2">&#34;pageNum&#34;</span><span class="p">:</span> <span class="n">page</span><span class="p">}</span>
</code></pre></div><h3 id="15-csv">1.5 csv</h3>
<p>现在已经把爬虫最重要的工作做完了，剩下的就是想办法构造出csv，并将数据存入csv。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#定义csv字段，存储PDF链接信息至data/esg_links.csv</span>
<span class="n">csvf</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/esg_links.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;pdf_link&#39;</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span><span class="p">]</span>
<span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>

<span class="n">test_data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pdf_link&#39;</span><span class="p">:</span> <span class="s1">&#39;测试pdf文件链接&#39;</span><span class="p">,</span>
             <span class="s1">&#39;code&#39;</span><span class="p">:</span> <span class="s1">&#39;测试股票代码&#39;</span><span class="p">,</span>
             <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;股票名称&#39;</span><span class="p">,</span>
             <span class="s1">&#39;title&#39;</span><span class="p">:</span> <span class="s1">&#39;报告名称&#39;</span><span class="p">,</span>
             <span class="s1">&#39;date&#39;</span><span class="p">:</span> <span class="s1">&#39;发布日期&#39;</span><span class="p">,</span>
             <span class="s1">&#39;size&#39;</span><span class="p">:</span> <span class="s1">&#39;pdf文件字节大小&#39;</span><span class="p">,</span>
             <span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="s1">&#39;数据id&#39;</span><span class="p">}</span>
             
<span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">test_data</span><span class="p">)</span>

<span class="c1">#关闭csv</span>
<span class="n">csvf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><p><br><br></p>
<h2 id="二爬虫代码完整">二、爬虫代码(完整)</h2>
<p>当你看到本文时，该完整代码很有可能会随着网站变化而失效。不要悲伤难过， 按照爬虫思路自己diy即可。如果没有爬虫基础，学习 <a href="https://www.bilibili.com/video/BV1AE411r7ph">大邓的B站爬虫视频</a> ，</p>
<p><img loading="lazy" src="img/%e5%a4%a7%e9%82%93%e7%88%ac%e8%99%ab.jpg" alt=""  />
</p>
<p>自己懂爬虫原理diy代码，比改别人的代码来的更容易。将前面的准备工作组织起来, 就形成了下面的完整代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="n">keyword</span> <span class="o">=</span> <span class="s2">&#34;社会责任报告&#34;</span>

<span class="c1">#定义csv字段，存储PDF链接信息至data/esg_links.csv</span>
<span class="n">csvf</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/esg_links.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;pdf_link&#39;</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span><span class="p">]</span>
<span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>

<span class="c1">#伪装头</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Accept&#39;</span><span class="p">:</span> <span class="s1">&#39;application/json, text/javascript, */*; q=0.01&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Accept-Encoding&#39;</span><span class="p">:</span> <span class="s1">&#39;gzip, deflate&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Accept-Language&#39;</span><span class="p">:</span> <span class="s1">&#39;zh-CN,zh;q=0.9,en;q=0.8&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Host&#39;</span><span class="p">:</span> <span class="s1">&#39;www.szse.cn&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Origin&#39;</span><span class="p">:</span> <span class="s1">&#39;http://www.szse.cn&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Proxy-Connection&#39;</span><span class="p">:</span> <span class="s1">&#39;close&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;http://www.szse.cn/disclosure/listed/fixed/index.html&#39;</span><span class="p">,</span>
           <span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#39;</span><span class="p">,</span>
           <span class="s1">&#39;X-Request-Type&#39;</span><span class="p">:</span> <span class="s1">&#39;ajax&#39;</span><span class="p">,</span>
           <span class="s1">&#39;X-Requested-With&#39;</span><span class="p">:</span> <span class="s1">&#39;XMLHttpRequest&#39;</span><span class="p">}</span>

<span class="n">page</span> <span class="o">=</span> <span class="mi">1</span>

<span class="c1">#post方法参数</span>
<span class="n">payload</span> <span class="o">=</span><span class="p">{</span><span class="s2">&#34;seDate&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">],</span>
           <span class="s2">&#34;searchKey&#34;</span><span class="p">:</span> <span class="p">[</span><span class="n">keyword</span><span class="p">],</span>
           <span class="s2">&#34;channelCode&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;listedNotice_disc&#34;</span><span class="p">],</span>
           <span class="s2">&#34;pageSize&#34;</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
           <span class="s2">&#34;pageNum&#34;</span><span class="p">:</span> <span class="n">page</span><span class="p">}</span>

<span class="c1">#发起请求</span>
<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://www.szse.cn/api/disc/announcement/annList?random=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">())</span>
<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span>
                     <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
                     <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>

<span class="c1">#当data关键词有对应的非空列表，循环一直进行。</span>
<span class="k">while</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;data&#39;</span><span class="p">]:</span>
    <span class="n">payload</span><span class="p">[</span><span class="s1">&#39;pageNum&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">page</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span>
                     <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
                     <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>
    
    <span class="n">esgs</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;data&#39;</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">esg</span> <span class="ow">in</span> <span class="n">esgs</span><span class="p">:</span>
        <span class="c1">#以字典样式写入csv</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pdf_link&#39;</span><span class="p">:</span> <span class="s1">&#39;http://disc.static.szse.cn/download&#39;</span><span class="o">+</span> <span class="n">esg</span><span class="p">[</span><span class="s1">&#39;attachPath&#39;</span><span class="p">],</span>
                <span class="c1">#为防止股票代码被exel等软件识别为数字，特转为字符串，并加sz标识。</span>
                <span class="s1">&#39;code&#39;</span><span class="p">:</span> <span class="s1">&#39;sz&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">esg</span><span class="p">[</span><span class="s1">&#39;secCode&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]),</span> 
                <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="n">esg</span><span class="p">[</span><span class="s1">&#39;secName&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span>
                <span class="s1">&#39;title&#39;</span><span class="p">:</span> <span class="n">esg</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">],</span>
                <span class="s1">&#39;date&#39;</span><span class="p">:</span> <span class="n">esg</span><span class="p">[</span><span class="s1">&#39;publishTime&#39;</span><span class="p">],</span>
                <span class="s1">&#39;size&#39;</span><span class="p">:</span> <span class="n">esg</span><span class="p">[</span><span class="s1">&#39;attachSize&#39;</span><span class="p">],</span>
                <span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="n">esg</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]}</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="n">page</span> <span class="o">=</span> <span class="n">page</span> <span class="o">+</span> <span class="mi">1</span>
    
<span class="c1">#关闭csv</span>
<span class="n">csvf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><p><br><br></p>
<h2 id="三查看csv">三、查看csv</h2>
<p>使用pandas读取 <code>data/esg_links.csv</code>,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;esg_links.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/04-df.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">4392
</code></pre></div><p>一共有4392条 「企业社会责任」 的报告数据。</p>
<p><br><br></p>
<h2 id="四批量下载">四、批量下载</h2>
<p>下载就简单多了， 直接使用定义好的爬虫代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">file</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    下载多媒体及文件
</span><span class="s2">    url： 多媒体文件链接（结尾有文件格式名）
</span><span class="s2">    file: 存储文件的路径（结尾有文件格式名）
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="c1">#获取到二进制数据</span>
    <span class="n">binarydata</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">content</span>
    <span class="c1">#以二进制形式将数据流存入fname中</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">binarydata</span><span class="p">)</span> 
        

<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">link</span><span class="p">,</span> <span class="n">title</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;pdf_link&#39;</span><span class="p">],</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">title</span><span class="p">)</span>
    <span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">link</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="s1">&#39;data/</span><span class="si">{}</span><span class="s1">.pdf&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">title</span><span class="p">))</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0 山河药辅：山河药辅2021年度社会责任报告
1 新 希 望：2021年企业社会责任报告（英文版）
2 天原股份：宜宾天原集团股份有限公司社会责任报告
3 五 粮 液：2021年度社会责任报告（英文版）
4 中兵红箭：2021年度社会责任报告	
......
......
148 苏宁环球：2021年社会责任报告
149 蓝色光标：2021年度企业社会责任报告
150 开尔新材：2021年度社会责任报告
151 中顺洁柔：2021年社会责任报告
......
......

4391 闽东电力：2006年度社会责任报告
4392  阳光发展：2006年度社会责任报告书
</code></pre></div><p>采集过程中，被封锁在所难免，所以记得每次停止采集的位置，在csv中删除该位置之前的数据。然后重新运行代码即可。</p>
<h3 id="注意">注意</h3>
<p>即时解决以上问题，可能遇到奇怪的问题。比如</p>
<p><img loading="lazy" src="img/07-error.png" alt=""  />
</p>
<p>检查发现相比其他几百kb的pdf，问题文件大小只有几kb。问题可能是被网站封锁或网络不稳定导致，标记好问题pdf的链接，重新批量下载一遍。</p>
<p><img loading="lazy" src="img/06-error.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="汇总至csv">汇总至csv</h2>
<p>很多企业社会责任报告是图片合成的，所以这里的pdf体积很大。将data文件夹中的4000多个pdf汇总至esg_data.csv中，能节约出电脑内存空间，也方便后续数据分析。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pdfdocx</span> <span class="kn">import</span> <span class="n">read_pdf</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>

<span class="c1">#新建esg_data.csv，用于存储企业社会责任报告数据</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;esg_data.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf</span><span class="p">:</span>
    <span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;pdf_link&#39;</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span><span class="p">,</span> <span class="s1">&#39;report_content&#39;</span><span class="p">]</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>

    <span class="n">files</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="n">record_of_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">file</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;.pdf&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)]</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="p">:]</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">record_of_df</span><span class="o">.</span><span class="n">to_dict</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
        <span class="n">data</span><span class="p">[</span><span class="s1">&#39;report_content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">read_pdf</span><span class="p">(</span><span class="s1">&#39;data/</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">file</span><span class="p">))</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div><p>最后，数据从20G的data文件夹(4000多个PDF)压缩为一个170M的esg_data.csv文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">esg_reports_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;esg_data.csv&#39;</span><span class="p">)</span>
<span class="n">esg_reports_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/08-esg_reports_df.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">esg_reports_df</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">4346
</code></pre></div><p><br><br></p>
<h2 id="五相关文献">五、相关文献</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[1]解学梅, &amp; 朱琪玮. (2021). 企业绿色创新实践如何破解 “和谐共生” 难题?. 管理世界, 37(1), 128-149.
[2]谢红军 &amp; 吕雪.(2022).负责任的国际投资：ESG与中国OFDI. 经济研究(03),83-99.
[3]Schaefer, S. D., Terlutter, R., &amp; Diehl, S. (2019). Is my company really doing good? Factors influencing employees&#39; evaluation of the authenticity of their company&#39;s corporate social responsibility engagement. Journal of business research, 101, 128-143.
</code></pre></div><p><br><br></p>
<h2 id="六其他广告">六、其他(广告)</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>whatlies库 | 可视化词向量</title>
      <link>https://textdata.cn/blog/whatlies_word2vec/</link>
      <pubDate>Sat, 02 Apr 2022 16:40:10 +0600</pubDate>
      
      <guid>/blog/whatlies_word2vec/</guid>
      <description>词语之间可以比较亲疏远近</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<blockquote>
<p>链接:https://pan.baidu.com/s/1vJohEJ0pc6t4PBK04PiZbg  密码:t7a6</p>
</blockquote>
<br>
<h2 id="whatlies">whatlies</h2>
<p>可以与spacy语言模型结合，可视化词向量。安装zh_core_web_md、en_core_web_md和whatlies。具体文档可以查看https://github.com/RasaHQ/whatlies</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">zh_core_web_md</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">-</span><span class="n">py3</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">en_core_web_md</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">-</span><span class="n">py3</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">whatlies</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>spacy模型中的词向量均为几十上百维度的词向量，通过压缩映射至二维空间后，横坐标man，纵坐标woman，就可以将词语的性别倾向可视化出来。</p>
<p>词向量语言模型会学习到人类的<strong>刻板印象</strong>，</p>
<p><a href="https://textdata.cn/blog/wordembeddingsinsocialscience/">大数据时代下社会科学研究方法的拓展—基于词嵌入技术的文本分析的应用</a></p>
<p><a href="https://textdata.cn/blog/embeddingsandattitude/">词嵌入测量不同群体对某概念的态度(偏见)</a></p>
<p>例如nurse是女性，doctor是男性。</p>
<p>制作两维度画轴，其中以woman作纵轴，man作横轴。 nurse、queen一般更多的是女性从业者，因此更接近y轴。 king国王多为男性，所以更接近x轴。</p>
<p>至于动物，女性喜欢养猫，男性喜欢养狗，所以也能体现出词语的性别倾向。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">whatlies</span> <span class="kn">import</span> <span class="n">EmbeddingSet</span>
<span class="kn">from</span> <span class="nn">whatlies.language</span> <span class="kn">import</span> <span class="n">SpacyLanguage</span>

<span class="n">lang</span> <span class="o">=</span> <span class="n">SpacyLanguage</span><span class="p">(</span><span class="s2">&#34;en_core_web_md&#34;</span><span class="p">)</span>

<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">,</span> <span class="s2">&#34;fish&#34;</span><span class="p">,</span> <span class="s2">&#34;kitten&#34;</span><span class="p">,</span> <span class="s2">&#34;man&#34;</span><span class="p">,</span> <span class="s2">&#34;woman&#34;</span><span class="p">,</span>
         <span class="s2">&#34;king&#34;</span><span class="p">,</span> <span class="s2">&#34;queen&#34;</span><span class="p">,</span> <span class="s2">&#34;doctor&#34;</span><span class="p">,</span> <span class="s2">&#34;nurse&#34;</span><span class="p">]</span>

<span class="n">emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">lang</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">])</span>
<span class="n">emb</span><span class="o">.</span><span class="n">plot_interactive</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span><span class="n">emb</span><span class="p">[</span><span class="s2">&#34;man&#34;</span><span class="p">],</span> <span class="n">y_axis</span><span class="o">=</span><span class="n">emb</span><span class="p">[</span><span class="s2">&#34;woman&#34;</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/gif-zero.gif" width="100%" />
    
    
</figure>

<p>whatlies也可以对中文进行操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">whatlies</span> <span class="kn">import</span> <span class="n">EmbeddingSet</span>
<span class="kn">from</span> <span class="nn">whatlies.language</span> <span class="kn">import</span> <span class="n">SpacyLanguage</span>

<span class="n">zh_lang</span> <span class="o">=</span> <span class="n">SpacyLanguage</span><span class="p">(</span><span class="s2">&#34;zh_core_web_md&#34;</span><span class="p">)</span>

<span class="n">zh_words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;猫&#34;</span><span class="p">,</span> <span class="s2">&#34;狗&#34;</span><span class="p">,</span> <span class="s2">&#34;鱼&#34;</span><span class="p">,</span> <span class="s2">&#34;鲤鱼&#34;</span><span class="p">,</span> <span class="s2">&#34;男人&#34;</span><span class="p">,</span> <span class="s2">&#34;女人&#34;</span><span class="p">,</span>
         <span class="s2">&#34;国王&#34;</span><span class="p">,</span> <span class="s2">&#34;王后&#34;</span><span class="p">,</span> <span class="s2">&#34;医生&#34;</span><span class="p">,</span> <span class="s2">&#34;护士&#34;</span><span class="p">]</span>

<span class="n">zh_emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">zh_lang</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">zh_words</span><span class="p">])</span>
<span class="n">zh_emb</span><span class="o">.</span><span class="n">plot_interactive</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span><span class="n">zh_emb</span><span class="p">[</span><span class="s2">&#34;男人&#34;</span><span class="p">],</span> <span class="n">y_axis</span><span class="o">=</span><span class="n">zh_emb</span><span class="p">[</span><span class="s2">&#34;女人&#34;</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/chinese.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>streamlit|任务周期表生成器</title>
      <link>https://textdata.cn/blog/periodic-table-creator/</link>
      <pubDate>Tue, 29 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/periodic-table-creator/</guid>
      <description>这个周期表生成器的想法是创建一个关于 自然语言处理任务周期表的博客。 在 Streamlit 的帮助下并受到此 Bokeh的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1mu411i7Jv&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<p>这个<strong>周期表生成器</strong>的想法是创建一个关于 <a href="https://www.innerdoc.com/periodic-table-of-nlp-tasks/">自然语言处理任务周期表</a> 的博客。 在 Streamlit 的帮助下并受到此 Bokeh <a href="https://docs.bokeh.org/en/latest/docs/gallery/periodic.html">图库示例</a> 的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！</p>
<p>大邓的作用仅仅是将其汉化，没有做布局上的新创新。</p>
<br>
<h2 id="下载">下载</h2>
<p>点击下载<a href="periodic-table-creator.zip"><strong>periodic-table-creator</strong></a>项目压缩文件夹</p>
<br>
<p>下面是自定义的<strong>任务周期表</strong>示例。 在这种情况下：对于自然语言处理任务！</p>
<p><img loading="lazy" src="img/periodic-table-generator-customize-content.png" alt="alt text"  />
</p>
<br>
<h2 id="安装运行">安装&amp;运行</h2>
<p>打开命令行(终端),</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install streamlit==1.8.1
pip3 install bokeh==2.4.1


#切换至项目文件夹periodic-table-creator
cd periodic-table-creator

#运行streamlit
streamlit run periodic_table_creator.py
</code></pre></div><p>此时在命令行中会出现</p>
<p><img loading="lazy" src="img/terminal.png" alt=""  />
</p>
<p>点击<strong>Local URL</strong>对应的链接，或者将该链接复制粘贴到浏览器，即可访问。</p>
<p><img loading="lazy" src="img/firstrun.png" alt=""  />
</p>
<br>
<h2 id="导入数据">导入数据</h2>
<p>创建自己特有的<strong>任务周期表</strong>需要导入自由的csv数据。可以[点击这里] (periodic-table-creator/periodic_nlp.csv) 下载并查看数据格式，或者运行案例时， 点击按钮&quot;Edit CSV text&quot; 查看示例数据格式。</p>
<ul>
<li>表的字符名(列名): <code>atomicnumber;group;period;symbol;elementname;groupname;color;url;excerpt</code></li>
<li>csv文件的分隔符使用英文格式下的 <code>;</code>或<code>,</code></li>
<li>csv文件使用utf-8编码</li>
</ul>
<p><img loading="lazy" src="img/periodic-table-generator-load-content.png" alt=""  />
</p>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>doccano|为机器学习建模做数据标注</title>
      <link>https://textdata.cn/blog/doccano_text_anotation/</link>
      <pubDate>Mon, 28 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/doccano_text_anotation/</guid>
      <description>使用doccano，为机器学习建模做数据标注</description>
      <content:encoded><![CDATA[<h2 id="doccano">doccano</h2>
<p>doccano是开源的数据标注工具，可以简化数据标注的难度。需要注意，市面上的机器学习课程一般都默认数据已标注，在此基础上讲机器学习。</p>
<p><img loading="lazy" src="img/doccano.gif" alt=""  />
</p>
<p>您还可以将 doccano 与您的脚本集成，因为它将功能公开为API。 doccano API是在局域网内的网址链接，多台设备可打开浏览、标注。</p>
<br>
<h2 id="一标记流程">一、标记流程</h2>
<p>通过以下步骤开始和完成使用 doccano 的标签项目：</p>
<ol>
<li>安装doccano。</li>
<li>运行doccano。</li>
<li>设置标签项目。 选择标签项目的类型， 配置项目设置。</li>
<li>导入数据集。 您还可以导入带标签的数据集。</li>
<li>给项目添加<strong>标注人员</strong></li>
<li>给标志者定义标注工作文档说明</li>
<li>开始标记数据。</li>
<li>导出标记的数据集。</li>
</ol>
<br>
<h2 id="二配置环境">二、配置环境</h2>
<h3 id="21-安装">2.1 安装</h3>
<p>打开命令行（cmd、terminal）执行安装命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install doccano
</code></pre></div><br>
<h3 id="22-运行doccano">2.2 运行doccano</h3>
<p>在命令行（cmd、terminal）内依次执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#在电脑第一次运行的时候初始化doccano
#只需设置一次，之后不用再运行该命令
doccano init

#创建用户名及密码；例如现在有一个主管admin，两个标注员tom和jack
#设置好用户，之后不用再运行该命令
doccano createuser --username admin --password pass
doccano createuser --username tom --password pass
doccano createuser --username jack --password pass

#开启doccano服务
doccano webserver
</code></pre></div><p>完成上述操作后，另打开一个新的命令行，执行下列命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">doccano task
</code></pre></div><br>
<h2 id="三案例">三、案例</h2>
<p>下面我们以外卖评论数据为例，对评论进行判断，标注为正、负面情感。<a href="data.csv">点击下载data.csv</a></p>
<br>
<h3 id="31-创建项目">3.1 创建项目</h3>
<p>先登录用户名和密码，这里的admin是超级用户(权限最大)</p>
<p><img loading="lazy" src="img/signin.png" alt=""  />
</p>
<p>为创建项目，如图点击<strong>Create</strong>按钮。 根据需要选择合适的项目类别,这里选择的<strong>Text  Classification，</strong></p>
<p><strong>填写项目信息</strong>，例如项目名情感标注，简介、标注类型</p>
<p><img loading="lazy" src="img/create_project.png" alt=""  />
</p>
<p>根据需要选择项目的功能需求，例如允许单标签，把数据打乱随机显示， 用户之间共享标注</p>
<p><img loading="lazy" src="img/create_project2.png" alt=""  />
</p>
<br>
<h3 id="32-上传数据">3.2 上传数据</h3>
<p>创建项目后，点击<strong>Dataset</strong>按钮，点击<strong>Import dataset</strong>导入数据。我这里准备的是csv文件，拥有review和label两个字段。</p>
<p><img loading="lazy" src="img/import_dataset1.png" alt=""  />
</p>
<p><img loading="lazy" src="img/import_dataset2.png" alt=""  />
</p>
<p><img loading="lazy" src="img/import_dataset3.png" alt=""  />
</p>
<br>
<h3 id="33-定义标签">3.3 定义标签</h3>
<p>点击左侧菜单中的“<strong>Labels</strong>”按钮来定义我们的标签。 我们应该看到标签编辑器页面。 在标签编辑器页面中，您可以通过指定标签文本、快捷键、背景颜色和文本颜色来创建标签。</p>
<p><img loading="lazy" src="img/define_labels.png" alt=""  />
</p>
<p><img loading="lazy" src="img/define_labels1.png" alt=""  />
</p>
<p>同理，可以定义负面neg标签。现在有了pos和neg两个标签。</p>
<p><img loading="lazy" src="img/define_labels3.png" alt=""  />
</p>
<br>
<h3 id="34-添加成员">3.4 添加成员</h3>
<p>点击左侧目录中的 <code>Members</code> 按钮，</p>
<p><img loading="lazy" src="img/select_members.png" alt=""  />
</p>
<p>然后，选择“<strong>Add</strong>”按钮以显示表单。 使用您要添加到项目中的用户名和角色填写此表单。 然后，选择“<strong>Save</strong>”按钮。</p>
<p><img loading="lazy" src="img/select_user.png" alt=""  />
</p>
<p>如果没有可供选择的成员，记得创建成员。形如<code>doccano createuser --username tom --password pass</code></p>
<br>
<h3 id="35-开始标注">3.5 开始标注</h3>
<p>接下来，我们准备标注文本数据。 只需点击导航栏中的“<strong>Start annotation</strong>”按钮，我们就可以开始对文档进行批注了。</p>
<p><img loading="lazy" src="img/annotation.png" alt=""  />
</p>
<br>
<h3 id="36-导出数据">3.6 导出数据</h3>
<p>在注释步骤之后，我们可以下载标注后的数据。 转到“<strong>Dataset</strong>”页面，然后单击“操作”菜单中的“<strong>Export dataset</strong>”按钮。 选择导出格式后，单击“<strong>Export</strong>”。 您应该看到以下屏幕：</p>
<p><img loading="lazy" src="img/export_dataset.png" alt=""  />
</p>
<p>到出的结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;all.csv&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p><img loading="lazy" src="img/export_dataset2.png" alt=""  />
</p>
<br>
<h3 id="37-导出数据">3.7 导出数据</h3>
<p>对了，当标注过程不同阶段，还看查看标注工作量等可视化信息</p>
<p><img loading="lazy" src="img/vis.png" alt=""  />
</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用streamlit制作自然语言处理发展时间线页面</title>
      <link>https://textdata.cn/blog/nlp-history-timeline/</link>
      <pubDate>Sun, 27 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/nlp-history-timeline/</guid>
      <description>使用streamlit制作自然语言处理发展时间线页面</description>
      <content:encoded><![CDATA[<h2 id="说明">说明</h2>
<p>这个案例使用<a href="https://streamlit.io">Streamlit</a> 和 <a href="http://timeline.knightlab.com/">TimelineJS</a> 制作， 通过时间线方式展示自然语言处理领域发展。大家可以将其改造为公司发展时间线、人生里程碑时间线等等。</p>
<br>
<h2 id="下载运行">下载&amp;运行</h2>
<ul>
<li><a href="nlp-history-timeline.zip">点击此处下载代码</a>   <a href="https://textdata.cn/blog/nlp-history-timeline/nlp-history-timeline.zip">https://textdata.cn/blog/nlp-history-timeline/nlp-history-timeline.zip</a></li>
<li>解压nlp-history-timeline.zip文件夹，放置于<strong>桌面</strong></li>
<li>打开命令行(终端)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#切换到nlp-history-timeline
cd nlp-history-timeline

#安装需要的包
pip3 install -r requirements.txt

#运行timeline_app.py
streamlit run timeline_app.py
</code></pre></div><br>
<h2 id="使用方式">使用方式</h2>
<ul>
<li><a href="https://www.innerdoc.com/nlp-timeline-demo/">点击打开案例网站</a></li>
</ul>
<p>下面是网页的一个时间点</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/demo-timeline.png" width="100%" />
    
    <figcaption><small><i>自然语言处理发展时间线</i></small></figcaption>
</figure>
</div>
<br>
<p>你也可以浏览的原始数据文件，格式为json。下图可以看到json的是由</p>
<ul>
<li>36个字典，即36个时间点</li>
<li>每个字典中有很多字段，如url图片链接、headline、year年份、text简介等。</li>
</ul>
<div style="text-align: center;">
<figure >
    
        <img src="img/demo-data.png" width="100%" />
    
    <figcaption><small><i>时间线案例数据</i></small></figcaption>
</figure>
</div>
<br>
<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>营销科技 | 今天出门穿什么？时尚电商Stitch Fix</title>
      <link>https://textdata.cn/blog/stitchfix/</link>
      <pubDate>Sun, 27 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/stitchfix/</guid>
      <description>“穿衣服是大学问”，不相信可以问问很多女生，每天出门前会不会为了今天要穿什麽衣服而伤脑筋？现在如果有一家公司帮您聘请一个专属的“穿衣顾问”，只在一开始收费120多元（二十块美金）的造型费，然后定期寄来已经帮您量身打造的时尚服饰，您愿意买单吗？不瞒您说，目前全世球已有三百五十万人接受美国一家叫做“Stitch Fix”的穿衣时尚订阅公司的服务。</description>
      <content:encoded><![CDATA[<blockquote>
<ul>
<li>作者：蘇宇暉（台科大管研所博士候選人）、羅凱揚（台科大企管系博士）</li>
<li>日期: 2020-12-14</li>
<li>绘图：彭煖蘋</li>
<li>出处: <a href="https://medium.com/marketingdatascience/%E6%99%82%E5%B0%9A%E9%9B%BB%E5%95%86stitch-fix-6aed7636b2c9">medium</a></li>
</ul>
</blockquote>
<br>
<p>“穿衣服是大学问”，不相信可以问问很多女生，每天出门前会不会为了今天要穿什麽衣服而伤脑筋？现在如果有一家公司帮您聘请一个专属的“穿衣顾问”，只在一开始收费120多元（二十块美金）的造型费，然后定期寄来已经帮您量身打造的时尚服饰，您愿意买单吗？不瞒您说，目前全世球已有三百五十万人接受美国一家叫做“Stitch Fix”的穿衣时尚订阅公司的服务。</p>
<div style="text-align: center;">
<figure >
    <a href="https://www.stitchfix.com/">
        <img src="img/StitchFix.png" width="100%" />
    </a>
    <figcaption><small><i>点击浏览Stitch Fix网站</i></small></figcaption>
</figure>
</div>
<p>2011年6月，刚从哈佛大学商学院毕业的美日混血儿<strong>卡翠娜‧雷克</strong>（Katrina Lake），在美国旧金山成立时尚电商公司Stitch Fix。满脑子有趣想法的雷克，透过募集到的五十万美金，开始了她的创业之旅。短短不到七年的时间，到了2017年11月，Stitch Fix在美国Nasdaq上市。而卡翠娜‧雷克本人也成为2019年《福布斯》全美白手起家女富豪排行榜中的55名。</p>
<p><strong>Stitch Fix的背后，其实是一家充分利用营销研究和营销数据科学，同时提供“穿衣时尚订阅”服务的新创公司。现在让我们来看看，Stitch Fix如何运作</strong>，如图-1所示。</p>
<div style="text-align: center;">
<figure >
    <a href="https://www.stitchfix.com/">
        <img src="img/StitchFix%e8%bf%90%e4%bd%9c.png" width="100%" />
    </a>
    <figcaption><small><i>图-1 StitchFix运作</i></small></figcaption>
</figure>
</div>
<p>消费者在登录Stitch Fix的网站首页时，不会看到像其他购物网站会有太多的商品展示，反而是<strong>介绍穿衣风格才是重点</strong>。而<strong>网站会有造型师来塑造消费者的风格，并且透过这种新的购物方式力邀消费者加入会员</strong>。因此，当消费者在Stitch Fix的网站注册时，Stitch Fix会请会员填答一份详细的问卷，包括顾客的<strong>基本资料、身高、尺码、喜欢的颜色、风格、经常出席的场合、甚至是预算</strong>等。</p>
<p>接著，Stitch Fix每个月就会透过一个称为“<strong>订购盒子</strong>（Subscription Box）”的包裹，一次将五件服饰寄送给顾客。等到消费者收到包裹时，可以留下觉得满意的服饰，看不上眼或者不满意的服饰就再寄回给Stitch Fix。如果消费者将服饰全部留下，就会享受到折扣，反之，如果一件都不想买，就负担二十美元的包裹服务费。</p>
<p>在美国，消费者要买衣服，往往得开车到购物中心或百货公司，买个两三件衣服总要花上半天时间。Stitch Fix一次寄来五件衣服（连同一张纸本问卷），其实也经过精算，因为如果一次寄太多件，消费者心理和预算上都难以承受。而Stitch Fix透过消费者所填答的电脑和纸本问卷，以及购买与退换货记录，利用机器学习算法对消费者喜好与需求进行预测，并结合设计师的搭配，给消费者定制化的建议。因为喜欢的衣服被留下，不喜欢的退回，Stitch Fix就很容易利用这些大量数据建立起消费者穿衣风格的“模型”。</p>
<p>而为了进一步收集到更精准的数据，2017年，Stitch Fix推出了一款Style Shuffle的小游戏，让顾客针对不同的服饰或配件，简单回应喜爱或是不喜爱。借此更进一步收集消费者的偏好，并增加消费者的粘性。Stitch Fix后来并将触角伸向男性服饰以及儿童服饰。而大尺码的女性服饰更是其服务重点。</p>
<p>通过收集大量消费者用户数据，以及不断优化的模型算法，并结合个人造型师和机器学习（AI）进行个性化推荐，让Stitch Fix的时尚订阅制服务，能够更精准地预测与满足消费者偏好的服饰及配件。据了解，截至2019年，该公司拥有8,000名员工，其中包括5,100名造型师和100多名数据科学家。</p>
<p>从以上Stitch Fix的故事中，我们看到了营销研究与数据科学的完美搭配。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用altair绘制漂亮的股票价格趋势图</title>
      <link>https://textdata.cn/blog/time-series-annotation/</link>
      <pubDate>Sun, 27 Mar 2022 10:42:10 +0600</pubDate>
      
      <guid>/blog/time-series-annotation/</guid>
      <description>使用altair绘制漂亮的股票价格趋势图</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://share.streamlit.io/streamlit/example-app-time-series-annotation/main">
        <img src="img/stockevolution.svg" width="100%" />
    </a>
    <figcaption><small><i>点击</i></small></figcaption>
</figure>
</div>
<p>使用altair绘制漂亮的股票价格趋势图, 直接上代码。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">altair</span>
</code></pre></div><br>
<h2 id="案例数据">案例数据</h2>
<p>这里使用vega_datasets中提供的数据做测试，返回的结果是dataframe类型的数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">stocks</span><span class="p">()</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">source</span><span class="p">[</span><span class="n">source</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="s2">&#34;2004-01-01&#34;</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">source</span>

<span class="n">get_data</span><span class="p">()</span>
</code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>symbol</th>
      <th>date</th>
      <th>price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>49</th>
      <td>MSFT</td>
      <td>2004-02-01</td>
      <td>21.77</td>
    </tr>
    <tr>
      <th>50</th>
      <td>MSFT</td>
      <td>2004-03-01</td>
      <td>20.46</td>
    </tr>
    <tr>
      <th>51</th>
      <td>MSFT</td>
      <td>2004-04-01</td>
      <td>21.45</td>
    </tr>
    <tr>
      <th>52</th>
      <td>MSFT</td>
      <td>2004-05-01</td>
      <td>21.53</td>
    </tr>
    <tr>
      <th>53</th>
      <td>MSFT</td>
      <td>2004-06-01</td>
      <td>23.44</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>555</th>
      <td>AAPL</td>
      <td>2009-11-01</td>
      <td>199.91</td>
    </tr>
    <tr>
      <th>556</th>
      <td>AAPL</td>
      <td>2009-12-01</td>
      <td>210.73</td>
    </tr>
    <tr>
      <th>557</th>
      <td>AAPL</td>
      <td>2010-01-01</td>
      <td>192.06</td>
    </tr>
    <tr>
      <th>558</th>
      <td>AAPL</td>
      <td>2010-02-01</td>
      <td>204.62</td>
    </tr>
    <tr>
      <th>559</th>
      <td>AAPL</td>
      <td>2010-03-01</td>
      <td>223.02</td>
    </tr>
  </tbody>
</table>
<p>364 rows × 3 columns</p>
</div>
<br>
<h2 id="完整代码">完整代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">altair</span> <span class="k">as</span> <span class="nn">alt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>
<span class="kn">from</span> <span class="nn">vega_datasets</span> <span class="kn">import</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">stocks</span><span class="p">()</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">source</span><span class="p">[</span><span class="n">source</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">gt</span><span class="p">(</span><span class="s2">&#34;2004-01-01&#34;</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">source</span>

<span class="k">def</span> <span class="nf">get_chart</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">hover</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">selection_single</span><span class="p">(</span>
        <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;date&#34;</span><span class="p">],</span>
        <span class="n">nearest</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">on</span><span class="o">=</span><span class="s2">&#34;mouseover&#34;</span><span class="p">,</span>
        <span class="n">empty</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">lines</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;股票价格趋势&#34;</span><span class="p">)</span>
        <span class="o">.</span><span class="n">mark_line</span><span class="p">()</span>
        <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
            <span class="n">x</span><span class="o">=</span><span class="s2">&#34;date&#34;</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="s2">&#34;price&#34;</span><span class="p">,</span>
            <span class="n">color</span><span class="o">=</span><span class="s2">&#34;symbol&#34;</span><span class="p">,</span>
            <span class="c1"># strokeDash=&#34;symbol&#34;,</span>
        <span class="p">)</span>
    <span class="p">)</span>

    <span class="c1"># Draw points on the line, and highlight based on selection</span>
    <span class="n">points</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">transform_filter</span><span class="p">(</span><span class="n">hover</span><span class="p">)</span><span class="o">.</span><span class="n">mark_circle</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">65</span><span class="p">)</span>

    <span class="c1"># Draw a rule at the location of the selection</span>
    <span class="n">tooltips</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
        <span class="o">.</span><span class="n">mark_rule</span><span class="p">()</span>
        <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
            <span class="n">x</span><span class="o">=</span><span class="s2">&#34;yearmonthdate(date)&#34;</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="s2">&#34;price&#34;</span><span class="p">,</span>
            <span class="n">opacity</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">condition</span><span class="p">(</span><span class="n">hover</span><span class="p">,</span> <span class="n">alt</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="mf">0.3</span><span class="p">),</span> <span class="n">alt</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span>
            <span class="n">tooltip</span><span class="o">=</span><span class="p">[</span>
                <span class="n">alt</span><span class="o">.</span><span class="n">Tooltip</span><span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;日期&#34;</span><span class="p">),</span>
                <span class="n">alt</span><span class="o">.</span><span class="n">Tooltip</span><span class="p">(</span><span class="s2">&#34;price&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&#34;价格 (USD)&#34;</span><span class="p">),</span>
            <span class="p">],</span>
        <span class="p">)</span>
        <span class="o">.</span><span class="n">add_selection</span><span class="p">(</span><span class="n">hover</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="p">(</span><span class="n">lines</span> <span class="o">+</span> <span class="n">points</span> <span class="o">+</span> <span class="n">tooltips</span><span class="p">)</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>


<span class="c1"># Original time series chart. Omitted `get_chart` for clarity</span>
<span class="n">chart</span> <span class="o">=</span> <span class="n">get_chart</span><span class="p">(</span><span class="n">get_data</span><span class="p">())</span>

<span class="c1"># Input annotations</span>
<span class="n">ANNOTATIONS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="s2">&#34;Mar 01, 2008&#34;</span><span class="p">,</span> <span class="s2">&#34;Pretty good day for GOOG&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Dec 01, 2007&#34;</span><span class="p">,</span> <span class="s2">&#34;Something&#39;s going wrong for GOOG &amp; AAPL&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Nov 01, 2008&#34;</span><span class="p">,</span> <span class="s2">&#34;Market starts again thanks to...&#34;</span><span class="p">),</span>
    <span class="p">(</span><span class="s2">&#34;Dec 01, 2009&#34;</span><span class="p">,</span> <span class="s2">&#34;Small crash for GOOG after...&#34;</span><span class="p">),</span>
<span class="p">]</span>

<span class="c1"># Create a chart with annotations</span>
<span class="n">annotations_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">ANNOTATIONS</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="s2">&#34;event&#34;</span><span class="p">])</span>
<span class="n">annotations_df</span><span class="o">.</span><span class="n">date</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">annotations_df</span><span class="o">.</span><span class="n">date</span><span class="p">)</span>
<span class="n">annotations_df</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">annotation_layer</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">annotations_df</span><span class="p">)</span>
    <span class="o">.</span><span class="n">mark_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">ticker</span><span class="p">,</span> <span class="n">dx</span><span class="o">=</span><span class="n">ticker_dx</span><span class="p">,</span> <span class="n">dy</span><span class="o">=</span><span class="n">ticker_dy</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="s2">&#34;center&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="s2">&#34;date:T&#34;</span><span class="p">,</span>
        <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s2">&#34;y:Q&#34;</span><span class="p">),</span>
        <span class="n">tooltip</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;event&#34;</span><span class="p">],</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="p">)</span>



<span class="p">(</span><span class="n">chart</span> <span class="o">+</span> <span class="n">annotation_layer</span><span class="p">)</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/stockevolution.svg" alt=""  />
</p>
<br>
<h2 id="代码下载time-series-annotationzip"><a href="time-series-annotation.zip">代码下载</a></h2>
<br>
<h2 id="出处">出处</h2>
<p><a href="https://share.streamlit.io/streamlit/example-app-time-series-annotation/main">https://share.streamlit.io/streamlit/example-app-time-series-annotation/main</a></p>
<br>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>即将开班 | 2022Python数据挖掘寒假工作坊</title>
      <link>https://textdata.cn/blog/2022_1st_workshop/</link>
      <pubDate>Sat, 15 Jan 2022 15:43:10 +0600</pubDate>
      
      <guid>/blog/2022_1st_workshop/</guid>
      <description>大数据时代，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题： 网络爬虫技术解决 如何从网络世界中高效地采集数据？文本分析技术解决如何从杂乱的文本数据中抽取文本信息(变量)？</description>
      <content:encoded><![CDATA[<h2 id="python网络爬虫与文本分析">Python网络爬虫与文本分析</h2>
<br>
<h2 id="工作坊基本信息">工作坊基本信息</h2>
<ul>
<li><strong>2000元</strong></li>
<li>2021年1月21-22日</li>
<li>小鹅通平台(线上直播）</li>
<li>每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑</li>
</ul>
<br>
<h2 id="报名咨询">报名咨询</h2>
<ul>
<li>17816181460（同微信）（汪老师）</li>
<li>单位：杭州国商智库信息技术服务有限公司</li>
<li>开户银行： 中国银行杭州大学城支行</li>
<li>银行账户：6232636200100260588</li>
</ul>
<br>
<h2 id="课程纲要">课程纲要</h2>
<ul>
<li><strong>课程目标：</strong> 掌握Python语法、网络爬虫、文本分析、机器学习的核心知识点和分析思路</li>
<li><strong>核心知识点：</strong> 爬虫原理及应用、 非结构化文本数据挖掘的思路及方法、机器学习应用等</li>
<li><strong>环境配置:</strong>  安装anaconda，注意安装过程中勾选<strong>Add Anaconda to the system Path environment variable</strong>、<strong>Register Anaconda as the system python 3.x</strong></li>
<li><strong>课件资料：</strong> 本课程全部使用jupyter notebook文件作为课程课件，开课前会将<strong>代码数据等相关资料</strong>发给各位</li>
</ul>
<br>
<h2 id="课程特色">课程特色</h2>
<ul>
<li><strong>接地气：</strong> 以经管学术需求为导向， 将Python分为语法篇、采集数据篇、文本分析篇、机器学习篇四大部分</li>
<li><strong>好理解：</strong> 知识点力求通俗易懂，少了晦涩的计算机术语，多了通俗易懂的使用场景和实战讲解</li>
<li><strong>上手快：</strong> 所有知识点均有可重复使用的代码块，犹如一块块的积木，课后您可以根据分析需要，快速搭建出自己的Python代码</li>
</ul>
<p><br><br></p>
<h2 id="课程目录">课程目录</h2>
<p>在科学研究中，数据的获取及分析是最重要的也是最棘手的两个环节！</p>
<p>在<strong>前大数据时代</strong>，一般使用实验法、调查问卷、访谈或者二手数据等方式，将数据整理为结构化的表格数据，之后再使用各种计量分析方法，对这些表格数据进行分析。但<strong>大数据时代</strong>，网络数据成为各方学者亟待挖掘的潜在宝藏，大量商业信息、社会信息以文本等非结构化、异构型数据格式存储于海量的网页中。那么对于经管为代表的人文社科类专业科研工作者而言，通过Python可以帮助学者解决使用Web数据进行科研面临的两个问题：</p>
<ol>
<li><strong>网络爬虫技术</strong> 解决 如何从网络世界中高效地 <strong>采集数据</strong>？</li>
<li><strong>文本分析技术</strong> 解决 如何从杂乱的文本数据中<strong>抽取文本信息(变量)</strong>？</li>
</ol>
<p><br><br></p>
<h2 id="一python语法入门">一、Python语法入门</h2>
<ul>
<li>Python跟英语一样是一门语言</li>
<li>数据类型之字符串</li>
<li>数据类型之列表元组集合</li>
<li>数据类型之字典</li>
<li>数据类型之布尔值、None</li>
<li>逻辑语句(if&amp;for&amp;tryexcept)</li>
<li>列表推导式</li>
<li>理解函数</li>
<li>常用的内置函数</li>
<li>内置库os路径库</li>
<li>内置库csv文件库</li>
<li>常见错误汇总</li>
</ul>
<br>
<h2 id="二数据采集">二、数据采集</h2>
<ul>
<li>网络爬虫原理</li>
<li>寻找网址规律</li>
<li>获取网页-requests库</li>
<li>pyquery库解析html网页</li>
<li><strong>案例 1</strong>：豆瓣/大众点评</li>
<li>json库解析json网页</li>
<li><strong>案例 2</strong>： 知乎</li>
<li><strong>案例 3</strong>： 百度地图POI地点检索</li>
<li><strong>案例 4：</strong> 下载文档、多媒体文件</li>
<li><strong>案例 5</strong>：上市公司定期报告pdf批量下载</li>
<li>简易爬虫库smartscraper（了解）</li>
<li>区分动态网站与静态网站</li>
</ul>
<br>
<h2 id="三初识文本分析">三、初识文本分析</h2>
<ul>
<li>文本分析在经管领域中的应用</li>
<li>读取文件中的数据(txt、xlsx、csv)</li>
<li>数据清洗re库-从文本中抽取姓名、年龄、电话、数字等各种信息</li>
<li><strong>案例 6</strong>：将多个txt文件整理到一个excel中</li>
<li>jieba分词包</li>
<li>spacy包</li>
<li><strong>案例 7</strong>：词频统计&amp;制作词云图</li>
<li><strong>案例 8</strong>：金融文本语调（正式、非正式）分析</li>
<li><strong>案例 9</strong>： 扩展情感词典- 共现法</li>
<li><strong>案例 10：</strong> 扩展情感词典- 词向量word2vec</li>
<li><strong>案例 11：</strong> 文本情感分析</li>
<li>数据分析pandas库快速入门</li>
<li><strong>案例 12</strong>：使用pandas对excel中的文本进行情感分析</li>
</ul>
<br>
<h2 id="四机器学习与文本分析">四、机器学习与文本分析</h2>
<ul>
<li>了解机器学习</li>
<li>使用机器学习做文本分析的流程</li>
<li>scikit-learn机器学习库简介</li>
<li>文本特征工程-将文本转化为机器可处理的数字向量</li>
<li>认识词袋法、one-hot、tf-idf、word2vec</li>
<li><strong>案例 13</strong>： 文本情感分析（带权重tf-idf&amp;情感词典）</li>
<li><strong>案例 14：</strong> 文本数据标注工具</li>
<li><strong>案例 15：</strong> 在线评论文本分类</li>
<li>文本相似性计算</li>
<li><strong>案例 15</strong>：使用文本相似性识别变化(政策连续性)</li>
<li><strong>案例 16</strong>：Kmeans聚类算法</li>
<li><strong>案例 17</strong>：LDA话题模型</li>
<li><strong>案例 18</strong>：使用预训练BERT词向量模型做主题分析</li>
<li><strong>案例 19:</strong>  识别图片中的文本</li>
<li>python爬虫、文本分析、机器学习等技术在论文中的应用赏析</li>
</ul>
<br>
<h2 id="工作坊基本信息-1">工作坊基本信息</h2>
<ul>
<li><strong>2000元</strong></li>
<li>2021年1月21-22日</li>
<li>小鹅通平台(线上直播）</li>
<li>每天6小时（8:30 — 11:30；14:00 — 17:00）+ 30分钟答疑</li>
</ul>
<br>
<h2 id="报名咨询-1">报名咨询</h2>
<ul>
<li>17816181460（同微信）（汪老师）</li>
<li>单位：杭州国商智库信息技术服务有限公司</li>
<li>开户银行： 中国银行杭州大学城支行</li>
<li>银行账户：6232636200100260588</li>
</ul>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="相关论文">相关论文</h2>
<p>参照论文的摘要，可以通过场景化等的方式帮助我们迅速理解上面两个问题。加粗内容是论文用到了python技术，在我们的课程中均有与之对应的知识点和代码。</p>
<p><strong>蔡庆丰,陈熠辉,林焜.信贷资源可得性与企业创新:激励还是抑制?——基于银行网点数据和金融地理结构的微观证据[J].经济研究,2020,v.55;No.637(10):124-140.</strong></p>
<blockquote>
<p>结合银行和企业的地理位置数据,<strong>运用Python编写的基于百度地图API的地理坐标匹配系统</strong>,获取上市公司办公地点周围的银行网点数量。</p>
</blockquote>
<br>
<p><strong>王伟,陈伟,祝效国,王洪伟.众筹融资成功率与语言风格的说服性——基于Kickstarter的实证研究[J].管理世界,2016(05):81-98.</strong></p>
<blockquote>
<p><strong>摘要</strong>：众筹融资效果决定着众筹平台的兴衰。 众筹行为很大程度上是由投资者的主观因素决定的，而影响主观判断的一个重要因素就是语言的说服性。 而这又是一种典型的用 户产生内容（UGC），项目发起者可以采用任意类型的语言风格对项目进行描述。 不同的语 言风格会改变投资者对项目前景的感知，进而影响他们的投资意愿。
首先，依据 Aristotle 修 辞三元组以及 Hovland 说服模型，采用扎根理论，将众筹项目的语言说服风格分为 5 类：诉诸可信、诉诸情感、诉诸逻辑、诉诸回报和诉诸夸张。</p>
<p>然后，<strong>借助文本挖掘方法，构建说服风格语料库，并对项目摘要进行分类。</strong></p>
<p>最后，建立语言说服风格对项目筹资影响的计量模型，并对 <strong>Kickstarter 平台上的 128345 个项目进行实证分析</strong>。 总体来说，由于项目性质的差异，不同 的项目类别对应于不同的最佳说服风格。</p>
</blockquote>
<br>
<p><strong>胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.</strong></p>
<blockquote>
<p>在可持续发展战略导向下，秉持长远理念是企业抵御外部环境威胁和拥有可持续经营能力的基 石。 然而，作为企业掌舵人的管理者并非都具有长远的目光。 本文基于高层梯队理论和社会心理学中的时间 导向理论，提出了管理者内在的短视主义特质与企业资本支出和研发支出的关系，并<strong>采用文本分析和机器学习技术构建出管理者短视主义指标从而对其进行实证检验</strong>。 研究结果发现，<strong>年报 MD&amp;A 中披露的“短期视域” 语言</strong> 能够反映管理者内在的短视主义特质，管理者短视会导致企业减少资本支出和研发支出。 当公司治理水平、监督型机构投资者的持股比例以及分析师关注度越高时，管理者短视主义对这些长期投资的负向影响越易受到抑制。 最终，管理者短视主义导致的研发支出减少和资本投资效率降低会损害企业的未来绩效。 本文拓宽了管理者短视主义的行为后果分析，对企业高层次管理人才的聘任以及企业和政府的监管具有重要的实践启示。<strong>同时，本文将文本分析和机器学习方法引入管理者短视主义的研究，为未来该领域的研究提供了参考和借鉴。</strong></p>
</blockquote>
<br>
<p><strong>姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.</strong></p>
<blockquote>
<p>金融文本的语调与情绪含有上市公司管理层以及个体投资者表达的情感信息 ， 并对股票市场产生影响 。 通过词典重组和深度学习算法构建了适用于<strong>正式文本</strong> 与 <strong>非正式文本</strong>的金融领域 <strong>中文情绪词典</strong>，并基于词典构建了上市公司的年报语调和社交媒体情绪指标构建的年报语调指标和社交媒体情绪指标能有效地预测上市公司股票的收益率 、成交量波动率和非预期盈余等市场因素 ， 并优于基于其他广泛使用情绪词典构建的指标。此外，年报语调指标和社交媒体情绪指标对上市公司的股价崩盘风险具有显著的预测作用。为文本大数据在金融市场的 应用提供了分析工具 ，也为大数据时代的金融市场预测和监管等活动提供了决策支持 。</p>
</blockquote>
<br>
<p><strong>Wang, Quan, Beibei Li, and Param Vir Singh. &ldquo;Copycats vs. original mobile apps: A machine learning copycat-detection method and empirical analysis.&rdquo; <em>Information Systems Research</em> 29, no. 2 (2018): 273-291.</strong></p>
<blockquote>
<p><strong>摘要:</strong> 尽管移动应用程序市场的增长为移动应用程序开发人员创新提供了巨大的市场机会和经济诱因，但它也不可避免地刺激了模仿者开发盗版软件。原始应用的从业人员和开发人员声称，模仿者窃取了原始应用的想法和潜在需求，并呼吁应用平台对此类模仿者采取行动。令人惊讶的是，很少有严格的研究来分析模仿者是否以及如何影响原始应用的需求。</p>
<p><strong>进行此类研究的主要威慑因素是缺乏一种客观的方法来识别应用程序是模仿者还是原创者。通过结合自然语言处理，潜在语义分析，基于网络的聚类和图像分析等机器学习技术，我们提出了一种将应用识别为原始或模仿者并检测两种模仿者的方法：欺骗性和非欺骗性。</strong></p>
<p>根据检测结果，我们进行了经济计量分析，以确定五年间在iOS App Store中发布的<strong>5,141个开发人员的10,100个动作游戏应用程序</strong>样本中，模仿应用程序对原始应用程序需求的影响。我们的结果表明，特定模仿者对原始应用需求的影响取决于模仿者的质量和欺骗程度。高质量的非欺骗性复制品会对原件产生负面影响。相比之下，低质量，欺骗性的模仿者正面影响了对原件的需求。</p>
<p>结果表明，从总体上讲，模仿者对原始移动应用程序需求的影响在统计上是微不足道的。<strong>我们的研究通过提供一种识别模仿者的方法</strong>，并提供模仿者对原始应用需求的影响的证据，为越来越多的移动应用消费文献做出了贡献。</p>
</blockquote>
<br>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="相关论文汇总">相关论文汇总</h2>
<p>[1]沈艳,陈赟,黄卓.文本大数据分析在经济学和金融学中的应用:一个文献综述[J].经济学(季刊),2019,18(04):1153-1186.</p>
<p>[2]王伟,陈伟,祝效国,王洪伟. 众筹融资成功率与语言风格的说服性-基于Kickstarter的实证研究.<em>管理世界</em>.2016;5:81-98.</p>
<p>[3]胡楠,薛付婧,王昊楠.管理者短视主义影响企业长期投资吗？——基于文本分析和机器学习[J].管理世界,2021,37(05):139-156+11+19-21.</p>
<p>[4]Kai Li, Feng Mai, Rui Shen, Xinyan Yan, Measuring Corporate Culture Using Machine Learning, <em>The Review of Financial Studies</em>,2020</p>
<p>[5]Kenneth Benoit. July 16, 2019. “Text as Data: An Overview.” Forthcoming in Cuirini, Luigi and Robert Franzese, eds. Handbook of Research Methods in Political Science and International Relations. Thousand Oaks: Sage.</p>
<p>[6]Loughran T, McDonald B. Textual analysis in accounting and finance: A survey[J]. <em>Journal of Accounting Research</em>, 2016, 54(4): 1187-1230. Author links open overlay panelComputational socioeconomics</p>
<p>[7]Berger, Jonah, Ashlee Humphreys, Stephan Ludwig, Wendy W. Moe, Oded Netzer, and David A. Schweidel. &ldquo;Uniting the tribes: Using text for marketing insight.&rdquo; <em>Journal of Marketing</em> 84, no. 1 (2020): 1-25.</p>
<p>[8]Banks, George C., Haley M. Woznyj, Ryan S. Wesslen, and Roxanne L. Ross. &ldquo;A review of best practice recommendations for text analysis in R (and a user-friendly app).&rdquo; <em>Journal of Business and Psychology</em> 33, no. 4 (2018): 445-459.</p>
<p>[9]Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. &ldquo;Lazy prices.&rdquo; <em>The Journal of Finance</em> 75, no. 3 (2020): 1371-1415.</p>
<p>[10]孟庆斌, 杨俊华, 鲁冰. 管理层讨论与分析披露的信息含量与股价崩盘风险——基于文本向量化方法的研究[J]. <em>中国工业经济</em>, 2017 (12): 132-150.</p>
<p>[11]Wang, Quan, Beibei Li, and Param Vir Singh. &ldquo;Copycats vs. Original Mobile Apps: A Machine Learning Copycat-Detection Method and Empirical Analysis.&rdquo; <em>Information Systems Research</em> 29.2 (2018): 273-291.</p>
<p>[12]Hoberg, Gerard, and Gordon Phillips. 2016, Text-based network industries and endogenous product differentiation,?<em>Journal of Political Economy</em> 124, 1423-1465</p>
<p>[13]Loughran, Tim, and Bill McDonald. &ldquo;When is a liability not a liability? Textual analysis, dictionaries, and 10‐Ks.&rdquo; <em>The Journal of Finance</em> 66, no. 1 (2011): 35-65.</p>
<p>[14]Fairclough, Norman. 2003. Analysing discourse: Textual analysis for social research (Psychology Press)</p>
<p>[15]Grimmer, Justin, and Brandon M Stewart. 2013, Text as data: The promise and pitfalls of automatic content analysis methods for political texts, <em>Political analysis</em>21, 267-297.</p>
<p>[16]Bollen, Johan, et al. &ldquo;Historical language records reveal a surge of cognitive distortions in recent decades.&rdquo; <em>Proceedings of the National Academy of Sciences</em> 118.30 (2021).</p>
<p>[17]Markowitz, D. M., &amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).</p>
<p>[18]Bail, Christopher Andrew. &ldquo;Combining natural language processing and network analysis to examine how advocacy organizations stimulate conversation on social media.&rdquo; <em>Proceedings of the National Academy of Sciences</em> 113, no. 42 (2016): 11823-11828.</p>
<p>[19]姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.</p>
<h2 id="录播课">录播课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hitomi|下载图像/视频/音乐/文本等的桌面实用程序</title>
      <link>https://textdata.cn/blog/hitomi_downloader/</link>
      <pubDate>Sat, 15 Jan 2022 13:50:10 +0600</pubDate>
      
      <guid>/blog/hitomi_downloader/</guid>
      <description>从各种网站下载图像/视频/音乐/文本等的桌面实用程序</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<p>用于从各种网站下载图像/视频/音乐/文本等的桌面实用程序。</p>
<p><img loading="lazy" src="img/card_crop.png" alt=""  />
</p>
<br>
<h2 id="下载安装">下载安装</h2>
<p><strong>App版</strong>，仅支持Win</p>
<p><a href="https://github.com/KurtBestor/Hitomi-Downloader/releases/tag/v3.7h">https://github.com/KurtBestor/Hitomi-Downloader/releases/tag/v3.7h</a>
<br>
<strong>Chrome浏览器插件</strong></p>
<p><a href="https://github.com/KurtBestor/Hitomi-Downloader/wiki/Chrome-Extension">https://github.com/KurtBestor/Hitomi-Downloader/wiki/Chrome-Extension</a></p>
<br>
<h2 id="操作演示">操作演示</h2>
<p><img loading="lazy" src="img/how_to_download.gif" alt=""  />
</p>
<br>
<h2 id="功能特色">功能特色</h2>
<ul>
<li>🍰 简洁用户接口</li>
<li>🚀 加速下载</li>
<li>📜 支持用户diy脚本</li>
<li>🧲 支持BitTorrent &amp; Magnet</li>
<li>🎞️ 支持 M3U8 &amp; MPD 格式视频下载</li>
</ul>
<br>
<h2 id="支持的站点sites">支持的站点Sites</h2>
<table>
<thead>
<tr>
<th style="text-align:center">Site</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>AfreecaTV</strong></td>
<td><a href="https://afreecatv.com">https://afreecatv.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ArtStation</strong></td>
<td><a href="https://artstation.com">https://artstation.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>AsianSister</strong></td>
<td><a href="https://asiansister.com">https://asiansister.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>AsmHentai</strong></td>
<td><a href="https://asmhentai.com">https://asmhentai.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Avgle</strong></td>
<td><a href="https://avgle.com">https://avgle.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>baraag.net</strong></td>
<td><a href="https://baraag.net">https://baraag.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>半次元</strong></td>
<td><a href="https://bcy.net">https://bcy.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>BDSMlr</strong></td>
<td><a href="https://bdsmlr.com">https://bdsmlr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>bilibili</strong></td>
<td><a href="https://bilibili.com">https://bilibili.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ComicWalker</strong></td>
<td><a href="https://comic-walker.com">https://comic-walker.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Coub</strong></td>
<td><a href="https://coub.com">https://coub.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Danbooru</strong></td>
<td><a href="https://danbooru.donmai.us">https://danbooru.donmai.us</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Kakao Webtoon</strong></td>
<td><a href="http://webtoon.kakao.com">http://webtoon.kakao.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>DeviantArt</strong></td>
<td><a href="https://deviantart.com">https://deviantart.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>E(x)Hentai Galleries</strong></td>
<td><a href="https://e-hentai.org">https://e-hentai.org</a><br><a href="https://exhentai.org">https://exhentai.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Facebook</strong></td>
<td><a href="https://facebook.com">https://facebook.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>FC2 Video</strong></td>
<td><a href="https://video.fc2.com">https://video.fc2.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Flickr</strong></td>
<td><a href="https://flickr.com">https://flickr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Gelbooru</strong></td>
<td><a href="https://gelbooru.com">https://gelbooru.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hameln</strong></td>
<td><a href="https://syosetu.org">https://syosetu.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>hanime.tv</strong></td>
<td><a href="https://hanime.tv">https://hanime.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hentai Foundry</strong></td>
<td><a href="https://hentai-foundry.com">https://hentai-foundry.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hitomi.la</strong></td>
<td><a href="https://hitomi.la">https://hitomi.la</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hiyobi.me</strong></td>
<td><a href="https://hiyobi.me">https://hiyobi.me</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Imgur</strong></td>
<td><a href="https://imgur.com">https://imgur.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Instagram</strong></td>
<td><a href="https://instagram.com">https://instagram.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Iwara</strong></td>
<td><a href="https://iwara.tv">https://iwara.tv</a><br><a href="https://ecchi.iwara.tv">https://ecchi.iwara.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Jmana</strong></td>
<td><a href="https://jmana.net">https://jmana.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>カクヨム</strong></td>
<td><a href="https://kakuyomu.jp">https://kakuyomu.jp</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>LHScan</strong></td>
<td><a href="https://loveheaven.net">https://loveheaven.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Likee</strong></td>
<td><a href="https://likee.video">https://likee.video</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Luscious</strong></td>
<td><a href="https://luscious.net">https://luscious.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>MyReadingManga</strong></td>
<td><a href="https://myreadingmanga.info">https://myreadingmanga.info</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Blog</strong></td>
<td><a href="https://blog.naver.com">https://blog.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Post</strong></td>
<td><a href="https://post.naver.com">https://post.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Webtoon</strong></td>
<td><a href="https://comic.naver.com">https://comic.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver TV</strong></td>
<td><a href="https://tv.naver.com">https://tv.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>nhentai</strong></td>
<td><a href="https://nhentai.net">https://nhentai.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>nhentai.com</strong></td>
<td><a href="https://nhentai.com">https://nhentai.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Niconico</strong></td>
<td><a href="http://nicovideo.jp">http://nicovideo.jp</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ニジエ</strong></td>
<td><a href="https://nijie.info">https://nijie.info</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pawoo</strong></td>
<td><a href="https://pawoo.net">https://pawoo.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pinterest</strong></td>
<td><a href="https://pinterest.com">https://pinterest.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pixiv</strong></td>
<td><a href="https://pixiv.net">https://pixiv.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>pixivコミック</strong></td>
<td><a href="https://comic.pixiv.net">https://comic.pixiv.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pornhub</strong></td>
<td><a href="https://pornhub.com">https://pornhub.com</a><br><a href="https://pornhubpremium.com">https://pornhubpremium.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Rule34.xxx</strong></td>
<td><a href="https://rule34.xxx">https://rule34.xxx</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Sankaku Complex</strong></td>
<td><a href="https://www.sankakucomplex.com">https://www.sankakucomplex.com</a><br><a href="https://chan.sankakucomplex.com">https://chan.sankakucomplex.com</a><br><a href="https://idol.sankakucomplex.com">https://idol.sankakucomplex.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Soundcloud</strong></td>
<td><a href="https://soundcloud.com">https://soundcloud.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>小説家になろう</strong></td>
<td><a href="https://syosetu.com">https://syosetu.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>TOKYO Motion</strong></td>
<td><a href="https://tokyomotion.net">https://tokyomotion.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Tumblr</strong></td>
<td><a href="https://tumblr.com">https://tumblr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Twitch</strong></td>
<td><a href="https://twitch.tv">https://twitch.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Twitter</strong></td>
<td><a href="https://twitter.com">https://twitter.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Vimeo</strong></td>
<td><a href="https://vimeo.com">https://vimeo.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>V LIVE</strong></td>
<td><a href="https://vlive.tv">https://vlive.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Weibo</strong></td>
<td><a href="https://weibo.com">https://weibo.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>WikiArt</strong></td>
<td><a href="https://www.wikiart.org">https://www.wikiart.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>xHamster</strong></td>
<td><a href="https://xhamster.com">https://xhamster.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>XNXX</strong></td>
<td><a href="https://xnxx.com">https://xnxx.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>XVideos</strong></td>
<td><a href="https://xvideos.com">https://xvideos.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Yande.re</strong></td>
<td><a href="https://yande.re">https://yande.re</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Youku</strong></td>
<td><a href="https://youku.com">https://youku.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>YouTube</strong></td>
<td><a href="https://youtube.com">https://youtube.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>and more&hellip;</strong></td>
<td>[Supported sites by youtube-dl](<a href="http://ytdl-org.github.io/youtube-dl/supportedsites.html">http://ytdl-org.github.io/youtube-dl/supportedsites.html</a></td>
</tr>
</tbody>
</table>
<br>
<h2 id="数据挖掘课">数据挖掘课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>pychorus | 3行代码提取音乐高潮部分</title>
      <link>https://textdata.cn/blog/pychorus/</link>
      <pubDate>Thu, 13 Jan 2022 13:50:10 +0600</pubDate>
      
      <guid>/blog/pychorus/</guid>
      <description>提取音乐高潮部分</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/irYCS5gQVNu9vidqMy-WJA">https://mp.weixin.qq.com/s/irYCS5gQVNu9vidqMy-WJA</a></p>
</blockquote>
<p>有些时候，为了设定手机铃声或者发抖音视频，我们会耗费大量时间在剪辑音乐高潮部分上。那么这个音乐高潮的提取能不能自动化呢？当然可以。</p>
<p>先来听听效果，孤芳自赏提取高潮后的部分：</p>
<p>怎么样，是不是迫不及待想往下读了？不要急，让我们从原理开始慢慢讲起。</p>
<br>
<h2 id="原理简介">原理简介</h2>
<p>不知道大家有没有这样的体会，大部分时候，歌曲的高潮部分通常是重复次数最多的部分。因此我们可以根据这一个特征，提出我们的算法：</p>
<ol>
<li>遍历整首歌曲。</li>
<li>将选定长度的部分与其他部分比较并计算相似度，以查看是否重复。</li>
<li>寻找重复次数较大、且间隔长的片段。</li>
</ol>
<br>
<h2 id="代码编写">代码编写</h2>
<p>为了避免造轮子，我们找到了别人已经做过的类似的项目：https://github.com/vivjay30/pychorus</p>
<p>我们只需要分析这个源代码中最核心的部分，即求相似区段的源代码，就能知道它是不是符合我们的项目需求了：</p>
<p><img loading="lazy" src="img/pychorus.png" alt=""  />
</p>
<p>可以看到，这部分代码就是做了我们算法的第二步，进行了片段与片段之间的相似度计算。检测时用到的相似函数是这样的：</p>
<p><img loading="lazy" src="img/formula.png" alt=""  />
</p>
<p>这主要是因为歌曲由12个基本音符的帧的集合而组成，v1和v2是任意两段音乐的音符矢量，如果说两段音乐非常相似，那么右边的式子将接近于0. <strong>如果说 1-右边的式子 得分非常高，则说明两段音乐非常相似</strong>。</p>
<p>下面我们看看怎么使用这个项目求音乐高潮部分，其实非常简单。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install pychorus
</code></pre></div><br>
<h2 id="编写代码">编写代码</h2>
<p>实际上，这个包用起来可是相当简单，如果我们只是想单纯提取歌曲高潮部分：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pychorus</span> <span class="kn">import</span> <span class="n">find_and_output_chorus</span>

<span class="n">chorus_start_sec</span> <span class="o">=</span> <span class="n">find_and_output_chorus</span><span class="p">(</span><span class="s2">&#34;你的音乐文件&#34;</span><span class="p">,</span> <span class="s2">&#34;提取结果的目标路径&#34;</span><span class="p">,</span> <span class="n">要多少秒的高潮部分</span><span class="p">)</span>
</code></pre></div><p>没错，两行代码就解决了。如果你想知道一些详细的细节，比如说输出相似矩阵或者结果可视化，建议阅读github中该项目的操作指令。下面让我们检验一下效果。</p>
<br>
<h2 id="效果检验">效果检验</h2>
<p>以《孤芳自赏》 为例，让我们试试这个提取器的功力。</p>
<p>原曲：</p>
<p>编写代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 提取音乐高潮部分</span>
<span class="kn">from</span> <span class="nn">pychorus</span> <span class="kn">import</span> <span class="n">find_and_output_chorus</span>

<span class="n">input_file</span> <span class="o">=</span> <span class="s2">&#34;孤芳自赏.mp3&#34;</span>
<span class="n">output_file</span> <span class="o">=</span> <span class="s2">&#34;孤芳自赏_high.wav&#34;</span>
<span class="n">clip_length</span><span class="o">=</span><span class="mi">40</span>
<span class="n">chorus_start_sec</span> <span class="o">=</span> <span class="n">find_and_output_chorus</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">,</span> <span class="n">clip_length</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="数据挖掘课">数据挖掘课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Imageio | 读取和写入图像数据的Python库</title>
      <link>https://textdata.cn/blog/imageio/</link>
      <pubDate>Thu, 13 Jan 2022 12:50:10 +0600</pubDate>
      
      <guid>/blog/imageio/</guid>
      <description>用于读取和写入图像数据的 Python 库</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<p>用于读取和写入图像数据的 Python 库；</p>
<p>Imageio 提供了一系列 <a href="https://imageio.readthedocs.io/en/stable/getting_started/standardimages.html">example images</a>，可以通过使用 &lsquo;&lsquo;imageio:chelsea.png&rsquo;&rsquo; 之类的 URI 来使用。 如果您的系统上尚不存在这些图像，则会自动下载这些图像。 因此，下面的大多数示例应该可以正常工作。</p>
<br>
<h2 id="读取图片">读取图片</h2>
<p>最常用的读取图片功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s1">&#39;imageio:chelsea.png&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">im</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div><p>如果图片文件是gif动图(gif是由多个静态图片组成的动图)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="s1">&#39;cat.gif&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">im</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># Each frame is a numpy matrix</span>
</code></pre></div><p>如果gif存储于内存中（二进制数）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="c1">#image_bytes二进制数据</span>
<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="n">image_bytes</span><span class="p">,</span> <span class="s1">&#39;.gif&#39;</span><span class="p">)</span>
</code></pre></div><h2 id="读取网图">读取网图</h2>
<p>Imageio可以从文件名、文件对象、zip压缩文件夹、字节流、图片链接中读取图片</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>
<span class="kn">import</span> <span class="nn">visvis</span> <span class="k">as</span> <span class="nn">vv</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s1">&#39;http://upload.wikimedia.org/wikipedia/commons/d/de/Wikipedia_Logo_1.0.png&#39;</span><span class="p">)</span>
<span class="n">vv</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
</code></pre></div><blockquote>
<p>注意: 有时候代码运行不出结果，可以尝试 <code>imageio.imread(imageio.core.urlopen(url).read(), '.gif')</code>.</p>
</blockquote>
<br>
<h2 id="读取文件夹中的图片">读取文件夹中的图片</h2>
<p>一种常见的情况是您想要读取文件夹中的所有图像，例如 进行科学分析，或者因为这些都是您的训练示例。 假设该文件夹仅包含图像文件，您可以这样读取它</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>
<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="n">images</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;path/to/folder&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">iterdir</span><span class="p">():</span>
    <span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
    <span class="n">images</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="迭代视频中的图片">迭代视频中的图片</h2>
<p>视频也是由图片组成的，通过每秒钟播放几十帧（视频由很多张图片组成），静态的图展示出视频效果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">reader</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="s1">&#39;imageio:cockatoo.mp4&#39;</span><span class="p">)</span>

<span class="c1">#for循环迭代</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">im</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">reader</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Mean of frame </span><span class="si">%i</span><span class="s1"> is </span><span class="si">%1.1f</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">im</span><span class="o">.</span><span class="n">mean</span><span class="p">()))</span>
</code></pre></div><br>
<h2 id="官方文档">官方文档</h2>
<p>更多功能请查看官方文档
<a href="https://github.com/imageio/imageio">https://github.com/imageio/imageio</a></p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>大邓整理的有用Python项目</title>
      <link>https://textdata.cn/blog/python_tools/</link>
      <pubDate>Fri, 07 Jan 2022 12:43:10 +0600</pubDate>
      
      <guid>/blog/python_tools/</guid>
      <description>涵盖网络爬虫、数据库、数据分析、机器学习、可视化、文本分析</description>
      <content:encoded><![CDATA[<h2 id="tool_kits">Tool_Kits</h2>
<p>工具箱大全,主要是Python项目。</p>
<p>涵盖：</p>
<ol>
<li>网络爬虫</li>
<li>数据库</li>
<li>数据分析</li>
<li>机器学习</li>
<li>可视化</li>
<li>文本分析</li>
<li>GUI</li>
<li>自动化办公</li>
<li>其他</li>
</ol>
<br>
<h2 id="网络爬虫">网络爬虫</h2>
<ul>
<li><a href="https://github.com/psf/requests">requests</a>  最好用的网络爬虫访问库</li>
<li><a href="https://github.com/hidadeng/smartscraper">smartscraper</a>  最简单的网络爬虫访问&amp;解析库</li>
<li><a href="https://github.com/hidadeng/weibo_crawler">weibo_crawler</a> 最简单的微博爬虫</li>
<li><a href="https://mp.weixin.qq.com/s/qL1uEk4j_ks3uhjINe-xyA">崔庆才大神发布的测试站点</a></li>
<li><a href="https://github.com/Gerapy/GerapyAutoExtractor">gerapy-auto-extractor</a> 爬虫页面智能解析库</li>
<li><a href="https://github.com/davidteather/TikTok-Api">TikTok-Api</a> 抖音国际站爬虫库</li>
<li><a href="https://github.com/tebelorg/RPA-Python">rpa</a> Python自动化操纵包</li>
<li><a href="https://github.com/celery/celery/">celery</a> 可以用于制作爬虫访问队列</li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a> 最简单的网页解析库</li>
<li><a href="https://github.com/gawel/pyquery">pyquery</a>  最简洁网页解析库</li>
<li><a href="https://github.com/scrapy/scrapy">scrapy</a> 最流行的爬虫框架</li>
<li><a href="https://github.com/binux/pyspider">pyspider</a> 国人开发的爬虫框架</li>
<li><a href="https://github.com/SeleniumHQ/selenium/">selenium</a> 浏览器自动化测试框架，可以用于爬虫反爬</li>
<li><a href="https://github.com/microsoft/playwright">playwright</a> 微软开源的浏览器自动化测试框架</li>
<li><a href="https://github.com/imWildCat/scylla">scylla</a> 智能IP代理池，用于反爬</li>
<li><a href="https://github.com/hidadeng/shreport">shreport</a> 上海证券交易所上市公司定期报告下载</li>
<li><a href="https://github.com/codelucas/newspaper">newspaper</a> 新闻爬虫库，根据提供的url可以抽取出新闻标题、作者、关键词、总结，部分功能支持中文</li>
<li><a href="https://github.com/sml2h3/ddddocr">ddddocr</a>  通用验证码识别OCR pypi版</li>
</ul>
<br>
<h2 id="web">Web</h2>
<ul>
<li><a href="https://github.com/getpelican/pelican">pelican</a> Python静态网站生成库</li>
<li><a href="https://github.com/pallets/flask">flask</a> 可以开发网站、分享rest-api接口;流行度top2的web框架</li>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a>、<a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>对Python小白最友好的的web库</li>
<li><a href="https://github.com/tiangolo/fastapi">fastapi</a>  web框架，高性能，易于学习，快速编写代码；</li>
<li><a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>  不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。</li>
<li><a href="https://github.com/mkdocs/mkdocs">mkdocs</a> 制作文档网站
<br></li>
</ul>
<h2 id="数据库">数据库</h2>
<ul>
<li><a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a></li>
<li><a href="https://docs.python.org/3/library/sqlite3.html">Sqlite3</a>  轻量级sql数据库(python内置库)</li>
<li><a href="https://github.com/mongodb/mongo-python-driver">pymongo</a> 非关系型MongoDB库</li>
<li><a href="https://github.com/redis/redis">redis</a>  Redis数据库</li>
<li><a href="https://github.com/py2neo-org/py2neo">py2neo</a>  对接Neo4J数据库的python库</li>
<li><a href="https://github.com/simonw/datasette">datasette</a> 探索和发布数据的开源多功能工具，主要面向数据记者、博物馆馆长、档案管理员、地方政府、科学家、研究人员以及任何拥有希望与世界分享数据的人。</li>
</ul>
<br>
<h2 id="数据分析">数据分析</h2>
<ul>
<li><a href="https://github.com/pandas-dev/pandas">pandas</a> 必须Python数据分析库，读取文件、预处理数据、分析、存储</li>
<li><a href="https://github.com/garrettj403/SciencePlots">SciencePlots</a>  科学绘图的Python工具包</li>
<li><a href="https://github.com/orchest/orchest">Orchest</a> 创建数据科学工作量的工具。Orchest是一款Web数据科学工具，可在文件系统上运行</li>
<li><a href="https://github.com/statsmodels/statsmodels">statsmodels</a> Python的统计计量统计库</li>
<li><a href="https://github.com/bashtage/linearmodels">linearmodels</a> 添加线性模型，包括statsmodels中缺少的工具变量和面板数据模型。</li>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a> 快速搭建本地数据分析类Web应用</li>
<li><a href="https://github.com/modin-project/modin">modin</a> pandas加速库，接口语法与pandas高度一致</li>
<li><a href="https://github.com/dask/dask">dask</a>  pandas加速库，接口语法与pandas高度一致</li>
<li><a href="https://github.com/has2k1/plydata%5D">plydata</a>  pandas管道语法库</li>
<li><a href="https://github.com/networkx/networkx">networkx</a> 社交网络分析库</li>
</ul>
<br>
<p>​</p>
<h2 id="机器学习">机器学习</h2>
<ul>
<li><a href="https://github.com/VowpalWabbit/vowpal_wabbit">vowpal wabbit</a>  机器学习的前沿库</li>
<li><a href="https://github.com/scikit-learn/scikit-learn">scikit-learn</a> 机器学习必学库，支持有监督、无监督多种算法，含文本分析功能</li>
<li><a href="https://github.com/biolab/orange3">Orange3</a> 点击操作的机器学习分析<strong>软件</strong>， 可文本分析</li>
<li><a href="https://github.com/doccano/doccano">doccano</a> 文本数据标注工具</li>
<li><a href="https://github.com/heartexlabs/label-studio">label-studio</a>  最牛掰的文本数据标注工具</li>
</ul>
<h2 id="可视化">可视化</h2>
<ul>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a> 快速搭建本地数据分析类Web应用</li>
<li><a href="https://github.com/matplotlib/matplotlib">matplotlib</a>  Python中最万能绘图库，很少有ta画不出来的图；但语法较难、静态图</li>
<li><a href="https://github.com/nschloe/matplotx">matplotx</a>  Matplotlib扩展库，可以提供更多样式，简化样式设定</li>
<li><a href="https://github.com/mwaskom/seaborn">seaborn</a> 基于matplotlib开发的简化版可视化库， 一般的图可以用ta绘制； 高度定制仍需要结合matplotlib进行样式定制；静态图</li>
<li><a href="https://github.com/has2k1/plotnine">plotnine</a>  ggplot2语法的Python可视化库， 可与<a href="https://github.com/has2k1/plydata%5D">plydata</a> 库结合使用</li>
<li><a href="https://github.com/pyecharts/pyecharts">pyecharts</a> 国人开发并封装的动态可视化图绘制库; 中文文档</li>
<li><a href="https://github.com/plotly/plotly.py">plotly</a> 动态可视化图绘制库</li>
<li><a href="https://github.com/bokeh/bokeh">bokeh</a> 动态可视化图绘制库</li>
<li><a href="https://github.com/garrettj403/SciencePlots">SciencePlots</a>  科研论文绘图，基于matplotlib</li>
<li><a href="https://github.com/datapane/datapane">datapane</a>  数据分析报告生成</li>
<li><a href="https://github.com/apache/superset">superset</a> 开源商务智能分析可视化库</li>
<li><a href="https://github.com/alfonsosemeraro/pyplutchik">pyplutchik</a> 文本可视化，可将文本情感信息按照plutchik轮样式可视化</li>
</ul>
<br> 
<h2 id="文本分析">文本分析</h2>
<ul>
<li><a href="https://github.com/nltk/nltk">nltk</a> 自然语言分析套件，对中文不友好</li>
<li><a href="https://github.com/shaypal5/skift">skift</a>  使用scikit-learn语法封装了fastText功能的包。</li>
<li><a href="https://github.com/andrewtavis/kwx">kwx</a>  Python 中基于 BERT、LDA 和 TFIDF 的关键字提取</li>
<li><a href="https://github.com/explosion/spaCy">spacy</a> 工业级自然语言模型库，支持中文</li>
<li><a href="https://github.com/fxsjy/jieba">jieba</a>  中文文本分词库</li>
<li><a href="https://github.com/isnowfy/snownlp">snownlp</a> 中文情感分析库</li>
<li><a href="https://github.com/RaRe-Technologies/gensim">gensim</a>  最好用、最全的话题模型</li>
<li><a href="https://github.com/hidadeng/cntext">cntext</a> 中文文本分析库，含词频统计、情感分析、可视化</li>
<li><a href="https://github.com/heartexlabs/label-studio">label-studio</a>  最牛掰的文本数据标注工具</li>
<li><a href="https://github.com/doccano/doccano">doccano</a> 文本数据标注工具</li>
<li><a href="https://github.com/shivam5992/textstat">textstat</a>  文本可读性计算包(算法全，但仅支持英文)</li>
<li><a href="https://github.com/jbesomi/texthero">texthero</a> 文本预处理、展示、可视化库，仅支持英文</li>
<li><a href="https://github.com/textpipe/textpipe">textpipe</a> 文本分析流水线</li>
<li><a href="https://github.com/davidmcclure/textplot">textplot</a> 词语网络图</li>
<li><a href="https://github.com/ryanjgallagher/shifterator">shifterator</a> 通过让您查看单词使用方式的变化，单词移位可以帮助您进行从根本上更可解释的情感，熵和散度分析。量化不同单词对两个文本差异做出的贡献，以及它们如何发挥作用。</li>
<li><a href="https://github.com/vi3k6i5/GuidedLDA">GuidedLDA</a> 半监督LDA主题模型</li>
<li><a href="https://github.com/gregversteeg/corex_topic">corex_topic</a>  层次非监督、半监督话题模型</li>
<li><a href="https://github.com/MaartenGr/BERTopic">BERTopic</a> BERT话题模型</li>
<li><a href="https://github.com/RasaHQ/whatlies">whatlies</a>  词向量可视化</li>
<li><a href="https://github.com/HLasse/TextDescriptives">TextDescriptives</a> 文本描述性统计,不支持中文</li>
<li><a href="https://github.com/hidadeng/pdfdocx">pdfdocx</a> pdf、docx读取库</li>
<li><a href="https://github.com/ocrmypdf/OCRmyPDF">OCRmyPDF</a>    为<strong>扫描的 PDF</strong> 文件添加了 OCR 文本层，允许对其进行搜索</li>
<li><a href="https://github.com/ddangelov/Top2Vec">Top2Vec</a>  主题建模和语义搜索的算法, 自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。 适用于短文本;</li>
<li><a href="https://github.com/jboynyc/textnets">TextNet</a>  textnet将文档集表示为文档和单词的网络,为文本分析与可视化提供了新的可能性。</li>
<li><a href="https://github.com/remram44/taguette">taguette</a> 免费开源的定性研究工具</li>
</ul>
<br>
<h2 id="gui窗体软件开发">GUI窗体软件开发</h2>
<ul>
<li><a href="https://wiki.python.org/moin/TkInter">tkinter</a> Python内置的gui库</li>
<li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a> 最简单的gui开发库</li>
<li><a href="https://doc.qt.io/qt.html#qtforpython">pyqt5、pyside</a> 最牛掰的gui软件开发库</li>
<li><a href="https://github.com/hoffstadt/DearPyGui">DearPyGui</a>  易于使用且功能强大的Python GUI框架，它提供了DearImGui的包装。</li>
<li><a href="https://github.com/pywebio/PyWebIO">PyWebIO</a>  快速构建 Web 应用的 Python 工具</li>
<li><a href="https://github.com/kivy/kivy">kivy</a>  star数高达14k的gui库
<br></li>
</ul>
<h2 id="自动化办公">自动化办公</h2>
<ul>
<li><a href="https://github.com/zhangyunhao116/zmail">zmail</a> 自动化收发邮件管理库</li>
<li><a href="https://github.com/pywinauto/pywinauto">pywinauto</a> Windows电脑自动化Python库</li>
<li><a href="https://github.com/Kozea/WeasyPrint">WeasyPrint</a>  自动化生产pdf报告</li>
<li><a href="https://github.com/jorisschellekens/ptext-release"></a> 对PDF文件读取、更改、添加信息</li>
<li><a href="https://github.com/SeleniumHQ/selenium/">selenium</a> 浏览器自动化框架，可以自动化点击浏览器，完成某些工作</li>
<li><a href="https://github.com/mkdocs/mkdocs/">mkdocx</a></li>
<li><a href="https://github.com/python-openxml/python-docx">python-docx</a>  创建、修改docx文件库</li>
<li><a href="https://github.com/scanny/python-pptx">python-ppt</a>  创建、修改ppt文件库</li>
<li><a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a> xlsx文件库</li>
<li><a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>  不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。</li>
</ul>
<br>
<h2 id="其他">其他</h2>
<ul>
<li><a href="https://github.com/hiresearch/hiresearch.github.io">hiresearch</a> 丢弃繁杂收藏夹，定义简洁办公的浏览器首页</li>
<li><a href="https://github.com/hakimel/reveal.js">reveal.js</a> 最流行的幻灯片</li>
<li><a href="https://github.com/slidevjs/slidev">slidev</a> 编程人员使用的幻灯片</li>
<li><a href="https://github.com/mkdocs/mkdocs">mkdocs</a> 制作文档网站</li>
<li><a href="https://github.com/mockoon/cli">mockoon</a>  帮我们快速搭建 API 服务图形化界面工具</li>
<li><a href="https://www.codepng.app/">codepng</a>  把代码转为美观的截图的website</li>
<li><a href="https://github.com/amphibian-dev/toad">toad</a> 金融风险评分卡；覆盖了建模全流程，从 EDA、特征工程、特征筛选 到 模型验证和评分卡转化</li>
<li><a href="https://github.com/salomonelli/best-resume-ever">best-resume-ever</a> Latex项目， 基于 Web 的简历模板，可以生成网页简历，然后用浏览器打印成 PDF 文件。</li>
<li><a href="https://github.com/vivjay30/pychorus">pychorus</a> 将音频文件中的高潮部分剪辑出来的python包</li>
<li><a href="https://github.com/imageio/imageio">imageio</a>  用于读取和写入图像数据的 Python 库；</li>
<li><a href="https://github.com/Textualize/rich">rich</a> 让命令行输出更美观简洁的Python包</li>
<li><a href="https://github.com/Textualize/textual">textual</a> rich作者开发的<strong>文本用户界面</strong>用户</li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python与文化分析入门</title>
      <link>https://textdata.cn/blog/culture_analysis/</link>
      <pubDate>Fri, 31 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/culture_analysis/</guid>
      <description> 如何使用 Python 来研究文化领域的数据，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。这些材料最初是为了支持“**文化分析简介：数据、计算和文化**”，这是康奈尔大学和华盛顿大学教授的本科课程。</description>
      <content:encoded><![CDATA[<h2 id="introduction-to-cultural-analytics--python">Introduction to Cultural Analytics &amp; Python</h2>
<p>Designed by <a href="https://melaniewalsh.org/">Melanie Walsh</a> // Powered by <a href="https://jupyterbook.org/">Jupyter Book</a></p>
<p>该项目仓库托管了在线教科书 <strong>Introduction to Cultural Analytics &amp; Python</strong> 里的代码，主要面向人文社科人群设计的Python编程语言书</p>
<p>这本书展示了如何使用 Python 来研究文化领域的数据，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。</p>
<p>这些材料最初是为了支持“<strong>文化分析简介：数据、计算和文化</strong>”，这是康奈尔大学和华盛顿大学教授的本科课程。</p>
<br>
## 章节列表
## 数据集
## 命令行
<br>
<h2 id="python语法">Python语法</h2>
<ul>
<li>安装Python</li>
<li>如何使用Jupyter Notebook</li>
<li>变量</li>
<li>数据类型</li>
<li>字符串方法</li>
<li>比较逻辑运算</li>
<li>循环</li>
<li>函数</li>
<li>文件编码</li>
<li>常见Python错误</li>
<li>Jupyter使用技巧
<br></li>
</ul>
<h2 id="数据分析">数据分析</h2>
<ul>
<li>Pandas基本操作</li>
<li>合并数据
<br></li>
</ul>
<h2 id="数据采集">数据采集</h2>
<ul>
<li>法律风险</li>
<li>网络爬虫</li>
<li>API</li>
<li>案例-采集歌词</li>
<li>案例-twitter</li>
<li>案例-Reddit
<br></li>
</ul>
<h2 id="文本分析">文本分析</h2>
<ul>
<li>TF-IDf</li>
<li>情感分析</li>
<li>话题模型</li>
<li>命名实体识别</li>
<li>词性
<br></li>
</ul>
<h2 id="网络分析">网络分析</h2>
<ul>
<li>bokeh网络可视化
<br></li>
</ul>
<h2 id="资料下载">资料下载</h2>
<p><a href="https://github.com/hiDaDeng/Intro-Cultural-Analytics/archive/refs/heads/master.zip">https://github.com/hiDaDeng/Intro-Cultural-Analytics/archive/refs/heads/master.zip</a></p>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>免费社科类Python编程课程列表</title>
      <link>https://textdata.cn/blog/course_recommendation_about_social_science/</link>
      <pubDate>Fri, 31 Dec 2021 11:43:10 +0600</pubDate>
      
      <guid>/blog/course_recommendation_about_social_science/</guid>
      <description>&lt;h2 id=&#34;文化分析python&#34;&gt;文化分析&amp;amp;Python&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html&#34;&gt;https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本书对应于康奈尔大学和华盛顿大学教授的本科课程《&lt;strong&gt;文化分析简介：数据、计算和文化&lt;/strong&gt;》，主要介绍了&lt;strong&gt;如何使用 Python 来研究文化材料&lt;/strong&gt;，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。&lt;/p&gt;
&lt;p&gt;这些材料最初是为了支持“”，这是。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;什么是文化分析？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文化分析是用计算方法研究文化。 文化是一个广义的术语，包括文学、历史、政治、艺术、音乐、社交媒体等等。 文化分析是数字人文和信息科学等领域不断发展的研究领域。&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/culturePython.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;h2 id=&#34;计算和推理思维数据科学基础&#34;&gt;计算和推理思维:数据科学基础&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Computational and Inferential Thinking: The Foundations of Data Science&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://inferentialthinking.com/chapters/intro.html&#34;&gt;https://inferentialthinking.com/chapters/intro.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;加州大学伯克利分校数据科学基础课程结合了三个观点：&lt;strong&gt;推理思维、计算思维和现实世界的相关性&lt;/strong&gt;。 给定来自某些现实世界现象的数据，如何分析该数据以了解该现象？ 该课程教授计算机编程和统计推断方面的关键概念和技能，并结合对现实世界数据集的动手分析，包括经济数据、文档集、地理数据和社交网络。 它深入探讨了围绕数据分析的社会问题，例如隐私和设计。该课程是与伯克利数据科学部合作提供的。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;使用-pysal-和-pydata-堆栈的地理数据科学&#34;&gt;使用 PySAL 和 PyData 堆栈的地理数据科学¶&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://geographicdata.science/book/intro.html&#34;&gt;https://geographicdata.science/book/intro.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地理数据无处不在。总体而言，社会过程、物理环境和个人行为在其地理模式、结构和间隔方面表现出惊人的规律性&lt;/strong&gt;。随着与这些系统相关的数据在范围、强度和深度上的增长，从位置等常见地理属性中提取有意义的见解变得更加重要，而且如何利用标准数据科学中不太常见的拓扑属性（例如关系）也变得更加重要。&lt;/p&gt;
&lt;p&gt;本书介绍了一种思考地理挑战的新方法， 如&lt;strong&gt;空间自相关(Spatial Autocorrelation)、点模式分析(Point Pattern Analysis)&lt;/strong&gt;。使用地理分析和计算推理，它向读者展示了如何解开隐藏在数据中的新见解。本书围绕 Python 中可用的优秀数据科学环境构建，提供示例和工作分析供读者复制、适应、扩展和改进。&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/GeoPython.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;h2 id=&#34;心理科学python编程&#34;&gt;心理科学Python编程&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://lukas-snoek.com/introPy/index.html&#34;&gt;https://lukas-snoek.com/introPy/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阿姆斯特丹大学为心理学硕士研究生开设的，是为期 4 周的“心理科学编程”课程的一部分，从两周的 R 编程开始，之后学生可以在剩下的两周内选择两个主题之一：高级 R 或 Python/PsychoPy（本课程） 。因此，本 Python/PsychoPy 课程假设学生熟悉基本的编程概念（例如条件、循环和函数）。 在本课程的第 1 周，我们将深入研究 Python 特定的主题（至少与 R 相比），例如面向对象编程和最重要的数据处理包（包括 pandas、numpy 和 matplotlib）。 在第 2 周，我们将讨论如何使用 PsychoPy 软件包通过其图形界面 (Builder) 和 Python 界面 (Coder) 创建实验。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;openpifpaf用于语义关键点检测和时空关联的复合字段&#34;&gt;OpenPifPaf：用于语义关键点检测和时空关联的复合字段&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenPifPaf: Composite Fields for Semantic Keypoint Detection and Spatio-Temporal Association&lt;/li&gt;
&lt;/ul&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/openpifpaf.jpeg&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;h2 id=&#34;经济和金融领域的-python-编程&#34;&gt;经济和金融领域的 Python 编程&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://quantecon.org/python-lectures/&#34;&gt;https://quantecon.org/python-lectures/&lt;/a&gt;&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/quanecon.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://python.quantecon.org/intro.html&#34;&gt;https://python.quantecon.org/intro.html&lt;/a&gt;&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/quanecon2.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;h2 id=&#34;信用卡欺诈机器学习识别&#34;&gt;信用卡欺诈机器学习识别&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html&#34;&gt;https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML 技术在支付卡欺诈检测系统中的集成大大提高了它们更有效地检测欺诈的能力，并协助支付处理中介识别非法交易。尽管近年来欺诈交易的数量不断增加，但欺诈造成的损失百分比在 2016 年开始下降，这是与 ML 解决方案越来越多地采用相关的反向趋势。 [rep19]。除了帮助节省资金外，实施基于机器学习的欺诈检测系统如今已成为机构和公司赢得客户信任的必要条件。&lt;/p&gt;
&lt;p&gt;在这个用于卡欺诈检测的机器学习新领域中，一个被广泛认可和反复出现的问题是关于该主题 [LJ20,PP19,PL18,ZAM+16] 发表的大多数研究工作&lt;strong&gt;缺乏可重复性&lt;/strong&gt;。一方面，支付卡交易数据缺乏可用性，出于保密原因不能公开共享。另一方面，作者没有做出足够的努力来提供他们的代码并使他们的结果可重现。&lt;/p&gt;
&lt;p&gt;本书所介绍的一些技术，例如处理&lt;strong&gt;类别不平衡、模型集成或概念漂移&lt;/strong&gt;的技术，被广泛认为是信用卡欺诈检测系统设计的重要组成部分。我们还涵盖了我们认为值得更多关注的记录较少的主题。其中包括建模过程的特定设计方面，例如性能指标和验证策略的选择，以及有前景的预处理和学习策略，例如特征嵌入、主动学习和迁移学习。虽然本书侧重于支付卡欺诈，但我们相信本书中介绍的大多数技术和讨论对从事更广泛的欺诈检测主题的其他从业者有用。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;音乐分类超越监督学习走向现实世界的应用&#34;&gt;音乐分类：超越监督学习，走向现实世界的应用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://music-classification.github.io/tutorial/landing-page.html&#34;&gt;https://music-classification.github.io/tutorial/landing-page.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;音乐分类是一项&lt;strong&gt;音乐信息检索&lt;/strong&gt; (MIR) 任务，其目标是对音乐语义的计算理解。 对于给定的歌曲，分类器预测相关的音乐属性。 根据任务定义，分类任务几乎是无限的——从流派、情绪和乐器到更广泛的概念，包括音乐相似性和音乐偏好。 检索到的信息可以进一步用于许多应用，包括音乐推荐、策展、播放列表生成和语义搜索。&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;img/musicclassification.png&#34; width=&#34;100%&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="文化分析python">文化分析&amp;Python</h2>
<p><a href="https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html">https://melaniewalsh.github.io/Intro-Cultural-Analytics/welcome.html</a></p>
<p>本书对应于康奈尔大学和华盛顿大学教授的本科课程《<strong>文化分析简介：数据、计算和文化</strong>》，主要介绍了<strong>如何使用 Python 来研究文化材料</strong>，例如歌词、短篇小说、报纸文章、推文、Reddit 帖子和电影剧本。 它还介绍了网络抓取、API、主题建模、命名实体识别 (NER)、网络分析和映射等计算方法。</p>
<p>这些材料最初是为了支持“”，这是。</p>
<ul>
<li><strong>什么是文化分析？</strong></li>
</ul>
<p>文化分析是用计算方法研究文化。 文化是一个广义的术语，包括文学、历史、政治、艺术、音乐、社交媒体等等。 文化分析是数字人文和信息科学等领域不断发展的研究领域。</p>

<figure >
    
        <img src="img/culturePython.png" width="100%" />
    
    
</figure>

<br>
<h2 id="计算和推理思维数据科学基础">计算和推理思维:数据科学基础</h2>
<blockquote>
<p>Computational and Inferential Thinking: The Foundations of Data Science</p>
</blockquote>
<p><a href="https://inferentialthinking.com/chapters/intro.html">https://inferentialthinking.com/chapters/intro.html</a></p>
<p>加州大学伯克利分校数据科学基础课程结合了三个观点：<strong>推理思维、计算思维和现实世界的相关性</strong>。 给定来自某些现实世界现象的数据，如何分析该数据以了解该现象？ 该课程教授计算机编程和统计推断方面的关键概念和技能，并结合对现实世界数据集的动手分析，包括经济数据、文档集、地理数据和社交网络。 它深入探讨了围绕数据分析的社会问题，例如隐私和设计。该课程是与伯克利数据科学部合作提供的。</p>
<br>
<h2 id="使用-pysal-和-pydata-堆栈的地理数据科学">使用 PySAL 和 PyData 堆栈的地理数据科学¶</h2>
<p><a href="https://geographicdata.science/book/intro.html">https://geographicdata.science/book/intro.html</a></p>
<p><strong>地理数据无处不在。总体而言，社会过程、物理环境和个人行为在其地理模式、结构和间隔方面表现出惊人的规律性</strong>。随着与这些系统相关的数据在范围、强度和深度上的增长，从位置等常见地理属性中提取有意义的见解变得更加重要，而且如何利用标准数据科学中不太常见的拓扑属性（例如关系）也变得更加重要。</p>
<p>本书介绍了一种思考地理挑战的新方法， 如<strong>空间自相关(Spatial Autocorrelation)、点模式分析(Point Pattern Analysis)</strong>。使用地理分析和计算推理，它向读者展示了如何解开隐藏在数据中的新见解。本书围绕 Python 中可用的优秀数据科学环境构建，提供示例和工作分析供读者复制、适应、扩展和改进。</p>

<figure >
    
        <img src="img/GeoPython.png" width="100%" />
    
    
</figure>

<br>
<h2 id="心理科学python编程">心理科学Python编程</h2>
<p><a href="https://lukas-snoek.com/introPy/index.html">https://lukas-snoek.com/introPy/index.html</a></p>
<p>阿姆斯特丹大学为心理学硕士研究生开设的，是为期 4 周的“心理科学编程”课程的一部分，从两周的 R 编程开始，之后学生可以在剩下的两周内选择两个主题之一：高级 R 或 Python/PsychoPy（本课程） 。因此，本 Python/PsychoPy 课程假设学生熟悉基本的编程概念（例如条件、循环和函数）。 在本课程的第 1 周，我们将深入研究 Python 特定的主题（至少与 R 相比），例如面向对象编程和最重要的数据处理包（包括 pandas、numpy 和 matplotlib）。 在第 2 周，我们将讨论如何使用 PsychoPy 软件包通过其图形界面 (Builder) 和 Python 界面 (Coder) 创建实验。</p>
<br>
<h2 id="openpifpaf用于语义关键点检测和时空关联的复合字段">OpenPifPaf：用于语义关键点检测和时空关联的复合字段</h2>
<ul>
<li>OpenPifPaf: Composite Fields for Semantic Keypoint Detection and Spatio-Temporal Association</li>
</ul>

<figure >
    
        <img src="img/openpifpaf.jpeg" width="100%" />
    
    
</figure>

<br>
<h2 id="经济和金融领域的-python-编程">经济和金融领域的 Python 编程</h2>
<p><a href="https://quantecon.org/python-lectures/">https://quantecon.org/python-lectures/</a></p>

<figure >
    
        <img src="img/quanecon.png" width="100%" />
    
    
</figure>

<p><a href="https://python.quantecon.org/intro.html">https://python.quantecon.org/intro.html</a></p>

<figure >
    
        <img src="img/quanecon2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="信用卡欺诈机器学习识别">信用卡欺诈机器学习识别</h2>
<p><a href="https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html">https://fraud-detection-handbook.github.io/fraud-detection-handbook/Foreword.html</a></p>
<p>ML 技术在支付卡欺诈检测系统中的集成大大提高了它们更有效地检测欺诈的能力，并协助支付处理中介识别非法交易。尽管近年来欺诈交易的数量不断增加，但欺诈造成的损失百分比在 2016 年开始下降，这是与 ML 解决方案越来越多地采用相关的反向趋势。 [rep19]。除了帮助节省资金外，实施基于机器学习的欺诈检测系统如今已成为机构和公司赢得客户信任的必要条件。</p>
<p>在这个用于卡欺诈检测的机器学习新领域中，一个被广泛认可和反复出现的问题是关于该主题 [LJ20,PP19,PL18,ZAM+16] 发表的大多数研究工作<strong>缺乏可重复性</strong>。一方面，支付卡交易数据缺乏可用性，出于保密原因不能公开共享。另一方面，作者没有做出足够的努力来提供他们的代码并使他们的结果可重现。</p>
<p>本书所介绍的一些技术，例如处理<strong>类别不平衡、模型集成或概念漂移</strong>的技术，被广泛认为是信用卡欺诈检测系统设计的重要组成部分。我们还涵盖了我们认为值得更多关注的记录较少的主题。其中包括建模过程的特定设计方面，例如性能指标和验证策略的选择，以及有前景的预处理和学习策略，例如特征嵌入、主动学习和迁移学习。虽然本书侧重于支付卡欺诈，但我们相信本书中介绍的大多数技术和讨论对从事更广泛的欺诈检测主题的其他从业者有用。</p>
<br>
<h2 id="音乐分类超越监督学习走向现实世界的应用">音乐分类：超越监督学习，走向现实世界的应用</h2>
<p><a href="https://music-classification.github.io/tutorial/landing-page.html">https://music-classification.github.io/tutorial/landing-page.html</a></p>
<p>音乐分类是一项<strong>音乐信息检索</strong> (MIR) 任务，其目标是对音乐语义的计算理解。 对于给定的歌曲，分类器预测相关的音乐属性。 根据任务定义，分类任务几乎是无限的——从流派、情绪和乐器到更广泛的概念，包括音乐相似性和音乐偏好。 检索到的信息可以进一步用于许多应用，包括音乐推荐、策展、播放列表生成和语义搜索。</p>

<figure >
    
        <img src="img/musicclassification.png" width="100%" />
    
    
</figure>

<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>文本数据: 展开、过滤和分块</title>
      <link>https://textdata.cn/blog/text_features_tutorial/</link>
      <pubDate>Tue, 28 Dec 2021 10:43:10 +0600</pubDate>
      
      <guid>/blog/text_features_tutorial/</guid>
      <description>TF-IDF刻画参与者信息的“新且熟悉” ,构建参与者文化网络</description>
      <content:encoded><![CDATA[<p>前段时间发现apachecn在github上翻译了一本和特征工程相关的书籍：《Feature Engineering for Machine Learning》，中文名为《面向机器学习的特征工程》。</p>
<p><a href="Feature_Engineering_for_Machine_Learning.pdf">Feature_Engineering_for_Machine_Learning.pdf</a></p>
<h2 id="三文本数据-展开过滤和分块httpfe4mlapachecnorgdocs3文本数据id三文本数据-展开过滤和分块"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E4%B8%89%E3%80%81%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE-%E5%B1%95%E5%BC%80%E3%80%81%E8%BF%87%E6%BB%A4%E5%92%8C%E5%88%86%E5%9D%97">三、文本数据: 展开、过滤和分块</a></h2>
<blockquote>
<p>译者：<a href="https://github.com/kkejili">@kkejili</a></p>
<p>校对者：<a href="https://github.com/KyrieHee">@HeYun</a></p>
</blockquote>
<p>如果让你来设计一个算法来分析以下段落，你会怎么做？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Emma knocked on the door. No answer. She knocked again and waited. There was a large maple tree next to the house. Emma looked up the tree and saw a giant raven perched at the treetop. Under the afternoon sun, the raven gleamed magnificently. Its beak was hard and pointed, its claws sharp and strong. It looked regal and imposing. It reigned the tree it stood on. The raven was looking straight at Emma with its beady black eyes. Emma felt slightly intimidated. She took a step back from the door and tentatively said, “hello?” 复制ErrorOK!
</code></pre></div><p>该段包含很多信息。我们知道它谈到了到一个名叫Emma的人和一只乌鸦。这里有一座房子和一棵树，艾玛正想进屋，却看到了乌鸦。这只华丽的乌鸦注意到艾玛，她有点害怕，但正在尝试交流。</p>
<p>那么，这些信息的哪些部分是我们应该提取的显着特征？首先，提取主要角色艾玛和乌鸦的名字似乎是个好主意。接下来，注意房子，门和树的布置可能也很好。关于乌鸦的描述呢？Emma的行为呢，敲门，退后一步，打招呼呢？</p>
<p>本章介绍文本特征工程的基础知识。我们从词袋（bags of words）开始，这是基于字数统计的最简单的文本功能。一个非常相关的变换是 tf-idf，它本质上是一种特征缩放技术。它将被我在（下一篇）章节进行全面讨论。本章首先讨论文本特征提取，然后讨论如何过滤和清洗这些特征。</p>
<br>
<h2 id="bag-of-x把自然文本变成平面向量httpfe4mlapachecnorgdocs3文本数据idbag-of-x把自然文本变成平面向量"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=bag-of-x%EF%BC%9A%E6%8A%8A%E8%87%AA%E7%84%B6%E6%96%87%E6%9C%AC%E5%8F%98%E6%88%90%E5%B9%B3%E9%9D%A2%E5%90%91%E9%87%8F">Bag of X：把自然文本变成平面向量</a></h2>
<p>无论是构建机器学习模型还是特征工程，其结果应该是通俗易懂的。简单的事情很容易尝试，可解释的特征和模型相比于复杂的更易于调试。简单和可解释的功能并不总是会得到最精确的模型。但从简单开始就是一个好主意，仅在绝对必要时我们可以增加其复杂性。</p>
<p>对于文本数据，我们可以从称为 BOW 的字数统计开始。字数统计表中并没有特别费力来寻找<code>&quot;Emma&quot;</code>或乌鸦这样有趣的实体。但是这两个词在该段落中被重复提到，并且它们在这里的计数比诸如<code>&quot;hello&quot;</code>之类的随机词更高。对于此类简单的文档分类任务，字数统计通常比较适用。它也可用于信息检索，其目标是检索与输入文本相关的文档集。这两个任务都很好解释词级特征，因为某些特定词的存在可能是本文档主题内容的重要指标。</p>
<br>
<h2 id="词袋httpfe4mlapachecnorgdocs3文本数据id词袋"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E8%AF%8D%E8%A2%8B">词袋</a></h2>
<p>在词袋特征中，文本文档被转换成向量。（向量只是 n 个数字的集合。）向量包含词汇表中每个单词可能出现的数目。 如果单词<code>&quot;aardvark&quot;</code>在文档中出现三次，则该特征向量在与该单词对应的位置上的计数为 3。 如果词汇表中的单词没有出现在文档中，则计数为零。 例如，“这是一只小狗，它是非常可爱”的句子具有如图所示的 BOW 表示</p>

<figure >
    
        <img src="img/3-1.png" width="100%" />
    
    
</figure>

<p>图 3-1 转换词成向量描述图</p>
<p>BOW 将文本文档转换为平面向量。 它是“平面的”，因为它不包含任何原始的文本结构。 原文是一系列词语。但是词袋向量并没有序列；它只是记得每个单词在文本中出现多少次。 它不代表任何词层次结构的概念。 例如，“动物”的概念包括“狗”，“猫”，“乌鸦”等。但是在一个词袋表示中，这些词都是矢量的相同元素。</p>

<figure >
    
        <img src="img/3-2.png" width="100%" />
    
    
</figure>

<p>图 3-2 两个等效的词向量，向量中单词的排序不重要，只要它在数据集中的个数和文档中出现数量是一致的。</p>
<p>重要的是特征空间中数据的几何形状。 在一个词袋矢量中，每个单词成为矢量的一个维度。如果词汇表中有 n 个单词，则文档将成为n维空间中的一个点。 很难想象二维或三维以外的任何物体的几何形状，所以我们必须使用我们的想象力。 图3-3显示了我们的例句在对应于“小狗”和“可爱”两个维度的特征空间中的样子。</p>

<figure >
    
        <img src="img/3-3.png" width="100%" />
    
    
</figure>

<p>图 3-3 特征空间中文本文档的图示</p>

<figure >
    
        <img src="img/3-4.png" width="100%" />
    
    
</figure>

<p>图 3-4 三维特征空间</p>
<p>图 3-3 和图 3-4 描绘了特征空间中的数据向量。 坐标轴表示单个单词，它们是词袋表示下的特征，空间中的点表示数据点（文本文档）。 有时在数据空间中查看特征向量也是有益的。 特征向量包含每个数据点中特征的值。 轴表示单个数据点和点表示特征向量。 图 3-5 展示了一个例子。 通过对文本文档进行词袋特征化，一个特征是一个词，一个特征向量包含每个文档中这个词的计数。 这样，一个单词被表示为一个“一个词向量”。正如我们将在第 4 章中看到的那样，这些文档词向量来自词袋向量的转置矩阵。</p>

<figure >
    
        <img src="img/3-5.png" width="100%" />
    
    
</figure>

<br>
<h2 id="bag-of-n-gramhttpfe4mlapachecnorgdocs3文本数据idbag-of-n-gram"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=bag-of-n-gram">Bag-of-N-gram</a></h2>
<p>Bag-of-N-gram 或者 bag-of-ngram 是 BOW 的自然延伸。 n-gram 是 n 个有序的记号（token）。一个词基本上是一个 1-gram，也被称为一元模型。当它被标记后，计数机制可以将单个词进行计数，或将重叠序列计数为 n-gram。例如，<code>&quot;Emma knocked on the door&quot;</code>这句话会产生 n-gram，如<code>&quot;Emma knocked&quot;</code>，<code>&quot;knocked on&quot;</code>，<code>&quot;on the&quot;</code>，<code>&quot;the door&quot;</code>。 N-gram 保留了文本的更多原始序列结构，故 bag-of-ngram可以提供更多信息。但是，这是有代价的。理论上，用 k 个独特的词，可能有 k 个独立的 2-gram（也称为 bigram）。在实践中，并不是那么多，因为不是每个单词后都可以跟一个单词。尽管如此，通常有更多不同的 n-gram（n &gt; 1）比单词更多。这意味着词袋会更大并且有稀疏的特征空间。这也意味着 n-gram 计算，存储和建模的成本会变高。n 越大，信息越丰富，成本越高。</p>
<p>为了说明随着 n 增加 n-gram 的数量如何增加，我们来计算纽约时报文章数据集上的 n-gram。我们使用 Pandas 和 scikit-learn 中的<code>CountVectorizer</code>转换器来计算前 10,000 条评论的 n-gram。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pandas</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">CountVectorizer</span> 
<span class="c1"># Load the first 10,000 reviews </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/yelp/v6/yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_review.json&#39;</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">js</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span> 
<span class="o">...</span> <span class="n">js</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()))</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">review_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">js</span><span class="p">)</span> 
<span class="c1"># Create feature transformers for unigram, bigram, and trigram. </span>
<span class="c1"># The default ignores single-character words, which is useful in practice because it trims </span>
<span class="c1"># uninformative words. But we explicitly include them in this example for illustration purposes. </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bow_converter</span> <span class="o">=</span> <span class="n">CountVectorizer</span><span class="p">(</span><span class="n">token_pattern</span><span class="o">=</span><span class="s1">&#39;(?u)</span><span class="se">\\</span><span class="s1">b</span><span class="se">\\</span><span class="s1">w+</span><span class="se">\\</span><span class="s1">b&#39;</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">bigram_converter</span> <span class="o">=</span> <span class="n">CountVectorizer</span><span class="p">(</span><span class="n">ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">token_pattern</span><span class="o">=</span><span class="s1">&#39;(?u)</span><span class="se">\\</span><span class="s1">b</span><span class="se">\\</span><span class="s1">w+</span><span class="se">\\</span><span class="s1">b&#39;</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">trigram_converter</span> <span class="o">=</span> <span class="n">CountVectorizer</span><span class="p">(</span><span class="n">ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">token_pattern</span><span class="o">=</span><span class="s1">&#39;(?u)</span><span class="se">\\</span><span class="s1">b</span><span class="se">\\</span><span class="s1">w+</span><span class="se">\\</span><span class="s1">b&#39;</span><span class="p">)</span> 
<span class="c1"># Fit the transformers and look at vocabulary size </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bow_converter</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">words</span> <span class="o">=</span> <span class="n">bow_converter</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">bigram_converter</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">bigram</span> <span class="o">=</span> <span class="n">bigram_converter</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">trigram_converter</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">trigram</span> <span class="o">=</span> <span class="n">trigram_converter</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">bigram</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">trigram</span><span class="p">))</span> 
<span class="mi">26047</span> <span class="mi">346301</span> <span class="mi">847545</span> 
<span class="c1"># Sneak a peek at the ngram themselves</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">words</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span> 
<span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;00&#39;</span><span class="p">,</span> <span class="s1">&#39;000&#39;</span><span class="p">,</span> <span class="s1">&#39;0002&#39;</span><span class="p">,</span> <span class="s1">&#39;00am&#39;</span><span class="p">,</span> <span class="s1">&#39;00ish&#39;</span><span class="p">,</span> <span class="s1">&#39;00pm&#39;</span><span class="p">,</span> <span class="s1">&#39;01&#39;</span><span class="p">,</span> <span class="s1">&#39;01am&#39;</span><span class="p">,</span> <span class="s1">&#39;02&#39;</span><span class="p">]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">bigram</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">:]</span> 
<span class="p">[</span><span class="s1">&#39;zucchinis at&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zucchinis took&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zucchinis we&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zuma over&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zuppa di&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zuppa toscana&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zuppe di&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zurich and&#39;</span><span class="p">,</span> 
<span class="s1">&#39;zz top&#39;</span><span class="p">,</span> 
<span class="s1">&#39;à la&#39;</span><span class="p">]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">trigram</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span> 
<span class="p">[</span><span class="s1">&#39;0 10 definitely&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 2 also&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 25 per&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 3 miles&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 30 a&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 30 everything&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 30 lb&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 35 tip&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 5 curry&#39;</span><span class="p">,</span> 
<span class="s1">&#39;0 5 pork&#39;</span><span class="p">]</span> <span class="n">复制ErrorOK</span><span class="err">!</span>
</code></pre></div>
<figure >
    
        <img src="img/3-6.png" width="100%" />
    
    
</figure>

<p>图3-6 Number of unique n-gram in the first 10,000 reviews of the Yelp dataset</p>
<br>
<h3 id="过滤清洗特征httpfe4mlapachecnorgdocs3文本数据id过滤清洗特征"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E8%BF%87%E6%BB%A4%E6%B8%85%E6%B4%97%E7%89%B9%E5%BE%81">过滤清洗特征</a></h3>
<p>我们如何清晰地将信号从噪声中分离出来？ 通过过滤，使用原始标记化和计数来生成简单词表或 n-gram 列表的技术变得更加可用。 短语检测，我们将在下面讨论，可以看作是一个特别的 bigram 过滤器。 以下是执行过滤的几种方法。</p>
<br>
<h3 id="停用词httpfe4mlapachecnorgdocs3文本数据id停用词"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%81%9C%E7%94%A8%E8%AF%8D">停用词</a></h3>
<p>分类和检索通常不需要对文本有深入的理解。 例如，在<code>&quot;Emma knocked on the door&quot;</code>一句中，<code>&quot;on&quot;</code>和<code>&quot;the&quot;</code>这两个词没有包含很多信息。 代词、冠词和介词大部分时间并没有显示出其价值。流行的 Python NLP 软件包 NLTK 包含许多语言的语言学家定义的停用词列表。 （您将需要安装 NLTK 并运行<code>nltk.download()</code>来获取所有的好东西。）各种停用词列表也可以在网上找到。 例如，这里有一些来自英语停用词的示例词</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Sample words from the nltk stopword list
a, about, above, am, an, been, didn’t, couldn’t, i’d, i’ll, itself, let’s, myself, our, they, through, when’s, whom, ... 复制ErrorOK!
</code></pre></div><p>请注意，该列表包含撇号，并且这些单词没有大写。 为了按原样使用它，标记化过程不得去掉撇号，并且这些词需要转换为小写。</p>
<br>
<h3 id="基于频率的过滤httpfe4mlapachecnorgdocs3文本数据id基于频率的过滤"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%9F%BA%E4%BA%8E%E9%A2%91%E7%8E%87%E7%9A%84%E8%BF%87%E6%BB%A4">基于频率的过滤</a></h3>
<p>停用词表是一种去除空洞特征常用词的方法。还有其他更统计的方法来理解“常用词”的概念。在搭配提取中，我们看到依赖于手动定义的方法，以及使用统计的方法。同样的想法也适用于文字过滤。我们也可以使用频率统计。</p>
<br>
<h3 id="高频词httpfe4mlapachecnorgdocs3文本数据id高频词"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E9%AB%98%E9%A2%91%E8%AF%8D">高频词</a></h3>
<p>频率统计对滤除语料库专用常用词以及通用停用词很有用。例如，纽约时报文章数据集中经常出现“纽约时报”和其中单个单词。“议院”这个词经常出现在加拿大议会辩论的Hansard语料库中的“众议院”一词中，这是一种用于统计机器翻译的流行数据集，因为它包含所有文档的英文和法文版本。这些词在普通语言中有意义，但不在语料库中。手动定义的停用词列表将捕获一般停用词，但不是语料库特定的停用词。</p>
<p>表 3-1 列出了 Yelp 评论数据集中最常用的 40 个单词。在这里，频率被认为是它们出现在文件（评论）中的数量，而不是它们在文件中的数量。正如我们所看到的，该列表涵盖了许多停用词。它也包含一些惊喜。<code>&quot;s&quot;</code>和<code>&quot;t&quot;</code>在列表中，因为我们使用撇号作为标记化分隔符，并且诸如<code>&quot;Mary's&quot;</code>或<code>&quot;did not&quot;</code>之类的词被解析为<code>&quot;Mary s&quot;</code>和<code>&quot;didn t&quot;</code>。词<code>&quot;good&quot;</code>，<code>&quot;food&quot;</code>和<code>&quot;great&quot;</code>分别出现在三分之一的评论中。但我们可能希望保留它们，因为它们对于情感分析或业务分类非常有用。</p>

<figure >
    
        <img src="img/biao.png" width="100%" />
    
    
</figure>

<p>最常用的单词最可以揭示问题，并突出显示通常有用的单词通常在该语料库中曾出现过多次。 例如，纽约时报语料库中最常见的词是“时代”。实际上，它有助于将基于频率的过滤与停用词列表结合起来。还有一个棘手的问题，即何处放置截止点。 不幸的是这里没有统一的答案。在大多数情况下截断还需手动确定，并且在数据集改变时可能需要重新检查。</p>
<br>
<h3 id="稀有词httpfe4mlapachecnorgdocs3文本数据id稀有词"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E7%A8%80%E6%9C%89%E8%AF%8D">稀有词</a></h3>
<p>根据任务的不同，可能还需要筛选出稀有词。对于统计模型而言，仅出现在一个或两个文档中的单词更像噪声而非有用信息。例如，假设任务是根据他们的 Yelp 评论对企业进行分类，并且单个评论包含<code>&quot;gobbledygook&quot;</code>这个词。基于这一个词，我们将如何说明这家企业是餐厅，美容院还是一间酒吧？即使我们知道在这种情况下的这种生意发生在酒吧，它也会对于其他包含<code>&quot;gobbledygook&quot;</code>这个词的评论来说，这可能是一个错误。</p>
<p>不仅稀有词不可靠，而且还会产生计算开销。这套 160 万个 Yelp 评论包含 357,481 个独特单词（用空格和标点符号表示），其中 189,915 只出现在一次评论中，41,162 次出现在两次评论中。超过 60% 的词汇很少发生。这是一种所谓的重尾分布，在现实世界的数据中非常普遍。许多统计机器学习模型的训练时间随着特征数量线性地变化，并且一些模型是二次的或更差的。稀有词汇会产生大量的计算和存储成本，而不会带来额外的收益。</p>
<p>根据字数统计，可以很容易地识别和修剪稀有词。或者，他们的计数可以汇总到一个特殊的垃圾箱中，可以作为附加功能。图3-7展示了一个短文档中的表示形式，该短文档包含一些常用单词和两个稀有词<code>&quot;gobbledygook&quot;</code>和<code>&quot;zylophant&quot;</code>。通常单词保留自己的计数，可以通过停用词列表或其他频率进一步过滤方法。这些难得的单词会失去他们的身份并被分组到垃圾桶功能中.</p>

<figure >
    
        <img src="img/3-7.png" width="100%" />
    
    
</figure>

<p>由于在计算整个语料库之前不会知道哪些词很少，因此需要收集垃圾桶功能作为后处理步骤。</p>
<p>由于本书是关于特征工程的，因此我们将重点放在特征上。但稀有概念也适用于数据点。如果文本文档很短，那么它可能不包含有用的信息，并且在训练模型时不应使用该信息。</p>
<p>应用此规则时必须谨慎。维基百科转储包含许多不完整的存根，可能安全过滤。另一方面，推文本身就很短，并且需要其他特征和建模技巧。</p>
<br>
<h3 id="词干解析stemminghttpfe4mlapachecnorgdocs3文本数据id词干解析stemming"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E8%AF%8D%E5%B9%B2%E8%A7%A3%E6%9E%90%EF%BC%88stemming%EF%BC%89">词干解析（Stemming）</a></h3>
<p>简单解析的一个问题是同一个单词的不同变体会被计算为单独的单词。例如，<code>&quot;flower&quot;</code>和<code>&quot;flowers&quot;</code>在技术上是不同的记号，<code>&quot;swimmer&quot;</code>，<code>&quot;swimming&quot;</code>和<code>&quot;swim&quot;</code>也是如此，尽管它们的含义非常接近。如果所有这些不同的变体都映射到同一个单词，那将会很好。</p>
<p>词干解析是一项 NLP 任务，试图将单词切分为基本的语言词干形式。有不同的方法。有些基于语言规则，其他基于观察统计。被称为词形化的算法的一个子类将词性标注和语言规则结合起来。</p>
<p>Porter stemmer 是英语中使用最广泛的免费词干工具。原来的程序是用 ANSI C 编写的，但是很多其他程序包已经封装它来提供对其他语言的访问。尽管其他语言的努力正在进行，但大多数词干工具专注于英语。</p>
<p>以下是通过 NLTK Python 包运行 Porter stemmer 的示例。正如我们所看到的，它处理了大量的情况，包括将<code>&quot;sixties&quot;</code>和<code>&quot;sixty&quot;</code>转变为同一根<code>&quot;sixti&quot;</code>。但这并不完美。单词<code>&quot;goes&quot;</code>映射到<code>&quot;goe&quot;</code>，而<code>&quot;go&quot;</code>映射到它自己。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">nltk</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span> <span class="o">=</span> <span class="n">nltk</span><span class="o">.</span><span class="n">stem</span><span class="o">.</span><span class="n">porter</span><span class="o">.</span><span class="n">PorterStemmer</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;flowers&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;lemon&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;zeroes&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;zero&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;stemmer&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;stem&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;sixties&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;sixti&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;sixty&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;sixty&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;goes&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;goe&#39;</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="s1">&#39;go&#39;</span><span class="p">)</span> 
<span class="sa">u</span><span class="s1">&#39;go&#39;</span> <span class="n">复制ErrorOK</span><span class="err">!</span>
</code></pre></div><p>词干解析的确有一个计算成本。 最终收益是否大于成本取决于应用程序。</p>
<br>
<h3 id="含义的原子从单词到-n-gram-到短语httpfe4mlapachecnorgdocs3文本数据id含义的原子从单词到-n-gram-到短语"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%90%AB%E4%B9%89%E7%9A%84%E5%8E%9F%E5%AD%90%EF%BC%9A%E4%BB%8E%E5%8D%95%E8%AF%8D%E5%88%B0-n-gram-%E5%88%B0%E7%9F%AD%E8%AF%AD">含义的原子：从单词到 N-gram 到短语</a></h3>
<p>词袋的概念很简单。但是，一台电脑怎么知道一个词是什么？文本文档以数字形式表示为一个字符串，基本上是一系列字符。也可能会遇到 JSON blob 或 HTML 页面形式的半结构化文本。但即使添加了标签和结构，基本单位仍然是一个字符串。如何将字符串转换为一系列的单词？这涉及解析和标记化的任务，我们将在下面讨论。</p>
<br>
<h3 id="解析和分词httpfe4mlapachecnorgdocs3文本数据id解析和分词"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E8%A7%A3%E6%9E%90%E5%92%8C%E5%88%86%E8%AF%8D">解析和分词</a></h3>
<p>当字符串包含的不仅仅是纯文本时，解析是必要的。例如，如果原始数据是网页，电子邮件或某种类型的日志，则它包含额外的结构。人们需要决定如何处理日志中的标记，页眉，页脚或无趣的部分。如果文档是网页，则解析器需要处理 URL。如果是电子邮件，则可能需要特殊字段，例如 From，To 和 Subject 需要被特别处理，否则，这些标题将作为最终计数中的普通单词统计，这可能没有用处。</p>
<p>解析后，文档的纯文本部分可以通过标记。这将字符串（一系列字符）转换为一系列记号。然后可以将每个记号计为一个单词。分词器需要知道哪些字符表示一个记号已经结束，另一个正在开始。空格字符通常是好的分隔符，正如标点符号一样。如果文本包含推文，则不应将井号（<code>#</code>）用作分隔符（也称为分隔符）。</p>
<p>有时，分析需要使用句子而不是整个文档。例如，n-gram 是一个句子的概括，不应超出句子范围。更复杂的文本特征化方法，如 word2vec 也适用于句子或段落。在这些情况下，需要首先将文档解析为句子，然后将每个句子进一步标记为单词。</p>
<br>
<h3 id="字符串对象httpfe4mlapachecnorgdocs3文本数据id字符串对象"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1">字符串对象</a></h3>
<p>字符串对象有各种编码，如 ASCII 或 Unicode。纯英文文本可以用 ASCII 编码。 一般语言需要 Unicode。 如果文档包含非 ASCII 字符，则确保分词器可以处理该特定编码。否则，结果将不正确。</p>
<br>
<h3 id="短语检测的搭配提取httpfe4mlapachecnorgdocs3文本数据id短语检测的搭配提取"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E7%9F%AD%E8%AF%AD%E6%A3%80%E6%B5%8B%E7%9A%84%E6%90%AD%E9%85%8D%E6%8F%90%E5%8F%96">短语检测的搭配提取</a></h3>
<p>连续的记号能立即被转化成词表和 n-gram。但从语义上讲，我们更习惯于理解短语，而不是 n-gram。在计算自然语言处理中，有用短语的概念被称为搭配。用 Manning 和 Schütze（1999：141）的话来说：“搭配是一个由两个或两个以上单词组成的表达，它们对应于某种常规的说话方式。”</p>
<p>搭配比其部分的总和更有意义。例如，<code>&quot;strong tea&quot;</code>具有超越<code>&quot;great physical strength&quot;</code>和<code>&quot;tea&quot;</code>的不同含义，因此被认为是搭配。另一方面，“可爱的小狗”这个短语恰恰意味着它的部分总和：“可爱”和“小狗”。因此，它不被视为搭配。</p>
<p>搭配不一定是连续的序列。<code>&quot;Emma knocked on the door&quot;</code>一词被认为包含搭配<code>&quot;knock door&quot;</code>，因此不是每一个搭配都是一个 n-gram。相反，并不是每个 n-gram 都被认为是一个有意义的搭配。</p>
<p>由于搭配不仅仅是其部分的总和，它们的含义也不能通过单个单词计数来充分表达。作为一种表现形式，词袋不足。袋子的 ngram 也是有问题的，因为它们捕获了太多无意义的序列（考虑<code>&quot;this is in the bag-of-ngram example&quot;</code>），而没有足够的有意义的序列。</p>
<p>搭配作为功能很有用。但是，如何从文本中发现并提取它们呢？一种方法是预先定义它们。如果我们努力尝试，我们可能会找到各种语言的全面成语列表，我们可以通过文本查看任何匹配。这将是非常昂贵的，但它会工作。如果语料库是非常特定领域的并且包含深奥的术语，那么这可能是首选的方法。但是这个列表需要大量的手动管理，并且需要不断更新语料库。例如，分析推文，博客和文章可能不太现实。</p>
<p>自从统计 NLP 过去二十年出现以来，人们越来越多地选择用于查找短语的统计方法。统计搭配提取方法不是建立固定的短语和惯用语言列表，而是依赖不断发展的数据来揭示当今流行的语言。</p>
<br>
<h3 id="基于频率的方法httpfe4mlapachecnorgdocs3文本数据id基于频率的方法"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%9F%BA%E4%BA%8E%E9%A2%91%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95">基于频率的方法</a></h3>
<p>一个简单的黑魔法是频繁发生的 n-gram。这种方法的问题是最常发生的，这种可能不是最有用的。 表 3-2 显示了整个 Yelp 评论数据集中最流行的 bigram（<code>n=2</code>）。 正如我们所知的，按文件计数排列的最常见的十大常见术语是非常通用的术语，并不包含太多含义。</p>

<figure >
    
        <img src="img/biaod.png" width="100%" />
    
    
</figure>

<br>
<h3 id="用于搭配提取的假设检验httpfe4mlapachecnorgdocs3文本数据id用于搭配提取的假设检验"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E7%94%A8%E4%BA%8E%E6%90%AD%E9%85%8D%E6%8F%90%E5%8F%96%E7%9A%84%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C">用于搭配提取的假设检验</a></h3>
<p>原始流行度计数（Raw popularity count）是一个比较粗糙的方法。我们必须找到更聪慧的统计数据才能够轻松挑选出有意义的短语。关键的想法是看两个单词是否经常出现在一起。回答这个问题的统计机制被称为假设检验。</p>
<p>假设检验是将噪音数据归结为“是”或“否”的答案。它涉及将数据建模为从随机分布中抽取的样本。随机性意味着人们永远无法 100% 的确定答案；总会有异常的机会。所以答案附在概率上。例如，假设检验的结果可能是“这两个数据集来自同一分布，其概率为 95%”。对于假设检验的温和介绍，请参阅可汗学院关于假设检验和 p 值的教程。</p>
<p>在搭配提取的背景下，多年来已经提出了许多假设检验。最成功的方法之一是基于似然比检验（Dunning，1993）。对于给定的一对单词，该方法测试两个假设观察的数据集。假设 1（原假设）表示，词语 1 独立于词语 2 出现。另一种说法是说，看到词语1对我们是否看到词语2没有影响。假设 2（备选假设）说，看到词 1 改变了看到单词 2 的可能性。我们采用备选假设来暗示这两个单词形成一个共同的短语。因此，短语检测（也称为搭配提取）的似然比检验提出了以下问题：给定文本语料库中观察到的单词出现更可能是从两个单词彼此独立出现的模型中生成的，或者模型中两个词的概率纠缠？</p>
<p>这是有用的。让我们算一点。（数学非常精确和简洁地表达事物，但它确实需要与自然语言完全不同的分析器。）</p>

<figure >
    
        <img src="img/gongshi.png" width="100%" />
    
    
</figure>

<p>似然函数<code>L(Data; H)</code>表示在单词对的独立模型或非独立模型下观察数据集中词频的概率。为了计算这个概率，我们必须对如何生成数据做出另一个假设。最简单的数据生成模型是二项模型，其中对于数据集中的每个单词，我们抛出一个硬币，并且如果硬币朝上出现，我们插入我们的特殊单词，否则插入其他单词。在此策略下，特殊词的出现次数遵循二项分布。二项分布完全由词的总数，词的出现次数和词首概率决定。</p>
<p>似然比检验分析常用短语的算法收益如下。</p>
<ol>
<li>
<p>计算所有单体词的出现概率：<code>p(w)</code>。</p>
</li>
<li>
<p>计算所有唯一双元的条件成对词发生概率：<code>p(W2 × W1)</code></p>
</li>
<li>
<p>计算所有唯一的双对数似然比对数。</p>
</li>
<li>
<p>根据它们的似然比排序双字节。</p>
</li>
<li>
<p>以最小似然比值作为特征。</p>
<br>
</li>
</ol>
<h3 id="掌握似然比测试httpfe4mlapachecnorgdocs3文本数据id掌握似然比测试"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E6%8E%8C%E6%8F%A1%E4%BC%BC%E7%84%B6%E6%AF%94%E6%B5%8B%E8%AF%95">掌握似然比测试</a></h3>
<p>关键在于测试比较的不是概率参数本身，而是在这些参数（以及假设的数据生成模型）下观察数据的概率。可能性是统计学习的关键原则之一。但是在你看到它的前几次，这绝对是一个令人困惑的问题。一旦你确定了逻辑，它就变得直观了。</p>
<p>还有另一种基于点互信息的统计方法。但它对真实世界文本语料库中常见的罕见词很敏感。因此它不常用，我们不会在这里展示它。</p>
<p>请注意，搭配抽取的所有统计方法，无论是使用原始频率，假设测试还是点对点互信息，都是通过过滤候选词组列表来进行操作的。生成这种清单的最简单和最便宜的方法是计算 n-gram。它可能产生不连续的序列，但是它们计算成本颇高。在实践中，即使是连续 n-gram，人们也很少超过 bi-gram 或 tri-gram，因为即使在过滤之后，它们的数量也很多。为了生成更长的短语，还有其他方法，如分块或与词性标注相结合。</p>
<br>
<h3 id="分块chunking和词性标注part-of-speech-tagginghttpfe4mlapachecnorgdocs3文本数据id分块chunking和词性标注part-of-speech-tagging"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%88%86%E5%9D%97%EF%BC%88chunking%EF%BC%89%E5%92%8C%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8%EF%BC%88part-of-speech-tagging%EF%BC%89">分块（Chunking）和词性标注（part-of-Speech Tagging）</a></h3>
<p>分块比 n-gram 要复杂一点，因为它基于词性，基于规则的模型形成了记号序列。</p>
<p>例如，我们可能最感兴趣的是在问题中找到所有名词短语，其中文本的实体，主题最为有趣。 为了找到这个，我们使用词性标记每个作品，然后检查该标记的邻域以查找词性分组或“块”。 定义单词到词类的模型通常是语言特定的。 几种开源 Python 库（如 NLTK，Spacy 和 TextBlob）具有多种语言模型。</p>
<p>为了说明 Python 中的几个库如何使用词性标注非常简单地进行分块，我们再次使用 Yelp 评论数据集。 我们将使用 spacy 和 TextBlob 来评估词类以找到名词短语。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span> 
<span class="c1"># Load the first 10 reviews </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/yelp/v6/yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_review.json&#39;</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">js</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span> 
<span class="n">js</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()))</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">review_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">js</span><span class="p">)</span> 
<span class="c1">## First we&#39;ll walk through spaCy&#39;s functions </span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">spacy</span> 
<span class="c1"># preload the language model </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">)</span> 
<span class="c1"># We can create a Pandas Series of spaCy nlp variables </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">doc_df</span> <span class="o">=</span> <span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">nlp</span><span class="p">)</span> 
<span class="c1"># spaCy gives you fine grained parts of speech using: (.pos_) </span>
<span class="c1"># and coarse grained parts of speech using: (.tag_) </span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">doc_df</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> 
<span class="nb">print</span><span class="p">([</span><span class="n">doc</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">doc</span><span class="o">.</span><span class="n">pos_</span><span class="p">,</span> <span class="n">doc</span><span class="o">.</span><span class="n">tag_</span><span class="p">])</span> 
<span class="n">Got</span> <span class="n">VERB</span> <span class="n">VBP</span> 
<span class="n">a</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">letter</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="ow">in</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">the</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">mail</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="n">last</span> <span class="n">ADJ</span> <span class="n">JJ</span> 
<span class="n">week</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="n">that</span> <span class="n">ADJ</span> <span class="n">WDT</span> 
<span class="n">said</span> <span class="n">VERB</span> <span class="n">VBD</span> 
<span class="n">Dr</span><span class="o">.</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="n">Goldberg</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="ow">is</span> <span class="n">VERB</span> <span class="n">VBZ</span> 
<span class="n">moving</span> <span class="n">VERB</span> <span class="n">VBG</span> 
<span class="n">to</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">Arizona</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="n">to</span> <span class="n">PART</span> <span class="n">TO</span> 
<span class="n">take</span> <span class="n">VERB</span> <span class="n">VB</span> 
<span class="n">a</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">new</span> <span class="n">ADJ</span> <span class="n">JJ</span> 
<span class="n">position</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="n">there</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="ow">in</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">June</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="o">.</span> <span class="n">PUNCT</span> <span class="o">.</span> 
<span class="n">SPACE</span> <span class="n">SP</span> 
<span class="n">He</span> <span class="n">PRON</span> <span class="n">PRP</span> 
<span class="n">will</span> <span class="n">VERB</span> <span class="n">MD</span> 
<span class="n">be</span> <span class="n">VERB</span> <span class="n">VB</span> 
<span class="n">missed</span> <span class="n">VERB</span> <span class="n">VBN</span> 
<span class="n">very</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="n">much</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="o">.</span> <span class="n">PUNCT</span> <span class="o">.</span> 
<span class="n">SPACE</span> <span class="n">SP</span> 
<span class="n">I</span> <span class="n">PRON</span> <span class="n">PRP</span> 
<span class="n">think</span> <span class="n">VERB</span> <span class="n">VBP</span> 
<span class="n">finding</span> <span class="n">VERB</span> <span class="n">VBG</span> 
<span class="n">a</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">new</span> <span class="n">ADJ</span> <span class="n">JJ</span> 
<span class="n">doctor</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="ow">in</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">NYC</span> <span class="n">PROPN</span> <span class="n">NNP</span> 
<span class="n">that</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">you</span> <span class="n">PRON</span> <span class="n">PRP</span> 
<span class="n">actually</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="n">like</span> <span class="n">INTJ</span> <span class="n">UH</span> 
<span class="n">might</span> <span class="n">VERB</span> <span class="n">MD</span> 
<span class="n">almost</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="n">be</span> <span class="n">VERB</span> <span class="n">VB</span> 
<span class="k">as</span> <span class="n">ADV</span> <span class="n">RB</span> 
<span class="n">awful</span> <span class="n">ADJ</span> <span class="n">JJ</span> 
<span class="k">as</span> <span class="n">ADP</span> <span class="n">IN</span> 
<span class="n">trying</span> <span class="n">VERB</span> <span class="n">VBG</span> 
<span class="n">to</span> <span class="n">PART</span> <span class="n">TO</span> 
<span class="n">find</span> <span class="n">VERB</span> <span class="n">VB</span> 
<span class="n">a</span> <span class="n">DET</span> <span class="n">DT</span> 
<span class="n">date</span> <span class="n">NOUN</span> <span class="n">NN</span> 
<span class="err">!</span> <span class="n">PUNCT</span> <span class="o">.</span> 
<span class="c1"># spaCy also does some basic noun chunking for us </span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">([</span><span class="n">chunk</span> <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">doc_df</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">noun_chunks</span><span class="p">])</span> 
<span class="p">[</span><span class="n">a</span> <span class="n">letter</span><span class="p">,</span> <span class="n">the</span> <span class="n">mail</span><span class="p">,</span> <span class="n">Dr</span><span class="o">.</span> <span class="n">Goldberg</span><span class="p">,</span> <span class="n">Arizona</span><span class="p">,</span> <span class="n">a</span> <span class="n">new</span> <span class="n">position</span><span class="p">,</span> <span class="n">June</span><span class="p">,</span> <span class="n">He</span><span class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="n">a</span> <span class="n">new</span> <span class="n">doctor</span><span class="p">,</span> <span class="n">NYC</span><span class="p">,</span> <span class="n">you</span><span class="p">,</span> <span class="n">a</span> <span class="n">date</span><span class="p">]</span> 
<span class="c1">##### </span>
<span class="c1">## We can do the same feature transformations using Textblob </span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">textblob</span> <span class="kn">import</span> <span class="n">TextBlob</span> 
<span class="c1"># The default tagger in TextBlob uses the PatternTagger, which is fine for our example. </span>
<span class="c1"># You can also specify the NLTK tagger, which works better for incomplete sentences. </span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">blob_df</span> <span class="o">=</span> <span class="n">review_df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">TextBlob</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">blob_df</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">tags</span> 
<span class="p">[(</span><span class="s1">&#39;Got&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;letter&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;mail&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;last&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;week&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;that&#39;</span><span class="p">,</span> <span class="s1">&#39;WDT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;said&#39;</span><span class="p">,</span> <span class="s1">&#39;VBD&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;Dr.&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;Goldberg&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;VBZ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;moving&#39;</span><span class="p">,</span> <span class="s1">&#39;VBG&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;to&#39;</span><span class="p">,</span> <span class="s1">&#39;TO&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;Arizona&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;to&#39;</span><span class="p">,</span> <span class="s1">&#39;TO&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;take&#39;</span><span class="p">,</span> <span class="s1">&#39;VB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;new&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;position&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;there&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;June&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;He&#39;</span><span class="p">,</span> <span class="s1">&#39;PRP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;will&#39;</span><span class="p">,</span> <span class="s1">&#39;MD&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;be&#39;</span><span class="p">,</span> <span class="s1">&#39;VB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;missed&#39;</span><span class="p">,</span> <span class="s1">&#39;VBN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;very&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;much&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="p">,</span> <span class="s1">&#39;PRP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;think&#39;</span><span class="p">,</span> <span class="s1">&#39;VBP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;finding&#39;</span><span class="p">,</span> <span class="s1">&#39;VBG&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;new&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;doctor&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;NYC&#39;</span><span class="p">,</span> <span class="s1">&#39;NNP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;that&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;you&#39;</span><span class="p">,</span> <span class="s1">&#39;PRP&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;actually&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;like&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;might&#39;</span><span class="p">,</span> <span class="s1">&#39;MD&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;almost&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;be&#39;</span><span class="p">,</span> <span class="s1">&#39;VB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;as&#39;</span><span class="p">,</span> <span class="s1">&#39;RB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;awful&#39;</span><span class="p">,</span> <span class="s1">&#39;JJ&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;as&#39;</span><span class="p">,</span> <span class="s1">&#39;IN&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;trying&#39;</span><span class="p">,</span> <span class="s1">&#39;VBG&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;to&#39;</span><span class="p">,</span> <span class="s1">&#39;TO&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;find&#39;</span><span class="p">,</span> <span class="s1">&#39;VB&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;DT&#39;</span><span class="p">),</span> 
<span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">)]</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">([</span><span class="n">np</span> <span class="k">for</span> <span class="n">np</span> <span class="ow">in</span> <span class="n">blob_df</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">noun_phrases</span><span class="p">])</span> 
<span class="p">[</span><span class="s1">&#39;got&#39;</span><span class="p">,</span> <span class="s1">&#39;goldberg&#39;</span><span class="p">,</span> <span class="s1">&#39;arizona&#39;</span><span class="p">,</span> <span class="s1">&#39;new position&#39;</span><span class="p">,</span> <span class="s1">&#39;june&#39;</span><span class="p">,</span> <span class="s1">&#39;new doctor&#39;</span><span class="p">,</span> <span class="s1">&#39;nyc&#39;</span> <span class="n">复制ErrorOK</span><span class="err">!</span>
</code></pre></div><p>你可以看到每个库找到的名词短语有些不同。spacy 包含英语中的常见单词，如<code>&quot;a&quot;</code>和<code>&quot;the&quot;</code>，而 TextBlob 则删除这些单词。这反映了规则引擎的差异，它驱使每个库都认为是“名词短语”。 你也可以写你的词性关系来定义你正在寻找的块。使用 Python 进行自然语言处理可以深入了解从头开始用 Python 进行分块。</p>
<br>
<h2 id="总结httpfe4mlapachecnorgdocs3文本数据id总结"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E6%80%BB%E7%BB%93">总结</a></h2>
<p>词袋模型易于理解和计算，对分类和搜索任务很有用。但有时单个单词太简单，不足以将文本中的某些信息封装起来。为了解决这个问题，人们寄希望于比较长的序列。Bag-of-ngram 是 BOW 的自然概括，这个概念仍然容于理解，而且它的计算开销这就像 BOW 一样容易。</p>
<p>Bag of-ngram 生成更多不同的 ngram。它增加了特征存储成本，以及模型训练和预测阶段的计算成本。虽然数据点的数量保持不变，但特征空间的维度现在更大。因此数据密度更为稀疏。n 越高，存储和计算成本越高，数据越稀疏。由于这些原因，较长的 n-gram 并不总是会使模型精度的得到提高（或任何其他性能指标）。人们通常在<code>n = 2</code>或 3 时停止。较少的 n-gram 很少被使用。</p>
<p>防止稀疏性和成本增加的一种方法是过滤 n-gram 并保留最有意义的短语。这是搭配抽取的目标。理论上，搭配（或短语）可以在文本中形成非连续的标记序列。然而，在实践中，寻找非连续词组的计算成本要高得多并且没有太多的收益。因此搭配抽取通常从一个候选人名单中开始，并利用统计方法对他们进行过滤。</p>
<p>所有这些方法都将一系列文本标记转换为一组断开的计数。与一个序列相比，一个集合的结构要少得多；他们导致平面特征向量。</p>
<p>在本章中，我们用简单的语言描述文本特征化技术。这些技术将一段充满丰富语义结构的自然语言文本转化为一个简单的平面向量。我们讨论一些常用的过滤技术来降低向量维度。我们还引入了 ngram 和搭配抽取作为方法，在平面向量中添加更多的结构。下一章将详细介绍另一种常见的文本特征化技巧，称为 tf-idf。随后的章节将讨论更多方法将结构添加回平面向量。</p>
<br>
<h2 id="参考文献httpfe4mlapachecnorgdocs3文本数据id参考文献"><a href="http://fe4ml.apachecn.org/#/docs/3.%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE?id=%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></h2>
<p>Dunning, Ted. 1993. “Accurate methods for the statistics of surprise and</p>
<p>coincidence.” ACM Journal of Computational Linguistics, special issue on using large corpora , 19:1 (61—74).</p>
<p>“Hypothesis Testing and p-Values.” Khan Academy, accessed May 31,</p>
<p>2016,https://www.khanacademy.org/math/probability/statistics-inferential/hypothesis-testing/v/hypothesis-testing-and-p-values.</p>
<p>Manning,Christopher D. and Hinrich Schütze. 1999. Foundations of StatisticalNatural Language Processing . Cambridge, Massachusettes: MIT Press.</p>
<p>Sometimes people call it the document “vector.” The vector extends from the original and ends at the specified point. For our purposes, “vector” and “point” are the same thing.</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>神经网络textgenrnn库生成文本</title>
      <link>https://textdata.cn/blog/textgenrnn/</link>
      <pubDate>Tue, 28 Dec 2021 06:43:10 +0600</pubDate>
      
      <guid>/blog/textgenrnn/</guid>
      <description> 只需几行代码，即可在任何文本数据集上轻松训练您自己的任意大小和复杂性的文本生成神经网络。 </description>
      <content:encoded><![CDATA[<p>textgenrnn是在Keras/Tensorflow基础上搭建的Python包，特性:</p>
<ul>
<li>有现代的神经网络架构，使用注意力权重和嵌入Embedding来加速训练和提升模型质量</li>
<li>支持字符级别和单词级别的训练</li>
<li>可设置RNN尺寸、RNN层数、是否使用双向RNN</li>
<li>可支持对任意输入文本的训练，包括大文件</li>
<li>可以使用GPU训练，使用CPU生成文本</li>
<li>提供基于GPU的cuDNN，以加速模型训练</li>
<li>使用情景标签训练模型，更快的学习，产出更好的效果。</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">textgenrnn</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">textgenrnn</span> <span class="kn">import</span> <span class="n">textgenrnn</span>

<span class="n">textgen</span> <span class="o">=</span> <span class="n">textgenrnn</span><span class="p">()</span>
<span class="n">textgen</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[Spoiler] Anyone else find this post and their person that was a little more than I really like the Star Wars in the fire or health and posting a personal house of the 2016 Letter for the game in a report of my backyard.
</code></pre></div><br>
<p>使用新文本训练新模型也很简单</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">textgen</span><span class="o">.</span><span class="n">train_from_file</span><span class="p">(</span><span class="s1">&#39;hacker_news_2000.txt&#39;</span><span class="p">,</span> <span class="n">num_epochs</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">textgen</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Project State Project Firefox
</code></pre></div><br>
<p>生成3个论文标题按照疯狂程度的增加顺序（temperature越高，生成算法偏离学习概率分布的程度越大)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">textgen.generate(3, temperature=1.0)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Why we got money “regular alter”

Urburg to Firefox acquires Nelf Multi Shamn

Kubernetes by Google’s Bern
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>30天Python编程学习挑战</title>
      <link>https://textdata.cn/blog/30_days_of_python/</link>
      <pubDate>Mon, 27 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/30_days_of_python/</guid>
      <description> 在挑战结束时，您将获得 _30DaysOfPython_ 编程挑战证书。</description>
      <content:encoded><![CDATA[<p>30天入门Python，需要你耐得住寂寞，又能静下心来敲代码，不要惧怕英文的Python教程，其实敲代码运行代码的过程与玩游戏无异。</p>
<br>
<h2 id="引言">引言</h2>
<p>Python 是一种用于通用编程的高级编程语言。它是一种开源的、解释性的、面向对象的编程语言。 Python 是由荷兰程序员 Guido van Rossum 创建的。 Python 编程语言的名称来源于英国的小品喜剧系列，<em>Month Python&rsquo;s Flying Circus</em>。第一个版本于 1991 年 2 月 20 日发布。这个为期 30 天的 Python 挑战将帮助您逐步学习最新版本的 Python3。这些主题分为 30 天，每天包含几个主题，带有易于理解的解释、真实示例、许多动手练习和项目。</p>
<p>这个挑战是为想要学习 Python 编程语言的初学者和专业人士设计的。完成挑战可能需要30到100天，积极参与电报群的人完成挑战的概率很高。</p>
<br>
<h2 id="why-python-">Why Python ?</h2>
<p>它是一种非常接近人类语言的编程语言，因此易于学习和使用。
Python 被各种行业和公司（包括 Google）使用。 它已被用于开发 Web 应用程序、桌面应用程序、系统管理和机器学习库。 Python 是数据科学和机器学习社区中高度接受的语言。 我希望这足以说服你开始学习 Python。 Python 正在吞噬世界，而你在它吃掉你之前就应该杀了它。</p>
<br>
<h2 id="目录">目录</h2>
<table>
<thead>
<tr>
<th># Day</th>
<th style="text-align:center">Topics</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td style="text-align:center"><a href="./readme.md">引言</a></td>
</tr>
<tr>
<td>02</td>
<td style="text-align:center"><a href="./02_Day_Variables_builtin_functions/02_variables_builtin_functions.md">变量,内置函数</a></td>
</tr>
<tr>
<td>03</td>
<td style="text-align:center"><a href="./03_Day_Operators/03_operators.md">四则运算</a></td>
</tr>
<tr>
<td>04</td>
<td style="text-align:center"><a href="./04_Day_Strings/04_strings.md">字符串</a></td>
</tr>
<tr>
<td>05</td>
<td style="text-align:center"><a href="./05_Day_Lists/05_lists.md">列表</a></td>
</tr>
<tr>
<td>06</td>
<td style="text-align:center"><a href="./06_Day_Tuples/06_tuples.md">元组</a></td>
</tr>
<tr>
<td>07</td>
<td style="text-align:center"><a href="./07_Day_Sets/07_sets.md">集合</a></td>
</tr>
<tr>
<td>08</td>
<td style="text-align:center"><a href="./08_Day_Dictionaries/08_dictionaries.md">字典</a></td>
</tr>
<tr>
<td>09</td>
<td style="text-align:center"><a href="./09_Day_Conditionals/09_conditionals.md">条件语句</a></td>
</tr>
<tr>
<td>10</td>
<td style="text-align:center"><a href="./10_Day_Loops/10_loops.md">循环语句</a></td>
</tr>
<tr>
<td>11</td>
<td style="text-align:center"><a href="./11_Day_Functions/11_functions.md">函数</a></td>
</tr>
<tr>
<td>12</td>
<td style="text-align:center"><a href="./12_Day_Modules/12_modules.md">魔窟</a></td>
</tr>
<tr>
<td>13</td>
<td style="text-align:center"><a href="./13_Day_List_comprehension/13_list_comprehension.md">列表生成式</a></td>
</tr>
<tr>
<td>14</td>
<td style="text-align:center"><a href="./14_Day_Higher_order_functions/14_higher_order_functions.md">高级函数</a></td>
</tr>
<tr>
<td>15</td>
<td style="text-align:center"><a href="./15_Day_Python_type_errors/15_python_type_errors.md">类型错误</a></td>
</tr>
<tr>
<td>16</td>
<td style="text-align:center"><a href="./16_Day_Python_date_time/16_python_datetime.md">日期</a></td>
</tr>
<tr>
<td>17</td>
<td style="text-align:center"><a href="./17_Day_Exception_handling/17_exception_handling.md">异常处理语句</a></td>
</tr>
<tr>
<td>18</td>
<td style="text-align:center"><a href="./18_Day_Regular_expressions/18_regular_expressions.md">正则表达式</a></td>
</tr>
<tr>
<td>19</td>
<td style="text-align:center"><a href="./19_Day_File_handling/19_file_handling.md">文件读写</a></td>
</tr>
<tr>
<td>20</td>
<td style="text-align:center"><a href="./20_Day_Python_package_manager/20_python_package_manager.md">包管理</a></td>
</tr>
<tr>
<td>21</td>
<td style="text-align:center"><a href="./21_Day_Classes_and_objects/21_classes_and_objects.md">类&amp;对象</a></td>
</tr>
<tr>
<td>22</td>
<td style="text-align:center"><a href="./22_Day_Web_scraping/22_web_scraping.md">网络爬虫</a></td>
</tr>
<tr>
<td>23</td>
<td style="text-align:center"><a href="./23_Day_Virtual_environment/23_virtual_environment.md">虚拟环境</a></td>
</tr>
<tr>
<td>24</td>
<td style="text-align:center"><a href="./24_Day_Statistics/24_statistics.md">统计</a></td>
</tr>
<tr>
<td>25</td>
<td style="text-align:center"><a href="./25_Day_Pandas/25_pandas.md">Pandas</a></td>
</tr>
<tr>
<td>26</td>
<td style="text-align:center"><a href="./26_Day_Python_web/26_python_web.md">Web开发</a></td>
</tr>
<tr>
<td>27</td>
<td style="text-align:center"><a href="./27_Day_Python_with_mongodb/27_python_with_mongodb.md">MongoDB数据库</a></td>
</tr>
<tr>
<td>28</td>
<td style="text-align:center"><a href="./28_Day_API/28_API.md">API接口</a></td>
</tr>
<tr>
<td>29</td>
<td style="text-align:center"><a href="./29_Day_Building_API/29_building_API.md">搭建API</a></td>
</tr>
<tr>
<td>30</td>
<td style="text-align:center"><a href="./30_Day_Conclusions/30_conclusions.md">总结</a></td>
</tr>
</tbody>
</table>
<br>
<h2 id="welcome">Welcome</h2>
<p><strong>恭喜</strong>决定参加 <em>30 天的 Python</em> 编程挑战。 在这个挑战中，您将学习成为 Python 程序员所需的一切以及整个编程概念。 在挑战结束时，您将获得 <em>30DaysOfPython</em> 编程挑战证书。</p>
<p>如果您想积极参与挑战，可以加入30DaysOfPython 挑战(<a href="https://t.me/ThirtyDaysOfPython">https://t.me/ThirtyDaysOfPython</a>) 电报群。</p>
<br>
<h2 id="下载课件">下载课件</h2>
<p><a href="https://github.com/Asabeneh/30-Days-Of-Python/archive/refs/heads/master.zip">https://github.com/Asabeneh/30-Days-Of-Python/archive/refs/heads/master.zip</a></p>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>PNAS|词汇熟悉度对线上参与和资金筹集的预测性效用</title>
      <link>https://textdata.cn/blog/2021-12-27-pnas_text_fluency/</link>
      <pubDate>Mon, 27 Dec 2021 10:43:10 +0600</pubDate>
      
      <guid>/blog/2021-12-27-pnas_text_fluency/</guid>
      <description>人们对简单和通用的语言的反应比复杂和技术语言更有利;本文提供了文本分析的新思路，使用LIWC测量术语流畅性、复杂词汇。</description>
      <content:encoded><![CDATA[<p>[<strong>论文下载The predictive utility of word familiarity for online engagements and funding.pdf</strong>](The predictive utility of word familiarity for online engagements and funding.pdf)</p>
<blockquote>
<p>Markowitz, D. M., &amp; Shulman, H. C. (2021). The predictive utility of word familiarity for online engagements and funding. Proceedings of the National Academy of Sciences, 118(18).</p>
</blockquote>
<h2 id="摘要">摘要</h2>
<p>处理流畅性等元认知框架通常表明人们对简单和通用的语言的反应比复杂和技术语言更有利。与复杂的信息相比，人们更容易处理简单和非技术性的信息，因此会更多地与目标进行互动。在涵盖 12 个现场样本（总 n = 1,064,533）的两项研究中，我们通过展示人们在付出时间和注意力时更多地使用非技术语言（例如，简单的在线语言往往会获得更多社交信息）来建立并复制这种越简单越好的现象订婚）。然而，人们在捐款时会对复杂的语言做出反应（例如，慈善捐赠活动和赠款摘要中的复杂语言往往会收到更多的钱）。这一证据表明，人们根据时间或金钱目标以不同的方式使用复杂语言的启发式方法。这些结果强调语言是社会和心理过程的镜头，以及大规模测量文本模式的计算方法。</p>
<ul>
<li>processing fluency</li>
<li>field studies</li>
<li>automated text analysis</li>
<li>common words</li>
<li>jargon</li>
</ul>
<br>
## 研究背景-复杂词汇的负面效应
<p><strong>术语（jargon）</strong>，是复杂的、技术的、专业的语言，与日常语言相比，加工难度更大、更不流畅。许多关于<strong>加工流畅度</strong>（processing fluency）的研究都发现了使用术语的负面结果： 由于术语会给予人们不熟悉、加工困难的感觉，从而导致其较难理解。使用术语来描述手术过程的医生可能导致病人关于健康风险的错误估计；阅读了关于一项技术的复杂描述的人们（与阅读简单描述的人们相比）对该技术的理解更差并高估其风险。因此，不常用的、技术性的词汇通常不被看好，因为人们对其不熟悉而感觉较难加工，并给人们带来理解上的挑战。</p>
<p>然而，对于复杂词汇的影响，以往研究基本基于实验室结果，效应的强度、健壮性、对真实行为的预测性等仍不清楚。此外，以往大多数关于加工流畅度（processing fluency）的研究都依赖于人们的主观判断，即通过询问被试对于简单或复杂文本的感受来判断效应的大小。该研究则弥补了这两点不足，将加工流畅度操作性定义为词法流畅度（lexical fluency，即所用的词汇为通用词汇还是复杂词汇），并考察复杂词汇对人们在真实世界中行为的影响。</p>
<br>
<h2 id="工具性启发法">工具性启发法</h2>
<p>工具性启发法（instrumentality heuristic）认为，如果一个感觉很困难的经历是有助于达到特定目标的，人们会给予这个经历更高的评价。由此，如果工具性目标被激活，那么加工流畅性低的复杂文本，反而可能会被给予更高的评价。对此，该研究同时考察了复杂词汇对于线上参与度（社会参与度）和资金筹集的影响。</p>
<br>
<h2 id="研究假设">研究假设</h2>
<ul>
<li>假设一：没有工具性目标被激活时，人们更喜欢简单的语言，表现为更高的社会参与度</li>
<li>假设二：工具性目标被激活时，人们更喜欢复杂的语言，表现为更多的资金支持</li>
</ul>
<p>实验结果支持这两个假设：通用词汇与更多的线上支持（高社会参与度）相关，复杂词汇则与更多的资金支持相关。</p>
<br>
<h2 id="数据">数据</h2>
<h3 id="研究一的数据包括">研究一的数据包括：</h3>
<ol>
<li>
<p>来自左倾（纽约时报）、右倾（福克斯新闻）、中立（美联社）的新闻媒体的推特</p>
</li>
<li>
<p>随机选择来自上述三个组织的的记者/名人的个人推特</p>
</li>
<li>
<p>共和党政治家和特朗普手下的推特</p>
</li>
<li>
<p>Reddit文章标题</p>
</li>
<li>
<p>科学论文（来自PLoS One）的标题和、摘要</p>
</li>
<li>
<p>TED演讲标题、内容</p>
</li>
</ol>
<h3 id="研究二的数据包括">研究二的数据包括：</h3>
<ol>
<li>三个慈善平台</li>
</ol>
<p>  a) Kickstarter，主要是关于对创意项目的投资</p>
<p>  b) Indiegogo，主要是关于对创意项目和初创企业的投资</p>
<p>  c) GoFundMe，时要是关于生活事件的筹募（医疗、事故等）</p>
<ol start="2">
<li>NIH基金申请书的摘要</li>
</ol>
<br>
<h2 id="数据分析">数据分析</h2>
<p>自动文本分析工具：研究使用自动文本分析工具LIWC（Linguistic Inquiry and Word Count）来对文本进行分析。LIWC词典是一个经过专家和统计分析认证的工具，其包含了6400个代表“非正式、非专业”的英语单词。研究者把通用词汇的比例操作性定义为文本中LIWC词典中词汇的比例。</p>
<p>混合效应回归分析：使用混合效应回归分析的方法对数据进行分析。其中，回归模型中的控制变量主要有5类，分别是信息源（如新闻来源、演讲者、作者），时间（如年份、视频长度、发帖距今时间、发表时间），主题（如社会/政治等），金钱（如申请成功与否、货币类型）和投入程度（如出资人的数量、股份的数量）。</p>
<p>数据转换：</p>
<ol>
<li>
<p>研究一中，由于发表时间更长的信息更可能有更高的线上参与度，因此计算中所有参与度指标均除以了数据提取日期与发表日期之间的时间距离（数据提取-发表日期）。此外，对于考察的社会参与度指标，均进行了log转换。下文（表XX）中的点赞率、转发率等，均指代经过了上述转换后的点赞数、转发数等。</p>
</li>
<li>
<p>对研究一参与度相关指标求和时（如推特点赞率与转发率之和），对各指标标准化后再求和。</p>
</li>
<li>
<p>研究二中的因变量（各数据集中的所得资金数额）亦均进行了log转换。</p>
</li>
</ol>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>共词矩阵 | cntext更新至1.1</title>
      <link>https://textdata.cn/blog/cntext_upgrade/</link>
      <pubDate>Wed, 22 Dec 2021 13:43:10 +0600</pubDate>
      
      <guid>/blog/cntext_upgrade/</guid>
      <description>共现矩阵 </description>
      <content:encoded><![CDATA[<h2 id="cntext更新至11-版本">cntext更新至1.1 版本</h2>
<p>本次更新了共现矩阵的计算函数。</p>
<p>更新方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext --upgrade
</code></pre></div><p>或指定版本安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext==1.1
</code></pre></div><br>
<h2 id="co_occurrence_matrix">co_occurrence_matrix</h2>
<p>词共现矩阵</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">co_occurrence_matrix</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I go to school every day by bus .&#34;</span><span class="p">,</span>
         <span class="s2">&#34;i go to theatre every night by bus&#34;</span><span class="p">]</span>

<span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/co_occurrence1.png" width="100%" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">documents2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;编程很好玩&#34;</span><span class="p">,</span>
             <span class="s2">&#34;Python是最好学的编程&#34;</span><span class="p">]</span>

<span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents2</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/co_occurrence2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Phonemizer音素化 Python文本语音表征包</title>
      <link>https://textdata.cn/blog/phonemizer/</link>
      <pubDate>Mon, 20 Dec 2021 23:43:10 +0600</pubDate>
      
      <guid>/blog/phonemizer/</guid>
      <description> 音素是构成语音的基本声音，音节和单词建立在音节上。在与语音和语言处理相关的各种应用（例如文本到语音系统）中，将文本从其拼写形式转录为语音字母表是一项重要要求。 </description>
      <content:encoded><![CDATA[<h2 id="音素">音素</h2>
<p><strong>音素</strong>是构成语音的基本声音，音节和单词建立在音节上。在与<strong>语音</strong>和<strong>语言</strong>处理相关的各种应用（例如<strong>文本到语音系统</strong>）中，将文本从其拼写形式转录为语音字母表是一项重要要求。</p>
<p>Phonemizer 是一个精确寻址的 Python 包, 它将文本从其拼写表示转录为语音表示。 该包设计用户友好的，并公开了一个高级音素化函数， 支持大约100种不同的语言。phonemizer 使用的默认后端是 eSpeak
（Dunn &amp; Vitolins，2019 年），一种基于语言专业知识和手写转录规则的文本转语音软件。它将文本转录成国际音标，并支持一百多种语言。使用 MBROLA 声音（Tits &amp; Vitolins，2019），eSpeak 后端可用于大约 35 种语言，以 SAMPA 计算机可读语音字母表转录文本。</p>
<br>
<h2 id="安装">安装</h2>
<p>安装phonemizer前需要配置espeak-ng，</p>
<ul>
<li>win <a href="https://github.com/espeak-ng/espeak-ng/releases">https://github.com/espeak-ng/espeak-ng/releases</a>下载对应的msi文件点击安装</li>
<li>mac 首先配置好homebrew，之后命令行brew install espeak</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install phonemizer
</code></pre></div><h2 id="音素化phonemize">音素化phonemize</h2>
<p>from phonemizer import phonemize</p>
<p>phonemize(text, language=&lsquo;en-us&rsquo;, prepend_text=False, preserve_punctuation=False, with_stress=False, njobs=1)</p>
<ul>
<li>text 文本列表</li>
<li>language 语言。&ldquo;en-us&quot;美国英语， &ldquo;zh&quot;中文</li>
<li>prepend_text 输出结果保留输入的文本，默认False</li>
<li>preserve_punctuation 输出结果保留标点符号，默认False</li>
<li>with_stress 标记重读，默认False</li>
<li>njobs 并行运算核数，默认使用cpu的1个核。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer</span> <span class="kn">import</span> <span class="n">phonemize</span>

<span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hello, my name is david&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;nice to meet you!&#39;</span><span class="p">]</span>

<span class="c1"># Do this:</span>
<span class="n">phonemized</span> <span class="o">=</span>  <span class="n">phonemize</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">language</span><span class="o">=</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>
<span class="n">phonemized</span>
</code></pre></div><p>Run</p>
<pre><code>['həloʊ maɪ neɪm ɪz deɪvɪd ', 'naɪs tə miːt juː ']
</code></pre>
<br>
<p>但上面的用法速度较慢， 更高效的写法应该为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="n">language</span><span class="o">=</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>

<span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hello, my name is david&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;nice to meet you!&#39;</span><span class="p">]</span>

<span class="n">phonemized</span> <span class="o">=</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">(</span><span class="n">texts</span><span class="p">)</span> 
<span class="n">phonemized</span>
</code></pre></div><p>Run</p>
<pre><code>142 µs ± 851 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<p>给每个单词构造音素，输出结果为字典样式</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="kn">from</span> <span class="nn">phonemizer.punctuation</span> <span class="kn">import</span> <span class="n">Punctuation</span>
<span class="kn">from</span> <span class="nn">phonemizer.separator</span> <span class="kn">import</span> <span class="n">Separator</span>
<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;It amused him to think that they were probably talking about him at that very moment&#39;</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)]</span>

<span class="c1"># 忽略词语边界，音素之间用空格间隔</span>
<span class="n">separator</span> <span class="o">=</span> <span class="n">Separator</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>

<span class="n">lexicon</span> <span class="o">=</span> <span class="p">{</span><span class="n">word</span><span class="p">:</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">([</span><span class="n">word</span><span class="p">],</span> <span class="n">separator</span><span class="o">=</span><span class="n">separator</span><span class="p">,</span> <span class="n">strip</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
           <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">}</span>

<span class="n">lexicon</span>
</code></pre></div><p>Run</p>
<pre><code>{'it': 'ɪ t',
 'amused': 'ɐ m j uː s d',
 'him': 'h ɪ m',
 'to': 't uː',
 'think': 'θ ɪ ŋ k',
 'that': 'ð æ t',
 'they': 'ð eɪ',
 'were': 'w ɜː',
 'probably': 'p ɹ ɑː b ə b l i',
 'talking': 't ɔː k ɪ ŋ',
 'about': 'ɐ b aʊ t',
 'at': 'æ t',
 'very': 'v ɛ ɹ i',
 'moment': 'm oʊ m ə n t'}
</code></pre>
<br>
<h2 id="中文的音素化">中文的音素化</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text_zhs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;你好我的名字是大卫&#39;</span><span class="p">,</span> 
            <span class="s1">&#39;很高兴认识你&#39;</span><span class="p">]</span>

<span class="n">phonemized_zhs</span> <span class="o">=</span> <span class="n">phonemize</span><span class="p">(</span><span class="n">text_zhs</span><span class="p">,</span> <span class="n">language</span><span class="o">=</span><span class="s1">&#39;zh&#39;</span><span class="p">)</span>
<span class="n">phonemized_zhs</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;ni2 xɑu2 wo2 tə1 miɜŋ tsi̪5 s.i.5 tɑ5 wei5 &#39;,
 &#39;xə2n kɑu5 ɕi5ŋ ʐə5n s.i.1 ni2 &#39;]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="kn">from</span> <span class="nn">phonemizer.punctuation</span> <span class="kn">import</span> <span class="n">Punctuation</span>
<span class="kn">from</span> <span class="nn">phonemizer.separator</span> <span class="kn">import</span> <span class="n">Separator</span>
<span class="kn">import</span> <span class="nn">re</span>


<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;想到他们可能在那个时候谈论他，他觉得好笑&#39;</span>
<span class="n">words</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;[</span><span class="se">\u4e00</span><span class="s1">-</span><span class="se">\u9fa5</span><span class="s1">]&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>


<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="s1">&#39;zh&#39;</span><span class="p">)</span>

<span class="n">separator</span> <span class="o">=</span> <span class="n">Separator</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>

<span class="c1"># 构建每个汉字一个对应的音素表达，输出结果为字典样式</span>
<span class="n">lexicon</span> <span class="o">=</span> <span class="p">{</span><span class="n">word</span><span class="p">:</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">([</span><span class="n">word</span><span class="p">],</span> <span class="n">separator</span><span class="o">=</span><span class="n">separator</span><span class="p">,</span> <span class="n">strip</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
           <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">}</span>

<span class="n">lexicon</span>
</code></pre></div><p>Run</p>
<pre><code>{'想': 'ɕ iɑ2 ŋ ',
 '到': 't ɑu5 ',
 '他': 'th ɑ5 ',
 '们': 'm ə1 n ',
 '可': 'kh o2 ',
 '能': 'n əɜ ŋ ',
 '在': 'ts ai5 ',
 '那': 'n ɑ5 ',
 '个': 'k o1 ',
 '时': 's. i.ɜ ',
 '候': 'x ou5 ',
 '谈': 'th aɜ n ',
 '论': 'l uə5 n ',
 '觉': 'tɕ yɛɜ ',
 '得': 't ə1 ',
 '好': 'x ɑu2 ',
 '笑': 'ɕ j ɑu5 '}
</code></pre>
<br>
<h2 id="心理学相关概念">心理学相关概念</h2>
<p>这个包用起来比较简单，但是想到一个场景，说不定可以多个角度去分析文本。</p>
<p>经常看文本的时候，脑海里不自觉的读出声音，这种现象今天查了下叫做“听觉表象”，听觉表象产生于语言的视觉区和语言的运动区——角回和布洛卡区。通过听觉，听出相应的字的声音，我们就可以领会到这句话的意思。从常人的生长发育的过程，我们都是先牙牙学语，通过声音理解内容的含义，而后经过十数教育学会语言书面文字，掌握文字系统，此时我们的神经回路是“视觉(听觉)~记忆~理解”</p>
<p>对一个东西的“知觉”在心理学上叫做这个东西的“知觉表征”，相当于是把这个东西转码为了一个，用于后续在心理上对这个东西进行加工。这个心理符号的编码与这个东西本身的特征以及最初的感觉通道有关——一个真正的苹果常会被以视觉的方式编码，成为一个视觉知觉表征，可以简单理解成这个苹果的图像；一个词“苹果”常会被以听觉的方式编码，成为一个AVL单元，可以简单地理解成把“苹果”这两个字和“ping’guo”这个读音打包在一起的一个文件。</p>
<p>感觉代码被经过某些处理后储存在记忆当中，当有一天需要用的时候再被从记忆里提取出来。这个时候的提取，本身是一种建构，也就是与将感觉处理后存储起来的一个相反的过程——所以心理学上把我们所提取（建构）的这个代码就称为表象。表象和知觉是机能等价的（Neisser，1972），可以简单理解为表象就是是一种基于过去经验的知觉。这也解释了我们默读词汇的时候，这个AVL单元里“语音”的部分是哪里来的了——这是我们基于对自己声音的了解而建构的一种听觉表象。简单来说这个语音就是根据我们对自己声音的认识，来“想象”的读出来的声音。</p>
<blockquote>
<p>知乎回答-心理学哈士奇</p>
<p>Conrad R (1963). Acoustic confusions and memory span for words. Nature, 197: 1029-1030.</p>
<p>Neisser U (1972). Changing conception of imagery. In P W Sheehan (ED), The Function and Nature of Imagery. London: Achademic Press.
知乎回答-心理学哈士奇</p>
</blockquote>
<br>
<h2 id="引用格式">引用格式</h2>
<p>Bernard, M. and Titeux, H. (2021). Phonemizer: Text to phones transcription for multiple languages in python. Journal of Open Source Software, 6(68):3958.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-tex" data-lang="tex">@article<span class="nb">{</span>Bernard2021,
  doi = <span class="nb">{</span>10.21105/joss.03958<span class="nb">}</span>,
  url = <span class="nb">{</span>https://doi.org/10.21105/joss.03958<span class="nb">}</span>,
  year = <span class="nb">{</span>2021<span class="nb">}</span>,
  publisher = <span class="nb">{</span>The Open Journal<span class="nb">}</span>,
  volume = <span class="nb">{</span>6<span class="nb">}</span>,
  number = <span class="nb">{</span>68<span class="nb">}</span>,
  pages = <span class="nb">{</span>3958<span class="nb">}</span>,
  author = <span class="nb">{</span>Mathieu Bernard and Hadrien Titeux<span class="nb">}</span>,
  title = <span class="nb">{</span>Phonemizer: Text to Phones Transcription for Multiple Languages in Python<span class="nb">}</span>,
  journal = <span class="nb">{</span>Journal of Open Source Software<span class="nb">}</span>
<span class="nb">}</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>OMNIZART: 音乐转录变得容易</title>
      <link>https://textdata.cn/blog/omnizart/</link>
      <pubDate>Mon, 20 Dec 2021 22:43:10 +0600</pubDate>
      
      <guid>/blog/omnizart/</guid>
      <description> Omnizart 是一个 Python 库，是自动音乐转录的简化解决方案</description>
      <content:encoded><![CDATA[
<figure >
    
        <img src="img/OMNIZART.png" width="100%" />
    
    
</figure>

<p>Omnizart 是一个 Python 库，是自动音乐转录的简化解决方案。该库收集了<strong>音乐与文化技术实验室</strong>(<a href="https://sites.google.com/view/mctl/home">https://sites.google.com/view/mctl/home</a>)的研究成果，分析和弦音乐并转录<strong>乐器的音符 、和弦 、drum events、帧级人声旋律、音符级人声旋律</strong>。</p>
<p>Omnizart 提供构建基于深度学习的音乐转录生命周期的主要功能，涵盖从<em>数据集下载</em>、<em>特征预处理</em>、<em>模型训练</em>、<em>转录</em>和<em>声音化</em>。还提供了预先训练的检查点，以便立即使用转录。该论文可以从 <a href="https://doi.org/10.21105/joss.03391">Journal of Open Source Software (JOSS)</a> 中找到。</p>
<br>
<h2 id="演示">演示</h2>
<h3 id="colab">Colab</h3>
<p>使用 <strong>Colab notebook</strong> <a href="https://bit.ly/OmnizartColab">https://bit.ly/OmnizartColab</a>几乎可以立即转录您最喜欢的歌曲！</p>
<br>
<h2 id="声音样本">声音样本</h2>
<p>原声</p>
<p><video id="video" controls="" preload="none" type="video/mp4"> <source id="mp4" src="img/Highway_No_9.mp4" type="video/mp4"> </video></p>
<p>和弦转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_chord_synth.mp3">
</audio>
<p>鼓点转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_drum_synth.mp3">
</audio>
<p>音符级人声转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_vocal_synth.mp3">
</audio>
<p>帧级语音转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_vocal_contour.mp3">
</audio>
<p>Source files can be downloaded <a href="https://drive.google.com/file/d/15VqHearznV9L83cyl61ccACsXXJ4vBHo/view?usp=sharing">here</a>. You can use <em>Audacity</em> to open the files.</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>音频可视化：采样、频率和傅里叶变换</title>
      <link>https://textdata.cn/blog/voice2pic/</link>
      <pubDate>Mon, 20 Dec 2021 10:43:10 +0600</pubDate>
      
      <guid>/blog/voice2pic/</guid>
      <description>主题建模和语义搜索库</description>
      <content:encoded><![CDATA[<blockquote>
<p>author:cj1128</p>
<p>Github: <a href="https://github.com/cj1128">https://github.com/cj1128</a></p>
<p>Blog: <a href="https://cjting.me/">https://cjting.me/</a></p>
<p>src: <a href="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/">https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/</a></p>
</blockquote>
<p>印象中使用的第一个 PC 音乐播放器是「千千静听」，大概是 08 年左右。我还清楚地记得它自带了一首梁静茹的歌「Love is everything」，动听的旋律至今萦绕耳旁。</p>

<figure >
    
        <img src="img/qianqian.jpeg" width="100%" />
    
    
</figure>

<p>千千静听的左上角有一组随着音乐跳动的柱子，我想大家都习以为常了，很多播放器都有这功能。但是其实有没有想过，这是怎么实现的？</p>
<p>要理解这个问题，我们首先要理解声音是什么。</p>
<br>
<h2 id="波">波</h2>
<p>中学物理有介绍过，声音是由物体振动产生的，这个振动经由介质传导到我们的耳朵中引起耳膜振动从而让我们听见声音。</p>
<p>我们可以用波形来描述振动，其中横轴是时间，纵轴是振动的位移，也就是离开原点的距离。</p>
<p>振动的两个关键属性是频率和振幅，频率是指一秒钟振动多少次，对应于音高，频率越高声音越尖锐刺耳。</p>
<p>振幅则表示最大的位移值，对应于音量，振幅越大声音越响。</p>

<figure >
    
        <img src="img/200hz.png" width="100%" />
    
    
</figure>

<p>上图是用 <a href="https://matplotlib.org/">matplotlib</a> 绘制的一个正弦波，可以看出在 0.01s 内振动了 2 次，因此频率是 200，振幅是 1。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="k">def</span> <span class="nf">sin_wave</span><span class="p">(</span><span class="n">hz</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
  <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">hz</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
  <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
  <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s2">&#34;Time&#34;</span><span class="p">)</span>
  <span class="n">plt</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">)</span>
  <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="n">sin_wave</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</code></pre></div><p>这种最简单的波形对应的声音叫做 pure tone，顾名思义，非常的简单而且纯粹。</p>
<p>下面是用 <a href="https://www.scipy.org/">scipy</a> 生成的 200hz 的声音，大家可以听听看。</p>
<audio id="audio" controls="" preload="none">
      <source id="wav" src="img/200hz.wav">
</audio>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">scipy.io.wavfile</span> <span class="k">as</span> <span class="nn">wav</span>

<span class="n">SAMPLE_RATE</span> <span class="o">=</span> <span class="mi">44100</span>
<span class="n">DURATION</span> <span class="o">=</span> <span class="mi">5</span>

<span class="k">def</span> <span class="nf">write_wav</span><span class="p">(</span><span class="n">hz</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">DURATION</span><span class="p">,</span> <span class="n">SAMPLE_RATE</span> <span class="o">*</span> <span class="n">DURATION</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
  <span class="n">tone</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">hz</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
  <span class="n">normalized_tone</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">int16</span><span class="p">((</span><span class="n">tone</span> <span class="o">/</span> <span class="n">tone</span><span class="o">.</span><span class="n">max</span><span class="p">())</span> <span class="o">*</span> <span class="mi">32767</span><span class="p">)</span>
  <span class="n">wav</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">hz</span><span class="si">}</span><span class="s2">hz.wav&#34;</span><span class="p">,</span> <span class="n">SAMPLE_RATE</span><span class="p">,</span> <span class="n">normalized_tone</span><span class="p">)</span>

<span class="n">write_wav</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</code></pre></div><p>这是 800hz 的声音，可以明显感觉到，声音更加尖锐了。</p>
<audio id="audio" controls="" preload="none">
      <source id="wav" src="img/800hz.wav">
</audio>
<p>现实世界中我们听到的声音不会是 pure tone，而是各种 pure tone 叠加的结果。</p>
<p>下图中蓝色是 200hz，黄色是 800hz，而绿色则是它们叠加的结果，已经不再是一个 pure tone 了。</p>

<figure >
    
        <img src="img/200-add-800hz.png" width="100%" />
    
    
</figure>

<p>下面是绿色曲线听起来的效果。</p>
<audio id="audio" controls="" preload="none">
      <source id="wav" src="img/mixed.wav">
</audio>
<p>总结一下：</p>
<ul>
<li>我们可以用一个波形图来表示声音，其中 X 轴是时间，Y 轴是振动的位移</li>
<li>最简单的正弦波对应的声音叫做 pure tone</li>
<li>日常中我们听到的声音都是各种 pure tone 叠加的结果</li>
</ul>
<p>Tip:</p>
<p>如果想了解一点乐理，<a href="https://www.lightnote.co/music-theory/sound-waves">LIGHTNOTE</a> 非常不错。</p>
<p>它的网页做得很棒，通过互动的形式讲述基本的乐理知识，包括音阶、和弦，十二平均律等。</p>
<br>
<h2 id="采样">采样</h2>
<p>因为声音是一个随时间变化的连续函数，任意一段间隔内都有无穷多个值，而无穷多的数据是没办法存储在计算机中的。</p>
<p>想要存储，我们就需要将它离散化变成离散序列，具体的方法就是采样，使用固定的间隔对函数进行求值。</p>
<p>这是原始的声音。</p>

<figure >
    
        <img src="img/origin.png" width="100%" />
    
    
</figure>

<p>这是采样后的结果。</p>

<figure >
    
        <img src="img/sampled.png" width="100%" />
    
    
</figure>

<p>通过采样，我们将一个无尽序列变成了一个有限序列，其中每一个值叫做样本，这样就可以方便地在计算机中存储了。</p>
<p>采样的关键参数有两个，分别是采样频率和采样深度。</p>
<p>采样频率是指每秒钟采样多少次，很明显，采样频率越高，样本越多，数据量越大，同时也更接近原始的声音。</p>
<p>采样深度是指用多少比特去存储采样得到的值，使用的比特越多，还原得到的声音越细腻，和图片的色彩深度是一个道理。</p>
<p>假设我们用 16bit 采样深度和 44100 的采样频率，那么一段一秒钟的声音就变成了一个 44100 大小的 int16 数组。</p>
<p>得到采样值数组以后，接下来如何存储这个数组就是编码的范畴了。我们可以直接存，也可以采用某种算法压缩以后再存。各种各样的办法，对应着各种各样的音频格式，比如 MP3, AAC, WAV 等。</p>
<p>这其中 AAC 和 MP3 格式是有损的，也就是存储以后再读出来，得到的样本和原始的会有一些区别，但这些区别很细微，可以忽略。有损的特点就是在基本不影响最终播放效果的情况下，大幅度减少文件体积。</p>
<p>而 WAV 则是无损的，输入是什么，读出来就是什么，缺点自然是体积要大很多。</p>
<p>我们可以通过 scipy 来读取 WAV 音频。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">scipy.io.wavfile</span> <span class="k">as</span> <span class="nn">wav</span>

<span class="n">rate</span><span class="p">,</span> <span class="n">all_samples</span> <span class="o">=</span> <span class="n">wav</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&#34;xxx.wav&#34;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">rate</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_samples</span><span class="p">),</span> <span class="n">all_samples</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>
<span class="c1"># 44100 10639873 int16</span>
<span class="c1"># 上面分别是：采样率，样本总数，以及样本值的类型</span>
<span class="c1"># int16 说明每一个样本是 16bit 整数</span>

<span class="nb">print</span><span class="p">(</span><span class="n">all_samples</span><span class="p">[:</span><span class="mi">20</span><span class="p">])</span>
<span class="c1"># [-41 -51 -49 -41 -28 -15 -20 -33 -32 -38 -54 -54 -44 -30  -8  10  11   2</span>
<span class="c1"># -14 -36]</span>
<span class="c1"># 可以看到样本就是一组数字</span>
</code></pre></div><p>可以看出，采样频率是 44100，一共有 10639873 个样本，使用 int16 进行存储，计算可知这首歌的时间是 241 秒。</p>
<br>
<h2 id="傅里叶变换">傅里叶变换</h2>
<p>给定一个 200hz 的波形和一个 800hz 的波形，计算它们叠加以后的结果非常简单，没有任何难度。</p>

<figure >
    
        <img src="img/200-add-800hz.png" width="100%" />
    
    
</figure>

<p>但是，如果给到叠加以后的结果呢？</p>

<figure >
    
        <img src="img/mixed2.png" width="100%" />
    
    
</figure>

<p>能看出上面的绿色曲线是 200hz+800hz 叠加得到的吗？完全看不出来，甚至，这样的逆推真的可行吗？还是说和永动机一样在原理上就是不可行的？</p>
<p>答案是可行的，通过傅里叶变换，我们可以将一个复合波形拆解为构成它的简单波形。</p>
<p>想想都觉得不可思议，这是怎么做到的？傅里叶又是怎么想到的？不得不说十八世纪的法国数学家傅里叶是一个天才，让人仰望。</p>
<p>Tip: 3Blue1Brown 有一个视频介绍傅里叶变换的原理，非常棒：<a href="https://www.youtube.com/watch?v=spUNpyF58BY">形象的介绍：什么是傅里叶变换？</a></p>
<p>接下来我们来看看怎样通过傅里叶变换来拆解复合波形。</p>
<p>我们可以认为傅里叶变换是一个函数，它的输入为 N 个实数，代表采样值，输出为 N 个复数，代表不同频率的分量，这里我们忽略复数的实部和虚部，只关心它的模，也就是绝对值。</p>
<p>Tip: 这里关于傅里叶变换的说法并不完整，比如傅里叶变换的输入也可以是复数。但是对我们来说理解到这一层面就够了。如果想要深入研究，可以去学习数字信号处理相关的课程。</p>
<p>我们使用 scipy 来实际进行一下傅里叶变换。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">scipy.fft</span> <span class="kn">import</span> <span class="n">fft</span><span class="p">,</span> <span class="n">fftfreq</span>

<span class="c1"># 这是即将进行变换的采样值: [0, 1, 2, 3, 4, 5, 6, 7]</span>
<span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="c1"># 这是傅里叶变换的结果</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">fft</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">y</span><span class="p">:</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># 变换结果为 8 个复数</span>
<span class="c1"># (28-0j)</span>
<span class="c1"># (-3.9999999999999996+9.65685424949238j)</span>
<span class="c1"># (-4+4j)</span>
<span class="c1"># (-4+1.6568542494923797j)</span>
<span class="c1"># (-4-0j)</span>
<span class="c1"># (-4-1.6568542494923797j)</span>
<span class="c1"># (-4-4j)</span>
<span class="c1"># (-3.9999999999999996-9.65685424949238j)</span>

<span class="c1"># x 是上面每个结果对应的频率</span>
<span class="c1"># 这里 fftfreq 函数的第一个参数为样本数量</span>
<span class="c1"># 第二个参数为 采样率的 倒数，我们假定采样率为 8</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">fftfreq</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">samples</span><span class="p">),</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="c1"># [ 0.  1.  2.  3. -4. -3. -2. -1.]</span>
<span class="c1"># 这里意味着 y[0] 对应的频率是 0，y[1] 对应的频率是 1</span>
<span class="c1"># 负数频率是什么含义？我们可以不管，忽略</span>
</code></pre></div><p>上面的代码我们构造了 8 个数字进行傅里叶变换，并假定这组样本是使用采样率 8 进行采样得到的。</p>
<p>变换的结果是 8 个复数，这 8 个复数对应 8 个频率，我们可以看出，正频率和负频率对应的变换结果是一样的，也就是变换后的结果是对称的。</p>
<p>上面得到的结果意义不大，因为输入没什么意义。现在我们使用傅里叶变换处理一下 200hz+800hz 叠加后的波形，看看是否能还原回 200hz 和 800hz。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">import</span> <span class="n">figure</span>
<span class="kn">from</span> <span class="nn">scipy.fft</span> <span class="kn">import</span> <span class="n">fft</span><span class="p">,</span> <span class="n">fftfreq</span>

<span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>

<span class="n">DURATION</span> <span class="o">=</span> <span class="mf">0.01</span>
<span class="n">SAMPLE_RATE</span> <span class="o">=</span> <span class="mi">44100</span>

<span class="k">def</span> <span class="nf">gen_sine_wave</span><span class="p">(</span><span class="n">freq</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">DURATION</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">DURATION</span> <span class="o">*</span> <span class="n">SAMPLE_RATE</span><span class="p">),</span> <span class="n">endpoint</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
  <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">freq</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">y</span>

<span class="n">hz200</span> <span class="o">=</span> <span class="n">gen_sine_wave</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
<span class="n">hz800</span> <span class="o">=</span> <span class="n">gen_sine_wave</span><span class="p">(</span><span class="mi">800</span><span class="p">)</span>

<span class="c1"># 叠加后的采样数据</span>
<span class="c1"># 这里每个样本不是 int16，而是 float，无关紧要</span>
<span class="n">total</span> <span class="o">=</span> <span class="n">hz200</span> <span class="o">+</span> <span class="n">hz800</span>

<span class="n">y</span> <span class="o">=</span> <span class="n">fft</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">fftfreq</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">total</span><span class="p">),</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">SAMPLE_RATE</span><span class="p">)</span>

<span class="c1"># 此时横轴是频率，纵轴是该频率的分量</span>
<span class="c1"># 使用 np.abs 计算复数的模</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p>图中我们可以看出，首先输出结果是左右对称的，我们忽略掉负频率部分，只关注正频率。</p>
<p>其次，傅里叶变换告诉我们该输入信号由 2 个频率组成，程序运行时鼠标放上去可以看出是 200 和 800。也就是说，通过傅里叶变换，我们将复合波形拆解为了简单波形。</p>
<p>或者说，通过傅里叶变换，我们将一个信号拆解为了一组不同频率的正弦波，将它从时域变换到了频域。信号还是这个信号，只不过换个角度去看它。</p>
<p><img loading="lazy" src="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/transform.png" alt="img"  />
</p>
<p>总结一下：</p>
<ul>
<li>傅里叶变换是一个函数，输入一串数字代表样本值，输出一串复数代表频率分量</li>
<li>每个数字具体代表的频率可以根据样本数量和采样频率计算得知</li>
<li>我们不关心复数的方向，我们只关心复数的模</li>
<li>傅里叶输出的结果是左右对称的，因此只有一半的信息有价值</li>
</ul>
<p>因为输出结果是对称的，只有一半的信息有价值，因此有一个变体叫做 <code>rfft</code>，只返回一半的信息，计算速度可以更快一些。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">scipy.fft</span> <span class="kn">import</span> <span class="n">rfft</span><span class="p">,</span> <span class="n">rfftfreq</span>

<span class="n">SAMPLE_RATE</span> <span class="o">=</span> <span class="mi">8</span>

<span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="c1"># 此时 x 和 y 都是 5 个值</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">rfft</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">rfftfreq</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">samples</span><span class="p">),</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">SAMPLE_RATE</span><span class="p">)</span>

<span class="c1"># y[0] 表示频率 0 的分量</span>
<span class="c1"># y[1] 表示频率 1 的分量</span>
<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="c1"># [0. 1. 2. 3. 4.]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">y</span><span class="p">:</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># 和之前 fft/fftfreq 的输出对比，可以发现结果是一样的，只不过去掉了对称的冗余信息</span>
<span class="c1"># (28+0j)</span>
<span class="c1"># (-3.9999999999999996+9.65685424949238j)</span>
<span class="c1"># (-4+4j)</span>
<span class="c1"># (-4+1.6568542494923797j)</span>
<span class="c1"># (-4+0j)</span>
</code></pre></div><br>
<h2 id="音频可视化">音频可视化</h2>
<p>到了这里所有实现音频可视化所需要的知识都备齐了。</p>
<p>首先我们可以猜到，随音乐跳动的每个柱子，对应的是一个频率或一组频率，而柱子的高度则是频率的分量大小，这两个信息傅里叶变换都能给到。</p>
<p>现在剩下的问题则是输入是什么？我们不可能把一首歌曲的所有样本作为输入进行傅里叶变换，如果这样做，我们只能得到一份频率数据。</p>
<p>我们希望得到的频率数据随着音乐在变化，因此这里要选择一个窗口大小（FFT_SIZE），比如 2048。随着音乐的播放，我们每次都从当前播放位置选择 2048 个样本然后进行傅里叶变换。</p>
<p>现在我们的初步音频可视化方案就确定了：</p>
<ul>
<li>解析音频文件得到 allSamples</li>
<li>每次绘图时，从当前 sample 开始选择 FFT_SIZE 个 sample</li>
<li>对这些 sample 进行傅里叶变换</li>
<li>对变换得到的复数求模</li>
<li>把结果变换到 0 ~ 1 然后绘图</li>
</ul>
<p>接下来我们用 Web 来实现一个简单的音频可视化工具。</p>
<p>首先，解析音频文件得到 allSamples 我们可以使用 WebAudio 的 API。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 得到某个音频文件的二进制数据
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">ab</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;xxx.mp3&#34;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">arrayBuffer</span><span class="p">())</span>

<span class="c1">// 新建 WebAudio context
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">audioCtx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">()</span>

<span class="c1">// 解析 arrayBuffer
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">audioBuffer</span> <span class="o">=</span> <span class="nx">audioCtx</span><span class="p">.</span><span class="nx">decodeAudioData</span><span class="p">(</span><span class="nx">ab</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">audioBuffer</span><span class="p">)</span>
<span class="c1">// AudioBuffer {length: 10639872, duration: 241.2669387755102, sampleRate: 44100, numberOfChannels: 2}
</span><span class="c1">//  duration: 241.2669387755102
</span><span class="c1">//  length: 10639872
</span><span class="c1">//  numberOfChannels: 2
</span><span class="c1">//  sampleRate: 44100
</span><span class="c1">// [[Prototype]]: AudioBuffer
</span><span class="c1"></span>
<span class="c1">// 一般来说音频都有多个声道，用于立体声播放
</span><span class="c1">// 这里我们选第一个声道就可以了
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">allSamples</span> <span class="o">=</span> <span class="nx">audioBuffer</span><span class="p">.</span><span class="nx">getChannelData</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">// allSamples 就是我们要的样本数组，每一个样本值是浮点数
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allSamples</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="c1">// Float32Array(10) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</span></code></pre></div><p>接下来，我们使用 <code>requestAnimationFrame</code> 来进行绘制。</p>
<p>每次绘制的时候，需要先获取当前的播放位置。audioBuffer 中有音频的总时间，通过 <code>audioCtx.currentTime</code> 我们可以得知当前的播放时间，两个相除便是播放位置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 用户点击播放时
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">onPlay</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="c1">// 记录下播放的开始时间
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nx">audioCtx</span><span class="p">.</span><span class="nx">currentTime</span>

  <span class="kr">const</span> <span class="nx">draw</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">draw</span><span class="p">)</span>

    <span class="c1">// 目前播放了多少时间 (seconds)
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">cur</span> <span class="o">=</span> <span class="nx">audioCtx</span><span class="p">.</span><span class="nx">currentTime</span> <span class="o">-</span> <span class="nx">startTime</span>

    <span class="c1">// 播放的进度是多少
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">per</span> <span class="o">=</span> <span class="nx">cur</span> <span class="o">/</span> <span class="nx">audioBuffer</span><span class="p">.</span><span class="nx">duration</span>

    <span class="kr">const</span> <span class="nx">startIndex</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">allSamples</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nx">per</span><span class="p">)</span>

    <span class="c1">// 从 startIndex 开始切割 FFT_SIZE 个 sample 出来
</span><span class="c1"></span>    <span class="c1">// 此时要进行傅里叶变换的 samples 就准备好了
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">samples</span> <span class="o">=</span> <span class="nx">allSamples</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">startIndex</span><span class="p">,</span> <span class="nx">startIndex</span> <span class="o">+</span> <span class="nx">FFT_SIZE</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">draw</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>接下来就是傅里叶变换了，这里我找了一下，JS 相关的库很少，不过验证下来 <a href="https://github.com/indutny/fft.js/">fft.js</a> 是可用的。</p>
<p>Tip: 不得不说科学计算还是 Python 方便，numpy 和 scipy 真的太好用了。</p>
<p>经过 FFT 以后，我们得到了 1025 个复数，对这些复数取模，得到 1025 个实数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">// JS 没有复数，我们自行定义一个
</span><span class="c1"></span><span class="kr">class</span> <span class="nx">Complex</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">real</span><span class="p">,</span> <span class="nx">imag</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">real</span> <span class="o">=</span> <span class="nx">real</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">imag</span> <span class="o">=</span> <span class="nx">imag</span>
  <span class="p">}</span>

  <span class="nx">abs</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">real</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">real</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">imag</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">imag</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">rfft</span> <span class="o">=</span> <span class="p">(</span><span class="nx">samples</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FFTJS</span><span class="p">(</span><span class="nx">samples</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">out</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">createComplexArray</span><span class="p">()</span>

  <span class="kr">const</span> <span class="nx">N</span> <span class="o">=</span> <span class="nx">samples</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>

  <span class="nx">f</span><span class="p">.</span><span class="nx">realTransform</span><span class="p">(</span><span class="nx">out</span><span class="p">,</span> <span class="nx">samples</span><span class="p">)</span>

  <span class="kr">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">value</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Complex</span><span class="p">(</span><span class="nx">out</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">0</span><span class="p">],</span> <span class="nx">out</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">value</span>
<span class="p">}</span>

<span class="c1">// 此时我们得到了一组实数
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">rfft</span><span class="p">(</span><span class="nx">samples</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">c</span> <span class="p">=&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">abs</span><span class="p">())</span>
</code></pre></div><p>Tip:</p>
<p>其实这里还有一个过程，我们不会直接把 samples 进行 FFT 变换，而是会先应用一个 Window Function，这样做的目的如果感兴趣可以自行了解。</p>
<p>对于我们来说，Window Function 就是一个 <code>number[] -&gt; number[]</code> 的函数。</p>
<p>接下来就是将这些数字变换到 0 ~ 1 区间，这一步比较简单，观察一下最大最小值做个线性变换就行了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">v</span> <span class="o">+</span> <span class="mi">20</span><span class="p">)</span> <span class="o">/</span> <span class="mi">80</span><span class="p">)</span>
</code></pre></div><p>有了一组 0 ~ 1 的数字以后，我们就可以使用 Canvas 进行绘图了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">W</span> <span class="o">=</span> <span class="mi">800</span> <span class="c1">// canvas width
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">H</span> <span class="o">=</span> <span class="mi">600</span> <span class="c1">// canvas height
</span><span class="c1"></span>
<span class="kr">const</span> <span class="nx">draw</span> <span class="o">=</span> <span class="p">(</span><span class="nx">spectrum</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">W</span><span class="p">,</span> <span class="nx">H</span><span class="p">)</span>

  <span class="kr">const</span> <span class="nx">barWidth</span> <span class="o">=</span> <span class="nx">W</span> <span class="o">/</span> <span class="nx">spectrum</span><span class="p">.</span><span class="nx">length</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">spectrum</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">v</span> <span class="o">=</span> <span class="nx">spectrum</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">*</span> <span class="nx">barWidth</span>
    <span class="kr">const</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">v</span> <span class="o">*</span> <span class="nx">H</span>
    <span class="kr">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">H</span> <span class="o">-</span> <span class="nx">height</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">barWidth</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>然后我们来看看结果，打开 <a href="http://cjting.me/audio-vis-demo/">audio-vis-demo</a>，选择一个音频文件，取消勾选 “Smooth”，点击播放，然后我们会发现，柱子可以正常地绘制出来，但是它们”跳跃“得非常厉害，不够平稳。</p>
<p>这是因为我们漏了一步，叫做 Time smoothing。</p>
<p>具体的机理我并不理解，所以就不再说明了，对我们的目标来说，这部分当做黑盒处理就可以了。</p>
<p>这里我想说明一下，在我看来，学习任何知识都是分层的，学到自己感兴趣的层级即可，对下一层有一个定性的认识，需要的时候可以再去细究。</p>
<p>我们可以认为 Time smoothing 就是对当前的 result 和上一个 result 进行某种操作，然后输出一组值。</p>
<p>下面是具体的算法，代码非常简单，但是效果非常明显。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">smoothConstantDown</span> <span class="o">=</span> <span class="mf">0.08</span>
<span class="kr">const</span> <span class="nx">smoothConstantUp</span> <span class="o">=</span> <span class="mf">0.8</span>

<span class="k">if</span><span class="p">(</span><span class="nx">lastY</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lastY</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
      <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">smoothConstantDown</span> <span class="o">+</span> <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">smoothConstantDown</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">smoothConstantUp</span> <span class="o">+</span> <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">smoothConstantUp</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">lastY</span> <span class="o">=</span> <span class="nx">y</span>
<span class="p">}</span>
</code></pre></div><p>我们在 Demo 中勾选上 “Smooth” 启用这个算法，然后就会发现图像马上变得不再跳动了，整体结果已经和其他播放器很接近了。</p>
<p>注意，这里我们是为了学习底层的步骤和细节，所以很多操作都自己来做。如果真的需要开发相关功能，使用 WebAudio 的 API 是更合理的选择。</p>
<p>我在 <a href="http://cjting.me/audio-vis-demo/">audio-vis-demo</a> 中也基于 WebAudio 的 API 进行了实现，主要是为了对比和参考。</p>
<p>到这里，我们完整地实现了从一组数字到可视化图形的全过程，深切地感受到了数学的魅力。这里的编码一点也不难，难的，或者是让人赞叹的，是背后的数学，人类智慧皇冠上最灿烂的明珠。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python自动化利器RPA爬数据so easy</title>
      <link>https://textdata.cn/blog/rpa/</link>
      <pubDate>Sun, 19 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/rpa/</guid>
      <description>您可以使用它快速实现自动化操作网站、自动化处理桌面应用程序上的重复性耗时任务。</description>
      <content:encoded><![CDATA[<p>RPA for Python 简单而强大的自动化套件！ 您可以使用它快速实现自动化操作网站、自动化处理桌面应用程序上的重复性耗时任务。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">rpa</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>首次运行下方代码会，提示安装200M左右的配置文件，建议选择状况较好的网络环境。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpa</span> <span class="k">as</span> <span class="nn">r</span>

<span class="n">r</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="c1">#操控Chrome打开某个链接</span>
<span class="n">r</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="s1">&#39;https://www.google.com&#39;</span><span class="p">)</span>

<span class="c1">#定位搜索框，输入decentralization，回车执行搜索</span>
<span class="n">r</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="s1">&#39;//*[@name=&#34;q&#34;]&#39;</span><span class="p">,</span> <span class="s1">&#39;decentralization[enter]&#39;</span><span class="p">)</span>

<span class="c1">#定位结果页的统计信息。</span>
<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;result-stats&#39;</span><span class="p">))</span>

<span class="c1">#截屏</span>
<span class="n">r</span><span class="o">.</span><span class="n">snap</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="s1">&#39;results.png&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><pre><code>找到约 1,590,000,000 条结果 （用时 0.39 秒）
True
</code></pre>
<p>需要注意的是 <code>//*[@name=&quot;q&quot;]</code> 与 <code>result-stats</code> 都是网页的定位表达式，建议大家稍微学一下html选择器 selector。 咱们爬虫课程中的pyquery部分讲的主要是selector，感兴趣可以付下一下。</p>
<br>
<h2 id="再试一下">再试一下</h2>
<p>这里我给大家操作一下，通过开发者工具Element面板选定并复制的方法构造selector。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpa</span> <span class="k">as</span> <span class="nn">r</span>

<span class="n">r</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">r</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="s1">&#39;https://www.baidu.com&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="s1">&#39;#kw&#39;</span><span class="p">,</span> <span class="s1">&#39;大邓和他的Python[enter]&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;//*[@id=&#34;tsn_inner&#34;]/div[2]&#39;</span><span class="p">))</span>
<span class="n">r</span><span class="o">.</span><span class="n">snap</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="s1">&#39;results.png&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><pre><code>搜索工具百度为您找到相关结果约1,920,000个
True
</code></pre>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>有偿数据分析服务</title>
      <link>https://textdata.cn/blog/paid_for_service/</link>
      <pubDate>Sun, 12 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/paid_for_service/</guid>
      <description>本文旨在回答大数据技术如何才能成为法学研究的方法，如何与法律实证研究、规范研究这两大传统的方法实现有效的互动。</description>
      <content:encoded><![CDATA[<p>经常有朋友咨询可否提供有偿服务，目前可接文本数据分析，常见的分析支持</p>
<ul>
<li>词频统计</li>
<li>情感分析</li>
<li>LDA话题分析</li>
<li>文本分类</li>
<li>相似度分析</li>
<li>其他</li>
</ul>
<p>为了提高沟通效率，需要您提供需求文档，需要说明两部分信息</p>
<h2 id="1数据说明">1、数据说明</h2>
<ol>
<li>是否已拥有数据</li>
<li>数据的文件格式(pdf、txt、excel类等)</li>
<li>数据量(文件数或多少M)</li>
</ol>
<br>
<h2 id="2数据分析">2、数据分析</h2>
<ol>
<li>列出需要计算的指标（列出计算方法）</li>
<li>分析结果的存储格式及字段样式(建议excel格式)</li>
</ol>
<br>
<h2 id="提示">提示</h2>
<p>我自己时间精力有限，服务肯定没有全职数据分析师做的好，更建议大家付费购买课程自学，技术上打铁还需自身硬。常见的数据分析都已形成课程，价格也不贵。</p>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
<br>
<h2 id="咨询方式">咨询方式</h2>
<p>准备好需求文档后，可加微信<strong>18373154668</strong>（微信手机同号）</p>
<ul>
<li>中午12:00-14:00</li>
<li>晚间22:00-24:00</li>
</ul>
<br>
]]></content:encoded>
    </item>
    
    <item>
      <title>案例实战 | 企业信息数据采集</title>
      <link>https://textdata.cn/blog/%E7%88%B1%E4%BC%81%E6%9F%A5/</link>
      <pubDate>Wed, 08 Dec 2021 18:42:10 +0600</pubDate>
      
      <guid>/blog/%E7%88%B1%E4%BC%81%E6%9F%A5/</guid>
      <description>手把手教你写爬虫</description>
      <content:encoded><![CDATA[<h2 id="爱企查">爱企查</h2>
<p>想搜集企业信息，可以使用爱企查网站，例如通过该网站，搜”华为“，，可以获得与关键词<strong>华为</strong>相关的很多企业名信息

<figure >
    
        <img src="img/01-%e7%88%b1%e4%bc%81%e6%9f%a5%e9%a6%96%e9%a1%b5.png" width="100%" />
    
    
</figure>
</p>
<p>设计网络爬虫步骤</p>
<ol>
<li>使用开发者工具network面板审查网站的网址规律urls</li>
<li>对单个网址url尝试访问</li>
<li>确定网站是html或json类型</li>
<li>从网页中解析定位需要的数据。</li>
</ol>
<ul>
<li>使用pyquery解析html页面数据；</li>
<li>或使用json解析json页面数据</li>
</ul>
<ol start="5">
<li>存储到csv</li>
<li>重复2-5</li>
</ol>
<br>
<h2 id="尝试访问第一页">尝试访问第一页</h2>

<figure >
    
        <img src="img/02-%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" width="100%" />
    
    
</figure>

<p>经过开发者工具network，可以使用requests对其进行访问。</p>
<p>需要注意的是，headers中需要加入Referer参数，该参数作用是告诉服务器</p>
<blockquote>
<p>兄弟，我是经过Referer介绍的，不然我也不可能知道
<a href="https://aiqicha.baidu.com/s/advanceFilterAjax?q=%E5%8D%8E%E4%B8%BA&amp;t=&amp;p=1&amp;s=10&amp;o=0&amp;f=%7B%7D">https://aiqicha.baidu.com/s/advanceFilterAjax?q=%E5%8D%8E%E4%B8%BA&amp;t=&amp;p=1&amp;s=10&amp;o=0&amp;f=%7B%7D</a>
这个网址啊</p>
</blockquote>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">quote</span>

<span class="n">query</span> <span class="o">=</span> <span class="s1">&#39;华为&#39;</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://aiqicha.baidu.com/s/advanceFilterAjax?q=</span><span class="si">{q}</span><span class="s1">&amp;t=&amp;p=1&amp;s=10&amp;o=0&amp;f=%7B%7D&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">quote</span><span class="p">(</span><span class="n">query</span><span class="p">))</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.55 Safari/537.36&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;https://aiqicha.baidu.com/s?q=</span><span class="si">{q}</span><span class="s1">&amp;t=0&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">quote</span><span class="p">(</span><span class="n">query</span><span class="p">))}</span>

<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
<span class="n">resp</span>
</code></pre></div><pre><code>&lt;Response [200]&gt;
</code></pre>
<br>
<h2 id="解析网页数据">解析网页数据</h2>
<p>
<figure >
    
        <img src="img/03-%e8%a7%a3%e6%9e%90%e6%95%b0%e6%8d%ae.png" width="100%" />
    
    
</figure>

通过开发者工具可以看到，这个网站采用的json类型网页数据。</p>
<p>
<figure >
    
        <img src="img/04-%e6%95%b0%e6%8d%ae%e5%ad%97%e6%ae%b5.png" width="100%" />
    
    
</figure>

好在这类网页的解析定位比较简单。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">com</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;data&#39;</span><span class="p">][</span><span class="s1">&#39;resultList&#39;</span><span class="p">][:</span><span class="mi">3</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">com</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    {&#39;pid&#39;: &#39;31360200662522&#39;, &#39;entName&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;技术有限公司&#39;, &#39;entType&#39;: &#39;有限责任公司(自然人投资或控股的法人独资)&#39;, &#39;validityFrom&#39;: &#39;1896-08-14&#39;, &#39;domicile&#39;: &#39;深圳市龙岗区坂田&lt;em&gt;华为&lt;/em&gt;总部办公楼&#39;, &#39;entLogo&#39;: &#39;https://zhengxin-pub.cdn.bcebos.com/logopic/67e739bf0e47768f4a1f542daf3f7f42_fullsize.jpg&#39;, &#39;openStatus&#39;: &#39;开业&#39;, &#39;legalPerson&#39;: &#39;赵明路&#39;, &#39;tags&#39;: {&#39;laTaxer&#39;: &#39;&lt;span class=&#34;zx-ent-tag laTaxer&#34;&gt;A级纳税人(2020)&lt;/span&gt;&#39;}, &#39;logoWord&#39;: &#39;华为技术&#39;, &#39;titleName&#39;: &#39;华为技术有限公司&#39;, &#39;titleLegal&#39;: &#39;赵明路&#39;, &#39;titleDomicile&#39;: &#39;深圳市龙岗区坂田华为总部办公楼&#39;, &#39;levelAtaxer&#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], &#39;regCap&#39;: &#39;5,035,113.2万&#39;, &#39;scope&#39;: &#39;一般经营项目是:程控交换机、传输设备、数据通信设备、宽带多媒体设备、电源、无线通信设备、微电子产品、软件、系统集成工程、计算机及配套设备、终端设备及相关通信信息产品、数据中心机房基础设施及配套产品(含供配电、空调制冷设备、智能管理监控等)的开发、生产、销售、技术服务、工程安装、维修、咨询、代理、租赁;信息系统设计、集成、运行维护;集成电路设计、研发;统一通信及协作类产品,服务器及配套软硬件产品,存储设备及相关软件的研发、生产、销售;无线数据产品(不含限制项目)的研发、生产、销售;通信站点机房基础设施及通信配套设备(含通信站点、通信机房、通信电源、机柜、天线、通信线缆、配电、智能管理监控、锂电及储能系统等)的研发、生产、销售;能源科学技术研究及能源相关产品的研发、生产、销售;大数据产品、物联网及通信相关领域产品的研发、生产、销售;汽车零部件及智能系统的研发、生产、销售及服务;建筑工程;设计、制作、发布、代理各类广告;通信设备租赁(不含限制项目);培训服务;技术认证服务;信息咨询(不含限制项目);企业管理咨询(不含限制项目);进出口业务;国内商业、物资供销业业务(不含专营、专控、专卖商品);对外经济技术合作业务;房屋租赁业务(持许可经营证);以及其他法律法规不禁止的经营活动(依法须经批准的项目,经相关部门批准后方可开展经营活动)。,许可经营项目是:增值电信业务经营。&#39;, &#39;regNo&#39;: &#39;815503001822039217&#39;, &#39;hitReason&#39;: [{&#39;品牌项目&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;&#39;}, {&#39;商标名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;&#39;}, {&#39;企业名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;技术有限公司&#39;}, {&#39;网站名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;应用平台1&#39;}, {&#39;地址&#39;: &#39;深圳市龙岗区坂田&lt;em&gt;华为&lt;/em&gt;总部办公楼&#39;}], &#39;labels&#39;: {&#39;opening&#39;: {&#39;text&#39;: &#39;开业&#39;, &#39;style&#39;: &#39;blue&#39;, &#39;fontColor&#39;: &#39;#1EA930&#39;, &#39;bgColor&#39;: &#39;#EBF6EC&#39;}}, &#39;personTitle&#39;: &#39;法定代表人&#39;, &#39;personId&#39;: &#39;a9f275934f59110096757b656ba41382&#39;}
    
    {&#39;pid&#39;: &#39;28610144220343&#39;, &#39;entName&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;终端(深圳)有限公司&#39;, &#39;entType&#39;: &#39;有限责任公司(外商投资、非独资)&#39;, &#39;validityFrom&#39;: &#39;2003-12-25&#39;, &#39;domicile&#39;: &#39;深圳市龙岗区坂田&lt;em&gt;华为&lt;/em&gt;基地B区2号楼&#39;, &#39;entLogo&#39;: &#39;https://zhengxin-pub.cdn.bcebos.com/logopic/a638462a7a48ab79f84b7db2c0e64230_fullsize.jpg&#39;, &#39;openStatus&#39;: &#39;开业&#39;, &#39;legalPerson&#39;: &#39;赵明路&#39;, &#39;tags&#39;: {&#39;laTaxer&#39;: &#39;&lt;span class=&#34;zx-ent-tag laTaxer&#34;&gt;A级纳税人(2020)&lt;/span&gt;&#39;}, &#39;logoWord&#39;: &#39;华为终端&#39;, &#39;titleName&#39;: &#39;华为终端(深圳)有限公司&#39;, &#39;titleLegal&#39;: &#39;赵明路&#39;, &#39;titleDomicile&#39;: &#39;深圳市龙岗区坂田华为基地B区2号楼&#39;, &#39;levelAtaxer&#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], &#39;regCap&#39;: &#39;1,598,080.8万&#39;, &#39;scope&#39;: &#39;一般经营项目是：开发、生产、销售通信电子产品及配套产品，并提供技术咨询和售后服务。进出口业务（不含分销)。，许可经营项目是：&#39;, &#39;regNo&#39;: &#39;815503006447640305&#39;, &#39;hitReason&#39;: [{&#39;企业名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;终端(深圳)有限公司&#39;}, {&#39;网站名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;HARMONYOS网站&#39;}, {&#39;地址&#39;: &#39;深圳市龙岗区坂田&lt;em&gt;华为&lt;/em&gt;基地B区2号楼&#39;}], &#39;labels&#39;: {&#39;opening&#39;: {&#39;text&#39;: &#39;开业&#39;, &#39;style&#39;: &#39;blue&#39;, &#39;fontColor&#39;: &#39;#1EA930&#39;, &#39;bgColor&#39;: &#39;#EBF6EC&#39;}}, &#39;personTitle&#39;: &#39;法定代表人&#39;, &#39;personId&#39;: &#39;a9f275934f59110096757b656ba41382&#39;}
    
    {&#39;pid&#39;: &#39;30140456955334&#39;, &#39;entName&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;终端有限公司&#39;, &#39;entType&#39;: &#39;有限责任公司(外商投资企业法人独资)&#39;, &#39;validityFrom&#39;: &#39;2012-11-23&#39;, &#39;domicile&#39;: &#39;广东省东莞市松山湖园区新城路2号&#39;, &#39;entLogo&#39;: &#39;https://zhengxin-pub.cdn.bcebos.com/logopic/cc662a5d573b793e9c5b84031350ced0_fullsize.jpg&#39;, &#39;openStatus&#39;: &#39;开业&#39;, &#39;legalPerson&#39;: &#39;赵明路&#39;, &#39;tags&#39;: {&#39;laTaxer&#39;: &#39;&lt;span class=&#34;zx-ent-tag laTaxer&#34;&gt;A级纳税人(2020)&lt;/span&gt;&#39;}, &#39;logoWord&#39;: &#39;华为终端&#39;, &#39;titleName&#39;: &#39;华为终端有限公司&#39;, &#39;titleLegal&#39;: &#39;赵明路&#39;, &#39;titleDomicile&#39;: &#39;广东省东莞市松山湖园区新城路2号&#39;, &#39;levelAtaxer&#39;: [2020, 2018, 2019, 2016, 2017, 2014, 2015], &#39;regCap&#39;: &#39;70,000.0万&#39;, &#39;scope&#39;: &#39;开发、生产、销售：通信及电子产品、计算机、卫星电视接收天线、高频头、数字卫星电视接收机及前述产品的配套产品，并提供技术咨询和售后服务；开发、生产、销售：医疗器械（第一类、第二类、第三类医疗器械），并提供技术咨询和售后服务；增值电信业务经营；佣金代理；货物或技术进出口（国家禁止或涉及行政审批的货物和技术进出口除外）。(依法须经批准的项目，经相关部门批准后方可开展经营活动)&#39;, &#39;regNo&#39;: &#39;815518000494355853&#39;, &#39;hitReason&#39;: [{&#39;企业名称&#39;: &#39;&lt;em&gt;华为&lt;/em&gt;终端有限公司&#39;}], &#39;labels&#39;: {&#39;opening&#39;: {&#39;text&#39;: &#39;开业&#39;, &#39;style&#39;: &#39;blue&#39;, &#39;fontColor&#39;: &#39;#1EA930&#39;, &#39;bgColor&#39;: &#39;#EBF6EC&#39;}}, &#39;personTitle&#39;: &#39;法定代表人&#39;, &#39;personId&#39;: &#39;a9f275934f59110096757b656ba41382&#39;}
</code></pre></div><br>
<h2 id="完整爬虫">完整爬虫</h2>
<p>经过刚刚的几个步骤，我们现在只需要</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">query</span> <span class="o">=</span> <span class="s1">&#39;华为&#39;</span>  
<span class="n">max_pages</span> <span class="o">=</span> <span class="mi">10</span>   <span class="c1">#获取前10页的企业信息数据</span>

<span class="c1">#存储数据</span>
<span class="n">csvf</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;企业信息.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;titleName&#39;</span><span class="p">,</span> <span class="s1">&#39;titleDomicile&#39;</span><span class="p">,</span> <span class="s1">&#39;titleLegal&#39;</span><span class="p">,</span> <span class="s1">&#39;validityFrom&#39;</span><span class="p">,</span> <span class="s1">&#39;regCap&#39;</span><span class="p">,</span> <span class="s1">&#39;regNo&#39;</span><span class="p">,</span> <span class="s1">&#39;scope&#39;</span><span class="p">]</span>
<span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
<span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>

<span class="c1">#访问</span>
<span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_pages</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://aiqicha.baidu.com/s/advanceFilterAjax?q=</span><span class="si">{q}</span><span class="s1">&amp;t=&amp;p=</span><span class="si">{p}</span><span class="s1">&amp;s=10&amp;o=0&amp;f=%7B%7D&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">quote</span><span class="p">(</span><span class="n">query</span><span class="p">),</span> <span class="n">p</span><span class="o">=</span><span class="n">page</span><span class="p">)</span>

    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.55 Safari/537.36&#39;</span><span class="p">,</span>
           <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;https://aiqicha.baidu.com/s?q=</span><span class="si">{q}</span><span class="s1">&amp;t=0&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">quote</span><span class="p">(</span><span class="n">query</span><span class="p">))}</span>

    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
    
    <span class="c1">#解析数据</span>
    <span class="k">for</span> <span class="n">com</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;data&#39;</span><span class="p">][</span><span class="s1">&#39;resultList&#39;</span><span class="p">]:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">fieldname</span> <span class="ow">in</span> <span class="n">fieldnames</span><span class="p">:</span>
            <span class="n">data</span><span class="p">[</span><span class="n">fieldname</span><span class="p">]</span> <span class="o">=</span> <span class="n">com</span><span class="p">[</span><span class="n">fieldname</span><span class="p">]</span>
        <span class="c1">#写入csv</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        

<span class="n">csvf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><br>
<h2 id="运行结果">运行结果</h2>
<p>采集10页的爬虫运行结束后，尝试读取 <strong>企业信息.csv</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span><span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;企业信息.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/05-data.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>中文金融领域知识图谱的数据集ChainKnowledgeGraph</title>
      <link>https://textdata.cn/blog/chain_knowledge_graph/</link>
      <pubDate>Mon, 06 Dec 2021 16:42:10 +0600</pubDate>
      
      <guid>/blog/chain_knowledge_graph/</guid>
      <description>本文围绕金融领域，推出面向上市公司的产业链图谱。  </description>
      <content:encoded><![CDATA[<p>领域知识图谱的数据集，当前还比较缺失，而作为构建难度最大的产业链图谱领域更为空白。产业链作为产业经济学中的一个概念，是各个产业部门之间基于一定的技术经济关联，并依据特定的逻辑关系和时空布局关系客观形成的链条式关联关系形态。从本质上来说，产业链的本质是用于描述一个具有某种内在联系的企业群结构，产业链中大量存在着上下游关系和相互价值的交换，上游环节向下游环节输送产品或服务，下游环节向上游环节反馈信息。</p>
<p>作者已经先后发布两大领域的实体图谱数据： <br>
1、情报领域【武器装备知识图谱】，地址：https://github.com/liuhuanyong/QAonMilitaryKG<br>
2、医疗领域【医疗知识图谱】，地址： <a href="https://github.com/liuhuanyong/QASystemOnMedicalKG">https://github.com/liuhuanyong/QASystemOnMedicalKG</a></p>
<p>当前，为了进一步推动产业发展，本文围绕金融领域，推出面向上市公司的产业链图谱。</p>
<p>项目地址：</p>

<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>

<br>
<h2 id="一项目构成">一、项目构成</h2>
<p>产业链知识图谱包括A股上市公司、行业和产品共3类实体，包括上市公司所属行业关系、行业上级关系、产品上游原材料关系、产品下游产品关系、公司主营产品、产品小类共6大类。</p>
<p>通过数据处理、抽取，最终建成图谱规模数十万，其中包括上市公司4,654家，行业511个，产品95,559条、上游材料56,824条，上级行业480条，下游产品390条，产品小类52,937条，所属行业3,946条。  <br>

<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>
</p>
<br>
<h2 id="二项目构建">二、项目构建</h2>
<p>1、实体构建<br>
1）上市公司<br>
目前上市公司已经达到四千多家，是我国重要的公司代表与行业标杆，本图谱选取上市公司作为基础实体之一。通过交易所公开信息中，可以得到上市公司代码、全称、简称、注册地址、挂牌等多个信息。</p>

<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>

<p>2）行业分类<br>
行业是产业链图谱中另一个核心内容，也是承载产业、公司及产品的一个媒介，通过这一领携作用，可以生产出大量的行业指数、热点行业等指标。<br>
目前关于行业，已经陆续出现多个行业规范，代表性的有申万三级行业分类、国民经济行业分类等。中国上市公司所属行业的分类准则是依据营业收入等财务数据为主要分类标准和依据，所采用财务数据为经过会计事务所审计并已公开披露的合并报表数据。<br>
2021年6月，申万发布了2021版的行业分类规范，将1级行业从28个调整至31个、2级行业从104个调整至134个、3级行业从227个调整至346个，新增1级行业美容护理等，新增2级行业，并将上市公司进行了归属。本图谱选用申万行业作为基础数据。<br>

<figure >
    
        <img src="img/4.png" width="800" />
    
    
</figure>
</p>
<p>3）业务产品 <br>
业务产品主要指公司主营范围、经营的产品，用于对一个公司的定位。可以从公司的经营范围、年报等文本中进行提取得到。<br>

<figure >
    
        <img src="img/5.png" width="800" />
    
    
</figure>
</p>
<p>2、关系构建 <br>
1）公司所属行业 <br>
通过公开的上市公司行业分类表，可以得到上市公司所对应的行业分类数据。 <br>

<figure >
    
        <img src="img/6.png" width="800" />
    
    
</figure>
</p>
<p>2）行业上级关系 <br>
通过公开的行业三级分类情况，可以通过组合的形式得到行业之间的上级关系数据。 <br>

<figure >
    
        <img src="img/7.png" width="800" />
    
    
</figure>
</p>
<p>3）公司主营产品关系<br>
上市公司的经营产品数据可以从两个方面来获得，一个是从公司简介中的经营范围中结合制定的规则进行提取，另一个是从公司每年发布的半年报、年报中进行提取。这些报告中会有按经营业务、经营产品、经营地域等几个角度对公司的营收占比进行统计，也可以通过制定规则的方式进行提取。第二种方法中，由于已经有统计数据，所以我们可以根据占比数据大小，对主营产品这一关系进行赋值。<br>

<figure >
    
        <img src="img/8.png" width="800" />
    
    
</figure>
</p>
<p>4）产品之间的上下游关系<br>
产品之间的上下游关系，是展示产品之间传导逻辑关系的一个重要方法，包括上游原材料以及下游产品两大类。我们可以多种来获取：<br>
一种是基于规则模式匹配的方式进行抽取，如抽取上游原材料这一关系可以由诸如&quot;a是b的原料/原材料/主要构件/重要原材料/  上游原料&quot;的模式进行抽取&quot;，而下游产品，则同理可以通过&quot;A是B的下游成品/产品&quot;等模式进行提取。<br>
另一种是基于序列标注的提取。还有一种是基于现有结构化知识图谱的提取，例如已经结构化好的百科知识三元组，可以通过设定谓词及其扩展进行过滤。<br>

<figure >
    
        <img src="img/9.png" width="800" />
    
    
</figure>
</p>
<p>5）产品之间的小类关系<br>
对于一个产品而言，其是有大小层级分类的，在缺少大类产品名称的时候，可以通过计算小类产品来得到相应指标。与产品之间的上下游数据类似，可以通过启发式规则的方式进行提取，如“A是一种B”，也可以通过字符之间的组成成分进行匹配生成，如“螺纹钢”是“精细螺纹钢”的一个大类。<br>

<figure >
    
        <img src="img/10.png" width="800" />
    
    
</figure>
</p>
<br>
<h2 id="三项目运行">三、项目运行</h2>
<p>1、data文件夹下包括了本项目的数据信息：<br>
1)company.json:公司实体数据<br>
2)industry.json:行业实体数据 <br>
3)product.json:产品实体数据 <br>
4)company_industry.json:公司-行业关系数据 <br>
5)industry_industry.json:行业-行业关系数据 <br>
6)product_product.json:产品-产品数据 <br>
7)company_product.json:公司-产品数据</p>
<p>2、项目运行:<br>
python build_graph.py</p>
<br>
<h2 id="四项目总结">四、项目总结</h2>
<p>产业链图谱是众多领域知识图谱中较为棘手的一种，本项目通过现有的数据，借助数据处理、结构化提取方式，设计、构建并形成了一个节点100,718，关系边169,153的十万级别产业链图谱。就产业链图谱的构建而言，我们需要至少从以上三个方面加以考虑：</p>
<ul>
<li>其一，产业链的主观性与标准性。产业链的主观性较强，不同的人对产业链的构建、产业链节点、关系的类型，产业链的颗粒度问题都有不同的理解。不同的设定会直接导致不同的应用结果。正如我们所看到的，目前存在不同的行业标准，不同的网站、机构也将公司归为不同的行业。</li>
<li>其二，产业链的动态性和全面性。产业链需要具备足够大的复用性和扩展性，几千家上市公司实际上是冰山一角。国内有几千万家公司，而且不断会有新增，如何将新增的公司融入到这个额产业链中，也是一个很大挑战。此外，产业本身是动态的， 随着行业的发展，不断会有新的行业出现。如何捕捉这种行业的变化，使得整个图谱变得与时俱进，也是需要考量的点。</li>
<li>其三，产业链的定量推理特性。单纯定性的构建产业链知识图谱，如果没有足够的参数，仅有知识表达是无法进行推理的，推理要求知识图谱Schema具备节点间推理传导的必备参数，以及影响推理传导的其他关键参数。对于必备参数来说，从公司到产品必须有主营占比、市场占比、产能占比等数据，从产品到产品必须有成本占比和消耗占比等数据。</li>
</ul>
<br>
<h2 id="参考数据来源">参考数据来源</h2>
<p>1、申万行业：http://www.swsindex.com<br>
2、深交所: <a href="http://www.szse.cn">http://www.szse.cn</a><br>
3、上交所: <a href="http://www.sse.com.cn">http://www.sse.com.cn</a></p>
<p>If any question about the project or me ,see <a href="https://liuhuanyong.github.io/">https://liuhuanyong.github.io/</a></p>
<p>如有自然语言处理、知识图谱、事理图谱、社会计算、语言资源建设等问题或合作，可联系我： <br>
1、我的github项目介绍：https://liuhuanyong.github.io<br>
2、我的csdn博客：https://blog.csdn.net/lhy2014<br>
3、about me:刘焕勇，lhy_<a href="mailto:in_blcu@126.com">in_blcu@126.com</a>.      <br>
4、我的技术公众号:老刘说NLP</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>中文语义常用词典ChineseSemanticKB</title>
      <link>https://textdata.cn/blog/chinese_semantic_kb/</link>
      <pubDate>Mon, 06 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/chinese_semantic_kb/</guid>
      <description>面向中文处理的12类、百万规模的语义常用词典，包括34万抽象语义库、34万反义语义库、43万同义语义库等，可支持句子扩展、转写、事件抽象与泛化等多种应用场景。</description>
      <content:encoded><![CDATA[<h2 id="chinesesemantickb">ChineseSemanticKB</h2>
<p>ChineseSemanticKB,chinese semantic knowledge base, 面向中文处理的12类、百万规模的语义常用词典，包括34万抽象语义库、34万反义语义库、43万同义语义库等，可支持句子扩展、转写、事件抽象与泛化等多种应用场景。</p>
<br>
<h2 id="项目介绍">项目介绍</h2>
<p>语义知识库是自然语言处理中十分重要的一个基础资源，与学术界追求算法模型不同，工业界的自然语言处理对于底层的词汇知识库、语义知识库等多种资源依赖度很高，具体体现在：<br>
1、具有落地场景的自然语言处理任务都是业务高度相关，一个业务需求刚进去，需要解决的是业务的词汇问题，无基础词库，无项目冷启动；<br>
2、规则和正则启动下的工业级应用，规则的扩展、泛化都需要底层的词汇网络做支撑；<br>
3、目前包括搜索、问答、舆情监控、事件分析等应用，与标签体系的运作关系密切，而这与先验的底层词汇库依赖性很强；<br>
4、自然语言场景越来越关注推理层面，即所谓的“认知”层面，认知背后的各种逻辑关系库，是驱动这一决策的根本途径；<br>
5、当前，面向中文开源词库的工作存在少量、分散的状态，无论从规模，还是质量，都需要进一步聚合；<br>
因此，我从过往的开源工作中进一步抽离和整理，形成了中文处理的12类、百万规模的语义常用词典，包括34万抽象语义库、34万反义语义库、43万同义语义库等，用于相关下游任务。</p>
<p>项目放于dict当中，可直接下载，不建议二次建库共享，尊重开源。</p>
<br>
<h2 id="词库的类别">词库的类别</h2>
<table>
<thead>
<tr>
<th style="text-align:left">词库类型</th>
<th style="text-align:center">词库规模</th>
<th style="text-align:center">词库举例</th>
<th style="text-align:center">词库应用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">抽象关系库</td>
<td style="text-align:center">346,048</td>
<td style="text-align:center">座椅,抽象,家具</td>
<td style="text-align:center">事件抽象与泛化，人民币贬值到货币贬值，再到美元贬值，可支持查询扩展、推荐等任务</td>
</tr>
<tr>
<td style="text-align:left">反义关系库</td>
<td style="text-align:center">34,380</td>
<td style="text-align:center">开心@苦恼</td>
<td style="text-align:center">可用于句子改写，开心改苦恼，支持数据增强，句子生成</td>
</tr>
<tr>
<td style="text-align:left">同义关系库</td>
<td style="text-align:center">424,826</td>
<td style="text-align:center">开心@高兴</td>
<td style="text-align:center">可用于查询扩展、数据增强，也可结合抽象关系库完成推荐等任务</td>
</tr>
<tr>
<td style="text-align:left">简称关系库</td>
<td style="text-align:center">136,081</td>
<td style="text-align:center">北京大学@北大</td>
<td style="text-align:center">可用于句子标准化、句子改写、实体消歧等任务</td>
</tr>
<tr>
<td style="text-align:left">程度副词</td>
<td style="text-align:center">222</td>
<td style="text-align:center">极其,2.0</td>
<td style="text-align:center">可用于情感强度计算，带情感色彩的句子生成</td>
</tr>
<tr>
<td style="text-align:left">否定词</td>
<td style="text-align:center">586</td>
<td style="text-align:center">不,无,没有</td>
<td style="text-align:center">可用于情感计算等任务</td>
</tr>
<tr>
<td style="text-align:left">节日时间词</td>
<td style="text-align:center">54</td>
<td style="text-align:center">春节、五四节</td>
<td style="text-align:center">可用于时间词识别等任务</td>
</tr>
<tr>
<td style="text-align:left">量比词</td>
<td style="text-align:center">7</td>
<td style="text-align:center">占比、环比、同比</td>
<td style="text-align:center">可用于金融领域指标类数据提取任务</td>
</tr>
<tr>
<td style="text-align:left">数量介词</td>
<td style="text-align:center">24</td>
<td style="text-align:center">大约、达到、超过</td>
<td style="text-align:center">可用于金融事件抽象或主干化的搭配词处理任务</td>
</tr>
<tr>
<td style="text-align:left">停用词</td>
<td style="text-align:center">3,861</td>
<td style="text-align:center">？、的、着</td>
<td style="text-align:center">常规的文本特征提取等任务</td>
</tr>
<tr>
<td style="text-align:left">修饰副词</td>
<td style="text-align:center">222</td>
<td style="text-align:center">所、有所</td>
<td style="text-align:center">可结合程度副词完成情感强度计算等任务</td>
</tr>
<tr>
<td style="text-align:left">情态词</td>
<td style="text-align:center">77</td>
<td style="text-align:center">肯定、应该、大概</td>
<td style="text-align:center">可用于句子主观性计算、舆情与可信度计算</td>
</tr>
</tbody>
</table>
<br>
<h2 id="总结">总结</h2>
<p>1、本项目开源了一个目前可用于事件处理以及工业舆情的12类语义词库，总规模数目一百余万；<br>
2、本项目开源的34万抽象语义库、34万反义语义库、43万同义语义库，在作者的实际工作中【事件处理、事理抽取、事件推理】等有重要用途;<br>
3、中文常用语义常用词典，均来源于公开文本+人工整理+机器抽取形成，其中若有质量不高之处，可积极批评指正;<br>
4、中文开源事业还是要坚持做下去，尽可能地缩短自然语言处理学术界和工业界之间的鸿沟。</p>
<blockquote>
<p>If any question about the project or me ,see <a href="https://liuhuanyong.github.io/">https://liuhuanyong.github.io/</a>.<br>
如有自然语言处理、知识图谱、事理图谱、社会计算、语言资源建设等问题或合作，可联系我：     <br>
1、我的github项目介绍：https://liuhuanyong.github.io  <br>
2、我的csdn技术博客：https://blog.csdn.net/lhy2014 <br>
3、我的联系方式: 刘焕勇，中国科学院软件研究所，lhy_<a href="mailto:in_blcu@126.com">in_blcu@126.com</a>. <br>
4、我的共享知识库项目：刘焕勇，数据地平线，http://www.openkg.cn/organization/datahorizon.<br>
5、我的工业项目：刘焕勇，数据地平线，大规模实时事理学习系统：https://xueji.datahorizon.cn.  <br>
6、我的工业项目：刘焕勇，数据地平线，面向事件和语义的自然语言处理工具箱：https://nlp.datahorizon.cn</p>
</blockquote>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>ashares库|A股市场历史行情数据</title>
      <link>https://textdata.cn/blog/ashares/</link>
      <pubDate>Sun, 05 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/ashares/</guid>
      <description>&lt;h1 id=&#34;ashares&#34;&gt;ashares&lt;/h1&gt;
&lt;p&gt;代码非原创，是对项目&lt;a href=&#34;https://github.com/mpquant/Ashare&#34;&gt;Ashare&lt;/a&gt;的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。&lt;/p&gt;
&lt;h2 id=&#34;功能特点&#34;&gt;功能特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年&lt;/li&gt;
&lt;li&gt;双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。&lt;/li&gt;
&lt;li&gt;全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理&lt;/li&gt;
&lt;li&gt;和其他行情库（tushare等）比的优点是什么？ &amp;ndash; 简单 轻量 便携 开源&lt;/li&gt;
&lt;li&gt;Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 &lt;code&gt;get_price()&lt;/code&gt; 看完下面例子就会了&lt;/li&gt;
&lt;li&gt;Ashare可以用在任何需要量化研究，量化分析的场合&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip install akshares
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt;  &lt;span class=&#34;nn&#34;&gt;ashares&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
    
&lt;span class=&#34;c1&#34;&gt;# 证券代码兼容多种格式 通达信，同花顺，聚宽&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# sh000001 (000001.XSHG)    sz399006 (399006.XSHE)   sh600519 ( 600519.XSHG ) &lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh000001&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;#默认获取今天往前5天的日线实时行情&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数日线行情&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;000001.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2021-04-30&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#可以指定结束日期，获取历史行情&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数历史行情&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                        

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;000001.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2018-06-15&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#支持&amp;#39;1d&amp;#39;日, &amp;#39;1w&amp;#39;周,  &amp;#39;1M&amp;#39;月  &lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数历史周线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh600519&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;15m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;#分钟线实时行情，可用&amp;#39;1m&amp;#39;,&amp;#39;5m&amp;#39;,&amp;#39;15m&amp;#39;,&amp;#39;30m&amp;#39;,&amp;#39;60m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;贵州茅台15分钟线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;600519.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;60m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#分钟线实时行情，可用&amp;#39;1m&amp;#39;,&amp;#39;5m&amp;#39;,&amp;#39;15m&amp;#39;,&amp;#39;30m&amp;#39;,&amp;#39;60m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;贵州茅台60分钟线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#上证指数日线行情----------------------------------------------------
              open    close     high      low       volume
2021-06-07  3597.14  3599.54  3600.38  3581.90  303718677.0
2021-06-08  3598.75  3580.11  3621.52  3563.25  304491470.0
2021-06-09  3576.80  3591.40  3598.71  3572.64  298323296.0
2021-06-10  3587.53  3610.86  3624.34  3584.13  318174808.0
2021-06-11  3614.11  3589.75  3614.40  3587.15  360554970.0


#贵州茅台60分钟线----------------------------------------------------
                       open    close     high      low    volume
2021-06-10 14:00:00  2237.00  2224.16  2245.00  2222.00   4541.53
2021-06-10 15:00:00  2222.21  2238.48  2240.34  2222.21   4146.88
2021-06-11 10:30:00  2239.00  2220.00  2244.00  2197.86  12030.00
2021-06-11 11:30:00  2220.01  2210.18  2231.80  2200.18   4868.00
2021-06-11 14:00:00  2210.10  2223.35  2224.48  2206.01   4544.00
2021-06-11 15:00:00  2223.33  2178.81  2226.80  2178.81  12529.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="ashares">ashares</h1>
<p>代码非原创，是对项目<a href="https://github.com/mpquant/Ashare">Ashare</a>的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。</p>
<h2 id="功能特点">功能特点</h2>
<ul>
<li>双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年</li>
<li>双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。</li>
<li>全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理</li>
<li>和其他行情库（tushare等）比的优点是什么？ &ndash; 简单 轻量 便携 开源</li>
<li>Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 <code>get_price()</code> 看完下面例子就会了</li>
<li>Ashare可以用在任何需要量化研究，量化分析的场合</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install akshares
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span>  <span class="nn">ashares</span> <span class="kn">import</span> <span class="n">get_price</span><span class="p">,</span> 
    
<span class="c1"># 证券代码兼容多种格式 通达信，同花顺，聚宽</span>
<span class="c1"># sh000001 (000001.XSHG)    sz399006 (399006.XSHE)   sh600519 ( 600519.XSHG ) </span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;sh000001&#39;</span><span class="p">,</span> <span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1d&#39;</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>      <span class="c1">#默认获取今天往前5天的日线实时行情</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数日线行情</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;000001.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1d&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">end_date</span><span class="o">=</span><span class="s1">&#39;2021-04-30&#39;</span><span class="p">)</span>  <span class="c1">#可以指定结束日期，获取历史行情</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数历史行情</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>                        

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;000001.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1w&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">end_date</span><span class="o">=</span><span class="s1">&#39;2018-06-15&#39;</span><span class="p">)</span>  <span class="c1">#支持&#39;1d&#39;日, &#39;1w&#39;周,  &#39;1M&#39;月  </span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数历史周线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span> 

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;sh600519&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;15m&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>     <span class="c1">#分钟线实时行情，可用&#39;1m&#39;,&#39;5m&#39;,&#39;15m&#39;,&#39;30m&#39;,&#39;60m&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;贵州茅台15分钟线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;600519.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;60m&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>  <span class="c1">#分钟线实时行情，可用&#39;1m&#39;,&#39;5m&#39;,&#39;15m&#39;,&#39;30m&#39;,&#39;60m&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;贵州茅台60分钟线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#上证指数日线行情----------------------------------------------------
              open    close     high      low       volume
2021-06-07  3597.14  3599.54  3600.38  3581.90  303718677.0
2021-06-08  3598.75  3580.11  3621.52  3563.25  304491470.0
2021-06-09  3576.80  3591.40  3598.71  3572.64  298323296.0
2021-06-10  3587.53  3610.86  3624.34  3584.13  318174808.0
2021-06-11  3614.11  3589.75  3614.40  3587.15  360554970.0


#贵州茅台60分钟线----------------------------------------------------
                       open    close     high      low    volume
2021-06-10 14:00:00  2237.00  2224.16  2245.00  2222.00   4541.53
2021-06-10 15:00:00  2222.21  2238.48  2240.34  2222.21   4146.88
2021-06-11 10:30:00  2239.00  2220.00  2244.00  2197.86  12030.00
2021-06-11 11:30:00  2220.01  2210.18  2231.80  2200.18   4868.00
2021-06-11 14:00:00  2210.10  2223.35  2224.48  2206.01   4544.00
2021-06-11 15:00:00  2223.33  2178.81  2226.80  2178.81  12529.00
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyCatFlow库|类别数据时间序列可视化库</title>
      <link>https://textdata.cn/blog/pycatflow/</link>
      <pubDate>Sun, 05 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pycatflow/</guid>
      <description>大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。</description>
      <content:encoded><![CDATA[<p>大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。</p>
<h2 id="pycatflow">PyCatFlow</h2>
<p>PyCatFlow 是一个 Python 包，用于可视化<strong>类别数据的时间变化</strong>。它的灵感来自 Bernhard Rieder 的可视化工具 <strong>RankFlow</strong>，它允许将排名列表随着时间的推移进行可视化，例如，Google 或 YouTube 上查询的搜索结果的变化。在我看来，尽管它的用户界面极简,RankFlow 是一个非常有用的工具，而且我很难为其准备数据。事实证明，这些困难主要源于“滥用”RankFlow，或者用更积极的术语来说，它源于将 RankFlow 用于其设计目的以外的其他目的。</p>
<h2 id="背景了解rankflow">背景：了解RankFlow</h2>
<p>RankFlow 允许比较排名列表（随着时间的推移）。 在最简单的形式中，它需要以每列代表一个排名列表的方式排列表格数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Time 1,Time 2,Time 3,Time 4
Item 1,Item 1,Item 1,Item 2
Item 2,Item 4,Item 2,Item 1
Item 3,Item 2,Item 4,Item 4
Item 4,Item 3,Item 5,Item 5
</code></pre></div><p>每个排名列表都可以通过权重进行补充，从而为数据添加另一层信息。 例如，如果我们采用 YouTube 搜索结果数据，则可以将观看次数、赞成票数或赞成票反对率用作权重信息。 为简单起见，示例数据仅由排名列表组成，并在以下流程图中显示结果。</p>

<figure >
    
        <img src="img/rankflow.png" width="800" />
    
    
</figure>

<p>为了加快图表的后处理速度，我决定创建一个类似于 RankFlow 的可视化工具，它非常适合不包含显式排名信息但可能包含额外分类数据的时间数据。</p>
<h2 id="pycatflow快速上手">PyCatFlow快速上手</h2>

<figure >
    
        <img src="img/sample_viz.png" width="800" />
    
    
</figure>

<p>如果我们用两种不同颜色，灰色和绿色分别表示男生和女生，然后每一个格子表示一类电影，横轴是男生和女生随着时间推移看的不同的电影，这样我们就可以一目了然男生和女生的喜好的变化，真的是太直观了！
PyCatFlow大大方便了我们对于类别特征随着时间变化的分析。</p>
<p><strong>准备数据</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/sample_data_ChatterBot_Requirements.csv&#34;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">column</th>
<th style="text-align:left">items</th>
<th style="text-align:left">category</th>
<th style="text-align:right">column order</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">fuzzywuzzy</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">requests</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">requests-oauthlib</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">pymongo</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">jsondatabase</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pycatflow</span> <span class="k">as</span> <span class="nn">pcf</span>

<span class="c1"># Load and parse data from file</span>
<span class="n">fname</span><span class="o">=</span><span class="s2">&#34;data/sample_data_ChatterBot_Requirements.csv&#34;</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="s2">&#34;column&#34;</span><span class="p">,</span> <span class="n">nodes</span><span class="o">=</span><span class="s2">&#34;items&#34;</span><span class="p">,</span> <span class="n">categories</span><span class="o">=</span><span class="s2">&#34;category&#34;</span><span class="p">,</span> <span class="n">column_order</span><span class="o">=</span><span class="s2">&#34;column order&#34;</span><span class="p">)</span>

<span class="s1">&#39;&#39;&#39;
</span><span class="s1">visualize(data, spacing=50, node_size=10, width=None, height=None, minValue=1, maxValue=10, node_scaling=&#34;linear&#34;,
</span><span class="s1">          connection_type=&#34;semi-curved&#34;, color_startEnd=True, color_categories=True, nodes_color=&#34;gray&#34;,
</span><span class="s1">          start_node_color=&#34;green&#34;, end_node_color=&#34;red&#34;, palette=None, show_labels=True,
</span><span class="s1">          label_text=&#34;item&#34;, label_font=&#34;sans-serif&#34;, label_color=&#34;black&#34;, label_size=5,
</span><span class="s1">          label_shortening=&#34;clip&#34;, label_position=&#34;nodes&#34;, line_opacity=0.5, line_stroke_color=&#34;white&#34;,
</span><span class="s1">          line_stroke_width=0.5, line_stroke_thick=0.5, legend=True, sort_by=&#34;frequency&#34;)
</span><span class="s1">&#39;&#39;&#39;</span>

<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="c1">#save visualization to files</span>
<span class="n">viz</span><span class="o">.</span><span class="n">savePng</span><span class="p">(</span><span class="s1">&#39;sample_viz.png&#39;</span><span class="p">)</span>
<span class="n">viz</span><span class="o">.</span><span class="n">saveSvg</span><span class="p">(</span><span class="s1">&#39;sample_viz.svg&#39;</span><span class="p">)</span>

<span class="c1">#show visualization</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Another option is to visualize the graph with curved connections.</span>
<span class="c1"># The implementation of this connection type draws on https://github.com/bernorieder/RankFlow</span>

<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">connection_type</span><span class="o">=</span><span class="s1">&#39;curved&#39;</span><span class="p">)</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The third option are straight connections between nodes</span>
<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">connection_type</span><span class="o">=</span><span class="s1">&#39;straight&#39;</span><span class="p">)</span>

<span class="c1"># show visualization</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>

<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/bumatic/PyCatFlow">https://github.com/bumatic/PyCatFlow</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>DataSpell数据挖掘编辑器</title>
      <link>https://textdata.cn/blog/data_spell/</link>
      <pubDate>Wed, 01 Dec 2021 20:40:10 +0600</pubDate>
      
      <guid>/blog/data_spell/</guid>
      <description>python数据挖掘生产力工具</description>
      <content:encoded><![CDATA[<p>Dataspell——一个专为数据科学家制作的IDE。 一方面，您拥有 Jupyter 以实现最大的交互性，另一方面拥有 PyCharm 作为专业环境。</p>
<br>
<h2 id="什么是dataspell">什么是DataSpell？</h2>
<p>Dataspell 是专为数据科学家制作的 IDE（集成开发环境）。 它由 Jetbrains ( IntelliJ Idea 和 PyCharm 背后的一家公司)开发，支持所有主要操作系统平台，包括 ARM (M1) Mac。</p>
<p>DataSpell亮点：</p>
<ul>
<li>原生notebook体验——如果你使用过 Jupyter 会有宾至如归的感觉。</li>
<li>智能代码辅助 - 有点像 Jupyter 和 PyCharm 生了孩子。</li>
<li>Markdown 和 JavaScript — 根据需要设置notebook样式并嵌入数据可视化。</li>
<li>交互式外壳 - REPL 控制台 + 语法检查。</li>
<li>SQL 数据库支持 — 连接到数据库、直观地检查数据、导入/导出数据等。</li>
</ul>
<p>打开dataspell，很像PyCharm</p>

<figure >
    
        <img src="img/dataspell%e7%95%8c%e9%9d%a2.png" width="800" />
    
    
</figure>

<br>
<h2 id="创建你的第一个notebook">创建你的第一个notebook</h2>
<p>该过程几乎与任何其他 Jetbrains 产品相同。 点击根目录，进入新建——Jupyter Notebook：</p>

<figure >
    
        <img src="img/dataspell%e7%95%8c%e9%9d%a22.png" width="800" />
    
    
</figure>

<p>我将其命名为 first_notebook.ipynb。</p>

<figure >
    
        <img src="img/first_notebook.png" width="800" />
    
    
</figure>

<p>样式是个人喜好的东西，但你不能说设计不是一流的。</p>
<p>在创建笔记本时，您可能已经看到创建 R 脚本和 Markdown 文件的选项。 一旦 Python 正常运行，Dataspell 将同时支持 R 和 Julia（来源）。</p>
<p>现在让我们探索基本的 Python 和数据科学库是如何工作的。 下图显示了 Numpy 数组和 Pandas DataFrame：</p>

<figure >
    
        <img src="img/numpypandas.png" width="800" />
    
    
</figure>

<p>正如预期的那样。 我喜欢 Numpy 数组打印为 Pandas 系列的方式，但这只是个人喜好。
Matplotlib 呢？ 这是一个真正简单的散点图：</p>

<figure >
    
        <img src="img/matplotlib.png" width="800" />
    
    
</figure>

<p>我更喜欢出版物可视化的白色背景，但在晚上工作时眼睛无法长时间工作，夜晚我喜欢黑色背景。 干得好，Dataspell。</p>
<p>接下来，让我们探索每个 IDE 必须具备的功能——智能编码辅助。</p>
<br>
<h2 id="智能编码辅助">智能编码辅助</h2>
<p>我不喜欢 JupyterLab 的是缺乏编码帮助。 确实有插件，但它们的帮助远不及专业的 IDE。 我不喜欢 IDE 的是缺乏交互性。 希望 Dataspell 将是两全其美的。</p>
<p>让我们尝试导入 Numpy，看看会发生什么：</p>

<figure >
    
        <img src="img/assitence.png" width="800" />
    
    
</figure>

<p>支持自动代码提示——它完美无缺； 也支持代码未正确编写时的警告/错误，例如函数add_integers 应该返回一个整数，但它故意返回一个浮点数：</p>

<figure >
    
        <img src="img/add_integers.png" width="800" />
    
    
</figure>

<br>
<h2 id="支持markdown">支持markdown</h2>
<p>首先，将鼠标悬停在单元格上方并单击添加 Markdown 单元格：</p>

<figure >
    
        <img src="img/markdown.png" width="800" />
    
    
</figure>

<p>另一种方法是单击代码下拉列表并将单元格类型切换为 Markdown。</p>
<p>下面是一些 Markdown 代码供您尝试：</p>

<figure >
    
        <img src="img/markdown2.png" width="800" />
    
    
</figure>

<p>这是运行单元格时的样子：</p>

<figure >
    
        <img src="img/markdown3.png" width="800" />
    
    
</figure>

<h2 id="支持数据库">支持数据库</h2>
<p>作为数据科学家，您几乎每天都必须建立和管理数据库连接。 当 SQL 写成字符串时，调试很长的 SQL 行并不容易。 Dataspell 有一个解决方案。以下是使用 sqlite3 包建立连接、创建数据库和表的方法：</p>

<figure >
    
        <img src="img/database.png" width="800" />
    
    
</figure>

<p>您现在可以像往常一样插入数据：</p>

<figure >
    
        <img src="img/database2.png" width="800" />
    
    
</figure>

<p>Dataspell 的特别之处在于无需离开 IDE 或编写不必要的查询即可浏览数据库的选项。 只需双击数据库，就会打开一个新的侧窗口。从那里，您可以轻松单击任何感兴趣的表格，在单独的选项卡中浏览它：</p>

<figure >
    
        <img src="img/database3.png" width="800" />
    
    
</figure>

<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Python采集多媒体文件数据</title>
      <link>https://textdata.cn/blog/multi_media_examples/</link>
      <pubDate>Fri, 26 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/multi_media_examples/</guid>
      <description>使用Python对多媒体文件进行下载</description>
      <content:encoded><![CDATA[<p>多媒体文件的下载包括</p>
<ul>
<li>图片</li>
<li>音频</li>
<li>视频</li>
<li>文件</li>
</ul>
<p>代码非常简单，只要准备好多媒体文件链接url和存储路径file即可，代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>


<span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">file</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    下载多媒体及文件
</span><span class="s2">    url： 多媒体文件链接（结尾有文件格式名）
</span><span class="s2">    file: 存储文件的路径（结尾有文件格式名）
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="c1">#获取到二进制数据</span>
    <span class="n">binarydata</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">content</span>
    <span class="c1">#以二进制形式将数据流存入fname中</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">binarydata</span><span class="p">)</span>  
</code></pre></div><h2 id="案例数据">案例数据</h2>
<p>视频由于体积太大未能上传至我的博客服务器，我为大家准备了音频、pdf文件、图片文件三种数据类型。其实不论什么类型，只要是文件，均可使用上面的download函数下载。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pics</span>  <span class="o">=</span>  <span class="p">[</span><span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/about-page.jpg&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/about-us.jpg&#39;</span><span class="p">,</span>
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/AI_Knowledge_intro.png&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/banner-1.jpg&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/blog-post-1.jpg&#39;</span><span class="p">,</span>
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/blog-post-2.jpg&#39;</span><span class="p">,</span>
                <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pic/blog-post-3.jpg&#39;</span><span class="p">]</span>

<span class="n">pdfs</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/网络爬虫.pdf&#39;</span><span class="p">,</span>
           <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/相似度.pdf&#39;</span><span class="p">,</span>
           <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/中文可读性.pdf&#39;</span><span class="p">]</span>


<span class="n">musics</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/Elastic.mp3&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/HAPPYBEL.WAV&#39;</span><span class="p">,</span>
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/MU14.WAV&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/typing.wav&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/music/Water.mp3&#39;</span><span class="p">]</span>
</code></pre></div><br>
<h2 id="批量下载">批量下载</h2>
<p>以pdf为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">pdfs</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/网络爬虫.pdf&#39;</span><span class="p">,</span>
           <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/相似度.pdf&#39;</span><span class="p">,</span>
           <span class="s1">&#39;https://textdata.cn/blog/multimediaexamples/pdf/中文可读性.pdf&#39;</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">file</span><span class="p">):</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">binarydata</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">content</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">binarydata</span><span class="p">)</span> 
        
<span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">pdfs</span><span class="p">:</span>
    <span class="c1">#注意，代码运行前所在文件夹内新建一个data文件夹</span>
    <span class="n">filepath</span><span class="o">=</span><span class="s1">&#39;data/&#39;</span><span class="o">+</span><span class="n">url</span><span class="o">.</span><span class="n">spit</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">link</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="n">filepath</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据分析plydata库</title>
      <link>https://textdata.cn/blog/plydata/</link>
      <pubDate>Mon, 22 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/plydata/</guid>
      <description>让数据分析的代码更简洁</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90plydata%E5%BA%93%E5%AD%A6%E4%B9%A0.zip">https://github.com/hidadeng/DaDengAndHisPython/blob/master/数据分析plydata库学习.zip</a></p>
<p>plydata是一个提供数据处理语法的Python库，借鉴了R语言dplyr，tidyr和forcats等包中的管道操作符。</p>
<p>plydata使用 <code>&gt;&gt;运算符</code> 作为管道符号，或者使用<code>ply（data，* verbs）</code>函数代替 <code>&gt;&gt;</code>， 目前仅支持对pandas.DataFrame数据进行操作。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">plydata</span>
</code></pre></div><h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">plydata</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="n">if_else</span><span class="p">,</span> <span class="n">ply</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;zero&#39;</span><span class="p">,</span> <span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">]})</span>

<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
</tr>
</tbody>
</table>
<h2 id="define">define</h2>
<p>define函数名很简单，定义变量或者操作变量。</p>
<p><code>define(data, *args,**kwargs)</code></p>
<ul>
<li>data 待操作的dataframe数据</li>
<li>args、kwargs 操作过程及结果。</li>
</ul>
<p>比如我们想在df中新建一个z列，z列的值完全复制自x列。可以使用代码 define(df, z=&lsquo;x&rsquo;)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">define</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<p><strong>注意:</strong> df中有x列，所以这里的使用的&rsquo;x',而不是x。</p>
<h2 id="管道符">&raquo;管道符</h2>
<p>刚刚的问题可以使用管道符实现与define(df, z=&lsquo;x&rsquo;)相同的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于df[&#39;z&#39;]=df[&#39;x&#39;]</span>
<span class="c1">#等同于define(df, z=&#39;x&#39;)</span>
<span class="n">df</span> <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<p>如果有多个环节，可以用括号包裹住，环节与环节用<code>&gt;&gt;</code>和<code>换行</code>前后衔接。</p>
<p>比如我们有多个操作，每一步操作如下</p>
<ol>
<li><code>m=2x</code></li>
<li><code>n=m*m</code></li>
<li><code>q=m+n</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="s1">&#39;2*x&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="s1">&#39;m*m&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="s1">&#39;m+n&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">m</th>
<th style="text-align:right">n</th>
<th style="text-align:right">q</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">4</td>
<td style="text-align:right">16</td>
<td style="text-align:right">20</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">6</td>
<td style="text-align:right">36</td>
<td style="text-align:right">42</td>
</tr>
</tbody>
</table>
<p>上面所有的plydata相关操作不会修改原始数据df</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
</tr>
</tbody>
</table>
<h2 id="if_else">if_else</h2>
<p>在df中新建z列，z的值满足</p>
<ul>
<li>当x大于1，z为1</li>
<li>当x小于等于1， z为0</li>
</ul>
<p>使用if_else(predicate, true_value, false_value)</p>
<ul>
<li>predicate 逻辑判断条件字符串</li>
<li>true_value 满足逻辑条件返回的值</li>
<li>false_value 不满足逻辑条件返回的值</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于define(df, z=if_else(&#39;x&gt;1&#39;, 1, 0))</span>
<span class="n">df</span> <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="query">query</h2>
<p>query(data, expr)</p>
<ul>
<li>data 待查询的dataframe数据</li>
<li>expr  查询条件字符串</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z==1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="ply">ply()</h2>
<p>ply功能等同于管道符&raquo;， 刚刚上面的代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z==1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>可以用ply</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ply</span><span class="p">(</span><span class="n">df</span><span class="p">,</span>
    <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x &gt; 1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)),</span>
    <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z == 1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="plydata与plotnine">plydata与plotnine</h2>
<p>在R语言中，用ggplot2作图经常会用到管道符。而在Python中，plydata提供管道符，可以与作图库plotnine结合使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">geom_line</span><span class="p">,</span> <span class="n">aes</span>
<span class="kn">from</span> <span class="nn">plydata</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">if_else</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="mi">500</span><span class="p">)})</span>
<span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s1">&#39;np.sin(x)&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">sign</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;y&gt;=0&#39;</span><span class="p">,</span> <span class="s1">&#39;&#34;pos&#34;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#34;neg&#34;&#39;</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> 
                <span class="n">y</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> 
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;sign&#39;</span><span class="p">))</span><span class="o">+</span>
     <span class="n">geom_line</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mf">1.5</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_27_0.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>YelpDaset | 酒店管理类数据集10&#43;G</title>
      <link>https://textdata.cn/blog/yelpdataset_10g/</link>
      <pubDate>Sat, 20 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/yelpdataset_10g/</guid>
      <description>Yelp数据集是我们用于个人，教育和学术目的的业务，评论和用户数据的子集。字段丰富，适合玩数据分析</description>
      <content:encoded><![CDATA[<h2 id="数据集下载">数据集下载</h2>
<p>链接:https://pan.baidu.com/s/1rUfj7NYYAnM3NuFWCHyPpA 密码:ux8z</p>
<p>在昨天发的文章里提到了yelp数据集，官网显示&quot;Yelp数据集是我们用于个人，教育和学术目的的业务，评论和用户数据的子集。 以JSON文件形式提供，可用于在学习如何制作移动应用程序的同时，向学生介绍数据库，学习NLP或提供示例生产数据。&quot;</p>
<p>yelp官网显示，这个数据集亮点如下：</p>
<ul>
<li>668+w条评论</li>
<li>19+w个商业机构</li>
<li>20w张图片</li>
<li>10个都市区域</li>
<li>字段包括:营业时间、是否泊车、可用性和环境</li>
</ul>
<p><img loading="lazy" src="img/yelp.png" alt=""  />
</p>
<p>在kaggle上也能看到使用这个数据集的案例，说不定有你需要的分析方法。</p>
<p><img loading="lazy" src="img/kaggle.png" alt=""  />
</p>
<p>我已经从yelp官网下载了数据, 参照kaggle的很多例子，咱们也在自己电脑上跑跑简单的分析</p>
<h2 id="business数据读取">business数据读取</h2>
<p>kaggle中的数据是csv文件，咱这里是json，略有不同，但读取都可以用pandas读取</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#一开始用注释掉的代码，有bug，经过百度找到lines=True解决方案</span>
<span class="c1">#business = pd.read_json(&#39;yelp_dataset/business.json&#39;)</span>
<span class="n">business</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="s1">&#39;yelp_dataset/business.json&#39;</span><span class="p">,</span> <span class="n">lines</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">business</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/1.png" alt=""  />
</p>
<h2 id="评分分布">评分分布</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="n">sns</span><span class="o">.</span><span class="n">color_palette</span><span class="p">()</span>
</code></pre></div><pre><code>[(0.12156862745098039, 0.4666666666666667, 0.7058823529411765),
 (1.0, 0.4980392156862745, 0.054901960784313725),
 (0.17254901960784313, 0.6274509803921569, 0.17254901960784313),
 (0.8392156862745098, 0.15294117647058825, 0.1568627450980392),
 (0.5803921568627451, 0.403921568627451, 0.7411764705882353),
 (0.5490196078431373, 0.33725490196078434, 0.29411764705882354),
 (0.8901960784313725, 0.4666666666666667, 0.7607843137254902),
 (0.4980392156862745, 0.4980392156862745, 0.4980392156862745),
 (0.7372549019607844, 0.7411764705882353, 0.13333333333333333),
 (0.09019607843137255, 0.7450980392156863, 0.8117647058823529)]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>

<span class="n">colors</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">color_palette</span><span class="p">()</span>
<span class="n">rating</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;stars&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">rating</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">rating</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> 
            <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
            <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">9</span><span class="p">],</span>
            <span class="n">rot</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#字体倾斜角度</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Rating Distribution of Yelp&#39;</span><span class="p">,</span><span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_5_0.png" alt=""  />
</p>
<h2 id="行业统计">行业统计</h2>
<p>查看行业店家数量分布</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="k">else</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
<span class="n">category_str</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">])</span>
<span class="n">category_list</span> <span class="o">=</span> <span class="n">category_str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
<span class="n">category_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">category_list</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">])</span>
<span class="n">top15_category</span> <span class="o">=</span> <span class="n">category_df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()[:</span><span class="mi">15</span><span class="p">]</span>
<span class="n">top15_category</span>
<span class="n">top15_category</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span>
                    <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">20</span><span class="p">],</span>
                    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> 
                    <span class="n">rot</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
                    <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Top 20 Category in Yelp&#39;</span><span class="p">,</span>
          <span class="n">fontsize</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> 
          <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_7_0.png" alt=""  />
</p>
<h2 id="城市分布">城市分布</h2>
<p>显示yelp中Top20城</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">citys</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;city&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()[:</span><span class="mi">20</span><span class="p">]</span>
<span class="n">citys</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="c1">#降序，原地修改原始数据</span>
<span class="n">citys</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;barh&#39;</span><span class="p">,</span>   <span class="c1">#水平条形图</span>
           <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
           <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
           <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">20</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Top 20 city in the Yelp&#39;</span><span class="p">,</span> 
          <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> 
          <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_9_0.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用pandas_bokeh做可视化</title>
      <link>https://textdata.cn/blog/pandas_bokeh_vis/</link>
      <pubDate>Thu, 18 Nov 2021 17:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_bokeh_vis/</guid>
      <description>简洁数据可视化</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96pandas_bokeh.zip">点击下载代码</a></p>
<h2 id="pandas_bokeh">pandas_bokeh</h2>
<p>pandas_bokeh可以使得dataframe直接调用bokeh底层代码。通过使用pandas_bokeh，可以在notebook或者html中显示，语法相比于bokeh更简洁易用。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pandas_bokeh</span>
</code></pre></div><h2 id="快速上手">快速上手</h2>
<p>对fruits.csv做一个条形图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">fruits</th>
<th style="text-align:right">2015</th>
<th style="text-align:right">2016</th>
<th style="text-align:right">2017</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">苹果</td>
<td style="text-align:right">2</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">梨</td>
<td style="text-align:right">1</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">香蕉</td>
<td style="text-align:right">4</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">草莓</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">樱桃</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">橘子</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">pandas_bokeh</span>
<span class="kn">import</span> <span class="nn">warnings</span> 
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s2">&#34;ignore&#34;</span><span class="p">)</span> <span class="c1">#忽略某些不影响程序的提示</span>

<span class="c1">#在notebook中能显示可视化结果</span>
<span class="n">pandas_bokeh</span><span class="o">.</span><span class="n">output_notebook</span><span class="p">()</span>

<span class="c1">#将fruits列设置为行索引</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>


<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> 
              <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;fruits&#39;</span><span class="p">,</span> <span class="c1">#将fruits列选做x轴</span>
              <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;2015&#39;</span><span class="p">,</span> <span class="s1">&#39;2016&#39;</span><span class="p">,</span> <span class="s1">&#39;2017&#39;</span><span class="p">],</span> <span class="c1">#将年份选做y轴</span>
              <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;水果价格(元/斤)&#39;</span><span class="p">,</span>
              <span class="n">title</span><span class="o">=</span><span class="s1">&#39;水果&#39;</span><span class="p">,</span>
              <span class="n">show_figure</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#显示</span>
</code></pre></div>
<figure >
    
        <img src="img/2.gif" width="800" />
    
    
</figure>

<p>上面的例子已经可以看到该库的简洁优美之处，现在我们多学点</p>
<h2 id="pandas_bokeh输出设定">pandas_bokeh输出设定</h2>
<ul>
<li>pandas_bokeh.output_notebook() 在notebook中能显示可视化结果</li>
<li>pandas_bokeh.output_file(filename) 将结果输出到html文件中</li>
</ul>
<h2 id="支持可视化图种类">支持可视化图种类</h2>
<ul>
<li>line</li>
<li>bar</li>
<li>point</li>
<li>scatter</li>
<li>histogram</li>
<li>area</li>
<li>pie</li>
<li>map</li>
</ul>
<p>以bar为例，调用可视化接口时，有以下两种使用方法</p>
<ul>
<li>df.plot_bokeh.line(&hellip;)</li>
<li>df.plot_bokeh(kind=&lsquo;line&rsquo;)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fake_stocks.xlsx&#39;</span><span class="p">)</span>

<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;line&#34;</span><span class="p">,</span> 
              <span class="n">x</span><span class="o">=</span><span class="s1">&#39;日期&#39;</span><span class="p">,</span> <span class="c1">#将excel中的日期列当做x轴</span>
              <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Google&#39;</span><span class="p">,</span> <span class="s1">&#39;Apple&#39;</span><span class="p">])</span> <span class="c1">#将&#39;Google&#39;, &#39;Apple&#39;两列作为y轴</span>
</code></pre></div>
<figure >
    
        <img src="img/3.gif" width="800" />
    
    
</figure>

<h2 id="高级参数">高级参数</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">figsize</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">xlim</span><span class="p">,</span> <span class="n">ylim</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span>
              <span class="n">logx</span><span class="p">,</span> <span class="n">logy</span><span class="p">,</span> <span class="n">xticks</span><span class="p">,</span> <span class="n">yticks</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">colormap</span><span class="p">,</span> <span class="n">hovertool</span><span class="p">,</span> 
              <span class="n">zooming</span><span class="p">,</span> <span class="n">panning</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div><ul>
<li>kind: 支持的图种类&quot;line&quot;, &ldquo;point&rdquo;, &ldquo;scatter&rdquo;, &ldquo;bar&rdquo; ,&ldquo;histogram&quot;等</li>
<li>x: 选中数据某列名作为x轴。如果x不传入参数，会默认使用df的索引作为x轴</li>
<li>y: 将数据中的某列或某些列指定为y轴</li>
<li>figsize: 图的尺寸,如figsize=(600, 350)</li>
<li>title:  图的标题</li>
<li>xlim/ylim: 设置图的x轴和y轴的范围</li>
<li>xlabel/ylabel: 设置x轴和y轴的名字</li>
<li>logx/logy: 布尔型值，对x和y的数据是否进行log变换</li>
<li>xticks/yticks: 显性定义横纵坐标刻度</li>
<li>color: 对图中使用同一的颜色，如果想定义多种颜色，请使用colormap参数</li>
<li>colormap: 可以对图中的不同对象设置颜色， 传入的是颜色字符串列表。</li>
<li>hovertool: 默认True，鼠标放在图上会悬浮显示具体信息。</li>
<li>zooming: 布尔值，默认True支持缩放</li>
<li>panning: 布尔值，默认True支持平移</li>
<li>kwargs**: 更多参数设定请看官方文档</li>
</ul>
<h2 id="文档">文档</h2>
<ul>
<li>pandas_bokeh文档地址https://github.com/PatrikHlobil/Pandas-Bokeh</li>
<li>Bokeh官方文档地址https://docs.bokeh.org/en/latest/</li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Pandas做数据预处理</title>
      <link>https://textdata.cn/blog/pre_process_in_pandas/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pre_process_in_pandas/</guid>
      <description>4000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA">https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA</a></p>
<p>author: 俊欣</p>
<p>公众号: 关于数据分析与可视化</p>
</blockquote>
<p>数据预处理过程当中, 大致会遇到</p>
<ul>
<li>加载数据</li>
<li>处理缺失值如何处理</li>
<li>处理离散型数据该如何处理</li>
<li>数据的标准化</li>
<li>将数据集划分成训练集与测试集</li>
<li>去掉重复值</li>
</ul>
<br>
<h2 id="加载数据">加载数据</h2>
<p>我们导入必要的库并且加载数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data.csv&#34;</span><span class="p">)</span>
</code></pre></div><p>在进行数据分析前，可以查看一下数据的总体情况，从宏观上了解数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span> <span class="c1">#显示前五行数据</span>
<span class="n">data</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span> <span class="c1">#显示末尾五行数据</span>
<span class="n">data</span><span class="o">.</span><span class="n">info</span><span class="p">()</span> <span class="c1">#查看各字段的信息</span>
<span class="n">data</span><span class="o">.</span><span class="n">shape</span> <span class="c1">#查看数据集有几行几列,data.shape[0]是行数,data.shape[1]是列数</span>
<span class="n">data</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span> <span class="c1">#查看数据的大体情况，均值，最值，分位数值...</span>
<span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>   <span class="c1">#得到列名的list</span>
</code></pre></div><br>
<h2 id="处理缺失值">处理缺失值</h2>
<p>缺失值一直都是数据预处理当中比较常见的一个问题，而在处理类似的问题的时候，方式方法也是多种多样的，我们一一来介绍，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;小明&#39;</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">55</span><span class="p">],[</span><span class="s1">&#39;小红&#39;</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">60</span><span class="p">],[</span><span class="s1">&#39;小王&#39;</span><span class="p">,</span><span class="mi">26</span><span class="p">]]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span><span class="s1">&#39;Age&#39;</span><span class="p">,</span><span class="s1">&#39;Weight&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
2   小王   26     NaN
</code></pre></div><p>针对上面的数据集，我们通过pandas中的方法看一下缺失值的情况</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Name    Age  Weight
0  False  False   False
1  False  False   False
2  False  False    True
</code></pre></div><p>另外我们也可以这么来做，检测每一列空值的数量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Name      0
Age       0
Weight    1
dtype: int64
</code></pre></div><p>而在面对缺失值的时候，我们一方面可以将其去除</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
</code></pre></div><p>当然我们也可以对缺失值进行填充，例如用平均值来填充</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
2   小王   26    57.5
</code></pre></div><p>除了pandas当中的方法之外，我们也可以使用sklearn库当中的一些函数方法，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.impute</span> <span class="kn">import</span> <span class="n">SimpleImputer</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">SimpleImputer</span><span class="p">(</span><span class="n">missing_values</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="n">strategy</span><span class="o">=</span><span class="s1">&#39;mean&#39;</span><span class="p">)</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]])</span>
</code></pre></div><p>最后返回的结果也和上面的fillna()方法返回的结果一致，我们用平均值来代码空值，那么同样道理我们也可以用中位数、众数等统计值来进行替换，这里就不做多说</p>
<br>
<h2 id="处理离散型数据">处理离散型数据</h2>
<p>另外当数据集当中出现离散型数据的时候，我们也要进行相应的处理，毕竟在后面的建模过程当中，机器学习的模型需要的是连续型的数据。
离散型数据也分为两种，一种是有序的离散变量，就比方说是衣服的尺码，有M码的、也有L码的、也还有与之更大的尺码，另外一种则是无序的，例如衣服的颜色，颜色之间没有大小之分，因此在编码的时候也应该另外处理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_cat</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> 
                     <span class="p">[[</span><span class="s1">&#39;green&#39;</span><span class="p">,</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="mf">10.1</span><span class="p">,</span><span class="s1">&#39;class1&#39;</span><span class="p">],</span>
                      <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span><span class="s1">&#39;L&#39;</span><span class="p">,</span><span class="mf">20.1</span><span class="p">,</span><span class="s1">&#39;class2&#39;</span><span class="p">],</span>
                      <span class="p">[</span><span class="s1">&#39;white&#39;</span><span class="p">,</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="mf">30.1</span><span class="p">,</span><span class="s1">&#39;class1&#39;</span><span class="p">]],</span> <span class="p">)</span>
<span class="n">df_cat</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">,</span><span class="s1">&#39;size&#39;</span><span class="p">,</span><span class="s1">&#39;price&#39;</span><span class="p">,</span><span class="s1">&#39;classlabel&#39;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   color size  price classlabel
0  green    M   10.1     class1
1   blue    L   20.1     class2
2  white    M   30.1     class1
</code></pre></div><p>对于有序的离散型变量，我们可以使用map()函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">size_mapping</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;M&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;L&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">}</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">size_mapping</span><span class="p">)</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    1
1    2
2    1
Name: size, dtype: int64
</code></pre></div><p>另外我们也可以使用sklearn库中的LabelEncoder()方法来处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span>
<span class="n">class_le</span> <span class="o">=</span> <span class="n">LabelEncoder</span><span class="p">()</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">class_le</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
</code></pre></div><p>而对于无序的离散型变量，我们可以采用独热编码，例如对color这一列进行编码过之后会有color_green、color_blue以及color_white三个特征，特征值为0或者1</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s2">&#34;color&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   color_blue  color_green  color_white
0           0            1            0
1           1            0            0
2           0            0            1

</code></pre></div><p>然后我们将此并入到源数据当中去</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_cat</span><span class="p">[[</span><span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dummies</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   size  price  color_blue  color_green  color_white
0     1   10.1           0            1            0
1     2   20.1           1            0            0
2     1   30.1           0            0            1
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">但是考虑到后面搭建模型的时候</span><span class="err">，</span><span class="n">变量与变量之间应该保持独立</span><span class="err">，</span><span class="n">而不应该是存在依赖的关系</span><span class="err">，</span><span class="n">对于color这一列中存在三种颜色</span><span class="err">，</span><span class="n">分别是blue</span><span class="err">、</span><span class="n">green以及white</span><span class="err">，</span><span class="n">当前两类取值都为0的时候</span><span class="err">，</span><span class="n">color只可能是white</span>
<span class="n">所以将get_dummies</span><span class="p">()</span><span class="n">方法中的drop_first默认值为False改为True</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dummies</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s2">&#34;color&#34;</span><span class="p">,</span> <span class="n">drop_first</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">df_cat</span><span class="p">[[</span><span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dummies</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="数据的标准化">数据的标准化</h2>
<p>由于不同的变量，它们往往存在不同的单位以及不同的取值范围，有时候取值范围的差异较大会对机器学习的模型带来很多不必要的麻烦。因此为了最后预测结果的可靠性，我们需要对数据进行标准化，对数据按比例进行缩放，使之落入一个小的特定区间。而标准化算法有</p>
<ul>
<li>z-score 标准化</li>
</ul>
<p>这种方法根据原始数据的均值和标准差进行数据的标准化，经过处理的数据符合正态分布，即均值为0，标准差为1 ，当然sklearn库当中的代码则是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="n">sc</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><ul>
<li>线性归一化</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">MinMaxScaler</span><span class="p">()</span>
<span class="n">min_max_scaler</span> <span class="o">=</span> <span class="n">MinMaxScaler</span><span class="p">()</span>
<span class="n">X_train_minmax</span> <span class="o">=</span> <span class="n">min_max_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">X_train_minmax</span><span class="p">)</span>
</code></pre></div><p>训练集中的数据经过转化，取值范围都集中在[0,1]之间</p>
<ul>
<li>MaxAbsScaler()方法</li>
</ul>
<p>MaxAbsScaler()方法和上述的线性归一化效果相类似，训练集中的数据经过转化，取值范围在[-1,1]之间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">max_abs_scaler</span> <span class="o">=</span> <span class="n">preprocessing</span><span class="o">.</span><span class="n">MaxAbsScaler</span><span class="p">()</span>
<span class="n">X_train_maxabs</span> <span class="o">=</span> <span class="n">max_abs_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_test_maxabs</span> <span class="o">=</span> <span class="n">max_abs_scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><ul>
<li>RobustScaler()方法</li>
</ul>
<p>要是当数据集当中存在很多的极值的时候，利用平均值和标准差来进行数据的标准化效果可能并不理想，毕竟极值会影响到平均值和标准差的计算，这个时候我们就需要用到RobustScaler()方法，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">RobustScaler</span>
<span class="n">transformer</span> <span class="o">=</span> <span class="n">RobustScaler</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">transformer</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="将数据集划分成训练集和测试集">将数据集划分成训练集和测试集</h2>
<p>在建模之前，我们需要将数据集分成训练集和测试集，我们在训练集上面建立模型，训练与优化模型，然后再将模型放到测试集上面，评估一下模型的性能以及优化的效果，在sklearn库中也有相对应的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>上面的变量y具体指的是被预测的因变量，而x则是在预测中使用的自变量</p>
<br>
<h2 id="去除重复值">去除重复值</h2>
<p>在pandas当中也有对应的方法来去除掉重复值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">br</span><span class="o">&gt;</span>

<span class="c1">## 代码下载</span>
<span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">hidadeng</span><span class="o">/</span><span class="n">DaDengAndHisPython</span><span class="o">/</span><span class="n">blob</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="mi">4000</span><span class="n">字归纳总结PandasSklearn数据预处理</span><span class="o">.</span><span class="n">ipynb</span>
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Pandas处理文本数据</title>
      <link>https://textdata.cn/blog/text_analysis_in_pandas/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/text_analysis_in_pandas/</guid>
      <description>2000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/MmfEtyKaMqNn_Ik1oJtitQ">https://mp.weixin.qq.com/s/MmfEtyKaMqNn_Ik1oJtitQ</a></p>
<p>author: 俊欣</p>
<p>公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86Pandas%E7%AF%87.ipynb">点击Pandas本文代码下载</a></p>
<p>今天我们来谈论一下pandas库当中文本数据的操作，希望大家再看完本篇文章之后会有不少的收获，我们大致会讲</p>
<ul>
<li>创建一个包含文本数据的DataFrame</li>
<li>常用处理文本数据的方法的总结</li>
<li>正则表达式与DataFrame内部方法的结合</li>
</ul>
<br>
<h2 id="创建文本内容的数据">创建文本内容的数据</h2>
<p>我们先来创建一个包含文本数据的DataFrame，来供我们后面使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
   <span class="s2">&#34;姓&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;李&#34;</span><span class="p">,</span><span class="s2">&#34;王&#34;</span><span class="p">,</span><span class="s2">&#34;戴&#34;</span><span class="p">,</span> <span class="s2">&#34;李&#34;</span><span class="p">,</span> <span class="s2">&#34;张&#34;</span><span class="p">],</span>
   <span class="s2">&#34;名&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;华&#34;</span><span class="p">,</span><span class="s2">&#34;硕&#34;</span><span class="p">,</span><span class="s2">&#34;建业&#34;</span><span class="p">,</span> <span class="s2">&#34;四&#34;</span><span class="p">,</span> <span class="s2">&#34;三&#34;</span><span class="p">],</span>
   <span class="s2">&#34;户籍地址&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34; 浙江省·宁波市 &#34;</span><span class="p">,</span> <span class="s2">&#34;   浙江省·杭州市    &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·丽水市  &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·衢州市 &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·湖州市           &#34;</span><span class="p">],</span>
   <span class="s2">&#34;微信ID&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Tomoplplplut1248781&#34;</span><span class="p">,</span> <span class="s2">&#34;Smopopo857&#34;</span><span class="p">,</span> <span class="s2">&#34;Adahuhuifhhjfj&#34;</span><span class="p">,</span> <span class="s2">&#34;Tull1945121&#34;</span><span class="p">,</span> <span class="s2">&#34;ZPWERERTFD599557&#34;</span><span class="p">],</span>
   <span class="s2">&#34;邮箱地址&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;tom02159@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;smitt7821@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;adams623@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;tull0305@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;five7532@163.com&#34;</span><span class="p">]</span>
<span class="p">})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | 姓   | 名   | 户籍地址      | 微信ID              | 邮箱地址          |
|---:|:-----|:-----|:--------------|:--------------------|:------------------|
|  0 | 李   | 华   | 浙江省·宁波市 | Tomoplplplut1248781 | tom02159@163.com  |
|  1 | 王   | 硕   | 浙江省·杭州市 | Smopopo857          | smitt7821@163.com |
|  2 | 戴   | 建业 | 浙江省·丽水市 | Adahuhuifhhjfj      | adams623@163.com  |
|  3 | 李   | 四   | 浙江省·衢州市 | Tull1945121         | tull0305@163.com  |
|  4 | 张   | 三   | 浙江省·湖州市 | ZPWERERTFD599557    | five7532@163.com  |
</code></pre></div><br>
<h2 id="常用处理文本数据的方法总结">常用处理文本数据的方法总结</h2>
<p>Python当中用来处理字符串数据的方法有很多，基本上都可以在DataFrame内部拿来使用，例如lower()方法和upper()方法，给字母大小写</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    tomoplplplut1248781
1             smopopo857
2         adahuhuifhhjfj
3            tull1945121
4       zpwerertfd599557
Name: 微信ID, dtype: object
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">len</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    19
1    10
2    14
3    11
4    16
Name: 微信ID, dtype: int64
</code></pre></div><p>当然我们看到户籍地址这一列中的数据有很多的空格</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0                浙江省·宁波市 
1             浙江省·杭州市    
2               浙江省·丽水市  
3                浙江省·衢州市 
4      浙江省·湖州市           
Name: 户籍地址, dtype: object
</code></pre></div><p>我们可以使用处理字符串时的strip()方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省·宁波市
1    浙江省·杭州市
2    浙江省·丽水市
3    浙江省·衢州市
4    浙江省·湖州市
Name: 户籍地址, dtype: object
</code></pre></div><p>与之相类似的还有lstrip()方法以及rstrip()方法，这里就不做赘述。</p>
<p>在字符串的处理过程当中，startswith()方法和endswith()方法也是用的非常的频繁，例如我们想要挑选出户籍地址是“宁波市”的数据，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
<span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;宁波市&#34;</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID              邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781  tom02159@163.com
</code></pre></div><p>另外我们还可以使用replace()方法来实现当中的字符串的替换</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="s2">&#34;--&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省--宁波市
1    浙江省--杭州市
2    浙江省--丽水市
3    浙江省--衢州市
4    浙江省--湖州市
Name: 户籍地址, dtype: object
</code></pre></div><p>那既然用到了replace()方法，那么split()方法也可以尝试一下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    [浙江省, 宁波市]
1    [浙江省, 杭州市]
2    [浙江省, 丽水市]
3    [浙江省, 衢州市]
4    [浙江省, 湖州市]
Name: 户籍地址, dtype: object
</code></pre></div><p>在经过spilit()方法的切割过之后就变成了列表的形式，然后可以通过get()方法或者[]来获取里面的元素，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

</code></pre></div><p>或者</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省
1    浙江省
2    浙江省
3    浙江省
4    浙江省
Name: 户籍地址, dtype: object
</code></pre></div><p>那么获取列表当中的第二个元素也是同样的道理，当然我们也可以在split()方法当中添加expand=True这个参数，来将上面列表形式的数据转化成DataFrame格式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">      0    1
0  浙江省  宁波市
1  浙江省  杭州市
2  浙江省  丽水市
3  浙江省  衢州市
4  浙江省  湖州市
</code></pre></div><p>同样地，我们可以在后面添加[]来获取我们想要的元素</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    宁波市
1    杭州市
2    丽水市
3    衢州市
4    湖州市
Name: 1, dtype: object
</code></pre></div><br>
<h2 id="正则表达式与dataframe内部方法的结合">正则表达式与DataFrame内部方法的结合</h2>
<p>假如我们想要提取文本数据内部的一部分数据，可以结合正则表达式来使用，例如我们想要提取“微信ID”这一列当中的字母和数字，并且将两者分开来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">two_groups</span> <span class="o">=</span> <span class="s2">&#34;([a-zA-Z]+)([0-9]+)&#34;</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">two_groups</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">              0        1
0  Tomoplplplut  1248781
1       Smopopo      857
2           NaN      NaN
3          Tull  1945121
4    ZPWERERTFD   599557
</code></pre></div><p>当然了，如果想是要提取文本数据中的部分数据，可以直接在str方法后面添加索引，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;邮箱地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="p">[</span><span class="o">-</span><span class="mi">8</span><span class="p">:]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    @163.com
1    @163.com
2    @163.com
3    @163.com
4    @163.com
Name: 邮箱地址, dtype: object
</code></pre></div><p>当然，从另外一个角度讲，正则表达式也可以帮助我们确认文本数据是否符合某种规律，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">two_groups</span> <span class="o">=</span> <span class="s2">&#34;([a-zA-Z]+)([0-9]+)&#34;</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">two_groups</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0     True
1     True
2    False
3     True
4     True
Name: 微信ID, dtype: bool
</code></pre></div><p>当中有一个为False，不满足字母+数字的规律，我们再进一步，将满足条件的数据提取出来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">two_groups</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID               邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781   tom02159@163.com
1  王  硕  浙江省·杭州市           Smopopo857  smitt7821@163.com
3  李  四  浙江省·衢州市          Tull1945121   tull0305@163.com
4  张  三  浙江省·湖州市     ZPWERERTFD599557   five7532@163.com
</code></pre></div><p>针对文本数据而言，contains()方法也能够派上用场，例如下面的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓   名                  户籍地址                 微信ID               邮箱地址
0  李   华              浙江省·宁波市   Tomoplplplut1248781   tom02159@163.com
1  王   硕           浙江省·杭州市               Smopopo857  smitt7821@163.com
2  戴  建业             浙江省·丽水市         Adahuhuifhhjfj   adams623@163.com
3  李   四              浙江省·衢州市           Tull1945121   tull0305@163.com
4  张   三    浙江省·湖州市                ZPWERERTFD599557   five7532@163.com
5  黄   五               浙江省·宁波市        hunhunhu45652  1erdcvf127@16.com
</code></pre></div><p>我们用contains()来提取出户籍地址为“宁波市”的内容，可以这么做</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s2">&#34;宁波市&#34;</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID               邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781   tom02159@163.com
5  黄  五  浙江省·宁波市        hunhunhu45652  1erdcvf127@16.com
</code></pre></div><p>暂时就这些了，下一篇原创的文章安排在周天，非技术方面的，期待一下？</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐20个好用到爆的Pandas函数方法</title>
      <link>https://textdata.cn/blog/pandas_20_most_usefull_functions/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_20_most_usefull_functions/</guid>
      <description>4000字详细说明</description>
      <content:encoded><![CDATA[<p>今天分享几个不为人知的pandas函数，大家可能平时看到的不多，但是使用起来倒是非常的方便，也能够帮助我们数据分析人员大幅度地提高工作效率，同时也希望大家看完之后能够有所收获</p>
<br>
<br>
<h2 id="items方法">items()方法</h2>
<p>pandas当中的<code>items()</code>方法可以用来遍历数据集当中的每一列，同时返回列名以及每一列当中的内容，通过以元组的形式，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;species&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;bear&#39;</span><span class="p">,</span> <span class="s1">&#39;bear&#39;</span><span class="p">,</span> <span class="s1">&#39;marsupial&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;population&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1864</span><span class="p">,</span> <span class="mi">22000</span><span class="p">,</span> <span class="mi">80000</span><span class="p">]},</span>
                   <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;panda&#39;</span><span class="p">,</span> <span class="s1">&#39;polar&#39;</span><span class="p">,</span> <span class="s1">&#39;koala&#39;</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   population |
|:------|:----------|-------------:|
| panda | bear      |         1864 |
| polar | bear      |        22000 |
| koala | marsupial |        80000 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">label</span><span class="p">,</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;label: </span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;content: </span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;=&#34;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div><pre><code>label: species
content: panda         bear
polar         bear
koala    marsupial
Name: species, dtype: object
==================================================
label: population
content: panda     1864
polar    22000
koala    80000
Name: population, dtype: int64
==================================================
</code></pre>
<p>相继的打印出了‘species’和‘population’这两列的列名和相应的内容</p>
<br>
<h2 id="iterrows方法">iterrows()方法</h2>
<p>而对于<code>iterrows()</code>方法而言，其功能则是遍历数据集当中的每一行，返回每一行的索引以及带有列名的每一行的内容，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">label</span><span class="p">,</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;label: </span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;content: </span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;=&#34;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div><pre><code>label: panda
content: species       bear
population    1864
Name: panda, dtype: object
==================================================
label: polar
content: species        bear
population    22000
Name: polar, dtype: object
==================================================
label: koala
content: species       marsupial
population        80000
Name: koala, dtype: object
==================================================
</code></pre>
<br>
<h2 id="insert方法">insert()方法</h2>
<p><code>insert()</code>方法主要是用于在数据集当中的特定位置处插入数据。在DataFrame数据集当中，列的索引也是从0开始的</p>
<p>示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#在第二列插入size字段，内容如下</span>
<span class="n">df</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="p">[</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">3000</span><span class="p">,</span> <span class="mi">4000</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
|       | species   |   size |   population |
|:------|:----------|-------:|-------------:|
| panda | bear      |   2000 |         1864 |
| polar | bear      |   3000 |        22000 |
| koala | marsupial |   4000 |        80000 |
</code></pre></div><br>
<h2 id="assign方法">assign()方法</h2>
<p><code>assign()</code>方法可以用来在数据集当中添加新的列，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">size_1</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">9</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |
|:------|:----------|-------:|-------------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |
| polar | bear      |   3000 |        22000 |  39632   |
| koala | marsupial |   4000 |        80000 | 144032   |
</code></pre></div><p>从上面的例子中可以看出，我们通过一个lambda匿名函数，在数据集当中添加一个新的列，命名为<strong>size_1</strong>，当然我们也可以通过assign()方法来创建不止一个列</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">size_1</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">9</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">32</span><span class="p">,</span>
               <span class="n">size_2</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |
|:------|:----------|-------:|-------------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   |
</code></pre></div><br>
<h2 id="eval方法">eval()方法</h2>
<p><code>eval()</code>方法主要是用来执行用字符串来表示的运算过程的，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s2">&#34;size_3 = size_1 + size_2&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |   size_3 |
|:------|:----------|-------:|-------------:|---------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |   6379.6 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |  74842   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   | 272042   |
</code></pre></div><p>当然我们也可以同时对执行多个运算过程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span><span class="s1">size_3 = size_1 + size_2
</span><span class="s1">size_4 = size_1 - size_2
</span><span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |   size_3 |   size_4 |
|:------|:----------|-------:|-------------:|---------:|---------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |   6379.6 |    394.8 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |  74842   |   4422   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   | 272042   |  16022   |
</code></pre></div><br>
<h2 id="pop方法">pop()方法</h2>
<p>pop()方法主要是用来删除掉数据集中特定的某一列数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">&#34;size_3&#34;</span><span class="p">)</span>
</code></pre></div><p>而原先的数据集当中就没有这个‘size_3’这一例的数据了</p>
<br>
<h2 id="truncate方法">truncate()方法</h2>
<p><code>truncate()</code>方法主要是根据行索引来筛选指定行的数据的，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;B&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;j&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;C&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">]},</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | A   | B   | C   |
|---:|:----|:----|:----|
|  1 | a   | f   | k   |
|  2 | b   | g   | l   |
|  3 | c   | h   | m   |
|  4 | d   | i   | n   |
|  5 | e   | j   | o   |
</code></pre></div><p>我们使用<code>truncate()</code>方法来做一下尝试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">truncate</span><span class="p">(</span><span class="n">before</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">after</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | A   | B   | C   |
|---:|:----|:----|:----|
|  2 | b   | g   | l   |
|  3 | c   | h   | m   |
|  4 | d   | i   | n   |
</code></pre></div><p>我们看到参数before和after存在于truncate()方法中，目的就是把行索引2之前和行索引4之后的数据排除在外，筛选出剩余的数据</p>
<br>
<h2 id="count方法">count()方法</h2>
<p><code>count()</code>方法主要是用来计算某一列当中非空值的个数，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;Name&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="s2">&#34;Myla&#34;</span><span class="p">,</span> <span class="s2">&#34;Lewis&#34;</span><span class="p">,</span> <span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="s2">&#34;John&#34;</span><span class="p">],</span>
                   <span class="s2">&#34;Age&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mf">24.</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">26</span><span class="p">],</span>
                   <span class="s2">&#34;Single&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">]})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | Name   |   Age |   Single |
|---:|:-------|------:|---------:|
|  0 | John   |    24 |        1 |
|  1 | Myla   |   nan |        1 |
|  2 | Lewis  |    25 |      nan |
|  3 | John   |    33 |        1 |
|  4 | John   |    26 |        0 |
</code></pre></div><p>我们使用count()方法来计算一下数据集当中非空值的个数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</code></pre></div><pre><code>Name      5
Age       4
Single    4
dtype: int64
</code></pre>
<br>
<h2 id="add_prefix方法add_suffix方法">add_prefix()方法/add_suffix()方法</h2>
<p><code>add_prefix()</code>方法和<code>add_suffix()</code>方法分别会给列名以及行索引添加后缀和前缀，对于<code>Series()</code>数据集而言，前缀与后缀是添加在行索引处，而对于<code>DataFrame()</code>数据集而言，前缀与后缀是添加在列索引处，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">s</span>
</code></pre></div><pre><code>0    1
1    2
2    3
3    4
dtype: int64
</code></pre>
<p>我们使用add_prefix()方法与add_suffix()方法在Series()数据集上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">.</span><span class="n">add_prefix</span><span class="p">(</span><span class="s1">&#39;row_&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>row_0    1
row_1    2
row_2    3
row_3    4
dtype: int64
</code></pre>
<p>又例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">.</span><span class="n">add_suffix</span><span class="p">(</span><span class="s1">&#39;_row&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>0_row    1
1_row    2
2_row    3
3_row    4
dtype: int64
</code></pre>
<p>而对于<code>DataFrame()</code>形式数据集而言，<code>add_prefix()</code>方法以及<code>add_suffix()</code>方法是将前缀与后缀添加在列索引处的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> 
                   <span class="s1">&#39;B&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   A |   B |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">add_prefix</span><span class="p">(</span><span class="s2">&#34;column_&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   column_A |   column_B |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">add_suffix</span><span class="p">(</span><span class="s2">&#34;_column&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   A_column |   B_column |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<h2 id="clip方法">clip()方法</h2>
<p><code>clip()</code>方法主要是通过设置阈值来改变数据集当中的数值，当数值超过阈值的时候，就做出相应的调整</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;col_0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="s1">&#39;col_1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">]}</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
|    |   col_0 |   col_1 |
|---:|--------:|--------:|
|  0 |       9 |      -2 |
|  1 |      -3 |      -7 |
|  2 |       0 |       6 |
|  3 |      -1 |       8 |
|  4 |       5 |      -5 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">lower</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="n">upper</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   col_0 |   col_1 |
|---:|--------:|--------:|
|  0 |       4 |      -2 |
|  1 |      -3 |      -4 |
|  2 |       0 |       4 |
|  3 |      -1 |       4 |
|  4 |       4 |      -4 |
</code></pre></div><p>我们看到参数lower和upper分别代表阈值的上限与下限，数据集当中超过上限与下限的值会被替代。</p>
<br>
<h2 id="filter方法">filter()方法</h2>
<p>pandas当中的<code>filter()</code>方法是用来筛选出特定范围的数据的，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">])),</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| A  |     1 |     2 |       3 |
| B  |     4 |     5 |       6 |
| C  |     7 |     8 |       9 |
| D  |    10 |    11 |      12 |
</code></pre></div><p>我们使用filter()方法来筛选数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">items</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   three |
|:---|------:|--------:|
| A  |     1 |       3 |
| B  |     4 |       6 |
| C  |     7 |       9 |
| D  |    10 |      12 |
</code></pre></div><p>我们还可以使用正则表达式来筛选数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#字段名e结尾的列</span>
<span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">regex</span><span class="o">=</span><span class="s1">&#39;e$&#39;</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   three |
|:---|------:|--------:|
| A  |     1 |       3 |
| B  |     4 |       6 |
| C  |     7 |       9 |
| D  |    10 |      12 |

</code></pre></div><p>当然通过参数axis来调整筛选行方向或者是列方向的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">like</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| B  |     4 |     5 |       6 |
</code></pre></div><br>
<h2 id="first方法">first()方法</h2>
<p>当数据集当中的行索引是日期的时候，可以通过该方法来筛选前面几行的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">index_1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s1">&#39;2021-11-11&#39;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s1">&#39;2D&#39;</span><span class="p">)</span>
<span class="n">ts</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]},</span> <span class="n">index</span><span class="o">=</span><span class="n">index_1</span><span class="p">)</span>
<span class="n">ts</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   A |
|:--------------------|----:|
| 2021-11-11 00:00:00 |   1 |
| 2021-11-13 00:00:00 |   2 |
| 2021-11-15 00:00:00 |   3 |
| 2021-11-17 00:00:00 |   4 |
| 2021-11-19 00:00:00 |   5 |
</code></pre></div><br>
<p>我们使用first()方法来进行一些操作，例如筛选出前面3天的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ts</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="s1">&#39;3D&#39;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   A |
|:--------------------|----:|
| 2021-11-11 00:00:00 |   1 |
| 2021-11-13 00:00:00 |   2 |
</code></pre></div><br>
<h2 id="isin方法">isin()方法</h2>
<p>isin()方法主要是用来确认数据集当中的数值是否被包含在给定的列表当中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">])),</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| A  |     0 |     0 |       1 |
| B  |     0 |     1 |       0 |
| C  |     0 |     0 |       0 |
| D  |     0 |     0 |       1 |
</code></pre></div><p>若是数值被包含在列表当中了，也就是3、5、12当中，返回的是True，否则就返回False</p>
<br>
<h2 id="dfplotarea方法">df.plot.area()方法</h2>
<p>下面我们来讲一下如何在Pandas当中通过一行代码来绘制图表，将所有的列都通过面积图的方式来绘制</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;sales&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">65</span><span class="p">],</span>
    <span class="s1">&#39;signups&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">13</span><span class="p">],</span>
    <span class="s1">&#39;visits&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span>
<span class="p">},</span> 
    <span class="n">index</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="s1">&#39;2021/01/01&#39;</span><span class="p">,</span> 
                        <span class="n">end</span><span class="o">=</span><span class="s1">&#39;2021/07/01&#39;</span><span class="p">,</span> 
                        <span class="n">freq</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">))</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   sales |   signups |   visits |
|:--------------------|--------:|----------:|---------:|
| 2021-01-31 00:00:00 |      30 |         7 |       20 |
| 2021-02-28 00:00:00 |      20 |         9 |       42 |
| 2021-03-31 00:00:00 |      38 |         6 |       28 |
| 2021-04-30 00:00:00 |      95 |        12 |       62 |
| 2021-05-31 00:00:00 |     106 |        18 |       81 |
| 2021-06-30 00:00:00 |      65 |        13 |       50 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">area</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div>
<figure >
    
        <img src="img/output_79_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotbar方法">df.plot.bar()方法</h2>
<p>下面我们看一下如何通过一行代码来绘制柱状图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;label&#39;</span><span class="p">:[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span> <span class="s1">&#39;values&#39;</span><span class="p">:[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">70</span><span class="p">]})</span>
<span class="n">df</span><span class="o">.</span><span class="n">to_markdown</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | label   |   values |
|---:|:--------|---------:|
|  0 | A       |       10 |
|  1 | B       |       30 |
|  2 | C       |       50 |
|  3 | D       |       70 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;label&#39;</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="s1">&#39;values&#39;</span><span class="p">,</span> 
                 <span class="n">rot</span><span class="o">=-</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_83_0.png" />
    
    
</figure>

<p>当然我们也可以根据不同的类别来绘制柱状图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">17.5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">88</span><span class="p">]</span>
<span class="n">weight</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="s1">&#39;G&#39;</span><span class="p">]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="n">age</span><span class="p">,</span> 
                   <span class="s1">&#39;weight&#39;</span><span class="p">:</span> <span class="n">weight</span><span class="p">},</span> 
                   <span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">rot</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_85_0.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_86_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotbox方法">df.plot.box()方法</h2>
<p>我们来看一下箱型图的具体的绘制，通过pandas一行代码来实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="s1">&#39;ABC&#39;</span><span class="p">))</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |         A |          B |          C |
|---:|----------:|-----------:|-----------:|
|  0 | -1.59132  |  1.47926   |  1.16891   |
|  1 | -0.649097 |  0.0501129 | -0.81485   |
|  2 |  1.31677  |  1.00035   |  0.0662983 |
|  3 | -1.04484  |  0.445727  |  0.0140137 |
|  4 |  0.217317 | -0.692044  | -0.758549  |
|  5 | -0.566574 | -0.159038  |  0.781744  |
|  6 | -0.903068 |  1.50697   |  1.2605    |
|  7 |  1.38627  | -0.0539971 | -0.0619803 |
|  8 | -1.50639  | -0.187649  |  1.00115   |
|  9 | -1.84435  | -1.37282   |  0.905218  |
| 10 | -0.400618 |  0.503642  |  1.20152   |
| 11 | -0.164643 |  1.58712   | -0.0475168 |
| 12 |  1.99742  | -0.928291  |  0.502433  |
| 13 | -1.25877  |  2.0764    | -0.840626  |
| 14 | -0.293273 | -2.09935   | -0.152372  |
| 15 | -0.686338 |  0.798964  |  1.4551    |
| 16 |  0.407321 |  0.601732  |  0.456718  |
| 17 |  0.594827 | -1.8498    |  1.22704   |
| 18 | -0.345245 | -1.27973   | -0.0971918 |
| 19 |  1.91415  |  0.656389  | -1.15816   |
| 20 |  0.149819 |  1.10037   | -0.0785313 |
| 21 | -0.311471 | -1.10781   |  0.707936  |
| 22 |  0.614726 | -0.142359  | -1.23091   |
| 23 |  1.46869  |  1.27063   |  0.797499  |
| 24 | -1.02252  |  0.819603  | -0.220382  |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">box</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_90_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotpie方法">df.plot.pie()方法</h2>
<p>接下来是饼图的绘制</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;mass&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.33</span><span class="p">,</span> <span class="mf">4.87</span> <span class="p">,</span> <span class="mf">5.97</span><span class="p">],</span>
                   <span class="s1">&#39;radius&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">2439.7</span><span class="p">,</span> <span class="mf">6051.8</span><span class="p">,</span> <span class="mf">6378.1</span><span class="p">]},</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Mercury&#39;</span><span class="p">,</span> <span class="s1">&#39;Venus&#39;</span><span class="p">,</span> <span class="s1">&#39;Earth&#39;</span><span class="p">])</span>

<span class="n">plot</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s1">&#39;mass&#39;</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</code></pre></div>
<figure >
    
        <img src="img/output_92_0.png" width="800" />
    
    
</figure>

<p>除此之外，还有折线图、直方图、散点图等等，步骤与方式都与上述的技巧有异曲同工之妙，大家感兴趣的可以自己另外去尝试。</p>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/4000%E5%AD%97%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E_%E6%8E%A8%E8%8D%9020%E4%B8%AA%E5%A5%BD%E7%94%A8%E5%88%B0%E7%88%86%E7%9A%84Pandas%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95.ipynb">https://github.com/hidadeng/DaDengAndHisPython/blob/master/4000字详细说明_推荐20个好用到爆的Pandas函数方法.ipynb</a></p>
<br>
<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/PEhYrNbZyI9Prl3OwrBcAw">https://mp.weixin.qq.com/s/PEhYrNbZyI9Prl3OwrBcAw</a></p>
<p>author: 俊欣
公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a><a href="https://textdata.cn/blog/management_python_course/">https://textdata.cn/blog/management_python_course/</a>)</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐|pandas必知必会50例</title>
      <link>https://textdata.cn/blog/pandas_must_know_50_examples/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_must_know_50_examples/</guid>
      <description>pandas常用知识8000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/j71IPWmT57g3VTajGhgN7Q">https://mp.weixin.qq.com/s/j71IPWmT57g3VTajGhgN7Q</a>
author: 俊欣
公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<p>本篇我们继续前面pandas系列教程的探讨，今天小编会介绍pandas库当中一些非常基础的方法与函数，希望大家看了之后会有所收获。</p>
<h2 id="准备需要的数据集">准备需要的数据集</h2>
<p>我们先准备生成一些随机数，作为后面需要用到的数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">index</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&#34;1/1/2000&#34;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">series</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;e&#34;</span><span class="p">])</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                  <span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="p">,</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>

</code></pre></div><br>
<h2 id="head-and-tail">Head and tail</h2>
<p>head()和tail()方法是用来查看数据集当中的前几行和末尾几行的，默认是查看5行，当然读者朋友也可以自行设定行数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="n">series2</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><pre><code>0    0.578276
1    0.643313
2   -0.336030
3   -0.422468
4   -0.493812
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 同理</span>
<span class="n">series2</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>
</code></pre></div><pre><code>95    1.307962
96    1.165135
97    0.717692
98    0.605668
99    0.264990
dtype: float64
</code></pre>
<br>
<h2 id="数据的统计分析">数据的统计分析</h2>
<p>在pandas当中用describe()方法来对表格中的数据做一个概括性的统计分析，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><pre><code>count    100.000000
mean       0.106277
std        1.027541
min       -2.554005
25%       -0.510912
50%        0.028765
75%        0.795444
max        2.512260
dtype: float64
</code></pre>
<p>当然，我们也可以设置好输出的分位</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">percentiles</span><span class="o">=</span><span class="p">[</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">])</span>
</code></pre></div><pre><code>count    100.000000
mean       0.106277
std        1.027541
min       -2.554005
5%        -1.450067
25%       -0.510912
50%        0.028765
75%        0.795444
95%        1.757926
max        2.512260
dtype: float64
</code></pre>
<p>对于离散型的数据来说，describe()方法给出的结果则会简洁很多</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">])</span>
<span class="n">s</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><pre><code>count     10
unique     4
top        a
freq       5
dtype: object
</code></pre>
<p>要是表格中既包含了离散型数据，也包含了连续型的数据，默认的话，describe()是会针对<strong>连续型数据</strong>进行统计分析</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Yes&#34;</span><span class="p">,</span> <span class="s2">&#34;Yes&#34;</span><span class="p">,</span> <span class="s2">&#34;No&#34;</span><span class="p">,</span> <span class="s2">&#34;No&#34;</span><span class="p">],</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">4</span><span class="p">)})</span>
<span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       |        b |
|:------|---------:|
| count | 4        |
| mean  | 0.967026 |
| std   | 0.859657 |
| min   | 0.204027 |
| 25%   | 0.233797 |
| 50%   | 0.947075 |
| 75%   | 1.6803   |
| max   | 1.76993  |
</code></pre></div><p>当然我们也可以指定让其强制统计分析离散型数据或者连续型数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;object&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|        | a   |
|:-------|:----|
| count  | 4   |
| unique | 2   |
| top    | Yes |
| freq   | 2   |
</code></pre></div><p>同理，我们也可以指定连续型的数据进行统计分析</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;number&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       |        b |
|:------|---------:|
| count | 4        |
| mean  | 0.967026 |
| std   | 0.859657 |
| min   | 0.204027 |
| 25%   | 0.233797 |
| 50%   | 0.947075 |
| 75%   | 1.6803   |
| max   | 1.76993  |
</code></pre></div><p>如果我们都要去做统计分析，可以这么来执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="s2">&#34;all&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|        | a   |          b |
|:-------|:----|-----------:|
| count  | 4   |   4        |
| unique | 2   | nan        |
| top    | Yes | nan        |
| freq   | 2   | nan        |
| mean   | nan |   0.967026 |
| std    | nan |   0.859657 |
| min    | nan |   0.204027 |
| 25%    | nan |   0.233797 |
| 50%    | nan |   0.947075 |
| 75%    | nan |   1.6803   |
| max    | nan |   1.76993  |
</code></pre></div><br>
<h2 id="最大最小值的位置">最大/最小值的位置</h2>
<p>idxmin()和idxmax()方法是用来查找表格当中最大/最小值的位置，返回的是值的索引</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="n">s1</span>
</code></pre></div><pre><code>0    2.244266
1    1.398258
2   -1.827026
3   -0.058691
4    0.275471
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(),</span> <span class="n">s1</span><span class="o">.</span><span class="n">idxmax</span><span class="p">()</span>
</code></pre></div><pre><code>(2, 0)
</code></pre>
<p>用在DataFrame上面的话，如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                   <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="n">df1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   0 |
|:---|----:|
| A  |   2 |
| B  |   3 |
| C  |   2 |
</code></pre></div><p>同理，我们将axis参数改成1</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | 0   |
|---:|:----|
|  0 | B   |
|  1 | B   |
|  2 | A   |
|  3 | B   |
|  4 | B   |
</code></pre></div><br>
<h2 id="value_counts方法">value_counts()方法</h2>
<p>pandas当中的value_counts()方法主要用于数据表的计数以及排序，用来查看表格当中，指定列有多少个不同的数据值并且计算不同值在该列当中出现的次数，先来看一个简单的例子</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;城市&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;北京&#39;</span><span class="p">,</span> <span class="s1">&#39;广州&#39;</span><span class="p">,</span> <span class="s1">&#39;上海&#39;</span><span class="p">,</span> <span class="s1">&#39;上海&#39;</span><span class="p">,</span> <span class="s1">&#39;杭州&#39;</span><span class="p">,</span> <span class="s1">&#39;成都&#39;</span><span class="p">,</span> <span class="s1">&#39;香港&#39;</span><span class="p">,</span> <span class="s1">&#39;南京&#39;</span><span class="p">,</span> <span class="s1">&#39;北京&#39;</span><span class="p">,</span> <span class="s1">&#39;北京&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;收入&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">5500</span><span class="p">,</span> <span class="mi">5500</span><span class="p">,</span> <span class="mi">4000</span><span class="p">,</span> <span class="mi">50000</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="mi">5200</span><span class="p">,</span> <span class="mi">5600</span><span class="p">],</span>
                   <span class="s1">&#39;年龄&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">]})</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;城市&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div><pre><code>北京    3
上海    2
广州    1
杭州    1
南京    1
香港    1
成都    1
Name: 城市, dtype: int64
</code></pre>
<p>可以看到北京出现了3次，上海出现了2次，并且默认采用的是降序来排列的，下面我们来看一下用升序的方式来排列一下收入这一列</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;收入&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>5600     1
5000     1
8000     1
5200     1
50000    1
4000     1
10000    2
5500     2
Name: 收入, dtype: int64
</code></pre>
<p>同时里面也还可以利用参数normalize=True，来计算不同值的计数占比</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;年龄&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
                      <span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>32    0.1
34    0.1
50    0.1
40    0.1
43    0.1
45    0.1
25    0.4
Name: 年龄, dtype: float64
</code></pre>
<br>
<h2 id="数据分组">数据分组</h2>
<p>我们可以使用cut()方法以及qcut()方法来对表格中的连续型数据分组，首先我们看一下cut()方法，假设下面这组数据代表的是小组每个成员的年龄</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ages</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">62</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">89</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">32</span><span class="p">])</span>
<span class="n">pd</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div><pre><code>[(1.907, 20.6], (1.907, 20.6], (1.907, 20.6], (39.2, 57.8], (20.6, 39.2], ..., (1.907, 20.6], (1.907, 20.6], (20.6, 39.2], (20.6, 39.2], (20.6, 39.2]]
Length: 16
Categories (5, interval[float64]): [(1.907, 20.6] &lt; (20.6, 39.2] &lt; (39.2, 57.8] &lt; (57.8, 76.4] &lt; (76.4, 95.0]]
</code></pre>
<p>由上可以看到用cut()方法将数据平分成了5个区间，且区间两边都有扩展以包含<strong>最大值和最小值</strong>，当然我们也可以给每一个区间加上标记</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="sa">u</span><span class="s2">&#34;婴儿&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;少年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;青年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;中年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;老年&#34;</span><span class="p">])</span>
</code></pre></div><pre><code>['婴儿', '婴儿', '婴儿', '青年', '少年', ..., '婴儿', '婴儿', '少年', '少年', '少年']
Length: 16
Categories (5, object): ['婴儿' &lt; '少年' &lt; '青年' &lt; '中年' &lt; '老年']
</code></pre>
<p>而对于qcut()方法来说，我们可以指定区间来进行分组，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">qcut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;小朋友&#39;</span><span class="p">,</span><span class="s1">&#39;大孩子&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>['小朋友', '小朋友', '小朋友', '大孩子', '大孩子', ..., '小朋友', '小朋友', '小朋友', '小朋友', '小朋友']
Length: 16
Categories (2, object): ['小朋友' &lt; '大孩子']
</code></pre>
<p>这里将年龄这组数据分成两部分[0, 0.5, 1]，一组是标上标记小朋友，另一组是大孩子，不过通常情况下，我们用的cut()方法比较多</p>
<p><br><br></p>
<h2 id="引用函数">引用函数</h2>
<p>要是在表格当中引用其他的方法，或者是自建的函数，可以使用通过pandas当中的以下这几个方法</p>
<ul>
<li>pipe()</li>
<li>apply()和applymap()</li>
<li>agg()和transform()</li>
</ul>
<br>
<h2 id="pipe方法">pipe()方法</h2>
<p>首先我们来看pipe()这个方法，我们可以将自己定义好的函数，以链路的形式一个接着一个传给我们要处理的数据集上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">extract_city_name</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_name&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_and_code&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>

<span class="k">def</span> <span class="nf">add_country_name</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">country_name</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_and_country&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_name&#34;</span><span class="p">]</span> <span class="o">+</span> <span class="n">country_name</span>
    <span class="k">return</span> <span class="n">df</span>
</code></pre></div><p>然后我们用pip()这个方法来将上面我们定义的函数串联起来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_p</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;city_and_code&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Arizona, AZ&#34;</span><span class="p">]})</span>
<span class="n">df_p</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;state_and_code&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Arizona, AZ&#34;</span><span class="p">]})</span>
<span class="n">df_p</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">extract_city_name</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">add_country_name</span><span class="p">,</span> <span class="n">country_name</span><span class="o">=</span><span class="s2">&#34;_USA&#34;</span><span class="p">)</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | state_and_code   | state_name   | state_and_country   |
|---:|:-----------------|:-------------|:--------------------|
|  0 | Arizona, AZ      | Arizona      | Arizona_USA         |
</code></pre></div><br>
<h2 id="apply方法和applymap方法">apply()方法和applymap()方法</h2>
<p>apply()方法可以对表格中的数据按照行或者是列方向进行处理，默认是按照列方向，如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A   -0.101751
B   -0.360288
C   -0.637433
dtype: float64
</code></pre></div><p>当然，我们也可以通过axis参数来进行调节</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0   -0.803675
1   -0.179640
2   -1.200973
3    0.156888
4    0.381631
5    0.049274
6    1.174923
7    0.612591
dtype: float64
</code></pre></div><p>除此之外，我们也可以直接调用匿名函数lambda的形式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">min</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A    1.922863
B    2.874672
C    1.943930
dtype: float64
</code></pre></div><p>也可以调用自己定义的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">normalize</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span> <span class="o">/</span> <span class="n">x</span><span class="o">.</span><span class="n">std</span><span class="p">()</span>
</code></pre></div><p>我们用上apply()方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">normalize</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B         C
0  1.149795  0.390263 -0.813770
1  0.805843 -0.532374  0.859627
2  0.047824 -0.085334 -0.067179
3 -0.903319 -1.215023  1.149538
4 -1.100144  1.442467 -1.128216
</code></pre></div><p>apply()方法作用于数据集当中的每个行或者是列，而applymap()方法则是对数据集当中的所有元素都进行处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;key1&#39;</span> <span class="p">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;key2&#39;</span> <span class="p">:</span> <span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;one&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;data1&#39;</span> <span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
                   <span class="s1">&#39;data2&#39;</span> <span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">)})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1   key2  data1  data2
0    a    one      1     10
1    c    two      2     11
2    b  three      3     12
3    b   four      4     13
4    d   five      5     14
</code></pre></div><p>我们来自定义一个函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="k">def</span> <span class="nf">add_A</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&#34;A&#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    
<span class="n">df</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">add_A</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1    key2 data1 data2
0   Aa    Aone    A1   A10
1   Ac    Atwo    A2   A11
2   Ab  Athree    A3   A12
3   Ab   Afour    A4   A13
4   Ad   Afive    A5   A14
</code></pre></div><p>我们然后也可以通过lambda()自定义函数方法，然后来去除掉这个A</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">add_A</span><span class="p">)</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;A&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1   key2 data1 data2
0    a    one     1    10
1    c    two     2    11
2    b  three     3    12
3    b   four     4    13
4    d   five     5    14
</code></pre></div><br>
<h2 id="agg方法和transform方法">agg()方法和transform()方法</h2>
<p>agg()方法本意上是聚合函数，我们可以将用于统计分析的一系列方法都放置其中，并且放置多个</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">)</span>
</code></pre></div><pre><code>A    2.042573
B    2.189269
C   -1.066976
dtype: float64
</code></pre>
<p>当然，当中的np.sum部分也可以用字符串来表示，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="s2">&#34;sum&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>A    2.042573
B    2.189269
C   -1.066976
dtype: float64
</code></pre>
<p>我们尝试在当中放置多个统计分析的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="s2">&#34;mean&#34;</span><span class="p">,</span> <span class="s2">&#34;median&#34;</span><span class="p">])</span>
</code></pre></div><p>当然我们也可以和lambda匿名函数混合着搭配</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">()])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">                 A         B         C
sum      -0.066486 -1.288341 -1.236244
&lt;lambda&gt; -0.013297 -0.257668 -0.247249
</code></pre></div><p>或者和自己定义的函数方法混合着用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">my_mean</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
    
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="n">my_mean</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">                A         B         C
sum     -4.850201 -1.544773  0.429007
my_mean -0.970040 -0.308955  0.085801
</code></pre></div><p>与此同时，我们在agg()方法中添加字典，实现不同的列使用不同的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;mean&#34;</span><span class="p">})</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A   -0.801753
B    0.097550
dtype: float64
</code></pre></div><br>
<h2 id="索引和列名的重命名">索引和列名的重命名</h2>
<p>针对索引和列名的重命名，我们可以通过pandas当中的rename()方法来实现，例如我们有这样一个数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                   <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">],</span>
                   <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;e&#34;</span><span class="p">])</span>
<span class="n">df1</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B         C
a  0.343690  0.869984 -1.929814
b  1.025613  0.470155 -0.242463
c -0.400908 -0.362684  0.226857
d -1.339706 -0.302005 -1.784452
e -0.957026 -0.813600  0.215098
</code></pre></div><p>我们可以这样来操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="s2">&#34;three&#34;</span><span class="p">},</span>
           <span class="n">index</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;banana&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="s2">&#34;cat&#34;</span><span class="p">})</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">             one       two     three
apple   0.383813  0.588964 -0.162386
banana -0.462068 -2.938896  0.935492
cat    -0.059807 -1.987281  0.095432
d      -0.085230  2.013733 -1.324039
e      -0.678352  0.306776  0.808697
</code></pre></div><p>当然我们可以拆开来，单独对行或者是列进行重命名，对列的重命名可以这么来做</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">rename</span><span class="p">({</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="s2">&#34;three&#34;</span><span class="p">},</span> 
           <span class="n">axis</span> <span class="o">=</span> <span class="s2">&#34;columns&#34;</span><span class="p">)</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">        one       two     three
a -0.997108 -1.383011  0.474298
b  1.009910  0.286303  1.120783
c  1.130700 -0.566922  1.841451
d -0.350438 -0.171079 -0.079804
e  0.988050 -0.524604  0.653306
</code></pre></div><br>
<h2 id="排序">排序</h2>
<p>在pandas当中，我们可以针对数据集当中的值来进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span><span class="s2">&#34;one&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> 
     <span class="s2">&#34;two&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> 
     <span class="s2">&#34;three&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
<span class="p">)</span>

<span class="n">df1</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
0    2    1      5
1    1    3      4
2    1    2      3
3    1    4      2
</code></pre></div><p>我们按照“three”这一列当中的数值来进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s2">&#34;three&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
3    1    4      2
2    1    2      3
1    1    3      4
0    2    1      5
</code></pre></div><p>我们也可以依照多列进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;two&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
2    1    2      3
1    1    3      4
3    1    4      2
0    2    1      5
</code></pre></div><p>在“one”这一列相等的时候，比较“two”这一列数值的大小，在排序的过程当中，默认采用的都是升序，我们可以改成降序来进行编排</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
3    1    4      2
1    1    3      4
2    1    2      3
0    2    1      5
</code></pre></div><br>
<h2 id="数据类型的转换">数据类型的转换</h2>
<p>最后涉及到的是数据类型的转换，在这之前，我们先得知道如何来查看数据的类型，pandas当中有相应的方法可以处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="s2">&#34;float16&#34;</span><span class="p">),</span>
        <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">)),</span>
        <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="s2">&#34;uint8&#34;</span><span class="p">)),</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="n">df2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B    C
0 -0.498779 -0.501512    0
1 -0.055817 -0.528227  254
2 -0.914551  0.763298    1
3 -0.916016  1.366833    0
4  1.993164  1.834457    0
</code></pre></div><p>我们通过dtypes属性来查看数据的类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A    float16
B    float64
C      uint8
dtype: object
</code></pre></div><p>而通过astype()方法来实现数据类型的转换</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="p">[</span><span class="s2">&#34;B&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;int64&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    0
1    0
2    0
3    2
4    1
Name: B, dtype: int64
</code></pre></div><br>
<h2 id="根据数据类型来筛选">根据数据类型来筛选</h2>
<p>与此同时，我们也可以根据相对应的数据类型来进行筛选，运用pandas当中的select_dtypes方法，我们先来创建一个数据集包含了各种数据类型的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;string_1&#34;</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="s2">&#34;abcde&#34;</span><span class="p">),</span>
        <span class="s2">&#34;int64_1&#34;</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)),</span>
        <span class="s2">&#34;uint8_1&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;u1&#34;</span><span class="p">),</span>
        <span class="s2">&#34;float64_1&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">),</span>
        <span class="s2">&#34;bool1&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">],</span>
        <span class="s2">&#34;bool2&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">],</span>
        <span class="s2">&#34;dates_1&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&#34;now&#34;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span>
        <span class="s2">&#34;category_1&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="s2">&#34;ABCDE&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;category&#34;</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  string_1  int64_1  uint8_1  ...  bool2                      dates_1  category_1
0      a      1      3  ...  False 2021-11-10 10:43:05.957685         A
1      b      2      4  ...   True 2021-11-11 10:43:05.957685         B
2      c      3      5  ...  False 2021-11-12 10:43:05.957685         C
3      d      4      6  ...  False 2021-11-13 10:43:05.957685         D
4      e      5      7  ...   True 2021-11-14 10:43:05.957685         E
</code></pre></div><p>我们先来查看一下各个列的数据类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">string_1              object
int64_1                int64
uint8_1                uint8
float64_1            float64
bool1                   bool
bool2                   bool
dates_1       datetime64[ns]
category_1          category
dtype: object
</code></pre></div><p>我们筛选类型为布尔值的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="nb">bool</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   bool1  bool2
0   True  False
1  False   True
2   True  False
3   True  False
4  False   True
</code></pre></div><p>筛选出数据类型为整型的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;int64&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   int64_1
0      1
1      2
2      3
3      4
4      5
</code></pre></div><br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>spacy产业级自然语言处理包</title>
      <link>https://textdata.cn/blog/spacy_industry_application/</link>
      <pubDate>Sun, 14 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/spacy_industry_application/</guid>
      <description>牛掰nlp库</description>
      <content:encoded><![CDATA[<h2 id="spacy">spacy</h2>
<p>产业级自然语言处理python包  <a href="https://spacy.io/">https://spacy.io/</a></p>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/20211115spacy%E4%BA%A7%E4%B8%9A%E7%BA%A7%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%8C%85.ipynb">点击下载</a></p>
<br>
<h2 id="特性">特性</h2>
<ul>
<li>支持64+语言</li>
<li>针对19门语言的64流水线pipeline处理函数</li>
<li>多任务预训练transformers，如BERT</li>
<li>预训练词向量</li>
<li>支持命名实体识别</li>
<li>支持 POS词性标注</li>
<li>支持 句法依存</li>
<li>支持 文本分类</li>
<li>支持 词干化</li>
<li>内置可视化</li>
</ul>
<br>
<h2 id="spacy安装">spacy安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">pip</span> <span class="n">install</span> <span class="n">spacy</span><span class="o">==</span><span class="mf">3.2.0</span>

</code></pre></div><br>
<h2 id="模型下载安装">模型下载安装</h2>
<p>sm小型/ md中型/ lg大型</p>
<ul>
<li>
<p><strong>中文模型3.2.0版</strong></p>
<ul>
<li>zh_core_web_sm  <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_sm-3.2.0/zh_core_web_sm-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_sm-3.2.0/zh_core_web_sm-3.2.0-py3-none-any.whl</a></li>
<li>zh_core_web_md <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_md-3.2.0/zh_core_web_md-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_md-3.2.0/zh_core_web_md-3.2.0-py3-none-any.whl</a></li>
<li>zh_core_web_lg   <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_lg-3.2.0/zh_core_web_lg-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_lg-3.2.0/zh_core_web_lg-3.2.0-py3-none-any.whl</a></li>
</ul>
</li>
<li>
<p><strong>英文模型3.2.0版</strong></p>
<ul>
<li>en_core_web_sm <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl</a></li>
<li>en_core_web_md  <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.2.0/en_core_web_md-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.2.0/en_core_web_md-3.2.0-py3-none-any.whl</a></li>
<li>en_core_web_lg  <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.2.0/en_core_web_lg-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.2.0/en_core_web_lg-3.2.0-py3-none-any.whl</a></li>
</ul>
</li>
</ul>
<p><strong>注意</strong>： 模型大小的区别主要体现在词向量维度数的差距，模型越大， 词向量的维度越多。</p>
<p>以版本3.2.0的en_core_web_sm为例，点击对应链接，下载至桌面。</p>
<p>打开命令行， 依次执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd Desktop

pip3 install en_core_web_sm-3.2.0-py3-none-any.whl
</code></pre></div><p>即可安装完成。</p>
<br>
<br>
<h2 id="doc类型">Doc类型</h2>
<ul>
<li><code>doc.lang_</code>  doc的语言</li>
<li><code>doc.text</code>   doc的文本</li>
<li><code>doc.ents</code> 文本中的实体词</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">spacy</span>

<span class="c1">#使用中文zh_core_web_sm模型</span>
<span class="n">zh_nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;zh_core_web_sm&#34;</span><span class="p">)</span>

<span class="n">test1</span> <span class="o">=</span> <span class="s1">&#39;国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。&#39;</span>

<span class="n">doc1</span> <span class="o">=</span> <span class="n">zh_nlp</span><span class="p">(</span><span class="n">test1</span><span class="p">)</span>

<span class="n">doc1</span>
</code></pre></div><pre><code>国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">lang_</span>
</code></pre></div><pre><code>'zh'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">text</span>
</code></pre></div><pre><code>'国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">vector</span>
</code></pre></div><pre><code>array([-1.81135774e-01,  2.31929451e-01,  1.45746097e-01,  6.82696044e-01,
       -8.44623148e-03, -2.21295916e-02,  4.06811416e-01, -4.60287899e-01,
       -5.73987663e-01, -1.33687481e-01, -5.34314513e-01, -6.64901555e-01,
       -3.94947737e-01,  6.35875063e-03, -2.03339502e-01,  5.78875951e-02,
       -3.34325433e-01, -3.77648622e-01,  2.43863747e-01, -5.56892566e-02,
       -7.30801523e-01, -2.41785884e-01, -4.50579911e-01, -3.13598923e-02,
        9.07084942e-02, -8.06667805e-01,  7.28501499e-01, -8.59559357e-01,
       -4.44110222e-02,  9.64611948e-01, -2.57230818e-01,  1.09481342e-01,
       -3.73580456e-01, -8.51007993e-04,  5.30374162e-02, -5.51876485e-01,
       -4.82654065e-01,  2.68822908e-01, -4.20012563e-01,  4.33068752e-01,
       -5.14427841e-01,  5.53584039e-01, -2.00293139e-02,  9.45062563e-02,
        1.04523234e-01,  1.34134221e+00, -5.23905218e-01,  1.31230903e+00,
        3.28943968e-01,  3.39987069e-01,  8.26785386e-01,  5.35273492e-01,
       -4.27510649e-01, -1.02807179e-01, -1.91500232e-01,  2.63696283e-01,
        6.33961499e-01, -5.65908328e-02, -1.94336250e-01, -5.89190602e-01,
        2.22078279e-01,  3.41992415e-02,  5.37312031e-01,  2.77926654e-01,
       -3.00608397e-01, -6.42910838e-01, -1.33188680e-01,  2.82793492e-01,
        6.25911206e-02,  2.08833948e-01,  2.69211121e-02,  1.65822819e-01,
       -4.32190485e-02, -6.67634964e-01,  6.50937319e-01, -2.43003711e-01,
        9.57057327e-02, -3.56370257e-03, -1.13566548e-01, -1.65319979e-01,
        7.40000159e-02,  3.65676880e-01, -2.21356809e-01,  2.03256473e-01,
        2.26293072e-01,  3.11525285e-01,  3.37869138e-01, -3.12896192e-01,
        5.31899095e-01, -1.86223835e-01, -6.03411011e-02,  4.97923464e-01,
        3.10418844e-01, -2.48594299e-01, -3.67455184e-01, -4.46804255e-01],
      dtype=float32)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#doc1中的实体词</span>
<span class="n">doc1</span><span class="o">.</span><span class="n">ents</span>
</code></pre></div><pre><code>(11月13日, 11月12日, 国家管网集团, 全国银行, 国家管网集团, 工商银行, 60亿元, 270天, 2, 2, 53, 超10)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#doc1中的实体词类别</span>
<span class="p">[</span><span class="n">ent</span><span class="o">.</span><span class="n">label_</span> <span class="k">for</span> <span class="n">ent</span> <span class="ow">in</span> <span class="n">doc1</span><span class="o">.</span><span class="n">ents</span><span class="p">]</span>
</code></pre></div><pre><code>['DATE',
 'DATE',
 'ORG',
 'ORG',
 'ORG',
 'ORG',
 'MONEY',
 'DATE',
 'CARDINAL',
 'CARDINAL',
 'CARDINAL',
 'CARDINAL']
</code></pre>
<h2 id="token类型">Token类型</h2>
<ul>
<li><code>token.text</code>   文本</li>
<li><code>token.pos_</code>  词性</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc1</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">token</span><span class="o">.</span><span class="n">pos_</span><span class="p">)</span>
</code></pre></div><pre><code>国家   NOUN
管网   NOUN
微信   ADJ
公众号   NOUN
11月   NOUN
13日   NOUN
消息   NOUN
，   PUNCT
11月   NOUN
12日   NOUN
，   PUNCT
国家   NOUN
管网   NOUN
集团   NOUN
首期   ADV
绿色   VERB
超短   NOUN
期融   NOUN
资券   VERB
在   ADP
全国   ADJ
银行   NOUN
间   PART
市场   NOUN
成功   ADV
发行   VERB
。   PUNCT
此次   DET
债券   NOUN
发行   VERB
是   VERB
国家   NOUN
管网   NOUN
集团   NOUN
成立   VERB
后   PART
首次   ADV
在   ADP
公开   ADJ
市场   NOUN
亮相   VERB
，   PUNCT
由   ADP
工商   NOUN
银行   NOUN
独家   ADV
承销   VERB
，   PUNCT
发行   NOUN
金额   NOUN
60亿   NUM
元   NUM
、   PUNCT
期限   NOUN
270   NUM
天   NUM
，   PUNCT
为   ADP
本   DET
年度   NOUN
单笔   NOUN
最   ADV
大   ADJ
金额   NOUN
绿色   ADJ
超短   NOUN
期融   NOUN
资券   NOUN
，   PUNCT
募集   NOUN
资金   NOUN
将   ADV
全部   ADV
用于   VERB
储气库   NOUN
等   PART
绿色   ADJ
低碳   VERB
天然气   NOUN
储运   NOUN
基础   NOUN
设施   NOUN
建设   NOUN
；   PUNCT
发行   VERB
票面   ADJ
利率   NOUN
2   NUM
.   PUNCT
41%   NOUN
，   PUNCT
认购   NOUN
总   ADJ
规模   NOUN
达   VERB
2   NUM
.   PUNCT
53   NUM
倍   NUM
，   PUNCT
低于   VERB
资本   NOUN
市场   NOUN
同期   NOUN
可比   ADV
产品   NOUN
利率   NOUN
超10   VERB
个   NUM
BP   NOUN
，   PUNCT
反映   VERB
了   PART
市场   NOUN
对   ADP
绿色   ADJ
基础   NOUN
设施   NOUN
建设   NOUN
项目   NOUN
的   PART
青睐   NOUN
。   PUNCT
</code></pre>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>2021最流行的8张可视化图</title>
      <link>https://textdata.cn/blog/8_most_popular_vis/</link>
      <pubDate>Wed, 10 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/8_most_popular_vis/</guid>
      <description>炫酷可视化案例集锦尽在本文</description>
      <content:encoded><![CDATA[<h2 id="1-酒精消费">1. 酒精消费</h2>
<p>此可视化显示了 2001 年至 2018 年人均（人均）饮酒量最高的国家。有趣的是，这段时间的最高国家主要由东非和欧洲国家组成。</p>
<p>如果您想了解更多关于全球酒精消费的信息，请查看牛津关于全球酒精消费的报告</p>
<p><a href="https://ourworldindata.org/alcohol-consumptio">https://ourworldindata.org/alcohol-consumptio</a></p>
<p>以防万一您感兴趣，这种类型的数据可视化称为条形图竞赛。 我相信你已经在 YouTube 和 Reddit 上看到了很多这样的内容。 如果您想自己构建一个，这里有一个教程，您可以查看</p>
<p><a href="https://towardsdatascience.com/step-by-step-tutorial-create-a-bar-chart-race-animation-da7d5fcd7079">https://towardsdatascience.com/step-by-step-tutorial-create-a-bar-chart-race-animation-da7d5fcd7079</a></p>
<br>
<h2 id="2-健康财富的221年">2. 健康&amp;财富的221年</h2>
<p>通常少即是多，但这是我最喜欢的可视化，因为它以清晰的方式传达了如此多的信息，而且非常积极！</p>
<p>此可视化显示了每个国家的财富（人均 GDP）和健康（平均预期寿命）如何随时间变化。 圆圈的大小代表每个国家的人口，颜色代表每个国家所属的大陆。</p>
<p>看到我们作为一个物种走了多远真是太神奇了，是吧？</p>
<p><a href="https://www.reddit.com/r/dataisbeautiful/comments/lmlrks/oc_our_health_and_wealth_over_221_years/">https://www.reddit.com/r/dataisbeautiful/comments/lmlrks/oc_our_health_and_wealth_over_221_years/</a></p>
<br>
<h2 id="3-地球光纤电缆网络-3d-地图">3. 地球光纤电缆网络 3D 地图</h2>
<p>这个由 Tyler Morgan 创建的可视化是世界光缆网络的 3D 地图。 该网络用于传输电话信号、互联网通信和电视信号。</p>
<p>真正看到我们在全球范围内的相互联系是非常疯狂的，不是吗？</p>
<p>这是使用 rayrender 和 geojsonsf 包在 R 中创建的。 如果您想查看完整代码，可以在此处查看。</p>
<p><a href="https://gist.github.com/tylermorganwall/b222fcebcac3de56a6e144d73d166322">https://gist.github.com/tylermorganwall/b222fcebcac3de56a6e144d73d166322</a></p>
<br>
<h2 id="4-美国covid病例增长">4. 美国Covid病例增长</h2>
<p>我不是特别喜欢花哨的数据可视化，因为它们通常不像简单的图形（如折线图）那样有效地传达信息。 但是，因为这个动画非常独特（而且有点令人不安），我觉得有必要将它添加到前 10 个可视化效果中。</p>
<p>虽然没有轴可以告诉我们绝对数字，但它是一个简洁的可视化，向我们展示了与 2020 年年初相比，COVID 病例数的增长速度。</p>
<p>这是使用 d3 创建的，完整代码可以在这里找到。</p>
<p><a href="https://observablehq.com/@bagami/the-us-covid-syringe">https://observablehq.com/@bagami/the-us-covid-syringe</a></p>
<br>
<h2 id="5-美国-covid-等值线图">5. 美国 COVID 等值线图</h2>
<p>此可视化告诉我们，从 2020 年 2 月开始到 2021 年 10 月，美国的 COVID 病例是如何增长的。有趣的是，您可以清楚地看到这一时期 COVID 的“波浪”。</p>
<p>这种类型的可视化被称为<strong>等值线图</strong>，它在比较不同地区（州、国家、大陆等）的特定变量随着时间的推移非常强大。</p>
<p>如果你想学习如何用 Python 构建一个，我在这里写了一份创建 Choropleth 地图的分步指南。</p>
<p><a href="https://towardsdatascience.com/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5">https://towardsdatascience.com/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5</a></p>
<br>
<h2 id="6-所有精神疾病的地图">6. 所有精神疾病的地图</h2>
<p>此可视化显示了 DSM-5 中的每一种精神障碍，它代表精神障碍诊断和统计手册。 它是美国精神障碍的标准分类。
有 20 多个类别和数百种疾病，一旦您开始了解它，这种可视化可能会花费比您想象的更多的时间。</p>
<p><a href="https://www.reddit.com/r/dataisbeautiful/comments/kugn7e/oc_every_mental_disorder_diagnosis_in_the_dsm5/">https://www.reddit.com/r/dataisbeautiful/comments/kugn7e/oc_every_mental_disorder_diagnosis_in_the_dsm5/</a></p>
<p><a href="https://webcache.googleusercontent.com/search?q=cache:LY74prf8a0gJ:https://www.psychiatry.org/File%2520Library/Psychiatrists/Practice/DSM/APA_DSM-5-Contents.pdf+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us&amp;client=safari">https://webcache.googleusercontent.com/search?q=cache:LY74prf8a0gJ:https://www.psychiatry.org/File%2520Library/Psychiatrists/Practice/DSM/APA_DSM-5-Contents.pdf+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us&amp;client=safari</a></p>
<br>
<h2 id="7-我们的塑料去哪儿了">7. 我们的塑料去哪儿了？</h2>
<p>该动画展示了塑料的生命周期，以及其中大部分的结束位置。 可悲的是，很明显，我们没有像我们应该回收的那样回收尽可能多的塑料，惊人的 60% 最终被填埋或进入海洋。</p>
<p>这种类型的可视化是一个动画桑基图，它类似于树图，因为它将数据分解为几个子组并按比例表示值。</p>
<p>如果您想学习如何在 Python 中构建 Sankey 图，请查看此链接。</p>
<p><a href="https://towardsdatascience.com/sankey-diagram-basics-with-pythons-plotly-7a13d557401a">https://towardsdatascience.com/sankey-diagram-basics-with-pythons-plotly-7a13d557401a</a></p>
<br>
<h2 id="8--近60年来top-100-艺术家">8.  近60年来，Top 100 艺术家</h2>
<p>最后，这个可视化显示了 Billboard 1960 年到 2020 年的前 100 位艺术家。我个人喜欢这个图表，因为它提供了很多信息：你可以看到顶级艺术家是谁，他们什么时候最流行，以及他们有多少歌曲 称霸排行榜！</p>
<p>你认识多少艺术家？</p>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext中文文本分析库 | 值得收藏</title>
      <link>https://textdata.cn/blog/cntext_v_1/</link>
      <pubDate>Mon, 08 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/cntext_v_1/</guid>
      <description>简单好用的中文Python文本分析包</description>
      <content:encoded><![CDATA[<h2 id="cntext">cntext</h2>
<p>中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等</p>
<ul>
<li><a href="https://github.com/hidadeng/cntext">github地址</a> <code>https://github.com/hidadeng/cntext</code></li>
<li><a href="https://pypi.org/project/cntext/">pypi地址</a>  <code>https://pypi.org/project/cntext/</code></li>
<li><a href="https://ke.qq.com/course/482241?tuin=163164df">视频课-<strong>Python网络爬虫与文本数据分析</strong></a></li>
</ul>
<p>功能模块含</p>
<ul>
<li><strong>cntext</strong></li>
<li><strong>stats</strong>  文本统计,可读性等</li>
<li><strong>dictionary</strong> 构建词表(典)</li>
<li><strong>sentiment</strong>  情感分析</li>
<li><strong>similarity</strong>   文本相似度</li>
<li><strong>visualization</strong> 可视化，如词云图</li>
</ul>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/cntext/tree/main/examples">https://github.com/hidadeng/cntext/tree/main/examples</a></p>
<br>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install cntext==0.9
</code></pre></div><br>
<h2 id="一cntext">一、cntext</h2>
<p>查看cntext基本信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span>

<span class="n">help</span><span class="p">(</span><span class="n">cntext</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">Help</span> <span class="nx">on</span> <span class="kn">package</span> <span class="nx">cntext</span><span class="p">:</span>

<span class="nx">NAME</span>
    <span class="nx">cntext</span>

<span class="nx">PACKAGE</span> <span class="nx">CONTENTS</span>
    <span class="nf">description</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">dictionary</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">sentiment</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">similarity</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">visualization</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>

<span class="nx">DATA</span>
    <span class="nx">ADV_words</span> <span class="p">=</span> <span class="p">[</span><span class="sc">&#39;都&#39;</span><span class="p">,</span> <span class="sc">&#39;全&#39;</span><span class="p">,</span> <span class="sc">&#39;单&#39;</span><span class="p">,</span> <span class="sc">&#39;共&#39;</span><span class="p">,</span> <span class="sc">&#39;光&#39;</span><span class="p">,</span> <span class="sc">&#39;尽&#39;</span><span class="p">,</span> <span class="sc">&#39;净&#39;</span><span class="p">,</span> <span class="sc">&#39;仅&#39;</span><span class="p">,</span> <span class="sc">&#39;就&#39;</span><span class="p">,</span> <span class="sc">&#39;只&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一共</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">CONJ_words</span> <span class="p">=</span> <span class="p">[</span><span class="sc">&#39;乃&#39;</span><span class="p">,</span> <span class="sc">&#39;乍&#39;</span><span class="p">,</span> <span class="sc">&#39;与&#39;</span><span class="p">,</span> <span class="sc">&#39;无&#39;</span><span class="p">,</span> <span class="sc">&#39;且&#39;</span><span class="p">,</span> <span class="sc">&#39;丕&#39;</span><span class="p">,</span> <span class="sc">&#39;为&#39;</span><span class="p">,</span> <span class="sc">&#39;共&#39;</span><span class="p">,</span> <span class="sc">&#39;其&#39;</span><span class="p">,</span> <span class="sc">&#39;况&#39;</span><span class="p">,</span> <span class="sc">&#39;厥&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">DUTIR_Ais</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">sigh</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一命呜呼</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一场春梦</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一场空</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一头跌在菜刀上</span><span class="err">－</span><span class="nx">切肤之痛</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一念之差</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">..</span>
    <span class="nx">DUTIR_Haos</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">1</span><span class="nx">兒巴经</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">3</span><span class="nx">x</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">8</span><span class="nx">错</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BUCUO</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">Cool毙</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">NB</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Jings</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">848</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">FT</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">_god</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">yun</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个骰子掷七点</span><span class="err">－</span><span class="nx">出乎意料</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一举成名</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">......</span>
    <span class="nx">DUTIR_Jus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一则以喜</span><span class="err">，</span><span class="nx">一则以惧</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一发千钧</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一年被蛇咬</span><span class="err">，</span><span class="nx">三年怕草索</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一座皆惊</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一脸横肉</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一蛇两头</span><span class="o">...</span>
    <span class="nx">DUTIR_Les</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="p">:)</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">CC</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">Happy</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">LOL</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">_so</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">haha</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Nus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">2</span><span class="nx">气斗狠</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">MD</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">TNND</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">gun</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">kao</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一刀两断</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Wus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">B4</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BD</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BS</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">HC</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">HJ</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">JJWW</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_deny</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;不&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不可</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不是</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不能</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不要</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;休&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_extreme</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;万&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万万</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万分</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万般</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不亦乐乎</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不可开交</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_ish</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一些</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一点</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一点儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不丁点儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不大</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不怎么</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_more</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;多&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">大不了</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">如斯</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">尤甚</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;强&#39;</span><span class="p">,</span> <span class="sc">&#39;愈&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_neg</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一下子爆发</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一下子爆发的一连串</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一不小心</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个屁</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一仍旧贯</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一偏</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_pos</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一专多能</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一丝不差</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一丝不苟</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个心眼儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一五一十</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_very</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">不为过</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不少</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不胜</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不过</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">何啻</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">何止</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">STOPWORDS_en</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">about</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">above</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">across</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">after</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">afterwards</span><span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">STOPWORDS_zh</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;、&#39;</span><span class="p">,</span> <span class="sc">&#39;。&#39;</span><span class="p">,</span> <span class="sc">&#39;〈&#39;</span><span class="p">,</span> <span class="sc">&#39;〉&#39;</span><span class="p">,</span> <span class="sc">&#39;《&#39;</span><span class="p">,</span> <span class="sc">&#39;》&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    
    <span class="nx">FORMAL_pos_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">100</span><span class="nx">强</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">3</span><span class="nx">A级</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">50</span><span class="nx">强</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">AAA级</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">AAA企业</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">爱戴</span><span class="err">&#39;</span><span class="p">,..]</span>
    <span class="nx">FORMAL_neg_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">安于现状</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗藏</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗淡</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗黑</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗流</span><span class="err">&#39;</span><span class="p">,</span> <span class="p">..]</span>
    <span class="nx">UNFORMAL_pos_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">爱心</span><span class="sc">&#39;,&#39;</span><span class="nx">安定</span><span class="sc">&#39;,&#39;</span><span class="nx">安全</span><span class="sc">&#39;,&#39;</span><span class="nx">安然无恙</span><span class="sc">&#39;,&#39;</span><span class="nx">安泰</span><span class="sc">&#39;,&#39;</span><span class="nx">霸主</span><span class="err">&#39;</span><span class="p">,</span><span class="o">...</span><span class="p">]</span>
    <span class="nx">UNFORMAL_neg_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">哀鸿遍野</span><span class="sc">&#39;,&#39;</span><span class="nx">肮脏</span><span class="sc">&#39;,&#39;</span><span class="nx">罢免</span><span class="sc">&#39;,&#39;</span><span class="nx">白痴</span><span class="sc">&#39;,&#39;</span><span class="nx">败笔</span><span class="sc">&#39;,&#39;</span><span class="nx">败诉</span><span class="sc">&#39;,&#39;</span><span class="nx">半信半疑</span><span class="err">&#39;</span><span class="p">..]</span>



<span class="nx">FILE</span>
    <span class="o">/</span><span class="nx">Library</span><span class="o">/</span><span class="nx">Frameworks</span><span class="o">/</span><span class="nx">Python</span><span class="p">.</span><span class="nx">framework</span><span class="o">/</span><span class="nx">Versions</span><span class="o">/</span><span class="mf">3.7</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">python3</span><span class="mf">.7</span><span class="o">/</span><span class="nx">site</span><span class="o">-</span><span class="nx">packages</span><span class="o">/</span><span class="nx">cntext</span><span class="o">/</span><span class="nx">__init__</span><span class="p">.</span><span class="nx">py</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext</span> <span class="kn">import</span> <span class="n">dict_info</span>

<span class="n">dict_info</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"> 【大连理工大学情感本体库】
     七大情绪分类，依次是哀、恶、好、惊、惧、乐、怒；对应的情绪词表依次：
    DUTIR_Ais = {&#34;泣血捶膺&#34;, &#34;望断白云&#34;, &#34;日暮途穷&#34;, &#34;身微力薄&#34;...}
    DUTIR_Wus = {&#34;饰非遂过&#34;, &#34;恶语&#34;, &#34;毁害&#34;, &#34;恶籍盈指&#34;, &#34;脾气爆躁&#34;, &#34;淫贱&#34;, &#34;凌乱&#34;...}
    DUTIR_Haos =  {&#34;打破砂锅璺到底&#34;, &#34;多彩&#34;, &#34;披沙拣金&#34;, &#34;见机行事&#34;, &#34;精神饱满&#34;...}
    DUTIR_Jings = {&#34;骇人视听&#34;, &#34;拍案惊奇&#34;, &#34;悬念&#34;, &#34;无翼而飞&#34;, &#34;原来&#34;, &#34;冷门&#34;...}
    DUTIR_Jus ={&#34;山摇地动&#34;, &#34;月黑风高&#34;, &#34;流血&#34;, &#34;老鼠偷猫饭－心惊肉跳&#34;, &#34;一发千钧&#34;...}
    DUTIR_Les ={&#34;含哺鼓腹&#34;, &#34;欢呼鼓舞&#34;, &#34;莺歌蝶舞&#34;, &#34;将伯之助&#34;, &#34;逸兴横飞&#34;, &#34;舒畅&#34;...}
    DUTIR_Nus = {&#34;怨气满腹&#34;, &#34;面有愠色&#34;, &#34;愤愤&#34;, &#34;直眉瞪眼&#34;, &#34;负气斗狠&#34;, &#34;挑眼&#34;...}
    
    【知网Hownet词典】
    含正负形容词、否定词、副词等词表，对应的词表依次:
    HOWNET_deny = {&#34;不&#34;, &#34;不是&#34;, &#34;不能&#34;, &#34;不可&#34;...}
    HOWNET_extreme = {&#34;百分之百&#34;, &#34;倍加&#34;, &#34;备至&#34;, &#34;不得了&#34;...}
    HOWNET_ish = {&#34;点点滴滴&#34;, &#34;多多少少&#34;, &#34;怪&#34;, &#34;好生&#34;, &#34;还&#34;, &#34;或多或少&#34;...}
    HOWNET_more = {&#34;大不了&#34;, &#34;多&#34;, &#34;更&#34;, &#34;比较&#34;, &#34;更加&#34;, &#34;更进一步&#34;, &#34;更为&#34;, &#34;还&#34;, &#34;还要&#34;...}
    HOWNET_neg = {&#34;压坏&#34;, &#34;鲁莽的&#34;, &#34;被控犯罪&#34;, &#34;银根紧&#34;, &#34;警惕的&#34;, &#34;残缺&#34;, &#34;致污物&#34;, &#34;柔弱&#34;...}
    HOWNET_pos = {&#34;无误&#34;, &#34;感激不尽&#34;, &#34;受大众欢迎&#34;, &#34;敬礼&#34;,  &#34;文雅&#34;, &#34;一尘不染&#34;, &#34;高精度&#34;, &#34;兴盛&#34;...}
    HOWNET_very = {&#34;不为过&#34;, &#34;超&#34;, &#34;超额&#34;, &#34;超外差&#34;, &#34;超微结构&#34;, &#34;超物质&#34;, &#34;出头&#34;...}
    
    【停用词表】
    中英文停用词表，依次
    STOPWORDS_zh = {&#34;经&#34;, &#34;得&#34;, &#34;则甚&#34;, &#34;跟&#34;, &#34;好&#34;, &#34;具体地说&#34;...}
    STOPWORDS_en = {&#39;a&#39;, &#39;about&#39;, &#39;above&#39;, &#39;across&#39;, &#39;after&#39;...}
    
    【中文副词/连词】
    副词ADV、连词CONJ
    ADV_words = [&#39;都&#39;, &#39;全&#39;, &#39;单&#39;, &#39;共&#39;, &#39;光&#39;...}
    CONJ_words = [&#39;乃&#39;, &#39;乍&#39;, &#39;与&#39;, &#39;无&#39;, &#39;且&#39;...}
    
    【金融情绪词典】
     姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.
     #正式-肯定情绪词典
     FORMAL_pos_words = [&#39;100强&#39;, &#39;3A级&#39;, &#39;50强&#39;, &#39;AAA级&#39;, &#39;AAA企业&#39;, &#39;爱戴&#39;,...]
     #正式-否定情绪词典
     FORMAL_neg_words = [&#39;安于现状&#39;, &#39;暗藏&#39;, &#39;暗淡&#39;, &#39;暗黑&#39;, &#39;暗流&#39;, ...]
     #非正式-肯定情绪词典
     UNFORMAL_pos_words = [&#39;爱心&#39;,&#39;安定&#39;,&#39;安全&#39;,&#39;安然无恙&#39;,&#39;安泰&#39;,&#39;霸主&#39;,...]
     #非正式-否定情绪词典
     UNFORMAL_neg_words = [&#39;哀鸿遍野&#39;,&#39;肮脏&#39;,&#39;罢免&#39;,&#39;白痴&#39;,&#39;败笔&#39;,&#39;败诉&#39;,&#39;半信半疑&#39;...]
</code></pre></div><br>
<p>查看词表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext</span> <span class="kn">import</span> <span class="n">CONJ_words</span><span class="p">,</span> <span class="n">ADV_words</span>

<span class="c1">#获取连词词表</span>
<span class="n">CONJ_words</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;乃&#39;,
 &#39;乍&#39;,
 &#39;与&#39;,
 &#39;无&#39;,
 &#39;且&#39;,
 &#39;丕&#39;,
 &#39;为&#39;,
 &#39;共&#39;,
 &#39;其&#39;,
 &#39;况&#39;,
 &#39;厥&#39;,
 &#39;则&#39;,
 &#39;那&#39;,
 &#39;兼&#39;,
 ...
 ]
</code></pre></div><p><br><br></p>
<h2 id="二stats">二、stats</h2>
<p>目前含</p>
<ul>
<li>term_freq 词频统计函数，返回Counter类型</li>
<li>readability 中文可读性</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.stats</span> <span class="kn">import</span> <span class="n">term_freq</span><span class="p">,</span> <span class="n">readability</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更&#39;</span>
<span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<p>**中文可读性 ** 算法参考自</p>
<blockquote>
<p>徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.</p>
</blockquote>
<ul>
<li>readability1 &mdash;每个分句中的平均字数</li>
<li>readability2  &mdash;每个句子中副词和连词所占的比例</li>
<li>readability3  &mdash;参考Fog Index， readability3=(readability1+readability2)×0.5</li>
</ul>
<p>以上三个指标越大，都说明文本的复杂程度越高，可读性越差。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">readability</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 27.0,
 &#39;readability2&#39;: 0.17647058823529413,
 &#39;readability3&#39;: 13.588235294117647}
</code></pre></div><p><br><br></p>
<h2 id="三dictionary">三、dictionary</h2>
<p>本模块用于构建词表(典),含</p>
<ul>
<li>SoPmi 共现法扩充词表(典)</li>
<li>W2VModels 词向量word2vec扩充词表(典)</li>
</ul>
<h3 id="31-sopmi-共现法">3.1 SoPmi 共现法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">SoPmi</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">sopmier</span> <span class="o">=</span> <span class="n">SoPmi</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span>
                <span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_corpus.txt&#39;</span><span class="p">,</span>  <span class="c1">#原始数据，您的语料</span>
                <span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_seed_words.txt&#39;</span><span class="p">,</span> <span class="c1">#人工标注的初始种子词</span>
                <span class="p">)</span>   

<span class="n">sopmier</span><span class="o">.</span><span class="n">sopmi</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">step 1/4:...seg corpus ...
Loading model cost 0.678 seconds.
Prefix dict has been built successfully.
step 1/4 finished:...cost 60.78995203971863...
step 2/4:...collect cowords ...
step 2/4 finished:...cost 0.6169600486755371...
step 3/4:...compute sopmi ...
step 1/4 finished:...cost 0.26422882080078125...
step 4/4:...save candiwords ...
finished! cost 61.8965539932251
</code></pre></div><br>
<h3 id="32-w2vmodels-词向量">3.2 W2VModels 词向量</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">W2VModels</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#初始化模型</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>  <span class="c1">#语料数据 w2v_corpus.txt</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_corpus.txt&#39;</span><span class="p">)</span>


<span class="c1">#根据种子词，筛选出没类词最相近的前100个词</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/integrity.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/innovation.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/quality.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/respect.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/teamwork.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">数据预处理开始.......
预处理结束...........
Word2Vec模型训练开始......
已将模型存入 /Users/Desktop/cntext/test/output/w2v_candi_words/w2v.model 

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 572 个相似的候选词
计算每个候选词 与 integrity 的相似度， 选出相似度最高的前 100 个候选词
已完成 【integrity 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/integrity.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 516 个相似的候选词
计算每个候选词 与 innovation 的相似度， 选出相似度最高的前 100 个候选词
已完成 【innovation 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/innovation.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 234 个相似的候选词
计算每个候选词 与 quality 的相似度， 选出相似度最高的前 100 个候选词
已完成 【quality 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/quality.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 243 个相似的候选词
计算每个候选词 与 respect 的相似度， 选出相似度最高的前 100 个候选词
已完成 【respect 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/respect.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 319 个相似的候选词
计算每个候选词 与 teamwork 的相似度， 选出相似度最高的前 100 个候选词
已完成 【teamwork 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/teamwork.txt， 耗时 46 秒
</code></pre></div><p><br><br></p>
<h2 id="四-sentiment">四、 sentiment</h2>
<ul>
<li>senti_by_hownet 使用知网Hownet词典对文本进行<strong>情感</strong>分析</li>
<li>senti_by_dutir  使用大连理工大学情感本体库dutir对文本进行<strong>情绪</strong>分析</li>
<li>senti_by_diydict 使用<strong>自定义词典</strong> 对文本进行<strong>情感</strong>分析</li>
</ul>
<h3 id="41-senti_by_hownettext-adj_advfalse">4.1 senti_by_hownet(text, adj_adv=False)</h3>
<p>使用知网Hownet词典进行(中)文本数据的情感分析，统计正、负情感信息出现次数(得分)</p>
<ul>
<li>text:  待分析的中文文本数据</li>
<li>adj_adv:  是否考虑副词（否定词、程度词）对情绪形容词的反转和情感强度修饰作用，默认False。默认False只统计情感形容词出现个数；</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.sentiment</span> <span class="kn">import</span> <span class="n">senti_by_hownet</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>

<span class="n">senti_by_dutir</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;word_num&#39;: 12,
 &#39;sentence_num&#39;: 2,
 &#39;stopword_num&#39;: 4,
 &#39;好_num&#39;: 0,
 &#39;乐_num&#39;: 1,
 &#39;哀_num&#39;: 0,
 &#39;怒_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;惊_num&#39;: 0}
</code></pre></div><br>
<p>考虑副词（否定词、程度词）对情绪形容词的反转和情感强度修饰作用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">senti_by_hownet</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">adj_adv</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;sentence_num&#39;: 1,
 &#39;word_num&#39;: 12,
 &#39;stopword_num&#39;: 3,
 &#39;pos_score&#39;: 13.0,
 &#39;neg_score&#39;: 0.0}
</code></pre></div><p><br><br></p>
<h3 id="42-senti_by_dutirtext">4.2 senti_by_dutir(text)</h3>
<p>使用大连理工大学情感本体库对文本进行情绪分析，统计各情绪词语出现次数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.sentiment</span> <span class="kn">import</span> <span class="n">senti_by_dutir</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>

<span class="n">senti_by_dutir</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;word_num&#39;: 12,
 &#39;sentence_num&#39;: 2,
 &#39;stopword_num&#39;: 4,
 &#39;好_num&#39;: 0,
 &#39;乐_num&#39;: 1,
 &#39;哀_num&#39;: 0,
 &#39;怒_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;惊_num&#39;: 0}
</code></pre></div><blockquote>
<p>情绪分析使用的大连理工大学情感本体库，如发表论文，请注意用户许可协议</p>
<p>如果用户使用该资源发表论文或取得科研成果，请在论文中添加诸如“使用了大连理工大学信息检索研究室的情感词汇本体” 字样加以声明。</p>
<p>参考文献中加入引文“徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.”</p>
</blockquote>
<p><br><br></p>
<h3 id="43-senti_by_diytext">4.3 senti_by_diy(text)</h3>
<p>使用diy词典进行情感分析，计算各个情绪词出现次数，未考虑强度副词、否定词对情感的复杂影响，</p>
<ul>
<li>text:  待分析中文文本</li>
<li>sentiwords:  情感词字典；
{&lsquo;category1&rsquo;:  &lsquo;category1 词语列表&rsquo;,
&lsquo;category2&rsquo;: &lsquo;category2词语列表&rsquo;,
&lsquo;category3&rsquo;: &lsquo;category3词语列表&rsquo;,
&hellip;
}</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sentiwords</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;开心&#39;</span><span class="p">,</span> <span class="s1">&#39;愉快&#39;</span><span class="p">,</span> <span class="s1">&#39;倍爽&#39;</span><span class="p">],</span>
              <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;难过&#39;</span><span class="p">,</span> <span class="s1">&#39;悲伤&#39;</span><span class="p">],</span>
              <span class="s1">&#39;adv&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;倍&#39;</span><span class="p">]}</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>
<span class="n">senti_by_diydict</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">sentiwords</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;pos_num&#39;: 1,
 &#39;neg_num&#39;: 0,
 &#39;adv_num&#39;: 1,
 &#39;stopword_num&#39;: 4,
 &#39;sentence_num&#39;: 2,
 &#39;word_num&#39;: 12}
</code></pre></div><p><br><br></p>
<h3 id="44-注意">4.4 注意</h3>
<p><strong>返回结果</strong>:  <strong>num</strong>表示词语出现次数； score是考虑副词、否定词对情感的修饰，结果不是词频，是情感类别的得分。</p>
<p><br><br></p>
<h2 id="五similarity">五、similarity</h2>
<p>使用cosine、jaccard、miniedit等计算两文本的相似度，算法实现参考自</p>
<blockquote>
<p>Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.</p>
</blockquote>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">from cntext.similarity import similarity_score

text1 = &#39;编程真好玩编程真好玩&#39;
text2 = &#39;游戏真好玩编程真好玩&#39;

similarity_score(text1, text2)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;Sim_Cosine&#39;: 0.816496580927726,
 &#39;Sim_Jaccard&#39;: 0.6666666666666666,
 &#39;Sim_MinEdit&#39;: 1,
 &#39;Sim_Simple&#39;: 0.9183673469387755}
</code></pre></div><p><br><br></p>
<h2 id="六visualization">六、visualization</h2>
<p>文本信息可视化，含wordcloud、wordshiftor</p>
<ul>
<li>wordcloud 词云图</li>
<li>wordshiftor 两文本词移图</li>
</ul>
<h3 id="61-wordcloudtext-title-html_path">6.1 wordcloud(text, title, html_path)</h3>
<ul>
<li>text:  中文文本字符串数据</li>
<li>title:  词云图标题</li>
<li>html_path:  词云图html文件存储路径</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.visualization</span> <span class="kn">import</span> <span class="n">wordcloud</span>

<span class="n">text1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;在信息化时代，各种各样的数据被广泛采集和利用，有些数据看似无关紧要甚至好像是公开的，但同样关乎国家安全。11月1日是《反间谍法》颁布实施七周年。近年来，国家安全机关按照《反间谍法》《数据安全法》有关规定，依法履行数据安全监管职责，在全国范围内开展涉外数据专项执法行动，发现一些境外数据公司长期、大量、实时搜集我境内船舶数据，数据安全领域的“商业间谍”魅影重重。
</span><span class="s2">
</span><span class="s2">2020年6月，国家安全机关在反间谍专项行动中发现，有境外数据公司通过网络在境内私下招募“数据贡献员”。广东省湛江市国家安全局据此开展调查，在麻斜军港附近发现有可疑的无线电设备在持续搜集湛江港口舰船数据，并通过互联网实时传往境外。在临近海港的一个居民楼里，国家安全机关工作人员最终锁定了位置。
</span><span class="s2">
</span><span class="s2">一套简易的无线电设备是AIS陆基基站，用来接收AIS系统发射的船舶数据。AIS系统是船舶身份自动识别系统，国际海事组织要求300总吨以上船舶必须强制安装。船只在航行过程中，通过AIS系统向其他船只和主管部门发送船只航向、航速、目的港等信息，用于航行避让、交通导航、轨迹回溯等功能。国家安全机关查获的设备虽然看上去简陋，功能却十分强大。
</span><span class="s2">
</span><span class="s2">国家安全机关进一步调查发现，这个基站的来历并不简单。2016年，湛江市的无线电爱好者郑某偶然收到一封境外某海事数据公司发来的邀请邮件。
</span><span class="s2">
</span><span class="s2">作为资深的无线电爱好者，能免费领取价值几千元的设备还能获取更多的船舶信息，郑某当然心动。而且，这个基站的架设也非常容易，只要简单组装连上家里的网络，自己的任务就算完成。郑某马上浏览了这家公司申请无线电设备的页面，并按对方要求填写了信息。
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">wordcloud</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text1</span><span class="p">,</span> 
          <span class="n">title</span><span class="o">=</span><span class="s1">&#39;词云图测试&#39;</span><span class="p">,</span> 
          <span class="n">html_path</span><span class="o">=</span><span class="s1">&#39;output/词云图测试.html&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>

<figure >
    
        <img src="img/wordcloud.png" width="800" />
    
    
</figure>

<br>
<h3 id="62-wordshiftortext1-text2-title-top_n-matplotlib_family">6.2 wordshiftor(text1, text2, title, top_n, matplotlib_family)</h3>
<ul>
<li>text1:  文本数据1；字符串</li>
<li>text2:  文本数据2；字符串</li>
<li>title:  词移图标题</li>
<li>top_n:  显示最常用的前n词； 默认值15</li>
<li>matplotlib_family matplotlib中文字体，默认&quot;Arial Unicode MS&quot;；如绘图字体乱码请，请参考下面提示</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;在信息化时代，各种各样的数据被广泛采集和利用，有些数据看似无关紧要甚至好像是公开的，但同样关乎国家安全。11月1日是《反间谍法》颁布实施七周年。近年来，国家安全机关按照《反间谍法》《数据安全法》有关规定，依法履行数据安全监管职责，在全国范围内开展涉外数据专项执法行动，发现一些境外数据公司长期、大量、实时搜集我境内船舶数据，数据安全领域的“商业间谍”魅影重重。
</span><span class="s2">
</span><span class="s2">2020年6月，国家安全机关在反间谍专项行动中发现，有境外数据公司通过网络在境内私下招募“数据贡献员”。广东省湛江市国家安全局据此开展调查，在麻斜军港附近发现有可疑的无线电设备在持续搜集湛江港口舰船数据，并通过互联网实时传往境外。在临近海港的一个居民楼里，国家安全机关工作人员最终锁定了位置。
</span><span class="s2">
</span><span class="s2">一套简易的无线电设备是AIS陆基基站，用来接收AIS系统发射的船舶数据。AIS系统是船舶身份自动识别系统，国际海事组织要求300总吨以上船舶必须强制安装。船只在航行过程中，通过AIS系统向其他船只和主管部门发送船只航向、航速、目的港等信息，用于航行避让、交通导航、轨迹回溯等功能。国家安全机关查获的设备虽然看上去简陋，功能却十分强大。
</span><span class="s2">
</span><span class="s2">国家安全机关进一步调查发现，这个基站的来历并不简单。2016年，湛江市的无线电爱好者郑某偶然收到一封境外某海事数据公司发来的邀请邮件。
</span><span class="s2">
</span><span class="s2">作为资深的无线电爱好者，能免费领取价值几千元的设备还能获取更多的船舶信息，郑某当然心动。而且，这个基站的架设也非常容易，只要简单组装连上家里的网络，自己的任务就算完成。郑某马上浏览了这家公司申请无线电设备的页面，并按对方要求填写了信息。
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>


<span class="n">text2</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">通知强调，各地商务主管部门要紧紧围绕保供稳价工作目标，压实“菜篮子”市长负责制，细化工作措施；强化横向协作与纵向联动，加强与有关部门的工作协调，形成工作合力；建立完善省际间和本地区联保联供机制，健全有关工作方案，根据形势及时开展跨区域调运；加强市场运行监测，每日跟踪蔬菜、肉类等重点生活必需品供求和价格变化情况，及时预测，及早预警。
</span><span class="s2">
</span><span class="s2">通知要求，各地支持鼓励大型农产品流通企业与蔬菜、粮油、畜禽养殖等农产品生产基地建立紧密合作关系，签订长期供销协议；耐储蔬菜要提前采购，锁定货源，做好本地菜与客菜之间，北菜与南菜之间、设施菜与露天菜之间的梯次轮换和衔接供应；健全完备本地肉类储备规模及管理制度；北方省份要按时完成本年度冬春蔬菜储备计划，南方省份要根据自身情况建立完善蔬菜储备；及时投放肉类、蔬菜等生活必需品储备，补充市场供应。
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="kn">from</span> <span class="nn">cntext.visualization</span> <span class="kn">import</span> <span class="n">wordshiftor</span>

<span class="n">wordshiftor</span><span class="p">(</span><span class="n">text1</span><span class="o">=</span><span class="n">text1</span><span class="p">,</span> 
            <span class="n">text2</span><span class="o">=</span><span class="n">text2</span><span class="p">,</span> 
            <span class="n">title</span><span class="o">=</span><span class="s1">&#39;两文本对比&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>

<figure >
    
        <img src="img/wordshiftor.png" width="800" />
    
    
</figure>

<h3 id="63-textpictitlepython测试-subtitle使用python生成图片-fontalibaba-puhuiti-boldotf-titlesize18-subsize14">6.3 textpic(title=&lsquo;PYTHON测试&rsquo;, subtitle=&lsquo;使用Python生成图片&rsquo;, font=&lsquo;Alibaba-PuHuiTi-Bold.otf&rsquo;, titlesize=1.8, subsize=14)</h3>
<ul>
<li>title:  主标题</li>
<li>subtitle: 副标题</li>
<li>font:  本地中文字体路径</li>
<li>titlesize: 主标题字体大小</li>
<li>subsize: 副标题字体大小</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">textpic</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;PYTHON测试&#39;</span><span class="p">,</span> 
        <span class="n">subtitle</span><span class="o">=</span><span class="s1">&#39;使用Python生成图片&#39;</span><span class="p">,</span> 
        <span class="n">font</span><span class="o">=</span><span class="s1">&#39;data/Alibaba-PuHuiTi-Bold.otf&#39;</span><span class="p">,</span> 
        <span class="n">titlesize</span><span class="o">=</span><span class="mf">1.8</span><span class="p">,</span> 
        <span class="n">subsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/result.png" width="800" />
    
    
</figure>

<br>
<p><strong>注意</strong></p>
<blockquote>
<p>设置参数matplotlib_family，需要先运行下面代码获取本机字体列表
from matplotlib.font_manager import FontManager
mpl_fonts = set(f.name for f in FontManager().ttflist)
print(mpl_fonts)</p>
</blockquote>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugging Face | 自然语言处理平台</title>
      <link>https://textdata.cn/blog/huggingface_test/</link>
      <pubDate>Sun, 07 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/huggingface_test/</guid>
      <description>十行以内代码实现任意NLP功能</description>
      <content:encoded><![CDATA[<p>Huggingface（抱抱脸）总部位于纽约，是一家专注于自然语言处理、人工智能和分布式系统的创业公司。他们所提供的聊天机器人技术一直颇受欢迎，但更出名的是他们在NLP开源社区上的贡献。</p>
<p>Huggingface一直致力于自然语言处理NLP技术的平民化(democratize)，希望每个人都能用上最先进(SOTA, state-of-the-art)的NLP技术，而非困窘于训练资源的匮乏。</p>
<p><strong>Hugging Face所有模型的地址</strong></p>
<p><a href="https://huggingface.co/models">https://huggingface.co/models</a></p>
<p>你可以在这里下载所需要的模型，也可以上传你微调之后用于特定task的模型。</p>
<br>
<p><strong>Hugging Face使用文档的地址</strong></p>
<p><a href="https://huggingface.co/transformers/master/index.html">https://huggingface.co/transformers/master/index.html</a></p>
<p><br><br></p>
<h2 id="英汉互译">英汉互译</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">zh2en_model</span> <span class="o">=</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-zh-en&#39;</span><span class="p">)</span>
<span class="n">zh2en_tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-zh-en&#39;</span><span class="p">)</span>
<span class="n">zh2en_translation</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;translation_zh_to_en&#39;</span><span class="p">,</span> 
                       <span class="n">model</span><span class="o">=</span><span class="n">zh2en_model</span><span class="p">,</span> 
                       <span class="n">tokenizer</span><span class="o">=</span><span class="n">zh2en_tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">zh2en_translation</span><span class="p">(</span><span class="s1">&#39;Python是一门非常强大的编程语言!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>[{'translation_text': 'Python is a very powerful programming language!'}]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">en2zh_model</span> <span class="o">=</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-en-zh&#39;</span><span class="p">)</span>
<span class="n">en2zh_tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-en-zh&#39;</span><span class="p">)</span>

<span class="n">en2zh_translation</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;translation_en_to_zh&#39;</span><span class="p">,</span> 
                       <span class="n">model</span><span class="o">=</span><span class="n">en2zh_model</span><span class="p">,</span> 
                       <span class="n">tokenizer</span><span class="o">=</span><span class="n">en2zh_tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">en2zh_translation</span><span class="p">(</span><span class="s1">&#39;Python is a very powerful programming language!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>[{'translation_text': 'Python是一个非常强大的编程语言!'}]
</code></pre>
<p><br><br></p>
<h2 id="文本分类">文本分类</h2>
<p>模型 <strong>uer/roberta-base-finetuned-chinanews-chinese</strong>是使用5个中文文本分类数据集训练得到</p>
<ul>
<li>京东full、京东binary和大众点评数据集包含不同情感极性的用户评论数据。</li>
<li>凤凰网 和 China Daily 包含不同主题类的新闻文本数据</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForSequenceClassification</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;uer/roberta-base-finetuned-chinanews-chinese&#39;</span><span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;uer/roberta-base-finetuned-chinanews-chinese&#39;</span><span class="p">)</span>
<span class="n">text_classification</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;sentiment-analysis&#39;</span><span class="p">,</span> 
                               <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span> 
                               <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_text</span> <span class="o">=</span> <span class="s2">&#34;上证指数大涨2%&#34;</span>

<span class="n">text_classification</span><span class="p">(</span><span class="n">test_text</span><span class="p">,</span> <span class="n">return_all_scores</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>[[{'label': 'mainland China politics', 'score': 0.0002807585697155446},
  {'label': 'Hong Kong - Macau politics', 'score': 0.00015504546172451228},
  {'label': 'International news', 'score': 6.818029214628041e-05},
  {'label': 'financial news', 'score': 0.9991051554679871},
  {'label': 'culture', 'score': 0.00011297615128569305},
  {'label': 'entertainment', 'score': 0.00012184812658233568},
  {'label': 'sports', 'score': 0.0001558474759804085}]]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_text</span> <span class="o">=</span> <span class="s2">&#34;Python是一门强大的编程语言&#34;</span>
<span class="n">text_classification</span><span class="p">(</span><span class="n">test_text</span><span class="p">,</span> <span class="n">return_all_scores</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>[[{'label': 'mainland China politics', 'score': 0.02050291746854782},
  {'label': 'Hong Kong - Macau politics', 'score': 0.0030984438490122557},
  {'label': 'International news', 'score': 0.005687597207725048},
  {'label': 'financial news', 'score': 0.03360358253121376},
  {'label': 'culture', 'score': 0.913349986076355},
  {'label': 'entertainment', 'score': 0.010810119099915028},
  {'label': 'sports', 'score': 0.012947351671755314}]]
</code></pre>
<p><br><br></p>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211108HuggingFace%E5%AD%A6%E4%B9%A0">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211108HuggingFace学习</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用matplotlib绘制超可爱超萌化的图表</title>
      <link>https://textdata.cn/blog/cute_matplotlib/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/cute_matplotlib/</guid>
      <description>萌化matplotlib图</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031%E4%BD%BF%E7%94%A8matplotlib%E7%BB%98%E5%88%B6%E5%8D%A1%E9%80%9A%E5%8C%96%E5%9B%BE%E8%A1%A8">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031使用matplotlib绘制卡通化图表</a></p>
<p>数据可视化是讲故事的好方法，从中可以轻松地吸收信息并识别数据中的模式。我们的一位学生决定使用 Matplotlib 在 Python 中创建数据可视化，以了解 Netflix 上可用的不同类型的内容。本文将重点介绍使用 Matplotlib 以一种有趣的方式进行数据可视化。</p>
<p>在 Netflix 上看完精彩的节目或电影后，您有没有想过 Netflix 为您提供了如此多的惊人内容？当然，我并不孤单，不是吗？一个想法会导致另一个想法，在不知不觉中，您已经下定决心进行探索性数据分析，以了解更多关于最受欢迎的演员是谁以及哪个国家/地区更喜欢哪种类型的信息。</p>
<p>使用 Python 制作常规的条形图和饼图，虽然它们在传达结果方面做得很好，但我想为这个项目添加一些有趣的元素。</p>
<p>我最近了解到你可以在 Python 最流行的数据可视化库 Matplotlib 中创建类似 xkcd 的绘图，并决定我应该在这个项目中整理我所有的 Matplotlib 可视化，只是为了让事情变得更有趣。</p>
<p>一起来看看数据怎么说吧！</p>
<br>
<h2 id="导入数据">导入数据</h2>
<p>7787部电影/TV节目的信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;netflix_titles.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="netflix历年发展里程碑">Netflix历年发展里程碑</h2>
<p>描述一下 Netflix 多年来演变的时间表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.dpi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">200</span>


<span class="c1"># these go on the numbers below</span>
<span class="n">tl_dates</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;1997</span><span class="se">\n</span><span class="s2">Founded&#34;</span><span class="p">,</span>
    <span class="s2">&#34;1998</span><span class="se">\n</span><span class="s2">Mail Service&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2003</span><span class="se">\n</span><span class="s2">Goes Public&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2007</span><span class="se">\n</span><span class="s2">Streaming service&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2016</span><span class="se">\n</span><span class="s2">Goes Global&#34;</span><span class="p">,</span>
    <span class="s2">&#34;2021</span><span class="se">\n</span><span class="s2">Netflix &amp; Chill&#34;</span>
<span class="p">]</span>
<span class="n">tl_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="c1"># the numbers go on these</span>
<span class="n">tl_sub_x</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mf">6.5</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>

<span class="n">tl_sub_times</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;1998&#34;</span><span class="p">,</span><span class="s2">&#34;2000&#34;</span><span class="p">,</span><span class="s2">&#34;2006&#34;</span><span class="p">,</span><span class="s2">&#34;2010&#34;</span><span class="p">,</span><span class="s2">&#34;2012&#34;</span>
<span class="p">]</span>

<span class="n">tl_text</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">&#34;Netflix.com launched&#34;</span><span class="p">,</span>
    <span class="s2">&#34;Starts</span><span class="se">\n</span><span class="s2">Personal</span><span class="se">\n</span><span class="s2">Recommendations&#34;</span><span class="p">,</span><span class="s2">&#34;Billionth DVD Delivery&#34;</span><span class="p">,</span><span class="s2">&#34;Canadian</span><span class="se">\n</span><span class="s2">Launch&#34;</span><span class="p">,</span><span class="s2">&#34;UK Launch&#34;</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
<span class="c1"># Set figure &amp; Axes</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">constrained_layout</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mf">1.75</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

    <span class="c1"># Timeline : line</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">xmin</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">xmax</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;deeppink&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Timeline : Date Points</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;palevioletred&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
    <span class="c1"># Timeline : Time Points</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">)),</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">,</span><span class="n">zorder</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

    <span class="c1"># Date Text</span>
    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">date</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">tl_x</span><span class="p">,</span> <span class="n">tl_dates</span><span class="p">):</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.55</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
                <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">,</span>
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>

    <span class="c1"># Stemplot : vertical line</span>
    <span class="n">levels</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">))</span>
    <span class="n">levels</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.3</span>
    <span class="n">levels</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.3</span>
    <span class="n">markerline</span><span class="p">,</span> <span class="n">stemline</span><span class="p">,</span> <span class="n">baseline</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">levels</span><span class="p">,</span> <span class="n">use_line_collection</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">baseline</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">markerline</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">setp</span><span class="p">(</span><span class="n">stemline</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;darkmagenta&#39;</span><span class="p">)</span>

    <span class="c1"># Text</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">txt</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">tl_sub_x</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">tl_sub_x</span><span class="p">,</span> <span class="n">tl_sub_times</span><span class="p">,</span> <span class="n">tl_text</span><span class="p">):</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mf">1.3</span><span class="o">*</span><span class="p">(</span><span class="n">idx</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
                <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">,</span>
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>

        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mf">1.3</span><span class="o">*</span><span class="p">(</span><span class="n">idx</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mf">0.6</span><span class="p">,</span> <span class="n">txt</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
            <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">)</span>

    <span class="c1"># Spine</span>
    <span class="k">for</span> <span class="n">spine</span> <span class="ow">in</span> <span class="p">[</span><span class="s2">&#34;left&#34;</span><span class="p">,</span> <span class="s2">&#34;top&#34;</span><span class="p">,</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="s2">&#34;bottom&#34;</span><span class="p">]:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">spines</span><span class="p">[</span><span class="n">spine</span><span class="p">]</span><span class="o">.</span><span class="n">set_visible</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>

    <span class="c1"># Ticks</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">([])</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticks</span><span class="p">([])</span>

    <span class="c1"># Title</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s2">&#34;Netflix through the years&#34;</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="s2">&#34;bold&#34;</span><span class="p">,</span> <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;royalblue&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="mf">2.4</span><span class="p">,</span><span class="mf">1.57</span><span class="p">,</span><span class="s2">&#34;From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?&#34;</span><span class="p">,</span> <span class="n">fontfamily</span><span class="o">=</span><span class="s1">&#39;serif&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;mediumblue&#39;</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="电影-vs-电视综艺">电影 vs 电视综艺</h2>
<p>接下来，我决定看一下电影与电视节目的比例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;type&#34;</span>
<span class="n">grouped</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">grouped</span> <span class="o">=</span> <span class="n">grouped</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="n">col</span> <span class="p">:</span> <span class="s2">&#34;count&#34;</span><span class="p">,</span> <span class="s2">&#34;index&#34;</span> <span class="p">:</span> <span class="n">col</span><span class="p">})</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">explode</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>  <span class="c1"># only &#34;explode&#34; the 2nd slice (i.e. &#39;TV Show&#39;)</span>
    <span class="n">fig1</span><span class="p">,</span> <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">ax1</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">grouped</span><span class="p">[</span><span class="s2">&#34;count&#34;</span><span class="p">],</span> <span class="n">explode</span><span class="o">=</span><span class="n">explode</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">grouped</span><span class="p">[</span><span class="s2">&#34;type&#34;</span><span class="p">],</span> <span class="n">autopct</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%1.1f%%</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="n">shadow</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">startangle</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>
    <span class="n">ax1</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;equal&#39;</span><span class="p">)</span>  <span class="c1"># Equal aspect ratio ensures that pie is drawn as a circle.</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="内容最多的国家">内容最多的国家</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;country&#34;</span>

<span class="n">categories</span> <span class="o">=</span> <span class="s2">&#34;, &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span>
<span class="n">counter_list</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
<span class="n">counter_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span> <span class="k">if</span> <span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span><span class="p">]</span>
<span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">]</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">y_pos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">))</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">y_pos</span><span class="p">,</span> <span class="n">values</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticks</span><span class="p">(</span><span class="n">y_pos</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_yticklabels</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">invert_yaxis</span><span class="p">()</span>  <span class="c1"># labels read top-to-bottom</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;Content&#39;</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;Countries with most content&#39;</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be3.png" width="100%" />
    
    
</figure>

<br>
<h2 id="最流行的导演">最流行的导演</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">import</span> <span class="n">figure</span>
<span class="kn">import</span> <span class="nn">math</span>

<span class="n">colours</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;orangered&#34;</span><span class="p">,</span> <span class="s2">&#34;mediumseagreen&#34;</span><span class="p">,</span> <span class="s2">&#34;darkturquoise&#34;</span><span class="p">,</span> <span class="s2">&#34;mediumpurple&#34;</span><span class="p">,</span> <span class="s2">&#34;deeppink&#34;</span><span class="p">,</span> <span class="s2">&#34;indianred&#34;</span><span class="p">]</span>
<span class="n">countries_list</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;United States&#34;</span><span class="p">,</span> <span class="s2">&#34;India&#34;</span><span class="p">,</span> <span class="s2">&#34;United Kingdom&#34;</span><span class="p">,</span> <span class="s2">&#34;Japan&#34;</span><span class="p">,</span> <span class="s2">&#34;France&#34;</span><span class="p">,</span> <span class="s2">&#34;Canada&#34;</span><span class="p">]</span>
<span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;director&#34;</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="n">figure</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
    <span class="n">x</span><span class="o">=</span><span class="mi">1</span>
    <span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries_list</span><span class="p">:</span>
        <span class="n">country_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;country&#34;</span><span class="p">]</span><span class="o">==</span><span class="n">country</span><span class="p">]</span>
        <span class="n">categories</span> <span class="o">=</span> <span class="s2">&#34;, &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">country_df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span>
        <span class="n">counter_list</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
        <span class="n">counter_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span> <span class="k">if</span> <span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;&#34;</span><span class="p">]</span>
        <span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">counter_list</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">:</span>
            <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">values</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span><span class="n">values</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">colours</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">values_int</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
        <span class="n">x</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s1">&#39;Popular Directors with the most content&#39;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be4.png" width="100%" />
    
    
</figure>

<br>
<h2 id="netflix-专注于什么样的内容">Netflix 专注于什么样的内容？</h2>
<p>我还想浏览评级栏并比较 Netflix 为儿童、青少年和成人制作的内容量——以及这些年来他们的重点是否从一个群体转移到另一个群体。</p>
<p>为此，我首先查看了 DataFrame 中的独特评级：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;date_added&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;date_added&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;date_added&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">year</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;Int64&#39;</span><span class="p">)</span>


<span class="n">ratings_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;TV-MA&#39;</span><span class="p">,</span> <span class="s1">&#39;R&#39;</span><span class="p">,</span> <span class="s1">&#39;PG-13&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-14&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-PG&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-G&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y7&#39;</span><span class="p">,</span> <span class="s1">&#39;PG&#39;</span><span class="p">,</span> <span class="s1">&#39;G&#39;</span><span class="p">,</span> <span class="s1">&#39;NC-17&#39;</span><span class="p">,</span> <span class="s1">&#39;TV-Y7-FV&#39;</span><span class="p">]</span>
<span class="n">ratings_group_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span> <span class="s1">&#39;Mature&#39;</span><span class="p">]</span>
<span class="n">ratings_dict</span><span class="o">=</span><span class="p">{</span>
    <span class="s1">&#39;TV-G&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;G&#39;</span><span class="p">:</span> <span class="s1">&#39;Little Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-PG&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y7&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;PG&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-Y7-FV&#39;</span><span class="p">:</span> <span class="s1">&#39;Older Kids&#39;</span><span class="p">,</span>
    <span class="s1">&#39;PG-13&#39;</span><span class="p">:</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-14&#39;</span><span class="p">:</span> <span class="s1">&#39;Teens&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TV-MA&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span><span class="p">,</span>
    <span class="s1">&#39;R&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span><span class="p">,</span>
    <span class="s1">&#39;NC-17&#39;</span><span class="p">:</span> <span class="s1">&#39;Mature&#39;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="n">rating_val</span><span class="p">,</span> <span class="n">rating_group</span> <span class="ow">in</span> <span class="n">ratings_dict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">rating</span> <span class="o">==</span> <span class="n">rating_val</span><span class="p">,</span> <span class="s2">&#34;rating&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">rating_group</span>
    
    
    
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;rating_val&#39;</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
<span class="n">x</span><span class="o">=</span><span class="mi">0</span>
<span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;kinda</span><span class="se">\n</span><span class="s1">less&#39;</span><span class="p">,</span> <span class="s1">&#39;not so</span><span class="se">\n</span><span class="s1">bad&#39;</span><span class="p">,</span> <span class="s1">&#39;holyshit</span><span class="se">\n</span><span class="s1">that</span><span class="se">\&#39;</span><span class="s1">s too</span><span class="se">\n</span><span class="s1">many&#39;</span><span class="p">]</span>

<span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">ratings_group_list</span><span class="p">:</span>
        <span class="n">grouped</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;rating&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">r</span><span class="p">]</span>
        <span class="n">year_df</span> <span class="o">=</span> <span class="n">grouped</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;year_added&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
        <span class="n">year_df</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">],</span> <span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;rating_val&#39;</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="n">colours</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">marker</span><span class="o">=</span><span class="s1">&#39;o&#39;</span><span class="p">)</span>
        <span class="n">values_int</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2008</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">year_df</span><span class="p">[</span><span class="s1">&#39;year_added&#39;</span><span class="p">]))</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([</span><span class="mi">200</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">1000</span><span class="p">],</span> <span class="n">labels</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">values_int</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Count of shows and movies that Netflix</span><span class="se">\n</span><span class="s1"> has been producing for different audiences&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Year&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Content Count&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
        <span class="n">x</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">ratings_group_list</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
</code></pre></div>
<figure >
    
        <img src="img/%e5%9b%be5.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何在DataFrame中使用If-Else条件语句创建新列</title>
      <link>https://textdata.cn/blog/how_to_use_ifelse_in_pandas/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/how_to_use_ifelse_in_pandas/</guid>
      <description>两个numpy函数搞定这一难题</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031%E5%A6%82%E4%BD%95%E5%9C%A8DataFrame%E4%B8%AD%E4%BD%BF%E7%94%A8If-Else%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%97">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031如何在DataFrame中使用If-Else条件语句创建新列</a></p>
<br>
<p>有时我们希望根据 DataFrame 其他列(字段) 的值向 DataFrame 添加一列。</p>
<p>虽然这听起来很简单，但如果我们尝试使用 if-else 条件来完成它可能会变得有点复杂。 值得庆幸的是，使用 numpy 两个函数<strong>np.where()、np.select()</strong> 就能实现这一需求。</p>
<h2 id="导入数据">导入数据</h2>
<p>我们有一个包含 4,000 多条 Dataquest 推文的数据集,字段包括：</p>
<ul>
<li>date  twitter发送的日期</li>
<li>time  推文发送时间</li>
<li>tweet   推文内容</li>
<li>mentions    谁提到了该推文</li>
<li>photos    图片链接</li>
<li>replies_count  推文回复数</li>
<li>retweets_count  推文再转发数</li>
<li>likes_count  推文获得的点赞数</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;tweets.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="100%" />
    
    
</figure>

<p><br><br></p>
<h2 id="问题">问题</h2>
<p>我们看到数据集中的<strong>photos</strong>字段是图片链接</p>
<ul>
<li>如果某条记录有信息，会显示图片链接列表</li>
<li>如果不含图片，该字段对应的数据是空列表</li>
</ul>
<p>我们只想查看带有图片的推文是否获得更多交互，因此我们实际上并不需要图片 URL。 让我们尝试创建一个名为 <strong>has_image</strong> 的新列，该列将包含布尔值</p>
<ul>
<li>如果推文包含图像，则为 True，否则为 False。</li>
</ul>
<p>那么我们如何创建一个<strong>has_image</strong>字段？</p>
<p><br><br></p>
<h2 id="npwhere">np.where()</h2>
<p>np.where(condition, value if condition is true, value if condition is false)</p>
<p>为此，我们将使用 numpy 的内置 where() 函数。 这个函数依次接受三个参数：我们要测试的条件，如果条件为真则分配给新列的值，如果条件为假则分配给新列的值。 它看起来像这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;has_image&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;photos&#39;</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;[]&#39;</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="npselect">np.select()</h2>
<p>这种方法很好用，但如果我们新建列的值不止True、False呢？</p>
<p>例如我们把<strong>likes_count</strong> 进行分类，不同取值范围定义为不同的类别</p>
<ul>
<li>tier_4  少于2个赞</li>
<li>tier_3  3-9 个赞</li>
<li>tier_2  10-15 个赞</li>
<li>tier_1  16+ 个赞</li>
</ul>
<p>为此，我们可以使用名为 <strong>np.select()</strong> 的函数。我们将给它两个参数：一个我们的条件列表，以及一个我们想要分配给新列中每一行的值的相关列表。</p>
<p>这意味着顺序很重要：如果满足条件列表中的第一个条件，则值列表中的第一个值将分配给该行的新列。如果满足第二个条件，则将分配第二个值，依此类推。</p>
<p>让我们来看看它在 Python 代码中的表现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># create a list of our conditions</span>
<span class="n">conditions</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">15</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">)</span>
    <span class="p">]</span>

<span class="c1"># create a list of the values we want to assign for each condition</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;tier_4&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_3&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_2&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_1&#39;</span><span class="p">]</span>

<span class="c1"># create a new column and use np.select to assign values to it using our lists as arguments</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;tier&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">conditions</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>

<span class="c1"># display updated DataFrame</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df3.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>让Python代码更简洁的pipe包</title>
      <link>https://textdata.cn/blog/pipe_make_python_code_more_clean/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pipe_make_python_code_more_clean/</guid>
      <description>短小精悍pipe</description>
      <content:encoded><![CDATA[<h1 id="pipe">Pipe</h1>
<p><strong>map</strong>和<strong>filter</strong>是处理iterable数据最好用的函数，但却让代码看起来很乱，使代码可读性大大降低。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#对arr筛选偶数，并对偶数乘以2</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">,</span> <span class="n">arr</span><span class="p">)))</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<p>刚刚的iterable的例子，其实可以使用pipe库中的 <code>|</code> 来应用多种方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span>
    <span class="o">|</span><span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
    <span class="o">|</span><span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<h2 id="pipe是什么">pipe是什么？</h2>
<p>pipe是python中的管道操作库，可以使数据分析多个步骤(函数）像管道(流水线)一样上下衔接，共同完成一个数据分析任务。</p>
<p>我喜欢pipe是因为它让iterable代码变得干净整洁，可读性大大增强。后面我会通过几个案例让大家快速掌握pipe库。首先先安装pipe</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pipe</span>
</code></pre></div><br>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/20211115%E4%BD%BF%E7%94%A8pipe%E6%92%B0%E5%86%99%E5%B9%B2%E5%87%80%E7%9A%84Python%E4%BB%A3%E7%A0%81.ipynb">点击下载本文代码</a></p>
<h2 id="where">where</h2>
<p>对iterable中的数据进行筛选操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#把偶数筛选出来</span>
<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div><pre><code>[2, 4]
</code></pre>
<h2 id="select">select</h2>
<p>对iterable中的数据进行某种操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#对arr中的每个数 乘以2</span>
<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div><pre><code>[2, 4, 6, 8, 10]
</code></pre>
<p>现在你可能会有疑问： 为何在Python已拥有map和filter情况下， 还用pipe库中的 select和 where呢？</p>
<p>因为可以使用管道在一个方法后面加入另一个方法， 加不止1次!!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> 
     <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#筛选arr中的偶数</span>
     <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">#对偶数乘以2</span>
    <span class="p">)</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<h1 id="非折叠iterable">非折叠iterable</h1>
<h2 id="chain">chain</h2>
<p>对于嵌套结构的iterable数据，最难任务之一就是将其展平。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">chain</span>

<span class="n">nested</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,[</span><span class="mi">3</span><span class="p">]],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>

<span class="nb">list</span><span class="p">((</span><span class="n">nested</span> <span class="o">|</span> <span class="n">chain</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 2, [3], 4, 5]
</code></pre>
<p>即时经过上述操作， 依然不是完全展开。 为了处理深度嵌套数据， 可以使用traverse方法。</p>
<h2 id="traverse">traverse</h2>
<p>遍历traverse方法可以用递归的方式展开 嵌套对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span>

<span class="n">nested</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,[</span><span class="mi">3</span><span class="p">]],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>

<span class="nb">list</span><span class="p">((</span><span class="n">nested</span> <span class="o">|</span> <span class="n">traverse</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5]
</code></pre>
<p>现在我们从抽取字典values中的列表，并将其展平</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span><span class="p">,</span> <span class="n">select</span>

<span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;grape&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">}</span>
<span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">fruits</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;price&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">traverse</span><span class="p">)</span>
</code></pre></div><pre><code>[2, 5, 4, 5]
</code></pre>
<h2 id="groupby">groupby</h2>
<p>有时候，需要对列表中的数据进行分组，这可能用到groupby方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">groupby</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">groupby</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s2">&#34;偶数&#34;</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="s2">&#34;奇数&#34;</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])})</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'偶数': [2, 4, 6, 8]}, {'奇数': [1, 3, 5, 7, 9]}]
</code></pre>
<p>在上面的代码中， 我们使用groupby将数字分为奇数组和偶数组。groupby方法输出的结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;偶数&#39;, &lt;itertools._grouper at 0x10bd54550&gt;),
 (&#39;奇数&#39;, &lt;itertools._grouper at 0x10bd4d350&gt;)]
 
</code></pre></div><p>接下来，使用select将元素为元组的列表转化为字典，其中</p>
<ul>
<li>元组中第1位置做字典的关键词</li>
<li>元组中第2位置做字典的值</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[{&#39;偶数&#39;: [2, 4, 6, 8]}, {&#39;奇数&#39;: [1, 3, 5, 7, 9]}]
</code></pre></div><p>Cool！为了range值大于2， 我们在select内增加where条件操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">groupby</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">groupby</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s2">&#34;偶数&#34;</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="s2">&#34;奇数&#34;</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> 
                                   <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">)</span>
                                  <span class="p">)</span>
                       <span class="p">}</span>
            <span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'偶数': [4, 6, 8]}, {'奇数': [3, 5, 7, 9]}]
</code></pre>
<h2 id="dedup">dedup</h2>
<p>使用Key对list数据进行去重</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">dedup</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">dedup</span><span class="p">)</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5, 6, 7, 9]
</code></pre>
<p>这看起来没啥新意，毕竟python内置的set函数即可实现刚刚的需求。然而，dedup通过key获得列表中的唯一元素。</p>
<p>例如，<strong>获得小于5的唯一元素， 且另一个元素大于或等于5</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">dedup</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">dedup</span><span class="p">(</span><span class="k">lambda</span> <span class="n">key</span><span class="p">:</span> <span class="n">key</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 5]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span><span class="p">,</span> <span class="n">select</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;grape&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="kc">None</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="n">data</span>
    <span class="o">|</span> <span class="n">dedup</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;count&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">count</span><span class="p">:</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="nb">int</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div><pre><code>[2, 4]
</code></pre>
<br>
<h1 id="了解课程">了解课程</h1>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>automa插件|无编程基础也可自动化办公</title>
      <link>https://textdata.cn/blog/automa_rpa/</link>
      <pubDate>Wed, 27 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/automa_rpa/</guid>
      <description>automa从自动填写表单、执行重复性任务、截取屏幕截图到抓取网站数据，您想使用此扩展程序做什么取决于您。您甚至可以安排自动化执行的时间。</description>
      <content:encoded><![CDATA[<p>如果大家之前了解selenium库，那么antoma不用过多介绍，您就能知道ta是做浏览器自动化的。automa通过点击连接卡片实现浏览器的自动化运行。</p>
<p>没有做不到，只有想不到。从自动填写表单、执行重复性任务、截取屏幕截图到抓取网站数据，您想使用此扩展程序做什么取决于您。您甚至可以安排自动化执行的时间。下面我们看一下开发者制作的操作视频</p>
<video id="video" controls="" preload="none" poster="封面">
  <source id="mp4" src="Automa.mp4" type="video/mp4">
</videos>
<p>从视频中，大家可以看到，工作流可执行表单填写、屏幕截图、网站数据抓取等各种重复性工作。如果大家感兴趣，可以试着用一下<strong>automa</strong>。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Shifterator库 | 词移图分辨两文本用词风格差异</title>
      <link>https://textdata.cn/blog/shifterator_text_vis/</link>
      <pubDate>Tue, 26 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/shifterator_text_vis/</guid>
      <description>图文代码理解两文本用词风格差异</description>
      <content:encoded><![CDATA[<p>以往对比两个文本数据差异，比较简单的技术实现方法是生成两文个词云图，但是词云图无法直观显示词语层面的权重。</p>
<p><strong>Shifterator</strong>包提供了构建词移图的功能，垂直条形图可以量化哪些词会导致<strong>两个文本</strong>之间的成对差异以及它们如何起作用。 通过允许您查看单词使用方式的变化，单词转换可帮助您对情绪、熵和分歧进行分析，这些分析从根本上来说更具可解释性。</p>
<p>Shifterator亮点：</p>
<ul>
<li>提供可解释的工具，用于将文本作为数据处理并映射出两个文本相似性或差异性</li>
<li>实现常见的文本比较度量，包括相对频率、香农熵、Tsallis熵、Kullback-Leibler散度和 Jensen-Shannon 散度。</li>
<li>基于字典的情绪分析方法计算的加权平均值。</li>
<li>在研究初期可用于诊断数据、感知测量误差。</li>
</ul>
<p>计算社会科学家、数字人文主义者和其他文本分析从业者都可以使用 Shifterator 从文本数据构建可靠、稳健和可解释的故事。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">shifterator</span><span class="o">==</span><span class="mf">0.2.2</span>
</code></pre></div><br>
<h2 id="导入数据">导入数据</h2>
<p>准备的外卖csv数据，含label和review两个字段。</p>
<p>其中label是好评差评的标注，</p>
<ul>
<li>0为差评，</li>
<li>1为好评</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">reviews_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/WaiMai8k.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">reviews_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="800" />
    
    
</figure>

<p>有个疑问，外卖好差评中的用词有什么差异(区别/特点)？</p>
<h2 id="准备两组文本数据">准备两组文本数据</h2>
<p>shifterator需要两组文本数据，格式为长度相同的词频统计字典。</p>
<p>按照label类别，将数据整理为两个文本数据。在准备的过程中，我们需要做一些清洗操作</p>
<ul>
<li>清除非中文字符，如网址、邮箱、标点符号</li>
<li>清除信息量比较低的停用词</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">collections</span>
<span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">re</span> 

<span class="n">texts_neg</span> <span class="o">=</span> <span class="n">reviews_df</span><span class="p">[</span><span class="n">reviews_df</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;review&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
<span class="n">texts_pos</span> <span class="o">=</span> <span class="n">reviews_df</span><span class="p">[</span><span class="n">reviews_df</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;review&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">docs</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;清洗文本中的非中文字符、停用词，返回词频统计结果
</span><span class="s2">    docs : 待处理的文档列表
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">stop_words</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/stopwords.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&#34;[</span><span class="se">\u4e00</span><span class="s2">-</span><span class="se">\u9fa5</span><span class="s2">]+&#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stop_words</span><span class="p">]</span>
    <span class="n">wordfreq_dict</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wordfreq_dict</span>


<span class="n">clean_texts_neg</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">texts_neg</span><span class="p">)</span>
<span class="n">clean_texts_pos</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">texts_pos</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="无聊的传统绘图">无聊的传统绘图</h2>
<p>使用条形图、词云图绘制，为了缩小代码量，这里只绘制差评数据。需要注意的是matplotlib不显示中文，这里需要先使用下面三行代码获取电脑中自带的中文字体列表mpl_fonts，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib.font_manager</span> <span class="kn">import</span> <span class="n">FontManager</span>
 
<span class="n">mpl_fonts</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">FontManager</span><span class="p">()</span><span class="o">.</span><span class="n">ttflist</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mpl_fonts</span><span class="p">)</span>
</code></pre></div><p>经过运行，我的电脑mpl_fonts里有<strong>Arial Unicode MS</strong> ，后面用matplotlib显示中文的地方，我都使用该字体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#准备DataFrame数据</span>
<span class="n">common_neg</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clean_texts_neg</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span>
                             <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">])</span>

<span class="n">common_pos</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clean_texts_pos</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span>
                             <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">font_scale</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set_style</span><span class="p">(</span><span class="s2">&#34;whitegrid&#34;</span><span class="p">)</span>

<span class="c1">#为了显示中文</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s2">&#34;font&#34;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">)</span>


<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>

<span class="c1">#绘制水平条形图</span>
<span class="n">common_neg</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;words&#39;</span><span class="p">,</span>
                     <span class="n">y</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span>
                      <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span>
                      <span class="n">color</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s2">&#34;外卖差评常见词&#34;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_9_0.png" width="800" />
    
    
</figure>

<p>绘制词云图，这里使用的pyecharts包。由于该包作者更新强度比较大，为了保证日后本教程仍可正常运行，这里提供当前我使用的pyecharts相关的版本，大家可以运行下面代码保证运行出正确结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">==</span><span class="mf">1.6.2</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">javascripthon</span><span class="o">==</span><span class="mf">0.0.6</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">jupyter</span><span class="o">-</span><span class="n">installer</span><span class="o">==</span><span class="mf">0.0.3</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">snapshot</span><span class="o">==</span><span class="mf">0.2.0</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">WordCloud</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>

<span class="n">wordfreqs</span> <span class="o">=</span> <span class="p">[(</span><span class="n">w</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span><span class="p">,</span><span class="n">f</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">(</span><span class="n">clean_texts_neg</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>


<span class="n">wc</span> <span class="o">=</span> <span class="n">WordCloud</span><span class="p">()</span>
<span class="n">wc</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">data_pair</span><span class="o">=</span><span class="n">wordfreqs</span><span class="p">,</span> <span class="n">word_size_range</span><span class="o">=</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>
<span class="n">wc</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;外卖差评词云图&#34;</span><span class="p">,</span> 
                                             <span class="n">title_textstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TextStyleOpts</span><span class="p">(</span><span class="n">font_size</span><span class="o">=</span><span class="mi">23</span><span class="p">)),</span>
                   <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
<span class="n">wc</span><span class="o">.</span><span class="n">load_javascript</span><span class="p">()</span>
<span class="n">wc</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e8%af%8d%e4%ba%91%e5%9b%be.png" width="800" />
    
    
</figure>

<h2 id="使用shifterator绘制词移图">使用Shifterator绘制词移图</h2>
<p>终于要用到 <strong>Shifterator</strong> 包了！ 我们可以使用这个包根据频率和情绪（或其他值）比较负面和正面的外卖评论，这里我只计算了频率作为权重</p>
<h3 id="熵移图entropy-shift">熵移图Entropy shift</h3>
<p>第一幅图是entropy shift graph</p>
<p>具体信息请查看文档  <a href="https://github.com/ryanjgallagher/shifterator">https://github.com/ryanjgallagher/shifterator</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">shifterator</span> <span class="kn">import</span> <span class="n">EntropyShift</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s2">&#34;font&#34;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">)</span>

<span class="n">entropy_shift</span> <span class="o">=</span> <span class="n">EntropyShift</span><span class="p">(</span><span class="n">type2freq_1</span><span class="o">=</span><span class="n">clean_texts_neg</span><span class="p">,</span>
                             <span class="n">type2freq_2</span><span class="o">=</span><span class="n">clean_texts_pos</span><span class="p">,</span>
                             <span class="n">base</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">entropy_shift</span><span class="o">.</span><span class="n">get_shift_graph</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;外卖差评 vs 外卖好评&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output141.png" width="800" />
    
    
</figure>

<p>看起来最能决定外卖差评的用语是配送时间，其次才是口味。</p>
<p>最能决定外卖好评的似乎是口味，其次才是配送时间。</p>
<p>通过Shifterator我们能够看出不同词在不同文本中的作用程度。需要注意的是，我们只使用了最高的前15词频，所以显示的词有些少</p>
<h2 id="总结">总结</h2>
<p>希望本文能对你的研究有帮助，代码下载地址</p>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator%E5%AD%A6%E4%B9%A0">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator学习</a></p>
<p>代码撰写调试不易，希望帮忙转载</p>

<figure >
    
        <img src="img/Python%e4%b8%93%e6%a0%8f%e8%af%be.jpg" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SHAP机器学习模型解释库</title>
      <link>https://textdata.cn/blog/shap_ml_explanation/</link>
      <pubDate>Thu, 14 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/shap_ml_explanation/</guid>
      <description>图文代码理解机器学习模型中各特征对结果的贡献</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="SHAP.zip">点击此处下载代码</a></p>
<br>
<blockquote>
<p>原文链接 <a href="https://towardsdatascience.com/shap-explain-any-machine-learning-model-in-python-24207127cad7">https://towardsdatascience.com/shap-explain-any-machine-learning-model-in-python-24207127cad7</a></p>
</blockquote>
<h2 id="heading"></h2>
<p>想象一下，你正试图训练一个机器学习模型来预测广告是否被特定的人点击。在收到关于某人的一些信息后，模型预测某人会不会点击广告。</p>

<figure >
    
        <img src="img/%e5%9b%be1.png" />
    
    
</figure>

<p>但是为什么模型会输出这样的预测结果呢？ 每个特征对预测的贡献有多大？ 如果您能看到一个图表，显示每个特征对预测的贡献程度，如下所示，不是很好吗？</p>

<figure >
    
        <img src="img/%e6%9d%83%e9%87%8d.png" />
    
    
</figure>

<p>Shapley值就能起到特征权重测度的作用。</p>
<h2 id="shapley值是什么">Shapley值是什么？</h2>
<p>Shapley值是博弈论中使用的一种方法，它涉及公平地将收益和成本分配给在联盟中工作的行动者。
由于每个行动者对联盟的贡献是不同的，Shapley值保证每个行动者根据贡献的多少获得公平的份额。</p>

<figure >
    
        <img src="img/%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<h2 id="小案例">小案例</h2>
<p>Shapley值被广泛地应用于求解群体中每个工人(特征)的贡献问题。要理解Shapley值的作用，让我们想象一下贵公司刚刚做了A/B测试，他们在测试广告策略的不同组合。</p>
<p>每个策略在特定月份的收入是：</p>
<ul>
<li>无广告：150美元</li>
<li>社交媒体：300美元</li>
<li>谷歌广告：200美元</li>
<li>电子邮件营销：350美元</li>
<li>社交媒体和谷歌广告：320美元</li>
<li>社交媒体和电子邮件营销：400美元</li>
<li>谷歌广告和电子邮件营销：350美元</li>
<li>电子邮件营销，谷歌广告和社交媒体：450美元</li>
</ul>

<figure >
    
        <img src="img/%e7%ad%96%e7%95%a5%e8%90%a5%e6%94%b6.png" />
    
    
</figure>

<p>使用三则广告与不使用广告的收入相差300美元，每则广告对这一差异有多大的贡献?</p>

<figure >
    
        <img src="img/%e7%ad%96%e7%95%a5%e8%90%a5%e6%94%b6%e8%b4%a1%e7%8c%ae%e5%87%a0%e4%bd%95.png" />
    
    
</figure>

<p>我们可以通过计算每一类广告的Shapley值来计算谷歌广告对公司收入的总贡献入手，通过公式可以计算出Google广告的总贡献：</p>

<figure >
    
        <img src="img/%e5%85%ac%e5%bc%8f.png" />
    
    
</figure>

<p>让我们找到Google广告的边际贡献及其权重。</p>
<h2 id="寻找谷歌广告的边际贡献">寻找谷歌广告的边际贡献</h2>
<p>第一，我们将发现谷歌广告对以下群体的边际贡献：</p>
<ul>
<li>无广告</li>
<li>谷歌广告+社交媒体</li>
<li>谷歌广告+电子邮件营销</li>
<li>谷歌广告+电子邮件营销+社交媒体</li>
</ul>

<figure >
    
        <img src="img/%e8%be%b9%e9%99%85%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<p>Google广告 对 无广告 的边际贡献是：</p>

<figure >
    
        <img src="img/MC1.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告&amp;社交媒体组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC2.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告&amp;电子邮件营销组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC3.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告、电子邮件营销和社交媒体组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC4.png" />
    
    
</figure>

<h2 id="发现权重">发现权重</h2>
<p>为了发现权重，我们将把不同广告策略的组合组织成如下多个层次，每个层次对应于每个组合中广告策略的数量。</p>
<p>然后根据每个层次的边数分配权重，我们看到了这一点：</p>
<ul>
<li>第一级包含3条边，因此每个边的权重为1/3</li>
<li>第二级包含6条边，因此每条边的权重将为1/6</li>
<li>第三级包含3条边，因此每条边的权重将为1/3</li>
</ul>

<figure >
    
        <img src="img/%e5%8f%91%e7%8e%b0%e6%9d%83%e9%87%8d.png" />
    
    
</figure>

<h2 id="发现google广告的总贡献">发现Google广告的总贡献</h2>
<p>根据前面的权重和边际贡献，我们已经可以找到Google广告的总贡献!</p>

<figure >
    
        <img src="img/google%e6%80%bb%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>


<figure >
    
        <img src="img/google%e5%85%ac%e5%bc%8f.png" />
    
    
</figure>

<p>酷!所以谷歌广告在使用3种广告策略与不使用广告的总收入差异中贡献了36.67美元。36.67是Google广告的Shapey值。</p>

<figure >
    
        <img src="img/otherRevenue.png" />
    
    
</figure>

<p>重复以上步骤，对于另外两种广告策略，我们可以看出：</p>
<ul>
<li>
<p>电子邮件营销贡献151.67美元</p>
</li>
<li>
<p>社交媒体贡献116.67美元</p>
</li>
<li>
<p>谷歌广告贡献36.67美元</p>

<figure >
    
        <img src="img/%e5%90%84%e7%ad%96%e7%95%a5%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

</li>
</ul>
<p>他们共同出资300美元，用于使用3种不同类型的广告与不使用广告的区别!挺酷的，不是吗?
既然我们理解了Shapley值，那么让我们看看如何使用它来解释机器学习模型。</p>
<h2 id="shap-在python中解释机器学习模型">SHAP-在Python中解释机器学习模型</h2>
<p>SHAP是一个Python库，它使用Shapley值来解释任何机器学习模型的输出。</p>
<p>安装SHAP</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">shap</span>

</code></pre></div><h2 id="训练模型">训练模型</h2>
<p>为了理解SHAP工作原理，我们使用Kaggle平台内的advertising广告数据集。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span> 

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;advertising.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" />
    
    
</figure>

<p>我们将建立一个机器学习模型, 该模型根据用户个人特质信息来预测其是否点击广告。</p>
<p>我们使用Patsy将DataFrame转换为一组特征和一组目标值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">patsy</span> <span class="kn">import</span> <span class="n">dmatrices</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>

<span class="n">y</span><span class="p">,</span> <span class="n">X</span> <span class="o">=</span> <span class="n">dmatrices</span><span class="p">(</span>
    <span class="s2">&#34;clicked_on_ad ~ daily_time_spent_on_site + age + area_income + daily_internet_usage  + male -1&#34;</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">X_frame</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">X</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">X</span><span class="o">.</span><span class="n">design_info</span><span class="o">.</span><span class="n">column_names</span><span class="p">)</span>


</code></pre></div><p>把数据分为测试集和训练接</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">7</span><span class="p">)</span>
</code></pre></div><p>接下来使用XGBoost训练模型，并做预测</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">xgboost</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">xgboost</span><span class="o">.</span><span class="n">XGBClassifier</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">y_predicted</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><p>为了查看模型表现，我们使用F1得分</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">f1_score</span>

<span class="n">f1</span> <span class="o">=</span> <span class="n">f1_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_predicted</span><span class="p">)</span>
<span class="n">f1</span>
</code></pre></div><pre><code>0.9619047619047619
</code></pre>
<p>太好了!</p>
<h2 id="解释该模型">解释该模型</h2>
<p>该模型很好地预测了用户是否点击广告。但它是如何得出这样的预测的? <strong>每个特征对最终预测与平均预测的差异贡献了多少?</strong></p>
<p>注意，这个问题与我们在文章开头论述的问题非常相似。</p>
<p>因此，寻找每个特征的Shapley值可以帮助我们确定它们的贡献。得到特征i的重要性的步骤与之前类似，其中i是特征的索引：</p>
<ul>
<li>获取所有不包含特征i的子集</li>
<li>找出特征i对这些子集中每个子集的边际贡献</li>
<li>聚合所有边际贡献来计算特征i的贡献</li>
</ul>
<p>若要使用SHAP查找Shapley值，只需将训练好的模型插入shap.Explainer</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">shap</span>

<span class="n">explainer</span> <span class="o">=</span> <span class="n">shap</span><span class="o">.</span><span class="n">Explainer</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
<span class="n">shap_values</span> <span class="o">=</span> <span class="n">explainer</span><span class="p">(</span><span class="n">X_frame</span><span class="p">)</span>
</code></pre></div><pre><code>ntree_limit is deprecated, use `iteration_range` or model slicing instead.
</code></pre>
<h2 id="shap瀑布图">SHAP瀑布图</h2>
<p>可视化第一个预测的解释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#第一条记录是未点击</span>
<span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">waterfall</span><span class="p">(</span><span class="n">shap_values</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/output_20_0.png" />
    
    
</figure>

<p>啊哈!现在我们知道每个特征对第一次预测的贡献。对上图的解释：</p>

<figure >
    
        <img src="img/%e7%ac%ac%e4%b8%80%e6%ac%a1%e9%a2%84%e6%b5%8b%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<ul>
<li>蓝色条显示某一特定特征在多大程度上降低了预测的值。</li>
<li>红条显示了一个特定的特征在多大程度上增加了预测值。</li>
<li>负值意味着该人点击广告的概率小于0.5</li>
</ul>
<p>我们应该期望总贡献等于预测与均值预测的差值。我们来验证一下：</p>

<figure >
    
        <img src="img/%e6%80%bb%e8%b4%a1%e7%8c%ae%e7%ad%89%e4%ba%8e%e9%a2%84%e6%b5%8b%e4%b8%8e%e5%9d%87%e5%80%bc%e9%a2%84%e6%b5%8b%e7%9a%84%e5%b7%ae%e5%80%bc.png" />
    
    
</figure>

<p>酷!他们是平等的。</p>
<p>可视化第二个预测的解释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#第二条记录也是未点击</span>
<span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">waterfall</span><span class="p">(</span><span class="n">shap_values</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/output_22_0.png" />
    
    
</figure>

<h2 id="shap摘要图">SHAP摘要图</h2>
<p>我们可以使用SHAP摘要图，而不是查看每个单独的实例，来可视化这些特性对多个实例的整体影响：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">shap</span><span class="o">.</span><span class="n">summary_plot</span><span class="p">(</span><span class="n">shap_values</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_24_0.png" />
    
    
</figure>

<p>SHAP摘要图告诉我们数据集上最重要的特征及其影响范围。</p>
<p>从上面的情节中，我们可以对模型的预测获得一些有趣的见解：</p>
<ul>
<li>用户的 <strong>daily_internet_usage</strong> 对该用户是否点击广告的影响最大。</li>
<li>随着<strong>daily_time_spent_on_site</strong>的增加，用户点击广告的可能性降低。</li>
<li>随着<strong>area_income</strong>的增加，用户点击广告的可能性降低。</li>
<li>随着<strong>age</strong>的增长，用户更容易点击广告。</li>
<li>如果用户是<strong>male</strong>，则该用户点击广告的可能性较小。</li>
</ul>
<h2 id="shap条形图">SHAP条形图</h2>
<p>我们还可以使用SHAP条形图得到全局特征重要性图。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">shap_values</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_26_0.png" />
    
    
</figure>

<p>很酷!</p>
<h2 id="结论">结论</h2>
<p>恭喜你!您刚刚了解了Shapey值以及如何使用它来解释一个机器学习模型。希望本文将提供您使用Python来解释自己的机器学习模型的基本知识。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>DataShare | 6000&#43;个股票的每日财经新闻</title>
      <link>https://textdata.cn/blog/daily_financial_news_for_6000_stocks/</link>
      <pubDate>Mon, 20 Sep 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/daily_financial_news_for_6000_stocks/</guid>
      <description>财经数据集可下载</description>
      <content:encoded><![CDATA[<br>
<blockquote>
<p>作者 bot_developer</p>
<p>搬运自</p>
<ul>
<li><a href="https://www.kaggle.com/miguelaenlle/massive-stock-news-analysis-db-for-nlpbacktests">https://www.kaggle.com/miguelaenlle/massive-stock-news-analysis-db-for-nlpbacktests</a></li>
<li><a href="https://github.com/bot-developer3/Scraping-Tools-Benzinga">https://github.com/bot-developer3/Scraping-Tools-Benzinga</a>.</li>
</ul>
</blockquote>
<br>
<h2 id="背景">背景</h2>
<ul>
<li>获得高质量（历史）股市新闻数据既困难又昂贵；</li>
<li>订阅历史新闻数据提供商服务可能需要花费数千美元。</li>
</ul>
<p><br><br></p>
<h2 id="数据集">数据集</h2>
<p>采集了<strong>6000</strong>只股票<strong>2009-2020</strong>年间的<strong>4</strong>万条新闻文章</p>
<p>数据链接:https://pan.baidu.com/s/1rMo4Ek2bxvVLmeyxskVCAg  密码:paen</p>
<h3 id="raw_analyst_ratingscsv">raw_analyst_ratings.csv</h3>
<p>直接抓取分析师评级数据，有<strong>1034</strong>位分析师对<strong>6204</strong>只股票进行了股票分析，分析记录累积<strong>1407328</strong>条, 字段包括：<strong>索引、标题、URL、文章作者（出版商总是benzinga）、出版时间戳、股票代码</strong>。</p>
<p>请注意，此 CSV 文件中的所有日期均不包含精确的时分秒信息。 如果您打算使用此文件进行回测（analyst_ratings_processed.csv 更好），请假设文章是在第二天而不是当前文章中显示的日期发布的。</p>
<br>
<h3 id="raw_partner_headlinescsv">raw_partner_headlines.csv</h3>
<p>直接抓取原始新闻标题，共有<strong>1845559</strong>条记录, 字段包括：<strong>索引、标题、URL、出版商（不是 benzinga）、日期、股票行情</strong>。</p>
<br>
<h3 id="analyst_ratings_processedcsv">analyst_ratings_processed.csv</h3>
<p>处理过的分析师评级数据， 共有<strong>1400469</strong>条记录， 字段包括：<strong>文章标题，日期，股票</strong></p>
<p>时区为 UTC-4。 这与 raw_analys_theadlines 之间的区别在于，它具有精确到分钟的日期，而 raw_analys_tratings 只是没有小时或分钟的那一天。</p>
<p><br><br></p>
<h2 id="注意">注意</h2>
<ul>
<li>数据爬自benzinga.com，新闻内容版权归Benzinga所有。</li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Label-Studio|多媒体数据标注工具</title>
      <link>https://textdata.cn/blog/label_studio_test/</link>
      <pubDate>Sun, 18 Jul 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/label_studio_test/</guid>
      <description>自然语言处理前需要先标注数据,label-studio让数据标注过程变得轻松简单</description>
      <content:encoded><![CDATA[<h2 id="1-简介">1. 简介</h2>
<h3 id="label-studiohttpsgithubcomheartexlabslabel-studio"><a href="https://github.com/heartexlabs/label-studio">label-studio</a></h3>
<p>假设我们想使用机器学习做文本分析，一般都需要先对数据进行标注，才能训练出效果比较好的监督机器学习模型。</p>
<p>label-studio是多媒体数据标注工具，可以很方便的进行标注和导出。</p>
<p>Label Studio 是一款开源数据标注工具，用于标注和探索多种类型的数据。 您可以使用多种数据格式执行的标记任务。</p>
<p>您还可以将 Label Studio 与机器学习模型集成，以提供标签（预标签）的预测，或执行持续的主动学习。</p>
<p>官方文档 <a href="https://labelstud.io/">https://labelstud.io/</a></p>
<br>
<h3 id="操作步骤">操作步骤</h3>
<ol>
<li>安装Label Studio</li>
<li>启动Label Studio</li>
<li>创建Label Studio账号</li>
<li>项目默认配置</li>
<li>导入数据</li>
<li>标注数据</li>
<li>结束标记，导出标注数据</li>
</ol>
<br>
<h3 id="安装">安装</h3>
<p>命令行中执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install label-studio==1.1.0
</code></pre></div><h2 id="2-快速上手">2 快速上手</h2>
<p>在桌面创建自动生成一个名为Project的项目文件夹。</p>
<ul>
<li>Win命令行执行</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">label-studio --data-dir Desktop/Project
</code></pre></div><ul>
<li>Mac命令行执行</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">label-studio --data-dir desktop/Project
</code></pre></div><br>
<br>
<p>执行上方代码大概10s左右，会在浏览器弹出如下界面</p>

<figure >
    
        <img src="img/%e5%88%9b%e5%bb%ba%e8%b4%a6%e6%88%b7.png" width="800" />
    
    
</figure>

<p>注册好账号密码，点击<strong>Create Project</strong></p>

<figure >
    
        <img src="img/%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae.png" width="800" />
    
    
</figure>

<br>
<p>项目描述填写好，点击按钮**Data Import **，</p>

<figure >
    
        <img src="img/%e8%ae%be%e7%bd%ae%e9%a1%b9%e7%9b%ae%e6%8f%8f%e8%bf%b0.png" width="800" />
    
    
</figure>

<p>这里我们要做文本分析，导入csv</p>

<figure >
    
        <img src="img/%e5%af%bc%e5%85%a5%e6%95%b0%e6%8d%ae1.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/%e5%af%bc%e5%85%a5%e6%95%b0%e6%8d%ae2.png" width="800" />
    
    
</figure>

<br>
<p>设置标注模式，点击按钮<strong>Labeling Setup</strong>,选择<strong>Natural Language Process</strong>、<strong>TEXT Classification</strong>。就考研进行pos、neg、neo三个类别的文本标注。</p>

<figure >
    
        <img src="img/%e8%ae%be%e7%bd%ae%e6%a0%87%e6%b3%a8%e6%a8%a1%e5%bc%8f1.png" width="800" />
    
    
</figure>

<p>注意label-studio提供了diy，考研根据自己需要点击<strong>Code</strong>设定标注类别名称、增减类别。大家感兴趣的可以深入研究。</p>

<figure >
    
        <img src="img/%e8%ae%be%e7%bd%ae%e6%a0%87%e6%b3%a8%e6%a8%a1%e5%bc%8f2.png" width="800" />
    
    
</figure>

<p>点击<strong>Save</strong> 按钮，开始准备标注数据啦</p>
<br>
<p>数据界面，勾选全部数据，点击蓝色按钮<strong>Label All Tasks</strong></p>

<figure >
    
        <img src="img/%e6%95%b0%e6%8d%ae%e7%95%8c%e9%9d%a2.png" width="800" />
    
    
</figure>

<p>开始标注，勾选你认为合适的标签，点击右侧<strong>Submit</strong></p>

<figure >
    
        <img src="img/%e5%bc%80%e5%a7%8b%e6%a0%87%e6%b3%a8.png" width="800" />
    
    
</figure>

<br>
<p>导出标注数据,先点击右侧<strong>Export</strong>按钮，选择导出格式，最后点击底部<strong>Export</strong>按钮执行导出。</p>

<figure >
    
        <img src="img/%e5%af%bc%e5%87%ba%e6%a0%87%e6%b3%a8%e6%95%b0%e6%8d%ae.png" width="800" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>tfidf有权重的情感分析</title>
      <link>https://textdata.cn/blog/weighted_tfidf_sentiment_analysis/</link>
      <pubDate>Sun, 18 Jul 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/weighted_tfidf_sentiment_analysis/</guid>
      <description>最简便的词典法(有权重的)情感分析</description>
      <content:encoded><![CDATA[<h1 id="情感分析">情感分析</h1>
<ul>
<li>无权重。直接计算文本中正、负情感词出现的次数</li>
<li>有权重。tf-idf， tf是词频，idf是权重。</li>
</ul>
<h2 id="tfidf法">Tfidf法</h2>
<p>scikit库除了CountVectorizer类，还有TfidfVectorizer类。TF-IDF这个定义相信大家应该已经耳熟能详了：</p>
<p>
<figure >
    
        <img src="img/tf.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/idf.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/tfidf.png" width="800" />
    
    
</figure>
</p>
<ul>
<li>TF 词语出现越多，这个词越有信息量</li>
<li>IDF 词语越少的出现在文本中，词语越有信息量。</li>
</ul>
<br>
<h2 id="原始数据">原始数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>


<span class="n">corpus</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;hello, i am glad to meet you&#34;</span><span class="p">,</span>
           <span class="s2">&#34;it is wonderful&#34;</span><span class="p">,</span>
           <span class="s2">&#34;i hate you&#34;</span><span class="p">,</span>
           <span class="s2">&#34;i am sad&#34;</span><span class="p">]</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">corpus</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Text&#39;</span><span class="p">])</span>
<span class="n">df1</span>
</code></pre></div>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>

<br>
<h2 id="构造tfidf">构造tfidf</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfVectorizer</span>


<span class="k">def</span> <span class="nf">createDTM</span><span class="p">(</span><span class="n">corpus</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;构建文档词语矩阵&#34;&#34;&#34;</span>
    <span class="n">vectorize</span> <span class="o">=</span> <span class="n">TfidfVectorizer</span><span class="p">()</span>
    <span class="c1">#注意fit_transform相当于fit之后又transform。</span>
    <span class="n">dtm</span> <span class="o">=</span> <span class="n">vectorize</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">corpus</span><span class="p">)</span>
    <span class="c1">#vectorize.fit(corpus)</span>
    <span class="c1">#dtm  = vectorize.transform(corpus) </span>
    <span class="c1">#打印dtm</span>
    <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">dtm</span><span class="o">.</span><span class="n">toarray</span><span class="p">(),</span> 
                        <span class="n">columns</span><span class="o">=</span><span class="n">vectorize</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">())</span> 

<span class="n">df2</span> <span class="o">=</span> <span class="n">createDTM</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span>
<span class="n">df2</span>
</code></pre></div>
<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>

<br>
<h2 id="合并df1和df2">合并df1和df2</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span> <span class="n">df2</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>

<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#积极词典</span>
<span class="n">pos_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;glad&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;wonderful&#39;</span><span class="p">]</span>

<span class="c1">#消极词典</span>
<span class="n">neg_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;sad&#39;</span><span class="p">,</span> <span class="s1">&#39;hate&#39;</span><span class="p">]</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#积极词典</span>
<span class="n">df</span><span class="p">[</span><span class="n">pos_words</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="n">pos_words</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>0    0.873439
1    0.577350
2    0.000000
3    0.000000
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Pos&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">pos_words</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/4.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Neg&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">neg_words</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/5.png" width="800" />
    
    
</figure>

<br>
<h2 id="输出">输出</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s1">&#39;output/tfidf有权重的情感分析.csv&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Clumper库|dplyr样式的Python包</title>
      <link>https://textdata.cn/blog/clumper_pipeline/</link>
      <pubDate>Tue, 22 Jun 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/clumper_pipeline/</guid>
      <description>让数据分析更优雅</description>
      <content:encoded><![CDATA[<p>Clumper可以用来处理嵌套样式的json数据结构。</p>
<h2 id="代码下载clumper代码zip"><a href="Clumper%E4%BB%A3%E7%A0%81.zip">代码下载</a></h2>
<br>
<h2 id="getting-started">Getting Started</h2>
<h3 id="安装">安装</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">clumper</span>
</code></pre></div><pre><code>Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Collecting clumper
  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/70/62/0731ab9b48c91132aff487217980dcb147ffc0922a278adc05986f6a8d4b/clumper-0.2.13-py2.py3-none-any.whl (21 kB)
Installing collected packages: clumper
Successfully installed clumper-0.2.13
[33mWARNING: You are using pip version 20.0.2; however, version 21.1.2 is available.
You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 -m pip install --upgrade pip' command.[0m
</code></pre>
<p>为了展示Clumper如何工作，我准备了pokemon.json， 由列表组成(该列表由多个字典组成)，下面是pokemon.json部分内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;pokemon.json&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">jsonf</span><span class="p">:</span>
    <span class="n">pokemon</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">jsonf</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
    
<span class="n">pokemon</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div><pre><code>[{'name': 'Bulbasaur',
  'type': ['Grass', 'Poison'],
  'total': 318,
  'hp': 45,
  'attack': 49},
 {'name': 'Ivysaur',
  'type': ['Grass', 'Poison'],
  'total': 405,
  'hp': 60,
  'attack': 62}]
</code></pre>
<p>我们准备的pokemon.json列表中大概有800个字典，数量级刚刚好，不会因为太大导致电脑无法运行数据分析，也不会太小导致手动操作性价比更高。</p>
<br>
<br>
<h2 id="example">Example</h2>
<h3 id="基本操作">基本操作</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">+</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 2, 'b': 4, 'c': 6}, 
{'a': 7, 'b': 2, 'c': 9}, 
{'a': 3, 'b': 6, 'c': 9}]
</code></pre>
<br>
<h3 id="代码解析">代码解析</h3>
<p><strong>Step1</strong></p>
<p>首先使用<strong>mutate</strong>方法，该方法可以在每条记录中生成新变量。</p>

<figure >
    
        <img src="img/first-mutate.png" width="800" />
    
    
</figure>

<p>结算结果仍为Clumper类</p>
<p><strong>Step2</strong></p>
<p>接下来对mutate之后的数据进行排序</p>

<figure >
    
        <img src="img/then-sort.png" width="800" />
    
    
</figure>

<p>得到的结果仍为Clumper类。</p>
<p>从上面的小代码案例中，可以看到整套流程像是一个流水线车间，每一行就是一个生成环节，生产环节之间使用.连接起来。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
    
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">pokemon</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">])</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>  <span class="c1">#保留type长度为1的字典</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="c1">#type值从列表变为字符串</span>
         <span class="n">ratio</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;attack&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;hp&#39;</span><span class="p">])</span> <span class="c1">#新建ratio</span>
 <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;ratio&#39;</span><span class="p">)</span>   <span class="c1">#字典最后只保留name， type， ratio三个字段</span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;ratio&#39;</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#按照ratio降序排列</span>
 <span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">#只保留前5个</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> <span class="c1">#转成列表显示</span>
<span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="common-verbs">Common Verbs</h2>
<h3 id="keep">Keep</h3>
<p>keep函数可以从原始数据中抽取符合指定条件的子集。

<figure >
    
        <img src="img/keep.png" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>  <span class="c1">#试一试去掉.collect()后的效果</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 3}, 
{'a': 4}]
</code></pre>
<p>可以实现缺失值处理，以不同的方式实现pandas的<code>.dropna()</code>的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
<span class="p">]</span>

<span class="c1">#只保留含有b的字段</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4}, 
{'a': 2, 'b': 3}, 
{'a': 3, 'b': 2}]
</code></pre>
<h3 id="mutate">Mutate</h3>
<p>mutate可以在每条记录中，创建新字段、改写旧字段。

<figure >
    
        <img src="img/mutate.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="c1">#新建了c和s字段</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">],</span>
         <span class="n">s</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2, 'c': 3, 's': 6},
 {'a': 2, 'b': 3, 'c': 5, 's': 10},
 {'a': 1, 'b': 6, 'c': 7, 's': 14}]
</code></pre>
<h3 id="sort">Sort</h3>
<p>sort可以实现排序

<figure >
    
        <img src="img/sort.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">])</span> <span class="c1">#默认升序</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 2, 'b': 1}, 
{'a': 1, 'b': 2}, 
{'a': 3, 'b': 3}]
</code></pre>
<h3 id="select">Select</h3>
<p>select挑选每条记录中的某个(些)字段

<figure >
    
        <img src="img/select.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1}, 
{'a': 2}, 
{'a': 1}]
</code></pre>
<h3 id="drop">Drop</h3>
<p>剔除某个（些）字段。

<figure >
    
        <img src="img/drop.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2}, 
{'a': 2, 'b': 3}, 
{'a': 1, 'b': 6}]
</code></pre>
<h3 id="groupby">GroupBy</h3>
<p>根据某个（些）字段对数据集进行分组，得到不同Group类的集合。一般与<code>.agg()</code>方法联合使用。

<figure >
    
        <img src="img/groupby.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;gender&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">groups</span><span class="o">==</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<h3 id="ungroup">Ungroup</h3>
<p>GroupBy的反操作

<figure >
    
        <img src="img/ungroup.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;gender&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">ungroup</span><span class="p">()</span><span class="o">.</span><span class="n">groups</span> <span class="o">==</span> <span class="nb">tuple</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<p><br><br></p>
<h1 id="about-groups">About Groups</h1>
<h3 id="agg">Agg</h3>
<p>聚合描述性统计方法</p>
<p>agg如下图，可以理解成三个步骤，即group-&gt;split-&gt;summary

<figure >
    
        <img src="img/split-apply-combine.png" width="800" />
    
    
</figure>
</p>
<p>常用的描述性统计函数有： <code>mean、count、unqiue、n_unique、sum、min和max</code></p>
<p>求学生的平均成绩、最优和最差成绩</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">mean_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">),</span>      
      <span class="n">max_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">),</span>      
      <span class="n">min_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;min&#39;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'mean_grade': 85.75, 'max_grade': 99, 'min_grade': 58}]
</code></pre>
<p>求男生和女生各自的平均成绩、最优和最差成绩</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">mean_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">),</span>      
      <span class="n">max_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">),</span>      
      <span class="n">min_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;min&#39;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'gender': '男', 'mean_grade': 78, 'max_grade': 98, 'min_grade': 58}, 
{'gender': '女', 'mean_grade': 93.5, 'max_grade': 99, 'min_grade': 88}]
</code></pre>
<h3 id="collect">Collect</h3>
<p>一般Clumper函数返回的结果显示为Clumper类，是看不到具体内容的。</p>
<p>collect作用主要是展开显示。

<figure >
    
        <img src="img/collect.png" width="800" />
    
    
</figure>
</p>
<h3 id="剔除重复">剔除重复</h3>
<p>剔除重复内容

<figure >
    
        <img src="img/drop_duplicates.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> 
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}]
</code></pre>
<hr>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">### 什么是Group？</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>&lt;Clumper groups=('grp',) len=5 @0x103cb0290&gt;
</code></pre>
<p>当前的group以grp作为关键词

<figure >
    
        <img src="img/add_grp.png" width="800" />
    
    
</figure>
</p>
<p>现在经过 <code>.group_by('grp')</code>操作后，说明你对每个grp组感兴趣。具体一点，一个组是<code>{'grp': 'a'}</code>, 另一个组是<code>{'grp': 'b'}.</code></p>
<h3 id="agg-1">Agg</h3>
<h4 id="without-groups">without groups</h4>

<figure >
    
        <img src="img/agg-without-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;sum&#39;</span><span class="p">),</span>
       <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'s': 29, 'm': 5.8}]
</code></pre>
<h4 id="with-groups">with groups</h4>
<p>分别计算组grp=a、组grp=b的sum和mean

<figure >
    
        <img src="img/agg-with-group.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
  <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;sum&#39;</span><span class="p">),</span>
       <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'grp': 'a', 's': 18, 'm': 6}, 
{'grp': 'b', 's': 11, 'm': 5.5}]
</code></pre>
<h4 id="agg内置的统计函数名">agg内置的统计函数名</h4>
<p>内置的统计函数，可直接通过字符串调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">{</span>
  <span class="s2">&#34;mean&#34;</span><span class="p">:</span> <span class="n">mean</span><span class="p">,</span>
  <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">),</span>
  <span class="s2">&#34;unique&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">d</span><span class="p">)),</span>
  <span class="s2">&#34;n_unique&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">d</span><span class="p">)),</span>
  <span class="s2">&#34;sum&#34;</span><span class="p">:</span> <span class="nb">sum</span><span class="p">,</span>
  <span class="s2">&#34;min&#34;</span><span class="p">:</span> <span class="nb">min</span><span class="p">,</span>
  <span class="s2">&#34;max&#34;</span><span class="p">:</span> <span class="nb">max</span><span class="p">,</span>
  <span class="s2">&#34;median&#34;</span><span class="p">:</span> <span class="n">median</span><span class="p">,</span>
  <span class="s2">&#34;var&#34;</span><span class="p">:</span> <span class="n">variance</span><span class="p">,</span>
  <span class="s2">&#34;std&#34;</span><span class="p">:</span> <span class="n">stdev</span><span class="p">,</span>
  <span class="s2">&#34;values&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span>
  <span class="s2">&#34;first&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
  <span class="s2">&#34;last&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
<span class="p">}</span>
</code></pre></div><h3 id="transform">Transform</h3>
<p><code>.transform()</code>与<code>.agg()</code>类似。主要的区别是transform处理过程中，记录数和字段数不会出现压缩。</p>
<h4 id="without-groups-1">without groups</h4>

<figure >
    
        <img src="img/transform-without-groups.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;sum&#34;</span><span class="p">),</span>            
            <span class="n">u</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;unique&#34;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 2, 'grp': 'b', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 7, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]},
{'a': 9, 'grp': 'b', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 5, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}]
</code></pre>
<h4 id="with-groups-1">with groups</h4>

<figure >
    
        <img src="img/transform-with-groups.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;grp&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;sum&#34;</span><span class="p">),</span>
            <span class="n">u</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;unique&#34;</span><span class="p">))</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]},
 {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]}]
</code></pre>
<h3 id="mutate-1">Mutate</h3>
<p>clumper库中的<code>row_number</code>可以给每条记录显示索引位置（第几个）。</p>
<h4 id="without-groups-2">without groups</h4>

<figure >
    
        <img src="img/mutate-without-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="kn">from</span> <span class="nn">clumper.sequence</span> <span class="kn">import</span> <span class="n">row_number</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">row_number</span><span class="p">())</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 'index': 1},
 {'a': 2, 'grp': 'b', 'index': 2},
 {'a': 7, 'grp': 'a', 'index': 3},
 {'a': 4, 'grp': 'b', 'index': 4},
 {'a': 5, 'grp': 'a', 'index': 5}]
</code></pre>
<h4 id="with-groups-2">with groups</h4>

<figure >
    
        <img src="img/mutate-with-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="kn">from</span> <span class="nn">clumper.sequence</span> <span class="kn">import</span> <span class="n">row_number</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
  <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">row_number</span><span class="p">())</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 'index': 1},
 {'a': 7, 'grp': 'a', 'index': 2},
 {'a': 5, 'grp': 'a', 'index': 3},
 {'a': 2, 'grp': 'b', 'index': 1},
 {'a': 4, 'grp': 'b', 'index': 2}]
</code></pre>
<h3 id="sort-1">Sort</h3>
<p>排序, 默认升序</p>
<h4 id="without-groups-3">without groups</h4>

<figure >
    
        <img src="img/sort-no-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span> <span class="c1">#根据字段a进行排序  </span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span>  
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 2, 'grp': 'b'}, 
{'a': 5, 'grp': 'a'}, 
{'a': 6, 'grp': 'a'}, 
{'a': 7, 'grp': 'a'}, 
{'a': 9, 'grp': 'b'}]
</code></pre>
<h4 id="with-groups-3">with groups</h4>

<figure >
    
        <img src="img/sort-with-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>  
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>  
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span>  
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 5, 'grp': 'a'}, 
{'a': 6, 'grp': 'a'}, 
{'a': 7, 'grp': 'a'}, 
{'a': 2, 'grp': 'b'}, 
{'a': 9, 'grp': 'b'}]
</code></pre>
<h3 id="ungroup-1">Ungroup</h3>
<p>最后，如果你已经进行完了分组计算，想再次整合起来，取消分组状态，可以使用<code>.ungroup()</code></p>
<p><br><br></p>
<h2 id="merge-verbs">Merge Verbs</h2>
<hr>
<p>如果想将多个记录整理到一个记录中，有很多种实现方法。</p>
<h3 id="concat">Concat</h3>
<p>如果想垂直方向将多个记录堆叠，可以使用concat

<figure >
    
        <img src="img/concat.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">c1</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}])</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}])</span>
<span class="n">c3</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}])</span>

<span class="n">c1</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于c1.concat(c2).concat(c3).collect()</span>
<span class="n">c1</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="n">c3</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}, {'a': 3}]
</code></pre>
<h3 id="joins">Joins</h3>
<p>Joins类似于数学里的交集、并集的，大致有以下四种，

<figure >
    
        <img src="img/LeftRight.png" width="800" />
    
    
</figure>
</p>
<h4 id="left-join">left join</h4>
<p>左连接，以左为主，表示以table1为主，关联上table2的数据，结果显示table1的所有数据，然后table2显示的是和table1有交集部分的数据。

<figure >
    
        <img src="img/left_join.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">},</span>
<span class="p">])</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
<span class="p">])</span>

<span class="c1">#根据b进行左右两表的合并</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">left</span><span class="o">.</span><span class="n">inner_join</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">mapping</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">})</span>
<span class="n">result</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4, 'c': 9}, {'a': 2, 'b': 6, 'c': 7}]
</code></pre>
<h4 id="inner-join">inner join</h4>
<p>内连接， 交集</p>

<figure >
    
        <img src="img/inner_join.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">8</span><span class="p">},</span>
<span class="p">])</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
<span class="p">])</span>


<span class="n">result</span> <span class="o">=</span> <span class="n">left</span><span class="o">.</span><span class="n">inner_join</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">mapping</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">})</span>
<span class="n">result</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4, 'c': 9}, {'a': 2, 'b': 6, 'c': 7}]
</code></pre>
<hr>
<p><br><br></p>
<h2 id="nested-data">Nested Data</h2>
<p>由于嵌套数据序列确实具有各种形状和大小，因此该库提供了各种方法来帮助您将数据重塑为不同的格式。 本文档将演示这些方法的工作原理。</p>
<h3 id="explode">Explode</h3>
<p>炸裂（展开）

<figure >
    
        <img src="img/explode.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">99</span><span class="p">],</span> 
         <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">]}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">explode</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'gender': '男', 'grade': 80, 'name': '张三'},
 {'gender': '男', 'grade': 99, 'name': '张三'},
 {'gender': '男', 'grade': 80, 'name': '李四'},
 {'gender': '男', 'grade': 99, 'name': '李四'}]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>


<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">99</span><span class="p">],</span> 
         <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">]}]</span>

<span class="c1">#.explode(&#39;name&#39;, &#39;grade&#39;)略微有些区别</span>
<span class="c1">#请查看两者运行结果</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">explode</span><span class="p">(</span><span class="n">item</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="s1">&#39;grade&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'gender': '男', 'item': '张三', 'val': 80},
 {'gender': '男', 'item': '张三', 'val': 99},
 {'gender': '男', 'item': '李四', 'val': 80},
 {'gender': '男', 'item': '李四', 'val': 99}]
</code></pre>
<h3 id="unpack">Unpack</h3>
<p>与explode类似

<figure >
    
        <img src="img/unpack.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s1">&#39;rows&#39;</span><span class="p">:</span> <span class="p">[{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}]</span>
<span class="p">}</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;rows&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2, 'c': 3}, 
{'a': 1, 'b': 3}, 
{'a': 1, 'b': 4}]
</code></pre>
<h3 id="flatten-keys">Flatten keys</h3>

<figure >
    
        <img src="img/flatten_keys.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;feature_1&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
  <span class="s1">&#39;feature_2&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
  <span class="s1">&#39;feature_3&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
<span class="p">}</span>


<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">listify</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
 <span class="o">.</span><span class="n">flatten_keys</span><span class="p">()</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> 
<span class="p">)</span>
</code></pre></div><pre><code>[{'propery_1': 1, 'property_2': 2, 'key': 'feature_1'},
 {'propery_1': 3, 'property_2': 4, 'key': 'feature_2'},
 {'propery_1': 5, 'property_2': 6, 'key': 'feature_3'}]
</code></pre>
<p><br><br></p>
<h2 id="summary-methods">Summary Methods</h2>
<p>Clumper支持常用的统计性方法，诸如mean、max、min等</p>
<h3 id="mean">mean</h3>

<figure >
    
        <img src="img/mean.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3.5
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>6.666666666666667
</code></pre>
<h3 id="count">count</h3>
<p>统计记录数

<figure >
    
        <img src="img/count.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="c1">#含有a的一共有多少条记录</span>
<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>4
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3
</code></pre>
<h3 id="unique">unique</h3>
<p>汇总某字段不重样的值的种类，如<code>[a, b, a, a]</code>，经过unique后，返回<code>[a, b]</code>

<figure >
    
        <img src="img/unique.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>[2, 3, 7]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>[6, 7]
</code></pre>
<h3 id="n_unique">n_unique</h3>
<p>统计某字段对应的值一种有多少种

<figure >
    
        <img src="img/nunique.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">n_unique</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">n_unique</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>2
</code></pre>
<h3 id="min">min</h3>

<figure >
    
        <img src="img/min.png" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>2
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>6
</code></pre>
<h3 id="max">max</h3>

<figure >
    
        <img src="img/max.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>7
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>7
</code></pre>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>我最喜欢的15个Typora主题</title>
      <link>https://textdata.cn/blog/my-favorite-typora-themes/</link>
      <pubDate>Tue, 01 Jun 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/my-favorite-typora-themes/</guid>
      <description>Typora是一个所见即所得的Markdown格式文本编辑器，支持Windows、macOS和GNU/Linux操作系统，拼写检查、自定义CSS样式、数学公式渲染（通过MathJax）等特性</description>
      <content:encoded><![CDATA[<h1 id="typora简介">Typora简介</h1>
<p>Typora是一个所见即所得的Markdown格式文本编辑器，支持Windows、macOS和GNU/Linux操作系统，拼写检查、自定义CSS样式、数学公式渲染（通过MathJax）等特性。</p>
<p>如果你还不知道<code>Typora</code>，请访问<a href="https://typora.io/">Typora — a markdown editor, markdown reader.</a></p>
<br>
<h1 id="主题安装方法">主题安装方法</h1>
<ol>
<li>下载本主题的压缩文件<a href="https://github.com/AntonVanke/typora-mlike-theme/releases/latest">Latest release</a></li>
<li>打开<code>Typora</code>, 点击菜单栏的<code>偏好设置</code>-<code>外观</code>-<code>打开主题文件夹</code></li>
<li>将<code>解压后的</code>文件复制到主题文件夹下(压缩包包含<code>mlike</code>文件夹、 <code>mlike.css</code> <code>mlike-light.css</code>、<code>mlike-dark.css</code>)</li>
<li>重新启动<code>Typora</code>，点击菜单栏的<code>主题</code>-<code>Mlike Light</code>或者<code>Mlike Dark</code></li>
</ol>
<p>具体的安装方法可查看 <a href="https://theme.typora.io/doc/Install-Theme/">Install Theme (typora.io)</a></p>
<br>
<h1 id="typora-themes">Typora Themes</h1>
<p>下面15个主题是大邓最喜欢的主题</p>
<ol>
<li>Autumnus</li>
<li>Adark</li>
<li>Drake</li>
<li>FluentLight</li>
<li>Jamstatic</li>
<li>LessLight</li>
<li>LessLightPrint</li>
<li>Mo</li>
<li>NewPrint</li>
<li>OptAutumnus</li>
<li>OrangeHeart</li>
<li>PixII</li>
<li>Torillic</li>
<li>Vue</li>
<li>Whitey</li>
</ol>
<br>
<h2 id="1autumnus">1.Autumnus</h2>

<figure >
    
        <img src="img/autumnus.png" width="800" />
    
    
</figure>

<br>
<h2 id="2adark">2.Adark</h2>

<figure >
    
        <img src="img/adark.png" width="800" />
    
    
</figure>

<br>
<h2 id="3drake">3.Drake</h2>

<figure >
    
        <img src="img/drake.png" width="800" />
    
    
</figure>

<br>
<h2 id="4fluentlight">4.FluentLight</h2>

<figure >
    
        <img src="img/fluentlight.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/escaping.png" width="800" />
    
    
</figure>

<br>
<h2 id="5jamstatic">5.Jamstatic</h2>

<figure >
    
        <img src="img/jamstatic.png" width="800" />
    
    
</figure>

<br>
<h2 id="6lesslight">6.LessLight</h2>

<figure >
    
        <img src="img/LessLight.png" width="800" />
    
    
</figure>

<br>
<h2 id="7lesslightprint">7.LessLightPrint</h2>

<figure >
    
        <img src="img/LessLightPrint.png" width="800" />
    
    
</figure>

<br>
<h2 id="8mo">8.Mo</h2>

<figure >
    
        <img src="img/Mo.png" width="800" />
    
    
</figure>

<br>
<h2 id="9newprint">9.NewPrint</h2>

<figure >
    
        <img src="img/newprint.png" width="800" />
    
    
</figure>

<br>
<h2 id="10optautumnus">10.OptAutumnus</h2>

<figure >
    
        <img src="img/optAutumnus.png" width="800" />
    
    
</figure>

<br>
<h2 id="11orangeheart">11.OrangeHeart</h2>

<figure >
    
        <img src="img/orangeheart.png" width="800" />
    
    
</figure>

<br>
<h2 id="12pixii">12.PixII</h2>

<figure >
    
        <img src="img/PixII.png" width="800" />
    
    
</figure>

<br>
<h2 id="13torillic">13.Torillic</h2>

<figure >
    
        <img src="img/Torillic.png" width="800" />
    
    
</figure>

<br>
<h2 id="14vue">14.Vue</h2>

<figure >
    
        <img src="img/vue.png" width="800" />
    
    
</figure>

<br>
<h2 id="15whitey">15.Whitey</h2>

<figure >
    
        <img src="img/whitey.png" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>深交所上交所pdf批量下载</title>
      <link>https://textdata.cn/blog/stock_exchange_prospectus/</link>
      <pubDate>Tue, 25 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/stock_exchange_prospectus/</guid>
      <description>有代码有视频；一文让你学会GET/POST两种请求方法的案例实战</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="%E6%8B%9B%E8%82%A1%E8%AF%B4%E6%98%8E%E4%BB%A3%E7%A0%81.zip">点击此处下载代码</a></p>
<br>
<br>
<h2 id="本文b站视频">本文B站视频</h2>
<p><a href="https://www.bilibili.com/video/BV1AE411r7ph">https://www.bilibili.com/video/BV1AE411r7ph</a></p>
<br>
<br>
<h2 id="一知识准备">一、知识准备</h2>
<ol>
<li>python语法基本知识 <a href="https://www.bilibili.com/video/BV1eb411h7sP/">https://www.bilibili.com/video/BV1eb411h7sP/</a></li>
<li>python网络爬虫 <a href="https://www.bilibili.com/video/BV1AE411r7ph/">https://www.bilibili.com/video/BV1AE411r7ph/</a></li>
</ol>
<br>
<br>
<h2 id="二网址规律分析">二、网址规律分析</h2>
<h3 id="21-上交所">2.1 上交所</h3>

<figure >
    
        <img src="img/00-%e4%b8%8a%e4%ba%a4%e6%89%80%e6%8b%9b%e8%82%a1%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" width="800" />
    
    
</figure>

<p>上交所多为GET请求方法，伪码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;上交所网址规律&#39;</span>
<span class="n">headers</span> <span class="o">=</span> <span class="s1">&#39;你的浏览器useragent(带referer)&#39;</span>
<span class="n">cookies</span> <span class="o">=</span> <span class="s1">&#39;你的cookies&#39;</span>
<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> 
                    <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> 
                    <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</code></pre></div><br>
<h3 id="22-深交所">2.2 深交所</h3>

<figure >
    
        <img src="img/01-%e6%b7%b1%e5%9c%b3%e8%af%81%e5%88%b8%e4%ba%a4%e6%98%93%e6%89%80%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/02-%e6%b7%b1%e5%9c%b3%e8%af%81%e5%88%b8%e4%ba%a4%e6%98%93%e6%89%80%e7%bd%91%e5%9d%80%e8%a7%84%e5%be%8b.png" width="800" />
    
    
</figure>

<p>深交所多为POST请求方法，伪码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;深交所网址规律&#39;</span>
<span class="n">headers</span> <span class="o">=</span> <span class="s1">&#39;你的浏览器useragent(带referer)&#39;</span>
<span class="n">cookies</span> <span class="o">=</span> <span class="s1">&#39;你的cookies&#39;</span>
<span class="n">param</span> <span class="o">=</span> <span class="s1">&#39;form data构造的字典，补全网址规律&#39;</span>

<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> 
                    <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
                    <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">,</span> 
                    <span class="n">data</span><span class="o">=</span><span class="n">param</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="三定位pdf相关数据">三、定位pdf相关数据</h2>
<p>访问得到的结果均为json数据，解析定位方法可使用python的字典方法。</p>

<figure >
    
        <img src="img/03-%e4%b8%8a%e4%ba%a4%e6%89%80%e6%95%b0%e6%8d%ae.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/04-%e6%b7%b1%e4%ba%a4%e6%89%80%e6%95%b0%e6%8d%ae.png" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="四存储数据">四、存储数据</h2>
<p>几千个pdf数据量很容易达到1000+M，如果长时间自动下载容易失败。</p>
<p>建议先获取所有公司相关信息，存储到csv中。</p>
<p>后续再单独使用pandas读取，逐一下载pdf。</p>
<p>注意，这里推荐使用csv新的语法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;你的csv文件路径&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf</span><span class="p">:</span>
    <span class="c1">#csv文件内的字段名</span>
    <span class="n">fieldnames</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;link&#39;</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">]</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="n">fieldnames</span><span class="p">)</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
    <span class="c1">#访问</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;网址&#39;</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="o">....</span><span class="p">)</span>
    <span class="c1">#定位</span>
    <span class="k">for</span> <span class="n">company</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()[</span><span class="s1">&#39;data&#39;</span><span class="p">]:</span>
        <span class="c1">#解析数据</span>
        <span class="n">row</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="n">row</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;采集到的标题&#39;</span>
        <span class="n">row</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;采集到的日期&#39;</span>
        <span class="n">row</span><span class="p">[</span><span class="s1">&#39;link&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;采集到的pdf链接&#39;</span>
        <span class="n">row</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;采集到的内容&#39;</span>
        
        <span class="c1">#写入csv</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="五批量下载pdf">五、批量下载pdf</h2>
<p>以深交所为例，已经采集到<strong>深圳交易所.csv</strong>，现在下载只需要执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## 下载
import requests
import pandas as pd

def download(link, fpath):
    &#34;&#34;&#34;
    下载多媒体及文件
    link： 多媒体文件链接（结尾有文件格式名）
    fpath: 存储文件的路径（结尾有文件格式名）
    &#34;&#34;&#34;
    
    resp = requests.get(link)
    #获取到二进制数据
    binarydata = resp.content
    #以二进制形式将数据流存入fname中
    with open(fpath, &#39;wb&#39;) as f:
        f.write(binarydata)
        
df = pd.read_csv(&#39;深圳交易所.csv&#39;)
for title, link in zip(df[&#39;title&#39;], df[&#39;link&#39;]):
    fpath = &#39;深圳/{title}.PDF&#39;.format(title=title)
    download(link, fpath)
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Pandas小案例 | 对某公司同年的某指标批量汇总</title>
      <link>https://textdata.cn/blog/pandas_example_company_analysis/</link>
      <pubDate>Thu, 20 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_example_company_analysis/</guid>
      <description>学会pandas包，走到哪里都不怕</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="%E4%BB%A3%E7%A0%81.zip">点击此处下载代码</a></p>
<br>
<h2 id="问题">问题</h2>
<p>如何将数据中，同一股票代码同一年的某个字段加总成一条？</p>
<p>我想把某公司同一年的数据var加总到一起</p>
<h2 id="思路">思路</h2>
<p>可以通过pandas库实现这个需求</p>
<ol>
<li>获取公司股票代码列表</li>
<li>获取某公司年份列表</li>
<li>对某个公司同年的var进行加总  (var代指一个字段或变量)</li>
<li>for循环对所有的公司重复2-3操作</li>
</ol>
<br>
<h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#强制股票代码转为str类型</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data.xlsx&#39;</span><span class="p">,</span> <span class="n">converters</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;code&#34;</span><span class="p">:</span> <span class="nb">str</span><span class="p">})</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="800" />
    
    
</figure>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<br>
<h2 id="实验代码">实验代码</h2>
<h3 id="1-获取公司股票代码列表">1. 获取公司股票代码列表</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">codes</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
<span class="n">codes</span>
</code></pre></div><pre><code>array(['000001', '000002', '000004', '000005', '000006'], dtype=object)
</code></pre>
<h3 id="2-获取某公司年份列表">2. 获取某公司年份列表</h3>
<p>以000001为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">years</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;000001&#39;</span><span class="p">][</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">years</span>
</code></pre></div><pre><code>{2000, 2002, 2007, 2008, 2010, 2013, 2019}
</code></pre>
<h3 id="3-对某个公司同年的baladded进行加总">3. 对某个公司同年的baladded进行加总</h3>
<p>以000001公司2000年为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;000001&#39;</span><span class="p">]</span>
<span class="n">ndf</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df2.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">]</span>
</code></pre></div>
<figure >
    
        <img src="img/df3.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span>
</code></pre></div><pre><code>0   -65856130.0
1   -65856130.0
Name: baladded, dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><pre><code>-131712260.0
</code></pre>
<h3 id="for循环对所有的公司重复2-3操作">for循环对所有的公司重复2-3操作</h3>
<p>汇总代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">codes</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
<span class="k">for</span> <span class="n">code</span> <span class="ow">in</span> <span class="n">codes</span><span class="p">:</span>
    <span class="n">years</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">code</span><span class="p">][</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="n">years</span><span class="p">:</span>
        <span class="n">ndf</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">code</span><span class="p">]</span>
        <span class="n">baladded_sum</span> <span class="o">=</span> <span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">year</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">baladded_sum</span><span class="p">)</span>
        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
<span class="n">result_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;baladded_sum&#39;</span><span class="p">])</span>
<span class="n">result_df</span>
</code></pre></div>
<figure >
    
        <img src="img/df4.png" width="800" />
    
    
</figure>

<p>保存结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">result_df</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="s1">&#39;result.xlsx&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Jaal库~轻松绘制动态社交网络关系图</title>
      <link>https://textdata.cn/blog/jaal_social_network_visualization/</link>
      <pubDate>Sat, 08 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/jaal_social_network_visualization/</guid>
      <description>最简单好用的社交网络可视化包</description>
      <content:encoded><![CDATA[<p>Jaal是基于Dash和Visdcc构建的可交互的Python社交网络库。由于底层使用了dash，所以我们可以认为jaal更像是一个仪表盘。基于此，jaal也提供了多种处理网络数据的可选项，例如搜索、过滤、给节点（边）上色等。所有的操作，两三行代码即可搞定。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">jaal</span>
</code></pre></div><br>
<h2 id="一快速上手">一、快速上手</h2>
<p>本文准备了《权利的游戏》的节点nodes.csv和边edges.csv数据， 可以使用jaal的plot()函数绘制《权利的游戏》关系网络图。 必须有的字段，这里加粗了
nodes.csv数据含</p>
<ul>
<li><strong>from</strong>: 节点</li>
<li><strong>to</strong>:  节点</li>
<li>weight: 边权重</li>
<li>strenth:</li>
</ul>
<p>edges.csv数据</p>
<ul>
<li><strong>id</strong> 节点id，姓名</li>
<li>gender 节点的性别</li>
</ul>

<figure >
    
        <img src="img/%e6%9d%83%e5%88%a9%e7%9a%84%e6%b8%b8%e6%88%8f.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">jaal</span> <span class="kn">import</span> <span class="n">Jaal</span>

<span class="n">edge_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;edges.csv&#39;</span><span class="p">)</span>
<span class="n">node_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;nodes.csv&#39;</span><span class="p">)</span>
<span class="n">Jaal</span><span class="p">(</span><span class="n">edge_df</span><span class="p">,</span> <span class="n">node_df</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div><p>运行代码后，会生成一个本地服务链接，例如 http://127.0.0.1:8050/ ， 点击链接，浏览器就能看到</p>

<figure >
    
        <img src="img/%e7%bd%91%e7%bb%9c%e5%9b%be.png" width="800" />
    
    
</figure>

<br>
<h2 id="二jaal功能">二、Jaal功能</h2>
<ul>
<li><strong>设置面板</strong>  Jaal运行产生的浏览器界面左侧会有一个设置面板，可以对数据进行搜索、筛选、上色。</li>
<li><strong>搜索</strong> 可以高亮搜索到的节点</li>
<li><strong>过滤</strong> 支持pandas的query语法</li>
<li><strong>上色</strong> 基于类别，对节点、边进行上色。能最多支持20个类别，即节点、边数据允许有20种属性</li>
</ul>
<br>
<h2 id="三-案例">三、 案例</h2>
<h4 id="31-搜索">3.1 搜索</h4>
<p>第一个选项是搜索，我们可以在其中搜索图中的特定节点。 它支持在节点标签上逐字符搜索。 以下是我们尝试搜索“ Arya”的示例</p>

<figure >
    
        <img src="img/search.gif" width="800" />
    
    
</figure>

<h4 id="32-过滤">3.2 过滤</h4>
<p>接下来，我们进行过滤。 Jaal支持在节点和边要素上都进行过滤的选项。 为此，我们提供了单独的文本区域。 下面我们可以看到节点和边缘过滤查询的实时效果。</p>

<figure >
    
        <img src="img/filter.gif" width="800" />
    
    
</figure>

<h4 id="33-染色">3.3 染色</h4>
<p>最后，我们可能希望查看任何功能的整体分布，而不是进行过滤。 目前，Jaal通过提供根据任何分类特征为节点或边缘着色的选项来解决此问题。 我们可以在下面看到一个真实的例子。</p>

<figure >
    
        <img src="img/color.gif" width="800" />
    
    
</figure>

<br>
<h2 id="四-代码获取">四、 代码获取</h2>
<ol>
<li><a href="%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE.zip"><strong>直接下载</strong></a></li>
<li><a href="https://github.com/thunderhit/DaDengAndHisPython">github更多代码</a></li>
</ol>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Kaggle数据挖掘最佳实践</title>
      <link>https://textdata.cn/blog/kaggle_best_practice_of_data_mining/</link>
      <pubDate>Thu, 06 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/kaggle_best_practice_of_data_mining/</guid>
      <description>让数据挖掘更优雅</description>
      <content:encoded><![CDATA[<h2 id="代码获取">代码获取</h2>
<ol>
<li><a href="%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE.zip"><strong>直接下载</strong></a></li>
<li><a href="https://github.com/thunderhit/DaDengAndHisPython">github更多代码</a></li>
</ol>
<br>
<p>Kaggle是个很棒的地方,对于数据科学家和机器学习工程师来说，这是一个知识的金矿。可以在同一地点找到由本领域专家带来的高质量，高效，可重现，很棒的代码。自推出以来，它已经举办了164场比赛。这些比赛吸引了来自世界各地的专家和专家加入该平台。结果，每场比赛以及Kaggle提供的大量开源数据集都有许多高质量的笔记本和脚本。</p>
<p>在数据科学之旅的开始，我将去Kaggle查找数据集以练习我的技能。每当我查看其他内核时，我都会对代码的复杂性感到不知所措，然后马上回避。</p>
<p>但是现在，我发现自己花费了大量时间阅读其他笔记本并提交竞赛文件。有时候，有些东西值得您度过整个周末。有时，我会发现简单但致命的有效代码技巧和最佳实践，这些技巧和最佳实践只能通过观察其他专家来学习。</p>
<p>在整个系列中，您会发现我在典型的数据科学工作流程中可能有用的任何内容，包括与通用库相关的代码快捷方式，Kaggle的顶级行业专家遵循的最佳实践等，这些都是我在学习过程中学到的。</p>
<h2 id="1-只绘制相关系数矩阵的下三角部分">1. 只绘制相关系数矩阵的下三角部分</h2>
<p>好的相关矩阵可以说明数据集中目标变量之间的相关性</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/melbourne_housing_raw.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>

<span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">diverging_palette</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">75</span><span class="p">,</span> <span class="n">l</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span>
                             <span class="n">n</span><span class="o">=</span><span class="mi">9</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="s2">&#34;light&#34;</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">corr</span><span class="p">(),</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
             <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;.2f&#39;</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/cor1.png" width="800" />
    
    
</figure>

<p>但上图中，数据集中存在大量的特征，导致相似矩阵过于庞大，让人看起来不知所措。</p>
<p>相关矩阵大部分沿主对角线对称，因此它们包含重复数据。 同样，对角线本身也没有用。 让我们看看如何只绘制有用的一半：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="c1"># 计算相关系数</span>
<span class="n">matrix</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">corr</span><span class="p">()</span>

<span class="c1"># 创建遮罩（为了只显示下三角）</span>
<span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">triu</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">))</span>

<span class="c1"># 定制调色板</span>
<span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">diverging_palette</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">75</span><span class="p">,</span> <span class="n">l</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span>
                             <span class="n">n</span><span class="o">=</span><span class="mi">9</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="s2">&#34;light&#34;</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># 设定图片尺寸</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>

<span class="c1"># 绘制相似矩阵热力图</span>
<span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
             <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;.2f&#39;</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/cor2.png" width="800" />
    
    
</figure>

<p>由此产生的可视化图更容易解释并且没有视觉干扰干扰。</p>
<ul>
<li>首先，我们使用DataFrame的.corr方法构建相关矩阵。</li>
<li>然后，我们使用dtype设置为bool的np.ones_like函数来创建一个True矩阵，其形状与DataFrame相同：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div><pre><code>array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
</code></pre></div><pre><code>array([[ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [ True,  True,  True,  True]])
</code></pre>
<p>将布尔方阵传递给Numpy的.triu函数，该函数将返回一个二维布尔蒙版，其中包含矩阵下三角的False值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">np</span><span class="o">.</span><span class="n">triu</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">))</span>
</code></pre></div><pre><code>array([[ True,  True,  True,  True],
       [False,  True,  True,  True],
       [False, False,  True,  True],
       [False, False, False,  True]])
</code></pre>
<p>然后，我们可以将其传递给Seaborn的heatmap函数，以根据此蒙版对矩阵进行可视化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
               <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;.2f&#39;</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="2-value_counts考虑缺失值">2. value_counts考虑缺失值</h2>
<p>使用value_counts时，可将dropna设置为False来查看任何列中缺失值的比例。通过确定缺失值的比例，可以决定是否丢弃含有缺失值的记录。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#字段CouncilArea的数据分布情况</span>
<span class="n">df</span><span class="o">.</span><span class="n">CouncilArea</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">dropna</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><pre><code>Boroondara City Council    0.105431
Darebin City Council       0.081791
Moreland City Council      0.060877
Glen Eira City Council     0.057549
Melbourne City Council     0.056000
Name: CouncilArea, dtype: float64
</code></pre>
<p>但是，如果要查看<strong>所有列</strong>中缺失值的比例，则value_counts不是最佳选择。 相反，您可以执行以下操作：</p>
<ol>
<li>
<p>首先，通过将缺失值的数量除以DataFrame的长度来找到比例。</p>
</li>
<li>
<p>然后，您可以过滤掉0％的列，即i。 e。 只选择缺少值的列。</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">missing_props</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

<span class="n">missing_props</span><span class="p">[</span><span class="n">missing_props</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><pre><code>BuildingArea     0.605761
YearBuilt        0.553863
Landsize         0.338813
Car              0.250394
Bathroom         0.235993
Bedroom2         0.235735
Longtitude       0.228821
Lattitude        0.228821
Price            0.218321
Propertycount    0.000086
Regionname       0.000086
CouncilArea      0.000086
Postcode         0.000029
Distance         0.000029
dtype: float64
</code></pre>
<br>
<h2 id="3-使用pandas的styler">3. 使用Pandas的Styler</h2>
<p>我们中的许多人从未意识到pandas的巨大潜力。pandas的一个被低估且经常被忽视的功能是其<strong>对DataFrames进行样式设置</strong>的能力。 使用pandas DataFrames的.style属性，可以将条件设计和样式应用于它们。</p>
<p>作为第一个示例，让我们看看如何根据每个单元格的值来更改背景颜色：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">diamonds</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/diamonds.csv&#39;</span><span class="p">)</span>
<span class="n">diamonds</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/diamonds.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">diamonds</span><span class="o">.</span><span class="n">cut</span><span class="p">,</span> <span class="n">diamonds</span><span class="o">.</span><span class="n">clarity</span><span class="p">)</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">background_gradient</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;rocket_r&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/heat1.png" width="800" />
    
    
</figure>

<p>几乎没有使用Seaborn的热图功能的热图。 在这里，我们使用pd.crosstab对钻石切割(cut)和净度(clarity)的每种组合进行计数。</p>
<p>将.style.background_gradient与调色板配合使用，您可以轻松地发现哪种组合出现得最多。 仅从上面的DataFrame中，我们可以看到大多数钻石都是“ VS2”净度类型。</p>
<p>我们甚至可以通过在交叉表中找到每种钻石切割cut和净度clarity组合的<strong>平均价格</strong>来进一步做到这一点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">diamonds</span><span class="o">.</span><span class="n">cut</span><span class="p">,</span> <span class="n">diamonds</span><span class="o">.</span><span class="n">clarity</span><span class="p">,</span> <span class="n">aggfunc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="n">diamonds</span><span class="o">.</span><span class="n">price</span><span class="p">)</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">background_gradient</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;rocket_r&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/heat2.png" width="800" />
    
    
</figure>

<p>通过将.format方法与格式字符串{：.2f}链接起来，我们指定了2个浮点数的精度。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">agg_prices</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">diamonds</span><span class="o">.</span><span class="n">cut</span><span class="p">,</span> <span class="n">diamonds</span><span class="o">.</span><span class="n">clarity</span><span class="p">,</span> <span class="n">aggfunc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="n">diamonds</span><span class="o">.</span><span class="n">price</span><span class="p">)</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">background_gradient</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;rocket_r&#39;</span><span class="p">)</span>

<span class="n">agg_prices</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{:.2f}</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/heat3.png" width="800" />
    
    
</figure>

<br>
<h2 id="4-matplotlib默认全局设置">4. matplotlib默认全局设置</h2>
<p>在进行<strong>探索性数据分析</strong>时，您可能想对所有绘图应用自定义调色板，对刻度标签使用更大的字体，更改图例的位置，使用固定的图形大小等。</p>
<p>对绘图自定义参数的更改是一项非常无聊，重复且耗时的任务。 幸运的是，您可以使用Matplotlib的rcParams为绘图设置全局配置。</p>
<p>rcParams只是一个普通的Python字典，其中包含Matplotlib的默认设置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">rcParams</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="n">rcParams</span>
</code></pre></div><pre><code>RcParams({'_internal.classic_mode': False,
          'agg.path.chunksize': 0,
          'animation.avconv_args': [],
          'animation.avconv_path': 'avconv',
          'animation.bitrate': -1,
          'animation.codec': 'h264',
          'animation.convert_args': [],
          'animation.convert_path': 'convert',
          'animation.embed_limit': 20.0,
          'animation.ffmpeg_args': [],
          'animation.ffmpeg_path': 'ffmpeg',
          'animation.frame_format': 'png',
          'animation.html': 'none',
          'animation.html_args': [],
          'animation.writer': 'ffmpeg',
          'axes.autolimit_mode': 'data',
          'axes.axisbelow': 'line',
          'axes.edgecolor': 'black',
          'axes.facecolor': 'white',
          'axes.formatter.limits': [-7, 7],
          'axes.formatter.min_exponent': 0,
          'axes.formatter.offset_threshold': 4,
          'axes.formatter.use_locale': False,
          'axes.formatter.use_mathtext': False,
          'axes.formatter.useoffset': True,
          'axes.grid': False,
          'axes.grid.axis': 'both',
          'axes.grid.which': 'major',
          'axes.labelcolor': 'black',
          'axes.labelpad': 4.0,
          'axes.labelsize': 'medium',
          'axes.labelweight': 'normal',
          'axes.linewidth': 0.8,
          'axes.prop_cycle': cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']),
          'axes.spines.bottom': True,
          'axes.spines.left': True,
          'axes.spines.right': True,
          'axes.spines.top': True,
          'axes.titlepad': 6.0,
          'axes.titlesize': 'large',
          'axes.titleweight': 'normal',
          'axes.unicode_minus': True,
          'axes.xmargin': 0.05,
          'axes.ymargin': 0.05,
          'axes3d.grid': True,
          'backend': 'module://ipykernel.pylab.backend_inline',
          'backend_fallback': True,
          'boxplot.bootstrap': None,
          'boxplot.boxprops.color': 'black',
          'boxplot.boxprops.linestyle': '-',
          'boxplot.boxprops.linewidth': 1.0,
          'boxplot.capprops.color': 'black',
          'boxplot.capprops.linestyle': '-',
          'boxplot.capprops.linewidth': 1.0,
          'boxplot.flierprops.color': 'black',
          'boxplot.flierprops.linestyle': 'none',
          'boxplot.flierprops.linewidth': 1.0,
          'boxplot.flierprops.marker': 'o',
          'boxplot.flierprops.markeredgecolor': 'black',
          'boxplot.flierprops.markeredgewidth': 1.0,
          'boxplot.flierprops.markerfacecolor': 'none',
          'boxplot.flierprops.markersize': 6.0,
          'boxplot.meanline': False,
          'boxplot.meanprops.color': 'C2',
          'boxplot.meanprops.linestyle': '--',
          'boxplot.meanprops.linewidth': 1.0,
          'boxplot.meanprops.marker': '^',
          'boxplot.meanprops.markeredgecolor': 'C2',
          'boxplot.meanprops.markerfacecolor': 'C2',
          'boxplot.meanprops.markersize': 6.0,
          'boxplot.medianprops.color': 'C1',
          'boxplot.medianprops.linestyle': '-',
          'boxplot.medianprops.linewidth': 1.0,
          'boxplot.notch': False,
          'boxplot.patchartist': False,
          'boxplot.showbox': True,
          'boxplot.showcaps': True,
          'boxplot.showfliers': True,
          'boxplot.showmeans': False,
          'boxplot.vertical': True,
          'boxplot.whiskerprops.color': 'black',
          'boxplot.whiskerprops.linestyle': '-',
          'boxplot.whiskerprops.linewidth': 1.0,
          'boxplot.whiskers': 1.5,
          'contour.corner_mask': True,
          'contour.negative_linestyle': 'dashed',
          'datapath': '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data',
          'date.autoformatter.day': '%Y-%m-%d',
          'date.autoformatter.hour': '%m-%d %H',
          'date.autoformatter.microsecond': '%M:%S.%f',
          'date.autoformatter.minute': '%d %H:%M',
          'date.autoformatter.month': '%Y-%m',
          'date.autoformatter.second': '%H:%M:%S',
          'date.autoformatter.year': '%Y',
          'docstring.hardcopy': False,
          'errorbar.capsize': 0.0,
          'examples.directory': '',
          'figure.autolayout': False,
          'figure.constrained_layout.h_pad': 0.04167,
          'figure.constrained_layout.hspace': 0.02,
          'figure.constrained_layout.use': False,
          'figure.constrained_layout.w_pad': 0.04167,
          'figure.constrained_layout.wspace': 0.02,
          'figure.dpi': 72.0,
          'figure.edgecolor': (1, 1, 1, 0),
          'figure.facecolor': (1, 1, 1, 0),
          'figure.figsize': [6.0, 4.0],
          'figure.frameon': True,
          'figure.max_open_warning': 20,
          'figure.subplot.bottom': 0.125,
          'figure.subplot.hspace': 0.2,
          'figure.subplot.left': 0.125,
          'figure.subplot.right': 0.9,
          'figure.subplot.top': 0.88,
          'figure.subplot.wspace': 0.2,
          'figure.titlesize': 'large',
          'figure.titleweight': 'normal',
          'font.cursive': ['Apple Chancery',
                           'Textile',
                           'Zapf Chancery',
                           'Sand',
                           'Script MT',
                           'Felipa',
                           'cursive'],
          'font.family': ['sans-serif'],
          'font.fantasy': ['Comic Sans MS',
                           'Chicago',
                           'Charcoal',
                           'Impact',
                           'Western',
                           'Humor Sans',
                           'xkcd',
                           'fantasy'],
          'font.monospace': ['DejaVu Sans Mono',
                             'Bitstream Vera Sans Mono',
                             'Computer Modern Typewriter',
                             'Andale Mono',
                             'Nimbus Mono L',
                             'Courier New',
                             'Courier',
                             'Fixed',
                             'Terminal',
                             'monospace'],
          'font.sans-serif': ['DejaVu Sans',
                              'Bitstream Vera Sans',
                              'Computer Modern Sans Serif',
                              'Lucida Grande',
                              'Verdana',
                              'Geneva',
                              'Lucid',
                              'Arial',
                              'Helvetica',
                              'Avant Garde',
                              'sans-serif'],
          'font.serif': ['DejaVu Serif',
                         'Bitstream Vera Serif',
                         'Computer Modern Roman',
                         'New Century Schoolbook',
                         'Century Schoolbook L',
                         'Utopia',
                         'ITC Bookman',
                         'Bookman',
                         'Nimbus Roman No9 L',
                         'Times New Roman',
                         'Times',
                         'Palatino',
                         'Charter',
                         'serif'],
          'font.size': 10.0,
          'font.stretch': 'normal',
          'font.style': 'normal',
          'font.variant': 'normal',
          'font.weight': 'normal',
          'grid.alpha': 1.0,
          'grid.color': '#b0b0b0',
          'grid.linestyle': '-',
          'grid.linewidth': 0.8,
          'hatch.color': 'black',
          'hatch.linewidth': 1.0,
          'hist.bins': 10,
          'image.aspect': 'equal',
          'image.cmap': 'viridis',
          'image.composite_image': True,
          'image.interpolation': 'nearest',
          'image.lut': 256,
          'image.origin': 'upper',
          'image.resample': True,
          'interactive': True,
          'keymap.all_axes': ['a'],
          'keymap.back': ['left', 'c', 'backspace', 'MouseButton.BACK'],
          'keymap.copy': ['ctrl+c', 'cmd+c'],
          'keymap.forward': ['right', 'v', 'MouseButton.FORWARD'],
          'keymap.fullscreen': ['f', 'ctrl+f'],
          'keymap.grid': ['g'],
          'keymap.grid_minor': ['G'],
          'keymap.help': ['f1'],
          'keymap.home': ['h', 'r', 'home'],
          'keymap.pan': ['p'],
          'keymap.quit': ['ctrl+w', 'cmd+w', 'q'],
          'keymap.quit_all': ['W', 'cmd+W', 'Q'],
          'keymap.save': ['s', 'ctrl+s'],
          'keymap.xscale': ['k', 'L'],
          'keymap.yscale': ['l'],
          'keymap.zoom': ['o'],
          'legend.borderaxespad': 0.5,
          'legend.borderpad': 0.4,
          'legend.columnspacing': 2.0,
          'legend.edgecolor': '0.8',
          'legend.facecolor': 'inherit',
          'legend.fancybox': True,
          'legend.fontsize': 'medium',
          'legend.framealpha': 0.8,
          'legend.frameon': True,
          'legend.handleheight': 0.7,
          'legend.handlelength': 2.0,
          'legend.handletextpad': 0.8,
          'legend.labelspacing': 0.5,
          'legend.loc': 'best',
          'legend.markerscale': 1.0,
          'legend.numpoints': 1,
          'legend.scatterpoints': 1,
          'legend.shadow': False,
          'legend.title_fontsize': None,
          'lines.antialiased': True,
          'lines.color': 'C0',
          'lines.dash_capstyle': 'butt',
          'lines.dash_joinstyle': 'round',
          'lines.dashdot_pattern': [6.4, 1.6, 1.0, 1.6],
          'lines.dashed_pattern': [3.7, 1.6],
          'lines.dotted_pattern': [1.0, 1.65],
          'lines.linestyle': '-',
          'lines.linewidth': 1.5,
          'lines.marker': 'None',
          'lines.markeredgecolor': 'auto',
          'lines.markeredgewidth': 1.0,
          'lines.markerfacecolor': 'auto',
          'lines.markersize': 6.0,
          'lines.scale_dashes': True,
          'lines.solid_capstyle': 'projecting',
          'lines.solid_joinstyle': 'round',
          'markers.fillstyle': 'full',
          'mathtext.bf': 'sans:bold',
          'mathtext.cal': 'cursive',
          'mathtext.default': 'it',
          'mathtext.fallback_to_cm': True,
          'mathtext.fontset': 'dejavusans',
          'mathtext.it': 'sans:italic',
          'mathtext.rm': 'sans',
          'mathtext.sf': 'sans',
          'mathtext.tt': 'monospace',
          'patch.antialiased': True,
          'patch.edgecolor': 'black',
          'patch.facecolor': 'C0',
          'patch.force_edgecolor': False,
          'patch.linewidth': 1.0,
          'path.effects': [],
          'path.simplify': True,
          'path.simplify_threshold': 0.1111111111111111,
          'path.sketch': None,
          'path.snap': True,
          'pdf.compression': 6,
          'pdf.fonttype': 3,
          'pdf.inheritcolor': False,
          'pdf.use14corefonts': False,
          'pgf.preamble': '',
          'pgf.rcfonts': True,
          'pgf.texsystem': 'xelatex',
          'polaraxes.grid': True,
          'ps.distiller.res': 6000,
          'ps.fonttype': 3,
          'ps.papersize': 'letter',
          'ps.useafm': False,
          'ps.usedistiller': False,
          'savefig.bbox': None,
          'savefig.directory': '~',
          'savefig.dpi': 'figure',
          'savefig.edgecolor': 'white',
          'savefig.facecolor': 'white',
          'savefig.format': 'png',
          'savefig.frameon': True,
          'savefig.jpeg_quality': 95,
          'savefig.orientation': 'portrait',
          'savefig.pad_inches': 0.1,
          'savefig.transparent': False,
          'scatter.edgecolors': 'face',
          'scatter.marker': 'o',
          'svg.fonttype': 'path',
          'svg.hashsalt': None,
          'svg.image_inline': True,
          'text.antialiased': True,
          'text.color': 'black',
          'text.hinting': 'auto',
          'text.hinting_factor': 8,
          'text.latex.preamble': '',
          'text.latex.preview': False,
          'text.latex.unicode': True,
          'text.usetex': False,
          'timezone': 'UTC',
          'tk.window_focus': False,
          'toolbar': 'toolbar2',
          'verbose.fileo': 'sys.stdout',
          'verbose.level': 'silent',
          'webagg.address': '127.0.0.1',
          'webagg.open_in_browser': True,
          'webagg.port': 8988,
          'webagg.port_retries': 50,
          'xtick.alignment': 'center',
          'xtick.bottom': True,
          'xtick.color': 'black',
          'xtick.direction': 'out',
          'xtick.labelbottom': True,
          'xtick.labelsize': 'medium',
          'xtick.labeltop': False,
          'xtick.major.bottom': True,
          'xtick.major.pad': 3.5,
          'xtick.major.size': 3.5,
          'xtick.major.top': True,
          'xtick.major.width': 0.8,
          'xtick.minor.bottom': True,
          'xtick.minor.pad': 3.4,
          'xtick.minor.size': 2.0,
          'xtick.minor.top': True,
          'xtick.minor.visible': False,
          'xtick.minor.width': 0.6,
          'xtick.top': False,
          'ytick.alignment': 'center_baseline',
          'ytick.color': 'black',
          'ytick.direction': 'out',
          'ytick.labelleft': True,
          'ytick.labelright': False,
          'ytick.labelsize': 'medium',
          'ytick.left': True,
          'ytick.major.left': True,
          'ytick.major.pad': 3.5,
          'ytick.major.right': True,
          'ytick.major.size': 3.5,
          'ytick.major.width': 0.8,
          'ytick.minor.left': True,
          'ytick.minor.pad': 3.4,
          'ytick.minor.right': True,
          'ytick.minor.size': 2.0,
          'ytick.minor.visible': False,
          'ytick.minor.width': 0.6,
          'ytick.right': False})
</code></pre>
<p>您可以调整每个图的任意参数设置，一般的图像设置如固定图形大小，刻度标签字体大小以及其他一些参数。</p>
<p>通过这种设置，可以减少很多重复的代码量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 去掉顶部和右侧的线条Remove top and right spines</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;axes.spines.top&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;axes.spines.right&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>

<span class="c1"># 设置图的尺寸Set fixed figure size</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.figsize&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="c1"># 设置图片像素清晰度 Set dots per inch to 300, very high quality images</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.dpi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">300</span>

<span class="c1"># 设置自动调整布局Enable autolayout</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;figure.autolayout&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>

<span class="c1"># 设置全局字号Set global fontsize</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;font.style&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">16</span>

<span class="c1"># 刻度字号Fontsize of ticklabels</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;xtick.labelsize&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;ytick.labelsize&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div><br>
<h2 id="5-pandas全局设置">5. Pandas全局设置</h2>
<p>就像Matplotlib一样，pandas具有可以使用的全局设置。 当然，它们大多数与显示选项有关。</p>
<ul>
<li><strong>get_option()</strong> -  获取pandas单个选项</li>
<li><strong>set_option()</strong> — 设置pandas单个选项</li>
<li><strong>reset_option()</strong> — 重置pandas选项值</li>
</ul>
<p>我更喜欢显示所有的列，lets go</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">set_option</span><span class="p">(</span><span class="s1">&#39;display.max_columns&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="%20img/df1.png" width="800" />
    
    
</figure>

<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
