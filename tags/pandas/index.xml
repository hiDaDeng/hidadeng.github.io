<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>pandas on 大邓和他的PYTHON</title>
    <link>/tags/pandas/</link>
    <description>Recent content in pandas on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 29 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/pandas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pandas技巧  | DataFrame的四则运算</title>
      <link>https://textdata.cn/blog/2024-03-29-dataframe-add-sub-mul-div/</link>
      <pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/blog/2024-03-29-dataframe-add-sub-mul-div/</guid>
      <description>&lt;p&gt;DataFrame的四则运算， 涉及到标量数字与数组(列表、series、字典、dataframe)。我们先构造实验数据df&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;angles&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                   &lt;span class=&#34;s1&#34;&gt;&amp;#39;degrees&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]},&lt;/span&gt;
                  &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;triangle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rectangle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/01-df.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;一标量&#34;&gt;一、标量&lt;/h2&gt;
&lt;p&gt;这里体现的就是pandas独有的广播特性， 使得df可以直接与标量进行运算。以加法为例，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df.add(10)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/02-add.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;其他算法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#df - 10&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df.sub(10)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#df * 10&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df.mul(10)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#df / 10&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df.div(10)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二数组&#34;&gt;二、数组&lt;/h2&gt;
&lt;p&gt;df与数组(列表、series、字典、dataframe)等进行运算&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/01-df.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
 &lt;br&gt;
&lt;p&gt;df有两列， [1, 2]有两个元素。默认轴方向为columns， 两者相减&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df.sub([1, 2], axis=&amp;#39;columns&amp;#39;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/03-sub-list.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;生成一个series数据， 有三行， 索引名设置为circle、triangle、rectangle。&lt;/p&gt;
&lt;p&gt;df与series相减， 轴方向设置为index&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;series&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Series&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; 
                 &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;triangle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rectangle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;series&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/04-sub-series.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;字典有两个字段名， 与df字段名相同。 轴方向设置为columns， 两者相乘&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;angles&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;degrees&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/05-mul-dict.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;字典有三个字段名， 与df的index相同。 轴方向设置为index， 两者相乘&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;circle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;triangle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rectangle&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/05-mul-dict-index.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p>DataFrame的四则运算， 涉及到标量数字与数组(列表、series、字典、dataframe)。我们先构造实验数据df</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;angles&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
                   <span class="s1">&#39;degrees&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">360</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">360</span><span class="p">]},</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="s1">&#39;triangle&#39;</span><span class="p">,</span> <span class="s1">&#39;rectangle&#39;</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><p><img loading="lazy" src="img/01-df.png" alt=""  />
</p>
<br>
<h2 id="一标量">一、标量</h2>
<p>这里体现的就是pandas独有的广播特性， 使得df可以直接与标量进行运算。以加法为例，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">+</span> <span class="mi">10</span>
<span class="c1">#df.add(10)</span>


</code></pre></div><p><img loading="lazy" src="img/02-add.png" alt=""  />
</p>
<p>其他算法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#df - 10</span>
<span class="c1">#df.sub(10)</span>

<span class="c1">#df * 10</span>
<span class="c1">#df.mul(10)</span>

<span class="c1">#df / 10</span>
<span class="c1">#df.div(10)</span>
</code></pre></div><p><br><br></p>
<h2 id="二数组">二、数组</h2>
<p>df与数组(列表、series、字典、dataframe)等进行运算</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span>
</code></pre></div><p><img loading="lazy" src="img/01-df.png" alt=""  />
</p>
 <br>
<p>df有两列， [1, 2]有两个元素。默认轴方向为columns， 两者相减</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">-</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="c1">#df.sub([1, 2], axis=&#39;columns&#39;)</span>
</code></pre></div><p><img loading="lazy" src="img/03-sub-list.png" alt=""  />
</p>
<br>
<p>生成一个series数据， 有三行， 索引名设置为circle、triangle、rectangle。</p>
<p>df与series相减， 轴方向设置为index</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> 
                 <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;circle&#39;</span><span class="p">,</span> <span class="s1">&#39;triangle&#39;</span><span class="p">,</span> <span class="s1">&#39;rectangle&#39;</span><span class="p">])</span>

<span class="n">df</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/04-sub-series.png" alt=""  />
</p>
<br>
<p>字典有两个字段名， 与df字段名相同。 轴方向设置为columns， 两者相乘</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">mul</span><span class="p">({</span><span class="s1">&#39;angles&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;degrees&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="n">axis</span><span class="o">=</span><span class="s1">&#39;columns&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/05-mul-dict.png" alt=""  />
</p>
<br>
<p>字典有三个字段名， 与df的index相同。 轴方向设置为index， 两者相乘</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">mul</span><span class="p">({</span><span class="s1">&#39;circle&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;triangle&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;rectangle&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> <span class="n">axis</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/05-mul-dict-index.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Polars库 | 最强 Pandas 平替来了</title>
      <link>https://textdata.cn/blog/2023-12-27-polars-tutorial-an-altertaive-of-pandas/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-12-27-polars-tutorial-an-altertaive-of-pandas/</guid>
      <description>&lt;h2 id=&#34;一介绍&#34;&gt;一、介绍&lt;/h2&gt;
&lt;p&gt;Polars 是一个用于操作结构化数据的高性能 DataFrame 库，由于 Polars 是从0开始用Rust编写，紧密与机器结合。其矢量化和列式处理可在现代处理器上实现缓存一致性算法和高性能。如果您经常使用 pandas，那么用起 Polars 会感觉很轻松，可以说是平替 Pandas 最有潜质的包。&lt;/p&gt;
&lt;p&gt;Polars 在独立的 TPCH 基准测试中与其他几个解决方案进行了基准测试。该基准测试旨在复制实践中使用的数据整理操作。由于其并行执行引擎、高效算法以及 SIMD（单指令、多数据）矢量化的使用，Polars 轻松胜过其他解决方案。&lt;strong&gt;与pandas相比，它可以实现30倍以上的性能提升&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Polars 的目标是提供一个闪电般快速的&lt;code&gt;DataFrame&lt;/code&gt;库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用机器上所有可用的内核。&lt;/li&gt;
&lt;li&gt;优化查询以减少不必要的工作/内存分配。&lt;/li&gt;
&lt;li&gt;处理比可用 RAM 大得多的数据集。&lt;/li&gt;
&lt;li&gt;拥有一致且可预测的 API。&lt;/li&gt;
&lt;li&gt;具有严格的架构（在运行查询之前应该知道数据类型）。&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&#34;https://pola-rs.github.io/polars/user-guide/&#34;&gt;User guide: https://pola-rs.github.io/polars/user-guide/&lt;/a&gt;
&lt;a href=&#34;https://pola-rs.github.io/polars/py-polars/html/reference/io.html&#34;&gt;API reference: https://pola-rs.github.io/polars/py-polars/html/reference/io.html&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;打开命令行， 执行  polars 安装命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip3 install &amp;#39;polars[all]&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;二数据读写&#34;&gt;二、数据读写&lt;/h2&gt;
&lt;p&gt;Polars 读写数据支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见的数据文件，如 csv、xlsx、json、parquet ；&lt;/li&gt;
&lt;li&gt;云存储，如 S3、Azure Blob, BigQuery；&lt;/li&gt;
&lt;li&gt;数据库，如postgres、mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;咱们主要分享常见的代码操作&lt;/p&gt;
&lt;h3 id=&#34;21-dataframe&#34;&gt;2.1 DataFrame&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;polars&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pl&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;polars.selectors&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cs&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;idx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;李四&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;王五&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;赵六&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;birthday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2009&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2005&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1995&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;gender&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;男&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;男&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;男&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;女&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;bio&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;好好学习，天天向上&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;泰难了&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;学习有毛用&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                &lt;span class=&#34;s2&#34;&gt;&amp;#34;躺平ing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#存入csv、excel、json、parquet&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data.xlsx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_parquet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data.parquet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆    birthday	       | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆ 2009-05-01 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|
│ 2 ┆&amp;#34;李四&amp;#34; ┆ 2005-10-15 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          |
│ 3 ┆&amp;#34;王五&amp;#34; ┆ 2000-12-31 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       |
│ 4 ┆&amp;#34;赵六&amp;#34; ┆ 1995-06-15 00:00:00 ┆ &amp;#34;女&amp;#34;  │&amp;#34;躺平ing&amp;#34;         |
└──────────┴─────────────────────┴───────┘─────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;22-csvexcel&#34;&gt;2.2 csv、excel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;df.write_csv 存入csv&lt;/li&gt;
&lt;li&gt;pl.read_csv  读取csv&lt;/li&gt;
&lt;li&gt;df.write_excel 存入xlsx文件&lt;/li&gt;
&lt;li&gt;pl.read_excel   读取xlsx&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;df_csv = pl.read_csv(&amp;#39;data.csv&amp;#39;)
df_xlsx = pl.read_excel(&amp;#39;data.xlsx&amp;#39;)

df_csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆       birthday	     | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆        str          ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆  &amp;#34;2009-05-01T00:…   ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|
│ 2 ┆&amp;#34;李四&amp;#34; ┆  &amp;#34;2005-10-15T00:…	  ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          |
│ 3 ┆&amp;#34;王五&amp;#34; ┆  &amp;#34;2000-12-31T00:…   ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       |
│ 4 ┆&amp;#34;赵六&amp;#34; ┆  &amp;#34;1995-06-15T00:…	  ┆ &amp;#34;女&amp;#34;  │&amp;#34;躺平ing&amp;#34;         |
└──────────┴─────────────────────┴───────┘─────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意哦， 此时的 date 字段数据类型是 str&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;23-jsonparquet&#34;&gt;2.3 json/parquet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;df.write_json&lt;/li&gt;
&lt;li&gt;pl.read_json&lt;/li&gt;
&lt;li&gt;df.write_parquet&lt;/li&gt;
&lt;li&gt;pl.read_parquet&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df_parquet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_parquet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data.parquet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df_json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆    birthday	       | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆ 2009-05-01 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|
│ 2 ┆&amp;#34;李四&amp;#34; ┆ 2005-10-15 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          |
│ 3 ┆&amp;#34;王五&amp;#34; ┆ 2000-12-31 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       |
│ 4 ┆&amp;#34;赵六&amp;#34; ┆ 1995-06-15 00:00:00 ┆ &amp;#34;女&amp;#34;  │&amp;#34;躺平ing&amp;#34;         |
└──────────┴─────────────────────┴───────┘─────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意， 使用 df.write_json 或 df.write_parquet 将数据存入 json、parquet， 都可以保留 date 字段的 datetime 类型。而 csv、xlsx 只会将date字段存储为 str 类型。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三常用表达式&#34;&gt;三、常用表达式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Expressions&lt;/code&gt;是Polars的核心功能， &lt;code&gt;expressions&lt;/code&gt; 既可以解决简单的查询，又可以轻松扩展到复杂的查询。下面是 polars 的基本表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pl.col&lt;/strong&gt; 列选择器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;df.select&lt;/strong&gt;  结合pl.col， 返回dataframe&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;selector&lt;/strong&gt;  selector选择器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;df.filter&lt;/strong&gt; 结合pl.col， 返回dataframe&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;df.with_columns&lt;/strong&gt; 结合pl.col， 返回dataframe&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;df.grouby&lt;/strong&gt;  结合pl.col， 返回dataframe&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-plcol&#34;&gt;3.1 pl.col&lt;/h3&gt;
&lt;p&gt;选择某一(多)个字段(列)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;birthday&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;col(&amp;#34;birthday&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;birthday&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;col([&amp;#34;name&amp;#34;, &amp;#34;birthday&amp;#34;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;32--dfselect&#34;&gt;3.2  df.select&lt;/h3&gt;
&lt;p&gt;选择 &lt;em&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/em&gt; 和 &lt;em&gt;&lt;strong&gt;birthday&lt;/strong&gt;&lt;/em&gt; 两个字段， 实现该功能有多种写法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#df[[&amp;#39;name&amp;#39;, &amp;#39;birthday&amp;#39;]]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#df.select(&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#    pl.col(&amp;#34;name&amp;#34;), &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#    pl.col(&amp;#34;birthday&amp;#34;), &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#)&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;#df.select([&amp;#34;name&amp;#34;, &amp;#34;birthday&amp;#34;])&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;birthday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 2)
┌──────┬─────────────────────┬
│ name ┆    birthday	       | 
│------┆ ------------------  ┆ 
│  str ┆    datetime[μs]     ┆ 
╞══════╪═════════════════════╪
│&amp;#34;张三&amp;#34; ┆ 2009-05-01 00:00:00 ┆
│&amp;#34;李四&amp;#34; ┆ 2005-10-15 00:00:00 ┆
│&amp;#34;王五&amp;#34; ┆ 2000-12-31 00:00:00 ┆
│&amp;#34;赵六&amp;#34; ┆ 1995-06-15 00:00:00 ┆
└─────────────────────────────
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;polars 即使选择一个字段， 返回的也是dataframe&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#df[[&amp;#39;name&amp;#39;]]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#df.select([&amp;#34;name&amp;#34;])&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 1)
┌──────┬
│ 姓名  ┆
│------┆ 
│  str ┆ 
╞══════╪
│&amp;#34;张三&amp;#34; ┆
│&amp;#34;李四&amp;#34; ┆
│&amp;#34;王五&amp;#34; ┆
│&amp;#34;赵六&amp;#34; ┆
└───────
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;33-dfwith_columns&#34;&gt;3.3 df.with_columns&lt;/h3&gt;
&lt;p&gt;与 df.select 功能类似，但是df.with_columns可以在选择字段的同时，保留之前的字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆       birthday	     | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆        str          ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆  &amp;#34;2009-05-01T00:…   ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|
│ 2 ┆&amp;#34;李四&amp;#34; ┆  &amp;#34;2005-10-15T00:…	  ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          |
│ 3 ┆&amp;#34;王五&amp;#34; ┆  &amp;#34;2000-12-31T00:…   ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       |
│ 4 ┆&amp;#34;赵六&amp;#34; ┆  &amp;#34;1995-06-15T00:…	  ┆ &amp;#34;女&amp;#34;  │&amp;#34;躺平ing&amp;#34;         |
└──────────┴─────────────────────┴───────┘─────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;姓名&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 6)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐───────┬
│idx| name ┆    birthday	       | gender┆	    bio        ┆  姓名  ┆ 
│---┆------┆-------------------- ┆  ---  ┆ --------------  │-------┆
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆  str  ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡═══════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆ 2009-05-01 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|&amp;#34;张三&amp;#34;  ┆
│ 2 ┆&amp;#34;李四&amp;#34; ┆ 2005-10-15 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          |&amp;#34;李四&amp;#34;  ┆
│ 3 ┆&amp;#34;王五&amp;#34; ┆ 2000-12-31 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       |&amp;#34;王五&amp;#34;  ┆
│ 4 ┆&amp;#34;赵六&amp;#34; ┆ 1995-06-15 00:00:00 ┆ &amp;#34;女&amp;#34;  │&amp;#34;躺平ing&amp;#34;         |&amp;#34;赵六&amp;#34;  ┆ 
└──────────┴─────────────────────┴───────┘─────────────────┴───────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;34--dffilter&#34;&gt;3.4  df.filter&lt;/h3&gt;
&lt;p&gt;筛选出生日是 00 后的记录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;birthday&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆    birthday	       | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆ 2009-05-01 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|
│ 2 ┆&amp;#34;李四&amp;#34; ┆ 2005-10-15 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          |
│ 3 ┆&amp;#34;王五&amp;#34; ┆ 2000-12-31 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       |
└──────────┴─────────────────────┴───────┘─────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;35-dfgroupby&#34;&gt;3.5 df.groupby&lt;/h3&gt;
&lt;p&gt;按 &lt;em&gt;&lt;strong&gt;性别gender&lt;/strong&gt;&lt;/em&gt; 进行分组功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#for gender, gender_df in df.groupby(&amp;#39;gender&amp;#39;):&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gender_df&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupby&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gender_df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gender_df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;男 3 &amp;lt;class &amp;#39;polars.dataframe.frame.DataFrame&amp;#39;&amp;gt;
女 1 &amp;lt;class &amp;#39;polars.dataframe.frame.DataFrame&amp;#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;分别计算男女学生的bio的文本长度的均值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gender_df&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupby&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;gender_df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bio&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;男 5.666666666666667
女 5.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupby&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bio&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len_chars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mean_len&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (2, 3)
┌──────┬───────┬───────────┬
│gender| count ┆ mean_len	 |
│------┆ ----- ┆-----------┆
│  str ┆  u32	 ┆   f64     ┆
╞══════╪═══════╪═══════════╡
│ &amp;#34;女&amp;#34; ┆  1    ┆    5.0    ┆
│ &amp;#34;男&amp;#34; ┆  3    ┆  5.666667 ┆
└──────┴───────┴───────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四选择器&#34;&gt;四、选择器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cs.integer、cs.string、cs.numeric 、cs.datetime()、cs.temporal() 按照数据格式筛选字段&lt;/li&gt;
&lt;li&gt;cs.contains 、cs.matches 使用正则表达式筛选字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-按数据格式筛选&#34;&gt;4.1 按数据格式筛选&lt;/h3&gt;
&lt;p&gt;筛选出字段数据类型为字符和数字的字段，返回dataframe&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;polars.selectors&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cs&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 4)
┌───┬──────┬───────┬─────────────────┐
│idx| name ┆ gender┆	    bio        ┆
│---┆ ---  ┆  ---  ┆ --------------  │
│i64┆ str  ┆  str  ┆      str        ┆
╞═══╪══════╪═══════╡═════════════════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|
│ 2 ┆&amp;#34;李四&amp;#34; ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          |
│ 3 ┆&amp;#34;王五&amp;#34; ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       |
│ 4 ┆&amp;#34;赵六&amp;#34; ┆ &amp;#34;女&amp;#34;  │&amp;#34;躺平ing&amp;#34;         |
└──────────┴───────┘─────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;筛选出 datetime 格式的字段，返回 dataframe&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#df.select(cs.temporal())&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 1)
┌───────────────────┬
│ birthday	        |
│-------------------┆
│ datetime[μs]      ┆
╞═══════════════════╪
│2009-05-01 00:00:00┆
│2005-10-15 00:00:00┆
│2000-12-31 00:00:00┆
│1995-06-15 00:00:00┆
└───────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;42-cscontains-csmatches&#34;&gt;4.2 cs.contains/ cs.matches&lt;/h3&gt;
&lt;p&gt;筛选出含 r 字段，返回dataframe&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#筛选出字段名含 r 的字段&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 2)
┌───────────────────┬───────┬
│ birthday	        | gender┆
│-------------------┆  ---  ┆
│ datetime[μs]      ┆  str  ┆
╞═══════════════════╪═══════╡
│2009-05-01 00:00:00┆ &amp;#34;男&amp;#34;  │
│2005-10-15 00:00:00┆ &amp;#34;男&amp;#34;  │
│2000-12-31 00:00:00┆ &amp;#34;男&amp;#34;  │
│1995-06-15 00:00:00┆ &amp;#34;女&amp;#34;  │
└───────────────────┴───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;筛选出含 &lt;em&gt;&lt;strong&gt;na&lt;/strong&gt;&lt;/em&gt; 或 &lt;em&gt;&lt;strong&gt;io&lt;/strong&gt;&lt;/em&gt; 的字段，返回dataframe&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;na|io&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 2)
┌─────┬───────────────────┐
│name ┆       bio         ┆
│ --- ┆ ---------------   ┆
│ str ┆  str              ┆
╞═════╪═══════════════════╡
│&amp;#34;张三&amp;#34;┆ &amp;#34;好好学习，天天向上&amp;#34; |
│&amp;#34;李四&amp;#34;┆ &amp;#34;泰难了&amp;#34;           |
│&amp;#34;王五&amp;#34;┆ &amp;#34;学习有毛用&amp;#34;        |
│&amp;#34;赵六&amp;#34;┆ &amp;#34;躺平ing&amp;#34;          |
└─────┴───────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;五逻辑条件&#34;&gt;五、逻辑条件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;pl.when(condition).then(result1).otherwise(result2)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当满足condition时， 值为result1； 反之，则result2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;df.with_columns(
    pl.when(pl.col(&amp;#39;birthday&amp;#39;)&amp;gt;datetime(2000, 1, 1))
    .then(True)
    .otherwise(False)
    .alias(&amp;#39;00后&amp;#39;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐───────┬
│idx| name ┆    birthday	       | gender┆	    bio        ┆ 00后  ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │  ---- ┆
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆  str  ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡═══════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆ 2009-05-01 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;| true  |
│ 2 ┆&amp;#34;李四&amp;#34; ┆ 2005-10-15 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          | true  |
│ 3 ┆&amp;#34;王五&amp;#34; ┆ 2000-12-31 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       | true  |
│ 4 ┆&amp;#34;赵六&amp;#34; ┆ 1995-06-15 00:00:00 ┆ &amp;#34;女&amp;#34;  │&amp;#34;躺平ing&amp;#34;         | false |
└──────────┴─────────────────────┴───────┘─────────────────┴───────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;六字符串操作&#34;&gt;六、字符串操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pl.col().str.len_chars()&lt;/strong&gt; 字符长度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pl.col().str.contains(pat)&lt;/strong&gt; 是否含某字符(符合pat模式)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pl.col().str.extract(pat)&lt;/strong&gt; 提取出符合模式的文本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pl.col().str.replace(old_pat, new_pat)&lt;/strong&gt;  把old_pat替换为new_pat&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;61-strlen_chars&#34;&gt;6.1 str.len_chars()&lt;/h3&gt;
&lt;p&gt;计算 bio 的文字长度，计算结果存储到 lenth 字段中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bio&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bio&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len_chars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lenth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 2)
┌─────────────────┐───────┬
│	      bio       ┆ lenth ┆
│ --------------  │  ---- ┆
│      str        ┆  u32  ┆
╞═════════════════╡═══════╡
│ &amp;#34;好好学习，天天向上&amp;#34;|   9  |
│ &amp;#34;泰难了&amp;#34;          |   3  |
│ &amp;#34;学习有毛用&amp;#34;       |   5  |
│ &amp;#34;躺平ing&amp;#34;         |   5  |
└──────────────────┴───────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;62-strcontains&#34;&gt;6.2 str.contains()&lt;/h3&gt;
&lt;p&gt;从 bio 中筛选出含 &lt;strong&gt;学习&lt;/strong&gt; 字眼的记录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bio&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;学习&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆    birthday	       | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆ 2009-05-01 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|
│ 3 ┆&amp;#34;王五&amp;#34; ┆ 2000-12-31 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       |
└──────────┴─────────────────────┴───────┘─────────────────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;63-strextract&#34;&gt;6.3 str.extract()&lt;/h3&gt;
&lt;p&gt;根据负面词典 &lt;code&gt;&#39;躺平|难|毛&#39;&lt;/code&gt; 选出负面词, 结果存储到字段 neg&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bio&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extract_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;躺平|难|毛&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;neg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;shape: (4, 6)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐───────┬
│idx| name ┆    birthday	       | gender┆	    bio        ┆  neg  ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │  ---  ┆
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆  str  ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡═══════╡
│ 1 ┆&amp;#34;张三&amp;#34; ┆ 2009-05-01 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;好好学习，天天向上&amp;#34;|   []  |
│ 2 ┆&amp;#34;李四&amp;#34; ┆ 2005-10-15 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;泰难了&amp;#34;          | [&amp;#34;难&amp;#34;]|
│ 3 ┆&amp;#34;王五&amp;#34; ┆ 2000-12-31 00:00:00 ┆ &amp;#34;男&amp;#34;  │&amp;#34;学习有毛用&amp;#34;       | [&amp;#34;毛&amp;#34;]|
│ 4 ┆&amp;#34;赵六&amp;#34; ┆ 1995-06-15 00:00:00 ┆ &amp;#34;女&amp;#34;  │&amp;#34;躺平ing&amp;#34;         |[&amp;#34;躺平&amp;#34;]|
└──────────┴─────────────────────┴───────┘─────────────────┴───────┴
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一介绍">一、介绍</h2>
<p>Polars 是一个用于操作结构化数据的高性能 DataFrame 库，由于 Polars 是从0开始用Rust编写，紧密与机器结合。其矢量化和列式处理可在现代处理器上实现缓存一致性算法和高性能。如果您经常使用 pandas，那么用起 Polars 会感觉很轻松，可以说是平替 Pandas 最有潜质的包。</p>
<p>Polars 在独立的 TPCH 基准测试中与其他几个解决方案进行了基准测试。该基准测试旨在复制实践中使用的数据整理操作。由于其并行执行引擎、高效算法以及 SIMD（单指令、多数据）矢量化的使用，Polars 轻松胜过其他解决方案。<strong>与pandas相比，它可以实现30倍以上的性能提升</strong>。</p>
<p>Polars 的目标是提供一个闪电般快速的<code>DataFrame</code>库：</p>
<ul>
<li>利用机器上所有可用的内核。</li>
<li>优化查询以减少不必要的工作/内存分配。</li>
<li>处理比可用 RAM 大得多的数据集。</li>
<li>拥有一致且可预测的 API。</li>
<li>具有严格的架构（在运行查询之前应该知道数据类型）。</li>
</ul>
<br>
<p><a href="https://pola-rs.github.io/polars/user-guide/">User guide: https://pola-rs.github.io/polars/user-guide/</a>
<a href="https://pola-rs.github.io/polars/py-polars/html/reference/io.html">API reference: https://pola-rs.github.io/polars/py-polars/html/reference/io.html</a></p>
<br>
<p>打开命令行， 执行  polars 安装命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install &#39;polars[all]&#39;
</code></pre></div><br>
<h2 id="二数据读写">二、数据读写</h2>
<p>Polars 读写数据支持</p>
<ul>
<li>常见的数据文件，如 csv、xlsx、json、parquet ；</li>
<li>云存储，如 S3、Azure Blob, BigQuery；</li>
<li>数据库，如postgres、mysql</li>
</ul>
<p>咱们主要分享常见的代码操作</p>
<h3 id="21-dataframe">2.1 DataFrame</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">polars</span> <span class="k">as</span> <span class="nn">pl</span>
<span class="kn">import</span> <span class="nn">polars.selectors</span> <span class="k">as</span> <span class="nn">cs</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pl</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;idx&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;张三&#34;</span><span class="p">,</span> <span class="s2">&#34;李四&#34;</span><span class="p">,</span> <span class="s2">&#34;王五&#34;</span><span class="p">,</span> <span class="s2">&#34;赵六&#34;</span><span class="p">],</span>
        <span class="s2">&#34;birthday&#34;</span><span class="p">:</span> <span class="p">[</span>
            <span class="n">datetime</span><span class="p">(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
            <span class="n">datetime</span><span class="p">(</span><span class="mi">2005</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
            <span class="n">datetime</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span>
            <span class="n">datetime</span><span class="p">(</span><span class="mi">1995</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
        <span class="p">],</span>
        <span class="s2">&#34;gender&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;男&#34;</span><span class="p">,</span> <span class="s2">&#34;男&#34;</span><span class="p">,</span> <span class="s2">&#34;男&#34;</span><span class="p">,</span> <span class="s2">&#34;女&#34;</span><span class="p">],</span>
        <span class="s2">&#34;bio&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;好好学习，天天向上&#34;</span><span class="p">,</span> 
                <span class="s2">&#34;泰难了&#34;</span><span class="p">,</span> 
                <span class="s2">&#34;学习有毛用&#34;</span><span class="p">,</span> 
                <span class="s2">&#34;躺平ing&#34;</span><span class="p">],</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="c1">#存入csv、excel、json、parquet</span>
<span class="n">df</span><span class="o">.</span><span class="n">write_csv</span><span class="p">(</span><span class="s2">&#34;data.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">write_excel</span><span class="p">(</span><span class="s2">&#34;data.xlsx&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">write_json</span><span class="p">(</span><span class="s2">&#34;data.json&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">write_parquet</span><span class="p">(</span><span class="s2">&#34;data.parquet&#34;</span><span class="p">)</span>


<span class="n">df</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆    birthday	       | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&#34;张三&#34; ┆ 2009-05-01 00:00:00 ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|
│ 2 ┆&#34;李四&#34; ┆ 2005-10-15 00:00:00 ┆ &#34;男&#34;  │&#34;泰难了&#34;          |
│ 3 ┆&#34;王五&#34; ┆ 2000-12-31 00:00:00 ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       |
│ 4 ┆&#34;赵六&#34; ┆ 1995-06-15 00:00:00 ┆ &#34;女&#34;  │&#34;躺平ing&#34;         |
└──────────┴─────────────────────┴───────┘─────────────────┴
</code></pre></div><br>
<h3 id="22-csvexcel">2.2 csv、excel</h3>
<ul>
<li>df.write_csv 存入csv</li>
<li>pl.read_csv  读取csv</li>
<li>df.write_excel 存入xlsx文件</li>
<li>pl.read_excel   读取xlsx</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">df_csv = pl.read_csv(&#39;data.csv&#39;)
df_xlsx = pl.read_excel(&#39;data.xlsx&#39;)

df_csv
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆       birthday	     | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆        str          ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&#34;张三&#34; ┆  &#34;2009-05-01T00:…   ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|
│ 2 ┆&#34;李四&#34; ┆  &#34;2005-10-15T00:…	  ┆ &#34;男&#34;  │&#34;泰难了&#34;          |
│ 3 ┆&#34;王五&#34; ┆  &#34;2000-12-31T00:…   ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       |
│ 4 ┆&#34;赵六&#34; ┆  &#34;1995-06-15T00:…	  ┆ &#34;女&#34;  │&#34;躺平ing&#34;         |
└──────────┴─────────────────────┴───────┘─────────────────┴
</code></pre></div><p>注意哦， 此时的 date 字段数据类型是 str</p>
<br>
<h3 id="23-jsonparquet">2.3 json/parquet</h3>
<ul>
<li>df.write_json</li>
<li>pl.read_json</li>
<li>df.write_parquet</li>
<li>pl.read_parquet</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_json</span> <span class="o">=</span> <span class="n">pl</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="s2">&#34;data.json&#34;</span><span class="p">)</span>
<span class="n">df_parquet</span> <span class="o">=</span> <span class="n">pl</span><span class="o">.</span><span class="n">read_parquet</span><span class="p">(</span><span class="s2">&#34;data.parquet&#34;</span><span class="p">)</span>

<span class="n">df_json</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆    birthday	       | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&#34;张三&#34; ┆ 2009-05-01 00:00:00 ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|
│ 2 ┆&#34;李四&#34; ┆ 2005-10-15 00:00:00 ┆ &#34;男&#34;  │&#34;泰难了&#34;          |
│ 3 ┆&#34;王五&#34; ┆ 2000-12-31 00:00:00 ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       |
│ 4 ┆&#34;赵六&#34; ┆ 1995-06-15 00:00:00 ┆ &#34;女&#34;  │&#34;躺平ing&#34;         |
└──────────┴─────────────────────┴───────┘─────────────────┴
</code></pre></div><p>注意， 使用 df.write_json 或 df.write_parquet 将数据存入 json、parquet， 都可以保留 date 字段的 datetime 类型。而 csv、xlsx 只会将date字段存储为 str 类型。</p>
<p><br><br></p>
<h2 id="三常用表达式">三、常用表达式</h2>
<p><code>Expressions</code>是Polars的核心功能， <code>expressions</code> 既可以解决简单的查询，又可以轻松扩展到复杂的查询。下面是 polars 的基本表达式</p>
<ul>
<li><strong>pl.col</strong> 列选择器</li>
<li><strong>df.select</strong>  结合pl.col， 返回dataframe</li>
<li><strong>selector</strong>  selector选择器</li>
<li><strong>df.filter</strong> 结合pl.col， 返回dataframe</li>
<li><strong>df.with_columns</strong> 结合pl.col， 返回dataframe</li>
<li><strong>df.grouby</strong>  结合pl.col， 返回dataframe</li>
</ul>
<h3 id="31-plcol">3.1 pl.col</h3>
<p>选择某一(多)个字段(列)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;birthday&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">col(&#34;birthday&#34;)
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;birthday&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">col([&#34;name&#34;, &#34;birthday&#34;])
</code></pre></div><br>
<h3 id="32--dfselect">3.2  df.select</h3>
<p>选择 <em><strong>name</strong></em> 和 <em><strong>birthday</strong></em> 两个字段， 实现该功能有多种写法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#df[[&#39;name&#39;, &#39;birthday&#39;]]</span>

<span class="c1">#df.select(</span>
<span class="c1">#    pl.col(&#34;name&#34;), </span>
<span class="c1">#    pl.col(&#34;birthday&#34;), </span>
<span class="c1">#)</span>


<span class="c1">#df.select([&#34;name&#34;, &#34;birthday&#34;])</span>


<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span>
    <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">,</span> <span class="s2">&#34;birthday&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 2)
┌──────┬─────────────────────┬
│ name ┆    birthday	       | 
│------┆ ------------------  ┆ 
│  str ┆    datetime[μs]     ┆ 
╞══════╪═════════════════════╪
│&#34;张三&#34; ┆ 2009-05-01 00:00:00 ┆
│&#34;李四&#34; ┆ 2005-10-15 00:00:00 ┆
│&#34;王五&#34; ┆ 2000-12-31 00:00:00 ┆
│&#34;赵六&#34; ┆ 1995-06-15 00:00:00 ┆
└─────────────────────────────
</code></pre></div><br>
<p>polars 即使选择一个字段， 返回的也是dataframe</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#df[[&#39;name&#39;]]</span>

<span class="c1">#df.select([&#34;name&#34;])</span>

<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 1)
┌──────┬
│ 姓名  ┆
│------┆ 
│  str ┆ 
╞══════╪
│&#34;张三&#34; ┆
│&#34;李四&#34; ┆
│&#34;王五&#34; ┆
│&#34;赵六&#34; ┆
└───────
</code></pre></div><br>
<h3 id="33-dfwith_columns">3.3 df.with_columns</h3>
<p>与 df.select 功能类似，但是df.with_columns可以在选择字段的同时，保留之前的字段</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">with_columns</span><span class="p">(</span>
    <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆       birthday	     | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆        str          ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&#34;张三&#34; ┆  &#34;2009-05-01T00:…   ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|
│ 2 ┆&#34;李四&#34; ┆  &#34;2005-10-15T00:…	  ┆ &#34;男&#34;  │&#34;泰难了&#34;          |
│ 3 ┆&#34;王五&#34; ┆  &#34;2000-12-31T00:…   ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       |
│ 4 ┆&#34;赵六&#34; ┆  &#34;1995-06-15T00:…	  ┆ &#34;女&#34;  │&#34;躺平ing&#34;         |
└──────────┴─────────────────────┴───────┘─────────────────┴
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">with_columns</span><span class="p">(</span>
    <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="s1">&#39;姓名&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 6)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐───────┬
│idx| name ┆    birthday	       | gender┆	    bio        ┆  姓名  ┆ 
│---┆------┆-------------------- ┆  ---  ┆ --------------  │-------┆
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆  str  ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡═══════╡
│ 1 ┆&#34;张三&#34; ┆ 2009-05-01 00:00:00 ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|&#34;张三&#34;  ┆
│ 2 ┆&#34;李四&#34; ┆ 2005-10-15 00:00:00 ┆ &#34;男&#34;  │&#34;泰难了&#34;          |&#34;李四&#34;  ┆
│ 3 ┆&#34;王五&#34; ┆ 2000-12-31 00:00:00 ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       |&#34;王五&#34;  ┆
│ 4 ┆&#34;赵六&#34; ┆ 1995-06-15 00:00:00 ┆ &#34;女&#34;  │&#34;躺平ing&#34;         |&#34;赵六&#34;  ┆ 
└──────────┴─────────────────────┴───────┘─────────────────┴───────┴
</code></pre></div><br>
<h3 id="34--dffilter">3.4  df.filter</h3>
<p>筛选出生日是 00 后的记录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
  <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;birthday&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆    birthday	       | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&#34;张三&#34; ┆ 2009-05-01 00:00:00 ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|
│ 2 ┆&#34;李四&#34; ┆ 2005-10-15 00:00:00 ┆ &#34;男&#34;  │&#34;泰难了&#34;          |
│ 3 ┆&#34;王五&#34; ┆ 2000-12-31 00:00:00 ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       |
└──────────┴─────────────────────┴───────┘─────────────────┴
</code></pre></div><br>
<h3 id="35-dfgroupby">3.5 df.groupby</h3>
<p>按 <em><strong>性别gender</strong></em> 进行分组功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#for gender, gender_df in df.groupby(&#39;gender&#39;):</span>
<span class="k">for</span> <span class="n">gender</span><span class="p">,</span> <span class="n">gender_df</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">)):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">gender</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">gender_df</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">gender_df</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">男 3 &lt;class &#39;polars.dataframe.frame.DataFrame&#39;&gt;
女 1 &lt;class &#39;polars.dataframe.frame.DataFrame&#39;&gt;
</code></pre></div><br>
<p>分别计算男女学生的bio的文本长度的均值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">gender</span><span class="p">,</span> <span class="n">gender_df</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">)):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">gender</span><span class="p">,</span>  <span class="n">gender_df</span><span class="p">[</span><span class="s1">&#39;bio&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">))</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">男 5.666666666666667
女 5.0
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span>
    <span class="n">pl</span><span class="o">.</span><span class="n">count</span><span class="p">(),</span>
    <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;bio&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">len_chars</span><span class="p">()</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="s1">&#39;mean_len&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (2, 3)
┌──────┬───────┬───────────┬
│gender| count ┆ mean_len	 |
│------┆ ----- ┆-----------┆
│  str ┆  u32	 ┆   f64     ┆
╞══════╪═══════╪═══════════╡
│ &#34;女&#34; ┆  1    ┆    5.0    ┆
│ &#34;男&#34; ┆  3    ┆  5.666667 ┆
└──────┴───────┴───────────┘
</code></pre></div><p><br><br></p>
<h2 id="四选择器">四、选择器</h2>
<ul>
<li>cs.integer、cs.string、cs.numeric 、cs.datetime()、cs.temporal() 按照数据格式筛选字段</li>
<li>cs.contains 、cs.matches 使用正则表达式筛选字段</li>
</ul>
<h3 id="41-按数据格式筛选">4.1 按数据格式筛选</h3>
<p>筛选出字段数据类型为字符和数字的字段，返回dataframe</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">polars.selectors</span> <span class="k">as</span> <span class="nn">cs</span>

<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span>
    <span class="n">cs</span><span class="o">.</span><span class="n">integer</span><span class="p">(),</span> <span class="n">cs</span><span class="o">.</span><span class="n">string</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 4)
┌───┬──────┬───────┬─────────────────┐
│idx| name ┆ gender┆	    bio        ┆
│---┆ ---  ┆  ---  ┆ --------------  │
│i64┆ str  ┆  str  ┆      str        ┆
╞═══╪══════╪═══════╡═════════════════╡
│ 1 ┆&#34;张三&#34; ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|
│ 2 ┆&#34;李四&#34; ┆ &#34;男&#34;  │&#34;泰难了&#34;          |
│ 3 ┆&#34;王五&#34; ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       |
│ 4 ┆&#34;赵六&#34; ┆ &#34;女&#34;  │&#34;躺平ing&#34;         |
└──────────┴───────┘─────────────────┴
</code></pre></div><br>
<p>筛选出 datetime 格式的字段，返回 dataframe</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#df.select(cs.temporal())</span>

<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span>
    <span class="n">cs</span><span class="o">.</span><span class="n">datetime</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 1)
┌───────────────────┬
│ birthday	        |
│-------------------┆
│ datetime[μs]      ┆
╞═══════════════════╪
│2009-05-01 00:00:00┆
│2005-10-15 00:00:00┆
│2000-12-31 00:00:00┆
│1995-06-15 00:00:00┆
└───────────────────┴
</code></pre></div><br>
<h3 id="42-cscontains-csmatches">4.2 cs.contains/ cs.matches</h3>
<p>筛选出含 r 字段，返回dataframe</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#筛选出字段名含 r 的字段</span>
<span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span>
    <span class="n">cs</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s1">&#39;r&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 2)
┌───────────────────┬───────┬
│ birthday	        | gender┆
│-------------------┆  ---  ┆
│ datetime[μs]      ┆  str  ┆
╞═══════════════════╪═══════╡
│2009-05-01 00:00:00┆ &#34;男&#34;  │
│2005-10-15 00:00:00┆ &#34;男&#34;  │
│2000-12-31 00:00:00┆ &#34;男&#34;  │
│1995-06-15 00:00:00┆ &#34;女&#34;  │
└───────────────────┴───────┘
</code></pre></div><br>
<p>筛选出含 <em><strong>na</strong></em> 或 <em><strong>io</strong></em> 的字段，返回dataframe</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span>
    <span class="n">cs</span><span class="o">.</span><span class="n">matches</span><span class="p">(</span><span class="s1">&#39;na|io&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 2)
┌─────┬───────────────────┐
│name ┆       bio         ┆
│ --- ┆ ---------------   ┆
│ str ┆  str              ┆
╞═════╪═══════════════════╡
│&#34;张三&#34;┆ &#34;好好学习，天天向上&#34; |
│&#34;李四&#34;┆ &#34;泰难了&#34;           |
│&#34;王五&#34;┆ &#34;学习有毛用&#34;        |
│&#34;赵六&#34;┆ &#34;躺平ing&#34;          |
└─────┴───────────────────┴
</code></pre></div><p><br><br></p>
<h2 id="五逻辑条件">五、逻辑条件</h2>
<p><strong>pl.when(condition).then(result1).otherwise(result2)</strong></p>
<p>当满足condition时， 值为result1； 反之，则result2</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">df.with_columns(
    pl.when(pl.col(&#39;birthday&#39;)&gt;datetime(2000, 1, 1))
    .then(True)
    .otherwise(False)
    .alias(&#39;00后&#39;)
)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐───────┬
│idx| name ┆    birthday	       | gender┆	    bio        ┆ 00后  ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │  ---- ┆
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆  str  ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡═══════╡
│ 1 ┆&#34;张三&#34; ┆ 2009-05-01 00:00:00 ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;| true  |
│ 2 ┆&#34;李四&#34; ┆ 2005-10-15 00:00:00 ┆ &#34;男&#34;  │&#34;泰难了&#34;          | true  |
│ 3 ┆&#34;王五&#34; ┆ 2000-12-31 00:00:00 ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       | true  |
│ 4 ┆&#34;赵六&#34; ┆ 1995-06-15 00:00:00 ┆ &#34;女&#34;  │&#34;躺平ing&#34;         | false |
└──────────┴─────────────────────┴───────┘─────────────────┴───────┴
</code></pre></div><p><br><br></p>
<h2 id="六字符串操作">六、字符串操作</h2>
<ul>
<li><strong>pl.col().str.len_chars()</strong> 字符长度</li>
<li><strong>pl.col().str.contains(pat)</strong> 是否含某字符(符合pat模式)</li>
<li><strong>pl.col().str.extract(pat)</strong> 提取出符合模式的文本</li>
<li><strong>pl.col().str.replace(old_pat, new_pat)</strong>  把old_pat替换为new_pat</li>
<li></li>
</ul>
<h3 id="61-strlen_chars">6.1 str.len_chars()</h3>
<p>计算 bio 的文字长度，计算结果存储到 lenth 字段中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span>
    <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;bio&#39;</span><span class="p">),</span>
    <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;bio&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">len_chars</span><span class="p">()</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="s1">&#39;lenth&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 2)
┌─────────────────┐───────┬
│	      bio       ┆ lenth ┆
│ --------------  │  ---- ┆
│      str        ┆  u32  ┆
╞═════════════════╡═══════╡
│ &#34;好好学习，天天向上&#34;|   9  |
│ &#34;泰难了&#34;          |   3  |
│ &#34;学习有毛用&#34;       |   5  |
│ &#34;躺平ing&#34;         |   5  |
└──────────────────┴───────┴
</code></pre></div><br>
<h3 id="62-strcontains">6.2 str.contains()</h3>
<p>从 bio 中筛选出含 <strong>学习</strong> 字眼的记录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
  <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;bio&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s2">&#34;学习&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 5)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐
│idx| name ┆    birthday	       | gender┆	    bio        ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡
│ 1 ┆&#34;张三&#34; ┆ 2009-05-01 00:00:00 ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|
│ 3 ┆&#34;王五&#34; ┆ 2000-12-31 00:00:00 ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       |
└──────────┴─────────────────────┴───────┘─────────────────┴
</code></pre></div><br>
<h3 id="63-strextract">6.3 str.extract()</h3>
<p>根据负面词典 <code>'躺平|难|毛'</code> 选出负面词, 结果存储到字段 neg</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">with_columns</span><span class="p">(</span>
    <span class="n">pl</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="s1">&#39;bio&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">extract_all</span><span class="p">(</span><span class="s1">&#39;躺平|难|毛&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="s1">&#39;neg&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">shape: (4, 6)
┌───┬──────┬─────────────────────┬───────┬─────────────────┐───────┬
│idx| name ┆    birthday	       | gender┆	    bio        ┆  neg  ┆
│---┆ ---  ┆    -------------    ┆  ---  ┆ --------------  │  ---  ┆
│i64┆ str  ┆    datetime[μs]     ┆  str  ┆      str        ┆  str  ┆
╞═══╪══════╪═════════════════════╪═══════╡═════════════════╡═══════╡
│ 1 ┆&#34;张三&#34; ┆ 2009-05-01 00:00:00 ┆ &#34;男&#34;  │&#34;好好学习，天天向上&#34;|   []  |
│ 2 ┆&#34;李四&#34; ┆ 2005-10-15 00:00:00 ┆ &#34;男&#34;  │&#34;泰难了&#34;          | [&#34;难&#34;]|
│ 3 ┆&#34;王五&#34; ┆ 2000-12-31 00:00:00 ┆ &#34;男&#34;  │&#34;学习有毛用&#34;       | [&#34;毛&#34;]|
│ 4 ┆&#34;赵六&#34; ┆ 1995-06-15 00:00:00 ┆ &#34;女&#34;  │&#34;躺平ing&#34;         |[&#34;躺平&#34;]|
└──────────┴─────────────────────┴───────┘─────────────────┴───────┴
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据集 | 2.49亿条中国工商注册企业信息(23.9更新)</title>
      <link>https://textdata.cn/blog/2023-12-03-china-mainland-corporate-registration-information/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-12-03-china-mainland-corporate-registration-information/</guid>
      <description>341个地市， 2亿条工商注册信息， 网盘压缩文件夹体积17.6G</description>
      <content:encoded><![CDATA[<h2 id="一工商数据集概况">一、工商数据集概况</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">数据来源: 国家企业信用信息公示系统
记录条数: 2.49亿条
文件体积: 160G(解压后)
涵盖日期: 1949.10.1~2023.9.19
</code></pre></div><p><img loading="lazy" src="img/dataset-screen.png" alt=""  />
</p>
<br>
<h3 id="11-字段">1.1 字段</h3>
<p>任意csv文件的字段包括</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">- 企业名称
- 英文名称
- 统一社会信用代码
- 企业类型
- 经营状态
- 成立日期
- 核准日期
- 法定代表人
- 注册咨本
- 实缴资本
- 参保人数
- 公司规模
- 经营范围
- 注册地址
- 营业期限
- 纳税人识别号
- 工商注册号
- 组织机构代码
- 联系电话(脱敏)
- 邮箱(脱敏)
- 纳税人资质
- 曾用名
- 所属省份
- 所属城市
- 所属区县
- 网站链接
- 所属行业
- 登记机关
- 经度
- 纬度
</code></pre></div><p>数据集已经脱敏处理， 避免分享过程出现违规(法)问题。 如果你想获取手机号，商业用途， 就不要联系我了！我没有，有也不卖。</p>
<br>
<h3 id="12-查看文件">1.2 查看文件</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"> [
 &#39;北京.csv.gz&#39;,
 &#39;上海.csv.gz&#39;,
 &#39;南京.csv.gz&#39;,
 ...
 &#39;重庆.csv.gz&#39;,
  ]
</code></pre></div><br>
<h2 id="二实验代码">二、实验代码</h2>
<h3 id="21-读取数据">2.1 读取数据</h3>
<p>不考虑电脑内存容量限制， 读取 石家庄市、长沙市、杭州市。如果电脑内存很小，请先阅读  <a href="https://textdata.cn/blog/2023-11-17-how-handle-mega-csv-that-far-exceed-memory/">推荐 | 如何处理远超电脑内存的csv文件</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">sjz_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;石家庄.csv.gz&#39;</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="s1">&#39;gzip&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">low_memory</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">cs_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;长沙.csv.gz&#39;</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="s1">&#39;gzip&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">low_memory</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">hz_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;杭州.csv.gz&#39;</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="s1">&#39;gzip&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="n">low_memory</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="c1">#随机显示2条记录</span>
<span class="n">sjz_df</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<h3 id="22-记录数">2.2 记录数</h3>
<p>石家庄.csv 企业记录数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">sjz_df</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">2010163
</code></pre></div><br>
<h3 id="23-所含字段">2.3 所含字段</h3>
<p>含有的字段有</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sjz_df</span><span class="o">.</span><span class="n">columns</span>
</code></pre></div><pre><code>Index(['企业组织机构代码', '企业名称', '注册资本', '实缴资本', '纳税人识别号', '法定代表人', '企业状态', '所属行业',
       '企业名称', '英文名称', '统一社会信用代码', '企业类型', '经营状态', '成立日期', '核准日期', '法定代表人',
       '注册咨本', '实缴资本', '参保人数', '公司规模', '经营范围', '注册地址', '营业期限', '纳税人识别号', '工商注册号', '组织机构代码', '联系电话', '邮箱', '纳税人资质', '曾用名', '所属省份', '所属城市', '所属区县', '网站链接', '所属行业', '登记机关', '经度', '纬度'],
      dtype='object')
</code></pre>
<br>
<h3 id="24-日期转换">2.4 日期转换</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sjz_df</span><span class="p">[</span><span class="s1">&#39;成立日期&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">sjz_df</span><span class="p">[</span><span class="s1">&#39;成立日期&#39;</span><span class="p">])</span>

<span class="c1">#石家庄数据集日期范围</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sjz_df</span><span class="p">[</span><span class="s1">&#39;成立日期&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">min</span><span class="p">())</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sjz_df</span><span class="p">[</span><span class="s1">&#39;成立日期&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">())</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1917-01-30 00:00:00
2023-09-19 00:00:00
</code></pre></div><br>
<p>查看成立日期为1917-01-30的信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">datetime</span>

<span class="n">sjz_df</span><span class="p">[</span><span class="n">sjz_df</span><span class="p">[</span><span class="s1">&#39;成立日期&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="mi">1917</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">30</span><span class="p">)]</span><span class="o">.</span><span class="n">to_dict</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;企业组织机构代码&#39;: {913555: &#39;81130000MC0611518K&#39;},
 &#39;企业名称&#39;: {913555: &#39;中国铁路工会石家庄站委员会&#39;},
 &#39;注册资本&#39;: {913555: &#39;276.5万元人民币&#39;},
 &#39;实缴资本&#39;: {913555: &#39;-&#39;},
 &#39;纳税人识别号&#39;: {913555: &#39;81130000MC0611518K&#39;},
 &#39;法定代表人&#39;: {913555: &#39;韩海峰&#39;},
 &#39;企业状态&#39;: {913555: &#39;暂无&#39;},
 &#39;所属行业&#39;: {913555: &#39;公共管理、社会保障和社会组织&#39;},
 &#39;统一社会信用代码&#39;: {913555: &#39;81130000MC0611518K&#39;},
 &#39;工商注册号&#39;: {913555: nan},
 &#39;组织机构代码&#39;: {913555: &#39;-&#39;},
 &#39;登记机关&#39;: {913555: &#39;河北省总工会&#39;},
 &#39;成立日期&#39;: {913555: Timestamp(&#39;1917-01-30 00:00:00&#39;)},
 &#39;核准日期&#39;: {913555: &#39;1949-10-01&#39;},
 &#39;企业类型&#39;: {913555: &#39;-&#39;},
 &#39;经营期限&#39;: {913555: &#39;2019-04-01 至 2022-02-09&#39;},
 &#39;注册所在地&#39;: {913555: nan},
 &#39;地区编码&#39;: {913555: &#39;130105&#39;},
 &#39;详细地址&#39;: {913555: &#39;石家庄市新华区大桥路2号&#39;},
 &#39;经营范围&#39;: {913555: &#39;-&#39;},
 &#39;参保人数&#39;: {913555: 478.0},
 &#39;企业电话&#39;: {913555: nan},
 &#39;企业座机&#39;: {913555: nan},
 &#39;企业邮箱&#39;: {913555: nan}}
</code></pre></div><p><br><br></p>
<h2 id="三可视化">三、可视化</h2>
<p>绘制一个1992-2023年的注册量折线图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">matplotlib_inline</span>
<span class="n">matplotlib_inline</span><span class="o">.</span><span class="n">backend_inline</span><span class="o">.</span><span class="n">set_matplotlib_formats</span><span class="p">(</span><span class="s1">&#39;png&#39;</span><span class="p">,</span> <span class="s1">&#39;svg&#39;</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">scienceplots</span>
<span class="kn">import</span> <span class="nn">platform</span>
<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;no-latex&#39;</span><span class="p">,</span> <span class="s1">&#39;cjk-sc-font&#39;</span><span class="p">])</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>  <span class="c1"># 获取操作系统类型</span>

<span class="k">if</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Windows&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;SimHei&#39;</span><span class="p">}</span>
<span class="k">elif</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Darwin&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">}</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;sans-serif&#39;</span><span class="p">}</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s1">&#39;font&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">font</span><span class="p">)</span>  <span class="c1"># 设置全局字体</span>
    
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">years</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1992</span><span class="p">,</span> <span class="mi">2023</span><span class="p">)]</span>

<span class="n">sjz_df</span><span class="p">[</span><span class="s1">&#39;成立日期&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="n">years</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s1">&#39;石家庄&#39;</span><span class="p">)</span>
<span class="n">cs_df</span><span class="p">[</span><span class="s1">&#39;成立日期&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="n">years</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s1">&#39;长沙&#39;</span><span class="p">)</span>
<span class="n">hz_df</span><span class="p">[</span><span class="s1">&#39;成立日期&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="n">years</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s1">&#39;杭州&#39;</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;工商企业注册量1992-2019年&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;年份&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;注册量&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s1">&#39;upper right&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>    
</code></pre></div><p><img loading="lazy" src="img/output_8_0.png" alt="svg"  />
</p>
<br>
<h2 id="四获取数据">四、获取数据</h2>
<p>内容为付费数据集， 100元， 加微信 372335839， 备注「姓名-学校-专业-工商数据集」</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>2T数据集 | 使用GH Archive获取Github社区用户数据</title>
      <link>https://textdata.cn/blog/2023-11-22-open-dataset-gharchive-org/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-22-open-dataset-gharchive-org/</guid>
      <description>&lt;h2 id=&#34;一github&#34;&gt;一、Github&lt;/h2&gt;
&lt;p&gt;GitHub 是一个具有代表性的开发者社区，帮助了软件的在线开发，吸引了全球超过 3100 万开发者。 GitHub 将每个用户活动视为一个事件，例如新存储库或创建的分支的创建事件。 GitHub 总共支持 42 种事件类型。 典型的用户活动包括创建新存储库、克隆现有存储库、从 GitHub 提取存储库的最新更改以及提交本地所做的更改并将其推送到共享存储库。&lt;/p&gt;
&lt;p&gt;通过 GitHub，开发人员可以相互交流，通过在存储库下发布问题来分配和领取编程任务。 此外，还支持常规的“关注”功能，允许用户接收该平台上任何用户的状态更新通知。 在这些在线社区中，开发者之间的互动主要集中在协作开发和代码共享上，形成了一种特殊的社交网络。&lt;strong&gt;这些特点使得github数据可用于广泛的研究领域，包括但不限于科技创新、组织管理、社交媒体等&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二gh-archive&#34;&gt;二、GH Archive&lt;/h2&gt;
&lt;p&gt;获取github数据，我们最容易想到是利用网站提供的api。 github提供了免费的api接口， 每小时的请求数量是有限制的（匿名用户60次，授权用户5000次）。 这对于想做大数据分析的我们而言， 限制太多， 短时间内难以获得大规模的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GHArchive活动档案自 2011 年 2 月 12 日起提供。&lt;/li&gt;
&lt;li&gt;2011 年 2 月 12 日至 2014 年 12 月 31 日之间的活动档案是通过（现已弃用）时间线 API 记录的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从 2015 年 1 月 1 日开始的活动档案是通过事件 API 记录的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可供下载GH Archive数据集体积远超 2T， 按年度&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;4.6G    2011
13G     2012
26G     2013
57G     2014
75G     2015
112G    2016
145G    2017
177G    2018
254G    2019
420G    2020
503G    2021
657G    2022
很大     2023
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;21--资源网址规律&#34;&gt;2.1  资源网址规律&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;GH Archive&lt;/strong&gt; 是一个开源的一个项目，用于记录公共GitHub时间轴，对其进行存档，并使其易于访问以进行进一步分析。GitHub Archive获取所有的GitHub events信息存储在一组JSON文件中，以便根据需要下载并脱机处理。&lt;strong&gt;GH Archive&lt;/strong&gt;数据是以小时为粒度，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据获取任务&lt;/th&gt;
&lt;th&gt;命令行下载命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;获取2021.11.21下午4点(世界标准时间)的数据&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;wget https://data.gharchive.org/2021-11-21-16.json.gz&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取2021.11.21的数据&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;wget https://data.gharchive.org/2021-11-21-{0..23}.json.gz&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;获取2021.11月的数据&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;wget https://data.gharchive.org/2021-11-{0..30}-{0..23}.json.gz&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;每个下载下来的数据都是&lt;code&gt;.gz&lt;/code&gt;的压缩文件，解压后会得到 &lt;code&gt;.json&lt;/code&gt;文件。 &lt;strong&gt;需要注意， 一个小时的数据大概百兆级别， 如果是整天、正月，json的文件会非常大。 建议按小时为粒度进行数据采集&lt;/strong&gt;。&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;22-构造urls&#34;&gt;2.2 构造urls&lt;/h3&gt;
&lt;p&gt;假设我要批量自动下载数据， 可以用python生成有规律的url列表， 然后用requests方式存储对应的.&lt;code&gt;gz&lt;/code&gt;文件数据。 &lt;strong&gt;假设我们需要采集 2021年11月21日全天的数据， 使用小时粒度存储数据集&lt;/strong&gt;。 &lt;strong&gt;需要注意， 本文教程默认是在jupyter notebook中撰写运行&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2021-11-21&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;urls&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://data.gharchive.org/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.json.gz&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;urls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
&lt;span class=&#34;n&#34;&gt;urls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;
https://data.gharchive.org/2021-11-21-0.json.gz
https://data.gharchive.org/2021-11-21-1.json.gz
https://data.gharchive.org/2021-11-21-2.json.gz

...
...
https://data.gharchive.org/2021-11-21-20.json.gz
https://data.gharchive.org/2021-11-21-21.json.gz
https://data.gharchive.org/2021-11-21-22.json.gz
https://data.gharchive.org/2021-11-21-23.json.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;23--python下载&#34;&gt;2.3  python下载&lt;/h3&gt;
&lt;p&gt;使用requests库下载一个数据集&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;download&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;gf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     
&lt;span class=&#34;c1&#34;&gt;#尝试下载&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://data.gharchive.org/2021-11-21-0.json.gz&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;download&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;批量下载2021年11月21日全天的数据， 使用小时粒度存储数据集。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;download&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三读取操作&#34;&gt;三、读取操作&lt;/h2&gt;
&lt;h3 id=&#34;31-数据解压&#34;&gt;3.1 数据解压&lt;/h3&gt;
&lt;p&gt;得到的 &lt;code&gt;.gz&lt;/code&gt;数据可以使用以下代码进行解压，解压后会得到 &lt;code&gt;.json&lt;/code&gt; 数据文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import os
import gzip

gz_fs = [f for f in os.listdir(&amp;#39;.&amp;#39;) if &amp;#39;.gz&amp;#39; in f]
for gz_f in gz_fs:
    file = gz_f.replace(&amp;#39;.gz&amp;#39;, &amp;#39;&amp;#39;)
    content = gzip.GzipFile(gz_f).read()
    with open(file, &amp;#39;wb&amp;#39;) as jsonf:
        jsonf.write(content)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;32-读取json&#34;&gt;3.2 读取json&lt;/h3&gt;
&lt;p&gt;因为数据文件都很大，一次性读取会很消耗时间， 推荐阅读 &lt;a href=&#34;https://textdata.cn/blog/2023-11-17-how-handle-mega-csv-that-far-exceed-memory/&#34;&gt;&lt;strong&gt;如何处理远超电脑内存的csv文件&lt;/strong&gt;&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pd.read_json(jsonf, nrows, lines, chunksize)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jsonf: 文件路径&lt;/li&gt;
&lt;li&gt;nrows: 读取前nrows行&lt;/li&gt;
&lt;li&gt;lines: 以行的方式读取，默认False&lt;/li&gt;
&lt;li&gt;chunksize: 分批次读取，每批次的规模是chunksize行&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;321-读取前n行&#34;&gt;3.2.1 读取前n行&lt;/h3&gt;
&lt;p&gt;使用pandas读取 &lt;code&gt;2021-11-21-0.json&lt;/code&gt;  &lt;strong&gt;前5条数据， 了解下数据集的字段&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2021-11-21-0.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrows&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;322-查看折叠的字段&#34;&gt;3.2.2 查看折叠的字段&lt;/h3&gt;
&lt;p&gt;乍一看好像没啥数据，其实都折叠在字段之中。以actor为例，我们看看内部会折叠哪些字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;actor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;array([
{&amp;#39;id&amp;#39;: 5355937, 
&amp;#39;login&amp;#39;: &amp;#39;austinkregel&amp;#39;, 
&amp;#39;display_login&amp;#39;: &amp;#39;austinkregel&amp;#39;, 
&amp;#39;gravatar_id&amp;#39;: &amp;#39;&amp;#39;, 
&amp;#39;url&amp;#39;: &amp;#39;https://api.github.com/users/austinkregel&amp;#39;, 
&amp;#39;avatar_url&amp;#39;: &amp;#39;https://avatars.githubusercontent.com/u/5355937?&amp;#39;},

{&amp;#39;id&amp;#39;: 89859977, 
&amp;#39;login&amp;#39;: &amp;#39;Nicoperez19&amp;#39;, 
&amp;#39;display_login&amp;#39;: &amp;#39;Nicoperez19&amp;#39;, 
&amp;#39;gravatar_id&amp;#39;: &amp;#39;&amp;#39;, 
&amp;#39;url&amp;#39;: &amp;#39;https://api.github.com/users/Nicoperez19&amp;#39;, 
&amp;#39;avatar_url&amp;#39;: &amp;#39;https://avatars.githubusercontent.com/u/89859977?&amp;#39;},

{&amp;#39;id&amp;#39;: 46858494, 
&amp;#39;login&amp;#39;: &amp;#39;kapone3047&amp;#39;, 
&amp;#39;display_login&amp;#39;: &amp;#39;kapone3047&amp;#39;, 
&amp;#39;gravatar_id&amp;#39;: &amp;#39;&amp;#39;, 
&amp;#39;url&amp;#39;: &amp;#39;https://api.github.com/users/kapone3047&amp;#39;, 
&amp;#39;avatar_url&amp;#39;: &amp;#39;https://avatars.githubusercontent.com/u/46858494?&amp;#39;},

       
 {&amp;#39;id&amp;#39;: 1843851, 
 &amp;#39;login&amp;#39;: &amp;#39;DerekEdwards&amp;#39;, 
 &amp;#39;display_login&amp;#39;: &amp;#39;DerekEdwards&amp;#39;, 
 &amp;#39;gravatar_id&amp;#39;: &amp;#39;&amp;#39;, 
 &amp;#39;url&amp;#39;: &amp;#39;https://api.github.com/users/DerekEdwards&amp;#39;, 
 &amp;#39;avatar_url&amp;#39;: &amp;#39;https://avatars.githubusercontent.com/u/1843851?&amp;#39;},
 
{&amp;#39;id&amp;#39;: 94767098, 
&amp;#39;login&amp;#39;: &amp;#39;hectorapweb&amp;#39;, 
&amp;#39;display_login&amp;#39;: &amp;#39;hectorapweb&amp;#39;, 
&amp;#39;gravatar_id&amp;#39;: &amp;#39;&amp;#39;, 
&amp;#39;url&amp;#39;: &amp;#39;https://api.github.com/users/hectorapweb&amp;#39;, 
&amp;#39;avatar_url&amp;#39;: &amp;#39;https://avatars.githubusercontent.com/u/94767098?&amp;#39;}

],dtype=object)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;323-恢复一个折叠的信息&#34;&gt;3.2.3 恢复一个折叠的信息&lt;/h3&gt;
&lt;p&gt;以actor为例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;df[&amp;#39;actor&amp;#39;].apply(lambda x: pd.Series(x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;324-合并结果&#34;&gt;3.2.4 合并结果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;_ = df[&amp;#39;actor&amp;#39;].apply(lambda x: pd.Series(x))
df = pd.concat([df, _], axis=0)
df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df3.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;更新后的df含有的字段有&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;df.columns
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Index([&amp;#39;id&amp;#39;, &amp;#39;type&amp;#39;, &amp;#39;actor&amp;#39;, &amp;#39;repo&amp;#39;, &amp;#39;payload&amp;#39;, &amp;#39;public&amp;#39;, &amp;#39;created_at&amp;#39;, &amp;#39;org&amp;#39;,
       &amp;#39;id&amp;#39;, &amp;#39;login&amp;#39;, &amp;#39;display_login&amp;#39;, &amp;#39;gravatar_id&amp;#39;, &amp;#39;url&amp;#39;, &amp;#39;avatar_url&amp;#39;],
      dtype=&amp;#39;object&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四相关数据集&#34;&gt;四、相关数据集&lt;/h2&gt;
&lt;h3 id=&#34;github-1000万用户&#34;&gt;Github 1000万用户&lt;/h3&gt;
&lt;p&gt;Gong, Q., Zhang, J., Chen, Y., Li, Q., &lt;a href=&#34;https://research.aalto.fi/en/persons/yu-xiao&#34;&gt;Xiao, Y.&lt;/a&gt;, Wang, X. &amp;amp; Hui, P., Nov 2019, &lt;em&gt;CIKM &amp;lsquo;19:Proceedings of the 28th ACM International Conference on Information and Knowledge Management.&lt;/em&gt; &lt;a href=&#34;https://research.aalto.fi/en/datasets/a-representative-user-centric-dataset-of-10-million-github-develo#&#34;&gt;ACM&lt;/a&gt;, p. 1251-1260 (ACM International Conference on Information &amp;amp; Knowledge Management).&lt;/p&gt;
&lt;p&gt;使用 GitHub API，我们构建了超过 1000 万 GitHub 用户的无偏见数据集。该数据收集于2018年7月20日至8月27日期间，涵盖10,649,574名用户、118,602,740次提交和20,999,258个存储库。每个数据条目都以 JSON 格式存储，代表一个 GitHub 用户，并包含用户个人资料页面中的描述信息、她的提交活动以及创建/分叉的公共存储库的信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据集下载地址&lt;/strong&gt; &lt;a href=&#34;https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T6ZRJT&#34;&gt;https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T6ZRJT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一github">一、Github</h2>
<p>GitHub 是一个具有代表性的开发者社区，帮助了软件的在线开发，吸引了全球超过 3100 万开发者。 GitHub 将每个用户活动视为一个事件，例如新存储库或创建的分支的创建事件。 GitHub 总共支持 42 种事件类型。 典型的用户活动包括创建新存储库、克隆现有存储库、从 GitHub 提取存储库的最新更改以及提交本地所做的更改并将其推送到共享存储库。</p>
<p>通过 GitHub，开发人员可以相互交流，通过在存储库下发布问题来分配和领取编程任务。 此外，还支持常规的“关注”功能，允许用户接收该平台上任何用户的状态更新通知。 在这些在线社区中，开发者之间的互动主要集中在协作开发和代码共享上，形成了一种特殊的社交网络。<strong>这些特点使得github数据可用于广泛的研究领域，包括但不限于科技创新、组织管理、社交媒体等</strong>。</p>
<p><br><br></p>
<h2 id="二gh-archive">二、GH Archive</h2>
<p>获取github数据，我们最容易想到是利用网站提供的api。 github提供了免费的api接口， 每小时的请求数量是有限制的（匿名用户60次，授权用户5000次）。 这对于想做大数据分析的我们而言， 限制太多， 短时间内难以获得大规模的数据。</p>
<ul>
<li>GHArchive活动档案自 2011 年 2 月 12 日起提供。</li>
<li>2011 年 2 月 12 日至 2014 年 12 月 31 日之间的活动档案是通过（现已弃用）时间线 API 记录的。</li>
<li><strong>从 2015 年 1 月 1 日开始的活动档案是通过事件 API 记录的</strong>。</li>
</ul>
<p>可供下载GH Archive数据集体积远超 2T， 按年度</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">4.6G    2011
13G     2012
26G     2013
57G     2014
75G     2015
112G    2016
145G    2017
177G    2018
254G    2019
420G    2020
503G    2021
657G    2022
很大     2023
</code></pre></div><br>
<h3 id="21--资源网址规律">2.1  资源网址规律</h3>
<p><strong>GH Archive</strong> 是一个开源的一个项目，用于记录公共GitHub时间轴，对其进行存档，并使其易于访问以进行进一步分析。GitHub Archive获取所有的GitHub events信息存储在一组JSON文件中，以便根据需要下载并脱机处理。<strong>GH Archive</strong>数据是以小时为粒度，</p>
<table>
<thead>
<tr>
<th>数据获取任务</th>
<th>命令行下载命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>获取2021.11.21下午4点(世界标准时间)的数据</td>
<td><strong><code>wget https://data.gharchive.org/2021-11-21-16.json.gz</code></strong></td>
</tr>
<tr>
<td>获取2021.11.21的数据</td>
<td><strong><code>wget https://data.gharchive.org/2021-11-21-{0..23}.json.gz</code></strong></td>
</tr>
<tr>
<td>获取2021.11月的数据</td>
<td><strong><code>wget https://data.gharchive.org/2021-11-{0..30}-{0..23}.json.gz</code></strong></td>
</tr>
</tbody>
</table>
<p>每个下载下来的数据都是<code>.gz</code>的压缩文件，解压后会得到 <code>.json</code>文件。 <strong>需要注意， 一个小时的数据大概百兆级别， 如果是整天、正月，json的文件会非常大。 建议按小时为粒度进行数据采集</strong>。</p>
<br>
<h3 id="22-构造urls">2.2 构造urls</h3>
<p>假设我要批量自动下载数据， 可以用python生成有规律的url列表， 然后用requests方式存储对应的.<code>gz</code>文件数据。 <strong>假设我们需要采集 2021年11月21日全天的数据， 使用小时粒度存储数据集</strong>。 <strong>需要注意， 本文教程默认是在jupyter notebook中撰写运行</strong>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">date</span> <span class="o">=</span> <span class="s1">&#39;2021-11-21&#39;</span>
<span class="n">urls</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">hour</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;https://data.gharchive.org/</span><span class="si">{</span><span class="n">date</span><span class="si">}</span><span class="s1">-</span><span class="si">{</span><span class="n">hour</span><span class="si">}</span><span class="s1">.json.gz&#39;</span>
    <span class="n">urls</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    
<span class="n">urls</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
https://data.gharchive.org/2021-11-21-0.json.gz
https://data.gharchive.org/2021-11-21-1.json.gz
https://data.gharchive.org/2021-11-21-2.json.gz

...
...
https://data.gharchive.org/2021-11-21-20.json.gz
https://data.gharchive.org/2021-11-21-21.json.gz
https://data.gharchive.org/2021-11-21-22.json.gz
https://data.gharchive.org/2021-11-21-23.json.gz
</code></pre></div><br>
<h3 id="23--python下载">2.3  python下载</h3>
<p>使用requests库下载一个数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>

<span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="n">file</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">gf</span><span class="p">:</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
        <span class="n">gf</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
     
<span class="c1">#尝试下载</span>
<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://data.gharchive.org/2021-11-21-0.json.gz&#39;</span>
<span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</code></pre></div><br>
<p>批量下载2021年11月21日全天的数据， 使用小时粒度存储数据集。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
    <span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="三读取操作">三、读取操作</h2>
<h3 id="31-数据解压">3.1 数据解压</h3>
<p>得到的 <code>.gz</code>数据可以使用以下代码进行解压，解压后会得到 <code>.json</code> 数据文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import os
import gzip

gz_fs = [f for f in os.listdir(&#39;.&#39;) if &#39;.gz&#39; in f]
for gz_f in gz_fs:
    file = gz_f.replace(&#39;.gz&#39;, &#39;&#39;)
    content = gzip.GzipFile(gz_f).read()
    with open(file, &#39;wb&#39;) as jsonf:
        jsonf.write(content)
</code></pre></div><br>
<h3 id="32-读取json">3.2 读取json</h3>
<p>因为数据文件都很大，一次性读取会很消耗时间， 推荐阅读 <a href="https://textdata.cn/blog/2023-11-17-how-handle-mega-csv-that-far-exceed-memory/"><strong>如何处理远超电脑内存的csv文件</strong></a> 。</p>
<p><strong>pd.read_json(jsonf, nrows, lines, chunksize)</strong></p>
<ul>
<li>jsonf: 文件路径</li>
<li>nrows: 读取前nrows行</li>
<li>lines: 以行的方式读取，默认False</li>
<li>chunksize: 分批次读取，每批次的规模是chunksize行</li>
</ul>
<br>
<h3 id="321-读取前n行">3.2.1 读取前n行</h3>
<p>使用pandas读取 <code>2021-11-21-0.json</code>  <strong>前5条数据， 了解下数据集的字段</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="s1">&#39;2021-11-21-0.json&#39;</span><span class="p">,</span> <span class="n">lines</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<h3 id="322-查看折叠的字段">3.2.2 查看折叠的字段</h3>
<p>乍一看好像没啥数据，其实都折叠在字段之中。以actor为例，我们看看内部会折叠哪些字段</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;actor&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([
{&#39;id&#39;: 5355937, 
&#39;login&#39;: &#39;austinkregel&#39;, 
&#39;display_login&#39;: &#39;austinkregel&#39;, 
&#39;gravatar_id&#39;: &#39;&#39;, 
&#39;url&#39;: &#39;https://api.github.com/users/austinkregel&#39;, 
&#39;avatar_url&#39;: &#39;https://avatars.githubusercontent.com/u/5355937?&#39;},

{&#39;id&#39;: 89859977, 
&#39;login&#39;: &#39;Nicoperez19&#39;, 
&#39;display_login&#39;: &#39;Nicoperez19&#39;, 
&#39;gravatar_id&#39;: &#39;&#39;, 
&#39;url&#39;: &#39;https://api.github.com/users/Nicoperez19&#39;, 
&#39;avatar_url&#39;: &#39;https://avatars.githubusercontent.com/u/89859977?&#39;},

{&#39;id&#39;: 46858494, 
&#39;login&#39;: &#39;kapone3047&#39;, 
&#39;display_login&#39;: &#39;kapone3047&#39;, 
&#39;gravatar_id&#39;: &#39;&#39;, 
&#39;url&#39;: &#39;https://api.github.com/users/kapone3047&#39;, 
&#39;avatar_url&#39;: &#39;https://avatars.githubusercontent.com/u/46858494?&#39;},

       
 {&#39;id&#39;: 1843851, 
 &#39;login&#39;: &#39;DerekEdwards&#39;, 
 &#39;display_login&#39;: &#39;DerekEdwards&#39;, 
 &#39;gravatar_id&#39;: &#39;&#39;, 
 &#39;url&#39;: &#39;https://api.github.com/users/DerekEdwards&#39;, 
 &#39;avatar_url&#39;: &#39;https://avatars.githubusercontent.com/u/1843851?&#39;},
 
{&#39;id&#39;: 94767098, 
&#39;login&#39;: &#39;hectorapweb&#39;, 
&#39;display_login&#39;: &#39;hectorapweb&#39;, 
&#39;gravatar_id&#39;: &#39;&#39;, 
&#39;url&#39;: &#39;https://api.github.com/users/hectorapweb&#39;, 
&#39;avatar_url&#39;: &#39;https://avatars.githubusercontent.com/u/94767098?&#39;}

],dtype=object)
</code></pre></div><br>
<h3 id="323-恢复一个折叠的信息">3.2.3 恢复一个折叠的信息</h3>
<p>以actor为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">df[&#39;actor&#39;].apply(lambda x: pd.Series(x))
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<h3 id="324-合并结果">3.2.4 合并结果</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">_ = df[&#39;actor&#39;].apply(lambda x: pd.Series(x))
df = pd.concat([df, _], axis=0)
df
</code></pre></div><p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<br>
<p>更新后的df含有的字段有</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">df.columns
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Index([&#39;id&#39;, &#39;type&#39;, &#39;actor&#39;, &#39;repo&#39;, &#39;payload&#39;, &#39;public&#39;, &#39;created_at&#39;, &#39;org&#39;,
       &#39;id&#39;, &#39;login&#39;, &#39;display_login&#39;, &#39;gravatar_id&#39;, &#39;url&#39;, &#39;avatar_url&#39;],
      dtype=&#39;object&#39;)
</code></pre></div><p><br><br></p>
<h2 id="四相关数据集">四、相关数据集</h2>
<h3 id="github-1000万用户">Github 1000万用户</h3>
<p>Gong, Q., Zhang, J., Chen, Y., Li, Q., <a href="https://research.aalto.fi/en/persons/yu-xiao">Xiao, Y.</a>, Wang, X. &amp; Hui, P., Nov 2019, <em>CIKM &lsquo;19:Proceedings of the 28th ACM International Conference on Information and Knowledge Management.</em> <a href="https://research.aalto.fi/en/datasets/a-representative-user-centric-dataset-of-10-million-github-develo#">ACM</a>, p. 1251-1260 (ACM International Conference on Information &amp; Knowledge Management).</p>
<p>使用 GitHub API，我们构建了超过 1000 万 GitHub 用户的无偏见数据集。该数据收集于2018年7月20日至8月27日期间，涵盖10,649,574名用户、118,602,740次提交和20,999,258个存储库。每个数据条目都以 JSON 格式存储，代表一个 GitHub 用户，并包含用户个人资料页面中的描述信息、她的提交活动以及创建/分叉的公共存储库的信息。</p>
<p><strong>数据集下载地址</strong> <a href="https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T6ZRJT">https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T6ZRJT</a></p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>54G数据集 | 1000万个 Github 用户数据</title>
      <link>https://textdata.cn/blog/2023-11-22-1000w-github-developer-dataset/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-22-1000w-github-developer-dataset/</guid>
      <description>&lt;h2 id=&#34;一github&#34;&gt;一、Github&lt;/h2&gt;
&lt;p&gt;GitHub 是一个具有代表性的开发者社区，帮助了软件的在线开发，吸引了全球超过 1亿开发者。 GitHub 将每个用户活动视为一个事件，例如新存储库或创建的分支的创建事件。 GitHub 总共支持 42 种事件类型。 典型的用户活动包括创建新存储库、克隆现有存储库、从 GitHub 提取存储库的最新更改以及提交本地所做的更改并将其推送到共享存储库。&lt;/p&gt;
&lt;p&gt;通过 GitHub，开发人员可以相互交流，通过在存储库下发布问题来分配和领取编程任务。 此外，还支持常规的“关注”功能，允许用户接收该平台上任何用户的状态更新通知。 在这些在线社区中，开发者之间的互动主要集中在协作开发和代码共享上，形成了一种特殊的社交网络。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二1000万github用户数据集&#34;&gt;二、1000万Github用户数据集&lt;/h2&gt;
&lt;h3 id=&#34;21-数据集概况&#34;&gt;2.1 数据集概况&lt;/h3&gt;
&lt;p&gt;每个 GitHub 用户都有一个数字用户 ID，该 ID 按升序分配。 用户注册越早，其用户 ID 就越小。 该研究中只考虑2017年12月31日之前注册的GitHub用户。&lt;strong&gt;为了获得无偏的用户数据集，使用基于ID的随机采样来实现数据爬取&lt;/strong&gt;。 请注意，某些数字 ID 没有对应的用户帐户，爬虫会跳过这些 ID。 对于每个用户，使用 GitHub users API (&lt;code&gt;https://api.github.com/user/ID&lt;/code&gt;) 来访问她的描述信息, 爬取了&lt;strong&gt;2018.6.20 ~ 2018.8.27&lt;/strong&gt;的数据。整个数据集压缩文件夹体积 5.7 G， 解压后会得到54G的 &lt;strong&gt;data.json&lt;/strong&gt; 。数据集下载地址&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T6ZRJT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;21-文献引用&#34;&gt;2.1 文献引用&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T6ZRJT&#34;&gt;该数据集&lt;/a&gt;是网上公开，如使用该数据集引用格式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Qingyuan Gong, Jiayun Zhang, Yang Chen, Qi Li, Yu Xiao, Xin Wang, Pan Hui. Detecting Malicious Accounts in Online Developer Communities Using Deep Learning. Proc. of the 28th ACM International Conference on Information and Knowledge Management (CIKM&amp;#39;19), Beijing, China, Nov. 2019.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;三数据探索&#34;&gt;三、数据探索&lt;/h2&gt;
&lt;p&gt;54G的data.json太大， 我读取了前2000行，存储到了&lt;a href=&#34;mini_data.pkl&#34;&gt;mini_data.pkl&lt;/a&gt;文件中。&lt;/p&gt;
&lt;h3 id=&#34;31-读取json&#34;&gt;3.1 读取json&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import pandas as pd

#54G的data.json太大， 我读取了前2000行
df = pd.read_json(&amp;#39;data.json&amp;#39;, nrows=2000, lines=True)
df.head()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;字段有22个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;hirable
public_repos
is_suspicious
updated_at
id
blog
followers
location
follower_list
type
commit_list
bio
commits
company
following_list
public_gists
name
created_at
email
following
login
repo_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;32-前2000条记录保存为pkl&#34;&gt;3.2 前2000条记录保存为pkl&lt;/h3&gt;
&lt;p&gt;为了不浪费你的时间，可以先下载 &lt;a href=&#34;mini_data.pkl&#34;&gt;&lt;strong&gt;mini_data.pkl&lt;/strong&gt;&lt;/a&gt;, 里面存储了data.json中前 2000 条数据。 你可以自己检查下这个数据，如果觉得有用，再去自行下载下载5.4G的数据集压缩文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pickle&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrows&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mini_data.pkl&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pickle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;33-读取pkl为df&#34;&gt;3.3 读取pkl为df&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pickle&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pickle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mini_data.pkl&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;2000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一github">一、Github</h2>
<p>GitHub 是一个具有代表性的开发者社区，帮助了软件的在线开发，吸引了全球超过 1亿开发者。 GitHub 将每个用户活动视为一个事件，例如新存储库或创建的分支的创建事件。 GitHub 总共支持 42 种事件类型。 典型的用户活动包括创建新存储库、克隆现有存储库、从 GitHub 提取存储库的最新更改以及提交本地所做的更改并将其推送到共享存储库。</p>
<p>通过 GitHub，开发人员可以相互交流，通过在存储库下发布问题来分配和领取编程任务。 此外，还支持常规的“关注”功能，允许用户接收该平台上任何用户的状态更新通知。 在这些在线社区中，开发者之间的互动主要集中在协作开发和代码共享上，形成了一种特殊的社交网络。</p>
<p><br><br></p>
<h2 id="二1000万github用户数据集">二、1000万Github用户数据集</h2>
<h3 id="21-数据集概况">2.1 数据集概况</h3>
<p>每个 GitHub 用户都有一个数字用户 ID，该 ID 按升序分配。 用户注册越早，其用户 ID 就越小。 该研究中只考虑2017年12月31日之前注册的GitHub用户。<strong>为了获得无偏的用户数据集，使用基于ID的随机采样来实现数据爬取</strong>。 请注意，某些数字 ID 没有对应的用户帐户，爬虫会跳过这些 ID。 对于每个用户，使用 GitHub users API (<code>https://api.github.com/user/ID</code>) 来访问她的描述信息, 爬取了<strong>2018.6.20 ~ 2018.8.27</strong>的数据。整个数据集压缩文件夹体积 5.7 G， 解压后会得到54G的 <strong>data.json</strong> 。数据集下载地址</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T6ZRJT
</code></pre></div><br>
<h3 id="21-文献引用">2.1 文献引用</h3>
<p><a href="https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/T6ZRJT">该数据集</a>是网上公开，如使用该数据集引用格式:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Qingyuan Gong, Jiayun Zhang, Yang Chen, Qi Li, Yu Xiao, Xin Wang, Pan Hui. Detecting Malicious Accounts in Online Developer Communities Using Deep Learning. Proc. of the 28th ACM International Conference on Information and Knowledge Management (CIKM&#39;19), Beijing, China, Nov. 2019.
</code></pre></div><br>
<br>
<h2 id="三数据探索">三、数据探索</h2>
<p>54G的data.json太大， 我读取了前2000行，存储到了<a href="mini_data.pkl">mini_data.pkl</a>文件中。</p>
<h3 id="31-读取json">3.1 读取json</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import pandas as pd

#54G的data.json太大， 我读取了前2000行
df = pd.read_json(&#39;data.json&#39;, nrows=2000, lines=True)
df.head()
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<p>字段有22个</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">hirable
public_repos
is_suspicious
updated_at
id
blog
followers
location
follower_list
type
commit_list
bio
commits
company
following_list
public_gists
name
created_at
email
following
login
repo_list
</code></pre></div><br>
<h3 id="32-前2000条记录保存为pkl">3.2 前2000条记录保存为pkl</h3>
<p>为了不浪费你的时间，可以先下载 <a href="mini_data.pkl"><strong>mini_data.pkl</strong></a>, 里面存储了data.json中前 2000 条数据。 你可以自己检查下这个数据，如果觉得有用，再去自行下载下载5.4G的数据集压缩文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pickle</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="s1">&#39;data.json&#39;</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">2000</span><span class="p">,</span> <span class="n">lines</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;mini_data.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</code></pre></div><br>
<h3 id="33-读取pkl为df">3.3 读取pkl为df</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pickle</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;mini_data.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">))</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">2000
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>pandarallel库 | 多核运行提升pandas速度</title>
      <link>https://textdata.cn/blog/2023-11-19-pandarallel-speed-up-pandas/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-19-pandarallel-speed-up-pandas/</guid>
      <description>&lt;p&gt;只需更改一行代码， &lt;strong&gt;pandarallel库&lt;/strong&gt; 就可以充分利用CPU性能，并行化所有 Pandas 操作，加速你的数据处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pandarallel&lt;/strong&gt; 还提供漂亮的进度条（在笔记本和终端上可用）以 大致了解要完成的剩余计算量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有并行化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/progress_apply.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并行化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/progress_parallel_apply.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;可以看到，使用并行化后，处理速度快了很多。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;一性能对比&#34;&gt;一、性能对比&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cpu有n个核，大概并行化会提升大概n倍&lt;/strong&gt;。以下是使用和不使用 Pandaral·lel 的比较基准。实验环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**操作系统：**Linux Ubuntu 16.04&lt;/li&gt;
&lt;li&gt;**硬件：**Intel Core i7 @ 3.40 GHz - 4 核&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/standard_vs_parallel_4_cores.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;并行操作的运行速度大约是标准操作的 4 倍（除了标准操作的运行速度仅快 3.2 倍）。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二特性&#34;&gt;二、特性&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;pandarallel&lt;/strong&gt; 目前实现以下 API：&lt;strong&gt;pandas&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;没有并行化&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;并行化&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.parallel_apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.applymap(func)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.parallel_applymap(func)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.groupby(args).apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.groupby(args).parallel_apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.groupby(args1).col_name.rolling(args2).apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.groupby(args1).col_name.rolling(args2).parallel_apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.groupby(args1).col_name.expanding(args2).apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;df.groupby(args1).col_name.expanding(args2).parallel_apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;series.map(func)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;series.parallel_map(func)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;series.apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;series.parallel_apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;series.rolling(args).apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;series.rolling(args).parallel_apply(func)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三语法&#34;&gt;三、语法&lt;/h2&gt;
&lt;p&gt;Mac和linux，没有什么特殊的用法， 但在 &lt;strong&gt;Windows&lt;/strong&gt; 上， 您掉用的函数必须是&lt;strong&gt;自包含&lt;/strong&gt;的，并且不应依赖于外部资源。为了降低大家的记忆压力， 咱们假设所有系统，都要满足自包含且不依赖外部资源。&lt;/p&gt;
&lt;h3 id=&#34;31-安装&#34;&gt;3.1 安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip install pandarallel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;32-错误用法&#34;&gt;3.2 错误用法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandarallel&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pandarallel&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pandarallel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;


&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# func不能依赖外部资源， math定义在函数体func之外， 会出问题的！&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  
  
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;实验的csv文件路径&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;某个数值字段&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parallel_apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;33-正确用法&#34;&gt;3.3 正确用法&lt;/h3&gt;
&lt;p&gt;定义好计算函数func， 标准的pandas的计算是在pd.Series基础上掉用apply方法，即 pd.Series.apply(func)。&lt;/p&gt;
&lt;p&gt;而pandarallel稍微修改了方法名， pd.Series.parallel_apply(func)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandarallel&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pandarallel&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pandarallel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 在函数体func内导入math，掉用math， okay!&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  
  
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;实验的csv文件路径&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;某个数值字段&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parallel_apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四实验&#34;&gt;四、实验&lt;/h2&gt;
&lt;p&gt;对一个xlsx文件的text字段进行词频统计， 结果保存到新字段wordCount中。&lt;/p&gt;
&lt;h3 id=&#34;41-读取数据&#34;&gt;4.1 读取数据&lt;/h3&gt;
&lt;p&gt;mda01-22.xlsx数据有55439条记录， 体积573M。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mda01-22.xlsx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;55439
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;42-没有并行&#34;&gt;4.2 没有并行&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;%%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;jieba&lt;/span&gt;
    
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;word_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jieba&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lcut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mda01-22.xlsx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wordCount&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;CPU times: user 11min 56s, sys: 10.5 s, total: 12min 7s
Wall time: 12min 7s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;43-并行化&#34;&gt;4.3 并行化&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;%%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandarallel&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pandarallel&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pandarallel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;parallel_word_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;jieba&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jieba&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lcut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mda01-22.xlsx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wordCount&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parallel_apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;INFO: Pandarallel will run on 12 workers.
INFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.
CPU times: user 12.4 s, sys: 1.41 s, total: 13.8 s
Wall time: 2min 40s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Wow, 运行总时间从  12min 7s 降低 2min 40s 。&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;44-使用场景&#34;&gt;4.4 使用场景&lt;/h3&gt;
&lt;p&gt;并行化是有代价的（实例化新进程、通过共享内存发送数据、 &amp;hellip;），只有在并行化的计算量大时才有效足够高。对于小规模的数据，使用并行化并不总是值得的。经过测试， 找了一个61kb的xlsx， 结果并行化反而还慢了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pandarallel&lt;/strong&gt; 通过使用计算机cpu所有内核来绕过此限制。 但代价是，需要两倍于标准操作的内存占用。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p>只需更改一行代码， <strong>pandarallel库</strong> 就可以充分利用CPU性能，并行化所有 Pandas 操作，加速你的数据处理。</p>
<p><strong>pandarallel</strong> 还提供漂亮的进度条（在笔记本和终端上可用）以 大致了解要完成的剩余计算量。</p>
<p><strong>没有并行化</strong></p>
<p><img loading="lazy" src="img/progress_apply.gif" alt=""  />
</p>
<p><strong>并行化</strong></p>
<p><img loading="lazy" src="img/progress_parallel_apply.gif" alt=""  />
</p>
<p>可以看到，使用并行化后，处理速度快了很多。</p>
<br>
<h2 id="一性能对比">一、性能对比</h2>
<p><strong>cpu有n个核，大概并行化会提升大概n倍</strong>。以下是使用和不使用 Pandaral·lel 的比较基准。实验环境：</p>
<ul>
<li>**操作系统：**Linux Ubuntu 16.04</li>
<li>**硬件：**Intel Core i7 @ 3.40 GHz - 4 核</li>
</ul>
<p><img loading="lazy" src="img/standard_vs_parallel_4_cores.png" alt=""  />
</p>
<p>并行操作的运行速度大约是标准操作的 4 倍（除了标准操作的运行速度仅快 3.2 倍）。</p>
<p><br><br></p>
<h2 id="二特性">二、特性</h2>
<p><strong>pandarallel</strong> 目前实现以下 API：<strong>pandas</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>没有并行化</strong></th>
<th style="text-align:left"><strong>并行化</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>df.apply(func)</code></td>
<td style="text-align:left"><code>df.parallel_apply(func)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>df.applymap(func)</code></td>
<td style="text-align:left"><code>df.parallel_applymap(func)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>df.groupby(args).apply(func)</code></td>
<td style="text-align:left"><code>df.groupby(args).parallel_apply(func)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>df.groupby(args1).col_name.rolling(args2).apply(func)</code></td>
<td style="text-align:left"><code>df.groupby(args1).col_name.rolling(args2).parallel_apply(func)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>df.groupby(args1).col_name.expanding(args2).apply(func)</code></td>
<td style="text-align:left"><code>df.groupby(args1).col_name.expanding(args2).parallel_apply(func)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>series.map(func)</code></td>
<td style="text-align:left"><code>series.parallel_map(func)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>series.apply(func)</code></td>
<td style="text-align:left"><code>series.parallel_apply(func)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>series.rolling(args).apply(func)</code></td>
<td style="text-align:left"><code>series.rolling(args).parallel_apply(func)</code></td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h2 id="三语法">三、语法</h2>
<p>Mac和linux，没有什么特殊的用法， 但在 <strong>Windows</strong> 上， 您掉用的函数必须是<strong>自包含</strong>的，并且不应依赖于外部资源。为了降低大家的记忆压力， 咱们假设所有系统，都要满足自包含且不依赖外部资源。</p>
<h3 id="31-安装">3.1 安装</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install pandarallel
</code></pre></div><br>
<h3 id="32-错误用法">3.2 错误用法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">pandarallel</span> <span class="kn">import</span> <span class="n">pandarallel</span>
<span class="n">pandarallel</span><span class="o">.</span><span class="n">initialize</span><span class="p">()</span>


<span class="kn">import</span> <span class="nn">math</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="c1"># func不能依赖外部资源， math定义在函数体func之外， 会出问题的！</span>
    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">a</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">b</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
  
  
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;实验的csv文件路径&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;result&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;某个数值字段&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</code></pre></div><br>
<h3 id="33-正确用法">3.3 正确用法</h3>
<p>定义好计算函数func， 标准的pandas的计算是在pd.Series基础上掉用apply方法，即 pd.Series.apply(func)。</p>
<p>而pandarallel稍微修改了方法名， pd.Series.parallel_apply(func)。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">pandarallel</span> <span class="kn">import</span> <span class="n">pandarallel</span>
<span class="n">pandarallel</span><span class="o">.</span><span class="n">initialize</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="kn">import</span> <span class="nn">math</span>
    <span class="c1"># 在函数体func内导入math，掉用math， okay!</span>
    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">a</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">b</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
  
  
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;实验的csv文件路径&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;result&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;某个数值字段&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="四实验">四、实验</h2>
<p>对一个xlsx文件的text字段进行词频统计， 结果保存到新字段wordCount中。</p>
<h3 id="41-读取数据">4.1 读取数据</h3>
<p>mda01-22.xlsx数据有55439条记录， 体积573M。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;mda01-22.xlsx&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">))</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">55439
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<h3 id="42-没有并行">4.2 没有并行</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">%%</span><span class="n">time</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">jieba</span>
    
<span class="k">def</span> <span class="nf">word_count</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;mda01-22.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;wordCount&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">word_count</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">CPU times: user 11min 56s, sys: 10.5 s, total: 12min 7s
Wall time: 12min 7s
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<h3 id="43-并行化">4.3 并行化</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">%%</span><span class="n">time</span>

<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">pandarallel</span> <span class="kn">import</span> <span class="n">pandarallel</span>
<span class="n">pandarallel</span><span class="o">.</span><span class="n">initialize</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">parallel_word_count</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="kn">import</span> <span class="nn">jieba</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;mda01-22.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;wordCount&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">word_count</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">INFO: Pandarallel will run on 12 workers.
INFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.
CPU times: user 12.4 s, sys: 1.41 s, total: 13.8 s
Wall time: 2min 40s
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<p>Wow, 运行总时间从  12min 7s 降低 2min 40s 。</p>
<br>
<h3 id="44-使用场景">4.4 使用场景</h3>
<p>并行化是有代价的（实例化新进程、通过共享内存发送数据、 &hellip;），只有在并行化的计算量大时才有效足够高。对于小规模的数据，使用并行化并不总是值得的。经过测试， 找了一个61kb的xlsx， 结果并行化反而还慢了。</p>
<p><strong>pandarallel</strong> 通过使用计算机cpu所有内核来绕过此限制。 但代价是，需要两倍于标准操作的内存占用。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Modin，只需一行代码加速你的Pandas</title>
      <link>https://textdata.cn/blog/2023-11-17-modin-accecerate-your-process/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-17-modin-accecerate-your-process/</guid>
      <description>&lt;p&gt;modin库是python的第三方库，只需一行代码，就能用pandas语法来加速数据处理过程。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;一modin有啥用&#34;&gt;一、modin有啥用？&lt;/h2&gt;
&lt;p&gt;pandas库以其简洁易用的api，受到数据分析师喜爱，能做python、sql、excel三者都能做的数据分析。现在的电脑CPU一般都是多核，但pandas只能单核，导致数据处理能力有限。&lt;/p&gt;
&lt;p&gt;而今天，我们要分享的modin，可以利用电脑cpu所有的内核， 加速数据处理。假设你的电脑cpu有4个内核， pandas相当于雇佣了一个工人干活，而modin同时雇佣四个人干活，所以同样的任务，理论上modin比pandas要快4倍。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二modin特点&#34;&gt;二、modin特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;支持pandas.DataFrame数据类型&lt;/li&gt;
&lt;li&gt;与pandas兼容，语法相似，几乎不需要额外学习；&lt;/li&gt;
&lt;li&gt;能处理1MB到1TB+的数据；&lt;/li&gt;
&lt;li&gt;使用者不需要知道系统有多少内核，也不需要指定如何分配数据；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三实验&#34;&gt;三、实验&lt;/h2&gt;
&lt;h3 id=&#34;31-环境准备&#34;&gt;3.1 环境准备&lt;/h3&gt;
&lt;p&gt;在命令行cmd (苹果电脑在terminal)中执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip3 install &amp;#34;modin[all]&amp;#34;
pip3 install humanize
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;32-使用方法&#34;&gt;3.2 使用方法&lt;/h3&gt;
&lt;p&gt;只需要一行代码，即可实现pandas功能。 下面的两行代码， mpd几乎等同于我们熟悉的pd。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import modin.pandas as mpd
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;33-准备数据&#34;&gt;3.3 准备数据&lt;/h3&gt;
&lt;p&gt;这里用  &lt;a href=&#34;https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/&#34;&gt;&lt;strong&gt;数据集(付费) | 3571万条专利申请数据集(1985-2022年)&lt;/strong&gt;&lt;/a&gt; 为例，&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/data-screen.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;humanize&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;naturalsize&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;csvfsizes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; 
             &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
             &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#排序，文件体积从大到小&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;csvfsizes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csvfsizes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                   &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; 
                   &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvfsizes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;humansize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;naturalsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;humansize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;广东省.csv   10.4 GB
江苏省.csv   9.6 GB
浙江省.csv   7.1 GB
其他国家.csv   6.2 GB
北京市.csv   4.6 GB
山东省.csv   4.3 GB
上海市.csv   3.1 GB
安徽省.csv   3.0 GB
四川省.csv   2.3 GB
湖北省.csv   2.1 GB
福建省.csv   2.1 GB
河南省.csv   2.0 GB
天津市.csv   1.6 GB
湖南省.csv   1.5 GB
陕西省.csv   1.5 GB
辽宁省.csv   1.4 GB
河北省.csv   1.3 GB
重庆市.csv   1.2 GB
江西省.csv   1.0 GB
广西壮族自治区.csv   809.9 MB
台湾省.csv   792.9 MB
黑龙江省.csv   784.5 MB
贵州省.csv   542.4 MB
云南省.csv   538.9 MB
吉林省.csv   524.9 MB
...
香港特别行政区.csv   90.2 MB
青海省.csv   74.9 MB
西藏自治区.csv   19.5 MB
澳门特别行政区.csv   3.5 MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;34-读取速度&#34;&gt;3.4 读取速度&lt;/h3&gt;
&lt;p&gt;我们分别选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;吉林省.csv 524.9 MB&lt;/li&gt;
&lt;li&gt;江西省.csv 1.0 GB&lt;/li&gt;
&lt;li&gt;北京市.csv 4.6 GB&lt;/li&gt;
&lt;li&gt;广东省.csv 10.4 GB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来测试读取数据的速度&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;modin.pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mpd&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#Pandas 524.9 MB&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;吉林省.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;CPU times: total: 10.6 s
Wall time: 11.2 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Modin 524.9 MB&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;吉林省.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;CPU times: total: 1.38 s
Wall time: 2.68 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他几个文件语法类似， 都有显著的速度提升。以下是实验表现&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;体积&lt;/th&gt;
&lt;th&gt;pandas（Wall time）&lt;/th&gt;
&lt;th&gt;modin（Wall time）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;吉林省.csv&lt;/td&gt;
&lt;td&gt;524.9 MB&lt;/td&gt;
&lt;td&gt;11.2 s&lt;/td&gt;
&lt;td&gt;2.68 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;江西省.csv&lt;/td&gt;
&lt;td&gt;1.0 GB&lt;/td&gt;
&lt;td&gt;22.9 s&lt;/td&gt;
&lt;td&gt;5.17 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;北京.csv&lt;/td&gt;
&lt;td&gt;4.6 GB&lt;/td&gt;
&lt;td&gt;100s&lt;/td&gt;
&lt;td&gt;24.7 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;广东省.csv&lt;/td&gt;
&lt;td&gt;10.4 GB&lt;/td&gt;
&lt;td&gt;213s&lt;/td&gt;
&lt;td&gt;55.9 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;35-运算速度&#34;&gt;3.5 运算速度&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;modin.pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mpd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;广东省.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#计算文本长度&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;专利摘要&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;CPU times: total: 15.6 ms
Wall time: 26.5 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;广东省.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;专利摘要&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;CPU times: total: 3.02 s
Wall time: 3.33 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;modin在计算方面快了125倍。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;
&lt;p&gt;但是由于时间限制，实验比较简单， 个中情况不能一一覆盖。 也有人反映，使用modin，反而比pandas更慢了。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p>modin库是python的第三方库，只需一行代码，就能用pandas语法来加速数据处理过程。</p>
<br>
<h2 id="一modin有啥用">一、modin有啥用？</h2>
<p>pandas库以其简洁易用的api，受到数据分析师喜爱，能做python、sql、excel三者都能做的数据分析。现在的电脑CPU一般都是多核，但pandas只能单核，导致数据处理能力有限。</p>
<p>而今天，我们要分享的modin，可以利用电脑cpu所有的内核， 加速数据处理。假设你的电脑cpu有4个内核， pandas相当于雇佣了一个工人干活，而modin同时雇佣四个人干活，所以同样的任务，理论上modin比pandas要快4倍。</p>
<p><br><br></p>
<h2 id="二modin特点">二、modin特点</h2>
<ol>
<li>支持pandas.DataFrame数据类型</li>
<li>与pandas兼容，语法相似，几乎不需要额外学习；</li>
<li>能处理1MB到1TB+的数据；</li>
<li>使用者不需要知道系统有多少内核，也不需要指定如何分配数据；</li>
</ol>
<p><br><br></p>
<h2 id="三实验">三、实验</h2>
<h3 id="31-环境准备">3.1 环境准备</h3>
<p>在命令行cmd (苹果电脑在terminal)中执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install &#34;modin[all]&#34;
pip3 install humanize
</code></pre></div><br>
<h3 id="32-使用方法">3.2 使用方法</h3>
<p>只需要一行代码，即可实现pandas功能。 下面的两行代码， mpd几乎等同于我们熟悉的pd。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import modin.pandas as mpd
import pandas as pd
</code></pre></div><br>
<h3 id="33-准备数据">3.3 准备数据</h3>
<p>这里用  <a href="https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/"><strong>数据集(付费) | 3571万条专利申请数据集(1985-2022年)</strong></a> 为例，</p>
<p><img loading="lazy" src="img/data-screen.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">humanize</span> <span class="kn">import</span> <span class="n">naturalsize</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">csvfsizes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">f</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getsize</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">for</span> 
             <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> 
             <span class="k">if</span> <span class="s1">&#39;.csv&#39;</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>

<span class="c1">#排序，文件体积从大到小</span>
<span class="n">csvfsizes</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">csvfsizes</span><span class="p">,</span> 
                   <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k</span><span class="p">:</span><span class="n">k</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> 
                   <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="k">for</span> <span class="n">csvf</span><span class="p">,</span> <span class="n">size</span> <span class="ow">in</span> <span class="n">csvfsizes</span><span class="p">:</span>
    <span class="n">humansize</span> <span class="o">=</span> <span class="n">naturalsize</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">humansize</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">广东省.csv   10.4 GB
江苏省.csv   9.6 GB
浙江省.csv   7.1 GB
其他国家.csv   6.2 GB
北京市.csv   4.6 GB
山东省.csv   4.3 GB
上海市.csv   3.1 GB
安徽省.csv   3.0 GB
四川省.csv   2.3 GB
湖北省.csv   2.1 GB
福建省.csv   2.1 GB
河南省.csv   2.0 GB
天津市.csv   1.6 GB
湖南省.csv   1.5 GB
陕西省.csv   1.5 GB
辽宁省.csv   1.4 GB
河北省.csv   1.3 GB
重庆市.csv   1.2 GB
江西省.csv   1.0 GB
广西壮族自治区.csv   809.9 MB
台湾省.csv   792.9 MB
黑龙江省.csv   784.5 MB
贵州省.csv   542.4 MB
云南省.csv   538.9 MB
吉林省.csv   524.9 MB
...
香港特别行政区.csv   90.2 MB
青海省.csv   74.9 MB
西藏自治区.csv   19.5 MB
澳门特别行政区.csv   3.5 MB
</code></pre></div><br>
<h3 id="34-读取速度">3.4 读取速度</h3>
<p>我们分别选择</p>
<ul>
<li>吉林省.csv 524.9 MB</li>
<li>江西省.csv 1.0 GB</li>
<li>北京市.csv 4.6 GB</li>
<li>广东省.csv 10.4 GB</li>
</ul>
<p>来测试读取数据的速度</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">modin.pandas</span> <span class="k">as</span> <span class="nn">mpd</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#Pandas 524.9 MB</span>
<span class="o">%</span><span class="n">time</span> <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;吉林省.csv&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">CPU times: total: 10.6 s
Wall time: 11.2 s
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#Modin 524.9 MB</span>
<span class="o">%</span><span class="n">time</span> <span class="n">df</span> <span class="o">=</span> <span class="n">mpd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;吉林省.csv&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">CPU times: total: 1.38 s
Wall time: 2.68 s
</code></pre></div><p>其他几个文件语法类似， 都有显著的速度提升。以下是实验表现</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>体积</th>
<th>pandas（Wall time）</th>
<th>modin（Wall time）</th>
</tr>
</thead>
<tbody>
<tr>
<td>吉林省.csv</td>
<td>524.9 MB</td>
<td>11.2 s</td>
<td>2.68 s</td>
</tr>
<tr>
<td>江西省.csv</td>
<td>1.0 GB</td>
<td>22.9 s</td>
<td>5.17 s</td>
</tr>
<tr>
<td>北京.csv</td>
<td>4.6 GB</td>
<td>100s</td>
<td>24.7 s</td>
</tr>
<tr>
<td>广东省.csv</td>
<td>10.4 GB</td>
<td>213s</td>
<td>55.9 s</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><br><br></p>
<h3 id="35-运算速度">3.5 运算速度</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">modin.pandas</span> <span class="k">as</span> <span class="nn">mpd</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">mpd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;广东省.csv&#39;</span><span class="p">)</span>
<span class="c1">#计算文本长度</span>
<span class="o">%</span><span class="n">time</span> <span class="n">df1</span><span class="p">[</span><span class="s1">&#39;专利摘要&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">len</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">CPU times: total: 15.6 ms
Wall time: 26.5 ms
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;广东省.csv&#39;</span><span class="p">)</span>
<span class="o">%</span><span class="n">time</span> <span class="n">df2</span><span class="p">[</span><span class="s1">&#39;专利摘要&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">len</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">CPU times: total: 3.02 s
Wall time: 3.33 s
</code></pre></div><p>modin在计算方面快了125倍。</p>
<p><br><br></p>
<h2 id="注意">注意</h2>
<p>但是由于时间限制，实验比较简单， 个中情况不能一一覆盖。 也有人反映，使用modin，反而比pandas更慢了。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐 | 如何处理远超电脑内存的csv文件</title>
      <link>https://textdata.cn/blog/2023-11-17-how-handle-mega-csv-that-far-exceed-memory/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-17-how-handle-mega-csv-that-far-exceed-memory/</guid>
      <description>&lt;h2 id=&#34;一问题&#34;&gt;一、问题&lt;/h2&gt;
&lt;p&gt;最近分享的数据集都是体量巨大，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-05-07-china-law-judgment-documents-datasets/&#34;&gt;&lt;strong&gt;93G数据集(付费) | 中国裁判文书网(2010-2021)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-04-12-china-mainland-corporate-registration-information/&#34;&gt;&lt;strong&gt;数据集(付费) | 2.49亿条中国大陆工商企业注册信息(更新至23.9)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-04-12-china-poi-datasets/&#34;&gt;&lt;strong&gt;数据集(付费) |  3.9G全国POI地点兴趣点数据集&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/&#34;&gt;&lt;strong&gt;数据集(付费) | 3571万条专利申请数据集(1985-2022年)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;下图是 &lt;a href=&#34;https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/&#34;&gt;&lt;strong&gt;数据集 | 3571万条专利申请数据集(1985-2022年)&lt;/strong&gt;&lt;/a&gt;截图，其中 &lt;em&gt;&lt;strong&gt;广东省.csv.gz&lt;/strong&gt;&lt;/em&gt;  2.66 G，解压后得到的 &lt;em&gt;&lt;strong&gt;广东省.csv&lt;/strong&gt;&lt;/em&gt; 接近10G， 已经超过很多学员电脑内存（现在常见的笔记本内存是8G和16G），我们应该如何应对这类 &lt;strong&gt;巨大csv文件&lt;/strong&gt; 呢？&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/screen-datasets2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二思路&#34;&gt;二、思路&lt;/h2&gt;
&lt;p&gt;一般应对 &lt;em&gt;&lt;strong&gt;广东省.csv.gz&lt;/strong&gt;&lt;/em&gt; 这种巨大csv文件，可以从以下两大类思路:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路1. 使用更高配置的电脑&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路2. 花点功夫学大文件处理技巧&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;21-使用更高配置的电脑服务器&#34;&gt;2.1 使用更高配置的电脑(服务器)&lt;/h3&gt;
&lt;p&gt;思路1， 方法简单，思路简单， 写代码的方式一如既往， 认知成本低， 美中不足要花钱。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;买电脑； 如果你不差钱，直接换更好的电脑， 8G&amp;ndash;&amp;gt;16G&amp;ndash;&amp;gt;32G&amp;ndash;&amp;gt;64&amp;ndash;&amp;gt;96G&amp;ndash;&amp;gt;128G&amp;hellip;  预算决定数据处理能力的上限。&lt;/li&gt;
&lt;li&gt;租用服务器；如果差钱，资金不足脑力凑。 租用服务器的难点是像你我刚接触电脑一样，要熟悉服务器操作，前期存在较大的认知难度和学习难度。&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;22--花点功夫学大文件处理技巧&#34;&gt;2.2  花点功夫学大文件处理技巧&lt;/h3&gt;
&lt;p&gt;网上关于处理大文件的技巧虽然很多，比如针对每个字段的数据类型，整形、浮点型、64位、32位， 反正大邓是不太懂。 咱们学python的原则是，用最少的时间学到最常用最有用的，解决80%的问题，剩下的20%太难的问题还是交给专业人士。假设你我电脑内存是8G，要在此环境下进行数据处理， 以下是常见的处理方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;读取前n条记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读取某个(些)字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小批次读取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转csv为xlsx&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在接下来的章节中，我们重点分享以上5类技巧代码。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三代码技巧&#34;&gt;三、代码技巧&lt;/h2&gt;
&lt;p&gt;以csv、xlsx这类数据， 每行代表一条记录，每列代表一个字段，而文件体积是由行数和列数决定。而 &lt;em&gt;&lt;strong&gt;pd.read_csv&lt;/strong&gt;&lt;/em&gt;有三个最常用的参数nrows、usecols、chunksize，分别决定读前nrows行、选择usecols列读取、按照chunksize分批次读取。&lt;/p&gt;
&lt;p&gt;以 &lt;em&gt;&lt;strong&gt;广东省.csv&lt;/strong&gt;&lt;/em&gt; 有 10.42G， 而电脑内存只有8G， 对这个csv文件，除了知道文件名，其他信息一无所知。这时候最简单的技巧就是尝试着读取前n条记录，先了解字段有哪些。&lt;/p&gt;
&lt;h3 id=&#34;31-读取前n条记录&#34;&gt;3.1 读取前n条记录&lt;/h3&gt;
&lt;h4 id=&#34;311-参数nrows&#34;&gt;3.1.1 参数nrows&lt;/h4&gt;
&lt;p&gt;读取前n条记录， 了解csv字段有哪些&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#只读取csv中前100条记录&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;广东省.csv.gz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrows&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gzip&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#使用bandizp、winrar等常用的解压软件解压gz文件，得到csv文件&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df = pd.read_csv(&amp;#39;广东省.csv&amp;#39;, nrows=5)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;字段太多， 很多字段隐藏起来。详细了解csv的字段信息，还需要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;df.columns 获得所有的字段名&lt;/li&gt;
&lt;li&gt;df.info(memory_usage=&amp;lsquo;deep&amp;rsquo;)  所有字段及字段数据类型&lt;/li&gt;
&lt;li&gt;df.memory_usage(deep=True) 每个字段占用的系统内存&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&#34;312-dfcolumns&#34;&gt;3.1.2 df.columns&lt;/h4&gt;
&lt;p&gt;获得所有的字段名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Index([&amp;#39;专利公开号&amp;#39;, &amp;#39;专利名称&amp;#39;, &amp;#39;专利类型&amp;#39;, &amp;#39;专利摘要&amp;#39;, &amp;#39;申请人&amp;#39;, &amp;#39;专利申请号&amp;#39;, &amp;#39;申请日&amp;#39;, &amp;#39;申请公布日&amp;#39;,
       &amp;#39;授权公布号&amp;#39;, &amp;#39;授权公布日&amp;#39;, &amp;#39;申请地址&amp;#39;, &amp;#39;主权项&amp;#39;, &amp;#39;发明人&amp;#39;, &amp;#39;分类号&amp;#39;, &amp;#39;主分类号&amp;#39;, &amp;#39;代理机构&amp;#39;, &amp;#39;分案原申请号&amp;#39;,
       &amp;#39;优先权&amp;#39;, &amp;#39;国际申请&amp;#39;, &amp;#39;国际公布&amp;#39;, &amp;#39;代理人&amp;#39;, &amp;#39;省份或国家代码&amp;#39;, &amp;#39;法律状态&amp;#39;, &amp;#39;专利领域&amp;#39;, &amp;#39;专利学科&amp;#39;,
       &amp;#39;多次公布&amp;#39;],
      dtype=&amp;#39;object&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;313-dfinfomemory_usagedeep&#34;&gt;3.1.3 df.info(memory_usage=&amp;lsquo;deep&amp;rsquo;)&lt;/h3&gt;
&lt;p&gt;单单用df.columns只知其名，但无法内部什么数据结构。使用df.info()&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deep&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
RangeIndex: 5 entries, 0 to 4
Data columns (total 26 columns):
 #   Column   Non-Null Count  Dtype  
---  ------   --------------  -----  
 0   专利公开号    5 non-null      object 
 1   专利名称     5 non-null      object 
 2   专利类型     5 non-null      object 
 3   专利摘要     5 non-null      object 
 4   申请人      5 non-null      object 
 5   专利申请号    5 non-null      object 
 6   申请日      5 non-null      object 
 7   申请公布日    0 non-null      float64
 8   授权公布号    5 non-null      object 
 9   授权公布日    5 non-null      object 
 10  申请地址     5 non-null      object 
 11  主权项      3 non-null      object 
 12  发明人      5 non-null      object 
 13  分类号      5 non-null      object 
 14  主分类号     5 non-null      object 
 15  代理机构     4 non-null      object 
 16  分案原申请号   0 non-null      float64
 17  优先权      0 non-null      float64
 18  国际申请     0 non-null      float64
 19  国际公布     0 non-null      float64
 20  代理人      4 non-null      object 
 21  省份或国家代码  5 non-null      int64  
 22  法律状态     5 non-null      object 
 23  专利领域     5 non-null      object 
 24  专利学科     5 non-null      object 
 25  多次公布     0 non-null      float64
dtypes: float64(6), int64(1), object(19)
memory usage: 14.7 KB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dtype中，object是字符串(文本)型数据； float64是数字型数据。5条记录占用系统内存14.7kb&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;314-dfmemory_usagedeeptrue&#34;&gt;3.1.4 df.memory_usage(deep=True)&lt;/h3&gt;
&lt;p&gt;但最好能了解每个字段占用的系统内存， 后续可以决定只读取必要的字段，减少内存占用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Index          132
专利公开号       342
专利名称        512
专利类型        450
专利摘要        2434
申请人          528
专利申请号       361
申请日          335
申请公布日        40
授权公布号       342
授权公布日       335
申请地址         668
主权项          2322
发明人          450
分类号          366
主分类号        320
代理机构        496
分案原申请号     40
优先权          40
国际申请         40
国际公布         40
代理人          390
省份或国家代码    40
法律状态        3084
专利领域        470
专利学科        474
多次公布         40
dtype: int64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对字段进行排序， 按照占用内存从大到小排列&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort_values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ascending&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;法律状态       3084
专利摘要       2434
主权项        2322
申请地址        668
申请人         528
专利名称        512
代理机构        496
专利学科        474
专利领域        470
发明人         450
专利类型        450
代理人         390
分类号         366
专利申请号       361
专利公开号       342
授权公布号       342
授权公布日       335
申请日         335
主分类号        320
Index       132
国际公布         40
国际申请         40
省份或国家代码      40
优先权          40
分案原申请号       40
申请公布日        40
多次公布         40
dtype: int64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;5条记录总内存（单位：字节)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;15091
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;32-读取某字段&#34;&gt;3.2 读取某字段&lt;/h3&gt;
&lt;p&gt;使用usecols参数，设置只读取某个(些)字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#读取前5行，且只读入 &amp;#39;专利公开号&amp;#39;, &amp;#39;专利名称&amp;#39;, &amp;#39;法律状态&amp;#39; 这3个字段&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;广东省.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrows&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;usecols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;专利公开号&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;专利名称&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;法律状态&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;同样是5条记录， 读入全字段和读入选定字段，占用系统内存分别是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;全字段: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;选定字段: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;de_x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;压缩倍数: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;de_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;全字段:   15091
选定字段:  4070
压缩倍数:  3.71
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;&lt;strong&gt;所以电脑内存仅为8G， 是能够处理几倍于内存的巨大csv文件&lt;/strong&gt;， 具体取决度数据中字段占用内存的情况。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;33--小批次读取&#34;&gt;3.3  小批次读取&lt;/h3&gt;
&lt;p&gt;当探索完前n行，选中某些列，我们已经了解了哪些字段是我们必须要用的， 占用系统内存的大小。接下来，我们就可以尝试着按照批次读取数据。后面一节，我们尝试转csv为xlsx，其实就是按批次读取， 将数据转为体量更小的xlsx。&lt;/p&gt;
&lt;p&gt;为了让实验简单高效，我们假设只读取前50行， 每批次是5行。 对比下占用系统内存的量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#一次性读取&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;广东省.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrows&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;#分批次读取&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#每5条记录是一个批次，得到chunk_dfs&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;广东省.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrows&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#每个chunk_df就是我们熟悉的dataframe类型数据&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_usage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;一次性读取
147200

分批次读取
15091
15709
15475
15383
13999
14173
14151
14343
13313
16751
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;在实践中，nrows 和 chunksize不会同时出现， 而且chunksize一般都会设置的很大，例如1000条或者10000条。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;chunk_dfs = pd.read_csv(&amp;#39;csv文件&amp;#39;, chunksize=1000, nrows=50)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看到chunk_dfs也不要害怕，其实每个chunk_df就是我们熟悉的df，即dataframe数据类型。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;34-转csv为xlsx&#34;&gt;3.4 转csv为xlsx&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/csv2xlsx.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;有了chunksize参数的学习经历， 就可以尝试着把csv转为xlsx。 同样的数据量，存储到 xlsx比csv占用的存储空间要小很多，如下图。但代价也是有的， &lt;strong&gt;同样信息量的数据，读取xlsx比csv要慢很多&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/csvxlsx.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;本节不是什么新知识， 可以结合之前知识和本文前面的技巧， 实现csv转xlsx。需要注意的是每个xlsx最多只能存储104万行(记录),所以像 &lt;em&gt;&lt;strong&gt;广东省.csv&lt;/strong&gt;&lt;/em&gt; 这类巨大csv文件，如果真要转文件格式， 会转换成很多个xlsx的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 原csv路径和新csv文件前缀&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;large_file.csv&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;xlf_prefix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;small_file&amp;#39;&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# chunksize不能超过104w&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 因为xlsx最多仅可存储104w行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000000&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# 定义文件编号&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;file_counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 读取csv文件并拆分成多个小块的DataFrame&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 将每块DataFrame保存为一个单独的csv文件&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xlf_prefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file_counter&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.xlsx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;file_counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码会将大型CSV文件拆分成多个小块的DataFrame，每个DataFrame包含1000000行数据。&lt;/p&gt;
&lt;p&gt;然后，它将每个小DataFrame保存为单独的csv文件，文件名以“small_file_”作为前缀，后面跟着一个编号。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四总结&#34;&gt;四、总结&lt;/h2&gt;
&lt;p&gt;记住这行代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pd.read_csv(csvf, nrows, usecols, chunksize)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;8G内存的电脑， 通过以上技巧，基本可以把我们应对大数据的潜力放大N倍。  N可以是几倍、十几倍、几十倍、上百倍&amp;hellip;，&lt;strong&gt;放大潜力的过程起主要作用的是usecols和chunksize这两个参数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一问题">一、问题</h2>
<p>最近分享的数据集都是体量巨大，</p>
<ul>
<li><a href="https://textdata.cn/blog/2023-05-07-china-law-judgment-documents-datasets/"><strong>93G数据集(付费) | 中国裁判文书网(2010-2021)</strong></a></li>
<li><a href="https://textdata.cn/blog/2023-04-12-china-mainland-corporate-registration-information/"><strong>数据集(付费) | 2.49亿条中国大陆工商企业注册信息(更新至23.9)</strong></a></li>
<li><a href="https://textdata.cn/blog/2023-04-12-china-poi-datasets/"><strong>数据集(付费) |  3.9G全国POI地点兴趣点数据集</strong></a></li>
<li><a href="https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/"><strong>数据集(付费) | 3571万条专利申请数据集(1985-2022年)</strong></a></li>
</ul>
<br>
<p>下图是 <a href="https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/"><strong>数据集 | 3571万条专利申请数据集(1985-2022年)</strong></a>截图，其中 <em><strong>广东省.csv.gz</strong></em>  2.66 G，解压后得到的 <em><strong>广东省.csv</strong></em> 接近10G， 已经超过很多学员电脑内存（现在常见的笔记本内存是8G和16G），我们应该如何应对这类 <strong>巨大csv文件</strong> 呢？</p>
<p><img loading="lazy" src="img/screen-datasets2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="二思路">二、思路</h2>
<p>一般应对 <em><strong>广东省.csv.gz</strong></em> 这种巨大csv文件，可以从以下两大类思路:</p>
<p><strong>思路1. 使用更高配置的电脑</strong><br></p>
<p><strong>思路2. 花点功夫学大文件处理技巧</strong></p>
<h3 id="21-使用更高配置的电脑服务器">2.1 使用更高配置的电脑(服务器)</h3>
<p>思路1， 方法简单，思路简单， 写代码的方式一如既往， 认知成本低， 美中不足要花钱。</p>
<ul>
<li>买电脑； 如果你不差钱，直接换更好的电脑， 8G&ndash;&gt;16G&ndash;&gt;32G&ndash;&gt;64&ndash;&gt;96G&ndash;&gt;128G&hellip;  预算决定数据处理能力的上限。</li>
<li>租用服务器；如果差钱，资金不足脑力凑。 租用服务器的难点是像你我刚接触电脑一样，要熟悉服务器操作，前期存在较大的认知难度和学习难度。</li>
</ul>
<br>
<h3 id="22--花点功夫学大文件处理技巧">2.2  花点功夫学大文件处理技巧</h3>
<p>网上关于处理大文件的技巧虽然很多，比如针对每个字段的数据类型，整形、浮点型、64位、32位， 反正大邓是不太懂。 咱们学python的原则是，用最少的时间学到最常用最有用的，解决80%的问题，剩下的20%太难的问题还是交给专业人士。假设你我电脑内存是8G，要在此环境下进行数据处理， 以下是常见的处理方法</p>
<ol>
<li>
<p>读取前n条记录</p>
</li>
<li>
<p>读取某个(些)字段</p>
</li>
<li>
<p>小批次读取</p>
</li>
<li>
<p>转csv为xlsx</p>
</li>
</ol>
<p>在接下来的章节中，我们重点分享以上5类技巧代码。</p>
<p><br><br></p>
<h2 id="三代码技巧">三、代码技巧</h2>
<p>以csv、xlsx这类数据， 每行代表一条记录，每列代表一个字段，而文件体积是由行数和列数决定。而 <em><strong>pd.read_csv</strong></em>有三个最常用的参数nrows、usecols、chunksize，分别决定读前nrows行、选择usecols列读取、按照chunksize分批次读取。</p>
<p>以 <em><strong>广东省.csv</strong></em> 有 10.42G， 而电脑内存只有8G， 对这个csv文件，除了知道文件名，其他信息一无所知。这时候最简单的技巧就是尝试着读取前n条记录，先了解字段有哪些。</p>
<h3 id="31-读取前n条记录">3.1 读取前n条记录</h3>
<h4 id="311-参数nrows">3.1.1 参数nrows</h4>
<p>读取前n条记录， 了解csv字段有哪些</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#只读取csv中前100条记录</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;广东省.csv.gz&#39;</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="s1">&#39;gzip&#39;</span><span class="p">)</span>
<span class="c1">#使用bandizp、winrar等常用的解压软件解压gz文件，得到csv文件</span>
<span class="c1">#df = pd.read_csv(&#39;广东省.csv&#39;, nrows=5)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<p>字段太多， 很多字段隐藏起来。详细了解csv的字段信息，还需要</p>
<ul>
<li>df.columns 获得所有的字段名</li>
<li>df.info(memory_usage=&lsquo;deep&rsquo;)  所有字段及字段数据类型</li>
<li>df.memory_usage(deep=True) 每个字段占用的系统内存</li>
</ul>
<br>
<h4 id="312-dfcolumns">3.1.2 df.columns</h4>
<p>获得所有的字段名</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">columns</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Index([&#39;专利公开号&#39;, &#39;专利名称&#39;, &#39;专利类型&#39;, &#39;专利摘要&#39;, &#39;申请人&#39;, &#39;专利申请号&#39;, &#39;申请日&#39;, &#39;申请公布日&#39;,
       &#39;授权公布号&#39;, &#39;授权公布日&#39;, &#39;申请地址&#39;, &#39;主权项&#39;, &#39;发明人&#39;, &#39;分类号&#39;, &#39;主分类号&#39;, &#39;代理机构&#39;, &#39;分案原申请号&#39;,
       &#39;优先权&#39;, &#39;国际申请&#39;, &#39;国际公布&#39;, &#39;代理人&#39;, &#39;省份或国家代码&#39;, &#39;法律状态&#39;, &#39;专利领域&#39;, &#39;专利学科&#39;,
       &#39;多次公布&#39;],
      dtype=&#39;object&#39;)
</code></pre></div><br>
<h3 id="313-dfinfomemory_usagedeep">3.1.3 df.info(memory_usage=&lsquo;deep&rsquo;)</h3>
<p>单单用df.columns只知其名，但无法内部什么数据结构。使用df.info()</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">memory_usage</span><span class="o">=</span><span class="s1">&#39;deep&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 5 entries, 0 to 4
Data columns (total 26 columns):
 #   Column   Non-Null Count  Dtype  
---  ------   --------------  -----  
 0   专利公开号    5 non-null      object 
 1   专利名称     5 non-null      object 
 2   专利类型     5 non-null      object 
 3   专利摘要     5 non-null      object 
 4   申请人      5 non-null      object 
 5   专利申请号    5 non-null      object 
 6   申请日      5 non-null      object 
 7   申请公布日    0 non-null      float64
 8   授权公布号    5 non-null      object 
 9   授权公布日    5 non-null      object 
 10  申请地址     5 non-null      object 
 11  主权项      3 non-null      object 
 12  发明人      5 non-null      object 
 13  分类号      5 non-null      object 
 14  主分类号     5 non-null      object 
 15  代理机构     4 non-null      object 
 16  分案原申请号   0 non-null      float64
 17  优先权      0 non-null      float64
 18  国际申请     0 non-null      float64
 19  国际公布     0 non-null      float64
 20  代理人      4 non-null      object 
 21  省份或国家代码  5 non-null      int64  
 22  法律状态     5 non-null      object 
 23  专利领域     5 non-null      object 
 24  专利学科     5 non-null      object 
 25  多次公布     0 non-null      float64
dtypes: float64(6), int64(1), object(19)
memory usage: 14.7 KB
</code></pre></div><p>Dtype中，object是字符串(文本)型数据； float64是数字型数据。5条记录占用系统内存14.7kb</p>
<br>
<h3 id="314-dfmemory_usagedeeptrue">3.1.4 df.memory_usage(deep=True)</h3>
<p>但最好能了解每个字段占用的系统内存， 后续可以决定只读取必要的字段，减少内存占用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> 
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Index          132
专利公开号       342
专利名称        512
专利类型        450
专利摘要        2434
申请人          528
专利申请号       361
申请日          335
申请公布日        40
授权公布号       342
授权公布日       335
申请地址         668
主权项          2322
发明人          450
分类号          366
主分类号        320
代理机构        496
分案原申请号     40
优先权          40
国际申请         40
国际公布         40
代理人          390
省份或国家代码    40
法律状态        3084
专利领域        470
专利学科        474
多次公布         40
dtype: int64
</code></pre></div><p>对字段进行排序， 按照占用内存从大到小排列</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">法律状态       3084
专利摘要       2434
主权项        2322
申请地址        668
申请人         528
专利名称        512
代理机构        496
专利学科        474
专利领域        470
发明人         450
专利类型        450
代理人         390
分类号         366
专利申请号       361
专利公开号       342
授权公布号       342
授权公布日       335
申请日         335
主分类号        320
Index       132
国际公布         40
国际申请         40
省份或国家代码      40
优先权          40
分案原申请号       40
申请公布日        40
多次公布         40
dtype: int64
</code></pre></div><br>
<p>5条记录总内存（单位：字节)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">15091
</code></pre></div><p><br><br></p>
<h3 id="32-读取某字段">3.2 读取某字段</h3>
<p>使用usecols参数，设置只读取某个(些)字段</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#读取前5行，且只读入 &#39;专利公开号&#39;, &#39;专利名称&#39;, &#39;法律状态&#39; 这3个字段</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;广东省.csv&#39;</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">usecols</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;专利公开号&#39;</span><span class="p">,</span> <span class="s1">&#39;专利名称&#39;</span><span class="p">,</span> <span class="s1">&#39;法律状态&#39;</span><span class="p">])</span>
<span class="n">df2</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<p>同样是5条记录， 读入全字段和读入选定字段，占用系统内存分别是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;全字段: &#39;</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;选定字段: &#39;</span><span class="p">,</span> <span class="n">df2</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span>

<span class="n">de_x</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">/</span><span class="n">df2</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;压缩倍数: </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">de_x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">全字段:   15091
选定字段:  4070
压缩倍数:  3.71
</code></pre></div><br>
<p><strong>所以电脑内存仅为8G， 是能够处理几倍于内存的巨大csv文件</strong>， 具体取决度数据中字段占用内存的情况。</p>
<p><br><br></p>
<h3 id="33--小批次读取">3.3  小批次读取</h3>
<p>当探索完前n行，选中某些列，我们已经了解了哪些字段是我们必须要用的， 占用系统内存的大小。接下来，我们就可以尝试着按照批次读取数据。后面一节，我们尝试转csv为xlsx，其实就是按批次读取， 将数据转为体量更小的xlsx。</p>
<p>为了让实验简单高效，我们假设只读取前50行， 每批次是5行。 对比下占用系统内存的量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#一次性读取</span>
<span class="n">df100</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;广东省.csv&#39;</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">df100</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="p">)</span>


<span class="c1">#分批次读取</span>
<span class="c1">#每5条记录是一个批次，得到chunk_dfs</span>
<span class="n">chunk_dfs</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;广东省.csv&#39;</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>

<span class="c1">#每个chunk_df就是我们熟悉的dataframe类型数据</span>
<span class="k">for</span> <span class="n">chunk_df</span> <span class="ow">in</span> <span class="n">chunk_dfs</span><span class="p">:</span>
    
    <span class="nb">print</span><span class="p">(</span><span class="n">chunk_df</span><span class="o">.</span><span class="n">memory_usage</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">一次性读取
147200

分批次读取
15091
15709
15475
15383
13999
14173
14151
14343
13313
16751
</code></pre></div><br>
<p>在实践中，nrows 和 chunksize不会同时出现， 而且chunksize一般都会设置的很大，例如1000条或者10000条。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">chunk_dfs = pd.read_csv(&#39;csv文件&#39;, chunksize=1000, nrows=50)
</code></pre></div><p>看到chunk_dfs也不要害怕，其实每个chunk_df就是我们熟悉的df，即dataframe数据类型。</p>
<p><br><br></p>
<h3 id="34-转csv为xlsx">3.4 转csv为xlsx</h3>
<p><img loading="lazy" src="img/csv2xlsx.png" alt=""  />
</p>
<p>有了chunksize参数的学习经历， 就可以尝试着把csv转为xlsx。 同样的数据量，存储到 xlsx比csv占用的存储空间要小很多，如下图。但代价也是有的， <strong>同样信息量的数据，读取xlsx比csv要慢很多</strong>。</p>
<p><img loading="lazy" src="img/csvxlsx.png" alt=""  />
</p>
<p>本节不是什么新知识， 可以结合之前知识和本文前面的技巧， 实现csv转xlsx。需要注意的是每个xlsx最多只能存储104万行(记录),所以像 <em><strong>广东省.csv</strong></em> 这类巨大csv文件，如果真要转文件格式， 会转换成很多个xlsx的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1"># 原csv路径和新csv文件前缀</span>
<span class="n">csvf</span> <span class="o">=</span> <span class="s1">&#39;large_file.csv&#39;</span>
<span class="n">xlf_prefix</span> <span class="o">=</span> <span class="s1">&#39;small_file&#39;</span>


<span class="c1"># chunksize不能超过104w</span>
<span class="c1"># 因为xlsx最多仅可存储104w行</span>
<span class="n">chunksize</span> <span class="o">=</span> <span class="mi">1000000</span>


<span class="c1"># 定义文件编号</span>
<span class="n">file_counter</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># 读取csv文件并拆分成多个小块的DataFrame</span>
<span class="n">chunk_dfs</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="n">chunksize</span><span class="p">):</span>
<span class="k">for</span> <span class="n">chunk_df</span> <span class="ow">in</span> <span class="n">chunk_dfs</span><span class="p">:</span>
    <span class="c1"># 将每块DataFrame保存为一个单独的csv文件</span>
    <span class="n">chunk_df</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">xlf_prefix</span><span class="si">}</span><span class="s1">_</span><span class="si">{</span><span class="n">file_counter</span><span class="si">}</span><span class="s1">.xlsx&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
    <span class="n">file_counter</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div><p>上述代码会将大型CSV文件拆分成多个小块的DataFrame，每个DataFrame包含1000000行数据。</p>
<p>然后，它将每个小DataFrame保存为单独的csv文件，文件名以“small_file_”作为前缀，后面跟着一个编号。</p>
<p><br><br></p>
<h2 id="四总结">四、总结</h2>
<p>记住这行代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pd.read_csv(csvf, nrows, usecols, chunksize)
</code></pre></div><p>8G内存的电脑， 通过以上技巧，基本可以把我们应对大数据的潜力放大N倍。  N可以是几倍、十几倍、几十倍、上百倍&hellip;，<strong>放大潜力的过程起主要作用的是usecols和chunksize这两个参数</strong>。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>词向量(付费) | 使用1985年-2022年专利申请摘要训练word2vec模型</title>
      <link>https://textdata.cn/blog/2023-11-10-training-word2vec-model-using-china-3751w-patent-application-dataset/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-10-training-word2vec-model-using-china-3751w-patent-application-dataset/</guid>
      <description>&lt;h2 id=&#34;一说明&#34;&gt;一、说明&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/&#34;&gt;&lt;strong&gt;3571万条专利申请数据集(1985-2022年)&lt;/strong&gt;&lt;/a&gt; 中随机抽取了28%的 「&lt;strong&gt;专利摘要&lt;/strong&gt;」，构成6.14G的训练语料(千万级别)， 耗时6小时，训练得到word2vec模型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意， 100%全部语料有24G， 使用服务区内存128G，跑了20小时预处理还没完成，内存就炸了。&lt;/p&gt;
&lt;p&gt;没办法，我不会优化代码性能，所以只能抽取28%的文本数据来训练word2vec&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;p&gt;本文需要用到新cntext，因为bug较多， 直接上传到PyPi，将导致之前制作的课程和公众号推文相关内容全部重新一遍。&lt;/p&gt;
&lt;h2 id=&#34;一语料构建&#34;&gt;一、语料构建&lt;/h2&gt;
&lt;p&gt;随机抽取28%的记录，构成千万专利文本摘要训练语料。&lt;/p&gt;
&lt;p&gt;为了防止电脑内存爆炸， 对任意单个大csv文件，分批次读取，每次读10w行。最终将专利摘要文本保存到txt文件中，编码方式为utf-8。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果想开发一些词典，可以跳过此部分内容，并不影响代码运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/screen-datasets.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#将代码放在csv数据文件夹内&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1000w专利摘要.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;txtf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#获得当前文件夹内所有的csv文件路径&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;csvfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csvfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#分批次读取csv，每次读10w行&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csvf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunksize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;#剔除专利摘要为空的记录&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dropna&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inplace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;专利摘要&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;#随机抽取28%的记录&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;sample_df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frac&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.28&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;txtf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample_df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;专利摘要&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tolist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终得到的&lt;strong&gt;1000w专利摘要.txt&lt;/strong&gt; 文件有6.14G&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二训练word2vec&#34;&gt;二、训练word2vec&lt;/h2&gt;
&lt;p&gt;我使用的自己 &lt;strong&gt;未公开&lt;/strong&gt; 的cntext 2.0.0版本， Bug频出，等调整好了再公开。&lt;/p&gt;
&lt;h3 id=&#34;21-安装&#34;&gt;2.1 安装&lt;/h3&gt;
&lt;p&gt;将 &lt;em&gt;&lt;strong&gt;cntext-2.0.0-py3-none-any.whl&lt;/strong&gt;&lt;/em&gt; 放置于桌面，打开 &lt;em&gt;&lt;strong&gt;cmd&lt;/strong&gt;&lt;/em&gt;  (苹果电脑打开terminal)， 输入cd desktop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在 &lt;em&gt;&lt;strong&gt;cmd&lt;/strong&gt;&lt;/em&gt;  (苹果电脑打开terminal) 中使用 &lt;em&gt;&lt;strong&gt;pip3&lt;/strong&gt;&lt;/em&gt; 安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip3 install cntext-2.0.0-py3-none-any.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文末有 &lt;em&gt;&lt;strong&gt;cntext-2.0.0-py3-none-any.whl&lt;/strong&gt;&lt;/em&gt; 获取方式&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Word2Vec模型参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window = 6&lt;/li&gt;
&lt;li&gt;vector_size = 100&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#cntext为2.0.0&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cntext&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ct&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;w2v_model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W2VModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;corpus_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1000w专利摘要.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;chinese&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;w2v_model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;window_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Starting Preprocessing Corpus ...
Starting Training! This may take a while.Please be patient...
Traning word2vec model took 22806 seconds
Note: The Word2Vec model hase saved to output/Word2Vec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/model-dir.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;cntext.W2VModel训练中考虑到了词组情况，为了将&amp;quot;科学技术&amp;quot;这类短语词(词组)也纳入到word2vec训练中， 使用到gensim.models.phrases.Phrase。&lt;/p&gt;
&lt;p&gt;大邓不会优化性能，训练word2vec时，预处理部分占用内存很大，  我用的服务器内存128G， 训练时间6.335小时。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三使用词向量&#34;&gt;三、使用词向量&lt;/h2&gt;
&lt;h3 id=&#34;31-录入模型&#34;&gt;3.1 录入模型&lt;/h3&gt;
&lt;p&gt;需要注意， 专利模型文件是三个哦， 三个是一个整体，不要随意删除&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/model-dir.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#2.0.0版本cntext，未公开&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cntext&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ct&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gensim.models&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyedVectors&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_w2v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Word2Vec/1000w专利摘要文本.100.6.bin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#如果没有cntext就用注释掉的代码，使用gensim导入&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#w2v = KeyedVectors.load(&amp;#39;Word2Vec/1000w专利摘要文本.100.6.bin&amp;#39;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Loading word2vec model...
&amp;lt;gensim.models.word2vec.Word2Vec at 0x2afb3f650&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;32-词汇量&#34;&gt;3.2 词汇量&lt;/h3&gt;
&lt;p&gt;查看模型中的词汇量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#模型中词汇量
len(w2v.wv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;1120752
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;33-查看词向量&#34;&gt;3.3 查看词向量&lt;/h3&gt;
&lt;p&gt;查看任意词的词向量，例如“&lt;strong&gt;创新&lt;/strong&gt;”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#查看 ”创新” 的词向量&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创新&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;array([-2.3267136 ,  2.3038454 ,  2.8232517 , -3.23959   , -2.9036384 ,
       -2.0450666 , -1.5516403 ,  0.00575857, -0.64638597,  1.3585284 ,
       -1.7491045 , -1.3659543 ,  1.9901325 , -1.5066692 ,  0.5094756 ,
       -1.7032526 , -0.35252815, -4.00833   ,  3.5424068 , -0.0426405 ,
       -0.24548595, -0.7675196 ,  2.366155  , -0.18583044,  0.83989865,
        1.5965563 ,  0.30173486, -0.80054444,  2.0068777 ,  1.770656  ,
        0.06608703, -2.5833828 ,  1.7995895 , -0.281671  ,  0.06354411,
        1.2502885 ,  1.1960976 , -0.19735877, -2.3988242 ,  1.0004953 ,
        0.950612  , -2.9186552 ,  2.5141885 ,  0.5993077 ,  1.2969743 ,
       -3.7506597 ,  2.6031113 , -0.30022916, -1.0615158 , -0.2402753 ,
       -0.29447314, -1.7101966 , -2.6812305 ,  1.1898949 , -0.34348696,
       -1.7013234 ,  0.27328706, -0.67401695, -2.8010712 , -1.5993378 ,
        0.55218667, -0.15136468,  0.67049694,  0.6745255 , -0.80350083,
        2.254024  , -0.8005472 , -2.0170422 ,  2.882873  , -0.46188217,
        0.8481421 , -1.3741239 ,  0.7432127 ,  1.1100464 , -0.64173746,
       -1.3264686 , -1.991515  , -0.27887765, -0.62801987, -3.0960062 ,
       -3.2658167 , -0.065689  ,  2.5853407 , -1.6554247 , -0.49887556,
       -2.146973  , -0.45912525,  0.28037554,  1.0885888 ,  1.6503012 ,
        1.0013059 ,  0.3194557 ,  3.0309706 , -4.5257196 ,  0.4644844 ,
        3.0723457 ,  0.49002075,  2.4370434 , -0.7763012 ,  3.2541463 ],
      dtype=float32)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;&lt;strong&gt;注意: 如果查询的词未在模型中，会出现KeyError报错&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;牛逼&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/error.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;34-最相似词&#34;&gt;3.4 最相似词&lt;/h3&gt;
&lt;p&gt;与&amp;rsquo;创新&#39;, &amp;lsquo;颠覆&amp;rsquo;最相似的20个词&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#词语列表中可传入任意多个词，
#大邓词穷，只想到这两个相似的种子词
w2v.wv.most_similar([&amp;#39;创新&amp;#39;, &amp;#39;颠覆&amp;#39;], topn=20)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[(&amp;#39;革新&amp;#39;, 0.8313461542129517),
 (&amp;#39;变革&amp;#39;, 0.8260877728462219),
 (&amp;#39;革命性&amp;#39;, 0.79015052318573),
 (&amp;#39;从根本上改变&amp;#39;, 0.7867545485496521),
 (&amp;#39;改革&amp;#39;, 0.7788680791854858),
 (&amp;#39;技术创新&amp;#39;, 0.7715167999267578),
 (&amp;#39;核心技术&amp;#39;, 0.7679213881492615),
 (&amp;#39;独创&amp;#39;, 0.7668667435646057),
 (&amp;#39;创新型&amp;#39;, 0.7655373811721802),
 (&amp;#39;颠覆性&amp;#39;, 0.7575560212135315),
 (&amp;#39;借鉴&amp;#39;, 0.7570509910583496),
 (&amp;#39;全新&amp;#39;, 0.7496902942657471),
 (&amp;#39;有别于&amp;#39;, 0.7489079236984253),
 (&amp;#39;打破常规&amp;#39;, 0.7397119402885437),
 (&amp;#39;改变目前&amp;#39;, 0.735921323299408),
 (&amp;#39;打破传统&amp;#39;, 0.7265862226486206),
 (&amp;#39;大胆&amp;#39;, 0.7247217893600464),
 (&amp;#39;加以改进&amp;#39;, 0.7223487496376038),
 (&amp;#39;划时代&amp;#39;, 0.7221404910087585),
 (&amp;#39;改变过去&amp;#39;, 0.7220492959022522)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;刚刚的运行，体现模型很好的学习到了专利摘要中的语义关系。&lt;/p&gt;
&lt;p&gt;如果我想开发三个词典，分别是 &lt;strong&gt;创新&lt;/strong&gt;、&lt;strong&gt;成本&lt;/strong&gt;、&lt;strong&gt;质量&lt;/strong&gt; ，想直接将结果保存到txt中，可以运行如下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;seeds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创新概念&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;创新&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;颠覆&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
         &lt;span class=&#34;s1&#34;&gt;&amp;#39;成本概念&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;成本&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
         &lt;span class=&#34;s1&#34;&gt;&amp;#39;质量概念&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;质量&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w2v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;#word2vec词向量&lt;/span&gt;
                     &lt;span class=&#34;n&#34;&gt;seeddict&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seeds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#种子词字典&lt;/span&gt;
                     &lt;span class=&#34;n&#34;&gt;topn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;#保留20个最相似的词&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Finish! 创新概念 candidates saved to output/Word2Vec
Finish! 成本概念 candidates saved to output/Word2Vec
Finish! 质量概念 candidates saved to output/Word2Vec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/similar-words.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;四获取资源&#34;&gt;四、获取资源&lt;/h2&gt;
&lt;p&gt;内容整理不易， 如果对本文感兴趣，可加微信 372335839， 备注「姓名-学校-专业」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;免费  链接: &lt;a href=&#34;https://pan.baidu.com/s/17eFFUoeHXAthlP3c1H78kA&#34;&gt;https://pan.baidu.com/s/17eFFUoeHXAthlP3c1H78kA&lt;/a&gt; 提取码: kh3s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;50元   获得&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cntext-2.0.0-py3-none-any.whl&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;150元 获得&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3751专利数据集&lt;/li&gt;
&lt;li&gt;cntext-2.0.0-py3-none-any.whl&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一说明">一、说明</h2>
<p><a href="https://textdata.cn/blog/2023-04-13-3571w-patent-dataset-in-china-mainland/"><strong>3571万条专利申请数据集(1985-2022年)</strong></a> 中随机抽取了28%的 「<strong>专利摘要</strong>」，构成6.14G的训练语料(千万级别)， 耗时6小时，训练得到word2vec模型。</p>
<blockquote>
<p>需要注意， 100%全部语料有24G， 使用服务区内存128G，跑了20小时预处理还没完成，内存就炸了。</p>
<p>没办法，我不会优化代码性能，所以只能抽取28%的文本数据来训练word2vec</p>
</blockquote>
<br>
<p>本文需要用到新cntext，因为bug较多， 直接上传到PyPi，将导致之前制作的课程和公众号推文相关内容全部重新一遍。</p>
<h2 id="一语料构建">一、语料构建</h2>
<p>随机抽取28%的记录，构成千万专利文本摘要训练语料。</p>
<p>为了防止电脑内存爆炸， 对任意单个大csv文件，分批次读取，每次读10w行。最终将专利摘要文本保存到txt文件中，编码方式为utf-8。</p>
<blockquote>
<p>如果想开发一些词典，可以跳过此部分内容，并不影响代码运行。</p>
</blockquote>
<p><img loading="lazy" src="img/screen-datasets.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#将代码放在csv数据文件夹内</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;1000w专利摘要.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">txtf</span><span class="p">:</span>
    <span class="c1">#获得当前文件夹内所有的csv文件路径</span>
    <span class="n">csvfs</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="s1">&#39;.csv&#39;</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">csvf</span> <span class="ow">in</span> <span class="n">csvfs</span><span class="p">:</span>
        <span class="c1">#分批次读取csv，每次读10w行</span>
        <span class="n">chunk_dfs</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csvf</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="mi">100000</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">chunk_df</span> <span class="ow">in</span> <span class="n">chunk_dfs</span><span class="p">:</span>
            <span class="c1">#剔除专利摘要为空的记录</span>
            <span class="n">chunk_df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;专利摘要&#39;</span><span class="p">])</span>
            <span class="c1">#随机抽取28%的记录</span>
            <span class="n">sample_df</span> <span class="o">=</span> <span class="n">chunk_df</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span><span class="mf">0.28</span><span class="p">)</span>
            <span class="n">txtf</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sample_df</span><span class="p">[</span><span class="s1">&#39;专利摘要&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()))</span>
</code></pre></div><p>最终得到的<strong>1000w专利摘要.txt</strong> 文件有6.14G<br><br><br></p>
<h2 id="二训练word2vec">二、训练word2vec</h2>
<p>我使用的自己 <strong>未公开</strong> 的cntext 2.0.0版本， Bug频出，等调整好了再公开。</p>
<h3 id="21-安装">2.1 安装</h3>
<p>将 <em><strong>cntext-2.0.0-py3-none-any.whl</strong></em> 放置于桌面，打开 <em><strong>cmd</strong></em>  (苹果电脑打开terminal)， 输入cd desktop</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd desktop
</code></pre></div><p>之后在 <em><strong>cmd</strong></em>  (苹果电脑打开terminal) 中使用 <em><strong>pip3</strong></em> 安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext-2.0.0-py3-none-any.whl
</code></pre></div><p>文末有 <em><strong>cntext-2.0.0-py3-none-any.whl</strong></em> 获取方式</p>
<br>
<p>Word2Vec模型参数</p>
<ul>
<li>window = 6</li>
<li>vector_size = 100</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#cntext为2.0.0</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">W2VModel</span><span class="p">(</span><span class="n">corpus_file</span><span class="o">=</span><span class="s1">&#39;1000w专利摘要.txt&#39;</span><span class="p">,</span>
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>

<span class="n">w2v_model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">vector_size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Starting Preprocessing Corpus ...
Starting Training! This may take a while.Please be patient...
Traning word2vec model took 22806 seconds
Note: The Word2Vec model hase saved to output/Word2Vec
</code></pre></div><p><img loading="lazy" src="img/model-dir.png" alt=""  />
</p>
<p>cntext.W2VModel训练中考虑到了词组情况，为了将&quot;科学技术&quot;这类短语词(词组)也纳入到word2vec训练中， 使用到gensim.models.phrases.Phrase。</p>
<p>大邓不会优化性能，训练word2vec时，预处理部分占用内存很大，  我用的服务器内存128G， 训练时间6.335小时。</p>
<p><br><br></p>
<h2 id="三使用词向量">三、使用词向量</h2>
<h3 id="31-录入模型">3.1 录入模型</h3>
<p>需要注意， 专利模型文件是三个哦， 三个是一个整体，不要随意删除</p>
<p><img loading="lazy" src="img/model-dir.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#2.0.0版本cntext，未公开</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_w2v</span><span class="p">(</span><span class="s1">&#39;Word2Vec/1000w专利摘要文本.100.6.bin&#39;</span><span class="p">)</span>
<span class="c1">#如果没有cntext就用注释掉的代码，使用gensim导入</span>
<span class="c1">#w2v = KeyedVectors.load(&#39;Word2Vec/1000w专利摘要文本.100.6.bin&#39;)</span>
<span class="n">w2v</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Loading word2vec model...
&lt;gensim.models.word2vec.Word2Vec at 0x2afb3f650&gt;
</code></pre></div><br>
<h3 id="32-词汇量">3.2 词汇量</h3>
<p>查看模型中的词汇量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#模型中词汇量
len(w2v.wv)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1120752
</code></pre></div><br>
<h3 id="33-查看词向量">3.3 查看词向量</h3>
<p>查看任意词的词向量，例如“<strong>创新</strong>”</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#查看 ”创新” 的词向量</span>
<span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="p">[</span><span class="s1">&#39;创新&#39;</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-2.3267136 ,  2.3038454 ,  2.8232517 , -3.23959   , -2.9036384 ,
       -2.0450666 , -1.5516403 ,  0.00575857, -0.64638597,  1.3585284 ,
       -1.7491045 , -1.3659543 ,  1.9901325 , -1.5066692 ,  0.5094756 ,
       -1.7032526 , -0.35252815, -4.00833   ,  3.5424068 , -0.0426405 ,
       -0.24548595, -0.7675196 ,  2.366155  , -0.18583044,  0.83989865,
        1.5965563 ,  0.30173486, -0.80054444,  2.0068777 ,  1.770656  ,
        0.06608703, -2.5833828 ,  1.7995895 , -0.281671  ,  0.06354411,
        1.2502885 ,  1.1960976 , -0.19735877, -2.3988242 ,  1.0004953 ,
        0.950612  , -2.9186552 ,  2.5141885 ,  0.5993077 ,  1.2969743 ,
       -3.7506597 ,  2.6031113 , -0.30022916, -1.0615158 , -0.2402753 ,
       -0.29447314, -1.7101966 , -2.6812305 ,  1.1898949 , -0.34348696,
       -1.7013234 ,  0.27328706, -0.67401695, -2.8010712 , -1.5993378 ,
        0.55218667, -0.15136468,  0.67049694,  0.6745255 , -0.80350083,
        2.254024  , -0.8005472 , -2.0170422 ,  2.882873  , -0.46188217,
        0.8481421 , -1.3741239 ,  0.7432127 ,  1.1100464 , -0.64173746,
       -1.3264686 , -1.991515  , -0.27887765, -0.62801987, -3.0960062 ,
       -3.2658167 , -0.065689  ,  2.5853407 , -1.6554247 , -0.49887556,
       -2.146973  , -0.45912525,  0.28037554,  1.0885888 ,  1.6503012 ,
        1.0013059 ,  0.3194557 ,  3.0309706 , -4.5257196 ,  0.4644844 ,
        3.0723457 ,  0.49002075,  2.4370434 , -0.7763012 ,  3.2541463 ],
      dtype=float32)
</code></pre></div><br>
<p><strong>注意: 如果查询的词未在模型中，会出现KeyError报错</strong>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="p">[</span><span class="s1">&#39;牛逼&#39;</span><span class="p">]</span>
</code></pre></div><p><img loading="lazy" src="img/error.png" alt=""  />
</p>
<br>
<h3 id="34-最相似词">3.4 最相似词</h3>
<p>与&rsquo;创新', &lsquo;颠覆&rsquo;最相似的20个词</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#词语列表中可传入任意多个词，
#大邓词穷，只想到这两个相似的种子词
w2v.wv.most_similar([&#39;创新&#39;, &#39;颠覆&#39;], topn=20)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;革新&#39;, 0.8313461542129517),
 (&#39;变革&#39;, 0.8260877728462219),
 (&#39;革命性&#39;, 0.79015052318573),
 (&#39;从根本上改变&#39;, 0.7867545485496521),
 (&#39;改革&#39;, 0.7788680791854858),
 (&#39;技术创新&#39;, 0.7715167999267578),
 (&#39;核心技术&#39;, 0.7679213881492615),
 (&#39;独创&#39;, 0.7668667435646057),
 (&#39;创新型&#39;, 0.7655373811721802),
 (&#39;颠覆性&#39;, 0.7575560212135315),
 (&#39;借鉴&#39;, 0.7570509910583496),
 (&#39;全新&#39;, 0.7496902942657471),
 (&#39;有别于&#39;, 0.7489079236984253),
 (&#39;打破常规&#39;, 0.7397119402885437),
 (&#39;改变目前&#39;, 0.735921323299408),
 (&#39;打破传统&#39;, 0.7265862226486206),
 (&#39;大胆&#39;, 0.7247217893600464),
 (&#39;加以改进&#39;, 0.7223487496376038),
 (&#39;划时代&#39;, 0.7221404910087585),
 (&#39;改变过去&#39;, 0.7220492959022522)]
</code></pre></div><br>
<p>刚刚的运行，体现模型很好的学习到了专利摘要中的语义关系。</p>
<p>如果我想开发三个词典，分别是 <strong>创新</strong>、<strong>成本</strong>、<strong>质量</strong> ，想直接将结果保存到txt中，可以运行如下代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">seeds</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;创新概念&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;创新&#39;</span><span class="p">,</span> <span class="s1">&#39;颠覆&#39;</span><span class="p">],</span>
         <span class="s1">&#39;成本概念&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;成本&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">],</span>
         <span class="s1">&#39;质量概念&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;质量&#39;</span><span class="p">]}</span>

<span class="n">ct</span><span class="o">.</span><span class="n">expand_dictionary</span><span class="p">(</span><span class="n">wv</span><span class="o">=</span><span class="n">w2v</span><span class="o">.</span><span class="n">wv</span><span class="p">,</span>       <span class="c1">#word2vec词向量</span>
                     <span class="n">seeddict</span><span class="o">=</span><span class="n">seeds</span><span class="p">,</span>  <span class="c1">#种子词字典</span>
                     <span class="n">topn</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>         <span class="c1">#保留20个最相似的词</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Finish! 创新概念 candidates saved to output/Word2Vec
Finish! 成本概念 candidates saved to output/Word2Vec
Finish! 质量概念 candidates saved to output/Word2Vec
</code></pre></div><p><img loading="lazy" src="img/similar-words.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="四获取资源">四、获取资源</h2>
<p>内容整理不易， 如果对本文感兴趣，可加微信 372335839， 备注「姓名-学校-专业」</p>
<ul>
<li>
<p>免费  链接: <a href="https://pan.baidu.com/s/17eFFUoeHXAthlP3c1H78kA">https://pan.baidu.com/s/17eFFUoeHXAthlP3c1H78kA</a> 提取码: kh3s</p>
</li>
<li>
<p>50元   获得</p>
<ul>
<li>cntext-2.0.0-py3-none-any.whl</li>
</ul>
</li>
<li>
<p>150元 获得</p>
<ul>
<li>3751专利数据集</li>
<li>cntext-2.0.0-py3-none-any.whl</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>bidict库 | Python双向映射功能，让字典更好用</title>
      <link>https://textdata.cn/blog/2023-11-10-bidirectional-mapping-library/</link>
      <pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-11-10-bidirectional-mapping-library/</guid>
      <description>&lt;p&gt;字典是一种键值对key-value pair数据结构， 用key查询到对应的值value， 但不能用value查到对应的key。但有时我们面对的分析任务，需要用value查到对应的key， bidict可以帮我们实现这一特性。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;一安装&#34;&gt;一、安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip install bidict
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;二快速开始&#34;&gt;二、快速开始&lt;/h2&gt;
&lt;h3 id=&#34;21-基本操作&#34;&gt;2.1 基本操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;bidict&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bidict&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bidict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;华为&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Huawei&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;比亚迪&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;BYD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;吉利&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Geely&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;微软&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Microsoft&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;s1&#34;&gt;&amp;#39;苹果&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Apple&amp;#39;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;华为&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Microsoft&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Huawei
微软
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;22-get方法&#34;&gt;2.2 get方法&lt;/h3&gt;
&lt;p&gt;跟Python字典类似，如果字典中没有对应的key，直接查询会出现KeyError错误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;三星&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
Cell In[5], line 1
----&amp;gt; 1 test_data[&amp;#39;三星&amp;#39;]

File /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/bidict/_base.py:523, in BidictBase.__getitem__(self, key)
    521 def __getitem__(self, key: KT) -&amp;gt; VT:
    522     &amp;#34;&amp;#34;&amp;#34;*x.__getitem__(key) ⟺ x[key]*&amp;#34;&amp;#34;&amp;#34;
--&amp;gt; 523     return self._fwdm[key]

KeyError: &amp;#39;三星&amp;#39;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;使用get方法则可避免错误发生。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;test_data.get(&amp;#39;三星&amp;#39;, &amp;#39;missing&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;missing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;23-update方法&#34;&gt;2.3 update方法&lt;/h3&gt;
&lt;p&gt;update方法可以用来&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改key的value&lt;/li&gt;
&lt;li&gt;新增key-value-pair&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#更新值&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;华为&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;HUAWEI&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#新增key-value-pair&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;三星&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Samsung&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;华为&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;三星&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;HUAWEI
Samsung
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;24-pop方法&#34;&gt;2.4 pop方法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;test_data.pop(&amp;#39;三星&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#39;Samsung&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;此时再查看会发现test_data已经没有了三星相关的键值对&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;test_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;bidict({&amp;#39;华为&amp;#39;: &amp;#39;HUAWEI&amp;#39;, 
&amp;#39;比亚迪&amp;#39;: &amp;#39;BYD&amp;#39;, 
&amp;#39;吉利&amp;#39;: &amp;#39;Geely&amp;#39;, 
&amp;#39;微软&amp;#39;: &amp;#39;Microsoft&amp;#39;, 
&amp;#39;苹果&amp;#39;: &amp;#39;Apple&amp;#39;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p>字典是一种键值对key-value pair数据结构， 用key查询到对应的值value， 但不能用value查到对应的key。但有时我们面对的分析任务，需要用value查到对应的key， bidict可以帮我们实现这一特性。</p>
<br>
<h2 id="一安装">一、安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install bidict
</code></pre></div><br>
<h2 id="二快速开始">二、快速开始</h2>
<h3 id="21-基本操作">2.1 基本操作</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">bidict</span> <span class="kn">import</span> <span class="n">bidict</span>

<span class="n">test_data</span> <span class="o">=</span> <span class="n">bidict</span><span class="p">({</span>
   <span class="s1">&#39;华为&#39;</span><span class="p">:</span> <span class="s1">&#39;Huawei&#39;</span><span class="p">,</span>
   <span class="s1">&#39;比亚迪&#39;</span><span class="p">:</span> <span class="s1">&#39;BYD&#39;</span><span class="p">,</span>
   <span class="s1">&#39;吉利&#39;</span><span class="p">:</span> <span class="s1">&#39;Geely&#39;</span><span class="p">,</span>
   <span class="s1">&#39;微软&#39;</span><span class="p">:</span> <span class="s1">&#39;Microsoft&#39;</span><span class="p">,</span>
   <span class="s1">&#39;苹果&#39;</span><span class="p">:</span> <span class="s1">&#39;Apple&#39;</span>
<span class="p">})</span>

<span class="nb">print</span><span class="p">(</span><span class="n">test_data</span><span class="p">[</span><span class="s1">&#39;华为&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">test_data</span><span class="o">.</span><span class="n">inverse</span><span class="p">[</span><span class="s1">&#39;Microsoft&#39;</span><span class="p">])</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Huawei
微软
</code></pre></div><br>
<h3 id="22-get方法">2.2 get方法</h3>
<p>跟Python字典类似，如果字典中没有对应的key，直接查询会出现KeyError错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_data</span><span class="p">[</span><span class="s1">&#39;三星&#39;</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
Cell In[5], line 1
----&gt; 1 test_data[&#39;三星&#39;]

File /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/bidict/_base.py:523, in BidictBase.__getitem__(self, key)
    521 def __getitem__(self, key: KT) -&gt; VT:
    522     &#34;&#34;&#34;*x.__getitem__(key) ⟺ x[key]*&#34;&#34;&#34;
--&gt; 523     return self._fwdm[key]

KeyError: &#39;三星&#39;

</code></pre></div><br>
<p>使用get方法则可避免错误发生。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">test_data.get(&#39;三星&#39;, &#39;missing&#39;)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">missing
</code></pre></div><br>
<h3 id="23-update方法">2.3 update方法</h3>
<p>update方法可以用来</p>
<ul>
<li>更改key的value</li>
<li>新增key-value-pair</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#更新值</span>
<span class="n">test_data</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">华为</span><span class="o">=</span><span class="s1">&#39;HUAWEI&#39;</span><span class="p">)</span>

<span class="c1">#新增key-value-pair</span>
<span class="n">test_data</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">三星</span><span class="o">=</span><span class="s1">&#39;Samsung&#39;</span><span class="p">)</span>


<span class="nb">print</span><span class="p">(</span><span class="n">test_data</span><span class="p">[</span><span class="s1">&#39;华为&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">test_data</span><span class="p">[</span><span class="s1">&#39;三星&#39;</span><span class="p">])</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">HUAWEI
Samsung
</code></pre></div><br>
<h3 id="24-pop方法">2.4 pop方法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">test_data.pop(&#39;三星&#39;)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&#39;Samsung&#39;
</code></pre></div><br>
<p>此时再查看会发现test_data已经没有了三星相关的键值对</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">test_data
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">bidict({&#39;华为&#39;: &#39;HUAWEI&#39;, 
&#39;比亚迪&#39;: &#39;BYD&#39;, 
&#39;吉利&#39;: &#39;Geely&#39;, 
&#39;微软&#39;: &#39;Microsoft&#39;, 
&#39;苹果&#39;: &#39;Apple&#39;})
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Pandas库 | 对高管数据xlsx中的简介字段做文本分析</title>
      <link>https://textdata.cn/blog/2023-08-07-using-str-contains-method-to-judge-some-specific-content-in-excel/</link>
      <pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-08-07-using-str-contains-method-to-judge-some-specific-content-in-excel/</guid>
      <description>&lt;h2 id=&#34;一高管数据集&#34;&gt;一、高管数据集&lt;/h2&gt;
&lt;h3 id=&#34;11-介绍&#34;&gt;1.1 介绍&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://textdata.cn/blog/2022-11-25-senior-manager-resume-dataset/&#34;&gt;数据集 | 90w条中国上市公司高管数据&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;90w 条中国上市公司高管简历，数据源-新浪财经，统计的日期范围&lt;strong&gt;1990-2021&lt;/strong&gt;年。&lt;/p&gt;
&lt;h3 id=&#34;12-字段&#34;&gt;1.2 字段&lt;/h3&gt;
&lt;p&gt;数据集的字段含，大多是从「个人简历」中计算衍生出来的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;- ID
- 姓名
- 证券代码
- 统计截止日期
- 个人简历
- 国籍
- 籍贯
- 籍贯所在地区代码
- 出生地
- 出生地所在地区代码
- 性别
- 年龄
- 毕业院校
- 学历  1=中专及中专以下； 2=大专； 3=本科； 4=硕士研究生； 5=博士研究生； 6=其他（以其他形式公布的学历，如荣誉博士、函授等）； 7=MBA/EMBA
- 专业
- 职称
- 是否领取薪酬
- 报告期报酬总额
- 年末持股数
- 是否高管团队成员
- 是否董事会成员
- 是否独立董事
- 是否兼任董事长和CEO
- 是否监事
- 具体职务
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;13-应用价值&#34;&gt;1.3 应用价值&lt;/h3&gt;
&lt;p&gt;这里粘贴部分应用高管数据论文&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何瑛,于文蕾,戴逸驰,王砚羽.高管职业经历与企业创新[J].管理世界,2019,35(11):174-192.&lt;/li&gt;
&lt;li&gt;杨林,和欣,顾红芳.高管团队经验、动态能力与企业战略突变：管理自主权的调节效应[J].管理世界,2020,36(06):168-188+201+252.&lt;/li&gt;
&lt;li&gt;周楷唐,麻志明,吴联生.高管学术经历与公司债务融资成本[J].经济研究,2017,52(07):169-183.&lt;/li&gt;
&lt;li&gt;陆瑶,张叶青,黎波,赵浩宇.高管个人特征与公司业绩——基于机器学习的经验证据[J].管理科学学报,2020,23(02):120-140.&lt;/li&gt;
&lt;li&gt;柳光强,孔高文.高管经管教育背景与企业内部薪酬差距[J].会计研究,2021,(03):110-121.&lt;/li&gt;
&lt;li&gt;郑建明,孙诗璐,李金甜.高管文化背景与企业债务成本——基于劳模文化的视角[J].会计研究,2021,(03):137-145.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二代码案例&#34;&gt;二、代码案例&lt;/h2&gt;
&lt;p&gt;用Python实现以下五个技术难题，主要对高管简介进行操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取xlsx文件（90w高管数据）&lt;/li&gt;
&lt;li&gt;简介文本中是否含指定词语(例如找出有【清华大学】求学经历的高管)&lt;/li&gt;
&lt;li&gt;大学高管数量排行榜&lt;/li&gt;
&lt;li&gt;统计文本中指定词语出现次数(例如统计每位高管内【大学】出现次数)&lt;/li&gt;
&lt;li&gt;找出每位高管的出生年份(用正则表达式)&lt;/li&gt;
&lt;li&gt;统计每位高管经历的时间点个数
&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;21-导入数据&#34;&gt;2.1 导入数据&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;高管数据.xlsx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#剔除「个人简历」字段中的缺失值&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dropna&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inplace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;22-简介文本长度&#34;&gt;2.2 简介文本长度&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#新增一个字段length，将简介文本长度保存到length中&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df[&amp;#39;length&amp;#39;] = df[&amp;#39;个人简历&amp;#39;].str.len()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0         161
1         154
2         395
3         306
4         335
         ... 
900882     40
900883     54
900884     71
900885     41
900886     62
Name: 个人简历, Length: 736970, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;23-简介文本中是否含指定词语&#34;&gt;2.3 简介文本中是否含指定词语&lt;/h3&gt;
&lt;p&gt;例如找出有【清华大学】求学经历的高管,这里直接使用**Series.str.contains()**方法来直接搜某字段(Series)是否含某个词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(df[df[&#39;个人简历&#39;].str.contains(&#39;清华大学&#39;)])&lt;/code&gt; 保留有「清华大学」学习经历的高管&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(df[df[&#39;个人简历&#39;].str.contains(&#39;北京大学&#39;)])&lt;/code&gt; 保留有「北京大学」学习经历的高管&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(df[df[&#39;个人简历&#39;].str.contains(&#39;清华大学|北京大学&#39;)])&lt;/code&gt; 保留有「清华大学」或「北京大学」学习经历的高管&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(df[df[&#39;个人简历&#39;].str.contains(&#39;清华大学&#39;) &amp;amp; df[&#39;个人简历&#39;].str.contains(&#39;北京大学&#39;)])&lt;/code&gt; 保留同时有「清华大学」和「北京大学」学习经历的高管&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三个(北大清华)表达式的数量应该是最多的(前两者之和)， 第四个表达式是最少。 注意, 逻辑【或|】【且&amp;amp;】可以有任意多个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#统计有【清华大学】学习经历的高管人数&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;清华大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10377
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;北京大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;8709
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;清华大学|北京大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;18647
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;清华大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;北京大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;439
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;24-大学高管数量排行榜&#34;&gt;2.4 大学高管数量排行榜&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#测试列表(凭记忆手动输入的大学，各位可以自己设计测试列表)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;test_universitys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;清华大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;北京大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;中国人民大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;浙江大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                    &lt;span class=&#34;s1&#34;&gt;&amp;#39;上海交通大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;西安交通大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;同济大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;南开大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;天津大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                    &lt;span class=&#34;s1&#34;&gt;&amp;#39;武汉大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;华中科技大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;中国科学技术大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;南京大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;s1&#34;&gt;&amp;#39;中山大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;中南大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;四川大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;重庆大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;兰州大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;湖南大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                    &lt;span class=&#34;s1&#34;&gt;&amp;#39;山东大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;吉林大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;大连理工大大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;东北大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;北京航空航天大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;中国地质大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;


&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;大学高管人数排行&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;uni_infos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;university&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test_universitys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;university&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;uni_infos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;university&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    
&lt;span class=&#34;n&#34;&gt;uni_infos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uni_infos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;uni_infos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;大学高管人数排行

[(&#39;清华大学&#39;, 10377),
 (&#39;北京大学&#39;, 8709),
 (&#39;中国人民大学&#39;, 7012),
 (&#39;浙江大学&#39;, 5816),
 (&#39;中山大学&#39;, 4065),
 (&#39;上海交通大学&#39;, 3844),
 (&#39;武汉大学&#39;, 3578),
 (&#39;南京大学&#39;, 3272),
 (&#39;西安交通大学&#39;, 2972),
 (&#39;南开大学&#39;, 2716),
 (&#39;湖南大学&#39;, 2502),
 (&#39;华中科技大学&#39;, 2356),
 (&#39;同济大学&#39;, 2089),
 (&#39;吉林大学&#39;, 2044),
 (&#39;四川大学&#39;, 1934),
 (&#39;山东大学&#39;, 1847),
 (&#39;中南大学&#39;, 1615),
 (&#39;天津大学&#39;, 1598),
 (&#39;重庆大学&#39;, 1440),
 (&#39;北京航空航天大学&#39;, 1334),
 (&#39;东北大学&#39;, 1241),
 (&#39;中国科学技术大学&#39;, 842),
 (&#39;兰州大学&#39;, 745),
 (&#39;中国地质大学&#39;, 437),
 (&#39;大连理工大大学&#39;, 0)]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;25-统计文本中指定词语出现次数&#34;&gt;2.5 统计文本中指定词语出现次数&lt;/h3&gt;
&lt;p&gt;例如统计每位高管内【大学】出现次数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0         0
1         2
2         0
3         0
4         0
         ..
900882    0
900883    0
900884    0
900885    0
900886    0
Name: 个人简历, Length: 736970, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;高管总人数: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#简历中无「大学」字眼&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;无大学经历高管人数:&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#简历中有「大学」字眼&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;有大学经历高管人数:&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;高管总人数:  736970
无大学经历高管人数: 515172
有大学经历高管人数: 221798
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#有些企业单位名字中带有「大学」，但这类企业非常少。&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#「大学」词语出现次数可以近似看做学习经历次数&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#如此， 1可以看做本科学历，2看做研究生学历， 3看做博士学历&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;大学&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_counts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;output_14_1.png&#34; alt=&#34;png&#34;  /&gt;

​&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;26-找出每位高管的出生年份用正则表达式&#34;&gt;2.6 找出每位高管的出生年份(用正则表达式)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;findall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\d&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{4}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0                                                    [1969]
1                      [1965, 1984, 1986, 1990, 1994, 1995]
2         [1972, 1998, 1999, 2000, 2015, 2002, 2016, 200...
3         [1960, 1982, 1989, 1990, 1991, 1991, 2002, 200...
4         [1962, 2009, 1985, 1996, 1996, 2008, 1993, 200...
                                ...                        
900882                                                   []
900883                                                   []
900884                                                   []
900885                                                   []
900886                                                   []
Name: 个人简历, Length: 736970, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;birth_year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;years&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#返回出生年份&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;years&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#没有年份的，返回0&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    
    
&lt;span class=&#34;c1&#34;&gt;#高管出生年份&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;findall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\d&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{4}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;birth_year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0         1969
1         1965
2         1972
3         1960
4         1962
          ... 
900882       0
900883       0
900884       0
900885       0
900886       0
Name: 个人简历, Length: 736970, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#高管时间点个数(感觉可以看做经历的个数)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;个人简历&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;findall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\d&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{4}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0          1
1          6
2         10
3         10
4          8
          ..
900882     0
900883     0
900884     0
900885     0
900886     0
Name: 个人简历, Length: 736970, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;获取代码&#34;&gt;获取代码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;top-ceo.ipynb&#34;&gt;&lt;strong&gt;点击下载ipynb代码文件&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h2 id="一高管数据集">一、高管数据集</h2>
<h3 id="11-介绍">1.1 介绍</h3>
<p><a href="https://textdata.cn/blog/2022-11-25-senior-manager-resume-dataset/">数据集 | 90w条中国上市公司高管数据</a></p>
<p>90w 条中国上市公司高管简历，数据源-新浪财经，统计的日期范围<strong>1990-2021</strong>年。</p>
<h3 id="12-字段">1.2 字段</h3>
<p>数据集的字段含，大多是从「个人简历」中计算衍生出来的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">- ID
- 姓名
- 证券代码
- 统计截止日期
- 个人简历
- 国籍
- 籍贯
- 籍贯所在地区代码
- 出生地
- 出生地所在地区代码
- 性别
- 年龄
- 毕业院校
- 学历  1=中专及中专以下； 2=大专； 3=本科； 4=硕士研究生； 5=博士研究生； 6=其他（以其他形式公布的学历，如荣誉博士、函授等）； 7=MBA/EMBA
- 专业
- 职称
- 是否领取薪酬
- 报告期报酬总额
- 年末持股数
- 是否高管团队成员
- 是否董事会成员
- 是否独立董事
- 是否兼任董事长和CEO
- 是否监事
- 具体职务
</code></pre></div><br>
<h3 id="13-应用价值">1.3 应用价值</h3>
<p>这里粘贴部分应用高管数据论文</p>
<ul>
<li>何瑛,于文蕾,戴逸驰,王砚羽.高管职业经历与企业创新[J].管理世界,2019,35(11):174-192.</li>
<li>杨林,和欣,顾红芳.高管团队经验、动态能力与企业战略突变：管理自主权的调节效应[J].管理世界,2020,36(06):168-188+201+252.</li>
<li>周楷唐,麻志明,吴联生.高管学术经历与公司债务融资成本[J].经济研究,2017,52(07):169-183.</li>
<li>陆瑶,张叶青,黎波,赵浩宇.高管个人特征与公司业绩——基于机器学习的经验证据[J].管理科学学报,2020,23(02):120-140.</li>
<li>柳光强,孔高文.高管经管教育背景与企业内部薪酬差距[J].会计研究,2021,(03):110-121.</li>
<li>郑建明,孙诗璐,李金甜.高管文化背景与企业债务成本——基于劳模文化的视角[J].会计研究,2021,(03):137-145.</li>
</ul>
<p><br><br></p>
<h2 id="二代码案例">二、代码案例</h2>
<p>用Python实现以下五个技术难题，主要对高管简介进行操作</p>
<ol>
<li>读取xlsx文件（90w高管数据）</li>
<li>简介文本中是否含指定词语(例如找出有【清华大学】求学经历的高管)</li>
<li>大学高管数量排行榜</li>
<li>统计文本中指定词语出现次数(例如统计每位高管内【大学】出现次数)</li>
<li>找出每位高管的出生年份(用正则表达式)</li>
<li>统计每位高管经历的时间点个数
&hellip;</li>
</ol>
<h3 id="21-导入数据">2.1 导入数据</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;高管数据.xlsx&#39;</span><span class="p">)</span>
<span class="c1">#剔除「个人简历」字段中的缺失值</span>
<span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">],</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><br>
<h3 id="22-简介文本长度">2.2 简介文本长度</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">len</span><span class="p">()</span>

<span class="c1">#新增一个字段length，将简介文本长度保存到length中</span>
<span class="c1">#df[&#39;length&#39;] = df[&#39;个人简历&#39;].str.len()</span>
</code></pre></div><pre><code>0         161
1         154
2         395
3         306
4         335
         ... 
900882     40
900883     54
900884     71
900885     41
900886     62
Name: 个人简历, Length: 736970, dtype: int64
</code></pre>
<br>
<h3 id="23-简介文本中是否含指定词语">2.3 简介文本中是否含指定词语</h3>
<p>例如找出有【清华大学】求学经历的高管,这里直接使用**Series.str.contains()**方法来直接搜某字段(Series)是否含某个词</p>
<ul>
<li><code>len(df[df['个人简历'].str.contains('清华大学')])</code> 保留有「清华大学」学习经历的高管</li>
<li><code>len(df[df['个人简历'].str.contains('北京大学')])</code> 保留有「北京大学」学习经历的高管</li>
<li><code>len(df[df['个人简历'].str.contains('清华大学|北京大学')])</code> 保留有「清华大学」或「北京大学」学习经历的高管</li>
<li><code>len(df[df['个人简历'].str.contains('清华大学') &amp; df['个人简历'].str.contains('北京大学')])</code> 保留同时有「清华大学」和「北京大学」学习经历的高管</li>
</ul>
<p>第三个(北大清华)表达式的数量应该是最多的(前两者之和)， 第四个表达式是最少。 注意, 逻辑【或|】【且&amp;】可以有任意多个</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#统计有【清华大学】学习经历的高管人数</span>
<span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s1">&#39;清华大学&#39;</span><span class="p">)])</span>
</code></pre></div><p>Run</p>
<pre><code>10377
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s1">&#39;北京大学&#39;</span><span class="p">)])</span>
</code></pre></div><p>Run</p>
<pre><code>8709
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s1">&#39;清华大学|北京大学&#39;</span><span class="p">)])</span>
</code></pre></div><p>Run</p>
<pre><code>18647
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s1">&#39;清华大学&#39;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s1">&#39;北京大学&#39;</span><span class="p">)])</span>
</code></pre></div><p>Run</p>
<pre><code>439
</code></pre>
<br>
<h3 id="24-大学高管数量排行榜">2.4 大学高管数量排行榜</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#测试列表(凭记忆手动输入的大学，各位可以自己设计测试列表)</span>
<span class="n">test_universitys</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;清华大学&#39;</span><span class="p">,</span> <span class="s1">&#39;北京大学&#39;</span><span class="p">,</span> <span class="s1">&#39;中国人民大学&#39;</span><span class="p">,</span> <span class="s1">&#39;浙江大学&#39;</span><span class="p">,</span> 
                    <span class="s1">&#39;上海交通大学&#39;</span><span class="p">,</span> <span class="s1">&#39;西安交通大学&#39;</span><span class="p">,</span> <span class="s1">&#39;同济大学&#39;</span><span class="p">,</span> <span class="s1">&#39;南开大学&#39;</span><span class="p">,</span> <span class="s1">&#39;天津大学&#39;</span><span class="p">,</span> 
                    <span class="s1">&#39;武汉大学&#39;</span><span class="p">,</span> <span class="s1">&#39;华中科技大学&#39;</span><span class="p">,</span> <span class="s1">&#39;中国科学技术大学&#39;</span><span class="p">,</span> <span class="s1">&#39;南京大学&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;中山大学&#39;</span><span class="p">,</span> <span class="s1">&#39;中南大学&#39;</span><span class="p">,</span> <span class="s1">&#39;四川大学&#39;</span><span class="p">,</span> <span class="s1">&#39;重庆大学&#39;</span><span class="p">,</span> <span class="s1">&#39;兰州大学&#39;</span><span class="p">,</span> <span class="s1">&#39;湖南大学&#39;</span><span class="p">,</span> 
                    <span class="s1">&#39;山东大学&#39;</span><span class="p">,</span> <span class="s1">&#39;吉林大学&#39;</span><span class="p">,</span> <span class="s1">&#39;大连理工大大学&#39;</span><span class="p">,</span> <span class="s1">&#39;东北大学&#39;</span><span class="p">,</span> <span class="s1">&#39;北京航空航天大学&#39;</span><span class="p">,</span> <span class="s1">&#39;中国地质大学&#39;</span><span class="p">]</span>


<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;大学高管人数排行&#39;</span><span class="p">)</span>

<span class="n">uni_infos</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">university</span> <span class="ow">in</span> <span class="n">test_universitys</span><span class="p">:</span>
    <span class="n">num</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="n">university</span><span class="p">)])</span>
    <span class="n">uni_infos</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">university</span><span class="p">,</span> <span class="n">num</span><span class="p">))</span>
    
<span class="n">uni_infos</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">uni_infos</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k</span><span class="p">:</span><span class="n">k</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">uni_infos</span>
</code></pre></div><p>Run</p>
<pre><code>大学高管人数排行

[('清华大学', 10377),
 ('北京大学', 8709),
 ('中国人民大学', 7012),
 ('浙江大学', 5816),
 ('中山大学', 4065),
 ('上海交通大学', 3844),
 ('武汉大学', 3578),
 ('南京大学', 3272),
 ('西安交通大学', 2972),
 ('南开大学', 2716),
 ('湖南大学', 2502),
 ('华中科技大学', 2356),
 ('同济大学', 2089),
 ('吉林大学', 2044),
 ('四川大学', 1934),
 ('山东大学', 1847),
 ('中南大学', 1615),
 ('天津大学', 1598),
 ('重庆大学', 1440),
 ('北京航空航天大学', 1334),
 ('东北大学', 1241),
 ('中国科学技术大学', 842),
 ('兰州大学', 745),
 ('中国地质大学', 437),
 ('大连理工大大学', 0)]
</code></pre>
<br>
<h3 id="25-统计文本中指定词语出现次数">2.5 统计文本中指定词语出现次数</h3>
<p>例如统计每位高管内【大学】出现次数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">&#39;大学&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>0         0
1         2
2         0
3         0
4         0
         ..
900882    0
900883    0
900884    0
900885    0
900886    0
Name: 个人简历, Length: 736970, dtype: int64
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;高管总人数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">))</span>
<span class="c1">#简历中无「大学」字眼</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;无大学经历高管人数:&#39;</span> <span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">&#39;大学&#39;</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">]))</span>
<span class="c1">#简历中有「大学」字眼</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;有大学经历高管人数:&#39;</span> <span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">&#39;大学&#39;</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]))</span>
</code></pre></div><p>Run</p>
<pre><code>高管总人数:  736970
无大学经历高管人数: 515172
有大学经历高管人数: 221798
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#有些企业单位名字中带有「大学」，但这类企业非常少。</span>
<span class="c1">#「大学」词语出现次数可以近似看做学习经历次数</span>
<span class="c1">#如此， 1可以看做本科学历，2看做研究生学历， 3看做博士学历</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">&#39;大学&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="output_14_1.png" alt="png"  />

​</p>
<br>
<h3 id="26-找出每位高管的出生年份用正则表达式">2.6 找出每位高管的出生年份(用正则表达式)</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;\d</span><span class="si">{4}</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>0                                                    [1969]
1                      [1965, 1984, 1986, 1990, 1994, 1995]
2         [1972, 1998, 1999, 2000, 2015, 2002, 2016, 200...
3         [1960, 1982, 1989, 1990, 1991, 1991, 2002, 200...
4         [1962, 2009, 1985, 1996, 1996, 2008, 1993, 200...
                                ...                        
900882                                                   []
900883                                                   []
900884                                                   []
900885                                                   []
900886                                                   []
Name: 个人简历, Length: 736970, dtype: object
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">birth_year</span><span class="p">(</span><span class="n">years</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1">#返回出生年份</span>
        <span class="k">return</span> <span class="n">years</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="c1">#没有年份的，返回0</span>
        <span class="k">return</span> <span class="mi">0</span>
    
    
<span class="c1">#高管出生年份</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;\d</span><span class="si">{4}</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">birth_year</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>0         1969
1         1965
2         1972
3         1960
4         1962
          ... 
900882       0
900883       0
900884       0
900885       0
900886       0
Name: 个人简历, Length: 736970, dtype: object
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#高管时间点个数(感觉可以看做经历的个数)</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;个人简历&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;\d</span><span class="si">{4}</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">ys</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">ys</span><span class="p">)))</span>
</code></pre></div><p>Run</p>
<pre><code>0          1
1          6
2         10
3         10
4          8
          ..
900882     0
900883     0
900884     0
900885     0
900886     0
Name: 个人简历, Length: 736970, dtype: int64
</code></pre>
<p><br><br></p>
<h2 id="获取代码">获取代码</h2>
<p><a href="top-ceo.ipynb"><strong>点击下载ipynb代码文件</strong></a></p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>可视化 | 使用groupby或resample按月份分组绘制高管违规量趋势图</title>
      <link>https://textdata.cn/blog/2023-05-31-resample-groupby-in-pandas/</link>
      <pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-05-31-resample-groupby-in-pandas/</guid>
      <description>&lt;p&gt;在数据分析和处理中，经常需要按照月份对时间序列数据进行分组和聚合。今天以高管违规数据为例， 想根据这份数据绘制月度高管违规量趋势，需要按照月份对数据进行分组，可以使用resample或groupby。本文知识点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;resample实现&lt;/li&gt;
&lt;li&gt;groupby实现&lt;/li&gt;
&lt;li&gt;resample和groupby运算结果是什么数据类型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;一resample实现步骤&#34;&gt;一、resample实现步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;导入xlsx数据 (&lt;a href=&#34;https://mp.weixin.qq.com/s/IFarSFd7v22PL2EjJdicXw&#34;&gt;点击跳转获取数据&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;使用set_index函数将&amp;rsquo;公告日期&amp;rsquo;列设置为索引，以便能够使用时间序列的功能。&lt;/li&gt;
&lt;li&gt;使用resample函数并指定频率为&amp;rsquo;M&#39;（表示按照月份）来对时间序列数据进行分组。使用了size函数获取每组的记录数&lt;/li&gt;
&lt;li&gt;打印了分组结果df_resampled，其中每一行代表一个月份的总和。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上市公司高管违规-原始数据.xlsx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;公告日期&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;公告日期&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;公告日期&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inplace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/df.png&#34; alt=&#34;&#34;  /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将&amp;#39;date&amp;#39;列设置为索引&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df.set_index(&amp;#39;公告日期&amp;#39;, inplace=True)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 按月份对时间序列数据进行分组&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df_resampled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#df_resampled = df.resample(&amp;#39;30D&amp;#39;).size()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 打印分组结果&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df_resampled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;    公告日期
    1997-01-31      1
    1997-02-28      0
    1997-03-31      0
    1997-04-30      0
    1997-05-31      0
                 ... 
    2022-08-31    453
    2022-09-30    479
    2022-10-31    216
    2022-11-30    525
    2022-12-31    343
    Freq: M, Length: 312, dtype: int64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;plt&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib_inline&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;matplotlib_inline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend_inline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_matplotlib_formats&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;png&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;svg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;scienceplots&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;platform&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;science&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;no-latex&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cjk-sc-font&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;platform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 获取操作系统类型&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Windows&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;SimHei&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Darwin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Arial Unicode MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sans-serif&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;matplotlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;font&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 设置全局字体&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;figsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xlabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;日期&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ylabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;月度违规量&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;月度上市公司高管违规量(1997-2022)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df_resampled&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/output_3_1.svg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;二groupby实现步骤&#34;&gt;二、groupby实现步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;导入xlsx数据&lt;/li&gt;
&lt;li&gt;使用set_index函数将&amp;rsquo;公告日期&amp;rsquo;列设置为索引，以便能够使用时间序列的功能。&lt;/li&gt;
&lt;li&gt;使用groupby函数并指定频率为&amp;rsquo;M&#39;（表示按照月份）来对时间序列数据进行分组。使用了size函数获取每组的记录数&lt;/li&gt;
&lt;li&gt;打印了分组结果df_resampled，其中每一行代表一个月份的总和。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上市公司高管违规-原始数据.xlsx&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;公告日期&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;公告日期&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 将&amp;#39;date&amp;#39;列设置为索引&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;公告日期&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inplace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 按月份对时间序列数据进行分组&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df2_grouped&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupby&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Grouper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 打印分组结果&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df2_grouped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;    公告日期
    1997-01-31      1
    1997-02-28      0
    1997-03-31      0
    1997-04-30      0
    1997-05-31      0
                 ... 
    2022-08-31    453
    2022-09-30    479
    2022-10-31    216
    2022-11-30    525
    2022-12-31    343
    Freq: M, Length: 312, dtype: int64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;plt&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib_inline&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;matplotlib_inline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend_inline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_matplotlib_formats&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;png&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;svg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;scienceplots&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;platform&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;science&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;no-latex&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cjk-sc-font&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;platform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 获取操作系统类型&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Windows&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;SimHei&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Darwin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Arial Unicode MS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sans-serif&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;matplotlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;font&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 设置全局字体&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;figsize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xlabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;日期&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ylabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;月度违规量&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;月度上市公司高管违规量(1997-2022)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;df2_grouped&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;img/output_3_1.svg&#34; alt=&#34;&#34;  /&gt;

​&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;三深入理解&#34;&gt;三、深入理解&lt;/h2&gt;
&lt;p&gt;df2.resample(&amp;lsquo;M&amp;rsquo;)或df2.groupby(pd.Grouper(freq=&amp;lsquo;M&amp;rsquo;))  返回的结果是什么类型的数据，有什么特点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;    &amp;lt;pandas.core.resample.DatetimeIndexResampler object at 0x7fece05fb160&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupby&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Grouper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;    &amp;lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fed31571df0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;只要遇到 &amp;lt; object at 0x7fece05fb160&amp;gt;，不知道这内部是什么。可以使用for循环拆解这个黑盒子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupby&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Grouper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; 2
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过检查发现df2.resample(&amp;lsquo;M&amp;rsquo;)或df2.groupby(pd.Grouper(freq=&amp;lsquo;M&amp;rsquo;)) 内部都是由tuple组成的，而每个tuple又由「日期」和对应的「dataframe」组成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;class &amp;#39;pandas._libs.tslibs.timestamps.Timestamp&amp;#39;&amp;gt; &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
&amp;lt;class &amp;#39;pandas._libs.tslibs.timestamps.Timestamp&amp;#39;&amp;gt; &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
&amp;lt;class &amp;#39;pandas._libs.tslibs.timestamps.Timestamp&amp;#39;&amp;gt; &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
&amp;lt;class &amp;#39;pandas._libs.tslibs.timestamps.Timestamp&amp;#39;&amp;gt; &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
&amp;lt;class &amp;#39;pandas._libs.tslibs.timestamps.Timestamp&amp;#39;&amp;gt; &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
&amp;lt;class &amp;#39;pandas._libs.tslibs.timestamps.Timestamp&amp;#39;&amp;gt; &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p>在数据分析和处理中，经常需要按照月份对时间序列数据进行分组和聚合。今天以高管违规数据为例， 想根据这份数据绘制月度高管违规量趋势，需要按照月份对数据进行分组，可以使用resample或groupby。本文知识点</p>
<ol>
<li>resample实现</li>
<li>groupby实现</li>
<li>resample和groupby运算结果是什么数据类型</li>
</ol>
<p><br><br></p>
<h2 id="一resample实现步骤">一、resample实现步骤</h2>
<ol>
<li>导入xlsx数据 (<a href="https://mp.weixin.qq.com/s/IFarSFd7v22PL2EjJdicXw">点击跳转获取数据</a>)</li>
<li>使用set_index函数将&rsquo;公告日期&rsquo;列设置为索引，以便能够使用时间序列的功能。</li>
<li>使用resample函数并指定频率为&rsquo;M'（表示按照月份）来对时间序列数据进行分组。使用了size函数获取每组的记录数</li>
<li>打印了分组结果df_resampled，其中每一行代表一个月份的总和。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;上市公司高管违规-原始数据.xlsx&#39;</span><span class="p">)</span>

<span class="n">df</span><span class="p">[</span><span class="s1">&#39;公告日期&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;公告日期&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;公告日期&#39;</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
<br></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 将&#39;date&#39;列设置为索引</span>
<span class="c1">#df.set_index(&#39;公告日期&#39;, inplace=True)</span>

<span class="c1"># 按月份对时间序列数据进行分组</span>
<span class="n">df_resampled</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">resample</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">()</span>
<span class="c1">#df_resampled = df.resample(&#39;30D&#39;).size()</span>

<span class="c1"># 打印分组结果</span>
<span class="nb">print</span><span class="p">(</span><span class="n">df_resampled</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    公告日期
    1997-01-31      1
    1997-02-28      0
    1997-03-31      0
    1997-04-30      0
    1997-05-31      0
                 ... 
    2022-08-31    453
    2022-09-30    479
    2022-10-31    216
    2022-11-30    525
    2022-12-31    343
    Freq: M, Length: 312, dtype: int64
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">matplotlib_inline</span>
<span class="n">matplotlib_inline</span><span class="o">.</span><span class="n">backend_inline</span><span class="o">.</span><span class="n">set_matplotlib_formats</span><span class="p">(</span><span class="s1">&#39;png&#39;</span><span class="p">,</span> <span class="s1">&#39;svg&#39;</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">scienceplots</span>
<span class="kn">import</span> <span class="nn">platform</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>


<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;no-latex&#39;</span><span class="p">,</span> <span class="s1">&#39;cjk-sc-font&#39;</span><span class="p">])</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>  <span class="c1"># 获取操作系统类型</span>

<span class="k">if</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Windows&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;SimHei&#39;</span><span class="p">}</span>
<span class="k">elif</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Darwin&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">}</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;sans-serif&#39;</span><span class="p">}</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s1">&#39;font&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">font</span><span class="p">)</span>  <span class="c1"># 设置全局字体</span>


<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;日期&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;月度违规量&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;月度上市公司高管违规量(1997-2022)&#39;</span><span class="p">)</span>
<span class="n">df_resampled</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_3_1.svg" alt=""  />
</p>
<p><br><br></p>
<h2 id="二groupby实现步骤">二、groupby实现步骤</h2>
<ol>
<li>导入xlsx数据</li>
<li>使用set_index函数将&rsquo;公告日期&rsquo;列设置为索引，以便能够使用时间序列的功能。</li>
<li>使用groupby函数并指定频率为&rsquo;M'（表示按照月份）来对时间序列数据进行分组。使用了size函数获取每组的记录数</li>
<li>打印了分组结果df_resampled，其中每一行代表一个月份的总和。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;上市公司高管违规-原始数据.xlsx&#39;</span><span class="p">)</span>

<span class="n">df2</span><span class="p">[</span><span class="s1">&#39;公告日期&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df2</span><span class="p">[</span><span class="s1">&#39;公告日期&#39;</span><span class="p">])</span>

<span class="c1"># 将&#39;date&#39;列设置为索引</span>
<span class="n">df2</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;公告日期&#39;</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># 按月份对时间序列数据进行分组</span>
<span class="n">df2_grouped</span> <span class="o">=</span> <span class="n">df2</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">Grouper</span><span class="p">(</span><span class="n">freq</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">size</span><span class="p">()</span>

<span class="c1"># 打印分组结果</span>
<span class="nb">print</span><span class="p">(</span><span class="n">df2_grouped</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    公告日期
    1997-01-31      1
    1997-02-28      0
    1997-03-31      0
    1997-04-30      0
    1997-05-31      0
                 ... 
    2022-08-31    453
    2022-09-30    479
    2022-10-31    216
    2022-11-30    525
    2022-12-31    343
    Freq: M, Length: 312, dtype: int64
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">matplotlib_inline</span>
<span class="n">matplotlib_inline</span><span class="o">.</span><span class="n">backend_inline</span><span class="o">.</span><span class="n">set_matplotlib_formats</span><span class="p">(</span><span class="s1">&#39;png&#39;</span><span class="p">,</span> <span class="s1">&#39;svg&#39;</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">scienceplots</span>
<span class="kn">import</span> <span class="nn">platform</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>


<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;no-latex&#39;</span><span class="p">,</span> <span class="s1">&#39;cjk-sc-font&#39;</span><span class="p">])</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>  <span class="c1"># 获取操作系统类型</span>

<span class="k">if</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Windows&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;SimHei&#39;</span><span class="p">}</span>
<span class="k">elif</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Darwin&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">}</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;sans-serif&#39;</span><span class="p">}</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s1">&#39;font&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">font</span><span class="p">)</span>  <span class="c1"># 设置全局字体</span>


<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;日期&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;月度违规量&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;月度上市公司高管违规量(1997-2022)&#39;</span><span class="p">)</span>
<span class="n">df2_grouped</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_3_1.svg" alt=""  />

​</p>
<p><br><br></p>
<h2 id="三深入理解">三、深入理解</h2>
<p>df2.resample(&lsquo;M&rsquo;)或df2.groupby(pd.Grouper(freq=&lsquo;M&rsquo;))  返回的结果是什么类型的数据，有什么特点。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">resample</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    &lt;pandas.core.resample.DatetimeIndexResampler object at 0x7fece05fb160&gt;
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">Grouper</span><span class="p">(</span><span class="n">freq</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">))</span> 
</code></pre></div><br>
<p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fed31571df0&gt;
</code></pre></div><br>
<p>只要遇到 &lt; object at 0x7fece05fb160&gt;，不知道这内部是什么。可以使用for循环拆解这个黑盒子</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">df2</span><span class="o">.</span><span class="n">resample</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
......
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">df2</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">Grouper</span><span class="p">(</span><span class="n">freq</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">)):</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
&lt;class &#39;tuple&#39;&gt; 2
......
</code></pre></div><p>经过检查发现df2.resample(&lsquo;M&rsquo;)或df2.groupby(pd.Grouper(freq=&lsquo;M&rsquo;)) 内部都是由tuple组成的，而每个tuple又由「日期」和对应的「dataframe」组成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">df2</span><span class="o">.</span><span class="n">resample</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
&lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
&lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
&lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
&lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
&lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
......
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>文本分析 | 词典法的两种代码实现</title>
      <link>https://textdata.cn/blog/2023-04-17-two-method-for-liwc/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-04-17-two-method-for-liwc/</guid>
      <description>但这周末，我使用1.4G的mda数据集， 5w条记录。尝试计算某类词的出现次数， 该词典含几百个词。在我的96G内存的macbook中，运行了十几个小时都没结果。于是同一个问题，本文分享了两种实现方法。一般情况下，使用「方法一」即可。当第一种方法运行不出结果，可以尝试「方法二」。</description>
      <content:encoded><![CDATA[<h2 id="一问题描述">一、问题描述</h2>
<p>对csv、xlsx等类型做词典法分析，经常用到apply方法，但是之前分享到案例数据量比较小， 词典都是几个词， 一般都能运行出结果。</p>
<blockquote>
<p><a href="https://textdata.cn/blog/liwc_python_text_mining/">liwc其实就是一种词典法</a></p>
</blockquote>
<p>但这周末，我使用1.4G的mda数据集， 5w条记录。尝试计算某类词的出现次数， 该词典含几百个词。在我的96G内存的macbook中，运行了十几个小时都没结果。</p>
<p>于是同一个问题，本文分享了两种实现方法。<strong>一般情况下，使用「方法一」即可。当第一种方法运行不出结果，可以尝试「方法二」。</strong></p>
<p><br><br></p>
<h2 id="二方法一">二、方法一</h2>
<h3 id="21-读取数据">2.1 读取数据</h3>
<p>导入含5000条记录的mda数据 test_mda.csv ，这里声明格式，防止年份和股票代码被识别为数字。</p>
<blockquote>
<p>如果想要完整的mda数据，可以前往购买[]</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#导入1000条测试数据</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;test_mda.csv&#39;</span><span class="p">,</span> <span class="n">converters</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;year&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">})</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></div><pre><code>5000
</code></pre>
<br>
<h3 id="22-准备词典">2.2 准备词典</h3>
<p>为了节约时间，也构造了只有几个词语的词典。</p>
<blockquote>
<p>自己随机手写的词典，如果需要应用的自己的研究中, 请将这几个概念词典扩充的完备一些，词汇量尽可能多一些。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#创新</span>
<span class="n">inovation_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;创新&#39;</span><span class="p">,</span> <span class="s1">&#39;科技&#39;</span><span class="p">,</span> <span class="s1">&#39;研发&#39;</span><span class="p">,</span> <span class="s1">&#39;高校&#39;</span><span class="p">,</span> <span class="s1">&#39;技术&#39;</span><span class="p">,</span> <span class="s1">&#39;科学&#39;</span><span class="p">,</span> <span class="s1">&#39;理论&#39;</span><span class="p">,</span> <span class="s1">&#39;专利&#39;</span><span class="p">,</span> <span class="s1">&#39;攻克&#39;</span><span class="p">,</span> <span class="s1">&#39;改良&#39;</span><span class="p">,</span> <span class="s1">&#39;工艺&#39;</span><span class="p">,</span> <span class="s1">&#39;前沿&#39;</span><span class="p">,</span> <span class="s1">&#39;尖端&#39;</span><span class="p">]</span>

<span class="c1">#环保</span>
<span class="n">green_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;绿色&#39;</span><span class="p">,</span> <span class="s1">&#39;节能&#39;</span><span class="p">,</span> <span class="s1">&#39;低碳&#39;</span><span class="p">,</span> <span class="s1">&#39;环保&#39;</span><span class="p">,</span> <span class="s1">&#39;环境友好&#39;</span><span class="p">,</span> <span class="s1">&#39;无污染&#39;</span><span class="p">]</span>

<span class="c1">#短视主义</span>
<span class="n">push_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;加快&#39;</span><span class="p">,</span> <span class="s1">&#39;尽快&#39;</span><span class="p">,</span> <span class="s1">&#39;抓紧&#39;</span><span class="p">,</span> <span class="s1">&#39;月底&#39;</span><span class="p">,</span> <span class="s1">&#39;年底&#39;</span><span class="p">,</span> <span class="s1">&#39;争取&#39;</span><span class="p">,</span> <span class="s1">&#39;马上&#39;</span><span class="p">,</span> <span class="s1">&#39;立刻&#39;</span><span class="p">,</span> <span class="s1">&#39;年内&#39;</span><span class="p">,</span> <span class="s1">&#39;数月&#39;</span><span class="p">,</span> <span class="s1">&#39;数年&#39;</span><span class="p">]</span>

<span class="c1">#模棱两可</span>

<span class="n">prob_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;可能&#39;</span><span class="p">,</span> <span class="s1">&#39;大概&#39;</span><span class="p">,</span> <span class="s1">&#39;左右&#39;</span><span class="p">,</span> <span class="s1">&#39;估计&#39;</span><span class="p">,</span> <span class="s1">&#39;大约&#39;</span><span class="p">]</span>
</code></pre></div><br>
<h3 id="23-设计函数">2.3 设计函数</h3>
<p>该函数能实现对 inovation_words 和  green_words两类词的词频统计;</p>
<p>返回的结果包括总词频、green词频、 inovation词频。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#创新</span>
<span class="n">inovation_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;创新&#39;</span><span class="p">,</span> <span class="s1">&#39;科技&#39;</span><span class="p">,</span> <span class="s1">&#39;研发&#39;</span><span class="p">,</span> <span class="s1">&#39;高校&#39;</span><span class="p">,</span> <span class="s1">&#39;技术&#39;</span><span class="p">,</span> <span class="s1">&#39;科学&#39;</span><span class="p">,</span> <span class="s1">&#39;理论&#39;</span><span class="p">,</span> <span class="s1">&#39;专利&#39;</span><span class="p">,</span> <span class="s1">&#39;攻克&#39;</span><span class="p">,</span> <span class="s1">&#39;改良&#39;</span><span class="p">,</span> <span class="s1">&#39;工艺&#39;</span><span class="p">,</span> <span class="s1">&#39;前沿&#39;</span><span class="p">,</span> <span class="s1">&#39;尖端&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">]</span>
<span class="c1">#环保</span>
<span class="n">green_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;绿色&#39;</span><span class="p">,</span> <span class="s1">&#39;节能&#39;</span><span class="p">,</span> <span class="s1">&#39;低碳&#39;</span><span class="p">,</span> <span class="s1">&#39;环保&#39;</span><span class="p">,</span> <span class="s1">&#39;环境友好&#39;</span><span class="p">,</span> <span class="s1">&#39;无污染&#39;</span><span class="p">]</span>
<span class="c1">#短视主义</span>
<span class="n">push_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;加快&#39;</span><span class="p">,</span> <span class="s1">&#39;尽快&#39;</span><span class="p">,</span> <span class="s1">&#39;抓紧&#39;</span><span class="p">,</span> <span class="s1">&#39;月底&#39;</span><span class="p">,</span> <span class="s1">&#39;年底&#39;</span><span class="p">,</span> <span class="s1">&#39;争取&#39;</span><span class="p">,</span> <span class="s1">&#39;马上&#39;</span><span class="p">,</span> <span class="s1">&#39;立刻&#39;</span><span class="p">,</span> <span class="s1">&#39;年内&#39;</span><span class="p">,</span> <span class="s1">&#39;数月&#39;</span><span class="p">,</span> <span class="s1">&#39;数年&#39;</span><span class="p">]</span>
<span class="c1">#模棱两可</span>
<span class="n">prob_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;可能&#39;</span><span class="p">,</span> <span class="s1">&#39;大概&#39;</span><span class="p">,</span> <span class="s1">&#39;左右&#39;</span><span class="p">,</span> <span class="s1">&#39;估计&#39;</span><span class="p">,</span> <span class="s1">&#39;大约&#39;</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">analysis_info</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">inovation_num</span><span class="p">,</span> <span class="n">green_num</span><span class="p">,</span> <span class="n">push_num</span><span class="p">,</span> <span class="n">prob_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">push_num</span> 
    
    <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">inovation_words</span><span class="p">:</span>
        <span class="n">inovation_num</span> <span class="o">=</span> <span class="n">inovation_num</span> <span class="o">+</span> <span class="n">words</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">green_words</span><span class="p">:</span>
        <span class="n">green_num</span> <span class="o">=</span> <span class="n">green_num</span> <span class="o">+</span> <span class="n">words</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        
    <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">push_words</span><span class="p">:</span>
        <span class="n">push_num</span> <span class="o">=</span> <span class="n">push_num</span> <span class="o">+</span> <span class="n">words</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        
    <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">prob_words</span><span class="p">:</span>
        <span class="n">prob_num</span> <span class="o">=</span> <span class="n">prob_num</span> <span class="o">+</span> <span class="n">words</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        
    <span class="n">res</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">&#39;words&#39;</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">),</span>
        <span class="s1">&#39;inovation&#39;</span><span class="p">:</span> <span class="n">inovation_num</span><span class="p">,</span>
        <span class="s1">&#39;green&#39;</span><span class="p">:</span> <span class="n">green_num</span><span class="p">,</span>
        <span class="s1">&#39;push&#39;</span><span class="p">:</span> <span class="n">push_num</span><span class="p">,</span>
        <span class="s1">&#39;prob&#39;</span><span class="p">:</span> <span class="n">prob_num</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="n">analysis_info</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;2022年是公司规范运作，坚持科技创新，保持持续发展。&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>words        15
inovation     2
green         0
push          0
prob          0
dtype: int64
</code></pre>
<br>
<h3 id="24-批量计算">2.4 批量计算</h3>
<p>选中text列，对该列批量运行 analysis_info 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">time</span>

<span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>

<span class="n">info_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">analysis_info</span><span class="p">)</span>
<span class="n">res_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df</span><span class="p">,</span> <span class="n">info_df</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;耗时 </span><span class="si">{}</span><span class="s1"> s&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">)))</span>

<span class="n">res_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">耗时 112 s
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="三方法二">三、方法二</h2>
<p>将中文分词后， 使用bag-of-words构造词语词频矩阵</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span> 
<span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">CountVectorizer</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">jieba</span>

<span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>

<span class="n">df</span><span class="p">[</span><span class="s1">&#39;new_text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">text</span><span class="p">:</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">text</span><span class="p">)))</span>

<span class="n">vectorize</span> <span class="o">=</span> <span class="n">CountVectorizer</span><span class="p">()</span>
<span class="n">dtm</span> <span class="o">=</span> <span class="n">vectorize</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">new_text</span><span class="p">)</span>
<span class="n">bagofword_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">dtm</span><span class="o">.</span><span class="n">toarray</span><span class="p">(),</span> 
                            <span class="n">columns</span><span class="o">=</span><span class="n">vectorize</span><span class="o">.</span><span class="n">get_feature_names_out</span><span class="p">())</span> 


<span class="c1">#创新</span>
<span class="n">inovation_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;创新&#39;</span><span class="p">,</span> <span class="s1">&#39;科技&#39;</span><span class="p">,</span> <span class="s1">&#39;研发&#39;</span><span class="p">,</span> <span class="s1">&#39;高校&#39;</span><span class="p">,</span> <span class="s1">&#39;技术&#39;</span><span class="p">,</span> <span class="s1">&#39;科学&#39;</span><span class="p">,</span> <span class="s1">&#39;理论&#39;</span><span class="p">,</span> <span class="s1">&#39;专利&#39;</span><span class="p">,</span> <span class="s1">&#39;攻克&#39;</span><span class="p">,</span> <span class="s1">&#39;改良&#39;</span><span class="p">,</span> <span class="s1">&#39;工艺&#39;</span><span class="p">,</span> <span class="s1">&#39;前沿&#39;</span><span class="p">,</span> <span class="s1">&#39;尖端&#39;</span><span class="p">]</span>
<span class="c1">#环保</span>
<span class="n">green_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;绿色&#39;</span><span class="p">,</span> <span class="s1">&#39;节能&#39;</span><span class="p">,</span> <span class="s1">&#39;低碳&#39;</span><span class="p">,</span> <span class="s1">&#39;环保&#39;</span><span class="p">,</span> <span class="s1">&#39;环境友好&#39;</span><span class="p">,</span> <span class="s1">&#39;无污染&#39;</span><span class="p">]</span>
<span class="c1">#短视主义</span>
<span class="n">push_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;加快&#39;</span><span class="p">,</span> <span class="s1">&#39;尽快&#39;</span><span class="p">,</span> <span class="s1">&#39;抓紧&#39;</span><span class="p">,</span> <span class="s1">&#39;月底&#39;</span><span class="p">,</span> <span class="s1">&#39;年底&#39;</span><span class="p">,</span> <span class="s1">&#39;争取&#39;</span><span class="p">,</span> <span class="s1">&#39;马上&#39;</span><span class="p">,</span> <span class="s1">&#39;立刻&#39;</span><span class="p">,</span> <span class="s1">&#39;年内&#39;</span><span class="p">,</span> <span class="s1">&#39;数月&#39;</span><span class="p">,</span> <span class="s1">&#39;数年&#39;</span><span class="p">]</span>
<span class="c1">#模棱两可</span>
<span class="n">prob_words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;可能&#39;</span><span class="p">,</span> <span class="s1">&#39;大概&#39;</span><span class="p">,</span> <span class="s1">&#39;左右&#39;</span><span class="p">,</span> <span class="s1">&#39;估计&#39;</span><span class="p">,</span> <span class="s1">&#39;大约&#39;</span><span class="p">]</span>

<span class="n">INOVATION_WORDS</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">inovation_words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">bagofword_df</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
<span class="n">GREEN_WORDS</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">green_words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">bagofword_df</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
<span class="n">PUSH_WORDS</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">push_words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">bagofword_df</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
<span class="n">PROB_WORDS</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">prob_words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">bagofword_df</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;year&#39;</span><span class="p">:</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">],</span>
        <span class="s1">&#39;code&#39;</span><span class="p">:</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">],</span>
        <span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">],</span>
        
        <span class="s1">&#39;inovation&#39;</span><span class="p">:</span> <span class="n">bagofword_df</span><span class="p">[</span><span class="n">INOVATION_WORDS</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
        <span class="s1">&#39;green&#39;</span><span class="p">:</span> <span class="n">bagofword_df</span><span class="p">[</span><span class="n">GREEN_WORDS</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
        <span class="s1">&#39;push&#39;</span><span class="p">:</span> <span class="n">bagofword_df</span><span class="p">[</span><span class="n">PUSH_WORDS</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
        <span class="s1">&#39;prob&#39;</span><span class="p">:</span> <span class="n">bagofword_df</span><span class="p">[</span><span class="n">PROB_WORDS</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
        <span class="s1">&#39;words&#39;</span><span class="p">:</span> <span class="n">bagofword_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span>


<span class="n">res_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;耗时 </span><span class="si">{}</span><span class="s1"> s&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">)))</span>

<span class="n">res_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">耗时 164 s
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="四讨论">四、讨论</h2>
<p>analysis_info(text) 函数内含有4个for循环，for循环是效率很低的操作。 随着所要计算的词典数n的增加， 方法一时间会随着n的增长而线性增长。</p>
<p>而方法二， 最费时间的瓶颈是将文本转化为数字(比较费时间)，后续的计算均为向量化(矩阵化)的数值计算，随着词典数n的增加， 所消耗的时间会越来越短。</p>
<p><strong>一般情况下，使用「方法一」即可。当第一种方法运行不出结果，可以尝试「方法二」。</strong></p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据集 | 3.9G 全国POI地点兴趣点数据集</title>
      <link>https://textdata.cn/blog/2023-04-12-china-poi-datasets/</link>
      <pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-04-12-china-poi-datasets/</guid>
      <description>POI是英文&amp;#34;Point of Interest&amp;#34;的缩写，中文翻译为&amp;#34;兴趣点&amp;#34;或&amp;#34;兴趣地点&amp;#34;。在地理信息系统（GIS）和位置服务领域中，POI通常指代一些在地图上显示的特定地点或地理位置，例如商店、餐厅、公园、景点等。</description>
      <content:encoded><![CDATA[<p>POI是英文&quot;Point of Interest&quot;的缩写，中文翻译为&quot;兴趣点&quot;或&quot;兴趣地点&quot;。在地理信息系统（GIS）和位置服务领域中，POI通常指代一些在地图上显示的特定地点或地理位置，例如商店、餐厅、公园、景点等。</p>
<p>与之前分享的 <a href="https://textdata.cn/blog/2023-04-12-china-mainland-corporate-registration-information/"><strong>数据集 | 2亿条中国大陆工商企业注册信息</strong></a> ，可以结合起来使用。</p>
<br>
<h2 id="一数据集概况">一、数据集概况</h2>
<p>370个地市， 截止2022年12月份的POI数据集。压缩文件夹体积800M，解压3.9G。</p>
<p><img loading="lazy" src="img/size.png" alt=""  />
</p>
<p><img loading="lazy" src="img/code.png" alt=""  />
</p>
<p>解压后， 在「<strong>全国POI数据(2022年12月)</strong>」文件夹内新建一个 「<strong>代码.ipynb</strong>」，运行如下代码查看文件夹内的文件列表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">glob</span>

<span class="c1"># 查询</span>
<span class="n">files</span> <span class="o">=</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;*/*.csv&#39;</span><span class="p">)</span>
<span class="n">files</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [
    &#39;北京POI数据/北京市POI数据.csv&#39;,
    &#39;浙江省POI数据/杭州市POI数据.csv&#39;, 
     &#39;吉林省POI数据/长春市POI数据.csv&#39;,
     &#39;陕西省POI数据/西安市POI数据.csv&#39;,
     &#39;江苏省POI数据/南京市POI数据.csv&#39;,
     &#39;山东省POI数据/青岛市POI数据.csv&#39;,
     &#39;湖南省POI数据/长沙市POI数据.csv&#39;,
     &#39;辽宁省POI数据/大连市POI数据.csv&#39;,
     ...
     &#39;河北省POI数据/衡水市POI数据.csv&#39;,
    ]
</code></pre></div><br>
<p>地级市csv文件个数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">370
</code></pre></div><br>
<h2 id="二读取poi数据">二、读取POI数据</h2>
<p>读取北京、天津、青岛、上海、广州、杭州、长沙这几个城市poi数据(大家可以根据自己的兴趣更改城市)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">bj_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;北京POI数据/北京市POI数据.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">qd_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;山东省POI数据/青岛市POI数据.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">tj_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;天津市POI数据/天津市POI数据.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>


<span class="n">sh_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;上海POI数据/上海市POI数据.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">gz_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;广东省POI数据/广州市POI数据.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">hz_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;浙江省POI数据/杭州市POI数据.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">cs_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;湖南省POI数据/长沙市POI数据.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>


<span class="n">hz_df</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#该文件poi记录数</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;北京poi记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">bj_df</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;天津poi记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">tj_df</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;青岛poi记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">qd_df</span><span class="p">))</span>

<span class="nb">print</span><span class="p">()</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上海poi记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">sh_df</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;广州poi记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">gz_df</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;杭州poi记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">hz_df</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;长沙poi记录数: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">cs_df</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    北京poi记录数:  679413
    天津poi记录数:  409020
    青岛poi记录数:  426314
    
    上海poi记录数:  780347
    广州poi记录数:  793056
    杭州poi记录数:  534595
    长沙poi记录数:  406489
</code></pre></div><br>
<h2 id="三简单分析">三、简单分析</h2>
<p>对比北京、天津、青岛、上海、广州、杭州、长沙这几个城市poi大类占比情况，探索性分析， 大家可以根据自己的兴趣更改城市</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">import</span> <span class="nn">matplotlib_inline</span>
<span class="n">matplotlib_inline</span><span class="o">.</span><span class="n">backend_inline</span><span class="o">.</span><span class="n">set_matplotlib_formats</span><span class="p">(</span><span class="s1">&#39;png&#39;</span><span class="p">,</span> <span class="s1">&#39;svg&#39;</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">scienceplots</span>
<span class="kn">import</span> <span class="nn">platform</span>

<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">([</span><span class="s1">&#39;science&#39;</span><span class="p">,</span> <span class="s1">&#39;no-latex&#39;</span><span class="p">,</span> <span class="s1">&#39;cjk-sc-font&#39;</span><span class="p">])</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>  <span class="c1"># 获取操作系统类型</span>

<span class="k">if</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Windows&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;SimHei&#39;</span><span class="p">}</span>
<span class="k">elif</span> <span class="n">system</span> <span class="o">==</span> <span class="s1">&#39;Darwin&#39;</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">}</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">font</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;family&#39;</span><span class="p">:</span> <span class="s1">&#39;sans-serif&#39;</span><span class="p">}</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s1">&#39;font&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">font</span><span class="p">)</span>  <span class="c1"># 设置全局字体</span>




<span class="c1"># 统计各城市的大类POI数量</span>
<span class="n">bj_poi_count</span> <span class="o">=</span> <span class="n">bj_df</span><span class="p">[</span><span class="s1">&#39;大类&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">tj_poi_count</span> <span class="o">=</span> <span class="n">tj_df</span><span class="p">[</span><span class="s1">&#39;大类&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">qd_poi_count</span> <span class="o">=</span> <span class="n">qd_df</span><span class="p">[</span><span class="s1">&#39;大类&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>


<span class="n">sh_poi_count</span> <span class="o">=</span> <span class="n">sh_df</span><span class="p">[</span><span class="s1">&#39;大类&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">hz_poi_count</span> <span class="o">=</span> <span class="n">hz_df</span><span class="p">[</span><span class="s1">&#39;大类&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">gz_poi_count</span> <span class="o">=</span> <span class="n">gz_df</span><span class="p">[</span><span class="s1">&#39;大类&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">cs_poi_count</span> <span class="o">=</span> <span class="n">cs_df</span><span class="p">[</span><span class="s1">&#39;大类&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>



<span class="c1"># 创建一个包含所有城市的分组条形图</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="c1"># 计算每个城市的条形图位置</span>
<span class="n">bar_width</span> <span class="o">=</span> <span class="mf">0.07</span>

<span class="n">bar_positions</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bj_poi_count</span><span class="p">))</span>

<span class="n">bj_bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">bar_positions</span><span class="p">,</span> 
                 <span class="n">bj_poi_count</span><span class="p">,</span> 
                 <span class="n">width</span><span class="o">=</span><span class="n">bar_width</span><span class="p">,</span> 
                 <span class="n">label</span><span class="o">=</span><span class="s1">&#39;北京&#39;</span><span class="p">)</span>


<span class="n">tj_bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">([</span><span class="n">p</span> <span class="o">+</span> <span class="n">bar_width</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">bar_positions</span><span class="p">],</span> 
                 <span class="n">tj_poi_count</span><span class="p">,</span> 
                 <span class="n">width</span><span class="o">=</span><span class="n">bar_width</span><span class="p">,</span> 
                 <span class="n">label</span><span class="o">=</span><span class="s1">&#39;天津&#39;</span><span class="p">)</span>


<span class="n">qd_bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">([</span><span class="n">p</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">bar_width</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">bar_positions</span><span class="p">],</span> 
                 <span class="n">dl_poi_count</span><span class="p">,</span> 
                 <span class="n">width</span><span class="o">=</span><span class="n">bar_width</span><span class="p">,</span> 
                 <span class="n">label</span><span class="o">=</span><span class="s1">&#39;青岛&#39;</span><span class="p">)</span>


<span class="n">sh_bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">([</span><span class="n">p</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">bar_width</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">bar_positions</span><span class="p">],</span> 
                 <span class="n">sh_poi_count</span><span class="p">,</span> 
                 <span class="n">width</span><span class="o">=</span><span class="n">bar_width</span><span class="p">,</span> 
                 <span class="n">label</span><span class="o">=</span><span class="s1">&#39;上海&#39;</span><span class="p">)</span>


<span class="n">hz_bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">([</span><span class="n">p</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">bar_width</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">bar_positions</span><span class="p">],</span> 
                 <span class="n">hz_poi_count</span><span class="p">,</span> 
                 <span class="n">width</span><span class="o">=</span><span class="n">bar_width</span><span class="p">,</span> 
                 <span class="n">label</span><span class="o">=</span><span class="s1">&#39;杭州&#39;</span><span class="p">)</span>

<span class="n">gz_bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">([</span><span class="n">p</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">bar_width</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">bar_positions</span><span class="p">],</span> 
                 <span class="n">gz_poi_count</span><span class="p">,</span> 
                 <span class="n">width</span><span class="o">=</span><span class="n">bar_width</span><span class="p">,</span> 
                 <span class="n">label</span><span class="o">=</span><span class="s1">&#39;广州&#39;</span><span class="p">)</span>


<span class="n">cs_bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">([</span><span class="n">p</span> <span class="o">+</span> <span class="mi">6</span> <span class="o">*</span> <span class="n">bar_width</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">bar_positions</span><span class="p">],</span> 
                 <span class="n">cs_poi_count</span><span class="p">,</span> 
                 <span class="n">width</span><span class="o">=</span><span class="n">bar_width</span><span class="p">,</span> 
                 <span class="n">label</span><span class="o">=</span><span class="s1">&#39;长沙&#39;</span><span class="p">)</span>


<span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;POI地理兴趣点城市比较&#39;</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;POI大类&#39;</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s1">&#39;POI类别占比&#39;</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">([</span><span class="n">p</span> <span class="o">+</span> <span class="n">bar_width</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">bar_positions</span><span class="p">])</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_xticklabels</span><span class="p">(</span><span class="n">bj_poi_count</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>  <span class="c1"># 添加图例</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_8_0.svg" alt="svg"  />
</p>
<p>7个城市中，从poi大类占比来看，</p>
<ul>
<li>交通设施&amp;科教文化&amp;休闲娱乐&amp;运动健身&amp;金融机构&amp;旅游景点， 北京位列top1</li>
<li>购物消费， 长沙位列top1</li>
<li>餐饮美食， 广州位列top1</li>
<li>生活服务&amp;公司企业， 上海位列top1</li>
<li>酒店住宿， 杭州位列top1</li>
<li>汽车相关， 天津位列top1</li>
</ul>
<br>
<h2 id="数据获取">数据获取</h2>
<p><a href="https://mp.weixin.qq.com/s/YA1MdUUe9fntV6d6nN6Z6g">付费内容， 点击链接进入跳转页面</a> 有疑问，加微信372335839， 备注「姓名-学校-专业」</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Pandas库 | 使用 df.query 字符串表达式进行数据筛选</title>
      <link>https://textdata.cn/blog/2023-01-30-query-method-in-dataframe/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-01-30-query-method-in-dataframe/</guid>
      <description>数据分析中筛选是一个很重要的操作，在pandas.DataFrame中如何进行筛选，今天简单分享一下。在query方法中传入字段表达式</description>
      <content:encoded><![CDATA[<p>数据分析中筛选是一个很重要的操作，在pandas.DataFrame中如何进行筛选，今天简单分享一下。</p>
<br>
<h2 id="一读入数据dataxlsx">一、读入<a href="data.xlsx">数据</a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|    | birthday   | name    | text                         |   age | gender   |   height |   weight |
|  0 | 1985/10/08 | Alice   | 我很开心，每天都这么快乐，我很幸福 |    35 | female   |      175 |       55 |
|  1 | 95.07.07   | Mary    | 我很难过                       |    25 | female   |      165 |       50 |
|  2 | 01-11-10   | Mike    | 唉，真难受                     |    19 | male     |      180 |       75 |
|  3 | 90/2/8     | Smith   | 无所谓开心还是难过              |    30 | male     |      175 |       70 |
|  4 | 93-1-5     | Henry   | 每天赚一万，真爽！              |    27 | male     |      185 |       80 |
|  5 | 1988/2/9   | William | 爽歪歪                        |    32 | male     |      177 |       76 |
|  6 | 1986-03-21 | Will    | 天气很凉爽，很舒服              |    34 | male     |      180 |       85 |
|  7 | 1984.06.9  | Qunique | 每天开心                      |    36 | female   |      168 |       62 |
|  8 | 1993.07.09 | Sara    | 难过悲伤                      |    27 | female   |      175 |       66 |
|  9 | 92/08/09   | Hillary | 美满幸福                      |    28 | male     |      190 |       85 |
</code></pre></div><p><br><br></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#字段的数据类型</span>
<span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>
</code></pre></div><pre><code>birthday    object
name        object
text        object
age          int64
gender      object
height       int64
weight       int64
dtype: object
</code></pre>
<p><br><br></p>
<h2 id="二筛选">二、筛选</h2>
<p>查询符合条件的记录, 有两种实现方法</p>
<ul>
<li>方法1 <code>逻辑布尔值直接传入df[]</code></li>
<li>方法2 <code>在query方法中传入字段表达式</code></li>
</ul>
<br>
<h3 id="21-方法1">2.1 方法1</h3>
<p><code>逻辑布尔值直接传入df[]</code></p>
<p>筛选出年龄大于25岁，身高165以上, <strong>且</strong> 为女性的记录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#df[(df[&#39;age&#39;] &gt; 25) &amp; (df[&#39;height&#39;] &gt; 165) &amp; (df[&#39;gender&#39;] == &#39;female&#39;)]</span>
<span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="o">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">25</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="mi">165</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">gender</span><span class="o">==</span><span class="s1">&#39;female&#39;</span><span class="p">)]</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|    | birthday   | name    | text                           |   age | gender   |   height |   weight |
|  0 | 1985/10/08 | Alice   | 我很开心，每天都这么快乐，我很幸福  |    35 | female   |      175 |       55 |
|  7 | 1984.06.9  | Qunique | 每天开心                        |    36 | female   |      168 |       62 |
|  8 | 1993.07.09 | Sara    | 难过悲伤                        |    27 | female   |      175 |       66 |
</code></pre></div><p>​</p>
<br>
<h3 id="22-方法2">2.2 方法2</h3>
<p><code>在query方法中传入字段表达式</code></p>
<p>筛选出年龄大于25岁，身高165以上, <strong>且</strong> 为女性的记录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;(age &gt; 25) &amp; (height &gt; 165) &amp; (gender == &#34;female&#34;)&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|    | birthday   | name    | text                           |   age | gender   |   height |   weight |
|  0 | 1985/10/08 | Alice   | 我很开心，每天都这么快乐，我很幸福  |    35 | female   |      175 |       55 |
|  7 | 1984.06.9  | Qunique | 每天开心                        |    36 | female   |      168 |       62 |
|  8 | 1993.07.09 | Sara    | 难过悲伤                        |    27 | female   |      175 |       66 |
</code></pre></div><p><br><br></p>
<p>可见query让查询和筛选代码变的很简洁，代码更具可阅读性和理解性。</p>
<p>但如果条件中使用了变量该如何撰写？</p>
<p><br><br></p>
<h2 id="三query表达式中的变量">三、query表达式中的变量</h2>
<p>query字符串表达式中如果含有变量 <code>var</code>， 需要在该变量前加 <code>@</code>,</p>
<p>即在query字符串表达式中 <code>@var</code> 可以调用表达式字符串外的变量var</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">min_age</span> <span class="o">=</span> <span class="mi">25</span>

<span class="c1">#年龄大于25</span>
<span class="n">df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;age &gt; @min_age&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|    | birthday   | name    | text                         |   age | gender   |   height |   weight |
|  0 | 1985/10/08 | Alice   | 我很开心，每天都这么快乐，我很幸福 |    35 | female   |      175 |       55 |
|  3 | 90/2/8     | Smith   | 无所谓开心还是难过              |    30 | male     |      175 |       70 |
|  4 | 93-1-5     | Henry   | 每天赚一万，真爽！              |    27 | male     |      185 |       80 |
|  5 | 1988/2/9   | William | 爽歪歪                        |    32 | male     |      177 |       76 |
|  6 | 1986-03-21 | Will    | 天气很凉爽，很舒服              |    34 | male     |      180 |       85 |
|  7 | 1984.06.9  | Qunique | 每天开心                      |    36 | female   |      168 |       62 |
|  8 | 1993.07.09 | Sara    | 难过悲伤                      |    27 | female   |      175 |       66 |
|  9 | 92/08/09   | Hillary | 美满幸福                      |    28 | male     |      190 |       85 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">g</span> <span class="o">=</span> <span class="s1">&#39;female&#39;</span>
<span class="n">min_age</span> <span class="o">=</span> <span class="mi">25</span>
<span class="n">min_height</span> <span class="o">=</span> <span class="mi">165</span>

<span class="c1">#筛选出年龄大于25岁，身高165以上, **且** 为女性的记录</span>
<span class="n">df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;(age &gt; @min_age) &amp; (height &gt; @min_height) &amp; (gender == @g)&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|    | birthday   | name    | text                           |   age | gender   |   height |   weight |
|  0 | 1985/10/08 | Alice   | 我很开心，每天都这么快乐，我很幸福  |    35 | female   |      175 |       55 |
|  7 | 1984.06.9  | Qunique | 每天开心                        |    36 | female   |      168 |       62 |
|  8 | 1993.07.09 | Sara    | 难过悲伤                        |    27 | female   |      175 |       66 |
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bloxs包 | 可在notebook中使用的交互可视化包</title>
      <link>https://textdata.cn/blog/bloxs_interactive_visualization/</link>
      <pubDate>Fri, 01 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/bloxs_interactive_visualization/</guid>
      <description>Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。</description>
      <content:encoded><![CDATA[<p>Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。</p>
<p>它适用于：Jupyter Notebook、Google Colab、Deepnote、Kaggle Notebook、<a href="https://github.com/mljar/mercury">Mercury</a>。</p>
<p><img loading="lazy" src="img/bloxs_demo.gif" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install bloxs
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">from bloxs import B
B(1234, &#34;Bloxs in notebook!&#34;)
</code></pre></div><p><img loading="lazy" src="img/test_bloxs.png" alt=""  />
</p>
<br>
<h2 id="案例">案例</h2>
<table>
<thead>
<tr>
<th>Bloxs</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td><img loading="lazy" src="img/number.png" alt=""  />
</td>
<td><code>B(1234, &quot;Bloxs in notebook!&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/percent.png" alt=""  />
</td>
<td><code>B(1999, &quot;Percent change!&quot;, percent_change=10)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/emojis.png" alt=""  />
</td>
<td><code>B(&quot;🎉🎉🎉&quot;, &quot;Works with emojis&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/progress.png" alt=""  />
</td>
<td><code>B(&quot;68%&quot;, &quot;Loading progress&quot;, progress=68)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/progress_color.png" alt=""  />
</td>
<td><code>B(&quot;68%&quot;, &quot;Loading progress&quot;, progress=68, color=&quot;green&quot;)</code> 颜色color参数可以设为&quot;blue&quot;, &ldquo;red&rdquo;, &ldquo;green&rdquo; 或十六进制表示 (例如&quot;#fa33fa&quot;)</td>
</tr>
<tr>
<td><img loading="lazy" src="img/line_chart.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display line chart&quot;, points=[1,4,2,3,5,6])</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/line_chart_color.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display line chart&quot;, points=[1,4,2,3,5,6], color=&quot;red&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/stepped.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display stepped chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;stepped&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/bar_chart.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display bar chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;bar&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/bar_chart_color.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display bar chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;bar&quot;, color=&quot;green&quot;)</code></td>
</tr>
</tbody>
</table>
<br>
<p>可以在一行内整合多个图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">B([
    B(1999, &#34;Percent change!&#34;, percent_change=10),
    B(&#34;🎉🎉🎉&#34;, &#34;Works with emojis&#34;),
    B(&#34;68%&#34;, &#34;Loading progress&#34;, progress=68),
    B(1234, &#34;Bloxs in notebook!&#34;)
])
</code></pre></div><p><img loading="lazy" src="img/several_bloxs_2.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">B([
    B(&#34;786&#34;, &#34;Display bar chart&#34;, points=[1,4,2,3,5,6], chart_type=&#34;bar&#34;, color=&#34;green&#34;),
    B(&#34;123&#34;, &#34;Display line chart&#34;, points=[1,4,2,3,5,6], color=&#34;red&#34;),
    B(&#34;123&#34;, &#34;Display stepped chart&#34;, points=[1,4,2,3,5,6], chart_type=&#34;stepped&#34;)
])
</code></pre></div><p><img loading="lazy" src="img/several_bloxs.png" alt=""  />
</p>
<br>
<p>如果想在自己电脑中实验上述代码，可以点击 <a href="https://deepnote.com/project/bloxs-ZNGnsap0R7ea8LeZY0uarQ/%2Fnotebook.ipynb">notebook</a> 下载。</p>
<br>
<h2 id="结合mercury用bloxs">结合Mercury用Bloxs</h2>
<p><a href="https://github.com/mljar/mercury">Mercury</a> 是一个用于将笔记本转换为交互式网络应用程序的框架。 它基于 YAML 配置将小部件添加到笔记本中。 下面展示了一个带有 bloxs 的笔记本，以及作为 Mercury 的 Web 应用程序的同一笔记本。</p>
<p><img loading="lazy" src="img/bloxs_notebook.gif" alt=""  />
</p>
<br>
<h2 id="mercury网页应用">Mercury网页应用</h2>
<p><a href="https://mercury.mljar.com/app/5">Demo</a></p>
<p><img loading="lazy" src="img/bloxs_mercury.gif" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>pyjanitor数据分析清洁包</title>
      <link>https://textdata.cn/blog/pyjanitor_tutorial/</link>
      <pubDate>Thu, 25 Nov 2021 23:10:10 +0600</pubDate>
      
      <guid>/blog/pyjanitor_tutorial/</guid>
      <description>清洗数据，也简洁代码</description>
      <content:encoded><![CDATA[<ul>
<li>
<p><a href="https://pyjanitor-devs.github.io/pyjanitor/">official docs</a></p>
</li>
<li>
<p><a href="https://github.com/pyjanitor-devs/pyjanitor">github</a></p>
</li>
</ul>
<br>
<p>pyjanitor是参照R语言janitor包语法，为Python量身定制的数据清洗包,即可清洗数据，又可让代码简洁干净。</p>
<h2 id="代码下载">代码下载</h2>
<p><a href="pyjanitor_tutorial.ipynb">click to download the code</a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyjanitor</span>
</code></pre></div><br>
<h2 id="为什么用janitor">为什么用janitor？</h2>
<p>数据预处理通常由一系列步骤组成，这些步骤涉及将原始数据转换为可理解/可用的格式。这一系列的步骤需要按照一定的顺序运行才能成功。我们以基础数据文件为起点，对其执行操作，例如删除空行/空行、用其他值替换它们、添加/重命名/删除数据列、过滤行等。更正式地说，这些步骤以及它们的关系和依赖关系通常被称为有向无环图 (DAG)。</p>
<p>pandas API 对 Python 数据科学生态系统非常宝贵，它实现了方法子集的方法链作为 API 的一部分。例如，重置索引 (.reset_index())、删除空值 (.dropna()) 等都是通过适当的 pd.DataFrame 方法调用来完成的。</p>
<p>受 R 统计语言生态系统 dplyr 包的易用性和表达能力的启发，我们将 pyjanitor 开发为语法包，用于为 Pandas 用户表达数据处理 DAG。</p>
<p>为了实现这一点，我们需要调用声明式的操作 替换为允许 逻辑顺序的方法链。让我们看看下面带注释的示例。首先，这里是数据清理路径的文字描述：</p>
<ol>
<li>创建一个dataframe。</li>
<li>删除一列。</li>
<li>删除两个特定列中具有空值的行。</li>
<li>重命名另外两列。</li>
<li>添加一个新列。</li>
</ol>
<p>让我们导入一些库并从本示例的一些示例数据开始：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Libraries</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">janitor</span>

<span class="c1"># Sample Data curated for this example</span>
<span class="n">company_sales</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;SalesMonth&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Jan&#39;</span><span class="p">,</span> <span class="s1">&#39;Feb&#39;</span><span class="p">,</span> <span class="s1">&#39;Mar&#39;</span><span class="p">,</span> <span class="s1">&#39;April&#39;</span><span class="p">],</span>
    <span class="s1">&#39;Company1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">150.0</span><span class="p">,</span> <span class="mf">200.0</span><span class="p">,</span> <span class="mf">300.0</span><span class="p">,</span> <span class="mf">400.0</span><span class="p">],</span>
    <span class="s1">&#39;Company2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">180.0</span><span class="p">,</span> <span class="mf">250.0</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="mf">500.0</span><span class="p">],</span>
    <span class="s1">&#39;Company3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">400.0</span><span class="p">,</span> <span class="mf">500.0</span><span class="p">,</span> <span class="mf">600.0</span><span class="p">,</span> <span class="mf">675.0</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div><br>
<h2 id="常见的pandas实现方式">常见的Pandas实现方式</h2>
<p>下面是传统的Pandas方式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The Pandas Way</span>

<span class="c1"># 1. 创建一个dataframe</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>

<span class="c1"># 2.删除一列。 Say &#39;Company1&#39;</span>
<span class="k">del</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;Company1&#39;</span><span class="p">]</span>

<span class="c1"># 3. 删除两个特定列中具有空值的行。 &#39;Company2&#39; and &#39;Company3&#39;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Company2&#39;</span><span class="p">,</span> <span class="s1">&#39;Company3&#39;</span><span class="p">])</span>

<span class="c1"># 4. 重命名另外两列。 将&#39;Company2&#39; 改为 &#39;Amazon&#39;； 将 &#39;Company3&#39; 改为 &#39;Facebook&#39;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">rename</span><span class="p">({</span><span class="s1">&#39;Company2&#39;</span><span class="p">:</span> <span class="s1">&#39;Amazon&#39;</span><span class="p">,</span>
                <span class="s1">&#39;Company3&#39;</span><span class="p">:</span> <span class="s1">&#39;Facebook&#39;</span><span class="p">},</span>
               <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># 5. 添加一个新列 &#39;Google&#39;</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Google&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">]</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><br>
<h2 id="稍微高级一点pandas实现方式">稍微高级一点Pandas实现方式</h2>
<p>稍微高级一点的用户可能会利用函数式 API：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>
    <span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="s2">&#34;Company1&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Company2&#34;</span><span class="p">:</span> <span class="s2">&#34;Amazon&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">:</span><span class="s2">&#34;Facebook&#34;</span><span class="p">})</span>
    <span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">Google</span><span class="o">=</span><span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">])</span>
<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><br>
<h2 id="pyjanitor实现方式">PyJanitor实现方式</h2>
<p>借助pyjanitor库，我们可以使用方法名链式代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>
    <span class="o">.</span><span class="n">remove_columns</span><span class="p">([</span><span class="s1">&#39;Company1&#39;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">rename_column</span><span class="p">(</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Amazon&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">rename_column</span><span class="p">(</span><span class="s2">&#34;Company3&#34;</span><span class="p">,</span> <span class="s2">&#34;Facebook&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">add_column</span><span class="p">(</span><span class="s2">&#34;Google&#34;</span><span class="p">,</span> <span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">])</span>

<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><p>因此，pyjanitor 的词源与“清洁度”有双重关系。 首先，它是关于使用方便的数据清理例程扩展 Pandas。 其次，它是关于为常见的 Pandas 例程提供更清晰、方法链接、基于动词的 API。</p>
<br>
<h2 id="pyjanitor更多功能">pyjanitor更多功能</h2>
<ul>
<li>清理列名（多索引是可能的！）</li>
<li>删除空行和列</li>
<li>识别重复条目</li>
<li>将列编码为分类</li>
<li>将数据拆分为特征和目标（用于机器学习）</li>
<li>添加、删除和重命名列</li>
<li>将多列合并为一列</li>
<li>日期转换（从 matlab、excel、unix）到 Python 日期时间格式</li>
<li>将具有分隔的分类值的单个列扩展为虚拟编码变量</li>
<li>基于分隔符连接和分离列</li>
<li>用于根据列上的查询过滤数据框的语法糖</li>
<li>金融、生物、化学、工程和 pyspark 的实验子模块</li>
</ul>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据分析plydata库</title>
      <link>https://textdata.cn/blog/plydata/</link>
      <pubDate>Mon, 22 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/plydata/</guid>
      <description>让数据分析的代码更简洁</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90plydata%E5%BA%93%E5%AD%A6%E4%B9%A0.zip">https://github.com/hidadeng/DaDengAndHisPython/blob/master/数据分析plydata库学习.zip</a></p>
<p>plydata是一个提供数据处理语法的Python库，借鉴了R语言dplyr，tidyr和forcats等包中的管道操作符。</p>
<p>plydata使用 <code>&gt;&gt;运算符</code> 作为管道符号，或者使用<code>ply（data，* verbs）</code>函数代替 <code>&gt;&gt;</code>， 目前仅支持对pandas.DataFrame数据进行操作。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">plydata</span>
</code></pre></div><h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">plydata</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="n">if_else</span><span class="p">,</span> <span class="n">ply</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;zero&#39;</span><span class="p">,</span> <span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">]})</span>

<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
</tr>
</tbody>
</table>
<h2 id="define">define</h2>
<p>define函数名很简单，定义变量或者操作变量。</p>
<p><code>define(data, *args,**kwargs)</code></p>
<ul>
<li>data 待操作的dataframe数据</li>
<li>args、kwargs 操作过程及结果。</li>
</ul>
<p>比如我们想在df中新建一个z列，z列的值完全复制自x列。可以使用代码 define(df, z=&lsquo;x&rsquo;)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">define</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<p><strong>注意:</strong> df中有x列，所以这里的使用的&rsquo;x',而不是x。</p>
<h2 id="管道符">&raquo;管道符</h2>
<p>刚刚的问题可以使用管道符实现与define(df, z=&lsquo;x&rsquo;)相同的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于df[&#39;z&#39;]=df[&#39;x&#39;]</span>
<span class="c1">#等同于define(df, z=&#39;x&#39;)</span>
<span class="n">df</span> <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<p>如果有多个环节，可以用括号包裹住，环节与环节用<code>&gt;&gt;</code>和<code>换行</code>前后衔接。</p>
<p>比如我们有多个操作，每一步操作如下</p>
<ol>
<li><code>m=2x</code></li>
<li><code>n=m*m</code></li>
<li><code>q=m+n</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="s1">&#39;2*x&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="s1">&#39;m*m&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="s1">&#39;m+n&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">m</th>
<th style="text-align:right">n</th>
<th style="text-align:right">q</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">4</td>
<td style="text-align:right">16</td>
<td style="text-align:right">20</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">6</td>
<td style="text-align:right">36</td>
<td style="text-align:right">42</td>
</tr>
</tbody>
</table>
<p>上面所有的plydata相关操作不会修改原始数据df</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
</tr>
</tbody>
</table>
<h2 id="if_else">if_else</h2>
<p>在df中新建z列，z的值满足</p>
<ul>
<li>当x大于1，z为1</li>
<li>当x小于等于1， z为0</li>
</ul>
<p>使用if_else(predicate, true_value, false_value)</p>
<ul>
<li>predicate 逻辑判断条件字符串</li>
<li>true_value 满足逻辑条件返回的值</li>
<li>false_value 不满足逻辑条件返回的值</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于define(df, z=if_else(&#39;x&gt;1&#39;, 1, 0))</span>
<span class="n">df</span> <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="query">query</h2>
<p>query(data, expr)</p>
<ul>
<li>data 待查询的dataframe数据</li>
<li>expr  查询条件字符串</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z==1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="ply">ply()</h2>
<p>ply功能等同于管道符&raquo;， 刚刚上面的代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z==1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>可以用ply</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ply</span><span class="p">(</span><span class="n">df</span><span class="p">,</span>
    <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x &gt; 1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)),</span>
    <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z == 1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="plydata与plotnine">plydata与plotnine</h2>
<p>在R语言中，用ggplot2作图经常会用到管道符。而在Python中，plydata提供管道符，可以与作图库plotnine结合使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">geom_line</span><span class="p">,</span> <span class="n">aes</span>
<span class="kn">from</span> <span class="nn">plydata</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">if_else</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="mi">500</span><span class="p">)})</span>
<span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s1">&#39;np.sin(x)&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">sign</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;y&gt;=0&#39;</span><span class="p">,</span> <span class="s1">&#39;&#34;pos&#34;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#34;neg&#34;&#39;</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> 
                <span class="n">y</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> 
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;sign&#39;</span><span class="p">))</span><span class="o">+</span>
     <span class="n">geom_line</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mf">1.5</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_27_0.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>YelpDaset | 酒店管理类数据集10&#43;G</title>
      <link>https://textdata.cn/blog/yelpdataset_10g/</link>
      <pubDate>Sat, 20 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/yelpdataset_10g/</guid>
      <description>Yelp数据集是我们用于个人，教育和学术目的的业务，评论和用户数据的子集。字段丰富，适合玩数据分析</description>
      <content:encoded><![CDATA[<h2 id="数据集下载">数据集下载</h2>
<p>链接:https://pan.baidu.com/s/1rUfj7NYYAnM3NuFWCHyPpA 密码:ux8z</p>
<p>在昨天发的文章里提到了yelp数据集，官网显示&quot;Yelp数据集是我们用于个人，教育和学术目的的业务，评论和用户数据的子集。 以JSON文件形式提供，可用于在学习如何制作移动应用程序的同时，向学生介绍数据库，学习NLP或提供示例生产数据。&quot;</p>
<p>yelp官网显示，这个数据集亮点如下：</p>
<ul>
<li>668+w条评论</li>
<li>19+w个商业机构</li>
<li>20w张图片</li>
<li>10个都市区域</li>
<li>字段包括:营业时间、是否泊车、可用性和环境</li>
</ul>
<p><img loading="lazy" src="img/yelp.png" alt=""  />
</p>
<p>在kaggle上也能看到使用这个数据集的案例，说不定有你需要的分析方法。</p>
<p><img loading="lazy" src="img/kaggle.png" alt=""  />
</p>
<p>我已经从yelp官网下载了数据, 参照kaggle的很多例子，咱们也在自己电脑上跑跑简单的分析</p>
<h2 id="business数据读取">business数据读取</h2>
<p>kaggle中的数据是csv文件，咱这里是json，略有不同，但读取都可以用pandas读取</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#一开始用注释掉的代码，有bug，经过百度找到lines=True解决方案</span>
<span class="c1">#business = pd.read_json(&#39;yelp_dataset/business.json&#39;)</span>
<span class="n">business</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="s1">&#39;yelp_dataset/business.json&#39;</span><span class="p">,</span> <span class="n">lines</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">business</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/1.png" alt=""  />
</p>
<h2 id="评分分布">评分分布</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="n">sns</span><span class="o">.</span><span class="n">color_palette</span><span class="p">()</span>
</code></pre></div><pre><code>[(0.12156862745098039, 0.4666666666666667, 0.7058823529411765),
 (1.0, 0.4980392156862745, 0.054901960784313725),
 (0.17254901960784313, 0.6274509803921569, 0.17254901960784313),
 (0.8392156862745098, 0.15294117647058825, 0.1568627450980392),
 (0.5803921568627451, 0.403921568627451, 0.7411764705882353),
 (0.5490196078431373, 0.33725490196078434, 0.29411764705882354),
 (0.8901960784313725, 0.4666666666666667, 0.7607843137254902),
 (0.4980392156862745, 0.4980392156862745, 0.4980392156862745),
 (0.7372549019607844, 0.7411764705882353, 0.13333333333333333),
 (0.09019607843137255, 0.7450980392156863, 0.8117647058823529)]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>

<span class="n">colors</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">color_palette</span><span class="p">()</span>
<span class="n">rating</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;stars&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">rating</span><span class="o">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">rating</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> 
            <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
            <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">9</span><span class="p">],</span>
            <span class="n">rot</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#字体倾斜角度</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Rating Distribution of Yelp&#39;</span><span class="p">,</span><span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_5_0.png" alt=""  />
</p>
<h2 id="行业统计">行业统计</h2>
<p>查看行业店家数量分布</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="k">else</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
<span class="n">category_str</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">business</span><span class="p">[</span><span class="s1">&#39;categories&#39;</span><span class="p">])</span>
<span class="n">category_list</span> <span class="o">=</span> <span class="n">category_str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
<span class="n">category_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">category_list</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">])</span>
<span class="n">top15_category</span> <span class="o">=</span> <span class="n">category_df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()[:</span><span class="mi">15</span><span class="p">]</span>
<span class="n">top15_category</span>
<span class="n">top15_category</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span>
                    <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">20</span><span class="p">],</span>
                    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> 
                    <span class="n">rot</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
                    <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Top 20 Category in Yelp&#39;</span><span class="p">,</span>
          <span class="n">fontsize</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> 
          <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_7_0.png" alt=""  />
</p>
<h2 id="城市分布">城市分布</h2>
<p>显示yelp中Top20城</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">citys</span> <span class="o">=</span> <span class="n">business</span><span class="p">[</span><span class="s1">&#39;city&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()[:</span><span class="mi">20</span><span class="p">]</span>
<span class="n">citys</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="c1">#降序，原地修改原始数据</span>
<span class="n">citys</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;barh&#39;</span><span class="p">,</span>   <span class="c1">#水平条形图</span>
           <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
           <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
           <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[:</span><span class="mi">20</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Top 20 city in the Yelp&#39;</span><span class="p">,</span> 
          <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> 
          <span class="n">fontweight</span><span class="o">=</span><span class="s1">&#39;bold&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/output_9_0.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用pandas_bokeh做可视化</title>
      <link>https://textdata.cn/blog/pandas_bokeh_vis/</link>
      <pubDate>Thu, 18 Nov 2021 17:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_bokeh_vis/</guid>
      <description>简洁数据可视化</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96pandas_bokeh.zip">点击下载代码</a></p>
<h2 id="pandas_bokeh">pandas_bokeh</h2>
<p>pandas_bokeh可以使得dataframe直接调用bokeh底层代码。通过使用pandas_bokeh，可以在notebook或者html中显示，语法相比于bokeh更简洁易用。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pandas_bokeh</span>
</code></pre></div><h2 id="快速上手">快速上手</h2>
<p>对fruits.csv做一个条形图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">fruits</th>
<th style="text-align:right">2015</th>
<th style="text-align:right">2016</th>
<th style="text-align:right">2017</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">苹果</td>
<td style="text-align:right">2</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">梨</td>
<td style="text-align:right">1</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">香蕉</td>
<td style="text-align:right">4</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">草莓</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">樱桃</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">橘子</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">pandas_bokeh</span>
<span class="kn">import</span> <span class="nn">warnings</span> 
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s2">&#34;ignore&#34;</span><span class="p">)</span> <span class="c1">#忽略某些不影响程序的提示</span>

<span class="c1">#在notebook中能显示可视化结果</span>
<span class="n">pandas_bokeh</span><span class="o">.</span><span class="n">output_notebook</span><span class="p">()</span>

<span class="c1">#将fruits列设置为行索引</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>


<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> 
              <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;fruits&#39;</span><span class="p">,</span> <span class="c1">#将fruits列选做x轴</span>
              <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;2015&#39;</span><span class="p">,</span> <span class="s1">&#39;2016&#39;</span><span class="p">,</span> <span class="s1">&#39;2017&#39;</span><span class="p">],</span> <span class="c1">#将年份选做y轴</span>
              <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;水果价格(元/斤)&#39;</span><span class="p">,</span>
              <span class="n">title</span><span class="o">=</span><span class="s1">&#39;水果&#39;</span><span class="p">,</span>
              <span class="n">show_figure</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#显示</span>
</code></pre></div>
<figure >
    
        <img src="img/2.gif" width="800" />
    
    
</figure>

<p>上面的例子已经可以看到该库的简洁优美之处，现在我们多学点</p>
<h2 id="pandas_bokeh输出设定">pandas_bokeh输出设定</h2>
<ul>
<li>pandas_bokeh.output_notebook() 在notebook中能显示可视化结果</li>
<li>pandas_bokeh.output_file(filename) 将结果输出到html文件中</li>
</ul>
<h2 id="支持可视化图种类">支持可视化图种类</h2>
<ul>
<li>line</li>
<li>bar</li>
<li>point</li>
<li>scatter</li>
<li>histogram</li>
<li>area</li>
<li>pie</li>
<li>map</li>
</ul>
<p>以bar为例，调用可视化接口时，有以下两种使用方法</p>
<ul>
<li>df.plot_bokeh.line(&hellip;)</li>
<li>df.plot_bokeh(kind=&lsquo;line&rsquo;)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fake_stocks.xlsx&#39;</span><span class="p">)</span>

<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;line&#34;</span><span class="p">,</span> 
              <span class="n">x</span><span class="o">=</span><span class="s1">&#39;日期&#39;</span><span class="p">,</span> <span class="c1">#将excel中的日期列当做x轴</span>
              <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Google&#39;</span><span class="p">,</span> <span class="s1">&#39;Apple&#39;</span><span class="p">])</span> <span class="c1">#将&#39;Google&#39;, &#39;Apple&#39;两列作为y轴</span>
</code></pre></div>
<figure >
    
        <img src="img/3.gif" width="800" />
    
    
</figure>

<h2 id="高级参数">高级参数</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">figsize</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">xlim</span><span class="p">,</span> <span class="n">ylim</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span>
              <span class="n">logx</span><span class="p">,</span> <span class="n">logy</span><span class="p">,</span> <span class="n">xticks</span><span class="p">,</span> <span class="n">yticks</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">colormap</span><span class="p">,</span> <span class="n">hovertool</span><span class="p">,</span> 
              <span class="n">zooming</span><span class="p">,</span> <span class="n">panning</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div><ul>
<li>kind: 支持的图种类&quot;line&quot;, &ldquo;point&rdquo;, &ldquo;scatter&rdquo;, &ldquo;bar&rdquo; ,&ldquo;histogram&quot;等</li>
<li>x: 选中数据某列名作为x轴。如果x不传入参数，会默认使用df的索引作为x轴</li>
<li>y: 将数据中的某列或某些列指定为y轴</li>
<li>figsize: 图的尺寸,如figsize=(600, 350)</li>
<li>title:  图的标题</li>
<li>xlim/ylim: 设置图的x轴和y轴的范围</li>
<li>xlabel/ylabel: 设置x轴和y轴的名字</li>
<li>logx/logy: 布尔型值，对x和y的数据是否进行log变换</li>
<li>xticks/yticks: 显性定义横纵坐标刻度</li>
<li>color: 对图中使用同一的颜色，如果想定义多种颜色，请使用colormap参数</li>
<li>colormap: 可以对图中的不同对象设置颜色， 传入的是颜色字符串列表。</li>
<li>hovertool: 默认True，鼠标放在图上会悬浮显示具体信息。</li>
<li>zooming: 布尔值，默认True支持缩放</li>
<li>panning: 布尔值，默认True支持平移</li>
<li>kwargs**: 更多参数设定请看官方文档</li>
</ul>
<h2 id="文档">文档</h2>
<ul>
<li>pandas_bokeh文档地址https://github.com/PatrikHlobil/Pandas-Bokeh</li>
<li>Bokeh官方文档地址https://docs.bokeh.org/en/latest/</li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Pandas做数据预处理</title>
      <link>https://textdata.cn/blog/pre_process_in_pandas/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pre_process_in_pandas/</guid>
      <description>4000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA">https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA</a></p>
<p>author: 俊欣</p>
<p>公众号: 关于数据分析与可视化</p>
</blockquote>
<p>数据预处理过程当中, 大致会遇到</p>
<ul>
<li>加载数据</li>
<li>处理缺失值如何处理</li>
<li>处理离散型数据该如何处理</li>
<li>数据的标准化</li>
<li>将数据集划分成训练集与测试集</li>
<li>去掉重复值</li>
</ul>
<br>
<h2 id="加载数据">加载数据</h2>
<p>我们导入必要的库并且加载数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data.csv&#34;</span><span class="p">)</span>
</code></pre></div><p>在进行数据分析前，可以查看一下数据的总体情况，从宏观上了解数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span> <span class="c1">#显示前五行数据</span>
<span class="n">data</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span> <span class="c1">#显示末尾五行数据</span>
<span class="n">data</span><span class="o">.</span><span class="n">info</span><span class="p">()</span> <span class="c1">#查看各字段的信息</span>
<span class="n">data</span><span class="o">.</span><span class="n">shape</span> <span class="c1">#查看数据集有几行几列,data.shape[0]是行数,data.shape[1]是列数</span>
<span class="n">data</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span> <span class="c1">#查看数据的大体情况，均值，最值，分位数值...</span>
<span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>   <span class="c1">#得到列名的list</span>
</code></pre></div><br>
<h2 id="处理缺失值">处理缺失值</h2>
<p>缺失值一直都是数据预处理当中比较常见的一个问题，而在处理类似的问题的时候，方式方法也是多种多样的，我们一一来介绍，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;小明&#39;</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">55</span><span class="p">],[</span><span class="s1">&#39;小红&#39;</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">60</span><span class="p">],[</span><span class="s1">&#39;小王&#39;</span><span class="p">,</span><span class="mi">26</span><span class="p">]]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span><span class="s1">&#39;Age&#39;</span><span class="p">,</span><span class="s1">&#39;Weight&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
2   小王   26     NaN
</code></pre></div><p>针对上面的数据集，我们通过pandas中的方法看一下缺失值的情况</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Name    Age  Weight
0  False  False   False
1  False  False   False
2  False  False    True
</code></pre></div><p>另外我们也可以这么来做，检测每一列空值的数量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Name      0
Age       0
Weight    1
dtype: int64
</code></pre></div><p>而在面对缺失值的时候，我们一方面可以将其去除</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
</code></pre></div><p>当然我们也可以对缺失值进行填充，例如用平均值来填充</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
2   小王   26    57.5
</code></pre></div><p>除了pandas当中的方法之外，我们也可以使用sklearn库当中的一些函数方法，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.impute</span> <span class="kn">import</span> <span class="n">SimpleImputer</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">SimpleImputer</span><span class="p">(</span><span class="n">missing_values</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="n">strategy</span><span class="o">=</span><span class="s1">&#39;mean&#39;</span><span class="p">)</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]])</span>
</code></pre></div><p>最后返回的结果也和上面的fillna()方法返回的结果一致，我们用平均值来代码空值，那么同样道理我们也可以用中位数、众数等统计值来进行替换，这里就不做多说</p>
<br>
<h2 id="处理离散型数据">处理离散型数据</h2>
<p>另外当数据集当中出现离散型数据的时候，我们也要进行相应的处理，毕竟在后面的建模过程当中，机器学习的模型需要的是连续型的数据。
离散型数据也分为两种，一种是有序的离散变量，就比方说是衣服的尺码，有M码的、也有L码的、也还有与之更大的尺码，另外一种则是无序的，例如衣服的颜色，颜色之间没有大小之分，因此在编码的时候也应该另外处理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_cat</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> 
                     <span class="p">[[</span><span class="s1">&#39;green&#39;</span><span class="p">,</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="mf">10.1</span><span class="p">,</span><span class="s1">&#39;class1&#39;</span><span class="p">],</span>
                      <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span><span class="s1">&#39;L&#39;</span><span class="p">,</span><span class="mf">20.1</span><span class="p">,</span><span class="s1">&#39;class2&#39;</span><span class="p">],</span>
                      <span class="p">[</span><span class="s1">&#39;white&#39;</span><span class="p">,</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="mf">30.1</span><span class="p">,</span><span class="s1">&#39;class1&#39;</span><span class="p">]],</span> <span class="p">)</span>
<span class="n">df_cat</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">,</span><span class="s1">&#39;size&#39;</span><span class="p">,</span><span class="s1">&#39;price&#39;</span><span class="p">,</span><span class="s1">&#39;classlabel&#39;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   color size  price classlabel
0  green    M   10.1     class1
1   blue    L   20.1     class2
2  white    M   30.1     class1
</code></pre></div><p>对于有序的离散型变量，我们可以使用map()函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">size_mapping</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;M&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;L&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">}</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">size_mapping</span><span class="p">)</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    1
1    2
2    1
Name: size, dtype: int64
</code></pre></div><p>另外我们也可以使用sklearn库中的LabelEncoder()方法来处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span>
<span class="n">class_le</span> <span class="o">=</span> <span class="n">LabelEncoder</span><span class="p">()</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">class_le</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
</code></pre></div><p>而对于无序的离散型变量，我们可以采用独热编码，例如对color这一列进行编码过之后会有color_green、color_blue以及color_white三个特征，特征值为0或者1</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s2">&#34;color&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   color_blue  color_green  color_white
0           0            1            0
1           1            0            0
2           0            0            1

</code></pre></div><p>然后我们将此并入到源数据当中去</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_cat</span><span class="p">[[</span><span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dummies</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   size  price  color_blue  color_green  color_white
0     1   10.1           0            1            0
1     2   20.1           1            0            0
2     1   30.1           0            0            1
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">但是考虑到后面搭建模型的时候</span><span class="err">，</span><span class="n">变量与变量之间应该保持独立</span><span class="err">，</span><span class="n">而不应该是存在依赖的关系</span><span class="err">，</span><span class="n">对于color这一列中存在三种颜色</span><span class="err">，</span><span class="n">分别是blue</span><span class="err">、</span><span class="n">green以及white</span><span class="err">，</span><span class="n">当前两类取值都为0的时候</span><span class="err">，</span><span class="n">color只可能是white</span>
<span class="n">所以将get_dummies</span><span class="p">()</span><span class="n">方法中的drop_first默认值为False改为True</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dummies</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s2">&#34;color&#34;</span><span class="p">,</span> <span class="n">drop_first</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">df_cat</span><span class="p">[[</span><span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dummies</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="数据的标准化">数据的标准化</h2>
<p>由于不同的变量，它们往往存在不同的单位以及不同的取值范围，有时候取值范围的差异较大会对机器学习的模型带来很多不必要的麻烦。因此为了最后预测结果的可靠性，我们需要对数据进行标准化，对数据按比例进行缩放，使之落入一个小的特定区间。而标准化算法有</p>
<ul>
<li>z-score 标准化</li>
</ul>
<p>这种方法根据原始数据的均值和标准差进行数据的标准化，经过处理的数据符合正态分布，即均值为0，标准差为1 ，当然sklearn库当中的代码则是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="n">sc</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><ul>
<li>线性归一化</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">MinMaxScaler</span><span class="p">()</span>
<span class="n">min_max_scaler</span> <span class="o">=</span> <span class="n">MinMaxScaler</span><span class="p">()</span>
<span class="n">X_train_minmax</span> <span class="o">=</span> <span class="n">min_max_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">X_train_minmax</span><span class="p">)</span>
</code></pre></div><p>训练集中的数据经过转化，取值范围都集中在[0,1]之间</p>
<ul>
<li>MaxAbsScaler()方法</li>
</ul>
<p>MaxAbsScaler()方法和上述的线性归一化效果相类似，训练集中的数据经过转化，取值范围在[-1,1]之间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">max_abs_scaler</span> <span class="o">=</span> <span class="n">preprocessing</span><span class="o">.</span><span class="n">MaxAbsScaler</span><span class="p">()</span>
<span class="n">X_train_maxabs</span> <span class="o">=</span> <span class="n">max_abs_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_test_maxabs</span> <span class="o">=</span> <span class="n">max_abs_scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><ul>
<li>RobustScaler()方法</li>
</ul>
<p>要是当数据集当中存在很多的极值的时候，利用平均值和标准差来进行数据的标准化效果可能并不理想，毕竟极值会影响到平均值和标准差的计算，这个时候我们就需要用到RobustScaler()方法，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">RobustScaler</span>
<span class="n">transformer</span> <span class="o">=</span> <span class="n">RobustScaler</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">transformer</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="将数据集划分成训练集和测试集">将数据集划分成训练集和测试集</h2>
<p>在建模之前，我们需要将数据集分成训练集和测试集，我们在训练集上面建立模型，训练与优化模型，然后再将模型放到测试集上面，评估一下模型的性能以及优化的效果，在sklearn库中也有相对应的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>上面的变量y具体指的是被预测的因变量，而x则是在预测中使用的自变量</p>
<br>
<h2 id="去除重复值">去除重复值</h2>
<p>在pandas当中也有对应的方法来去除掉重复值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">br</span><span class="o">&gt;</span>

<span class="c1">## 代码下载</span>
<span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">hidadeng</span><span class="o">/</span><span class="n">DaDengAndHisPython</span><span class="o">/</span><span class="n">blob</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="mi">4000</span><span class="n">字归纳总结PandasSklearn数据预处理</span><span class="o">.</span><span class="n">ipynb</span>
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Pandas处理文本数据</title>
      <link>https://textdata.cn/blog/text_analysis_in_pandas/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/text_analysis_in_pandas/</guid>
      <description>2000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/MmfEtyKaMqNn_Ik1oJtitQ">https://mp.weixin.qq.com/s/MmfEtyKaMqNn_Ik1oJtitQ</a></p>
<p>author: 俊欣</p>
<p>公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86Pandas%E7%AF%87.ipynb">点击Pandas本文代码下载</a></p>
<p>今天我们来谈论一下pandas库当中文本数据的操作，希望大家再看完本篇文章之后会有不少的收获，我们大致会讲</p>
<ul>
<li>创建一个包含文本数据的DataFrame</li>
<li>常用处理文本数据的方法的总结</li>
<li>正则表达式与DataFrame内部方法的结合</li>
</ul>
<br>
<h2 id="创建文本内容的数据">创建文本内容的数据</h2>
<p>我们先来创建一个包含文本数据的DataFrame，来供我们后面使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
   <span class="s2">&#34;姓&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;李&#34;</span><span class="p">,</span><span class="s2">&#34;王&#34;</span><span class="p">,</span><span class="s2">&#34;戴&#34;</span><span class="p">,</span> <span class="s2">&#34;李&#34;</span><span class="p">,</span> <span class="s2">&#34;张&#34;</span><span class="p">],</span>
   <span class="s2">&#34;名&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;华&#34;</span><span class="p">,</span><span class="s2">&#34;硕&#34;</span><span class="p">,</span><span class="s2">&#34;建业&#34;</span><span class="p">,</span> <span class="s2">&#34;四&#34;</span><span class="p">,</span> <span class="s2">&#34;三&#34;</span><span class="p">],</span>
   <span class="s2">&#34;户籍地址&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34; 浙江省·宁波市 &#34;</span><span class="p">,</span> <span class="s2">&#34;   浙江省·杭州市    &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·丽水市  &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·衢州市 &#34;</span><span class="p">,</span> <span class="s2">&#34;  浙江省·湖州市           &#34;</span><span class="p">],</span>
   <span class="s2">&#34;微信ID&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Tomoplplplut1248781&#34;</span><span class="p">,</span> <span class="s2">&#34;Smopopo857&#34;</span><span class="p">,</span> <span class="s2">&#34;Adahuhuifhhjfj&#34;</span><span class="p">,</span> <span class="s2">&#34;Tull1945121&#34;</span><span class="p">,</span> <span class="s2">&#34;ZPWERERTFD599557&#34;</span><span class="p">],</span>
   <span class="s2">&#34;邮箱地址&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;tom02159@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;smitt7821@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;adams623@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;tull0305@163.com&#34;</span><span class="p">,</span> <span class="s2">&#34;five7532@163.com&#34;</span><span class="p">]</span>
<span class="p">})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | 姓   | 名   | 户籍地址      | 微信ID              | 邮箱地址          |
|---:|:-----|:-----|:--------------|:--------------------|:------------------|
|  0 | 李   | 华   | 浙江省·宁波市 | Tomoplplplut1248781 | tom02159@163.com  |
|  1 | 王   | 硕   | 浙江省·杭州市 | Smopopo857          | smitt7821@163.com |
|  2 | 戴   | 建业 | 浙江省·丽水市 | Adahuhuifhhjfj      | adams623@163.com  |
|  3 | 李   | 四   | 浙江省·衢州市 | Tull1945121         | tull0305@163.com  |
|  4 | 张   | 三   | 浙江省·湖州市 | ZPWERERTFD599557    | five7532@163.com  |
</code></pre></div><br>
<h2 id="常用处理文本数据的方法总结">常用处理文本数据的方法总结</h2>
<p>Python当中用来处理字符串数据的方法有很多，基本上都可以在DataFrame内部拿来使用，例如lower()方法和upper()方法，给字母大小写</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    tomoplplplut1248781
1             smopopo857
2         adahuhuifhhjfj
3            tull1945121
4       zpwerertfd599557
Name: 微信ID, dtype: object
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">len</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    19
1    10
2    14
3    11
4    16
Name: 微信ID, dtype: int64
</code></pre></div><p>当然我们看到户籍地址这一列中的数据有很多的空格</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0                浙江省·宁波市 
1             浙江省·杭州市    
2               浙江省·丽水市  
3                浙江省·衢州市 
4      浙江省·湖州市           
Name: 户籍地址, dtype: object
</code></pre></div><p>我们可以使用处理字符串时的strip()方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省·宁波市
1    浙江省·杭州市
2    浙江省·丽水市
3    浙江省·衢州市
4    浙江省·湖州市
Name: 户籍地址, dtype: object
</code></pre></div><p>与之相类似的还有lstrip()方法以及rstrip()方法，这里就不做赘述。</p>
<p>在字符串的处理过程当中，startswith()方法和endswith()方法也是用的非常的频繁，例如我们想要挑选出户籍地址是“宁波市”的数据，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
<span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;宁波市&#34;</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID              邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781  tom02159@163.com
</code></pre></div><p>另外我们还可以使用replace()方法来实现当中的字符串的替换</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="s2">&#34;--&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省--宁波市
1    浙江省--杭州市
2    浙江省--丽水市
3    浙江省--衢州市
4    浙江省--湖州市
Name: 户籍地址, dtype: object
</code></pre></div><p>那既然用到了replace()方法，那么split()方法也可以尝试一下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    [浙江省, 宁波市]
1    [浙江省, 杭州市]
2    [浙江省, 丽水市]
3    [浙江省, 衢州市]
4    [浙江省, 湖州市]
Name: 户籍地址, dtype: object
</code></pre></div><p>在经过spilit()方法的切割过之后就变成了列表的形式，然后可以通过get()方法或者[]来获取里面的元素，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

</code></pre></div><p>或者</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    浙江省
1    浙江省
2    浙江省
3    浙江省
4    浙江省
Name: 户籍地址, dtype: object
</code></pre></div><p>那么获取列表当中的第二个元素也是同样的道理，当然我们也可以在split()方法当中添加expand=True这个参数，来将上面列表形式的数据转化成DataFrame格式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">      0    1
0  浙江省  宁波市
1  浙江省  杭州市
2  浙江省  丽水市
3  浙江省  衢州市
4  浙江省  湖州市
</code></pre></div><p>同样地，我们可以在后面添加[]来获取我们想要的元素</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;·&#34;</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    宁波市
1    杭州市
2    丽水市
3    衢州市
4    湖州市
Name: 1, dtype: object
</code></pre></div><br>
<h2 id="正则表达式与dataframe内部方法的结合">正则表达式与DataFrame内部方法的结合</h2>
<p>假如我们想要提取文本数据内部的一部分数据，可以结合正则表达式来使用，例如我们想要提取“微信ID”这一列当中的字母和数字，并且将两者分开来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">two_groups</span> <span class="o">=</span> <span class="s2">&#34;([a-zA-Z]+)([0-9]+)&#34;</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="n">two_groups</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">              0        1
0  Tomoplplplut  1248781
1       Smopopo      857
2           NaN      NaN
3          Tull  1945121
4    ZPWERERTFD   599557
</code></pre></div><p>当然了，如果想是要提取文本数据中的部分数据，可以直接在str方法后面添加索引，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;邮箱地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="p">[</span><span class="o">-</span><span class="mi">8</span><span class="p">:]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    @163.com
1    @163.com
2    @163.com
3    @163.com
4    @163.com
Name: 邮箱地址, dtype: object
</code></pre></div><p>当然，从另外一个角度讲，正则表达式也可以帮助我们确认文本数据是否符合某种规律，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">two_groups</span> <span class="o">=</span> <span class="s2">&#34;([a-zA-Z]+)([0-9]+)&#34;</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">two_groups</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0     True
1     True
2    False
3     True
4     True
Name: 微信ID, dtype: bool
</code></pre></div><p>当中有一个为False，不满足字母+数字的规律，我们再进一步，将满足条件的数据提取出来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;微信ID&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">two_groups</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID               邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781   tom02159@163.com
1  王  硕  浙江省·杭州市           Smopopo857  smitt7821@163.com
3  李  四  浙江省·衢州市          Tull1945121   tull0305@163.com
4  张  三  浙江省·湖州市     ZPWERERTFD599557   five7532@163.com
</code></pre></div><p>针对文本数据而言，contains()方法也能够派上用场，例如下面的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓   名                  户籍地址                 微信ID               邮箱地址
0  李   华              浙江省·宁波市   Tomoplplplut1248781   tom02159@163.com
1  王   硕           浙江省·杭州市               Smopopo857  smitt7821@163.com
2  戴  建业             浙江省·丽水市         Adahuhuifhhjfj   adams623@163.com
3  李   四              浙江省·衢州市           Tull1945121   tull0305@163.com
4  张   三    浙江省·湖州市                ZPWERERTFD599557   five7532@163.com
5  黄   五               浙江省·宁波市        hunhunhu45652  1erdcvf127@16.com
</code></pre></div><p>我们用contains()来提取出户籍地址为“宁波市”的内容，可以这么做</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;户籍地址&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s2">&#34;宁波市&#34;</span><span class="p">)]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   姓  名     户籍地址                 微信ID               邮箱地址
0  李  华  浙江省·宁波市  Tomoplplplut1248781   tom02159@163.com
5  黄  五  浙江省·宁波市        hunhunhu45652  1erdcvf127@16.com
</code></pre></div><p>暂时就这些了，下一篇原创的文章安排在周天，非技术方面的，期待一下？</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐20个好用到爆的Pandas函数方法</title>
      <link>https://textdata.cn/blog/pandas_20_most_usefull_functions/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_20_most_usefull_functions/</guid>
      <description>4000字详细说明</description>
      <content:encoded><![CDATA[<p>今天分享几个不为人知的pandas函数，大家可能平时看到的不多，但是使用起来倒是非常的方便，也能够帮助我们数据分析人员大幅度地提高工作效率，同时也希望大家看完之后能够有所收获</p>
<br>
<br>
<h2 id="items方法">items()方法</h2>
<p>pandas当中的<code>items()</code>方法可以用来遍历数据集当中的每一列，同时返回列名以及每一列当中的内容，通过以元组的形式，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;species&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;bear&#39;</span><span class="p">,</span> <span class="s1">&#39;bear&#39;</span><span class="p">,</span> <span class="s1">&#39;marsupial&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;population&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1864</span><span class="p">,</span> <span class="mi">22000</span><span class="p">,</span> <span class="mi">80000</span><span class="p">]},</span>
                   <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;panda&#39;</span><span class="p">,</span> <span class="s1">&#39;polar&#39;</span><span class="p">,</span> <span class="s1">&#39;koala&#39;</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   population |
|:------|:----------|-------------:|
| panda | bear      |         1864 |
| polar | bear      |        22000 |
| koala | marsupial |        80000 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">label</span><span class="p">,</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;label: </span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;content: </span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;=&#34;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div><pre><code>label: species
content: panda         bear
polar         bear
koala    marsupial
Name: species, dtype: object
==================================================
label: population
content: panda     1864
polar    22000
koala    80000
Name: population, dtype: int64
==================================================
</code></pre>
<p>相继的打印出了‘species’和‘population’这两列的列名和相应的内容</p>
<br>
<h2 id="iterrows方法">iterrows()方法</h2>
<p>而对于<code>iterrows()</code>方法而言，其功能则是遍历数据集当中的每一行，返回每一行的索引以及带有列名的每一行的内容，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">label</span><span class="p">,</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;label: </span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;content: </span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;=&#34;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div><pre><code>label: panda
content: species       bear
population    1864
Name: panda, dtype: object
==================================================
label: polar
content: species        bear
population    22000
Name: polar, dtype: object
==================================================
label: koala
content: species       marsupial
population        80000
Name: koala, dtype: object
==================================================
</code></pre>
<br>
<h2 id="insert方法">insert()方法</h2>
<p><code>insert()</code>方法主要是用于在数据集当中的特定位置处插入数据。在DataFrame数据集当中，列的索引也是从0开始的</p>
<p>示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#在第二列插入size字段，内容如下</span>
<span class="n">df</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="p">[</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">3000</span><span class="p">,</span> <span class="mi">4000</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
|       | species   |   size |   population |
|:------|:----------|-------:|-------------:|
| panda | bear      |   2000 |         1864 |
| polar | bear      |   3000 |        22000 |
| koala | marsupial |   4000 |        80000 |
</code></pre></div><br>
<h2 id="assign方法">assign()方法</h2>
<p><code>assign()</code>方法可以用来在数据集当中添加新的列，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">size_1</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">9</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |
|:------|:----------|-------:|-------------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |
| polar | bear      |   3000 |        22000 |  39632   |
| koala | marsupial |   4000 |        80000 | 144032   |
</code></pre></div><p>从上面的例子中可以看出，我们通过一个lambda匿名函数，在数据集当中添加一个新的列，命名为<strong>size_1</strong>，当然我们也可以通过assign()方法来创建不止一个列</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">size_1</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">9</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">32</span><span class="p">,</span>
               <span class="n">size_2</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">population</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |
|:------|:----------|-------:|-------------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   |
</code></pre></div><br>
<h2 id="eval方法">eval()方法</h2>
<p><code>eval()</code>方法主要是用来执行用字符串来表示的运算过程的，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s2">&#34;size_3 = size_1 + size_2&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |   size_3 |
|:------|:----------|-------:|-------------:|---------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |   6379.6 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |  74842   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   | 272042   |
</code></pre></div><p>当然我们也可以同时对执行多个运算过程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span><span class="s1">size_3 = size_1 + size_2
</span><span class="s1">size_4 = size_1 - size_2
</span><span class="s1">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       | species   |   size |   population |   size_1 |   size_2 |   size_3 |   size_4 |
|:------|:----------|-------:|-------------:|---------:|---------:|---------:|---------:|
| panda | bear      |   2000 |         1864 |   3387.2 |   2992.4 |   6379.6 |    394.8 |
| polar | bear      |   3000 |        22000 |  39632   |  35210   |  74842   |   4422   |
| koala | marsupial |   4000 |        80000 | 144032   | 128010   | 272042   |  16022   |
</code></pre></div><br>
<h2 id="pop方法">pop()方法</h2>
<p>pop()方法主要是用来删除掉数据集中特定的某一列数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">&#34;size_3&#34;</span><span class="p">)</span>
</code></pre></div><p>而原先的数据集当中就没有这个‘size_3’这一例的数据了</p>
<br>
<h2 id="truncate方法">truncate()方法</h2>
<p><code>truncate()</code>方法主要是根据行索引来筛选指定行的数据的，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;B&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;j&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;C&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">]},</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | A   | B   | C   |
|---:|:----|:----|:----|
|  1 | a   | f   | k   |
|  2 | b   | g   | l   |
|  3 | c   | h   | m   |
|  4 | d   | i   | n   |
|  5 | e   | j   | o   |
</code></pre></div><p>我们使用<code>truncate()</code>方法来做一下尝试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">truncate</span><span class="p">(</span><span class="n">before</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">after</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | A   | B   | C   |
|---:|:----|:----|:----|
|  2 | b   | g   | l   |
|  3 | c   | h   | m   |
|  4 | d   | i   | n   |
</code></pre></div><p>我们看到参数before和after存在于truncate()方法中，目的就是把行索引2之前和行索引4之后的数据排除在外，筛选出剩余的数据</p>
<br>
<h2 id="count方法">count()方法</h2>
<p><code>count()</code>方法主要是用来计算某一列当中非空值的个数，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;Name&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="s2">&#34;Myla&#34;</span><span class="p">,</span> <span class="s2">&#34;Lewis&#34;</span><span class="p">,</span> <span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="s2">&#34;John&#34;</span><span class="p">],</span>
                   <span class="s2">&#34;Age&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mf">24.</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">26</span><span class="p">],</span>
                   <span class="s2">&#34;Single&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">]})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | Name   |   Age |   Single |
|---:|:-------|------:|---------:|
|  0 | John   |    24 |        1 |
|  1 | Myla   |   nan |        1 |
|  2 | Lewis  |    25 |      nan |
|  3 | John   |    33 |        1 |
|  4 | John   |    26 |        0 |
</code></pre></div><p>我们使用count()方法来计算一下数据集当中非空值的个数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</code></pre></div><pre><code>Name      5
Age       4
Single    4
dtype: int64
</code></pre>
<br>
<h2 id="add_prefix方法add_suffix方法">add_prefix()方法/add_suffix()方法</h2>
<p><code>add_prefix()</code>方法和<code>add_suffix()</code>方法分别会给列名以及行索引添加后缀和前缀，对于<code>Series()</code>数据集而言，前缀与后缀是添加在行索引处，而对于<code>DataFrame()</code>数据集而言，前缀与后缀是添加在列索引处，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">s</span>
</code></pre></div><pre><code>0    1
1    2
2    3
3    4
dtype: int64
</code></pre>
<p>我们使用add_prefix()方法与add_suffix()方法在Series()数据集上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">.</span><span class="n">add_prefix</span><span class="p">(</span><span class="s1">&#39;row_&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>row_0    1
row_1    2
row_2    3
row_3    4
dtype: int64
</code></pre>
<p>又例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">.</span><span class="n">add_suffix</span><span class="p">(</span><span class="s1">&#39;_row&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>0_row    1
1_row    2
2_row    3
3_row    4
dtype: int64
</code></pre>
<p>而对于<code>DataFrame()</code>形式数据集而言，<code>add_prefix()</code>方法以及<code>add_suffix()</code>方法是将前缀与后缀添加在列索引处的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> 
                   <span class="s1">&#39;B&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   A |   B |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">add_prefix</span><span class="p">(</span><span class="s2">&#34;column_&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   column_A |   column_B |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">add_suffix</span><span class="p">(</span><span class="s2">&#34;_column&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   A_column |   B_column |
|---:|----:|----:|
|  0 |   1 |   3 |
|  1 |   2 |   4 |
|  2 |   3 |   5 |
|  3 |   4 |   6 |
</code></pre></div><br>
<h2 id="clip方法">clip()方法</h2>
<p><code>clip()</code>方法主要是通过设置阈值来改变数据集当中的数值，当数值超过阈值的时候，就做出相应的调整</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;col_0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="s1">&#39;col_1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">]}</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
|    |   col_0 |   col_1 |
|---:|--------:|--------:|
|  0 |       9 |      -2 |
|  1 |      -3 |      -7 |
|  2 |       0 |       6 |
|  3 |      -1 |       8 |
|  4 |       5 |      -5 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">lower</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="n">upper</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   col_0 |   col_1 |
|---:|--------:|--------:|
|  0 |       4 |      -2 |
|  1 |      -3 |      -4 |
|  2 |       0 |       4 |
|  3 |      -1 |       4 |
|  4 |       4 |      -4 |
</code></pre></div><p>我们看到参数lower和upper分别代表阈值的上限与下限，数据集当中超过上限与下限的值会被替代。</p>
<br>
<h2 id="filter方法">filter()方法</h2>
<p>pandas当中的<code>filter()</code>方法是用来筛选出特定范围的数据的，示例如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">])),</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| A  |     1 |     2 |       3 |
| B  |     4 |     5 |       6 |
| C  |     7 |     8 |       9 |
| D  |    10 |    11 |      12 |
</code></pre></div><p>我们使用filter()方法来筛选数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">items</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   three |
|:---|------:|--------:|
| A  |     1 |       3 |
| B  |     4 |       6 |
| C  |     7 |       9 |
| D  |    10 |      12 |
</code></pre></div><p>我们还可以使用正则表达式来筛选数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#字段名e结尾的列</span>
<span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">regex</span><span class="o">=</span><span class="s1">&#39;e$&#39;</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   three |
|:---|------:|--------:|
| A  |     1 |       3 |
| B  |     4 |       6 |
| C  |     7 |       9 |
| D  |    10 |      12 |

</code></pre></div><p>当然通过参数axis来调整筛选行方向或者是列方向的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">like</span><span class="o">=</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| B  |     4 |     5 |       6 |
</code></pre></div><br>
<h2 id="first方法">first()方法</h2>
<p>当数据集当中的行索引是日期的时候，可以通过该方法来筛选前面几行的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">index_1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s1">&#39;2021-11-11&#39;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="s1">&#39;2D&#39;</span><span class="p">)</span>
<span class="n">ts</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]},</span> <span class="n">index</span><span class="o">=</span><span class="n">index_1</span><span class="p">)</span>
<span class="n">ts</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   A |
|:--------------------|----:|
| 2021-11-11 00:00:00 |   1 |
| 2021-11-13 00:00:00 |   2 |
| 2021-11-15 00:00:00 |   3 |
| 2021-11-17 00:00:00 |   4 |
| 2021-11-19 00:00:00 |   5 |
</code></pre></div><br>
<p>我们使用first()方法来进行一些操作，例如筛选出前面3天的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ts</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="s1">&#39;3D&#39;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   A |
|:--------------------|----:|
| 2021-11-11 00:00:00 |   1 |
| 2021-11-13 00:00:00 |   2 |
</code></pre></div><br>
<h2 id="isin方法">isin()方法</h2>
<p>isin()方法主要是用来确认数据集当中的数值是否被包含在给定的列表当中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> 
                            <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">])),</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   one |   two |   three |
|:---|------:|------:|--------:|
| A  |     0 |     0 |       1 |
| B  |     0 |     1 |       0 |
| C  |     0 |     0 |       0 |
| D  |     0 |     0 |       1 |
</code></pre></div><p>若是数值被包含在列表当中了，也就是3、5、12当中，返回的是True，否则就返回False</p>
<br>
<h2 id="dfplotarea方法">df.plot.area()方法</h2>
<p>下面我们来讲一下如何在Pandas当中通过一行代码来绘制图表，将所有的列都通过面积图的方式来绘制</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;sales&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">65</span><span class="p">],</span>
    <span class="s1">&#39;signups&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">13</span><span class="p">],</span>
    <span class="s1">&#39;visits&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span>
<span class="p">},</span> 
    <span class="n">index</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="s1">&#39;2021/01/01&#39;</span><span class="p">,</span> 
                        <span class="n">end</span><span class="o">=</span><span class="s1">&#39;2021/07/01&#39;</span><span class="p">,</span> 
                        <span class="n">freq</span><span class="o">=</span><span class="s1">&#39;M&#39;</span><span class="p">))</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|                     |   sales |   signups |   visits |
|:--------------------|--------:|----------:|---------:|
| 2021-01-31 00:00:00 |      30 |         7 |       20 |
| 2021-02-28 00:00:00 |      20 |         9 |       42 |
| 2021-03-31 00:00:00 |      38 |         6 |       28 |
| 2021-04-30 00:00:00 |      95 |        12 |       62 |
| 2021-05-31 00:00:00 |     106 |        18 |       81 |
| 2021-06-30 00:00:00 |      65 |        13 |       50 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">area</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div>
<figure >
    
        <img src="img/output_79_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotbar方法">df.plot.bar()方法</h2>
<p>下面我们看一下如何通过一行代码来绘制柱状图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;label&#39;</span><span class="p">:[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span> <span class="s1">&#39;values&#39;</span><span class="p">:[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">70</span><span class="p">]})</span>
<span class="n">df</span><span class="o">.</span><span class="n">to_markdown</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | label   |   values |
|---:|:--------|---------:|
|  0 | A       |       10 |
|  1 | B       |       30 |
|  2 | C       |       50 |
|  3 | D       |       70 |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;label&#39;</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="s1">&#39;values&#39;</span><span class="p">,</span> 
                 <span class="n">rot</span><span class="o">=-</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_83_0.png" />
    
    
</figure>

<p>当然我们也可以根据不同的类别来绘制柱状图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">17.5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">88</span><span class="p">]</span>
<span class="n">weight</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="s1">&#39;G&#39;</span><span class="p">]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="n">age</span><span class="p">,</span> 
                   <span class="s1">&#39;weight&#39;</span><span class="p">:</span> <span class="n">weight</span><span class="p">},</span> 
                   <span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">rot</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_85_0.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_86_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotbox方法">df.plot.box()方法</h2>
<p>我们来看一下箱型图的具体的绘制，通过pandas一行代码来实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="s1">&#39;ABC&#39;</span><span class="p">))</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |         A |          B |          C |
|---:|----------:|-----------:|-----------:|
|  0 | -1.59132  |  1.47926   |  1.16891   |
|  1 | -0.649097 |  0.0501129 | -0.81485   |
|  2 |  1.31677  |  1.00035   |  0.0662983 |
|  3 | -1.04484  |  0.445727  |  0.0140137 |
|  4 |  0.217317 | -0.692044  | -0.758549  |
|  5 | -0.566574 | -0.159038  |  0.781744  |
|  6 | -0.903068 |  1.50697   |  1.2605    |
|  7 |  1.38627  | -0.0539971 | -0.0619803 |
|  8 | -1.50639  | -0.187649  |  1.00115   |
|  9 | -1.84435  | -1.37282   |  0.905218  |
| 10 | -0.400618 |  0.503642  |  1.20152   |
| 11 | -0.164643 |  1.58712   | -0.0475168 |
| 12 |  1.99742  | -0.928291  |  0.502433  |
| 13 | -1.25877  |  2.0764    | -0.840626  |
| 14 | -0.293273 | -2.09935   | -0.152372  |
| 15 | -0.686338 |  0.798964  |  1.4551    |
| 16 |  0.407321 |  0.601732  |  0.456718  |
| 17 |  0.594827 | -1.8498    |  1.22704   |
| 18 | -0.345245 | -1.27973   | -0.0971918 |
| 19 |  1.91415  |  0.656389  | -1.15816   |
| 20 |  0.149819 |  1.10037   | -0.0785313 |
| 21 | -0.311471 | -1.10781   |  0.707936  |
| 22 |  0.614726 | -0.142359  | -1.23091   |
| 23 |  1.46869  |  1.27063   |  0.797499  |
| 24 | -1.02252  |  0.819603  | -0.220382  |
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ax</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">box</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_90_0.png" width="800" />
    
    
</figure>

<br>
<h2 id="dfplotpie方法">df.plot.pie()方法</h2>
<p>接下来是饼图的绘制</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;mass&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.33</span><span class="p">,</span> <span class="mf">4.87</span> <span class="p">,</span> <span class="mf">5.97</span><span class="p">],</span>
                   <span class="s1">&#39;radius&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">2439.7</span><span class="p">,</span> <span class="mf">6051.8</span><span class="p">,</span> <span class="mf">6378.1</span><span class="p">]},</span>
                  <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Mercury&#39;</span><span class="p">,</span> <span class="s1">&#39;Venus&#39;</span><span class="p">,</span> <span class="s1">&#39;Earth&#39;</span><span class="p">])</span>

<span class="n">plot</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s1">&#39;mass&#39;</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</code></pre></div>
<figure >
    
        <img src="img/output_92_0.png" width="800" />
    
    
</figure>

<p>除此之外，还有折线图、直方图、散点图等等，步骤与方式都与上述的技巧有异曲同工之妙，大家感兴趣的可以自己另外去尝试。</p>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/4000%E5%AD%97%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E_%E6%8E%A8%E8%8D%9020%E4%B8%AA%E5%A5%BD%E7%94%A8%E5%88%B0%E7%88%86%E7%9A%84Pandas%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95.ipynb">https://github.com/hidadeng/DaDengAndHisPython/blob/master/4000字详细说明_推荐20个好用到爆的Pandas函数方法.ipynb</a></p>
<br>
<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/PEhYrNbZyI9Prl3OwrBcAw">https://mp.weixin.qq.com/s/PEhYrNbZyI9Prl3OwrBcAw</a></p>
<p>author: 俊欣
公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a><a href="https://textdata.cn/blog/management_python_course/">https://textdata.cn/blog/management_python_course/</a>)</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐|pandas必知必会50例</title>
      <link>https://textdata.cn/blog/pandas_must_know_50_examples/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_must_know_50_examples/</guid>
      <description>pandas常用知识8000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/j71IPWmT57g3VTajGhgN7Q">https://mp.weixin.qq.com/s/j71IPWmT57g3VTajGhgN7Q</a>
author: 俊欣
公众号: 关于数据分析与可视化</p>
</blockquote>
<br>
<p>本篇我们继续前面pandas系列教程的探讨，今天小编会介绍pandas库当中一些非常基础的方法与函数，希望大家看了之后会有所收获。</p>
<h2 id="准备需要的数据集">准备需要的数据集</h2>
<p>我们先准备生成一些随机数，作为后面需要用到的数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">index</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&#34;1/1/2000&#34;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">series</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;e&#34;</span><span class="p">])</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                  <span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="p">,</span>
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>

</code></pre></div><br>
<h2 id="head-and-tail">Head and tail</h2>
<p>head()和tail()方法是用来查看数据集当中的前几行和末尾几行的，默认是查看5行，当然读者朋友也可以自行设定行数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
<span class="n">series2</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><pre><code>0    0.578276
1    0.643313
2   -0.336030
3   -0.422468
4   -0.493812
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 同理</span>
<span class="n">series2</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>
</code></pre></div><pre><code>95    1.307962
96    1.165135
97    0.717692
98    0.605668
99    0.264990
dtype: float64
</code></pre>
<br>
<h2 id="数据的统计分析">数据的统计分析</h2>
<p>在pandas当中用describe()方法来对表格中的数据做一个概括性的统计分析，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><pre><code>count    100.000000
mean       0.106277
std        1.027541
min       -2.554005
25%       -0.510912
50%        0.028765
75%        0.795444
max        2.512260
dtype: float64
</code></pre>
<p>当然，我们也可以设置好输出的分位</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">series2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">percentiles</span><span class="o">=</span><span class="p">[</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">])</span>
</code></pre></div><pre><code>count    100.000000
mean       0.106277
std        1.027541
min       -2.554005
5%        -1.450067
25%       -0.510912
50%        0.028765
75%        0.795444
95%        1.757926
max        2.512260
dtype: float64
</code></pre>
<p>对于离散型的数据来说，describe()方法给出的结果则会简洁很多</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">])</span>
<span class="n">s</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><pre><code>count     10
unique     4
top        a
freq       5
dtype: object
</code></pre>
<p>要是表格中既包含了离散型数据，也包含了连续型的数据，默认的话，describe()是会针对<strong>连续型数据</strong>进行统计分析</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Yes&#34;</span><span class="p">,</span> <span class="s2">&#34;Yes&#34;</span><span class="p">,</span> <span class="s2">&#34;No&#34;</span><span class="p">,</span> <span class="s2">&#34;No&#34;</span><span class="p">],</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">4</span><span class="p">)})</span>
<span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       |        b |
|:------|---------:|
| count | 4        |
| mean  | 0.967026 |
| std   | 0.859657 |
| min   | 0.204027 |
| 25%   | 0.233797 |
| 50%   | 0.947075 |
| 75%   | 1.6803   |
| max   | 1.76993  |
</code></pre></div><p>当然我们也可以指定让其强制统计分析离散型数据或者连续型数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;object&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|        | a   |
|:-------|:----|
| count  | 4   |
| unique | 2   |
| top    | Yes |
| freq   | 2   |
</code></pre></div><p>同理，我们也可以指定连续型的数据进行统计分析</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;number&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|       |        b |
|:------|---------:|
| count | 4        |
| mean  | 0.967026 |
| std   | 0.859657 |
| min   | 0.204027 |
| 25%   | 0.233797 |
| 50%   | 0.947075 |
| 75%   | 1.6803   |
| max   | 1.76993  |
</code></pre></div><p>如果我们都要去做统计分析，可以这么来执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="s2">&#34;all&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|        | a   |          b |
|:-------|:----|-----------:|
| count  | 4   |   4        |
| unique | 2   | nan        |
| top    | Yes | nan        |
| freq   | 2   | nan        |
| mean   | nan |   0.967026 |
| std    | nan |   0.859657 |
| min    | nan |   0.204027 |
| 25%    | nan |   0.233797 |
| 50%    | nan |   0.947075 |
| 75%    | nan |   1.6803   |
| max    | nan |   1.76993  |
</code></pre></div><br>
<h2 id="最大最小值的位置">最大/最小值的位置</h2>
<p>idxmin()和idxmax()方法是用来查找表格当中最大/最小值的位置，返回的是值的索引</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="n">s1</span>
</code></pre></div><pre><code>0    2.244266
1    1.398258
2   -1.827026
3   -0.058691
4    0.275471
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">s1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(),</span> <span class="n">s1</span><span class="o">.</span><span class="n">idxmax</span><span class="p">()</span>
</code></pre></div><pre><code>(2, 0)
</code></pre>
<p>用在DataFrame上面的话，如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                   <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="n">df1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   0 |
|:---|----:|
| A  |   2 |
| B  |   3 |
| C  |   2 |
</code></pre></div><p>同理，我们将axis参数改成1</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">idxmin</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | 0   |
|---:|:----|
|  0 | B   |
|  1 | B   |
|  2 | A   |
|  3 | B   |
|  4 | B   |
</code></pre></div><br>
<h2 id="value_counts方法">value_counts()方法</h2>
<p>pandas当中的value_counts()方法主要用于数据表的计数以及排序，用来查看表格当中，指定列有多少个不同的数据值并且计算不同值在该列当中出现的次数，先来看一个简单的例子</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;城市&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;北京&#39;</span><span class="p">,</span> <span class="s1">&#39;广州&#39;</span><span class="p">,</span> <span class="s1">&#39;上海&#39;</span><span class="p">,</span> <span class="s1">&#39;上海&#39;</span><span class="p">,</span> <span class="s1">&#39;杭州&#39;</span><span class="p">,</span> <span class="s1">&#39;成都&#39;</span><span class="p">,</span> <span class="s1">&#39;香港&#39;</span><span class="p">,</span> <span class="s1">&#39;南京&#39;</span><span class="p">,</span> <span class="s1">&#39;北京&#39;</span><span class="p">,</span> <span class="s1">&#39;北京&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;收入&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">5500</span><span class="p">,</span> <span class="mi">5500</span><span class="p">,</span> <span class="mi">4000</span><span class="p">,</span> <span class="mi">50000</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="mi">5200</span><span class="p">,</span> <span class="mi">5600</span><span class="p">],</span>
                   <span class="s1">&#39;年龄&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">]})</span>
<span class="n">df</span><span class="p">[</span><span class="s2">&#34;城市&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div><pre><code>北京    3
上海    2
广州    1
杭州    1
南京    1
香港    1
成都    1
Name: 城市, dtype: int64
</code></pre>
<p>可以看到北京出现了3次，上海出现了2次，并且默认采用的是降序来排列的，下面我们来看一下用升序的方式来排列一下收入这一列</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;收入&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>5600     1
5000     1
8000     1
5200     1
50000    1
4000     1
10000    2
5500     2
Name: 收入, dtype: int64
</code></pre>
<p>同时里面也还可以利用参数normalize=True，来计算不同值的计数占比</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;年龄&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
                      <span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>32    0.1
34    0.1
50    0.1
40    0.1
43    0.1
45    0.1
25    0.4
Name: 年龄, dtype: float64
</code></pre>
<br>
<h2 id="数据分组">数据分组</h2>
<p>我们可以使用cut()方法以及qcut()方法来对表格中的连续型数据分组，首先我们看一下cut()方法，假设下面这组数据代表的是小组每个成员的年龄</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ages</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">62</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">89</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">32</span><span class="p">])</span>
<span class="n">pd</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div><pre><code>[(1.907, 20.6], (1.907, 20.6], (1.907, 20.6], (39.2, 57.8], (20.6, 39.2], ..., (1.907, 20.6], (1.907, 20.6], (20.6, 39.2], (20.6, 39.2], (20.6, 39.2]]
Length: 16
Categories (5, interval[float64]): [(1.907, 20.6] &lt; (20.6, 39.2] &lt; (39.2, 57.8] &lt; (57.8, 76.4] &lt; (76.4, 95.0]]
</code></pre>
<p>由上可以看到用cut()方法将数据平分成了5个区间，且区间两边都有扩展以包含<strong>最大值和最小值</strong>，当然我们也可以给每一个区间加上标记</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="sa">u</span><span class="s2">&#34;婴儿&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;少年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;青年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;中年&#34;</span><span class="p">,</span><span class="sa">u</span><span class="s2">&#34;老年&#34;</span><span class="p">])</span>
</code></pre></div><pre><code>['婴儿', '婴儿', '婴儿', '青年', '少年', ..., '婴儿', '婴儿', '少年', '少年', '少年']
Length: 16
Categories (5, object): ['婴儿' &lt; '少年' &lt; '青年' &lt; '中年' &lt; '老年']
</code></pre>
<p>而对于qcut()方法来说，我们可以指定区间来进行分组，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">qcut</span><span class="p">(</span><span class="n">ages</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;小朋友&#39;</span><span class="p">,</span><span class="s1">&#39;大孩子&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>['小朋友', '小朋友', '小朋友', '大孩子', '大孩子', ..., '小朋友', '小朋友', '小朋友', '小朋友', '小朋友']
Length: 16
Categories (2, object): ['小朋友' &lt; '大孩子']
</code></pre>
<p>这里将年龄这组数据分成两部分[0, 0.5, 1]，一组是标上标记小朋友，另一组是大孩子，不过通常情况下，我们用的cut()方法比较多</p>
<p><br><br></p>
<h2 id="引用函数">引用函数</h2>
<p>要是在表格当中引用其他的方法，或者是自建的函数，可以使用通过pandas当中的以下这几个方法</p>
<ul>
<li>pipe()</li>
<li>apply()和applymap()</li>
<li>agg()和transform()</li>
</ul>
<br>
<h2 id="pipe方法">pipe()方法</h2>
<p>首先我们来看pipe()这个方法，我们可以将自己定义好的函数，以链路的形式一个接着一个传给我们要处理的数据集上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">extract_city_name</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_name&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_and_code&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>

<span class="k">def</span> <span class="nf">add_country_name</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">country_name</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_and_country&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_name&#34;</span><span class="p">]</span> <span class="o">+</span> <span class="n">country_name</span>
    <span class="k">return</span> <span class="n">df</span>
</code></pre></div><p>然后我们用pip()这个方法来将上面我们定义的函数串联起来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_p</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;city_and_code&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Arizona, AZ&#34;</span><span class="p">]})</span>
<span class="n">df_p</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;state_and_code&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;Arizona, AZ&#34;</span><span class="p">]})</span>
<span class="n">df_p</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">extract_city_name</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">add_country_name</span><span class="p">,</span> <span class="n">country_name</span><span class="o">=</span><span class="s2">&#34;_USA&#34;</span><span class="p">)</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    | state_and_code   | state_name   | state_and_country   |
|---:|:-----------------|:-------------|:--------------------|
|  0 | Arizona, AZ      | Arizona      | Arizona_USA         |
</code></pre></div><br>
<h2 id="apply方法和applymap方法">apply()方法和applymap()方法</h2>
<p>apply()方法可以对表格中的数据按照行或者是列方向进行处理，默认是按照列方向，如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A   -0.101751
B   -0.360288
C   -0.637433
dtype: float64
</code></pre></div><p>当然，我们也可以通过axis参数来进行调节</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0   -0.803675
1   -0.179640
2   -1.200973
3    0.156888
4    0.381631
5    0.049274
6    1.174923
7    0.612591
dtype: float64
</code></pre></div><p>除此之外，我们也可以直接调用匿名函数lambda的形式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">min</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A    1.922863
B    2.874672
C    1.943930
dtype: float64
</code></pre></div><p>也可以调用自己定义的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">normalize</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span> <span class="o">/</span> <span class="n">x</span><span class="o">.</span><span class="n">std</span><span class="p">()</span>
</code></pre></div><p>我们用上apply()方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">normalize</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B         C
0  1.149795  0.390263 -0.813770
1  0.805843 -0.532374  0.859627
2  0.047824 -0.085334 -0.067179
3 -0.903319 -1.215023  1.149538
4 -1.100144  1.442467 -1.128216
</code></pre></div><p>apply()方法作用于数据集当中的每个行或者是列，而applymap()方法则是对数据集当中的所有元素都进行处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;key1&#39;</span> <span class="p">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;key2&#39;</span> <span class="p">:</span> <span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;one&#39;</span><span class="p">],</span>
                   <span class="s1">&#39;data1&#39;</span> <span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
                   <span class="s1">&#39;data2&#39;</span> <span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">)})</span>
<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1   key2  data1  data2
0    a    one      1     10
1    c    two      2     11
2    b  three      3     12
3    b   four      4     13
4    d   five      5     14
</code></pre></div><p>我们来自定义一个函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="k">def</span> <span class="nf">add_A</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&#34;A&#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    
<span class="n">df</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">add_A</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1    key2 data1 data2
0   Aa    Aone    A1   A10
1   Ac    Atwo    A2   A11
2   Ab  Athree    A3   A12
3   Ab   Afour    A4   A13
4   Ad   Afive    A5   A14
</code></pre></div><p>我们然后也可以通过lambda()自定义函数方法，然后来去除掉这个A</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">add_A</span><span class="p">)</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;A&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  key1   key2 data1 data2
0    a    one     1    10
1    c    two     2    11
2    b  three     3    12
3    b   four     4    13
4    d   five     5    14
</code></pre></div><br>
<h2 id="agg方法和transform方法">agg()方法和transform()方法</h2>
<p>agg()方法本意上是聚合函数，我们可以将用于统计分析的一系列方法都放置其中，并且放置多个</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                  <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">])</span>
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">)</span>
</code></pre></div><pre><code>A    2.042573
B    2.189269
C   -1.066976
dtype: float64
</code></pre>
<p>当然，当中的np.sum部分也可以用字符串来表示，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="s2">&#34;sum&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>A    2.042573
B    2.189269
C   -1.066976
dtype: float64
</code></pre>
<p>我们尝试在当中放置多个统计分析的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="s2">&#34;mean&#34;</span><span class="p">,</span> <span class="s2">&#34;median&#34;</span><span class="p">])</span>
</code></pre></div><p>当然我们也可以和lambda匿名函数混合着搭配</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">()])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">                 A         B         C
sum      -0.066486 -1.288341 -1.236244
&lt;lambda&gt; -0.013297 -0.257668 -0.247249
</code></pre></div><p>或者和自己定义的函数方法混合着用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">my_mean</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
    
<span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">([</span><span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="n">my_mean</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">                A         B         C
sum     -4.850201 -1.544773  0.429007
my_mean -0.970040 -0.308955  0.085801
</code></pre></div><p>与此同时，我们在agg()方法中添加字典，实现不同的列使用不同的函数方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;sum&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;mean&#34;</span><span class="p">})</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A   -0.801753
B    0.097550
dtype: float64
</code></pre></div><br>
<h2 id="索引和列名的重命名">索引和列名的重命名</h2>
<p>针对索引和列名的重命名，我们可以通过pandas当中的rename()方法来实现，例如我们有这样一个数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> 
                   <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">],</span>
                   <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="s2">&#34;d&#34;</span><span class="p">,</span> <span class="s2">&#34;e&#34;</span><span class="p">])</span>
<span class="n">df1</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B         C
a  0.343690  0.869984 -1.929814
b  1.025613  0.470155 -0.242463
c -0.400908 -0.362684  0.226857
d -1.339706 -0.302005 -1.784452
e -0.957026 -0.813600  0.215098
</code></pre></div><p>我们可以这样来操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="s2">&#34;three&#34;</span><span class="p">},</span>
           <span class="n">index</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;banana&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="s2">&#34;cat&#34;</span><span class="p">})</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">             one       two     three
apple   0.383813  0.588964 -0.162386
banana -0.462068 -2.938896  0.935492
cat    -0.059807 -1.987281  0.095432
d      -0.085230  2.013733 -1.324039
e      -0.678352  0.306776  0.808697
</code></pre></div><p>当然我们可以拆开来，单独对行或者是列进行重命名，对列的重命名可以这么来做</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">rename</span><span class="p">({</span><span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="s2">&#34;three&#34;</span><span class="p">},</span> 
           <span class="n">axis</span> <span class="o">=</span> <span class="s2">&#34;columns&#34;</span><span class="p">)</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">        one       two     three
a -0.997108 -1.383011  0.474298
b  1.009910  0.286303  1.120783
c  1.130700 -0.566922  1.841451
d -0.350438 -0.171079 -0.079804
e  0.988050 -0.524604  0.653306
</code></pre></div><br>
<h2 id="排序">排序</h2>
<p>在pandas当中，我们可以针对数据集当中的值来进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span><span class="s2">&#34;one&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> 
     <span class="s2">&#34;two&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> 
     <span class="s2">&#34;three&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]}</span>
<span class="p">)</span>

<span class="n">df1</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
0    2    1      5
1    1    3      4
2    1    2      3
3    1    4      2
</code></pre></div><p>我们按照“three”这一列当中的数值来进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s2">&#34;three&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
3    1    4      2
2    1    2      3
1    1    3      4
0    2    1      5
</code></pre></div><p>我们也可以依照多列进行排序</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;two&#34;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
2    1    2      3
1    1    3      4
3    1    4      2
0    2    1      5
</code></pre></div><p>在“one”这一列相等的时候，比较“two”这一列数值的大小，在排序的过程当中，默认采用的都是升序，我们可以改成降序来进行编排</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   one  two  three
3    1    4      2
1    1    3      4
2    1    2      3
0    2    1      5
</code></pre></div><br>
<h2 id="数据类型的转换">数据类型的转换</h2>
<p>最后涉及到的是数据类型的转换，在这之前，我们先得知道如何来查看数据的类型，pandas当中有相应的方法可以处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;A&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="s2">&#34;float16&#34;</span><span class="p">),</span>
        <span class="s2">&#34;B&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">)),</span>
        <span class="s2">&#34;C&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="s2">&#34;uint8&#34;</span><span class="p">)),</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="n">df2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">          A         B    C
0 -0.498779 -0.501512    0
1 -0.055817 -0.528227  254
2 -0.914551  0.763298    1
3 -0.916016  1.366833    0
4  1.993164  1.834457    0
</code></pre></div><p>我们通过dtypes属性来查看数据的类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A    float16
B    float64
C      uint8
dtype: object
</code></pre></div><p>而通过astype()方法来实现数据类型的转换</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df2</span><span class="p">[</span><span class="s2">&#34;B&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;int64&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    0
1    0
2    0
3    2
4    1
Name: B, dtype: int64
</code></pre></div><br>
<h2 id="根据数据类型来筛选">根据数据类型来筛选</h2>
<p>与此同时，我们也可以根据相对应的数据类型来进行筛选，运用pandas当中的select_dtypes方法，我们先来创建一个数据集包含了各种数据类型的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;string_1&#34;</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="s2">&#34;abcde&#34;</span><span class="p">),</span>
        <span class="s2">&#34;int64_1&#34;</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)),</span>
        <span class="s2">&#34;uint8_1&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;u1&#34;</span><span class="p">),</span>
        <span class="s2">&#34;float64_1&#34;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">9.0</span><span class="p">),</span>
        <span class="s2">&#34;bool1&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">],</span>
        <span class="s2">&#34;bool2&#34;</span><span class="p">:</span> <span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">],</span>
        <span class="s2">&#34;dates_1&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="s2">&#34;now&#34;</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span>
        <span class="s2">&#34;category_1&#34;</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="s2">&#34;ABCDE&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&#34;category&#34;</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  string_1  int64_1  uint8_1  ...  bool2                      dates_1  category_1
0      a      1      3  ...  False 2021-11-10 10:43:05.957685         A
1      b      2      4  ...   True 2021-11-11 10:43:05.957685         B
2      c      3      5  ...  False 2021-11-12 10:43:05.957685         C
3      d      4      6  ...  False 2021-11-13 10:43:05.957685         D
4      e      5      7  ...   True 2021-11-14 10:43:05.957685         E
</code></pre></div><p>我们先来查看一下各个列的数据类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">string_1              object
int64_1                int64
uint8_1                uint8
float64_1            float64
bool1                   bool
bool2                   bool
dates_1       datetime64[ns]
category_1          category
dtype: object
</code></pre></div><p>我们筛选类型为布尔值的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="nb">bool</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   bool1  bool2
0   True  False
1  False   True
2   True  False
3   True  False
4  False   True
</code></pre></div><p>筛选出数据类型为整型的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;int64&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   int64_1
0      1
1      2
2      3
3      4
4      5
</code></pre></div><br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何在DataFrame中使用If-Else条件语句创建新列</title>
      <link>https://textdata.cn/blog/how_to_use_ifelse_in_pandas/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/how_to_use_ifelse_in_pandas/</guid>
      <description>两个numpy函数搞定这一难题</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031%E5%A6%82%E4%BD%95%E5%9C%A8DataFrame%E4%B8%AD%E4%BD%BF%E7%94%A8If-Else%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%97">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211031如何在DataFrame中使用If-Else条件语句创建新列</a></p>
<br>
<p>有时我们希望根据 DataFrame 其他列(字段) 的值向 DataFrame 添加一列。</p>
<p>虽然这听起来很简单，但如果我们尝试使用 if-else 条件来完成它可能会变得有点复杂。 值得庆幸的是，使用 numpy 两个函数<strong>np.where()、np.select()</strong> 就能实现这一需求。</p>
<h2 id="导入数据">导入数据</h2>
<p>我们有一个包含 4,000 多条 Dataquest 推文的数据集,字段包括：</p>
<ul>
<li>date  twitter发送的日期</li>
<li>time  推文发送时间</li>
<li>tweet   推文内容</li>
<li>mentions    谁提到了该推文</li>
<li>photos    图片链接</li>
<li>replies_count  推文回复数</li>
<li>retweets_count  推文再转发数</li>
<li>likes_count  推文获得的点赞数</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;tweets.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df1.png" width="100%" />
    
    
</figure>

<p><br><br></p>
<h2 id="问题">问题</h2>
<p>我们看到数据集中的<strong>photos</strong>字段是图片链接</p>
<ul>
<li>如果某条记录有信息，会显示图片链接列表</li>
<li>如果不含图片，该字段对应的数据是空列表</li>
</ul>
<p>我们只想查看带有图片的推文是否获得更多交互，因此我们实际上并不需要图片 URL。 让我们尝试创建一个名为 <strong>has_image</strong> 的新列，该列将包含布尔值</p>
<ul>
<li>如果推文包含图像，则为 True，否则为 False。</li>
</ul>
<p>那么我们如何创建一个<strong>has_image</strong>字段？</p>
<p><br><br></p>
<h2 id="npwhere">np.where()</h2>
<p>np.where(condition, value if condition is true, value if condition is false)</p>
<p>为此，我们将使用 numpy 的内置 where() 函数。 这个函数依次接受三个参数：我们要测试的条件，如果条件为真则分配给新列的值，如果条件为假则分配给新列的值。 它看起来像这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;has_image&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;photos&#39;</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;[]&#39;</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="npselect">np.select()</h2>
<p>这种方法很好用，但如果我们新建列的值不止True、False呢？</p>
<p>例如我们把<strong>likes_count</strong> 进行分类，不同取值范围定义为不同的类别</p>
<ul>
<li>tier_4  少于2个赞</li>
<li>tier_3  3-9 个赞</li>
<li>tier_2  10-15 个赞</li>
<li>tier_1  16+ 个赞</li>
</ul>
<p>为此，我们可以使用名为 <strong>np.select()</strong> 的函数。我们将给它两个参数：一个我们的条件列表，以及一个我们想要分配给新列中每一行的值的相关列表。</p>
<p>这意味着顺序很重要：如果满足条件列表中的第一个条件，则值列表中的第一个值将分配给该行的新列。如果满足第二个条件，则将分配第二个值，依此类推。</p>
<p>让我们来看看它在 Python 代码中的表现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># create a list of our conditions</span>
<span class="n">conditions</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">15</span><span class="p">),</span>
    <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;likes_count&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">)</span>
    <span class="p">]</span>

<span class="c1"># create a list of the values we want to assign for each condition</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;tier_4&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_3&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_2&#39;</span><span class="p">,</span> <span class="s1">&#39;tier_1&#39;</span><span class="p">]</span>

<span class="c1"># create a new column and use np.select to assign values to it using our lists as arguments</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;tier&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">conditions</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>

<span class="c1"># display updated DataFrame</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df3.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Pandas小案例 | 对某公司同年的某指标批量汇总</title>
      <link>https://textdata.cn/blog/pandas_example_company_analysis/</link>
      <pubDate>Thu, 20 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_example_company_analysis/</guid>
      <description>学会pandas包，走到哪里都不怕</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="%E4%BB%A3%E7%A0%81.zip">点击此处下载代码</a></p>
<br>
<h2 id="问题">问题</h2>
<p>如何将数据中，同一股票代码同一年的某个字段加总成一条？</p>
<p>我想把某公司同一年的数据var加总到一起</p>
<br>
<h2 id="思路">思路</h2>
<p>可以通过pandas库实现这个需求</p>
<ol>
<li>获取公司股票代码列表</li>
<li>获取某公司年份列表</li>
<li>对某个公司同年的var进行加总  (var代指一个字段或变量)</li>
<li>for循环对所有的公司重复2-3操作</li>
</ol>
<br>
<h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="c1">#强制股票代码转为str类型</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data.xlsx&#39;</span><span class="p">,</span> <span class="n">converters</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;code&#34;</span><span class="p">:</span> <span class="nb">str</span><span class="p">})</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<br>
<h2 id="实验代码">实验代码</h2>
<h3 id="1-获取公司股票代码列表">1. 获取公司股票代码列表</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">codes</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
<span class="n">codes</span>
</code></pre></div><p>Run</p>
<pre><code>array(['000001', '000002', '000004', '000005', '000006'], dtype=object)
</code></pre>
<br>
<h3 id="2-获取某公司年份列表">2. 获取某公司年份列表</h3>
<p>以000001为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">years</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;000001&#39;</span><span class="p">][</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">years</span>
</code></pre></div><p>Run</p>
<pre><code>{2000, 2002, 2007, 2008, 2010, 2013, 2019}
</code></pre>
<br>
<h3 id="3-对某个公司同年的baladded进行加总">3. 对某个公司同年的baladded进行加总</h3>
<p>以000001公司2000年为例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;000001&#39;</span><span class="p">]</span>
<span class="n">ndf</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">]</span>
</code></pre></div><p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span>
</code></pre></div><p>Run</p>
<pre><code>0   -65856130.0
1   -65856130.0
Name: baladded, dtype: float64
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">2000</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<pre><code>-131712260.0
</code></pre>
<br>
<h3 id="for循环对所有的公司重复2-3操作">for循环对所有的公司重复2-3操作</h3>
<p>汇总代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">codes</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
<span class="k">for</span> <span class="n">code</span> <span class="ow">in</span> <span class="n">codes</span><span class="p">:</span>
    <span class="n">years</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">code</span><span class="p">][</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="n">years</span><span class="p">:</span>
        <span class="n">ndf</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">code</span><span class="p">]</span>
        <span class="n">baladded_sum</span> <span class="o">=</span> <span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">year</span><span class="p">][</span><span class="s1">&#39;baladded&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">baladded_sum</span><span class="p">)</span>
        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
<span class="n">result_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;baladded_sum&#39;</span><span class="p">])</span>
<span class="n">result_df</span>
</code></pre></div><p><img loading="lazy" src="img/df4.png" alt=""  />
</p>
<br>
<p>保存结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">result_df</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="s1">&#39;result.xlsx&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
