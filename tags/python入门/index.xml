<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python入门 on 大邓和他的PYTHON</title>
    <link>/tags/python%E5%85%A5%E9%97%A8/</link>
    <description>Recent content in Python入门 on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 31 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python%E5%85%A5%E9%97%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>硬核 | 使用Poetry发布Python库到PyPi的方法</title>
      <link>https://textdata.cn/blog/2023-03-31-using-poetry-to-manage-your-project-env/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-03-31-using-poetry-to-manage-your-project-env/</guid>
      <description>如何使用poetry打包python库</description>
      <content:encoded><![CDATA[<h2 id="一介绍">一、介绍</h2>
<p>Poetry 是一个用于管理 Python 项目的工具，它的主要用途包括以下几个方面：</p>
<ul>
<li>依赖管理：Poetry 可以帮助您管理项目的依赖项。您可以使用 Poetry 来定义项目的依赖项，包括 Python 版本和其他 Python 包，然后 Poetry 会自动安装和管理这些依赖项。这有助于确保项目在不同环境中具有一致的依赖项。</li>
<li>包管理：Poetry 可以帮助您构建和发布 Python 包。它能够生成标准的分发文件，如 wheel 和 sdist（源分发文件），以便您可以轻松地分享和分发您的包。此外，Poetry 还支持发布包到 PyPI（Python 包索引）等包仓库。</li>
<li>虚拟环境管理：Poetry 可以自动创建和管理虚拟环境，以确保项目的依赖项不会干扰全局 Python 环境或其他项目的环境。这有助于隔离项目之间的依赖关系，使项目更加稳定和可维护。</li>
<li>项目配置：Poetry 使用一个易于编辑的配置文件（pyproject.toml）来定义项目的元信息、依赖关系和其他配置。这使得项目配置变得更加直观和可读。</li>
<li>版本管理：Poetry 支持版本控制，可以帮助您管理项目的版本号。您可以在项目配置中指定版本号，并根据项目的进展逐渐升级版本。</li>
<li>脚本管理：Poetry 允许您定义和运行自定义脚本，以简化项目的常见任务，如测试、构建、文档生成等。</li>
<li>依赖解析：Poetry 使用一种智能的依赖解析算法来确保项目的依赖项解析不会导致冲突或不一致性，同时尽量满足依赖项的约束条件。</li>
</ul>
<p>总之，Poetry 是一个功能强大的 Python 项目管理工具，可以帮助开发人员更轻松地管理项目的依赖项、构建和发布 Python 包，以及管理项目的配置和版本。它提供了一种现代化的方式来处理 Python 项目的工程化和依赖管理。</p>
<p>今天主要分享</p>
<ul>
<li>如何使用poetry创建项目环境</li>
<li>如何使用poetry打包自己的python库</li>
</ul>
<p><br><br></p>
<h2 id="二创建项目环境">二、创建项目环境</h2>
<p>创建一个项目(或库)的虚拟环境，现在用poetry从0开始配置。首先安装poetry，在cmd执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install poetry
</code></pre></div><br>
<h3 id="21-创建新项目">2.1 创建新项目</h3>
<p>打开cmd， 切换至桌面(大邓喜欢在桌面做事，也简单好记)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd desktop
poetry new myproject
</code></pre></div><p>这样在桌面新生成了一个cntext项目文件夹， 该项目的文件目录树结构</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">myproject
   |--- __init__.py
poetry.lock
pyproject.toml
README.md
tests
   |--- __init__.py
</code></pre></div><p><img loading="lazy" src="img/myproject.png" alt=""  />
</p>
<br>
<h3 id="22-切换至项目目录">2.2 切换至项目目录</h3>
<p>在cmd中将当前工作目录切换至myproject项目内</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd myproject
</code></pre></div><br>
<h3 id="23-创建虚拟环境">2.3 创建虚拟环境</h3>
<p>在myproject项目内创建python3虚拟环境，cmd中的执行命令如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">poetry env use python3
</code></pre></div><p>这会创建一个名为 <code>python3</code> 的虚拟环境并激活它。 例如大邓的Python是3.11.5，则pyproject.toml内会有</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[tool.poetry.dependencies]
python = &#34;^3.11&#34;
</code></pre></div><p>表示poetry依赖于大邓电脑中的python3.11环境。</p>
<br>
<h3 id="24-定义依赖项">2.4 定义依赖项</h3>
<p>项目myproject是要做一些事的，假设myproject是要做与cntext库类似的事情，需要依赖的包有</p>
<p>jieba、numpy 、mittens、scikit-learn、matplotlib、pyecharts、gensim、nltk、pandas、 chardet、 h5py 。</p>
<p>这时候我们需要在 <strong>myproject.toml</strong> 中加入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[dependencies]
python = &#34;^3.5&#34;
jieba = &#34;^0.4.1&#34;
numpy = &#34;^1.21.0&#34;
mittens = &#34;^0.2&#34;
scikit-learn = &#34;^1.3.0&#34;
matplotlib = &#34;^3.6.0&#34;
pyecharts = &#34;2.0.0&#34;
gensim = &#34;^4.2.0&#34;
nltk = &#34;^3.8&#34;
pandas = &#34;^1.5.0&#34;
chardet = &#34;^5.0.0&#34;
h5py = &#34;^3.9.0&#34;
</code></pre></div><p>表示如果其他用户使用myproject这个项目，至少要保证python是3.5及以上版本， 依赖的库有jieba、numpy 、mittens、scikit-learn、matplotlib、pyecharts、gensim、nltk、pandas、 chardet、 h5py ， 以jieba为例， jieba要满足0.4.1及以上版本。</p>
<br>
<h3 id="25-安装依赖项">2.5 安装依赖项</h3>
<p>在虚拟环境中，使用以下命令安装项目的依赖性。在cmd中执行命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">poetry install
</code></pre></div><p>Poetry 会根据 <code>pyproject.toml</code> 文件中的定义自动下载和安装依赖项。</p>
<p>需要注意，有时候也可以在虚拟环境中使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">poetry add &#39;依赖包名&#39;
poetry remove &#39;依赖包名&#39;
</code></pre></div><p>来增加或移除依赖包</p>
<br>
<h3 id="26-使用虚拟环境">2.6 使用虚拟环境</h3>
<p>现在，您的项目已经创建并配置好了虚拟环境。您可以使用以下命令激活虚拟环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">poetry shell
</code></pre></div><p>一旦虚拟环境被激活，您可以在其中运行 Python 解释器和项目依赖的命令。</p>
<br>
<h3 id="27-退出虚拟环境">2.7 退出虚拟环境</h3>
<p>要退出虚拟环境，只需在虚拟环境中运行以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">exit
</code></pre></div><p>这会将您带回到全局 Python 环境。</p>
<p>以上是一个基本的 Poetry 虚拟环境的创建和使用教程。</p>
<p><br><br></p>
<h2 id="三打包python库">三、打包Python库</h2>
<p>「打包Python库」的步骤与 「创建项目环境」 有很多类似的地方</p>
<h3 id="31-创建新项目">3.1 创建新项目</h3>
<p>首先，创建一个新的 Python 库项目或使用现有的项目。确保项目的根目录中包含一个 <code>pyproject.toml</code> 文件来配置项目和依赖项。</p>
<br>
<h3 id="32-添加项目元信息">3.2 添加项目元信息</h3>
<p>在 <code>pyproject.toml</code> 文件中，确保包含了项目的元信息，包括名称、版本、作者、许可证等。以下是一个示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[tool.poetry]
name = &#34;my-library&#34;
version = &#34;1.0.0&#34;
description = &#34;My Python library&#34;
authors = [&#34;Your Name &lt;your@email.com&gt;&#34;]
license = &#34;MIT&#34;
readme = &#34;README.md&#34;
</code></pre></div><p>请根据您的项目需求修改这些元信息。<br></p>
<h3 id="32-定义依赖项">3.2 定义依赖项</h3>
<p>使用 <code>[tool.poetry.dependencies]</code> 部分来定义您的库项目的依赖项。确保列出所有依赖项及其版本约束。</p>
<br>
<h3 id="33-创建库代码">3.3 创建库代码</h3>
<p>编写您的库代码并将其组织到适当的目录中。通常，库代码会位于项目根目录下的一个包目录中。<br></p>
<h3 id="34-测试您的库">3.4 测试您的库</h3>
<p>编写测试用例来验证您的库的功能。测试文件通常会位于一个独立的测试目录中，并使用测试框架（如 <code>pytest</code>）来运行测试。<br></p>
<h3 id="35-构建和验证">3.5 构建和验证</h3>
<p>在项目根目录中运行以下命令来构建您的库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">poetry build
</code></pre></div><p>这将生成一个 dist 目录，并在其中包含库的分发文件，包括 wheel 和 sdist（源分发文件）。<br></p>
<h3 id="36-发布到-pypi">3.6 发布到 PyPI</h3>
<ol>
<li>
<p><strong>注册 PyPI 帐户</strong>：如果您还没有 PyPI 帐户，请先注册一个。</p>
</li>
<li>
<p><strong>在poetry中设置PyPi的api-token信息</strong>：首先登录PyPi， 点击Accounting settings, 如截图所示创建你的api-token。</p>
<p><img loading="lazy" src="img/api-token.png" alt=""  />
</p>
<p>在终端中运行以下命令，使用您的 PyPI 帐户登录：</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">poetry config pypi-token.pypi your-api-token
</code></pre></div><p>这将要求您输入 PyPI 用户名和密码。</p>
<ol start="3">
<li><strong>发布到 PyPI</strong>：运行以下命令来发布您的库到 PyPI：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">poetry publish
</code></pre></div><p>这会自动构建您的库并将其发布到 PyPI。请注意，不要随便发布， 先检查所有代码是否能正常运行，之后再发布。</p>
<br>
<h3 id="37-分享您的库">3.7 分享您的库</h3>
<p>现在，您的库已经发布到 PyPI，其他人可以使用 <code>pip install</code> 命令来安装它。您可以分享您的库的 PyPI 链接，以便其他人找到和使用它。</p>
<p>这些步骤简要介绍了使用 Poetry 打包和发布 Python 库的过程。确保在发布之前测试您的库，并在 README.md 中提供必要的文档和示例，以帮助其他人使用您的库。</p>
<p><br><br></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何在一行代码中实现if-elif-else三分支语句</title>
      <link>https://textdata.cn/blog/2023-02-18-how-to-use-if-elif-else-in-one-line/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-18-how-to-use-if-elif-else-in-one-line/</guid>
      <description>如何在一行代码中实现if-elif-else三分支语句</description>
      <content:encoded><![CDATA[<p>判断年龄age，</p>
<ul>
<li>如果小于18为少年</li>
<li>如果大于18，小于35，为青年</li>
<li>其他，为老年</li>
</ul>
<p>这是典型的三分支语句if-elif-else，其实是if-else的变种。</p>
<br>
<h2 id="method1-直接堆代码">Method1-直接堆代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="mi">15</span>

<span class="k">if</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;少年&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="mi">18</span> <span class="o">&lt;=</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">35</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;青年&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;老年&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">少年
</code></pre></div><br>
<h2 id="method2-定义函数">Method2-定义函数</h2>
<p>Method1不具有可扩展性，定义成函数后，可以一次定义，反复调用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">judge</span><span class="p">(</span><span class="n">age</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;少年&#39;</span>
    <span class="k">elif</span> <span class="mi">18</span> <span class="o">&lt;=</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">35</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;青年&#39;</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;老年&#39;</span>
      
<span class="nb">print</span><span class="p">(</span><span class="n">judge</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">15</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">少年
</code></pre></div><br>
<h2 id="method3-lambda行函数">Method3-Lambda行函数</h2>
<p>比函数更简洁的是lambda行函数，如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">judge2</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">age</span><span class="p">:</span> <span class="s1">&#39;少年&#39;</span> <span class="k">if</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span> <span class="k">else</span> <span class="p">(</span><span class="s1">&#39;青年&#39;</span> <span class="k">if</span> <span class="mi">18</span><span class="o">&lt;=</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">35</span> <span class="k">else</span> <span class="s1">&#39;老年&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">judge2</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">15</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">少年
</code></pre></div><br>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
