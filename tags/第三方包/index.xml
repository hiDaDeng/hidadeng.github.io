<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>第三方包 on 大邓和他的PYTHON</title>
    <link>/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</link>
    <description>Recent content in 第三方包 on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 25 Apr 2023 11:43:10 +0600</lastBuildDate><atom:link href="/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>tomotopy | 速度最快的LDA主题模型</title>
      <link>https://textdata.cn/blog/2023-04-25-tomotopy_is_the_fastest_topic_model/</link>
      <pubDate>Tue, 25 Apr 2023 11:43:10 +0600</pubDate>
      
      <guid>/blog/2023-04-25-tomotopy_is_the_fastest_topic_model/</guid>
      <description>接近C的速度，比市面的sklearn、gensim快十几倍</description>
      <content:encoded><![CDATA[<h2 id="代码下载tomotopy_codezip"><a href="tomotopy_code.zip">代码下载</a></h2>
<br>
<h2 id="tomotopy简介">tomotopy简介？</h2>
<p>tomotopy 是 tomoto（主题建模工具）的 Python 扩展，它是用 C++ 编写的基于 Gibbs 采样的主题模型库。支持的主题模型包括 LDA、DMR、HDP、MG-LDA、PA 和 HPA， 利用现代 CPU 的矢量化来最大化速度。</p>
<p><a href="https://github.com/bab2min/tomotopy">https://github.com/bab2min/tomotopy</a></p>
<p><strong>下图中同样的数据集， tomotopy迭代200次，gensim迭代10次的情况下， tomotopy与gensim耗时对比图，由此可见tomotopy训练主题模型速度之快。</strong>
<img loading="lazy" src="img/TomotopyVsGensim.png" alt=""  />
</p>
<p>当前版本的 tomotopy 支持的主题模型包括</p>
<ul>
<li>潜在狄利克雷分配（LDAModel）</li>
<li>标记的 LDA（LLDA 模型）</li>
<li>部分标记的 LDA（PLDA 模型）</li>
<li>监督LDA（SLDA模型）</li>
<li>Dirichlet 多项回归 (DMRModel)</li>
<li>广义狄利克雷多项回归 (GDMRModel)</li>
<li>分层狄利克雷过程 (HDPModel)</li>
<li>分层LDA（HLDA模型）</li>
<li>多粒 LDA（MGLDA 模型）</li>
<li>弹珠盘分配（PAModel）</li>
<li>分层 PA (HPAModel)</li>
<li>相关主题模型（CTModel）</li>
<li>动态主题模型 (DTModel)</li>
<li>基于伪文档的主题模型（PTModel）。</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">tomotopy</span><span class="o">==</span><span class="mf">0.12.2</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyLDAvis</span><span class="o">==</span><span class="mf">3.3.1</span>  
</code></pre></div><p>目前，tomotopy 可以利用 AVX2、AVX 或 SSE2 SIMD 指令集来最大程度利用PC的性能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">tomotopy</span> <span class="k">as</span> <span class="nn">tp</span>

<span class="n">tp</span><span class="o">.</span><span class="n">isa</span>
</code></pre></div><p>Run</p>
<pre><code>'avx2'
</code></pre>
<p>如果 tp.isa 返回 None，则训练过程可能需要很长时间。</p>
<br>
<h2 id="1-导入数据">1. 导入数据</h2>
<p>准备一个自己很熟悉的数据disaster_news.csv，一共有332条，话题数K=5，（正常情况下K是需要探索的）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;disaster_news.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<br>
<h2 id="2-整理数据">2. 整理数据</h2>
<p>分词、去除停用词,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">jieba</span>

<span class="n">stopwords</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;stopwords.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">segment</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">words</span>

<span class="n">test</span> <span class="o">=</span> <span class="s2">&#34;云南永善县级地震已致人伤间民房受损中新网月日电据云南昭通市防震减灾局官方网站消息截至日时云南昭通永善县级地震已造成人受伤其中重伤人轻伤人已全部送医院救治民房受损户间倒塌户间个乡镇所学校不同程度受损目前被损毁电力交通通讯设施已全部抢通修复当地已调拨帐篷顶紧急转移万人月日时分云南昭通永善县发生里氏级地震震源深度公里当地震感强烈此外成都等四川多地也有明显震感&#34;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">segment</span><span class="p">(</span><span class="n">test</span><span class="p">))</span>
</code></pre></div><pre><code>['云南', '永善县', '级', '地震', '已致', '伤间', '民房', '受损', '中新网', '日电', '云南', '昭通市', '防震', '减灾', '局', '官方网站', '消息', '日时', '云南', '昭通', '永善县', '级', '地震', '造成', '受伤', '重伤', '轻伤', '送', '医院', '救治', '民房', '受损', '户间', '倒塌', '户间', '乡镇', '学校', '不同', '程度', '受损', '目前', '损毁', '电力', '交通', '通讯', '设施', '抢通', '修复', '调拨', '帐篷', '顶', '紧急', '转移', '万人', '时分', '云南', '昭通', '永善县', '发生', '里氏', '级', '地震', '震源', '深度', '公里', '震感', '强烈', '成都', '四川', '多地', '明显', '震感']
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<h2 id="3-找到最佳k">3. 找到最佳K</h2>
<p>绘制Coherence曲线是一种常见的方法，用于选择主题数（k）的最佳值。这可以帮助您确定在哪个主题数下主题模型的性能最佳。以下是一般步骤以及如何解释Coherence曲线来找出最佳的k：</p>
<ol>
<li>创建主题模型：首先，您需要使用不同的k值来创建一系列主题模型，每个模型都有不同数量的主题（k）。这可以通过循环遍历k值并训练主题模型来完成。</li>
<li>计算Coherence：对于每个k值，使用tomotopy.coherence.Coherence类计算主题模型的一致性度量（比如C_V、UMass等）。这将为每个k值生成一个一致性得分。</li>
<li>绘制Coherence曲线：将k值（主题数）作为x轴，一致性得分作为y轴，绘制Coherence曲线。得到一个k和一致性得分之间的关系图。</li>
<li>寻找拐点：观察Coherence曲线，通常会看到一条曲线在某个k值附近达到峰值，然后开始下降。这个峰值对应的k值通常被认为是最佳的主题数。这是因为在这个k值下，主题模型的主题在文本中的一致性较高。</li>
<li>选择最佳k：根据Coherence曲线上的峰值，选择最佳的k值作为主题模型的最终主题数。</li>
<li>模型评估：一旦选择了最佳k值，您可以使用该值来训练最终的主题模型，并在任务中进行评估。</li>
</ol>
<p>Coherence曲线上的峰值通常对应于最佳的主题数，因为在这个点上主题之间的关联度较高。然而，需要谨慎选择，因为有时候峰值可能不明显，或者可能有多个相似的峰值。您可以使用这个方法来帮助确定最佳的主题数，但最终的决策可能还需要结合领域知识和任务需求来做出。</p>
<p>tomotopy每次运行得到的图形状不一样，为了保证运行结果具有可比性，设置了随机种子seed为1，你也可以根据需要改为自己需要的随机状态(这里有点像炼丹)。经过运行发现k=5比较合适（跑出了我的预判）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">find_k</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">min_k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_k</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="c1">#min_df 词语最少出现在2个文档中</span>
    <span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">min_k</span><span class="p">,</span> <span class="n">max_k</span><span class="p">):</span>
        <span class="c1">#seed随机种子，保证在大邓这里运行结果与你运行的结果一样</span>
        <span class="n">mdl</span> <span class="o">=</span> <span class="n">tp</span><span class="o">.</span><span class="n">LDAModel</span><span class="p">(</span><span class="n">min_df</span><span class="o">=</span><span class="n">min_df</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">words</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">words</span><span class="p">:</span>
                <span class="n">mdl</span><span class="o">.</span><span class="n">add_doc</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
        <span class="n">mdl</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
        <span class="n">coh</span> <span class="o">=</span> <span class="n">tp</span><span class="o">.</span><span class="n">coherence</span><span class="o">.</span><span class="n">Coherence</span><span class="p">(</span><span class="n">mdl</span><span class="p">)</span>
        <span class="n">scores</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">coh</span><span class="o">.</span><span class="n">get_score</span><span class="p">())</span>

    <span class="c1">#x = list(range(min_k, max_k - 1))  # 区间最右侧的值。注意：不能大于max_k</span>
    <span class="c1">#print(x)</span>
    <span class="c1">#print()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">min_k</span><span class="p">,</span> <span class="n">max_k</span><span class="p">),</span> <span class="n">scores</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s2">&#34;number of topics&#34;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s2">&#34;coherence&#34;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
    
<span class="n">find_k</span><span class="p">(</span><span class="n">docs</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">],</span> <span class="n">min_k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_k</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/output_11_0.png" alt="png"  />
</p>
<br>
<h2 id="4-训练lda">4. 训练lda</h2>
<p>使用tomotopy的LDA模型， 话题数K=5</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">tomotopy</span> <span class="k">as</span> <span class="nn">tp</span>

<span class="c1">#初始化LDA</span>
<span class="n">mdl</span> <span class="o">=</span> <span class="n">tp</span><span class="o">.</span><span class="n">LDAModel</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="mi">555</span><span class="p">)</span>
<span class="k">for</span> <span class="n">words</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">]:</span>
    <span class="c1">#确认words 是 非空词语列表</span>
    <span class="k">if</span> <span class="n">words</span><span class="p">:</span>
        <span class="n">mdl</span><span class="o">.</span><span class="n">add_doc</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">words</span><span class="p">)</span>

<span class="c1">#训练</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>

<span class="c1">#查看每个topic feature words</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mdl</span><span class="o">.</span><span class="n">k</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Top 10 words of topic #</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">))</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">mdl</span><span class="o">.</span><span class="n">get_topic_words</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Top 10 words of topic #0
    [(&#39;一辆&#39;, 0.02751251682639122), (&#39;事故&#39;, 0.021704642102122307), (&#39;记者&#39;, 0.018342189490795135), (&#39;死亡&#39;, 0.01650812290608883), (&#39;造成&#39;, 0.014062701724469662), (&#39;人员&#39;, 0.013909862376749516), (&#39;现场&#39;, 0.013451346196234226), (&#39;受伤&#39;, 0.012687151320278645), (&#39;相撞&#39;, 0.011922957375645638), (&#39;货车&#39;, 0.011922957375645638)]


​    
​    Top 10 words of topic #1
​    [(&#39;学生&#39;, 0.02709135226905346), (&#39;食物中毒&#39;, 0.02498047426342964), (&#39;出现&#39;, 0.019175563007593155), (&#39;医院&#39;, 0.016185153275728226), (&#39;事件&#39;, 0.013546556234359741), (&#39;调查&#39;, 0.013194743543863297), (&#39;年月日&#39;, 0.012842929922044277), (&#39;治疗&#39;, 0.012667023576796055), (&#39;症状&#39;, 0.011787491850554943), (&#39;名&#39;, 0.011259771883487701)]


​    
​    Top 10 words of topic #2
​    [(&#39;现场&#39;, 0.018848909065127373), (&#39;发生&#39;, 0.01677251048386097), (&#39;医院&#39;, 0.015015557408332825), (&#39;起火&#39;, 0.014216942712664604), (&#39;原因&#39;, 0.012140544131398201), (&#39;目前&#39;, 0.012140544131398201), (&#39;救治&#39;, 0.01150165218859911), (&#39;进行&#39;, 0.011022482998669147), (&#39;名&#39;, 0.009425252676010132), (&#39;火势&#39;, 0.009265529923141003)]


​    
​    Top 10 words of topic #3
​    [(&#39;发生&#39;, 0.03348556533455849), (&#39;爆炸&#39;, 0.022389251738786697), (&#39;造成&#39;, 0.019663840532302856), (&#39;死亡&#39;, 0.01713310182094574), (&#39;受伤&#39;, 0.016938429325819016), (&#39;年月日&#39;, 0.016354413703083992), (&#39;轿车&#39;, 0.012655640952289104), (&#39;警方&#39;, 0.012460969388484955), (&#39;袭击&#39;, 0.012266295962035656), (&#39;事件&#39;, 0.011487606912851334)]


​    
​    Top 10 words of topic #4
​    [(&#39;地震&#39;, 0.047826822847127914), (&#39;发生&#39;, 0.03555167838931084), (&#39;火灾&#39;, 0.03140682727098465), (&#39;时分&#39;, 0.020885275676846504), (&#39;级&#39;, 0.015783920884132385), (&#39;时间&#39;, 0.013870910741388798), (&#39;公里&#39;, 0.013711493462324142), (&#39;人员伤亡&#39;, 0.013073823414742947), (&#39;记者&#39;, 0.013073823414742947), (&#39;震感&#39;, 0.012276736088097095)]
</code></pre></div><br>
<p>查看话题模型信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">mdl</span><span class="o">.</span><span class="n">summary</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Basic</span><span class="w"> </span><span class="n">Info</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="nf">LDAModel</span><span class="w"> </span><span class="p">(</span><span class="n">current</span><span class="w"> </span><span class="n">version</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">12</span><span class="p">.</span><span class="mi">2</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="mi">332</span><span class="w"> </span><span class="n">docs</span><span class="p">,</span><span class="w"> </span><span class="mi">29749</span><span class="w"> </span><span class="n">words</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Total</span><span class="w"> </span><span class="n">Vocabs</span><span class="p">:</span><span class="w"> </span><span class="mi">8428</span><span class="p">,</span><span class="w"> </span><span class="n">Used</span><span class="w"> </span><span class="n">Vocabs</span><span class="p">:</span><span class="w"> </span><span class="mi">2984</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Entropy</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">words</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">.</span><span class="mi">10665</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Entropy</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">term</span><span class="o">-</span><span class="n">weighted</span><span class="w"> </span><span class="n">words</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">.</span><span class="mi">10665</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Removed</span><span class="w"> </span><span class="n">Vocabs</span><span class="p">:</span><span class="w"> </span><span class="o">&lt;</span><span class="n">NA</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Training</span><span class="w"> </span><span class="n">Info</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Iterations</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="n">Burn</span><span class="o">-</span><span class="k">in</span><span class="w"> </span><span class="n">steps</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Optimization</span><span class="w"> </span><span class="k">Interval</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">Log</span><span class="o">-</span><span class="n">likelihood</span><span class="w"> </span><span class="n">per</span><span class="w"> </span><span class="n">word</span><span class="p">:</span><span class="w"> </span><span class="o">-</span><span class="mi">7</span><span class="p">.</span><span class="mi">79934</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Initial</span><span class="w"> </span><span class="n">Parameters</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">tw</span><span class="p">:</span><span class="w"> </span><span class="n">TermWeight</span><span class="p">.</span><span class="n">ONE</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">min_cf</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">(</span><span class="n">minimum</span><span class="w"> </span><span class="n">collection</span><span class="w"> </span><span class="n">frequency</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">words</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">min_df</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">(</span><span class="n">minimum</span><span class="w"> </span><span class="n">document</span><span class="w"> </span><span class="n">frequency</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">words</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">rm_top</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">(</span><span class="n">the</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">top</span><span class="w"> </span><span class="n">words</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">removed</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">k</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">(</span><span class="n">the</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">topics</span><span class="w"> </span><span class="k">between</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="mi">32767</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">alpha</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="p">(</span><span class="n">hyperparameter</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">Dirichlet</span><span class="w"> </span><span class="n">distribution</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">document</span><span class="o">-</span><span class="n">topic</span><span class="p">,</span><span class="w"> </span><span class="n">given</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">single</span><span class="w"> </span><span class="o">`</span><span class="kt">float</span><span class="o">`</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">symmetric</span><span class="w"> </span><span class="n">prior</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="k">with</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">`</span><span class="n">k</span><span class="o">`</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="o">`</span><span class="kt">float</span><span class="o">`</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">asymmetric</span><span class="w"> </span><span class="n">prior</span><span class="p">.)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">eta</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="w"> </span><span class="p">(</span><span class="n">hyperparameter</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">Dirichlet</span><span class="w"> </span><span class="n">distribution</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">topic</span><span class="o">-</span><span class="n">word</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">seed</span><span class="p">:</span><span class="w"> </span><span class="mi">555</span><span class="w"> </span><span class="p">(</span><span class="n">random</span><span class="w"> </span><span class="n">seed</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">trained</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">version</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">12</span><span class="p">.</span><span class="mi">2</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Parameters</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="nf">alpha</span><span class="w"> </span><span class="p">(</span><span class="n">Dirichlet</span><span class="w"> </span><span class="n">prior</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">per</span><span class="o">-</span><span class="n">document</span><span class="w"> </span><span class="n">topic</span><span class="w"> </span><span class="n">distributions</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">  </span><span class="p">[</span><span class="mi">0</span><span class="p">.</span><span class="mi">7143365</span><span class="w">  </span><span class="mi">0</span><span class="p">.</span><span class="mi">6852513</span><span class="w">  </span><span class="mi">0</span><span class="p">.</span><span class="mi">75089616</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">6204677</span><span class="w">  </span><span class="mi">0</span><span class="p">.</span><span class="mi">7040125</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="nf">eta</span><span class="w"> </span><span class="p">(</span><span class="n">Dirichlet</span><span class="w"> </span><span class="n">prior</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">per</span><span class="o">-</span><span class="n">topic</span><span class="w"> </span><span class="n">word</span><span class="w"> </span><span class="n">distribution</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">  </span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w">
</span><span class="w">    </span><span class="o">&lt;</span><span class="n">Topics</span><span class="o">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#0 (6513) : 一辆 事故 记者 死亡 造成
</span><span class="c1"></span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#1 (5655) : 学生 食物中毒 出现 医院 事件
</span><span class="c1"></span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#2 (6231) : 现场 发生 医院 起火 原因
</span><span class="c1"></span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#3 (5107) : 发生 爆炸 造成 死亡 受伤
</span><span class="c1"></span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="c1">#4 (6243) : 地震 发生 火灾 时分 级
</span></code></pre></div><h3 id="topic解读">topic解读</h3>
<p>根据每个话题top10的特征词，5个话题解读为</p>
<ul>
<li>交通事故| #0 (6513) : 一辆 事故 记者 死亡 造成</li>
<li>食品安全| #1 (5655) : 学生 食物中毒 出现 医院 事件</li>
<li>火灾新闻| #2 (6231) : 现场 发生 医院 起火 原因</li>
<li>恐怖袭击| #3 (5107) : 发生 爆炸 造成 死亡 受伤</li>
<li>地震灾害| #4 (6243) : 地震 发生 火灾 时分 级</li>
</ul>
<br>
<h2 id="5-可视化">5. 可视化</h2>
<p>使用pyLDAvis</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyLDAvis</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">,</span> <span class="n">category</span><span class="o">=</span><span class="ne">Warning</span><span class="p">)</span>

<span class="c1">#在notebook显示</span>
<span class="n">pyLDAvis</span><span class="o">.</span><span class="n">enable_notebook</span><span class="p">()</span>

<span class="c1">#获取pyldavis需要的参数</span>
<span class="n">topic_term_dists</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">stack</span><span class="p">([</span><span class="n">mdl</span><span class="o">.</span><span class="n">get_topic_word_dist</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mdl</span><span class="o">.</span><span class="n">k</span><span class="p">)])</span>
<span class="n">doc_topic_dists</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">stack</span><span class="p">([</span><span class="n">doc</span><span class="o">.</span><span class="n">get_topic_dist</span><span class="p">()</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">mdl</span><span class="o">.</span><span class="n">docs</span><span class="p">])</span>
<span class="n">doc_topic_dists</span> <span class="o">/=</span> <span class="n">doc_topic_dists</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">doc_lengths</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">words</span><span class="p">)</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">mdl</span><span class="o">.</span><span class="n">docs</span><span class="p">])</span>
<span class="n">vocab</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">mdl</span><span class="o">.</span><span class="n">used_vocabs</span><span class="p">)</span>
<span class="n">term_frequency</span> <span class="o">=</span> <span class="n">mdl</span><span class="o">.</span><span class="n">used_vocab_freq</span>


<span class="n">prepared_data</span> <span class="o">=</span> <span class="n">pyLDAvis</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span>
    <span class="n">topic_term_dists</span><span class="p">,</span> 
    <span class="n">doc_topic_dists</span><span class="p">,</span> 
    <span class="n">doc_lengths</span><span class="p">,</span> 
    <span class="n">vocab</span><span class="p">,</span> 
    <span class="n">term_frequency</span><span class="p">,</span>
    <span class="n">start_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="c1"># tomotopy话题id从0开始，pyLDAvis话题id从1开始</span>
    <span class="n">sort_topics</span><span class="o">=</span><span class="kc">False</span> <span class="c1">#注意：否则pyLDAvis与tomotopy内的话题无法一一对应。 </span>
<span class="p">)</span>


<span class="c1">#可视化结果存到html文件中</span>
<span class="c1">#pyLDAvis.save_html(prepared_data, &#39;ldavis.html&#39;)</span>

<span class="c1">#notebook中显示</span>
<span class="n">pyLDAvis</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">prepared_data</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/ldavis.png" alt=""  />
</p>
<br>
<h2 id="6-预测">6. 预测</h2>
<p>预测某文档的话题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jieba</span>
<span class="n">stopwords</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;stopwords.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="c1">#预测</span>
<span class="n">doc</span> <span class="o">=</span> <span class="s1">&#39;云南永善县级地震已致伤间民房受损中新网日电云南昭通市防震减灾局官方网站消息日时云南昭通永善县级地震造成受伤重伤轻伤送医院救治民房受损户间倒塌户间乡镇学校不同程度受损目前损毁电力交通通讯设施抢通修复调拨帐篷顶紧急转移万人时分云南昭通永善县发生里氏级地震震源深度公里震感强烈成都四川多地明显震感&#39;</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">]</span>

<span class="c1">#构造tomotopy需要的数据</span>
<span class="n">doc_inst</span> <span class="o">=</span> <span class="n">mdl</span><span class="o">.</span><span class="n">make_doc</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">words</span><span class="p">)</span>
<span class="n">topic_dist</span><span class="p">,</span> <span class="n">ll</span> <span class="o">=</span> <span class="n">mdl</span><span class="o">.</span><span class="n">infer</span><span class="p">(</span><span class="n">doc_inst</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Topic Distribution for Unseen Docs: &#34;</span><span class="p">,</span> <span class="n">topic_dist</span><span class="p">)</span>

</code></pre></div><pre><code>Topic Distribution for Unseen Docs:  [0.11645161 0.10240361 0.5342029  0.03622254 0.21071935]
</code></pre>
<p>列表长度为5， 列表第三个数值(topic #2)数值最大，该文本最大的可能性是topic #2</p>
<br>
<h2 id="补充-指定主题特征词">补充: 指定主题特征词</h2>
<p>如果对数据比较了解，已经知道有一些主题，可以把比较明显的词语分配给指定的topic_id。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">mdl</span> <span class="o">=</span> <span class="n">tp</span><span class="o">.</span><span class="n">LDAModel</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">min_df</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="mi">555</span><span class="p">)</span>

<span class="k">for</span> <span class="n">words</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">words</span><span class="p">:</span>
        <span class="n">mdl</span><span class="o">.</span><span class="n">add_doc</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>

<span class="c1">#把word相撞 分配给topic_0, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="c1">#注意这里的range(5) 5是对应的k值</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;相撞&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>
<span class="c1">#把word地震 分配给topic_1, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;地震&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>
<span class="c1">#把word火灾 分配给topic_2, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;火灾&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">2</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>
<span class="c1">#把word中毒 分配给topic_3, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;中毒&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>
<span class="c1">#把word袭击 分配给topic_4, 权重设置为1， 其他topic权重设置为0.1</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">set_word_prior</span><span class="p">(</span><span class="s1">&#39;袭击&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.0</span> <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">4</span> <span class="k">else</span> <span class="mf">0.1</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)])</span>

<span class="n">mdl</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
<span class="n">mdl</span><span class="o">.</span><span class="n">summary</span><span class="p">()</span>  
</code></pre></div><pre><code>&lt;Basic Info&gt;
| LDAModel (current version: 0.12.2)
| 332 docs, 29749 words
| Total Vocabs: 8428, Used Vocabs: 2984
| Entropy of words: 7.10665
| Entropy of term-weighted words: 7.10665
| Removed Vocabs: &lt;NA&gt;
|
&lt;Training Info&gt;
| Iterations: 10, Burn-in steps: 0
| Optimization Interval: 10
| Log-likelihood per word: -7.72251
|
&lt;Initial Parameters&gt;
| tw: TermWeight.ONE
| min_cf: 0 (minimum collection frequency of words)
| min_df: 2 (minimum document frequency of words)
| rm_top: 0 (the number of top words to be removed)
| k: 5 (the number of topics between 1 ~ 32767)
| alpha: [0.1] (hyperparameter of Dirichlet distribution for document-topic, given as a single `float` in case of symmetric prior and as a list with length `k` of `float` in case of asymmetric prior.)
| eta: 0.01 (hyperparameter of Dirichlet distribution for topic-word)
| seed: 555 (random seed)
| trained in version 0.12.2
|
&lt;Parameters&gt;
| alpha (Dirichlet prior on the per-document topic distributions)
|  [0.7106193  0.60264444 0.5734784  0.71375024 0.6234263 ]
| eta (Dirichlet prior on the per-topic word distribution)
|  0.01
|
&lt;Topics&gt;
| #0 (6599) : 一辆 事故 死亡 发生 造成
| #1 (6087) : 地震 发生 级 公里 年月日
| #2 (5892) : 火灾 发生 现场 大火 起火
| #3 (6402) : 医院 学生 食物中毒 出现 名
| #4 (4769) : 事件 发生 袭击 人员 工作
|
</code></pre>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>pynimate库 | 绘制动态可视化图</title>
      <link>https://textdata.cn/blog/2023-02-11-pyanimate-create-vis-video/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-11-pyanimate-create-vis-video/</guid>
      <description>pynimate 创建条形数据动画。</description>
      <content:encoded><![CDATA[<p>数据可视化动画还在用Excel做？</p>
<p>现在一个简单的Python包就能分分钟搞定！</p>
<p>而且生成的动画也足够丝滑，效果是酱紫的：</p>
<p><img loading="lazy" src="img/example3.gif" alt=""  />
</p>
<p>这是一位专攻Python语言的程序员开发的安装包，名叫 <strong>pynimate</strong>。</p>
<p>目前可以直接通过PyPI安装使用。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install pynimate
</code></pre></div><h2 id="使用指南">使用指南</h2>
<p>想要使用Pynimate，直接import一下就行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pynimate</span> <span class="k">as</span> <span class="nn">nim</span>
</code></pre></div><p>输入数据后，Pynimate将使用函数Barplot（）来创建条形数据动画。
而创建这种动画，输入的数据必须是pandas数据结构（如下），其中将时间列设置为索引，换句话说索引代表的是自变量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">time, col1, col2, col3
2012   1     2     1
2013   1     1     2
2014   2     1.5   3
2015   2.5   2     3.5
</code></pre></div><p>具体的代码形式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="n">csv</span><span class="s1">&#39;).set_index(&#39;</span><span class="n">time</span><span class="s1">&#39;)</span>
</code></pre></div><p>比如要处理具体的数据，写成代码应该是这样子的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;time&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;1960-01-01&#34;</span><span class="p">,</span> <span class="s2">&#34;1961-01-01&#34;</span><span class="p">,</span> <span class="s2">&#34;1962-01-01&#34;</span><span class="p">],</span>
        <span class="s2">&#34;Afghanistan&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
        <span class="s2">&#34;Angola&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;Albania&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
        <span class="s2">&#34;USA&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;Argentina&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
    <span class="p">}</span>
<span class="p">)</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s2">&#34;time&#34;</span><span class="p">)</span>
</code></pre></div><p>此外，要制作条形数据动画，Barplot还有三个必需的参数得注意：data、time_format和ip_freq（Interpolation frequency）。</p>
<p>data就是表格的数据，这里也就不再赘述。</p>
<p>time_format是指数据索引的时间日期格式，一般为：”%Y-%m-%d”。</p>
<p>最后是ip_freq，它是制作动画中比较关键的一步，通过线性插值使动画更加流畅丝滑。</p>
<p>一般来说，并不是所有的原始数据都适合做成动画，现在一个典型的视频是24fps，即每秒有24帧。</p>
<p>举个栗子🌰，下面这个表格中的数据只有三个时间点，按理说只能生成3帧视频，最终动画也只有3/24秒。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">time, col1, col2
2012   1     3  
2013   2     2   
2014   3     1
</code></pre></div><p>这时候，ip_freq插值（线性）就开始发挥作用了，如果插值是一个季度，则得出的数据就变成了这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">time     col1  col2
2012-01-01  1.00  3.00
2012-04-01  1.25  2.75
2012-07-01  1.50  2.50
2012-10-01  1.75  2.25
2013-01-01  2.00  2.00
2013-04-01  2.25  1.75
2013-07-01  2.50  1.50
2013-10-01  2.75  1.25
2014-01-01  3.00  1.00
</code></pre></div><p>具体的插值时间间隔为多久，则要视具体的数据而定，一般绘制大数据时，设置为ip_freq = None。</p>
<p>至此，就能生成数据动画了，完整代码如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">pynimate</span> <span class="k">as</span> <span class="nn">nim</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;time&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;1960-01-01&#34;</span><span class="p">,</span> <span class="s2">&#34;1961-01-01&#34;</span><span class="p">,</span> <span class="s2">&#34;1962-01-01&#34;</span><span class="p">],</span>
        <span class="s2">&#34;Afghanistan&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
        <span class="s2">&#34;Angola&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;Albania&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
        <span class="s2">&#34;USA&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;Argentina&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
    <span class="p">}</span>
<span class="p">)</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s2">&#34;time&#34;</span><span class="p">)</span>

<span class="n">cnv</span> <span class="o">=</span> <span class="n">nim</span><span class="o">.</span><span class="n">Canvas</span><span class="p">()</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">nim</span><span class="o">.</span><span class="n">Barplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;2d&#34;</span><span class="p">)</span>
<span class="n">bar</span><span class="o">.</span><span class="n">set_time</span><span class="p">(</span><span class="n">callback</span><span class="o">=</span><span class="k">lambda</span> <span class="n">i</span><span class="p">,</span> <span class="n">datafier</span><span class="p">:</span> <span class="n">datafier</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">index</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">year</span><span class="p">)</span>
<span class="n">cnv</span><span class="o">.</span><span class="n">add_plot</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
<span class="n">cnv</span><span class="o">.</span><span class="n">animate</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p>这是插值为两天，生成的动画效果。</p>
<p>最后还有一个问题，那就是保存动画，有两个格式可以选择：gif或者mp4。</p>
<p>保存为动图一般使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cnv</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&#34;file&#34;</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="s2">&#34;gif&#34;</span><span class="p">)</span>
</code></pre></div><p>若要保存为mp4的话，ffmpeg是个不错的选择，它是保存为mp4的标准编写器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install ffmpeg-python
conda install ffmpeg
</code></pre></div><p>当然，同样也可以使用Canvas.save()来保存。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cnv</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&#34;file&#34;</span><span class="p">,</span> <span class="mi">24</span> <span class="p">,</span><span class="s2">&#34;mp4&#34;</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>5个你或许不知道的pandas数据导入技巧</title>
      <link>https://textdata.cn/blog/2023-01-08-pandas-5-trips-you-may-or-not-may-know/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-01-08-pandas-5-trips-you-may-or-not-may-know/</guid>
      <description>虽然您可能熟悉使用 pandas 读取和写入数据的许多不同方法，但您可能没有意识到一些可能并不像您想象的那么明显的快捷方式/技巧。 这可以使导入数据变得更加容易和快速。这篇博文仅探讨了其中的五种技术.</description>
      <content:encoded><![CDATA[<p>如果您以前曾在 Python 中使用过 Pandas，您就会知道可以通过多种不同的方式导入表格数据。</p>
<p>Pandas 可能是使用最广泛的用于加载、操作和导出数据的 Python 包之一。</p>
<p>虽然您可能熟悉使用 pandas 读取和写入数据的许多不同方法，但您可能没有意识到一些可能并不像您想象的那么明显的快捷方式/技巧。 这可以使导入数据变得更加容易和快速。这篇博文仅探讨了其中的五种技术.</p>
<br>
<h2 id="1-从url导入csv">1. 从url导入csv</h2>
<p>您可能非常熟悉 pd.read_csv() 方法可以导入csv文件的， 其实ta还可以通过 HTTP 从 URL 读取数据。</p>
<p>网络访问 CSV 文件，而不是在本地存储所有文件， 可以省去手动下载内容的麻烦。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;csv文件的网络连接&#39;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="2-导入html网页中的表格">2. 导入html网页中的表格</h2>
<p>如果您曾经阅读过 pandas 文档，您可能会遇到 pd.read_html() 方法。 与 pd.read_csv() 非常相似，它也具有从 URL 导出数据的附加功能。 让这更酷的是，您可以提供一个包含许多表格的网站的 URL，它会抓取所有表格。</p>
<p>例如，考虑维基百科文章“英国经济”。 这篇文章可以被抓取如下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://en.wikipedia.org/wiki/Economy_of_the_United_Kingdom&#39;</span>

<span class="n">df_tables</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_html</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="3-json规范化">3. JSON规范化</h2>
<p>有时，当您处理 JSON 数据时， JSON 内往往包含多层嵌套。 对于要转换为表格数据的 JSON 对象，它们需要被展平（嵌套深度为 1）。</p>
<p>pandas 提供了一种使用 pd.json_normalize() 方法来执行此操作的方法。例如，考虑以下 JSON 对象（在 pandas 文档中用作示例）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Cole Volk&#34;</span><span class="p">,</span>
        <span class="s2">&#34;fitness&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;height&#34;</span><span class="p">:</span> <span class="mi">130</span><span class="p">,</span> <span class="s2">&#34;weight&#34;</span><span class="p">:</span> <span class="mi">60</span><span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Mark Reg&#34;</span><span class="p">,</span> <span class="s2">&#34;fitness&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;height&#34;</span><span class="p">:</span> <span class="mi">130</span><span class="p">,</span> <span class="s2">&#34;weight&#34;</span><span class="p">:</span> <span class="mi">60</span><span class="p">}},</span>
    <span class="p">{</span>
        <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Faye Raker&#34;</span><span class="p">,</span>
        <span class="s2">&#34;fitness&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;height&#34;</span><span class="p">:</span> <span class="mi">130</span><span class="p">,</span> <span class="s2">&#34;weight&#34;</span><span class="p">:</span> <span class="mi">60</span><span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="n">data</span>
</code></pre></div><p>Run</p>
<pre><code>[{'id': 1, 'name': 'Cole Volk', 'fitness': {'height': 130, 'weight': 60}},
 {'name': 'Mark Reg', 'fitness': {'height': 130, 'weight': 60}},
 {'id': 2, 'name': 'Faye Raker', 'fitness': {'height': 130, 'weight': 60}}]
</code></pre>
<p>data包含多层嵌套对象的属性（在本例中为“健身”）。 使用 pd.json_normalize() 可以折叠成表格。</p>
<p>注意：可以添加可选参数 max_level 以指定要折叠的最大嵌套级别数。 默认情况下，它将标准化所有级别。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>fitness.height</th>
      <th>fitness.weight</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>Cole Volk</td>
      <td>130</td>
      <td>60</td>
    </tr>
    <tr>
      <th>1</th>
      <td>NaN</td>
      <td>Mark Reg</td>
      <td>130</td>
      <td>60</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2.0</td>
      <td>Faye Raker</td>
      <td>130</td>
      <td>60</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h2 id="4-从剪贴板导入">4. 从剪贴板导入</h2>
<p>pd.read_clipboard() 方法可用于捕获存储在剪贴板上的任何数据。</p>
<p>默认情况下，此方法接受正则表达式 \s+ 作为分隔值的分隔符。 或者，您可以使用自己的正则表达式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_clipboard</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">s+&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="5-从excel导入">5. 从Excel导入</h2>
<p>假设有人向您发送了一些存储在 excel 电子表格中的数据，可以使用 pd.read_excel() 方法读取数据，就好像它是一个简单的 CSV 文件一样。</p>
<p>要记住的一件事是，电子表格软件允许用户使用单个文件中的工作表来分割多个电子表格。 使用 sheet_name 参数可以实现从 <strong>特定工作表</strong> 访问数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;my_spreadsheet.xlsx&#39;</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="s1">&#39;Sheet 1&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">支持开票 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>可视化 | 绘制《三体》人物关系网络图</title>
      <link>https://textdata.cn/blog/2022-11-29-santi-relationship-visualization-with-pyecharts/</link>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-29-santi-relationship-visualization-with-pyecharts/</guid>
      <description>可视化 | 绘制《三体》人物关系网络图</description>
      <content:encoded><![CDATA[<p>今天逛B站，看到《三体》三部曲全部人物关系数据可视化视频</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1z5411W7ED&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<p>于是动手写了今天的技术文。绘制人物网络关系图，需要有</p>
<ul>
<li>节点数据； 节点名、节点属性</li>
<li>边数据； source、target、weight</li>
<li>可视化工具(Gephi软件或Python的可视化包)</li>
</ul>
<br>
<h2 id="本文代码">本文代码</h2>
<p><a href="%E4%B8%89%E4%BD%93%E5%B0%8F%E8%AF%B4-%E4%BA%BA%E7%89%A9%E5%85%B3%E7%B3%BB%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96.zip">点击下载</a></p>
<p><br><br></p>
<h2 id="节点-人物数据">节点-人物数据</h2>
<p>绘制人物关系网络图，首先需要有网络节点数据</p>
<ul>
<li>name 人物名称</li>
<li>desc 人物简介</li>
<li>stage 人物出现在三体小说的哪个阶段</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">nodes_info_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data/三体人物.xlsx&#39;</span><span class="p">)</span>
<span class="n">nodes_info_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="边-人物关系数据">边-人物关系数据</h2>
<p>将节点数据依次在三体小说文本中按行进行检索，如果每行同时出现两个人物，两个人物会构建一个边。人物关系网络图可以用gephi软件进行绘制， 绘制需要两个csv文件，即</p>
<ul>
<li>三体_nodes.csv</li>
<li>三体_edges.csv</li>
</ul>
<p>实现代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">codecs</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">():</span>
    <span class="n">jieba</span><span class="o">.</span><span class="n">add_word</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="n">nodes</span> <span class="o">=</span> <span class="p">{}</span>			<span class="c1"># 姓名字典，保存人物，该字典的键为人物名称，值为该人物在全文中出现的次数</span>
<span class="n">relationships</span> <span class="o">=</span> <span class="p">{}</span>	<span class="c1"># 关系字典，保存人物关系的有向边，该字典的键为有向边的起点，值为一个字典edge，edge的键是有向边的终点，值是有向边的权值，代表两个人物之间联系的紧密程度</span>
<span class="n">lineNodes</span> <span class="o">=</span> <span class="p">[]</span>		<span class="c1"># 每段内人物关系，是一个缓存变量，保存对每一段分词得到当前段中出现的人物名称，lineName[i]是一个列表，列表中存储第i段中出现过的人物</span>


<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/三体.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
		<span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>		<span class="c1"># 分词并返回该词词性</span>
		<span class="n">lineNodes</span><span class="o">.</span><span class="n">append</span><span class="p">([])</span>		<span class="c1"># 为新读入的一段添加人物名称列表</span>
		<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
			<span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">():</span>
				<span class="n">lineNodes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>		<span class="c1"># 为当前段的环境增加一个人物</span>
				<span class="k">if</span> <span class="n">nodes</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
					<span class="n">nodes</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
				<span class="n">nodes</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>					<span class="c1"># 该人物出现次数加 1</span>
                

<span class="c1"># explore relationships   对于 lineNames 中每一行，我们为该行中出现的所有人物两两相连。如果两个人物之间尚未有边建立，则将新建的边权值设为 1，否则将已存在的边的权值加 1。这种方法将产生很多的冗余边，这些冗余边将在最后处理。</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lineNodes</span><span class="p">:</span>					<span class="c1"># 对于每一段</span>
	<span class="k">for</span> <span class="n">node1</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>					
		<span class="k">for</span> <span class="n">node2</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>				<span class="c1"># 每段中的任意两个人</span>
			<span class="k">if</span> <span class="n">node1</span> <span class="o">==</span> <span class="n">node2</span><span class="p">:</span>
				<span class="k">continue</span>
			<span class="k">if</span> <span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">node2</span><span class="p">)</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>		<span class="c1"># 若两人尚未同时出现则新建项</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span><span class="o">=</span> <span class="mi">1</span>
			<span class="k">else</span><span class="p">:</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span> <span class="o">=</span> <span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span><span class="o">+</span> <span class="mi">1</span>		<span class="c1"># 两人共同出现次数加 1</span>


<span class="c1"># output   将已经建好的 names 和 relationships 输出到文本，以方便 gephi 可视化处理。输出边的过程中可以过滤可能是冗余的边，这里假设共同出现次数少于 3 次的是冗余边，则在输出时跳过这样的边。输出的节点集合保存为 busan_node.txt ，边集合保存为 busan_edge.node 。</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;output/三体_nodes.csv&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf1</span><span class="p">:</span>
	<span class="n">writer1</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf1</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">])</span>
	<span class="n">writer1</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">times</span> <span class="ow">in</span> <span class="n">nodes</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
		<span class="n">line</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">:</span> <span class="n">times</span><span class="p">}</span>
		<span class="n">writer1</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>



<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;output/三体_edges.csv&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf2</span><span class="p">:</span>
	<span class="n">writer2</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf2</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">])</span>
	<span class="n">writer2</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">edges</span> <span class="ow">in</span> <span class="n">relationships</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
		<span class="k">for</span> <span class="n">target</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="n">edges</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
			<span class="k">if</span> <span class="n">weight</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">:</span>
				<span class="n">line</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;source&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">:</span><span class="n">target</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">:</span><span class="n">w</span><span class="p">}</span>
				<span class="n">writer2</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</code></pre></div><br>
<p>查看 三体_nodes.csv 文件样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">nodes_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;output/三体_nodes.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">nodes_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<p>查看 三体_edges.csv 文件样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">edges_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;output/三体_edges.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">edges_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="绘制关系图">绘制关系图</h2>
<p>本文不讲解gephi，感兴趣的可以去B站搜gephi使用方法。 实现可视化，除了gephi， 也可以使用pyechart库实现不错的可视化效果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>


<span class="n">nodes_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">edges_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">categories_data</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">nodes_df</span><span class="o">.</span><span class="n">label</span><span class="p">,</span> <span class="n">nodes_df</span><span class="o">.</span><span class="n">weight</span><span class="p">):</span>
    <span class="n">category</span> <span class="o">=</span> <span class="n">nodes_info_df</span><span class="p">[</span><span class="n">nodes_info_df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;stage&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="c1">##使用weight作为圆点的值，除以10，防止圆点太大占满整个屏幕.</span>
    <span class="n">node_info</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">node</span><span class="p">),</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="n">weight</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span><span class="p">:</span> <span class="n">category</span><span class="p">,</span> <span class="s2">&#34;value&#34;</span><span class="p">:</span> <span class="n">weight</span><span class="o">/</span><span class="mi">10</span><span class="p">}</span>
    <span class="n">nodes_data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_info</span><span class="p">)</span>

<span class="k">for</span> <span class="n">ix</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">edges_df</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">edges_df</span><span class="o">.</span><span class="n">source</span><span class="p">,</span> <span class="n">edges_df</span><span class="o">.</span><span class="n">target</span><span class="p">):</span>
    <span class="n">edges_data</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">ix</span><span class="p">,</span> <span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">source</span><span class="p">,</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">target</span><span class="p">})</span>

<span class="k">for</span> <span class="n">category</span> <span class="ow">in</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;stage&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()):</span> 
    <span class="n">categories_data</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="n">category</span><span class="p">})</span>


<span class="n">c</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">Graph</span><span class="p">(</span><span class="n">init_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">InitOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="s2">&#34;1000px&#34;</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="s2">&#34;600px&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="o">=</span><span class="n">nodes_data</span><span class="p">,</span>
        <span class="n">links</span><span class="o">=</span><span class="n">edges_data</span><span class="p">,</span>
        <span class="n">categories</span><span class="o">=</span><span class="n">categories_data</span><span class="p">,</span>
        <span class="n">layout</span><span class="o">=</span><span class="s2">&#34;circular&#34;</span><span class="p">,</span>
        <span class="n">is_rotate_label</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">&#34;source&#34;</span><span class="p">,</span> <span class="n">curve</span><span class="o">=</span><span class="mf">0.3</span><span class="p">),</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;三体人物关系图&#34;</span><span class="p">),</span>
        <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">orient</span><span class="o">=</span><span class="s2">&#34;vertical&#34;</span><span class="p">,</span> <span class="n">pos_left</span><span class="o">=</span><span class="s2">&#34;2%&#34;</span><span class="p">,</span> <span class="n">pos_top</span><span class="o">=</span><span class="s2">&#34;20%&#34;</span><span class="p">),</span>
    <span class="p">)</span>
<span class="p">)</span>

<span class="n">c</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s1">&#39;output/三体_graph.html&#39;</span><span class="p">)</span>
<span class="n">c</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div><p>Run</p>


<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Awesome-pyecharts</title>
            <script type="text/javascript" src="https://assets.pyecharts.org/assets/echarts.min.js"></script>

</head>
<body>
    <div id="e97ab300531a4c0ca1574681e578906a" class="chart-container" style="width:1000px; height:600px;"></div>
    <script>
        var chart_e97ab300531a4c0ca1574681e578906a = echarts.init(
            document.getElementById('e97ab300531a4c0ca1574681e578906a'), 'white', {renderer: 'canvas'});
        var option_e97ab300531a4c0ca1574681e578906a = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "graph",
            "layout": "circular",
            "symbolSize": 10,
            "circular": {
                "rotateLabel": true
            },
            "force": {
                "repulsion": 50,
                "edgeLength": 50,
                "gravity": 0.2
            },
            "label": {
                "show": true,
                "position": "right",
                "margin": 8
            },
            "lineStyle": {
                "show": true,
                "width": 1,
                "opacity": 1,
                "curveness": 0.3,
                "type": "solid",
                "color": "source"
            },
            "roam": true,
            "draggable": false,
            "focusNodeAdjacency": true,
            "data": [
                {
                    "name": "\u6c6a\u6dfc",
                    "symbolSize": 64.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 64.1
                },
                {
                    "name": "\u53f2\u5f3a",
                    "symbolSize": 24.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 24.7
                },
                {
                    "name": "\u5e38\u4f1f\u601d",
                    "symbolSize": 9.4,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 9.4
                },
                {
                    "name": "\u6768\u51ac",
                    "symbolSize": 6.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 6.5
                },
                {
                    "name": "\u4e01\u4eea",
                    "symbolSize": 17.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 17.2
                },
                {
                    "name": "\u7533\u7389\u83f2",
                    "symbolSize": 4.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 4.9
                },
                {
                    "name": "\u8c46\u8c46",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u9b4f\u6210",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.0
                },
                {
                    "name": "\u6f58\u5bd2",
                    "symbolSize": 4.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 4.7
                },
                {
                    "name": "\u674e\u7476",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.2
                },
                {
                    "name": "\u53f6\u6587\u6d01",
                    "symbolSize": 47.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 47.2
                },
                {
                    "name": "\u6960\u6960",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u6d0b\u6d0b",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u54aa\u54aa",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u6c99\u745e\u5c71",
                    "symbolSize": 2.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.5
                },
                {
                    "name": "\u53f6\u54f2\u6cf0",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.0
                },
                {
                    "name": "\u767d\u6c90\u9716",
                    "symbolSize": 2.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.9
                },
                {
                    "name": "\u9a6c\u94a2",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u7a0b\u4e3d\u534e",
                    "symbolSize": 0.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.9
                },
                {
                    "name": "\u53f6\u6587\u96ea",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.4
                },
                {
                    "name": "\u96f7\u5fd7\u6210",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.5
                },
                {
                    "name": "\u6768\u536b\u5b81",
                    "symbolSize": 7.8,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 7.8
                },
                {
                    "name": "\u5a01\u5c14\u900a",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.4
                },
                {
                    "name": "\u58a8\u5b50",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.1
                },
                {
                    "name": "\u5f90\u51b0\u51b0",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.7
                },
                {
                    "name": "\u4f0a\u6587\u65af",
                    "symbolSize": 8.8,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 8.8
                },
                {
                    "name": "\u62c9\u83f2\u5c14",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u6838\u5f39\u5973\u5b69",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u9f50\u730e\u5934",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u5927\u51e4",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 1.1
                },
                {
                    "name": "\u9ea6\u514b",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.8
                },
                {
                    "name": "\u65af\u5766\u987f",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.3
                },
                {
                    "name": "1379\u53f7\u76d1\u542c\u5458",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u5143\u9996",
                    "symbolSize": 7.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 7.9
                },
                {
                    "name": "\u667a\u5b50",
                    "symbolSize": 46.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 46.4
                },
                {
                    "name": "\u6797\u4e91",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u7f57\u8f91",
                    "symbolSize": 129.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 129.4
                },
                {
                    "name": "\u5434\u5cb3",
                    "symbolSize": 6.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 6.1
                },
                {
                    "name": "\u7ae0\u5317\u6d77",
                    "symbolSize": 31.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 31.6
                },
                {
                    "name": "\u96f7\u5fb7\u5c14",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.0
                },
                {
                    "name": "\u743c\u65af",
                    "symbolSize": 0.9,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.9
                },
                {
                    "name": "\u6590\u5179\u7f57\u5c06\u519b",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.7
                },
                {
                    "name": "\u5f20\u63f4\u671d",
                    "symbolSize": 4.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 4.3
                },
                {
                    "name": "\u6768\u664b\u6587",
                    "symbolSize": 3.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.4
                },
                {
                    "name": "\u82d7\u798f\u5168",
                    "symbolSize": 2.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.0
                },
                {
                    "name": "\u53f2\u6653\u660e",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.5
                },
                {
                    "name": "\u4f3d\u5c14\u8bfa\u592b",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u767d\u84c9",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.4
                },
                {
                    "name": "\u574e\u7279",
                    "symbolSize": 7.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 7.6
                },
                {
                    "name": "\u8428\u4f0a",
                    "symbolSize": 5.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 5.3
                },
                {
                    "name": "\u5c71\u6749\u60e0\u5b50",
                    "symbolSize": 6.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 6.4
                },
                {
                    "name": "\u6797\u683c",
                    "symbolSize": 4.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 4.8
                },
                {
                    "name": "\u4f3d\u5c14\u5b81",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.5
                },
                {
                    "name": "\u827e\u4f26",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.1
                },
                {
                    "name": "\u4e95\u4e0a\u5b8f\u4e00",
                    "symbolSize": 0.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.6
                },
                {
                    "name": "\u5e84\u989c",
                    "symbolSize": 12.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 12.5
                },
                {
                    "name": "\u54c8\u91cc\u65af",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u5f20\u7fd4",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.1
                },
                {
                    "name": "\u5f20\u5ef6",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.5
                },
                {
                    "name": "\u6653\u8679",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u51ef\u745f\u7433",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u718a\u6587",
                    "symbolSize": 1.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.5
                },
                {
                    "name": "\u90ed\u6b63\u660e",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u4e1c\u65b9\u5ef6\u7eea",
                    "symbolSize": 8.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 8.4
                },
                {
                    "name": "\u80af\u535a\u58eb",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.4
                },
                {
                    "name": "\u7f57\u5bbe\u900a\u5c06\u519b",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u5217\u6587",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.8
                },
                {
                    "name": "\u4e95\u4e0a\u660e",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.1
                },
                {
                    "name": "\u897f\u5b50",
                    "symbolSize": 2.9,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.9
                },
                {
                    "name": "\u8d75\u946b",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.1
                },
                {
                    "name": "\u674e\u7ef4",
                    "symbolSize": 2.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.0
                },
                {
                    "name": "\u84dd\u897f",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.0
                },
                {
                    "name": "\u65af\u79d1\u7279",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.3
                },
                {
                    "name": "\u6cd5\u624e\u5170",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u72c4\u5965\u4f26\u5a1c",
                    "symbolSize": 5.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 5.2
                },
                {
                    "name": "\u4e91\u5929\u660e",
                    "symbolSize": 31.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 31.6
                },
                {
                    "name": "\u5f20\u533b\u751f",
                    "symbolSize": 1.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.6
                },
                {
                    "name": "\u8001\u674e",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u80e1\u6587",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.3
                },
                {
                    "name": "\u7a0b\u5fc3",
                    "symbolSize": 151.7,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 151.7
                },
                {
                    "name": "\u4f55\u535a\u58eb",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.1
                },
                {
                    "name": "\u4e8e\u7ef4\u6c11",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.4
                },
                {
                    "name": "\u67ef\u66fc\u7433",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.0
                },
                {
                    "name": "\u4e54\u4f9d\u5a1c",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.3
                },
                {
                    "name": "\u516c\u5143\u4eba",
                    "symbolSize": 1.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.6
                },
                {
                    "name": "\u6bd5\u4e91\u5cf0",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u66f9\u5f6c",
                    "symbolSize": 8.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 8.8
                },
                {
                    "name": "\u4f0a\u4e07",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.5
                },
                {
                    "name": "\u5b89\u4e1c\u8bfa\u592b",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.4
                },
                {
                    "name": "\u97e6\u65af\u7279",
                    "symbolSize": 2.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.8
                },
                {
                    "name": "\u6234\u6587",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.1
                },
                {
                    "name": "\u6734\u4e49\u541b",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.7
                },
                {
                    "name": "\u827e\u514b",
                    "symbolSize": 2.5,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.5
                },
                {
                    "name": "\u8587\u62c9",
                    "symbolSize": 1.9,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.9
                },
                {
                    "name": "\u5218\u6653\u660e",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u5173\u4e00\u5e06",
                    "symbolSize": 26.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 26.2
                },
                {
                    "name": "\u5f17\u96f7\u65af",
                    "symbolSize": 3.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.8
                },
                {
                    "name": "\u79cb\u539f\u73b2\u5b50",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u891a\u5ca9",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.5
                },
                {
                    "name": "\u5353\u6587",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.0
                },
                {
                    "name": "\u6df1\u6c34\u738b\u5b50",
                    "symbolSize": 3.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.4
                },
                {
                    "name": "\u9732\u73e0\u516c\u4e3b",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u7a7a\u7075\u753b\u5e08",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u9488\u773c\u753b\u5e08",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u957f\u5e06",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.3
                },
                {
                    "name": "\u5df4\u52d2\u83ab",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.8
                },
                {
                    "name": "\u6770\u68ee",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u5a01\u7eb3\u5c14",
                    "symbolSize": 1.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.3
                },
                {
                    "name": "\u9ad8way",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.1
                },
                {
                    "name": "\u5e03\u83b1\u5c14",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u6b4c\u8005",
                    "symbolSize": 4.9,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 4.9
                }
            ],
            "categories": [
                {
                    "name": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b"
                },
                {
                    "name": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797"
                },
                {
                    "name": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f"
                }
            ],
            "edgeLabel": {
                "show": false,
                "position": "top",
                "margin": 8
            },
            "edgeSymbol": [
                null,
                null
            ],
            "edgeSymbolSize": 10,
            "links": [
                {
                    "id": 0,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 1,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 2,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 3,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 4,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 5,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u9b4f\u6210"
                },
                {
                    "id": 6,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 7,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 8,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6c99\u745e\u5c71"
                },
                {
                    "id": 9,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u58a8\u5b50"
                },
                {
                    "id": 10,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 11,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u5f90\u51b0\u51b0"
                },
                {
                    "id": 12,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u65af\u5766\u987f"
                },
                {
                    "id": 13,
                    "source": "\u53f2\u5f3a",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 14,
                    "source": "\u53f2\u5f3a",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 15,
                    "source": "\u53f2\u5f3a",
                    "target": "\u65af\u5766\u987f"
                },
                {
                    "id": 16,
                    "source": "\u53f2\u5f3a",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 17,
                    "source": "\u53f2\u5f3a",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 18,
                    "source": "\u53f2\u5f3a",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 19,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 20,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 21,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 22,
                    "source": "\u6768\u51ac",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 23,
                    "source": "\u6768\u51ac",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 24,
                    "source": "\u6768\u51ac",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 25,
                    "source": "\u6768\u51ac",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 26,
                    "source": "\u6768\u51ac",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 27,
                    "source": "\u4e01\u4eea",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 28,
                    "source": "\u4e01\u4eea",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 29,
                    "source": "\u4e01\u4eea",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 30,
                    "source": "\u4e01\u4eea",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 31,
                    "source": "\u4e01\u4eea",
                    "target": "\u897f\u5b50"
                },
                {
                    "id": 32,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 33,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u9b4f\u6210"
                },
                {
                    "id": 34,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 35,
                    "source": "\u9b4f\u6210",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 36,
                    "source": "\u9b4f\u6210",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 37,
                    "source": "\u6f58\u5bd2",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 38,
                    "source": "\u6f58\u5bd2",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 39,
                    "source": "\u6f58\u5bd2",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 40,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 41,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 42,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6c99\u745e\u5c71"
                },
                {
                    "id": 43,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u53f6\u54f2\u6cf0"
                },
                {
                    "id": 44,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u767d\u6c90\u9716"
                },
                {
                    "id": 45,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u7a0b\u4e3d\u534e"
                },
                {
                    "id": 46,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u53f6\u6587\u96ea"
                },
                {
                    "id": 47,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 48,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u96f7\u5fd7\u6210"
                },
                {
                    "id": 49,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 50,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 51,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 52,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u5927\u51e4"
                },
                {
                    "id": 53,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 54,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 55,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 56,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u5e84\u989c"
                },
                {
                    "id": 57,
                    "source": "\u6c99\u745e\u5c71",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 58,
                    "source": "\u6c99\u745e\u5c71",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 59,
                    "source": "\u53f6\u54f2\u6cf0",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 60,
                    "source": "\u53f6\u54f2\u6cf0",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 61,
                    "source": "\u767d\u6c90\u9716",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 62,
                    "source": "\u7a0b\u4e3d\u534e",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 63,
                    "source": "\u53f6\u6587\u96ea",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 64,
                    "source": "\u96f7\u5fd7\u6210",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 65,
                    "source": "\u96f7\u5fd7\u6210",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 66,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u96f7\u5fd7\u6210"
                },
                {
                    "id": 67,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 68,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u53f6\u54f2\u6cf0"
                },
                {
                    "id": 69,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 70,
                    "source": "\u58a8\u5b50",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 71,
                    "source": "\u5f90\u51b0\u51b0",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 72,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 73,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u9ea6\u514b"
                },
                {
                    "id": 74,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 75,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 76,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 77,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u5927\u51e4"
                },
                {
                    "id": 78,
                    "source": "\u5927\u51e4",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 79,
                    "source": "\u5927\u51e4",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 80,
                    "source": "\u9ea6\u514b",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 81,
                    "source": "\u65af\u5766\u987f",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 82,
                    "source": "\u65af\u5766\u987f",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 83,
                    "source": "\u5143\u9996",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 84,
                    "source": "\u667a\u5b50",
                    "target": "\u5143\u9996"
                },
                {
                    "id": 85,
                    "source": "\u667a\u5b50",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 86,
                    "source": "\u667a\u5b50",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 87,
                    "source": "\u667a\u5b50",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 88,
                    "source": "\u667a\u5b50",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 89,
                    "source": "\u667a\u5b50",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 90,
                    "source": "\u667a\u5b50",
                    "target": "\u6234\u6587"
                },
                {
                    "id": 91,
                    "source": "\u667a\u5b50",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 92,
                    "source": "\u667a\u5b50",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 93,
                    "source": "\u667a\u5b50",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 94,
                    "source": "\u7f57\u8f91",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 95,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 96,
                    "source": "\u7f57\u8f91",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 97,
                    "source": "\u7f57\u8f91",
                    "target": "\u767d\u84c9"
                },
                {
                    "id": 98,
                    "source": "\u7f57\u8f91",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 99,
                    "source": "\u7f57\u8f91",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 100,
                    "source": "\u7f57\u8f91",
                    "target": "\u4f3d\u5c14\u5b81"
                },
                {
                    "id": 101,
                    "source": "\u7f57\u8f91",
                    "target": "\u5e84\u989c"
                },
                {
                    "id": 102,
                    "source": "\u7f57\u8f91",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 103,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 104,
                    "source": "\u7f57\u8f91",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 105,
                    "source": "\u7f57\u8f91",
                    "target": "\u5f20\u7fd4"
                },
                {
                    "id": 106,
                    "source": "\u7f57\u8f91",
                    "target": "\u5c71\u6749\u60e0\u5b50"
                },
                {
                    "id": 107,
                    "source": "\u7f57\u8f91",
                    "target": "\u718a\u6587"
                },
                {
                    "id": 108,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 109,
                    "source": "\u7f57\u8f91",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 110,
                    "source": "\u7f57\u8f91",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 111,
                    "source": "\u5434\u5cb3",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 112,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u5434\u5cb3"
                },
                {
                    "id": 113,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 114,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 115,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 116,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u4e1c\u65b9\u5ef6\u7eea"
                },
                {
                    "id": 117,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 118,
                    "source": "\u6590\u5179\u7f57\u5c06\u519b",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 119,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u6768\u664b\u6587"
                },
                {
                    "id": 120,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u82d7\u798f\u5168"
                },
                {
                    "id": 121,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 122,
                    "source": "\u6768\u664b\u6587",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 123,
                    "source": "\u6768\u664b\u6587",
                    "target": "\u82d7\u798f\u5168"
                },
                {
                    "id": 124,
                    "source": "\u82d7\u798f\u5168",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 125,
                    "source": "\u82d7\u798f\u5168",
                    "target": "\u6768\u664b\u6587"
                },
                {
                    "id": 126,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 127,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 128,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 129,
                    "source": "\u767d\u84c9",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 130,
                    "source": "\u574e\u7279",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 131,
                    "source": "\u574e\u7279",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 132,
                    "source": "\u574e\u7279",
                    "target": "\u5f20\u7fd4"
                },
                {
                    "id": 133,
                    "source": "\u8428\u4f0a",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 134,
                    "source": "\u8428\u4f0a",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 135,
                    "source": "\u8428\u4f0a",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 136,
                    "source": "\u5c71\u6749\u60e0\u5b50",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 137,
                    "source": "\u6797\u683c",
                    "target": "\u6590\u5179\u7f57\u5c06\u519b"
                },
                {
                    "id": 138,
                    "source": "\u6797\u683c",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 139,
                    "source": "\u6797\u683c",
                    "target": "\u80af\u535a\u58eb"
                },
                {
                    "id": 140,
                    "source": "\u4f3d\u5c14\u5b81",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 141,
                    "source": "\u5e84\u989c",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 142,
                    "source": "\u5e84\u989c",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 143,
                    "source": "\u5f20\u7fd4",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 144,
                    "source": "\u5f20\u7fd4",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 145,
                    "source": "\u718a\u6587",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 146,
                    "source": "\u4e1c\u65b9\u5ef6\u7eea",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 147,
                    "source": "\u4e1c\u65b9\u5ef6\u7eea",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 148,
                    "source": "\u80af\u535a\u58eb",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 149,
                    "source": "\u5217\u6587",
                    "target": "\u4e95\u4e0a\u660e"
                },
                {
                    "id": 150,
                    "source": "\u4e95\u4e0a\u660e",
                    "target": "\u5217\u6587"
                },
                {
                    "id": 151,
                    "source": "\u897f\u5b50",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 152,
                    "source": "\u8d75\u946b",
                    "target": "\u674e\u7ef4"
                },
                {
                    "id": 153,
                    "source": "\u674e\u7ef4",
                    "target": "\u8d75\u946b"
                },
                {
                    "id": 154,
                    "source": "\u84dd\u897f",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 155,
                    "source": "\u84dd\u897f",
                    "target": "\u4e1c\u65b9\u5ef6\u7eea"
                },
                {
                    "id": 156,
                    "source": "\u84dd\u897f",
                    "target": "\u65af\u79d1\u7279"
                },
                {
                    "id": 157,
                    "source": "\u65af\u79d1\u7279",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 158,
                    "source": "\u6cd5\u624e\u5170",
                    "target": "\u72c4\u5965\u4f26\u5a1c"
                },
                {
                    "id": 159,
                    "source": "\u72c4\u5965\u4f26\u5a1c",
                    "target": "\u6cd5\u624e\u5170"
                },
                {
                    "id": 160,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u5f20\u533b\u751f"
                },
                {
                    "id": 161,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u8001\u674e"
                },
                {
                    "id": 162,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u80e1\u6587"
                },
                {
                    "id": 163,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 164,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u4f55\u535a\u58eb"
                },
                {
                    "id": 165,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u4e8e\u7ef4\u6c11"
                },
                {
                    "id": 166,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 167,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u6df1\u6c34\u738b\u5b50"
                },
                {
                    "id": 168,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u7a7a\u7075\u753b\u5e08"
                },
                {
                    "id": 169,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 170,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 171,
                    "source": "\u5f20\u533b\u751f",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 172,
                    "source": "\u5f20\u533b\u751f",
                    "target": "\u8001\u674e"
                },
                {
                    "id": 173,
                    "source": "\u8001\u674e",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 174,
                    "source": "\u8001\u674e",
                    "target": "\u5f20\u533b\u751f"
                },
                {
                    "id": 175,
                    "source": "\u80e1\u6587",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 176,
                    "source": "\u80e1\u6587",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 177,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 178,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u80e1\u6587"
                },
                {
                    "id": 179,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4f55\u535a\u58eb"
                },
                {
                    "id": 180,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4e8e\u7ef4\u6c11"
                },
                {
                    "id": 181,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u67ef\u66fc\u7433"
                },
                {
                    "id": 182,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 183,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u516c\u5143\u4eba"
                },
                {
                    "id": 184,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 185,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u6bd5\u4e91\u5cf0"
                },
                {
                    "id": 186,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 187,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 188,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u66f9\u5f6c"
                },
                {
                    "id": 189,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u6770\u68ee"
                },
                {
                    "id": 190,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 191,
                    "source": "\u4f55\u535a\u58eb",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 192,
                    "source": "\u4f55\u535a\u58eb",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 193,
                    "source": "\u4e8e\u7ef4\u6c11",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 194,
                    "source": "\u4e8e\u7ef4\u6c11",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 195,
                    "source": "\u67ef\u66fc\u7433",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 196,
                    "source": "\u516c\u5143\u4eba",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 197,
                    "source": "\u6bd5\u4e91\u5cf0",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 198,
                    "source": "\u6bd5\u4e91\u5cf0",
                    "target": "\u66f9\u5f6c"
                },
                {
                    "id": 199,
                    "source": "\u66f9\u5f6c",
                    "target": "\u6bd5\u4e91\u5cf0"
                },
                {
                    "id": 200,
                    "source": "\u66f9\u5f6c",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 201,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u6234\u6587"
                },
                {
                    "id": 202,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 203,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u5353\u6587"
                },
                {
                    "id": 204,
                    "source": "\u6234\u6587",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 205,
                    "source": "\u6234\u6587",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 206,
                    "source": "\u827e\u514b",
                    "target": "\u8587\u62c9"
                },
                {
                    "id": 207,
                    "source": "\u8587\u62c9",
                    "target": "\u827e\u514b"
                },
                {
                    "id": 208,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 209,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u5353\u6587"
                },
                {
                    "id": 210,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 211,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 212,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 213,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 214,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 215,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 216,
                    "source": "\u5353\u6587",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 217,
                    "source": "\u5353\u6587",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 218,
                    "source": "\u6df1\u6c34\u738b\u5b50",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 219,
                    "source": "\u6df1\u6c34\u738b\u5b50",
                    "target": "\u9732\u73e0\u516c\u4e3b"
                },
                {
                    "id": 220,
                    "source": "\u9732\u73e0\u516c\u4e3b",
                    "target": "\u6df1\u6c34\u738b\u5b50"
                },
                {
                    "id": 221,
                    "source": "\u9732\u73e0\u516c\u4e3b",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 222,
                    "source": "\u7a7a\u7075\u753b\u5e08",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 223,
                    "source": "\u7a7a\u7075\u753b\u5e08",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 224,
                    "source": "\u957f\u5e06",
                    "target": "\u9732\u73e0\u516c\u4e3b"
                },
                {
                    "id": 225,
                    "source": "\u957f\u5e06",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 226,
                    "source": "\u957f\u5e06",
                    "target": "\u7a7a\u7075\u753b\u5e08"
                },
                {
                    "id": 227,
                    "source": "\u6770\u68ee",
                    "target": "\u7a0b\u5fc3"
                }
            ]
        }
    ],
    "legend": [
        {
            "data": [
                "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f"
            ],
            "selected": {
                "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b": true,
                "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797": true,
                "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f": true
            },
            "show": true,
            "left": "2%",
            "top": "20%",
            "orient": "vertical",
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "showContent": true,
        "alwaysShowContent": false,
        "showDelay": 0,
        "hideDelay": 100,
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0,
        "padding": 5
    },
    "title": [
        {
            "text": "\u4e09\u4f53\u4eba\u7269\u5173\u7cfb\u56fe",
            "padding": 5,
            "itemGap": 10
        }
    ]
};
        chart_e97ab300531a4c0ca1574681e578906a.setOption(option_e97ab300531a4c0ca1574681e578906a);
    </script>
</body>
</html>

<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>训练&amp;使用Glove语言模型， 可度量刻板印象等</title>
      <link>https://textdata.cn/blog/2022-11-22-glove-embeddings-model/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-22-glove-embeddings-model/</guid>
      <description>训练&amp;amp;使用Glove语言模型， 可度量刻板印象等</description>
      <content:encoded><![CDATA[<p>Glove可以捕捉到词语在语料库中的全局语义信息和类比信息， 据此基于语义向量计算刻板印象、文化变迁等，Glove模型在计算社会科学中拥有很大的应用潜力。</p>
<p><img loading="lazy" src="img/wordpaths.png" alt=""  />
</p>
<p>训练Glove模型有两种实现方式</p>
<ol>
<li>C语言；  <a href="https://nlp.stanford.edu/projects/glove/">https://nlp.stanford.edu/projects/glove/</a></li>
<li>Python语言；mittens、glove-python</li>
</ol>
<p><img loading="lazy" src="img/stanford%e8%ae%ad%e7%bb%83Glove.png" alt=""  />
</p>
<h2 id="方法比较">方法比较</h2>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">优点</th>
<th style="text-align:left">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">C语言</td>
<td style="text-align:left">速度快，现成的代码工具</td>
<td style="text-align:left">源代码仅支持英文, 需要付出较高的学习成本才能改动支持中文。 对文科生小白而言，门槛高</td>
</tr>
<tr>
<td style="text-align:left">Python语言</td>
<td style="text-align:left">mittens、glove-python等包语法简洁, 易上手</td>
<td style="text-align:left">对文科生还是有一定的门槛，代码运行速度慢</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td></td>
</tr>
</tbody>
</table>
<br>
<p>不考虑性能约束条件，更多地考虑易用性，大邓简化了Python代码，将其内置到了cntext库。</p>
<p>对词向量、词嵌入感兴趣的童鞋，可以阅读下列相关资料</p>
<ul>
<li><a href="https://textdata.cn/blog/wordembeddingsinsocialscience/">转载 | 大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用</a></li>
<li><a href="https://textdata.cn/blog/from_sysbol_to_embeddings_in_computational_social_science/">转载 | 从符号到嵌入：计算社会科学的两种文本表示</a></li>
</ul>
<br>
<h2 id="glove代码">GloVe代码</h2>
<p>cntext支持中英文， 只需要7行代码，可完成导入数据、训练模型、保存结果。 这里以三体小说数据为例， 使用 <a href="santi.txt"><strong>data/santi.txt</strong></a> 。</p>
<p><strong>需要注意， santi.txt文件内文本是已经分词处理过的</strong>。这样可以在english这类西方语言模式下使用空格来区分词语的边界。</p>
<blockquote>
<p>如果使用英文数据，下面代码只需要更改数据文件的路径即可。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#设置语言和项目文件夹路径</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">Glove</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
<span class="c1">#导入语料</span>
<span class="n">model</span><span class="o">.</span><span class="n">create_vocab</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="s1">&#39;data/santi.txt&#39;</span><span class="p">,</span> <span class="n">min_count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="c1">#构建词语共现矩阵</span>
<span class="n">model</span><span class="o">.</span><span class="n">cooccurrence_matrix</span><span class="p">()</span>
<span class="c1">#设置词嵌入模型的向量维度、迭代数</span>
<span class="n">model</span><span class="o">.</span><span class="n">train_embeddings</span><span class="p">(</span><span class="n">vector_size</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
<span class="c1">#存储模型</span>
<span class="n">model</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">model_name</span><span class="o">=</span><span class="s1">&#39;santi_glove_model&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Building prefix dict from the default dictionary ...
Step 1/4: ...Create vocabulary for Glove.

Dumping model to file cache C:\Users\Deng\AppData\Local\Temp\jieba.cache
Loading model cost 0.628 seconds.

Prefix dict has been built successfully.

Step 2/4: ...Create cooccurrence matrix.
Step 3/4: ...Train glove embeddings. 
             Note, this part takes a long time to run

Iteration 20: error 64925132.71550
Step 3/4: ... Finish! Use 316.91 s

Step 4/4: ... Save the glove embeddings to a txt file
</code></pre></div><br>
<h2 id="导入glove预训练模型">导入GloVe预训练模型</h2>
<p>训练好的GloVe模型是txt文件，可以使用gensim导入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="c1"># 导入GloVe模型文件</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;output/Glove/santi_glove_model.txt&#39;</span><span class="p">,</span>  <span class="n">no_header</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1">#查看某词的词向量</span>
<span class="n">model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;宇宙&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([ 0.6618259 ,  0.60663235,  0.9849417 , -1.028956  ,  1.0711069 ,
       -0.8875306 , -0.52833366, -1.0125595 , -0.9628481 ,  1.0356479 ,
        0.8595257 ,  0.7454354 , -1.0468111 , -0.26285014, -1.0310447 ,
        0.9906805 ,  0.05825566, -0.85581344, -0.9932533 , -1.020438  ,
        1.0495061 , -0.6973389 ,  0.49099424, -0.80775315,  0.64256483,
        1.0157642 ,  1.0135043 , -1.0131834 ,  0.17376372,  0.89585054,
        0.30890268,  0.798895  ,  0.6653925 ,  0.908629  , -1.048273  ,
       -0.35683677,  0.06306187, -1.0267074 , -1.0494691 ,  0.42172813,
        0.24005401,  0.5934993 , -0.0696691 , -1.0360557 , -0.9797269 ,
        1.0205714 , -0.376359  , -1.0501183 ,  1.0415571 , -0.9312968 ],
      dtype=float32)
</code></pre></div><br>
<h2 id="模型的使用">模型的使用</h2>
<p>语料中所有的词语都是维度相同的向量，可以根据向量计算找近义词、反义词。可参考 之前分享的   <a href="https://textdata.cn/blog/douban_w2v/">豆瓣影评 | 探索词向量妙处</a></p>
<br>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>冉雅璇,李志强,刘佳妮,张逸石.大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用[J].南开管理评论:1-27.</li>
<li>William L. Hamilton, Jure Leskovec, and Dan Jurafsky. ACL 2016. Diachronic Word Embeddings Reveal Statistical Laws of Semantic Change.</li>
<li>Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. GloVe: Global Vectors for Word Representation.
<ul>
<li><a href="https://nlp.stanford.edu/projects/glove/">https://nlp.stanford.edu/projects/glove/</a></li>
</ul>
</li>
<li><a href="https://github.com/hiDaDeng/cntext">https://github.com/hiDaDeng/cntext</a></li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>FinBERT | 金融文本BERT模型，可情感分析、识别ESG和FLS类型</title>
      <link>https://textdata.cn/blog/2022-11-17-finbert-finance-bert-model/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-17-finbert-finance-bert-model/</guid>
      <description>金融语言模型</description>
      <content:encoded><![CDATA[<h2 id="finbert介绍">FinBERT介绍</h2>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/uj4hm7Lr2Wo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<br>
<p>FinBERT， 是使用49亿词的英文金融语料库数据，生成的BERT预训练语言模型。语料库上大小为 49亿个词。</p>
<ul>
<li>公司报告 10-K 和 10-Q：25亿个词</li>
<li>电话会议记录：13亿个词</li>
<li>分析师报告：11亿个词</li>
</ul>
<p>FinBERT开发者在多个金融 NLP 任务上对 FinBERT 预训练模型进行了微调，均优于传统机器学习模型、深度学习模型和微调 BERT 模型。 所有经过微调的 FinBERT 模型都公开托管在 Huggingface 🤗。  目前支持包括<strong>情绪分析、ESG 分类、前瞻性陈述 (FLS) 分类</strong>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Huang, Allen H., Hui Wang, and Yi Yang. &#34;FinBERT: A large language model for extracting information from financial text.&#34; Contemporary Accounting Research (2022).

摘要（翻译）: 我们开发了 FinBERT，这是一种适用于金融领域的最先进的大型语言模型。我们表明，FinBERT 结合了金融知识，可以更好地总结金融文本中的上下文信息。使用分析报告中研究人员标记的句子样本，我们证明 FinBERT 大大优于 Loughran 和 McDonald 词典以及其他机器学习算法，包括朴素贝叶斯、支持向量机、随机森林、卷积神经网络和长短期记忆，在情感分类中。我们的结果表明，FinBERT 擅长识别其他算法错误标记为中性的句子的正面或负面情绪，这可能是因为它使用了金融文本中的上下文信息。我们发现，FinBERT 优于其他算法，以及 Google 的原始双向编码器表示形式来自 transformers (BERT) 模型，当训练样本量较小且文本中包含一般文本中不常用的金融词时，这种优势尤为突出。 FinBERT 在识别与环境、社会和治理问题相关的讨论方面也优于其他模型。最后，我们表明，与 FinBERT 相比，其他方法低估了收益电话会议的文本信息量至少 18%。我们的结果对学术研究人员、投资专业人士和金融市场监管机构具有重要意义。
</code></pre></div><br>
<h3 id="finbert功能">FinBERT功能</h3>
<p>具体来说，FinBERT有以下内容：</p>
<ul>
<li><a href="https://huggingface.co/yiyanghkust/finbert-pretrain">FinBERT-Pretrained</a>： 针对大规模金融文本的预训练 FinBERT 模型。</li>
<li><a href="https://huggingface.co/yiyanghkust/finbert-tone">FinBERT-Sentiment</a>： 用于情感分类任务。</li>
<li><a href="https://huggingface.co/yiyanghkust/finbert-esg">FinBERT-ESG</a>： 用于 ESG 分类任务。</li>
<li><a href="https://huggingface.co/yiyanghkust/finbert-fls">FinBERT-FLS</a>： 用于前瞻性陈述（FLS）分类任务。</li>
</ul>
<br>
<h3 id="环境配置">环境配置</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install transformers==4.18.0
</code></pre></div><p>本次实验使用的transformers版本为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import transformers
transformers.__version__
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">4.18.0
</code></pre></div><br>
<h3 id="代码下载">代码下载</h3>
<p><a href="FinBERT.ipynb">点击下载</a></p>
<p><br><br></p>
<h2 id="一情感分析">一、情感分析</h2>
<p>金融文本情绪可以调动管理者、信息中介和投资者的观点和意见, 因此分析金融文本情感(情绪)是有价值的。 FinBERT-Sentiment 是一个 FinBERT 模型，它根据标准普尔 500 家公司的分析师报告中的 10,000 个手动注释的句子进行了Fine-tune(微调)。</p>
<blockquote>
<p>Fine-Tune微调 是 深度学习的一种语言处理技术，可以在前人（已有）的语言模型文件基础上加入少量新场景的文本数据进行更新训练，生成出新场景的语言模型。</p>
</blockquote>
<ul>
<li><strong>输入</strong>：金融文本。</li>
<li><strong>输出</strong>：Positive, Neutral or Negative.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">BertTokenizer</span><span class="p">,</span> <span class="n">BertForSequenceClassification</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="c1">#首次运行，因为会下载FinBERT模型，耗时会比较久</span>
<span class="n">senti_finbert</span> <span class="o">=</span> <span class="n">BertForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-tone&#39;</span><span class="p">,</span><span class="n">num_labels</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">senti_tokenizer</span> <span class="o">=</span> <span class="n">BertTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-tone&#39;</span><span class="p">)</span>
<span class="n">senti_nlp</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s2">&#34;text-classification&#34;</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">senti_finbert</span><span class="p">,</span> <span class="n">tokenizer</span><span class="o">=</span><span class="n">senti_tokenizer</span><span class="p">)</span>
</code></pre></div><p><br>使用3条测试文本进行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 待分析的文本数据</span>
<span class="n">senti_results</span> <span class="o">=</span> <span class="n">senti_nlp</span><span class="p">([</span><span class="s1">&#39;growth is strong and we have plenty of liquidity.&#39;</span><span class="p">,</span> 
                           <span class="s1">&#39;there is a shortage of capital, and we need extra financing.&#39;</span><span class="p">,</span>
                           <span class="s1">&#39;formulation patents might protect Vasotec to a limited extent.&#39;</span><span class="p">])</span>
<span class="n">senti_results</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [{&#39;label&#39;: &#39;Positive&#39;, &#39;score&#39;: 1.0},
     {&#39;label&#39;: &#39;Negative&#39;, &#39;score&#39;: 0.9952379465103149},
     {&#39;label&#39;: &#39;Neutral&#39;, &#39;score&#39;: 0.9979718327522278}]
</code></pre></div><p><br><br></p>
<h2 id="二esg分类">二、ESG分类</h2>
<p>ESG 分析可以帮助投资者确定企业的长期可持续性并识别相关风险。 FinBERT-ESG 是一个 FinBERT 模型，根据来自公司 ESG 报告和年度报告的 2,000 个手动注释句子进行微调。</p>
<ul>
<li><strong>输入</strong>：金融文本。</li>
<li><strong>输出</strong>：Environmental, Social, Governance or None.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">BertTokenizer</span><span class="p">,</span> <span class="n">BertForSequenceClassification</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">esg_finbert</span> <span class="o">=</span> <span class="n">BertForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-esg&#39;</span><span class="p">,</span><span class="n">num_labels</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">esg_tokenizer</span> <span class="o">=</span> <span class="n">BertTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-esg&#39;</span><span class="p">)</span>
<span class="n">esg_nlp</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s2">&#34;text-classification&#34;</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">esg_finbert</span><span class="p">,</span> <span class="n">tokenizer</span><span class="o">=</span><span class="n">esg_tokenizer</span><span class="p">)</span>
</code></pre></div><p><br>使用3条测试文本进行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">esg_results</span> <span class="o">=</span> <span class="n">esg_nlp</span><span class="p">([</span><span class="s1">&#39;Managing and working to mitigate the impact our operations have on the environment is a core element of our business.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;Rhonda has been volunteering for several years for a variety of charitable community programs.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;Cabot</span><span class="se">\&#39;</span><span class="s1">s annual statements are audited annually by an independent registered public accounting firm.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;As of December 31, 2012, the 2011 Term Loan had a principal balance of $492.5 million.&#39;</span><span class="p">])</span>

<span class="n">esg_results</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [{&#39;label&#39;: &#39;Environmental&#39;, &#39;score&#39;: 0.9805498719215393},
     {&#39;label&#39;: &#39;Social&#39;, &#39;score&#39;: 0.9906041026115417},
     {&#39;label&#39;: &#39;Governance&#39;, &#39;score&#39;: 0.6738430857658386},
     {&#39;label&#39;: &#39;None&#39;, &#39;score&#39;: 0.9960240125656128}]
</code></pre></div><p><br><br></p>
<h2 id="三fls识别">三、FLS识别</h2>
<p><strong>前瞻性陈述 (FLS)</strong> 告知投资者经理人对公司未来事件或结果的信念和意见。 从公司报告中识别前瞻性陈述可以帮助投资者进行财务分析。 FinBERT-FLS 是一个 FinBERT 模型，它基于罗素 3000 家公司年报的管理讨论和分析部分的 3,500 个手动注释的句子进行了微调。</p>
<ul>
<li><strong>输入</strong>：金融文本。</li>
<li><strong>输出</strong>：Specific-FLS(特定 FLS) , Non-specific FLS(非特定 FLS),  Not-FLS(非 FLS)。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">BertTokenizer</span><span class="p">,</span> <span class="n">BertForSequenceClassification</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">fls_finbert</span> <span class="o">=</span> <span class="n">BertForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-fls&#39;</span><span class="p">,</span><span class="n">num_labels</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">fls_tokenizer</span> <span class="o">=</span> <span class="n">BertTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-fls&#39;</span><span class="p">)</span>

<span class="n">fls_nlp</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s2">&#34;text-classification&#34;</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">fls_finbert</span><span class="p">,</span> <span class="n">tokenizer</span><span class="o">=</span><span class="n">fls_tokenizer</span><span class="p">)</span>
</code></pre></div><p><br> 使用3条测试文本进行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fls_results</span> <span class="o">=</span> <span class="n">fls_nlp</span><span class="p">([</span><span class="s1">&#39;we expect the age of our fleet to enhance availability and reliability due to reduced downtime for repairs.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;on an equivalent unit of production basis, general and administrative expenses declined 24 percent from 1994 to $.67 per boe.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;we will continue to assess the need for a valuation allowance against deferred tax assets considering all available evidence obtained in future reporting periods.&#39;</span><span class="p">])</span>


<span class="n">fls_results</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [{&#39;label&#39;: &#39;Specific FLS&#39;, &#39;score&#39;: 0.7727874517440796},
     {&#39;label&#39;: &#39;Not FLS&#39;, &#39;score&#39;: 0.9905241131782532},
     {&#39;label&#39;: &#39;Non-specific FLS&#39;, &#39;score&#39;: 0.975904107093811}]
</code></pre></div><p><br><br></p>
<h2 id="文档及引用说明">文档及引用说明</h2>
<ul>
<li>
<p>文档github地址 <a href="https://github.com/yya518/FinBERT">https://github.com/yya518/FinBERT</a></p>
</li>
<li>
<p>作者博客: <a href="https://yya518.github.io/research">https://yya518.github.io/research</a></p>
</li>
</ul>
<br>
<p>Huang, Allen H., Hui Wang, and Yi Yang. &ldquo;FinBERT: A large language model for extracting information from financial text.&rdquo; <strong>Contemporary Accounting Research (2022)</strong>.</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PNAS | 使用语义距离测量一个人的创新力(发散思维)得分</title>
      <link>https://textdata.cn/blog/2022-11-14-pnas_naming_unrelated_words_predicts_creativity/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-14-pnas_naming_unrelated_words_predicts_creativity/</guid>
      <description>使用语义距离测量一个人的创新力(发散思维)得分</description>
      <content:encoded><![CDATA[<br>
<p>传统测量 <strong>被试者创造力</strong> 存在耗费时间、主观性太强、缺乏客观性，且所得到的分值是不稳定的，无法跨时间、文化、群体进行分值比较。该研究分析了创新力的两大理论，即联系理论和执行理论，即创新力是包含思维的广度和深度两方面。</p>
<ul>
<li><strong>联系理论(广度)</strong> 负责搜寻所有可能方案的集合，增加集合的规模，体现思维的广度。</li>
<li><strong>执行理论(深度)</strong> 负责寻找最佳方案，并将方案落实执行，体现思维的深度。</li>
</ul>
<p>结合Glove词嵌入技术，将每个词理解为一个技术或知识，两词语语义越相似，发散性越低。</p>
<p>文中让被试按照一定规则，随意填写10个名词，使用其中7个有效词语测量被试的创新力(发散性)思维。可以简单的把7个词理解为知识或者技术，7个词语会形成21种词语对(组合)。最后求均值可以测量出被试词语对的语义距离体现创新发散性的强度。<strong>文末含案例代码</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Olson, J.A., Nahas, J., Chmoulevitch, D., Cropper, S.J. and Webb, M.E., 2021. Naming unrelated words predicts creativity. Proceedings of the National Academy of Sciences, 118(25), p.e2022340118.
</code></pre></div><p><br><br></p>
<h2 id="一摘要">一、摘要</h2>
<p><strong>一些理论认为，有 创造力 的人能够产生更多 发散性 的想法。如果这是正确的，简单地让被试写 N 个不相关的单词，然后测量这N个词的语义距离， 作为 #发散思维 的客观衡量标准</strong>。为了验证这一假设，我们要求 8,914 名参与者说出 10 个彼此尽可能不同的单词。</p>
<p>然后计算算法估计单词之间的平均语义距离；<strong>相关词（例如 cat 和 dog）比不相关词（例如 cat 和 thimble）的距离更短。我们预测，产生更大语义距离的人也会在传统的创造力测量中得分更高</strong>。</p>
<p>在研究 1 中，我们发现语义距离与两个广泛使用的创造力测量（替代用途任务和桥接关联差距任务）之间存在中度至强相关性。在研究 2 中，参与者来自 98 个国家，语义距离仅因基本人口变量而略有不同。在一系列已知可预测创造力的问题上，语义距离与表现之间也存在正相关关系。</p>
<p>总体而言， <strong>语义距离</strong> 与已建立的 创造力测量 的相关性至少与这些测量彼此之间的相关性一样强。 因此，在我们所说的发散关联任务中命名不相关的词可以作为发散思维的简短、可靠和客观的衡量标准。</p>
<br>
<h2 id="二创新力理论">二、创新力理论</h2>
<p>想出 3 个尽可能不同的词。根据两种主要的创造力理论 (1, 2)，选择这些词依赖于产生 #远程联想 ，同时抑制 #常见联想 。</p>
<p>#联想理论 (Associative Theory)认为，有创造力的人具有语义记忆结构，可以更容易地链接远程元素 (3-6)。</p>
<p>#执行理论 (Executive Theory) 侧重于自上而下的注意力控制；创造性的解决方案来自于监测和抑制共同的联想 (2, 7)。</p>
<p>基于这些理论，我们假设 <strong>填写n个无关单词的任务</strong> 可以可靠地衡量 #语言创造力 。 <strong>创造力有两个主要的心理成分， 收敛思维和发散思维，它们在产生创意输出时协同工作</strong>。收敛性思维任务衡量评估多种刺激并得出最适当响应的能力，例如问题的最佳解决方案 (3, 8-10)。这些任务往往更容易得分，因为只有一小部分正确答案。<strong>相比之下，发散思维任务通常使用开放式问题来衡量一个人产生各种解决方案的能力</strong> (11-13)。它们通常需要更长的回答(文本)，因此更难客观评分。</p>
<br>
<h2 id="三创新力测量">三、创新力测量</h2>
<h3 id="31--替代用途任务">3.1  替代用途任务</h3>
<p>最常见的发散思维测量是 <strong>替代用途任务</strong> Alternative Uses Task (14, 15)，在该任务中，参与者生成常见物体的用途，例如回形针或鞋子。使用常用的评分方法 (16)，评分者然后根据三个组成部分来判断回答：</p>
<ul>
<li>灵活性，产生的不同用途类别的数量；</li>
<li>独创性，每次使用相对于样本的其余部分的稀有程度，这对创造力特别重要（17、18）；和</li>
<li>流畅度，一共产生了多少次使用。</li>
</ul>
<br>
<h3 id="32-离散联系任务">3.2 离散联系任务</h3>
<p>本研究作者开发了 <strong>离散联系任务</strong> (Divergent Association Task， DAT) 的网站， <strong>填写你想到的10个不相关词语， 创造力越丰富的人，填写的词语语义距离往往会更远</strong>。</p>
<p><a href="https://www.datcreativity.com/">https://www.datcreativity.com/</a></p>
<p><img loading="lazy" src="img/1_pnas_divergent_association_task_mainpage.png" alt=""  />
</p>
<h3 id="被试填写10个单词的规则">被试填写10个单词的规则</h3>
<ol>
<li>只能填写英文单词</li>
<li>只能是名词(如事情、物体、概念)</li>
<li>不能填 专有名词（例如，特定的人或地点）</li>
<li>不能填写 专业词（比如技术词）</li>
<li>自己思考这些词，不要只看周围环境的物体。</li>
</ol>
<h3 id="dat算法实现">DAT算法实现</h3>
<ol>
<li>使用Glove预训练模型</li>
<li>选前7个词(一共10个词)， 存在 21个词对（组合）</li>
<li>对21词对， 分别计算词向量的余弦距离，分别乘以100。最终求均值得到DAT得分。</li>
</ol>
<blockquote>
<p>下图是大邓第二次填写得到的DAT得分，第一次只超过了6%的人，这方法第一次准，再测就知道如何提高DAT得分。</p>
</blockquote>
<p><img loading="lazy" src="img/2_pnas_divergent_association_task_result.png" alt=""  />
</p>
<p>DAT得分范围0-200， 得分为0可能是7个有效词之间语义相同，而得分200可能是有效词之间彼此语义完全不相同。实践中，得分大多处于65~90之间，且很少超过100。</p>
<p><img loading="lazy" src="img/pnas_dat_score_low_median_high.jpg" alt=""  />
</p>
<blockquote>
<p>词嵌入技术可以把每个词转化为等长的向量，而不同词语共处于相同的语义空间中。常见的词嵌入技术有word2vec、Glove、flastText等，因为最近有学者在 <strong>替代用途任务</strong>(Alternative Uses Task）中用过Glove算法，本文采用Glove算法。本研究使用的Glove预训练模型来自Common Crawl Corpus项目，该项目拥有数十亿网页文本数据。</p>
<p>为了提供冗余， 只采用 被试者 填写的前7个词作为有效单词(DAT的被试需要填写10个词)。DAT得分是这些词之间的语义距离的平均值，具体计算方法， 7个词两两相关的组合有 42种组合， 选择其中最有可能的 21 个语义组合。</p>
</blockquote>
<br>
<h2 id="四实验">四、实验</h2>
<p>这种发散思维的操作化是基于创造力的联想和执行控制理论。 更高的分数将显示出更大的能力来利用更远程的关联 (3-5) 或抑制过度相关的关联 (2, 7)。</p>
<p>在研究 1 中，我们通过将 DAT 与其他两种创造力测量方法进行比较来检验这一假设：替代用途任务 (15) 和桥接关联差距任务 (36)。
<img loading="lazy" src="img/pnas_dat_aut_algo_valid_num.jpg" alt=""  />
</p>
<p>在研究 2 中，我们测试了这些分数如何随人口统计而变化，以及它们是否与更大数据集中与发散性思维相关的其他测量值相关 (9, 37)。 这些研究评估了语义距离是否可以作为发散思维的可靠指标。
<img loading="lazy" src="img/pnas_dat_gender_age.jpg" alt=""  />
</p>
<br>
<h2 id="五讨论">五、讨论</h2>
<p>研究结果表面， 让被试简单的填写10个不想管单词的任务可以作为 测量发散思维 的可靠衡量标准。在研究中， 将这项任务的表现与已有的两种创造力量表做了比较，具有很高的相关性。</p>
<p>总体而言支持了语义发散性，尽管这种联系背后的确切机制尚不清楚，但在创新力最主要的两个理论，即联想理论或执行理论 的联系网络中衡量网络的范围或效率。</p>
<p><strong>DAT算法表现稳定，方差不随人口统计特征变化出现显著性变化（研究2），可以在跨年龄、跨性别的情况下应用</strong>。</p>
<br>
<h3 id="51-dat的优点">5.1 DAT的优点</h3>
<ul>
<li>操作简单，快捷，客观，节约了大量的人力时间，又能保证客观性。</li>
<li>得分绝对，可比较，可以用于测量不同群体(种族、文化、性别、年龄)的创造力得分。</li>
<li>对被试友好，一般一两分钟即可完成。</li>
</ul>
<h3 id="52-dat的不足">5.2 DAT的不足</h3>
<ul>
<li>创造力有发散性和执行力，发散性负责搜选所有方案集合的规模，而执行力是从方案集中选出最优方案并将其执行。DAT测量的仅仅是发散性思维。</li>
<li>被试可能通过填写稀奇的词语提高DAT得分。</li>
<li>只有短短几分钟，被试可能很难短时间内了解实验规则。</li>
</ul>
<h3 id="53-未来展望">5.3 未来展望</h3>
<p>DAT得分取决于Glove模型、语料库(数据集), 更新词模型或语料库，被试的DAT得分会发生变化。为简单起见，本研究使用免费的预训练模型， 通过一些努力，未来研究者可以对不同时期，不同国家的语料库来训练Glove模型。随着特定单词关联或多或少的联系， 更新的模型将会自动考虑这些变化，这将允许DAT得分跨越文化跨越时代，进行创新力的比较。</p>
<p><br><br></p>
<h2 id="代码">代码</h2>
<p>代码的文档说明请点击 github仓库地址 <a href="https://github.com/jayolson/divergent-association-task">https://github.com/jayolson/divergent-association-task</a> 查看。这里仅粘贴作者源代码，源代码需要配置好才可运行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">dat</span>

<span class="c1">## 从 https://nlp.stanford.edu/projects/glove/ 下载Glove模型</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">dat</span><span class="o">.</span><span class="n">Model</span><span class="p">(</span><span class="s2">&#34;glove.840B.300d.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;words.txt&#34;</span><span class="p">)</span>

<span class="c1"># 验证词语，如输入的是词组，代码会将其转为连线形式的单词</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="s2">&#34;cul de sac&#34;</span><span class="p">))</span> 
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cul-de-sac
</code></pre></div><br>
<p>计算两个词语之间的语义距离</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;thimble&#34;</span><span class="p">))</span> 
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0.1983
0.8787
</code></pre></div><br>
<p>计算词对的DAT得分（语义cosine距离*100）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">([</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span> 
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">([</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;thimble&#34;</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span> 
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">19.83
87.87
</code></pre></div><br>
<p>假设有三个人分别都填写10个词，选其前7个词作为有效词。有效词如下，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">low</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;arm&#34;</span><span class="p">,</span> <span class="s2">&#34;eyes&#34;</span><span class="p">,</span> <span class="s2">&#34;feet&#34;</span><span class="p">,</span> <span class="s2">&#34;hand&#34;</span><span class="p">,</span> <span class="s2">&#34;head&#34;</span><span class="p">,</span> <span class="s2">&#34;leg&#34;</span><span class="p">,</span> <span class="s2">&#34;body&#34;</span><span class="p">]</span>
<span class="n">average</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;bag&#34;</span><span class="p">,</span> <span class="s2">&#34;bee&#34;</span><span class="p">,</span> <span class="s2">&#34;burger&#34;</span><span class="p">,</span> <span class="s2">&#34;feast&#34;</span><span class="p">,</span> <span class="s2">&#34;office&#34;</span><span class="p">,</span> <span class="s2">&#34;shoes&#34;</span><span class="p">,</span> <span class="s2">&#34;tree&#34;</span><span class="p">]</span>
<span class="n">high</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;hippo&#34;</span><span class="p">,</span> <span class="s2">&#34;jumper&#34;</span><span class="p">,</span> <span class="s2">&#34;machinery&#34;</span><span class="p">,</span> <span class="s2">&#34;prickle&#34;</span><span class="p">,</span> <span class="s2">&#34;tickets&#34;</span><span class="p">,</span> <span class="s2">&#34;tomato&#34;</span><span class="p">,</span> <span class="s2">&#34;violin&#34;</span><span class="p">]</span>

<span class="c1"># Compute the DAT score (transformed average cosine distance of first 7 valid words)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">(</span><span class="n">low</span><span class="p">))</span> <span class="c1"># 50</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">(</span><span class="n">average</span><span class="p">))</span> <span class="c1"># 78</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">(</span><span class="n">high</span><span class="p">))</span> <span class="c1"># 95</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">50
78
95
</code></pre></div><p>需要注意pnas作者公开的代码只能用在英文，且无法自己训练Glove模型。如果想基于自有数据集（中文、英文），训练自有Glove模型，需要学习</p>
<ul>
<li>如何训练Glove模型</li>
<li>如何导入训练好的Glove模型</li>
<li>如何计算中英文dat得分</li>
</ul>
<p>相关知识点已更新至我的录播课课程 <a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>魔搭 | 中文AI模型开源社区</title>
      <link>https://textdata.cn/blog/2022-11-09-chinese-modelscope-open-source/</link>
      <pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-09-chinese-modelscope-open-source/</guid>
      <description>ModelScope社区成立于2022 年6月，是一个模型开源社区及创新平台，由阿里巴巴达摩院，联合CCF开源发展委员会，共同作为项目发起方。社区联合国内AI领域合作伙伴与高校机构，致力于通过开放的社区合作，构建深度学习相关的模型开源，并开源相关模型服务创新技术，推动模型应用生态的繁荣发展。</description>
      <content:encoded><![CDATA[<h2 id="关于modelscope">关于ModelScope</h2>
<p>ModelScope社区成立于 2022 年 6 月，是一个模型开源社区及创新平台，由阿里巴巴达摩院，联合CCF开源发展委员会，共同作为项目发起方。</p>
<blockquote>
<p>社区联合国内AI领域合作伙伴与高校机构，致力于通过开放的社区合作，构建深度学习相关的模型开源，并开源相关模型服务创新技术，推动模型应用生态的繁荣发展。</p>
</blockquote>
<p>期待ModelScope会有不一样的表现。</p>
<p>与ModelScope类似的网站有</p>
<ul>
<li>国际 huggingface是较早将AI模型开源的网站，用户群体庞大，社区内有丰富的数据集、模型，文档详实。</li>
<li>国内 百度飞桨是国内AI模型开源较好的网站，用户群体较大，更新活跃，但是文档质量。。。</li>
</ul>
<p>目前ModelScope刚刚上线不久，模型和数据集都不怎么多</p>
<p><img loading="lazy" src="img/model_scope_homepage.png" alt=""  />
</p>
<br>
<h2 id="heading"></h2>
<h1 id="名词解释"><strong>名词解释</strong></h1>
<p>ModelScope平台是以模型为中心的模型开源社区，与模型的使用相关，您需要先了解如下概念。</p>
<table>
<thead>
<tr>
<th><strong>基础概念</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>任务</td>
<td>任务（Task）指某一领域具体的应用，以用于完成特定场景的任务。例如图像分类、文本生成、语音识别等，您可根据任务的输入输出找到适合您的应用场景的任务类型，通过任务的筛选来查找您所需的模型。</td>
</tr>
<tr>
<td>模型</td>
<td>模型（Model）是指一个具体的模型实例，包括模型网络结构和相应参数。ModelScope平台提供丰富的模型信息供用户体验与使用。</td>
</tr>
<tr>
<td>模型库</td>
<td>模型库（Modelhub）是指对模型进行存储、版本管理和相关操作的模型服务，用户上传和共享的模型将存储至ModelScope的模型库中，同时用户也可在Model hub中创建属于自己的模型存储库，并沿用平台提供的模型库管理功能进行模型管理。</td>
</tr>
<tr>
<td>数据集</td>
<td>数据集（Dataset）是方便共享及访问的数据集合，可用于算法训练、测试、验证，通常以表格形式出现。按照模态可划分为文本、图像、音频、视频、多模态等。</td>
</tr>
<tr>
<td>数据集库</td>
<td>数据集库（Datasethub）用于集中管理数据，支持模型进行训练、预测等，使各类型数据具备易访问、易管理、易共享的特点。</td>
</tr>
<tr>
<td>ModelScope Library</td>
<td>ModelScope Library是ModelScope平台自研的一套Python Library框架，通过调用特定的方法，用户可以只写短短的几行代码，就可以完成模型的推理、训练和评估等任务，也可以在此基础上快速进行二次开发，实现自己的创新想法。</td>
</tr>
</tbody>
</table>
<br>
<h2 id="一模型探索">一、模型探索</h2>
<p>首先访问平台网址https://www.modelscope.cn/models， 您将看见平台上已有的所有公开模型，根据任务筛选或者关键词搜索可查找您感兴趣的模型。</p>
<p><img loading="lazy" src="img/1-model_explore.png" alt=""  />
</p>
<br>
<h2 id="二环境准备">二、环境准备</h2>
<h3 id="21-本地开发环境">2.1 本地开发环境</h3>
<p>如果您需要在本地运行模型，需要进行相应的环境安装准备，包括：</p>
<ul>
<li><strong>安装python环境</strong>。支持python3，不支持python2，建议3.7版本及以上。我们推荐您使用Anaconda进行安装。</li>
<li><strong>安装深度学习框架</strong>。ModelScope Library目前支持Tensorflow，Pytorch两大深度学习框架进行模型训练、推理。您可根据模型所需的框架选择适合的框架进行安装。</li>
<li><strong>安装ModelScope Library</strong>。我们提供两种安装方式，您可选择适合的方式进行安装。
<ul>
<li>pip安装。ModelScope提供了根据不同领域的安装包，您可根据对应的模型选择所需的安装包。</li>
<li>使用源码安装。</li>
<li>更完整的安装信息参考：环境安装指南。</li>
</ul>
</li>
</ul>
<h3 id="22-在线notebook">2.2 在线Notebook</h3>
<p>若您觉得本地安装较为复杂， ModelScope平台也提供在线的运行环境，您可直接在Notebook中运行，Notebook中提供官方镜像无需自主进行环境安装，更加方便快捷，推荐大家使用！</p>
<p>注意：该功能需要您登录后使用，新用户注册ModelScope账号并完成阿里云账号绑定后即可获得免费算力资源，详情请参阅免费额度说明 。</p>
<p><img loading="lazy" src="img/model_scode_free_online_notebook.png" alt=""  />
</p>
<p><img loading="lazy" src="img/model_scode_free_online_notebook-2.png" alt=""  />
</p>
<br>
<h2 id="三2分钟跑通模型推理">三、2分钟跑通模型推理</h2>
<p>若您准备好本地环境或者已经打开一个Notebook的预装环境实例，则根据下述代码可对该模型进行推理。 使用modelscope pipeline接口只需要两步，同样以上述中文分词模型（damo/nlp_structbert_word-segmentation_chinese-base）为例简单说明：</p>
<p>首先根据task实例化一个pipeline对象</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">modelscope.pipelines</span> <span class="kn">import</span> <span class="n">pipeline</span>
<span class="n">word_segmentation</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;word-segmentation&#39;</span><span class="p">,</span><span class="n">model</span><span class="o">=</span><span class="s1">&#39;damo/nlp_structbert_word-segmentation_chinese-base&#39;</span><span class="p">)</span>
</code></pre></div><p>输入数据，拿到结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">input_str</span> <span class="o">=</span> <span class="s1">&#39;今天天气不错，适合出去游玩&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">word_segmentation</span><span class="p">(</span><span class="n">input_str</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;output&#39;: &#39;今天 天气 不错 ， 适合 出去 游玩&#39;}
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>gdown库 |  从googleDriver下载大体积文件</title>
      <link>https://textdata.cn/blog/2022-10-31-gdown-googledriver/</link>
      <pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-31-gdown-googledriver/</guid>
      <description>如何使用python下载googledriver内的大尺寸文件</description>
      <content:encoded><![CDATA[<p>熟悉IT的同学知道，下载工具有curl和wget。但是这类工具很难成功下载大体积的文件，今天分享的gdown可以帮我们解决这个问题。不过使用该工具的其那题是， 电脑可以科学地上网。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install gdown
</code></pre></div><br>
<h2 id="使用">使用</h2>
<p>gdown安装后有两种使用方法</p>
<ul>
<li>命令行模式</li>
<li>代码模式</li>
</ul>
<br>
<h3 id="命令行模式">命令行模式</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">$ gdown --help
usage: gdown [-h] [-V] [-O OUTPUT] [-q] [--fuzzy] [--id] [--proxy PROXY]
             [--speed SPEED] [--no-cookies] [--no-check-certificate]
             [--continue] [--folder] [--remaining-ok]
             url_or_id
...

$ # 大文件 (~500MB)
$ gdown https://drive.google.com/uc?id=1l_5RK28JRL19wpT22B-DY9We3TVXnnQQ
$ md5sum fcn8s_from_caffe.npz
256c2a8235c1c65e62e48d3284fbd384
</code></pre></div><br>
<h3 id="代码模式">代码模式</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">gdown</span>

<span class="c1"># 下载 网盘文件</span>
<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://drive.google.com/uc?id=1l_5RK28JRL19wpT22B-DY9We3TVXnnQQ&#34;</span>
<span class="n">output</span> <span class="o">=</span> <span class="s2">&#34;fcn8s_from_caffe.npz&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="c1"># 使用文件ID作为文件名</span>
<span class="nb">id</span> <span class="o">=</span> <span class="s2">&#34;0B9P1L--7Wd2vNm9zMTJWOGxobkU&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="n">output</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="c1"># same as the above, and you can copy-and-paste a URL from Google Drive with fuzzy=True</span>
<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://drive.google.com/file/d/0B9P1L--7Wd2vNm9zMTJWOGxobkU/view?usp=sharing&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="n">output</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">fuzzy</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>


<span class="c1"># 下载 网盘文件夹</span>
<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://drive.google.com/drive/folders/15uNXeRBIhVvZJIhL4yTw4IsStMhUaaxl&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download_folder</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">use_cookies</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="c1"># 使用文件夹ID作为文件夹名</span>
<span class="nb">id</span> <span class="o">=</span> <span class="s2">&#34;15uNXeRBIhVvZJIhL4yTw4IsStMhUaaxl&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download_folder</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">use_cookies</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 使用word2vec词向量模型</title>
      <link>https://textdata.cn/blog/2022-10-12-r-word2vec/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-12-r-word2vec/</guid>
      <description>R语言训练和使用词向量word2vec模型</description>
      <content:encoded><![CDATA[


<p>Python的gensim库可以训练和使用word2vec模型，R语言中也有与之对应的<code>word2vec包</code>。word2vec是词嵌入技术中最常用的一种技术，如果对词嵌入不太了解，可以阅读前文</p>
<ul>
<li><a href="https://textdata.cn/blog/wordembeddingsinsocialscience/">转载 | 大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用</a></li>
<li><a href="https://textdata.cn/blog/from_sysbol_to_embeddings_in_computational_social_science/">转载 | 从符号到嵌入：计算社会科学的两种文本表示</a></li>
</ul>
<p>本文需要的R包</p>
<pre><code>install.packages(c(&quot;word2vec&quot;, &quot;jiebaR&quot;, &quot;tidyverse&quot;, &quot;readtext&quot;))</code></pre>
<p><br></p>
<div id="word2vec包常用函数" class="section level2">
<h2>word2vec包常用函数</h2>
<ul>
<li>word2vec 使用文本数据训练word2vec模型</li>
<li>as.matrix 获取词向量</li>
<li>doc2vec 获取文档向量</li>
<li>predict 获取</li>
<li>write.word2vec 保存word2vec模型至文件</li>
<li>read.word2vec 读取word2vec模型文件</li>
</ul>
<p><br></p>
</div>
<div id="准备数据" class="section level2">
<h2>准备数据</h2>
<p>原始数据是从网站下载的 <code>三体.txt</code>, 未分词处理，现在需要</p>
<ol style="list-style-type: decimal">
<li>读中文取txt数据</li>
<li>保留标点符号，进行分词处理</li>
<li>分词结果重新整理为类似英文(空格间隔词语的形式)字符串</li>
<li>结果存入新的txt</li>
</ol>
<pre class="r"><code>library(jiebaR)
library(tidyverse)
library(word2vec)


#导入数据
tri_body &lt;- readtext::readtext(&#39;data/三体.txt&#39;)$text 

#分词（保留标点符号）
tokenizer &lt;- worker(symbol=T)
tri_words &lt;- segment(tri_body, tokenizer)

# 整理为英文格式（词语之间加空格）
segmented_text &lt;- stringr::str_c(tri_words, collapse = &quot; &quot;) %&gt;% c()

#写入txt
readr::write_file(segmented_text, file=&#39;data/santi.txt&#39;)</code></pre>
<p><br></p>
</div>
<div id="训练word2vec模型" class="section level2">
<h2>训练word2vec模型</h2>
<pre><code>word2vec(
  x,
  type = c(&quot;cbow&quot;, &quot;skip-gram&quot;),
  dim = 50,
  window = ifelse(type == &quot;cbow&quot;, 5L, 10L),
  iter = 5L,
  lr = 0.05,
  min_count = 5L,
  split = c(&quot; \n,.-!?:;/\&quot;#$%&amp;&#39;()*+&lt;=&gt;@[]\\^_`{|}~\t\v\f\r&quot;, &quot;.\n?!&quot;),
  stopwords = character(),
  threads = 1L,
  ...
)</code></pre>
<ul>
<li>x 英文文本数据txt文件(中文数据txt文件是分词后的txt文件，空格间隔词语)</li>
<li>type 训练方式，默认CBOW</li>
<li>dim 词向量维度，默认50维</li>
<li>window 词向量窗口，默认5</li>
<li>iter 训练迭代次数，默认5</li>
<li>split 分词、分句对应的分隔符。</li>
<li>lr 学习率，默认0.05</li>
<li>min_count 词语在语料中至少要出现5次(低于5次的词语，训练好的结果中没有该词语）</li>
<li>stopwords 停用词表，默认空字符集</li>
<li>threads 并行加速，cpu核数，默认1。为了加速训练过程，可以使用 <code>parallel::detectCores()</code> 获得本电脑的核数</li>
</ul>
<pre class="r"><code>#训练10维的词向量模型
model &lt;- word2vec(x = &#39;data/santi.txt&#39;, 
                  dim = 10,  
                  iter = 20, 
                  split = c(&quot; &quot;,  &quot;。？！；&quot;),
                  threads = parallel::detectCores()) #并行，使用cpu多核加速

emb &lt;- as.matrix(model)

#显示6个词
head(emb)</code></pre>
<pre><code>##             [,1]       [,2]        [,3]        [,4]      [,5]        [,6]
## 煮   -1.02566934 -0.9271542 -0.42417252 -0.54280633 1.8847700  0.41640753
## 报   -0.83992052  1.9440031  0.09093992  0.83522910 1.7909089  0.72149992
## 悬空 -0.06369513 -1.3519955 -2.13137460 -0.06198586 0.6096401  1.32933748
## 略    1.74687469 -0.4278547 -0.33822438  1.08505321 2.0168977 -0.07693915
## 伏   -0.68947995 -1.4147453 -1.95522511 -0.39963767 0.5269030  0.30352208
## 石柱 -0.40561640 -1.3643234  0.30329546 -0.94012892 2.1579018  0.79654717
##            [,7]       [,8]       [,9]      [,10]
## 煮   -1.1708908 -0.7624418 -0.6275516  1.2417521
## 报    0.5235919  0.8448864 -0.2960095 -0.0773837
## 悬空  0.1527163 -0.1337370 -0.1646384  1.1892601
## 略   -0.3246748 -0.9813624  0.5045205  0.2771466
## 伏    0.3166684 -1.4238008 -1.0167172 -0.0976937
## 石柱  0.2237919  0.6933151  0.7412233 -0.7918702</code></pre>
<p><br></p>
</div>
<div id="查看某词的vector" class="section level2">
<h2>查看某词的vector</h2>
<p>查看词语 <code>汪淼</code> 的vector</p>
<pre class="r"><code>emb[&quot;汪淼&quot;,]</code></pre>
<pre><code>##  [1] -0.77559733 -0.90021265  0.66555792 -0.10277803  1.89924443 -0.88817298
##  [7] -1.32665634 -0.75938725 -0.09628224  1.18008399</code></pre>
<p>查看词语 <code>地球</code> 的vector</p>
<pre class="r"><code>emb[&quot;地球&quot;,]</code></pre>
<pre><code>##  [1]  0.29645494 -0.61688840  0.91209215 -0.64530188  0.62816381 -0.72807491
##  [7]  0.50655973  2.38137436  1.19238114 -0.09610342</code></pre>
<p><br></p>
</div>
<div id="predict" class="section level2">
<h2>predict()</h2>
<p>找到语料中，词语 <code>罗辑</code> 最相似的 20个词</p>
<pre class="r"><code>predict(model, &#39;罗辑&#39;, type=&#39;nearest&#39;, top_n = 20)</code></pre>
<pre><code>## $罗辑
##    term1    term2 similarity rank
## 1   罗辑     胡文  0.9744400    1
## 2   罗辑   申玉菲  0.9678891    2
## 3   罗辑   瓦季姆  0.9550550    3
## 4   罗辑 狄奥伦娜  0.9518393    4
## 5   罗辑     蓝西  0.9472395    5
## 6   罗辑     护士  0.9471439    6
## 7   罗辑   法扎兰  0.9458703    7
## 8   罗辑   白艾思  0.9451101    8
## 9   罗辑     坎特  0.9396626    9
## 10  罗辑     白蓉  0.9387447   10
## 11  罗辑   参谋长  0.9377206   11
## 12  罗辑   弗雷斯  0.9369408   12
## 13  罗辑   第一眼  0.9357565   13
## 14  罗辑     父亲  0.9350463   14
## 15  罗辑   多少次  0.9314436   15
## 16  罗辑     门去  0.9291503   16
## 17  罗辑     维德  0.9267251   17
## 18  罗辑     褐蚁  0.9203902   18
## 19  罗辑       刚  0.9200501   19
## 20  罗辑     吴岳  0.9191605   20</code></pre>
<p>查看均值向量（多个词向量中心的）的10个近义词</p>
<pre class="r"><code>vectors &lt;- emb[c(&quot;汪淼&quot;, &quot;罗辑&quot;, &quot;叶文洁&quot;), ]
centroid_vector &lt;- colMeans(vectors)

predict(model, centroid_vector, type = &quot;nearest&quot;, top_n = 10)</code></pre>
<pre><code>##        term similarity rank
## 1      罗辑  0.9185568    1
## 2  狄奥伦娜  0.9104245    2
## 3      文洁  0.9088279    3
## 4      汪淼  0.9054156    4
## 5    白艾思  0.9046930    5
## 6      张翔  0.9026827    6
## 7      尴尬  0.8952187    7
## 8      庄颜  0.8952166    8
## 9      皇帝  0.8949283    9
## 10     父亲  0.8915347   10</code></pre>
<p><br></p>
</div>
<div id="doc2vec" class="section level2">
<h2>doc2vec()</h2>
<ul>
<li>doc2vec(object, newdata, split = ” “)
<ul>
<li>object word2vec模型对象</li>
<li>newdata 文档列表(用空格间隔的字符串列表)</li>
<li>split 默认分隔符是空格</li>
</ul></li>
</ul>
<p>将文档转为向量</p>
<pre class="r"><code>docs &lt;- c(&quot;哦 ， 对不起 ， 汪 教授 。 这是 我们 史强 队长 。&quot;, 
          &quot; 丁仪 博士 ， 您 能否 把 杨冬 的 遗书 给 汪 教授 看 一下 ？ &quot;)

doc2vec(object=model, newdata = docs, split=&#39; &#39;)</code></pre>
<pre><code>##            [,1]       [,2]       [,3]     [,4]      [,5]       [,6]       [,7]
## [1,] -1.1769752 -0.1065619  0.1983950 1.734068 0.5478012 -0.8320528 -0.2387014
## [2,] -0.4827189  0.0664595 -0.2119484 1.895074 0.6729840 -0.3008853 -0.6857539
##            [,8]      [,9]      [,10]
## [1,] -0.5519856 -2.007002  0.4182127
## [2,] -0.5976922 -2.130454 -0.4653725</code></pre>
<p><br></p>
</div>
<div id="保存word2vec模型" class="section level2">
<h2>保存word2vec模型</h2>
<p>保存模型，一般有两个目的</p>
<ul>
<li>为了分享word2vec模型</li>
<li>避免反复训练模型，节约数据分析时间</li>
</ul>
<pre class="r"><code>word2vec::write.word2vec(x = model, 
                         #新建output文件夹，将模型存入output文件夹内
                         file = &quot;output/santi_word2vec.bin&quot;)</code></pre>
<pre><code>## [1] TRUE</code></pre>
<p><br></p>
</div>
<div id="导入预训练模型" class="section level2">
<h2>导入预训练模型</h2>
<p>导入 <code>output/santi_word2vec.bin</code> 的预训练word2vec模型</p>
<pre class="r"><code>pre_trained_model &lt;- word2vec::read.word2vec(file = &quot;output/santi_word2vec.bin&quot;)
pre_trained_emb &lt;- as.matrix(pre_trained_model)
head(pre_trained_emb)</code></pre>
<pre><code>##              [,1]       [,2]       [,3]       [,4]       [,5]        [,6]
## 回荡   -1.9563367 -0.3099073 -1.2969902 -0.5719763  1.1507142 -0.05515177
## 听证会  0.2756990  1.3702289 -1.3303705 -0.1827691  0.6622804 -1.92008448
## 纲领    0.4495552  1.9311246 -0.5812275 -0.1470096 -0.2678985 -0.01694358
## 很亮    0.3621844 -1.0048453  0.7036168 -2.0917876  0.6459805  1.18436253
## 秒      1.9033701  1.6510324 -0.2616904  0.3671210  1.0618066  0.06588747
## 杰森   -1.2904713 -1.2501229  0.3380587  0.8590797  1.6798494 -0.58775252
##              [,7]       [,8]       [,9]      [,10]
## 回荡    1.1082711 -0.2064489 -0.9264346 -0.7816723
## 听证会 -1.0952694  0.6120903 -0.1326561  0.7252344
## 纲领   -0.6097277  2.1051276 -0.2405726 -0.8808851
## 很亮    0.1964065 -1.3926132 -0.4042619 -0.1645472
## 秒     -0.8347995  0.2591044  0.3594093  1.1929117
## 杰森    0.4941484 -1.1393189 -0.4687541  0.9951217</code></pre>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Maigret库 | 查询某用户名在各平台网站的使用情况</title>
      <link>https://textdata.cn/blog/2022-10-08-find-sns-account-information-with-maigret/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-08-find-sns-account-information-with-maigret/</guid>
      <description>Maigret 能检查各网站(应用) 某 **用户名** 是否注册，并从网页收集所有可用信息,  运行过程不需要 API 密钥。目前支持超过 2500 个站点检索（完整列表），默认针对 500 个热门站点按受欢迎程度降序启动搜索。</description>
      <content:encoded><![CDATA[<p>Maigret 能检查各网站(应用) 某 <strong>用户名</strong> 是否注册，并从网页收集所有可用信息,  运行过程不需要 API 密钥。目前支持超过 2500 个站点检索（完整列表），默认针对 500 个热门站点按受欢迎程度降序启动搜索。</p>
<br>
<h2 id="主要功能">主要功能</h2>
<ul>
<li>个人资料页面解析</li>
<li>个人信息提取</li>
<li>其他个人资料链接等。</li>
<li>通过新用户名和找到的其他 id 进行递归搜索</li>
<li>按标签搜索（网站类别、国家/地区）</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<p>命令行中安装maigret包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install maigret
</code></pre></div><br>
<h2 id="使用">使用</h2>
<p>我自己有个账号名是hidadeng，就用hidadeng试试。</p>
<p>为了解用户名hidadeng使用情况，报告结果存储于html和pdf。 在命令行中执行，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">maigret hidadeng --html --pdf
</code></pre></div><p>命令行运行过程</p>
<p><img loading="lazy" src="img/hidadeng-cmd.png" alt=""  />
</p>
<br>
<h2 id="报告">报告</h2>
<p>maigret查询用户名hidadeng的使用情况、兴趣等结果可以绘制成报告。</p>
<p><a href="report_hidadeng_plain.html">点击查看hidadeng报告</a></p>
<p><img loading="lazy" src="img/hidadeng-report-1.png" alt=""  />
</p>
<p><img loading="lazy" src="img/hidadeng-report-2.png" alt=""  />
</p>
<p>效果挺准的，对hidadeng这个用户兴趣(coding、shopping)拿捏的也挺不错。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 使用shiny的reactive表达式写应用程序</title>
      <link>https://textdata.cn/blog/2022-10-07-r-shiny-reactive/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-07-r-shiny-reactive/</guid>
      <description>使用shiny的reactive表达式写应用程序</description>
      <content:encoded><![CDATA[<blockquote>
<p>作者: 猫哥</p>
<p>波恩大学经济学专业， 计量经济学方向</p>
</blockquote>
<p>在之前的推文中，我们介绍了如何在R语言中，用Shiny包编写应用程序App。在这篇推文中，我们将要介绍Shiny包中一类独特且重要的表达式：reactive expressions。</p>
<p>在设计App时，我们希望App能够有较快的响应速度。但是，如果App的server函数中包含很多耗时较长的运算，那么应该怎么办呢？此时，就需要用到Reactive表达式。它能够控制程序中哪些部分需要更新运算，而哪些部分不需要更新，从而节省运算时间。</p>
<br>
<h2 id="案例stockvis">案例：stockVis</h2>
<p>此处，我们将通过一个案例来讲解reactive表达式。下图是stockVis的App界面，这个App能够帮助用户描绘相应股票的价格变动。感兴趣的读者可以根据<a href="https://shiny.rstudio.com/tutorial/written-tutorial/lesson6/">此处</a>的提示下载该App。</p>
<p><img loading="lazy" src="img/%e5%9b%be1.png" alt=""  />
</p>
<p>根据上图可以看出，用户需要首先选择股票（Symbol），然后选择观察时期(Data range)，再选择绘制原股票价格还是对数化后的股票价格，最后再选择是否股价中的通胀进行矫正。</p>
<p>在对这些选项进行了选择之后，stockVis首先用<code>getSymbols</code>函数从诸如<a href="https://consent.yahoo.com/v2/collectConsent?sessionId=3_cc-session_b4231433-d1e7-4b31-8341-a7d413ea7922">Yahoo finance</a>和<a href="https://fred.stlouisfed.org">Federal Reserve Bank of St. Louis</a>这样的网站中下载金融数据到R，然后再用<code>chartSeries</code>将股价描绘出来。</p>
<p>server函数中，用来生成图形的程序如下。在分析了该程序之后，我们会发现一个问题。比如，当我们重新选中“Plot y axis on the log scale”，那么<code>input$log</code>的值就会变化，那么就会导致整个<code>renderPlot</code>重新进行运算。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">output</span><span class="o">$</span><span class="n">plot</span> <span class="o">&lt;-</span> <span class="nf">renderPlot</span><span class="p">({</span>
  <span class="n">data</span> <span class="o">&lt;-</span> <span class="nf">getSymbols</span><span class="p">(</span><span class="n">input</span><span class="o">$</span><span class="n">symb</span><span class="p">,</span> <span class="n">src</span> <span class="o">=</span> <span class="s">&#34;yahoo&#34;</span><span class="p">,</span>
                     <span class="n">from</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">dates[1]</span><span class="p">,</span>
                     <span class="n">to</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">dates[2]</span><span class="p">,</span>
                     <span class="n">auto.assign</span> <span class="o">=</span> <span class="kc">FALSE</span><span class="p">)</span>

  <span class="nf">chartSeries</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">theme</span> <span class="o">=</span> <span class="nf">chartTheme</span><span class="p">(</span><span class="s">&#34;white&#34;</span><span class="p">),</span>
              <span class="n">type</span> <span class="o">=</span> <span class="s">&#34;line&#34;</span><span class="p">,</span> <span class="n">log.scale</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">log</span><span class="p">,</span> <span class="n">TA</span> <span class="o">=</span> <span class="kc">NULL</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div><p>而<code>renderPlot</code>每次重新运算时，首先会重新用<code>getSymbols</code>抓去数据，然后用<code>chartSeries</code>重新画图。然而，用<code>getSymbols</code>从Yahoo等网站抓取数据所花费的时间并不是可以忽略不计的。另外，如果抓取的过于频繁，我们的IP地址会被屏蔽，这是网站将我们错判为机器人，也是网站应对爬虫的常用做法。最关键的是，当我们只是重新选择“Plot y axis on the log scale”，我们并不希望重新抓取数据，而是希望在原有数据的基础上对数化即可。</p>
<br>
<h2 id="reactive表达式">Reactive表达式</h2>
<p>在遇到上述问题时，我们就需要用到reactive表达式。reactive表达式以ui函数里各种input变量作为输入。如下，reactive表达式的输入则是<code>input$symb</code>和<code>input$dates</code>。当<code>input$symb</code>和<code>input$dates</code>的值变化时，此处reactive表达式的输出结果才会发生变化，而不受<code>input$log</code>的影响。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">dataInput</span> <span class="o">&lt;-</span> <span class="nf">reactive</span><span class="p">({</span>
  <span class="nf">getSymbols</span><span class="p">(</span><span class="n">input</span><span class="o">$</span><span class="n">symb</span><span class="p">,</span> <span class="n">src</span> <span class="o">=</span> <span class="s">&#34;yahoo&#34;</span><span class="p">,</span>
    <span class="n">from</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">dates[1]</span><span class="p">,</span>
    <span class="n">to</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">dates[2]</span><span class="p">,</span>
    <span class="n">auto.assign</span> <span class="o">=</span> <span class="kc">FALSE</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div><p>所以，我们现在用上面的reactive表达式更新原先的程序，得到如下程序。<code>dataInput()</code>命令则是运行如上的reactive表达式。此时，如果我们只重新选择&quot;Plot y axis on the log scale&quot;，那么reactive表达式里的数据抓取过程并不会更新，而只有<code>renderPlot</code>里的<code>log.scale</code>参数会更新，这将节省程序运行时间，而且减少数据抓取次数，防止IP地址被封。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">output</span><span class="o">$</span><span class="n">plot</span> <span class="o">&lt;-</span> <span class="nf">renderPlot</span><span class="p">({</span>    
  <span class="nf">chartSeries</span><span class="p">(</span><span class="nf">dataInput</span><span class="p">(),</span> <span class="n">theme</span> <span class="o">=</span> <span class="nf">chartTheme</span><span class="p">(</span><span class="s">&#34;white&#34;</span><span class="p">),</span>
    <span class="n">type</span> <span class="o">=</span> <span class="s">&#34;line&#34;</span><span class="p">,</span> <span class="n">log.scale</span> <span class="o">=</span> <span class="n">input</span><span class="o">$</span><span class="n">log</span><span class="p">,</span> <span class="n">TA</span> <span class="o">=</span> <span class="kc">NULL</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div><p>reactive表达式不止<code>reactive()</code>，还包括<code>observe()</code>, <code>observeEvent()</code>和<code>eventReactive()</code>等等，详见<a href="https://shiny.rstudio.com/reference/shiny/1.6.0/">此处</a>。另外，reactive表达式只能包装在特定的、允许reactive表达式的函数中，如此处的<code>renderPlot</code>，而不能被包装在<code>plot</code>函数中。<code>render*</code>类函数都允许reactive表达式。</p>
<br>
<h2 id="总结">总结</h2>
<p>Reactive表达式的功能可被简单地总结为以下步骤：</p>
<ul>
<li>当你第一次运行程序时，reactive表达式会缓存运行结果。</li>
<li>当你下一次运行程序时，reactive表达式会自动检测输入值是否是最新的。在上例中，也就是说输入的<code>input$symb</code>和<code>input$dates</code>是否有变化。</li>
<li>如果有变化，则reactive会根据新输入值更新结果。</li>
<li>如果没变化，则reactive会直接使用缓存中的值。</li>
</ul>
<br>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://shiny.rstudio.com/tutorial/written-tutorial/lesson6/">https://shiny.rstudio.com/tutorial/written-tutorial/lesson6/</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 使用stargazer包输出格式化回归结果</title>
      <link>https://textdata.cn/blog/2022-10-07-r-stargazer/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-07-r-stargazer/</guid>
      <description>使用stargazer包输出格式化回归结果</description>
      <content:encoded><![CDATA[<blockquote>
<p>作者: 猫哥</p>
<p>波恩大学经济学专业， 计量经济学方向</p>
</blockquote>
<p>在实证分析过程中，各种回归模型十分常用，特别是参数模型。而且我们常常需要运行多种参数回归模型，并对参数估计值、显著性等统计性质进行比较。此时，如果用copy paste或者手动输入，那么则耗时耗力，且有一定错误率。如果你也有相同烦恼，那么stargazer包可以完美地解决你的烦恼。他可以快速、准确、清晰地输出回归结果。</p>
<br>
<h2 id="安装">安装</h2>
<p>与其它R包的安装方式无异，我们可以通过<code>install.packages()</code>和<code>library()</code>函数来下载和导入stargazer包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">install.packages</span><span class="p">(</span><span class="s">&#34;stargazer&#34;</span><span class="p">)</span>
<span class="nf">library</span><span class="p">(</span><span class="n">stargazer</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="描述性统计值">描述性统计值</h2>
<p>在估计回归模型之前，我们常常也需要对数据的描述性统计性质进行分析，以便了解变量的分布和变量间的联合分布，这对后续的回归模型设定具有重要意义。stargazer包能使我们方便地分析描述性统计值。我们此处以R内自带数据集attitude为例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">stargazer</span><span class="p">(</span><span class="n">attitude</span><span class="p">,</span> <span class="n">type</span> <span class="o">=</span> <span class="s">&#34;text&#34;</span><span class="p">)</span>
</code></pre></div><p>运行上述程序后，我们就会得到下表。</p>
<p><img loading="lazy" src="img/%e5%9b%be1.png" alt=""  />
</p>
<p>如果需要输出latex或者html格式，那么指定<code>type=&quot;latex&quot;</code>或者<code>type=&quot;html&quot;</code>即可。当然，我们还有其他一些重要的参数。</p>
<ul>
<li><code>title</code>: 定义表格的标题</li>
<li><code>out</code>: 	定义导出文件的路径，文件类型可以是<code>.tex</code>, <code>.txt</code>, <code>.htm</code>或者<code>.html</code>。</li>
<li><code>flip</code>: 默认为FALSE。当定义为TRUE时，则表示转置，即各变量按列排列。</li>
<li><code>digits</code>: 定义输出数值的小数位数。</li>
</ul>
<br>
<h2 id="参数回归模型结果">参数回归模型结果</h2>
<p>此处，我们依然使用attitude数据包，以<code>rating</code>作为因变量，其他各变量作为协变量，用两个线性模型和一个Probit模型进行参数估计。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="c1">##  2 OLS models</span>
<span class="n">linear.1</span> <span class="o">&lt;-</span> <span class="nf">lm</span><span class="p">(</span><span class="n">rating</span> <span class="o">~</span> <span class="n">complaints</span> <span class="o">+</span> <span class="n">privileges</span> <span class="o">+</span> <span class="n">learning</span> 
                        <span class="o">+</span> <span class="n">raises</span> <span class="o">+</span> <span class="n">critical</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">attitude</span><span class="p">)</span>

<span class="n">linear.2</span> <span class="o">&lt;-</span> <span class="nf">lm</span><span class="p">(</span><span class="n">rating</span> <span class="o">~</span> <span class="n">complaints</span> <span class="o">+</span> <span class="n">privileges</span> <span class="o">+</span> <span class="n">learning</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">attitude</span><span class="p">)</span>

<span class="c1">## create an indicator dependent variable, and run a probit model</span>
 
<span class="n">attitude</span><span class="o">$</span><span class="n">high.rating</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">attitude</span><span class="o">$</span><span class="n">rating</span> <span class="o">&gt;</span> <span class="m">70</span><span class="p">)</span>
<span class="n">probit.model</span> <span class="o">&lt;-</span> <span class="nf">glm</span><span class="p">(</span><span class="n">high.rating</span> <span class="o">~</span> <span class="n">learning</span> <span class="o">+</span> <span class="n">critical</span> <span class="o">+</span> <span class="n">advance</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">attitude</span><span class="p">,</span>
                    <span class="n">family</span> <span class="o">=</span> <span class="nf">binomial</span><span class="p">(</span><span class="n">link</span> <span class="o">=</span> <span class="s">&#34;probit&#34;</span><span class="p">))</span>
</code></pre></div><p>在得到各模型后，我们可以运行以下程序汇总和输出三个模型的结果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">stargazer</span><span class="p">(</span><span class="n">linear.1</span><span class="p">,</span> <span class="n">linear.2</span><span class="p">,</span> <span class="n">probit.model</span><span class="p">,</span> <span class="n">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#34;Regression Results&#34;</span><span class="p">)</span>
</code></pre></div><p>汇总和输出结果如下表。</p>
<p><img loading="lazy" src="img/%e5%9b%be2.png" alt=""  />
</p>
<p>在输出回归结果时，我们也可以定义一些重要的参数。</p>
<ul>
<li><code>single.row</code>: 默认值为FALSE。当取值为TRUE，表示将参数和t统计值或其它参数统计值放在一行，而不是分上下放置。</li>
<li><code>ci</code>: 默认为FALSE。当取值为TRUE时，表示将在参数估计值后报告置信区间，而不是t统计值。</li>
<li><code>ci.level</code>: 定义置信度水平。</li>
<li><code>omit.stat</code>: 定义不需要报告的统计值。例如，<code>omit.stat=c(&quot;f&quot;.&quot;ser&quot;)</code>，表示不需要报告模型的F统计值和Residual Std. Error，即残差的标准误。</li>
<li><code>keep.stat</code>: 定义需要报告的统计值。默认是报告所有的协变量。例如，<code>keep.stat=&quot;n&quot;</code>，表示只需要报告样本量。</li>
<li><code>keep</code>: 定义需要包含在输出结果中的变量。当模型协变量数目很多，而我们又只关注个别变量的系数时，这个参数则能够起到作用。例如，<code>keep=c(&quot;complaints&quot;,&quot;learning&quot;,&quot;raises&quot;,&quot;critical&quot;)</code>。</li>
<li><code>order</code>: 定义输出结果中变量的顺序。例如，<code>order=c(&quot;learning&quot;, &quot;raises&quot;)</code>。</li>
</ul>
<br>
<h2 id="相关系数表">相关系数表</h2>
<p>stargazer包还能汇总整理相关系数表。以attitude数据集为例，运行以下程序即可获得相关系数表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">correlation.matrix</span> <span class="o">&lt;-</span> <span class="nf">cor</span><span class="p">(</span><span class="n">attitude</span><span class="p">)</span>
<span class="nf">stargazer</span><span class="p">(</span><span class="n">correlation.matrix</span><span class="p">,</span> <span class="n">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/%e5%9b%be3.png" alt=""  />
</p>
<br>
<h2 id="参考文献">参考文献</h2>
<p>Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables. R package version 5.2.2. <a href="https://CRAN.R-project.org/package=stargazer">https://CRAN.R-project.org/package=stargazer</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | renderthis包制作讲解动画、视频</title>
      <link>https://textdata.cn/blog/2022-09-27-r-renderthis/</link>
      <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-27-r-renderthis/</guid>
      <description>description用于SEO优化</description>
      <content:encoded><![CDATA[


]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 让统计更easy的easystats集合包</title>
      <link>https://textdata.cn/blog/2022-09-21-r-easystats-report/</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-21-r-easystats-report/</guid>
      <description>模板统计报告用</description>
      <content:encoded><![CDATA[<p><a href="https://easystats.github.io/easystats/index.html">easystats</a> 是 R 包集合，可提供统一且easy的代码进行 统计分析。</p>
<br>
<h2 id="一与-tidyverse-有何不同">一、与 tidyverse 有何不同？</h2>
<p>tidyverse包集合，是 R语言 中非常流行的软件包集合（ggplot、dplyr、tidyr&hellip;&hellip;），它也使 R 的使用更加容易。那么，您应该选择 tidyverse 还是 easystats？</p>
<p><strong>两个都选！</strong></p>
<p>事实上，这两个生态系统的设计考虑了非常不同的目标。 tidyverse 包主要用于 <code>数据操作和探索</code>。而 easystats 更关注分析的最后阶段：<code>理解和解释您的结果，并在手稿或报告中报告它们</code>。您绝对可以在 tidyverse 工作流程中使用 easystats 功能！</p>
<p>easystats + tidyverse = ❤️</p>
<br>
<h2 id="二easystats生态圈">二、easystats生态圈</h2>
<p>每个 easystats 包都有不同的范围和用途。这意味着您最好的开始方式是探索并选择您认为可能对您有用的那些。但是，由于它们的构建考虑了&quot;更大的图景&quot;，您会意识到使用更多它们会创建一个流畅的工作流程，因为这些包旨在协同工作。理想情况下，这些软件包可以协同工作，涵盖统计分析和数据可视化的所有方面。</p>
<ul>
<li><a href="https://easystats.github.io/report/">report</a>：📜 🎉 生成自动统计报告</li>
<li><a href="https://easystats.github.io/correlation/">correlation</a>：🔗 相关性的多合一包</li>
<li><a href="https://easystats.github.io/modelbased/">modelbased</a>：📈 基于统计模型估计效果、组平均值和组间对比</li>
<li><a href="https://easystats.github.io/bayestestR/">bayestestR</a>：👻 非常适合贝叶斯统计的初学者或专家</li>
<li><a href="https://easystats.github.io/effectsize/">effectize</a>: 🐉 计算、转换、解释和使用效果大小和标准化参数的索引</li>
<li><a href="https://easystats.github.io/see/">see</a> ：🎨 创建漂亮结果可视化的绘图</li>
<li><a href="https://easystats.github.io/parameters/">parameters</a>：📊 获取有关模型包含参数所有信息的表格</li>
<li><a href="https://easystats.github.io/performance/">performance</a>：💪模型的质量和性能指标（R2、ICC、LOO、AIC、BF、&hellip;）</li>
<li><a href="https://easystats.github.io/insight/">insight</a>：🔮 对于开发人员来说，一个包可以帮助您使用不同的模型和包</li>
<li><a href="https://easystats.github.io/datawizard/">datawizard</a>：🧙 清理和转换数据的魔法药水</li>
</ul>
<p>截止2022-09-21， easystats生态中各个包的下载情况</p>
<table>
<thead>
<tr>
<th style="text-align:left">Total</th>
<th style="text-align:left">insight</th>
<th style="text-align:left">bayestestR</th>
<th style="text-align:left">parameters</th>
<th style="text-align:left">performance</th>
<th style="text-align:left">datawizard</th>
<th style="text-align:left">effectsize</th>
<th style="text-align:left">correlation</th>
<th style="text-align:left">see</th>
<th style="text-align:left">modelbased</th>
<th style="text-align:left">report</th>
<th style="text-align:left">easystats</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">10,001,095</td>
<td style="text-align:left">3,085,739</td>
<td style="text-align:left">1,373,379</td>
<td style="text-align:left">1,363,678</td>
<td style="text-align:left">1,285,506</td>
<td style="text-align:left">1,159,097</td>
<td style="text-align:left">1,060,079</td>
<td style="text-align:left">277,541</td>
<td style="text-align:left">251,038</td>
<td style="text-align:left">94,089</td>
<td style="text-align:left">48,876</td>
<td style="text-align:left">2,073</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="easystats-trend.png" alt=""  />
</p>
<br>
<br>
<h2 id="三实验">三、实验</h2>
<h3 id="31-report简介">3.1 report简介</h3>
<p>easystats到底如何好用，今天只实验report包，该包号称 “从 R 到你的手稿”</p>
<p>该<code>report</code>包以两步方式工作。首先，使用该函数创建一个<code>report</code>对象<code>report()</code>。然后，该报表对象可以使用文本方式（默认输出）或以表格形式显示<code>as.data.frame()</code>。<code>summary()</code>此外，您还可以使用报表对象访问更摘要和紧凑的报表版本。</p>
<p><img loading="lazy" src="report-workflow.png" alt=""  />
</p>
<br>
<p>report包的主要目标是弥合 R 的输出与手稿中包含的格式化结果之间的差距。 它根据最佳实践指南（例如 APA 期刊风格）自动生成模型和数据框架的报告，确保结果报告的标准化和质量。安装report</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;easystats&#34;)
</code></pre></div><br>
<h3 id="32-数据">3.2 数据</h3>
<p>生成iris数据集描述性统计信息的英文报告</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">report</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># The data contains 150 observations of the following 5 variables:
# 
#   - Sepal.Length: n = 150, Mean = 5.84, SD = 0.83, Median = 5.80, MAD = 1.04,
# range: [4.30, 7.90], Skewness = 0.31, Kurtosis = -0.55, 0% missing
#   - Sepal.Width: n = 150, Mean = 3.06, SD = 0.44, Median = 3.00, MAD = 0.44,
# range: [2, 4.40], Skewness = 0.32, Kurtosis = 0.23, 0% missing
#   - Petal.Length: n = 150, Mean = 3.76, SD = 1.77, Median = 4.35, MAD = 1.85,
# range: [1, 6.90], Skewness = -0.27, Kurtosis = -1.40, 0% missing
#   - Petal.Width: n = 150, Mean = 1.20, SD = 0.76, Median = 1.30, MAD = 1.04,
# range: [0.10, 2.50], Skewness = -0.10, Kurtosis = -1.34, 0% missing
#   - Species: 3 levels, namely setosa (n = 50, 33.33%), versicolor (n = 50,
# 33.33%) and virginica (n = 50, 33.33%)
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="n">iris</span> <span class="o">%&gt;%</span>
  <span class="nf">select</span><span class="p">(</span><span class="o">-</span><span class="nf">starts_with</span><span class="p">(</span><span class="s">&#34;Sepal&#34;</span><span class="p">))</span> <span class="o">%&gt;%</span>
  <span class="nf">group_by</span><span class="p">(</span><span class="n">Species</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">report</span><span class="p">()</span> <span class="o">%&gt;%</span>
  <span class="nf">summary</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># The data contains 150 observations, grouped by Species, of the following 3
# variables:
# 
# - setosa (n = 50):
#   - Petal.Length: Mean = 1.46, SD = 0.17, range: [1, 1.90]
#   - Petal.Width: Mean = 0.25, SD = 0.11, range: [0.10, 0.60]
# 
# - versicolor (n = 50):
#   - Petal.Length: Mean = 4.26, SD = 0.47, range: [3, 5.10]
#   - Petal.Width: Mean = 1.33, SD = 0.20, range: [1, 1.80]
# 
# - virginica (n = 50):
#   - Petal.Length: Mean = 5.55, SD = 0.55, range: [4.50, 6.90]
#   - Petal.Width: Mean = 2.03, SD = 0.27, range: [1.40, 2.50]
</code></pre></div><br>
<h3 id="33-t检验和相关性">3.3 t检验和相关性</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">report</span><span class="p">(</span><span class="nf">t.test</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">mpg</span> <span class="o">~</span> <span class="n">mtcars</span><span class="o">$</span><span class="n">am</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># Effect sizes were labelled following Cohen&#39;s (1988) recommendations.
# 
# The Welch Two Sample t-test testing the difference of mtcars$mpg by mtcars$am
# (mean in group 0 = 17.15, mean in group 1 = 24.39) suggests that the effect is
# negative, statistically significant, and large (difference = -7.24, 95% CI
# [-11.28, -3.21], t(18.33) = -3.77, p = 0.001; Cohen&#39;s d = -1.41, 95% CI [-2.26,
# -0.53])
</code></pre></div><br>
<p>您还可以使用<code>as.data.frame()</code>函数创建表，例如使用此相关性测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">cor.test</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Sepal.Length</span><span class="p">,</span> <span class="n">iris</span><span class="o">$</span><span class="n">Sepal.Width</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">report</span><span class="p">()</span> <span class="o">%&gt;%</span>
  <span class="nf">as.data.frame</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># Pearson&#39;s product-moment correlation
# 
# Parameter1        |       Parameter2 |     r |        95% CI | t(148) |     p
# -----------------------------------------------------------------------------
# iris$Sepal.Length | iris$Sepal.Width | -0.12 | [-0.27, 0.04] |  -1.44 | 0.152
# 
# Alternative hypothesis: two.sided
</code></pre></div><br>
<h3 id="34-方差分析">3.4 方差分析</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="nf">aov</span><span class="p">(</span><span class="n">Sepal.Length</span> <span class="o">~</span> <span class="n">Species</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">iris</span><span class="p">)</span> <span class="o">%&gt;%</span>
  <span class="nf">report</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># The ANOVA (formula: Sepal.Length ~ Species) suggests that:
# 
#   - The main effect of Species is statistically significant and large (F(2, 147)
# = 119.26, p &lt; .001; Eta2 = 0.62, 95% CI [0.54, 1.00])
# 
# Effect sizes were labelled following Field&#39;s (2013) recommendations.
</code></pre></div><br>
<h3 id="35-广义线性模型">3.5 广义线性模型</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-R" data-lang="R"><span class="n">model</span> <span class="o">&lt;-</span> <span class="nf">glm</span><span class="p">(</span><span class="n">vs</span> <span class="o">~</span> <span class="n">mpg</span> <span class="o">*</span> <span class="n">drat</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">mtcars</span><span class="p">,</span> <span class="n">family</span> <span class="o">=</span> <span class="s">&#34;binomial&#34;</span><span class="p">)</span>

<span class="nf">report</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># We fitted a logistic model (estimated using ML) to predict vs with mpg and drat
# (formula: vs ~ mpg * drat). The model&#39;s explanatory power is substantial
# (Tjur&#39;s R2 = 0.51). The model&#39;s intercept, corresponding to mpg = 0 and drat =
# 0, is at -33.43 (95% CI [-77.90, 3.25], p = 0.083). Within this model:
# 
#   - The effect of mpg is statistically non-significant and positive (beta = 1.79,
# 95% CI [-0.10, 4.05], p = 0.066; Std. beta = 3.63, 95% CI [1.36, 7.50])
#   - The effect of drat is statistically non-significant and positive (beta =
# 5.96, 95% CI [-3.75, 16.26], p = 0.205; Std. beta = -0.36, 95% CI [-1.96,
# 0.98])
#   - The effect of mpg × drat is statistically non-significant and negative (beta
# = -0.33, 95% CI [-0.83, 0.15], p = 0.141; Std. beta = -1.07, 95% CI [-2.66,
# 0.48])
# 
# Standardized parameters were obtained by fitting the model on a standardized
# version of the dataset. 95% Confidence Intervals (CIs) and p-values were
# computed using a Wald z-distribution approximation.
</code></pre></div><br>
<p>更多内容请阅读 <a href="https://easystats.github.io/report/">report包</a> 的文档。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  使用officedown包在Rmarkdown中制作PPT</title>
      <link>https://textdata.cn/blog/2022-09-04-officedown-pptdocx/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-officedown-pptdocx/</guid>
      <description>使用officedown包在Rmarkdown中制作PPT</description>
      <content:encoded><![CDATA[


<p>使用officedown在Rmarkdown中写PPT/Word。本文只以PPT为例简单演示，不做细节讲解。</p>
<div id="安装" class="section level2">
<h2>安装</h2>
<pre class="r"><code>install.packages(c(&quot;officedown&quot;, &quot;rvg&quot;))</code></pre>
<p><br></p>
</div>
<div id="新建rmd" class="section level2">
<h2>新建Rmd</h2>
<p>按照截图，
<img src="img/1.png" />
<img src="img/2.png" /></p>
<p>会自动新建一个Rmd模板。
<img src="img/3.png" /></p>
<p>如果你自己想改动添加内容，自己改就行不用怕，大不了重新新建一个空白模板。</p>
<p><br></p>
</div>
<div id="渲染" class="section level2">
<h2>渲染</h2>
<p>内容Okay后，点击渲染</p>
<p><img src="img/4.png" /></p>
<p>渲染时会自动弹开MS PowerPoint</p>
<p><img src="img/5.png" /></p>
<p><br></p>
</div>
<div id="相关资料" class="section level2">
<h2>相关资料</h2>
<ul>
<li><a href="https://www.miriamheiss.com/posts/graphing-with-ggplot/" class="uri">https://www.miriamheiss.com/posts/graphing-with-ggplot/</a></li>
<li><a href="https://ardata-fr.github.io/officeverse/index.html" class="uri">https://ardata-fr.github.io/officeverse/index.html</a></li>
</ul>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 |  使用posterdown包制作学术会议海报</title>
      <link>https://textdata.cn/blog/2022-09-04-posterdown/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-posterdown/</guid>
      <description>使用posterdown包制作学术海报</description>
      <content:encoded><![CDATA[


<blockquote>
<p>原文: <a href="https://shilaan.rbind.io/post/academic-conference-posters-using-posterdown/" class="uri">https://shilaan.rbind.io/post/academic-conference-posters-using-posterdown/</a></p>
</blockquote>
<p>如果你认识我，你就会知道我喜欢用 R语言 做任何事情。 当需要创建我的第一个学术会议海报时，我知道我不想浪费任何时间在不同的软件环境之间移动或复制粘贴和手动格式化文本、表格、图形和结果。</p>
<p>相反，我想使用 RMarkdown 生成一个完全可复制且格式精美的会议海报。 原来; R 包 <a href="https://github.com/brentthorne/posterdown">posterdown</a> 使这变得非常简单！ 在这篇文章中，我将简要向您展示如何使用 posterdown 包创建自己的海报。</p>
<p>要先睹为快，您可以在此处找到我的第一个 posterdown 创建的 <a href="https://sjdm.org/presentations/2021-Poster-Alzahawi-Shilaan-crowds-variability-credibility~.pdf">海报</a> 以及此处的<a href="https://github.com/shilaan/Many-Analysts/blob/main/poster/GSPA_Poster.Rmd">基础代码</a>。</p>
<p><br></p>
<div id="安装" class="section level2">
<h2>安装</h2>
<pre class="r"><code>install.packages(&quot;posterdown&quot;)</code></pre>
<p><br></p>
</div>
<div id="新建rmd" class="section level2">
<h2>新建Rmd</h2>
<p>按照下面步骤点击从模板新建Rmarkdown
<code>File -&gt; Net File -&gt; R Markdown -&gt; From Template</code></p>
<p><img src="img/posterdown_tem.png" /></p>
<p>从中选择posterdown模板，有三种可供选择的子模板，即
- Posterdown HTML
- Posterdown betterland
- Posterdown Betterport</p>
<p>大致的样式如下</p>
<p><img src="img/posterdown_templates.png" /></p>
<p>虽然 HTML 模板看起来更像是经典的科学海报，但 Betterland 和 Betterport 模板创建的海报具有大量空间，专门用于呈现高传递性的(take-away)信息。
后两者的区别在于，Betterland 是横向的，而 Betterport 是纵向的。</p>
<p><br></p>
</div>
<div id="个性化" class="section level2">
<h2>个性化</h2>
<p>当选择了模板，就可以在Rmd文件内修改内容。如果对字号、字体等不太满意，还可以在修改yaml部分参数。</p>
<p><img src="img/code.png" /></p>
<p>最后点击Knit即可渲染出学术会议海报</p>
<p><br></p>
</div>
<div id="参考资料" class="section level2">
<h2>参考资料</h2>
<ul>
<li><a href="https://shilaan.rbind.io/post/academic-conference-posters-using-posterdown" class="uri">https://shilaan.rbind.io/post/academic-conference-posters-using-posterdown</a></li>
<li><a href="https://github.com/brentthorne/posterdown" class="uri">https://github.com/brentthorne/posterdown</a></li>
</ul>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>R语言 | 绘制中国地图</title>
      <link>https://textdata.cn/blog/2022-09-04-geospatial-plotting/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-04-geospatial-plotting/</guid>
      <description>使用ggplot2, leaflet, sf, terra包绘制中国地图</description>
      <content:encoded><![CDATA[


<p><br></p>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>ymlthis包 | 为Rmarkdown文件轻松设置YMAL</title>
      <link>https://textdata.cn/blog/ymlthis_rmarkdown_ymal/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/ymlthis_rmarkdown_ymal/</guid>
      <description>Rmarkdown是R语言的代码文件类型，能渲染成html、pdf、doc等文件。但需要用到复杂的YAML进行参数设置，太难记住了。不过有了ymlthis包， 难度大大降低。</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="img/rmarkdown_function.png" alt=""  />
</p>
<p>Rmarkdown是R语言的代码文件类型，能渲染成html、pdf、doc等文件。但需要用到复杂的YAML进行参数设置，太难记住了。不过有了ymlthis包， 难度大大降低。</p>
<br>
<h2 id="安装ymlthis">安装ymlthis</h2>
<p>knit渲染效果一般由Rmarkdown开头的YAML设置。形如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">title: &#34;Rmarkdown用法&#34;
author: &#34;大邓&#34;
date: &#34;2022-07-21&#34;
output: 
  html_document:         #输出html
    toc: true            #生成目录
    toc_float: true      #目录浮动
    theme: readable      #readable主题
    number_sections: yes #章节自动排序号
    df_print: paged      #html中的data.frame数据能翻页
</code></pre></div><p>yaml比较难记住，很容易设置错误，可以安装 <code>ymlthis包</code>，该包可以帮我们省去记忆之苦。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;ymlthis&#34;)
</code></pre></div><br>
<h2 id="配置yaml">配置YAML</h2>
<p><a href="https://ymlthis.r-lib.org/index.html">ymlthis</a>安装成功后，就可以使用该快捷工具。在工具栏点击 <code>Addins</code></p>
<p><img loading="lazy" src="img/add_in_thisyml_1.jpg" alt=""  />
</p>
<p>找到 <code>Write New R Markdown or YAML File</code></p>
<p><img loading="lazy" src="img/add_in_thisyml_2.gif" alt=""  />
</p>
<p>复杂的 <a href="https://bookdown.org/yihui/rmarkdown/html-document.html">html渲染</a>参数设置，如标题、作者、渲染效果、目录、主题等，瞬间变的简单起来。</p>
<p>最后，.Rmd文件渲染为html文件的操作方法。</p>
<p><img loading="lazy" src="img/knit_to_html.png" alt=""  />
</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><strong>付费视频课程 | Python实证指标构建与文本分析</strong></li>
<li>大邓每年会有4场直播，五一、十一、寒、暑假，如果时间点接近，可考虑报名参与<a href="https://textdata.cn/blog/2022-05-workshop/7-Python.html">直播课</a>。</li>
<li>如果只意性价比，且已迫不及待想学，可以考虑直接报名大邓的<a href="https://textdata.cn/blog/management_python_course">录播课</a>。</li>
<li>如果不想学，也可以考虑外包。更建议找淘宝，如果找我咨询，请先阅读<a href="https://textdata.cn/blog/paid_for_service">有偿说明</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>chinese-converter | 中文繁简互换Python库</title>
      <link>https://textdata.cn/blog/chinese_converter/</link>
      <pubDate>Mon, 11 Jul 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/chinese_converter/</guid>
      <description>中文繁简互换</description>
      <content:encoded><![CDATA[<p>网上有一些繁体中文资源不能直接利用，通过chinese-convertor库，我们可以进行中文繁简互换。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install chinese-converter
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">chinese_converter</span>

<span class="n">chinese_converter</span><span class="o">.</span><span class="n">to_traditional</span><span class="p">(</span><span class="s2">&#34;中国&#34;</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">中國
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">chinese_converter</span><span class="o">.</span><span class="n">to_simplified</span><span class="p">(</span><span class="s2">&#34;中國&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">中国
</code></pre></div><br>
<br>
<h2 id="长期征稿">长期征稿</h2>
<div style="text-align: center;">
<figure >
    <a href="https://textdata.cn/blog/call_for_paper/">
        <img src="/images/blog/call_for_paper.png" width="100%" />
    </a>
    <figcaption><small><i>点击了解投稿</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="招募小伙伴">招募小伙伴</h2>
<div style="text-align: center;">
<figure >
    <a href="https://textdata.cn/blog/we_need_you/">
        <img src="/images/blog/we_need_you.png" width="100%" />
    </a>
    <figcaption><small><i>点击加入我们</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Asent库 | 英文文本数据情感分析</title>
      <link>https://textdata.cn/blog/asent_sentiment_analysis/</link>
      <pubDate>Sun, 10 Jul 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/asent_sentiment_analysis/</guid>
      <description>使用Python做英文情感分析，考虑否定词、程度副词对情感词的修饰作用。</description>
      <content:encoded><![CDATA[<p>Asent 是一个新的Python情感分析库， 依据情感词典，按照一定的规则，可用于评判词语、句子、文档的情感信息(正、负)。</p>
<p>目前与情感有关的规则有</p>
<ul>
<li>否定（即“不高兴”）</li>
<li>加强词（“非常高兴”）</li>
<li>对比共轭（即“但是”）</li>
<li>其他强调标记，如感叹号、大小写和问号。</li>
</ul>
<p>Asent目前仅支持<code>英语、丹麦、挪威、瑞典4种语言</code>。</p>
<br>
<h2 id="安装配置">安装配置</h2>
<p>学习课程之前，需要先下载并配置spacy模型， <a href="https://github.com/explosion/spacy-models/releases">https://github.com/explosion/spacy-models/releases</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">spacy</span><span class="o">==</span><span class="mf">3.2.0</span>
<span class="n">pip3</span> <span class="n">install</span> <span class="n">asent</span><span class="o">==</span><span class="mf">0.4.2</span>

<span class="c1">#下载en_core_web_lg-3.3.0-py3-none-any.whl到桌面</span>
<span class="c1">#下载链接: https://pan.baidu.com/s/13hFWFjy9uRxzC-9lqrp7SQ 提取码: em8l </span>

<span class="c1">#然后使用如下安装命令</span>
<span class="n">pip3</span> <span class="n">install</span> <span class="n">Desktop</span><span class="o">/</span><span class="n">en_core_web_lg</span><span class="o">-</span><span class="mf">3.2.0</span><span class="o">-</span><span class="n">py3</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>以下将带您逐步了解情绪是如何计算的。</p>
<p>首先，我们需要一个 spaCy 管道，并且我们需要向其中添加 asent 管道。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">asent</span>
<span class="kn">import</span> <span class="nn">spacy</span>

<span class="c1"># load spacy pipeline</span>
<span class="n">nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;en_core_web_lg&#34;</span><span class="p">)</span>

<span class="c1"># add the rule-based sentiment model</span>
<span class="n">nlp</span><span class="o">.</span><span class="n">add_pipe</span><span class="p">(</span><span class="s2">&#34;asent_en_v1&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>&lt;asent.component.Asent at 0x7fd6b3243130&gt;
</code></pre>
<br>
<h2 id="效价和极性">效价和极性</h2>
<p>如下所示， token的效价信息来自于人工标注的词典。例如<code>I am not very happy</code>中词语<code>happy</code>的人类情感评分是2.7。</p>
<p><img loading="lazy" src="img/token_polarity.png" alt=""  />
</p>
<p>首先我们查看每个词语对应的效价。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="s2">&#34;I am not very happy.&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">token</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">valence</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>I 	 0.0
am 	 0.0
not 	 0.0
very 	 0.0
happy 	 2.7
. 	 0.0
</code></pre>
<p>在该语境中， <code>happy</code>前面有否定词not修饰，所以情感极性方面应该被看做消极的。一般否定词和副词可以将形容词的情感进行反转和放大(缩小)。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>polarity=0.0 token=I span=I
polarity=0.0 token=am span=am
polarity=0.0 token=not span=not
polarity=0.0 token=very span=very
polarity=-2.215 token=happy span=not very happy
polarity=0.0 token=. span=.
</code></pre>
<p>注意到， 词语在<code>happy</code>拥有-2.215的极性分，该分是由<code>not very happy</code>确定的。</p>
<br>
<h2 id="可视化">可视化</h2>
<p>asent拥有多种情感极性可视化的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">asent</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s2">&#34;prediction&#34;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/fig1.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">asent</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s2">&#34;analysis&#34;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/fig2.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">doc</span><span class="o">.</span><span class="n">sents</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">sentence</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="p">)</span>
</code></pre></div><pre><code>neg=0.391 neu=0.609 pos=0.0 compound=-0.4964 span=I am not very happy.
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span>
</code></pre></div><pre><code>DocPolarityOutput(neg=0.391, neu=0.609, pos=0.0, compound=-0.4964)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc2</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="s2">&#34;I am not very happy.I am very very happy.It is awesome!!&#34;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;doc2情感极性信息: &#39;</span><span class="p">,</span> <span class="n">doc2</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="p">)</span>
<span class="nb">print</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;doc2情感得分:&#39;</span><span class="p">,</span> <span class="n">doc2</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="o">.</span><span class="n">compound</span><span class="p">)</span>
</code></pre></div><pre><code>doc2情感极性信息:  neg=0.13 neu=0.536 pos=0.333 compound=0.2794

doc2情感得分: 0.279353567721562
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#每个句子的情感极性信息</span>
<span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">doc2</span><span class="o">.</span><span class="n">sents</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">sentence</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="p">)</span>
</code></pre></div><pre><code>neg=0.391 neu=0.609 pos=0.0 compound=-0.4964 span=I am not very happy.
neg=0.0 neu=0.539 pos=0.461 compound=0.6453 span=I am very very happy.
neg=0.0 neu=0.461 pos=0.539 compound=0.6892 span=It is awesome!!
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#每个句子的情感得分</span>
<span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">doc2</span><span class="o">.</span><span class="n">sents</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">sentence</span><span class="o">.</span><span class="n">_</span><span class="o">.</span><span class="n">polarity</span><span class="o">.</span><span class="n">compound</span><span class="p">)</span>
</code></pre></div><pre><code>-0.4964238981617178
0.6452764659402158
0.689208135386188
</code></pre>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext库 | 关于DUTIR被污染解决办法</title>
      <link>https://textdata.cn/blog/fixed_dutir_bug/</link>
      <pubDate>Mon, 20 Jun 2022 12:40:10 +0600</pubDate>
      
      <guid>/blog/fixed_dutir_bug/</guid>
      <description>实在抱歉，大邓的粗心导致词典DUTIR被污染。大家如果使用cntext中的DUTIR，麻烦更新至1.7.2版本。</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="img/dutir%e9%97%ae%e9%a2%98.png" alt=""  />
</p>
<h2 id="本文资料">本文资料</h2>
<p><a href="DUTIR%E9%97%AE%E9%A2%98.zip">点击下载本文资料</a></p>
<br>
<h2 id="词典污染了">词典污染了</h2>
<p>实在抱歉，大邓的粗心导致词典DUTIR被污染。大家如果使用cntext中的DUTIR，麻烦更新至1.7.2版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="n">dutir</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">)</span>
<span class="n">dutir</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1.7.1

{&#39;DUTIR&#39;: {&#39;哀&#39;: [&#39;怀想&#39;, &#39;治丝而棼&#39;, &#39;伤害&#39;,...],
           &#39;好&#39;: [&#39;进贤黜奸&#39;, &#39;清醇&#39;, &#39;放达&#39;, ...],
           &#39;惊&#39;: [&#39;惊奇不已&#39;, &#39;魂惊魄惕&#39;, &#39;海外奇谈&#39;,...],
           &#39;惧&#39;: [&#39;忸忸怩怩&#39;, &#39;谈虎色变&#39;, &#39;手忙脚乱&#39;,...],
           &#39;乐&#39;: [&#39;百龄眉寿&#39;, &#39;娱心&#39;, &#39;如意&#39;,...],
           &#39;怒&#39;: [&#39;饮恨吞声&#39;, &#39;扬眉瞬目&#39;,...],   
           &#39;恶&#39;: [&#39;出逃&#39;, &#39;鱼肉百姓&#39;, &#39;移天易日&#39;,...]},

 &#39;Desc&#39;: &#39;大连理工大学情感本体库，细粒度情感词典。含七大类情绪，依次是哀, 好, 惊, 惧, 乐, 怒, 恶&#39;,

 &#39;Referer&#39;: &#39;徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.&#39;}
</code></pre></div><p>七大类情绪有:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    dict_keys([&#39;哀&#39;, &#39;好&#39;, &#39;惊&#39;, &#39;惧&#39;, &#39;乐&#39;, &#39;怒&#39;, &#39;恶&#39;])
</code></pre></div><p>下面是Bug!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
    <span class="k">if</span> <span class="s1">&#39;开心&#39;</span> <span class="ow">in</span> <span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">][</span><span class="n">key</span><span class="p">]:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;「开心」出现在情绪【</span><span class="si">{}</span><span class="s1">】词表中&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    「开心」出现在情绪【乐】词表中
    「开心」出现在情绪【恶】词表中
</code></pre></div><p>词语「开心」同时出现在情绪【乐】和【恶】</p>
<br>
<h2 id="dutir词典">DUTIR词典</h2>
<p>在网上找到大连理工大学情感本体文献、词典xlsx文件。</p>
<p><img loading="lazy" src="img/dutir%e8%b5%84%e6%96%99.png" alt=""  />
</p>
<p>制作方法，把 21 种小情绪汇总到喜怒哀乐等七大类情绪中。词典被污染，很可能是我汇总过程中出的问题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;大连理工大学中文情感词汇本体.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>词语</th>
      <th>词性种类</th>
      <th>词义数</th>
      <th>词义序号</th>
      <th>情感分类</th>
      <th>强度</th>
      <th>极性</th>
      <th>辅助情感分类</th>
      <th>强度.1</th>
      <th>极性.1</th>
      <th>Unnamed: 10</th>
      <th>Unnamed: 11</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>脏乱</td>
      <td>adj</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NN</td>
      <td>7</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>糟报</td>
      <td>adj</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NN</td>
      <td>5</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>早衰</td>
      <td>adj</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NE</td>
      <td>5</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>责备</td>
      <td>verb</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NN</td>
      <td>5</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>贼眼</td>
      <td>noun</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>NN</td>
      <td>5</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h2 id="汇总七类情绪">汇总七类情绪</h2>
<p><img loading="lazy" src="img/dutir%e4%b8%83%e5%a4%a7%e7%b1%bb.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#乐</span>
<span class="n">le_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PA&#39;</span><span class="p">,</span> <span class="s1">&#39;PE&#39;</span><span class="p">]</span>
<span class="c1">#好</span>
<span class="n">hao_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PD&#39;</span><span class="p">,</span> <span class="s1">&#39;PH&#39;</span><span class="p">,</span> <span class="s1">&#39;PG&#39;</span><span class="p">,</span> <span class="s1">&#39;PB&#39;</span><span class="p">,</span> <span class="s1">&#39;PK&#39;</span><span class="p">]</span>
<span class="c1"># 怒</span>
<span class="n">nu_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">]</span>
<span class="c1">#哀</span>
<span class="n">ai_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NB&#39;</span><span class="p">,</span> <span class="s1">&#39;NJ&#39;</span><span class="p">,</span> <span class="s1">&#39;NH&#39;</span><span class="p">,</span> <span class="s1">&#39;PF&#39;</span><span class="p">]</span>
<span class="c1"># 惧</span>
<span class="n">ju_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NI&#39;</span><span class="p">,</span> <span class="s1">&#39;NC&#39;</span><span class="p">,</span> <span class="s1">&#39;NG&#39;</span><span class="p">]</span>
<span class="c1"># 恶</span>
<span class="n">wu_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;NE&#39;</span><span class="p">,</span> <span class="s1">&#39;ND&#39;</span><span class="p">,</span> <span class="s1">&#39;NN&#39;</span><span class="p">,</span> <span class="s1">&#39;NK&#39;</span><span class="p">,</span> <span class="s1">&#39;NL&#39;</span><span class="p">]</span>
<span class="c1"># 惊</span>
<span class="n">jing_cates</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;PC&#39;</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">emotion</span><span class="p">(</span><span class="n">cates</span><span class="p">):</span>
    <span class="n">dfs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">cate</span> <span class="ow">in</span> <span class="n">cates</span><span class="p">:</span>
        <span class="n">sdf</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;情感分类&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">cate</span><span class="p">]</span>
        <span class="n">dfs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sdf</span><span class="p">)</span>
    <span class="n">res_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">dfs</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res_df</span><span class="p">[</span><span class="s1">&#39;词语&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>

<span class="c1"># 情绪【乐】的词语有：</span>
<span class="n">le_words</span> <span class="o">=</span> <span class="n">emotion</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">le_cates</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">le_words</span><span class="p">[:</span><span class="mi">10</span><span class="p">])</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [&#39;瑞雪&#39;, &#39;神采&#39;, &#39;喜人&#39;, &#39;怡悦&#39;, &#39;进益&#39;, &#39;奏凯&#39;, &#39;鸾凤和鸣&#39;, &#39;特等&#39;, &#39;欢快&#39;, &#39;如意&#39;]
</code></pre></div><br>
<h2 id="制作dutirpkl">制作DUTIR.pkl</h2>
<p>将DUTIR介绍、文献出处、对应的词典汇总到字典，并制作生成DUTIR.pkl文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dutir</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>

<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;乐&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">ju_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;好&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">hao_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;怒&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">nu_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;哀&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">ai_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;惧&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">ju_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;恶&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">e_cates</span><span class="p">)</span>
<span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;惊&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">senti</span><span class="p">(</span><span class="n">cates</span><span class="o">=</span><span class="n">jing_cates</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">:</span> <span class="n">dutir</span><span class="p">,</span>
        <span class="s1">&#39;Desc&#39;</span><span class="p">:</span> <span class="s1">&#39;大连理工大学情感本体库，细粒度情感词典。含七大类情绪，依次是哀, 好, 惊, 惧, 乐, 怒, 恶&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.&#39;</span><span class="p">}</span>


<span class="kn">import</span> <span class="nn">pickle</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="更新cntext">更新cntext</h2>
<p>解决DUTIR词典问题， 需更新至1.7.9版本。</p>
<p><strong>pip3 install cntext==1.7.9</strong></p>
<p>现在我们检查下刚刚的问题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>

<span class="n">dutir</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
    <span class="k">if</span> <span class="s1">&#39;开心&#39;</span> <span class="ow">in</span> <span class="n">dutir</span><span class="p">[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">][</span><span class="n">key</span><span class="p">]:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;「开心」只出现在情绪【</span><span class="si">{}</span><span class="s1">】词表中&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    1.7.9
    「开心」只出现在情绪【恶】词表中
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>sklearnex库 | 让你的scikit-learn代码加速百倍</title>
      <link>https://textdata.cn/blog/speed_up_sklearn_code_with_sklearnex/</link>
      <pubDate>Sat, 18 Jun 2022 16:40:10 +0600</pubDate>
      
      <guid>/blog/speed_up_sklearn_code_with_sklearnex/</guid>
      <description>「scikit-learn」作为经典的机器学习框架，其运算速度一直广受用户的诟病。今天分享一个新包 「sklearnex」，可以在不改变原有代码的基础上，获得数十倍甚至上千倍的效率提升。</description>
      <content:encoded><![CDATA[<p>「scikit-learn」作为经典的机器学习框架，其运算速度一直广受用户的诟病。今天分享一个新包 「sklearnex」，可以在不改变原有代码的基础上，获得数十倍甚至上千倍的效率提升。</p>
<br>
<h2 id="sklearnex简介">sklearnex简介</h2>
<p>借助英特尔® Extension for Scikit-learn，您可以加速您的 Scikit-learn 应用程序，并且不需修改 Scikit-Learn原有代码结构。 英特尔® Extension for Scikit-learn是一款免费软件 AI 加速器，可带来超过 10-100 倍的加速。</p>
<br>
<h2 id="安装sklearnex">安装sklearnex</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install notebook scikit-learn-intelex
</code></pre></div><p><br><br></p>
<h2 id="快速上手">快速上手</h2>
<h3 id="scikit-learn原代码">scikit-learn原代码</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>

<span class="n">kmeans</span> <span class="o">=</span> <span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;kmeans.labels_ = </span><span class="si">{</span><span class="n">kmeans</span><span class="o">.</span><span class="n">labels_</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">kmeans.labels_ = [1 1 1 0 0 0]
</code></pre></div><br>
<h3 id="加速代码">加速代码</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">sklearnex</span> <span class="kn">import</span> <span class="n">patch_sklearn</span>
<span class="n">patch_sklearn</span><span class="p">()</span> <span class="c1">#启动加速补丁</span>

<span class="c1"># 加速补丁放置于sklearn之前</span>
<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>
<span class="n">kmeans</span> <span class="o">=</span> <span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;kmeans.labels_ = </span><span class="si">{</span><span class="n">kmeans</span><span class="o">.</span><span class="n">labels_</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">kmeans.labels_ = [1 1 1 0 0 0]
</code></pre></div><br>
<h3 id="去掉加速">去掉加速</h3>
<p>一般使用sklearn的环境是jupyter内，如果使用了sklearnex的加速功能，那么整个jupyter文件都是加速环境。如果想回到常规速度，可以在机器学习算法之前使用unpatch_sklearn()回到sklearn正常速度</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearnex</span> <span class="kn">import</span> <span class="n">unpatch_sklearn</span>

<span class="n">unpatch_sklearn</span><span class="p">()</span>

<span class="c1"># Re-import scikit-learn algorithms after the unpatch:</span>
<span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>
</code></pre></div><p><br><br></p>
<h2 id="效率对比">效率对比</h2>
<p>按照官方说法，越强劲的CPU可以获得的性能提升比例也会更高，下图是官方在<code>Intel Xeon Platinum 8275CL</code>处理器下测试了一系列算法后得出的性能提升结果，不仅可以提升训练速度，还可以提升模型推理预测速度，在某些场景下甚至达到数千倍的性能提升。</p>
<p><img loading="lazy" src="scikit-learn-acceleration-compare.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Wordify | 发现和区分消费者词汇的工具</title>
      <link>https://textdata.cn/blog/jcr_wordify/</link>
      <pubDate>Sun, 15 May 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/jcr_wordify/</guid>
      <description>工具介绍； 在不同上下文中，消费者的单词使用如何变化</description>
      <content:encoded><![CDATA[<p>JCR2021一篇软件介绍，支持中英文在内的多种语言。</p>
<blockquote>
<p>Hovy, D., Melumad, S. and Inman, J.J., 2021. Wordify: a tool for discovering and differentiating consumer vocabularies. <em>Journal of Consumer Research</em>, <em>48</em>(3), pp.394-414.</p>
</blockquote>
<br>
<h2 id="摘要">摘要:</h2>
<p>这项工作介绍了一个免费易用的在线文本分析工具<strong>Wordify</strong>，用于了解 <strong>“在不同上下文中，消费者的单词使用如何变化”</strong>。Wordify 使用  <strong>随机逻辑回归</strong>  (RLR) 来识别最能区分来自不同预分类文本的用词差异，例如男性与女性撰写的帖子用词差异，或好评与差评的用词差异。我们提供了说明性示例，以展示该工具如何用于多种用途，例如 (1) 揭示消费者在智能手机和 PC 上撰写评论时使用的独特词汇，(2) 发现推文中使用的词语在假定的支持者和反对有争议的广告，以及 (3) 扩展基于字典的情绪测量工具的字典。我们凭经验表明，Wordify 的 RLR 算法在区分词汇方面比支持向量机和卡方选择器表现更好，同时在计算时间上具有显着优势。还讨论了 Wordify 与其他文本分析工具的结合使用，例如概率主题建模和情感分析，以更深入地了解语言在消费者行为中的作用。</p>
<p><strong>关键词</strong>：文本分析，自然语言处理，语言，情感分析</p>
<br>
<h2 id="本地wordify配置">本地wordify配置</h2>
<p>作者在github公开了wordify的代码，仓库地址 <a href="https://github.com/MilaNLProc/wordify-webapp-streamlit">https://github.com/MilaNLProc/wordify-webapp-streamlit</a></p>
<p>大致的使用步骤</p>
<ol>
<li>wordify要配置spacy语言模型，配置方法参照以前分享的<a href="https://textdata.cn/blog/spacy_industry_application/">spacy产业级自然语言处理包</a></li>
<li>到github仓库下载代码，解压至桌面</li>
<li>打开命令行, 执行命令<code>cd desktop/wordify-webapp-streamlit-main</code></li>
<li>命令行执行<code>pip3 install -r requirements.txt</code></li>
<li>命令行执行<code>streamlit run app.py</code>， 此时命令行中出现本地服务地址(类似于网站)，浏览器打开这个地址即可</li>
</ol>
<p><strong>本地配置比较有难度，建议使用在线版https://wordify.unibocconi.it/</strong></p>
<br>
<h2 id="在线展示网站">在线展示网站</h2>
<h3 id="网址">网址</h3>
<p><a href="https://wordify.unibocconi.it/">https://wordify.unibocconi.it/</a></p>
<p><img loading="lazy" src="img/wordify_streamilit_website.png" alt=""  />
</p>
<h3 id="使用方法">使用方法</h3>
<ul>
<li>
<p>表格文件需含两个字段名，分别为<strong>text</strong>和<strong>label</strong>, 中文数据需要先为用空格间隔词语的文本样式。<a href="test_chinese.xlsx">中文样例文件</a></p>
</li>
<li>
<p>表格文件支持csv、xlsx、tsv、parquet，10M以内。数据上传成功后，页面会发生变化</p>
</li>
<li>
<p>在线页面在运行时一定不要刷新，这样会中断数据分析的过程</p>
</li>
<li>
<p>Wordify 的性能取决于文件中各个文本的长度。</p>
</li>
</ul>
<p><img loading="lazy" src="img/wordify_chinese_process.png" alt=""  />
</p>
<br>
<h2 id="点评">点评</h2>
<p>以往的文本分析思路，大多无视<strong>混杂效应Confound</strong>，主要从文本中抽取一些变量，如情感值，用于后期计量建模，试图挖掘<strong>文本指标(如情感值)<strong>与</strong>Outcome</strong>之间的因果关系。</p>
<blockquote>
<p>混杂效应，例如研究推文正负面情感对网友点击行为的影响。</p>
<p>研究的机制可以简化为<strong>不同的文本情感&ndash;&gt;产生不同的网友点击</strong></p>
<p>但是有可能不全是情感影响了网友的点击，作者存在性别差异，女性比男性更容易表达积极文本信息，而且在互联网世界女性比男性可能更有吸引力。</p>
</blockquote>
<p>论文中没提及Confound效应，但粗略浏览下，wordify创新地考虑了confound场景，通过文本分析，看看不同群体用词的差异。</p>
<p>wordify的缺点本地版配置太难，网页版运行太慢。0.6M的中文数据，我等了20min，还是没有跑出结果，果断关闭在线网页。总之感觉没有文中说的那么易用，门槛还是太高了。有耐心的朋友，如果感兴趣，可以去试试。</p>
<p>如果研究考虑文本的confound效应，可以参考<strong>causalnlp包</strong>，虽然配置难，但是运行速度还是有保证。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>karateclub库 | 计算社交网络中节点的向量</title>
      <link>https://textdata.cn/blog/karateclub_tutorial/</link>
      <pubDate>Tue, 10 May 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/karateclub_tutorial/</guid>
      <description>使用karateclub计算社交网络中节点的向量，有了节点的向量，就可以基于向量思维比较节点异同</description>
      <content:encoded><![CDATA[<p><a href="https://karateclub.readthedocs.io/en/latest">karateclub</a>是小规模图挖掘研究的一把瑞士军刀， 可以对图形结构化数据进行无监督学习。</p>
<ul>
<li>首先，可以计算出节点、图的特征向量</li>
<li>其次，它包括多种重叠和非重叠的社区发现方法。</li>
</ul>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="karateclub_example_code.zip">click to download</a></p>
<br>
<h2 id="数据格式">数据格式</h2>
<p>karateclub假设用户提供的用于<strong>节点嵌入</strong>和<strong>社区检测</strong>的 NetworkX 图具有以下重要属性：</p>
<ul>
<li>节点用整数索引</li>
<li>节点索引从零开始，索引是连续的</li>
</ul>
<p><strong>节点的属性矩阵</strong>可以提供为 scipy sparse 和 numpy 数组。返回的社区成员字典和嵌入矩阵使用相同的数字连续索引。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">karateclub</span>
</code></pre></div><br>
<h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;karate_club_graph.csv&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>

<span class="nb">print</span><span class="p">()</span>

<span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span><span class="o">.</span><span class="n">to_markdown</span><span class="p">())</span>

<span class="nb">print</span><span class="p">()</span>

<span class="n">edges</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;src&#39;</span><span class="p">],</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;tgt&#39;</span><span class="p">]))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">edges</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<pre><code>Index(['src', 'tgt'], dtype='object')

|    |   src |   tgt |
|---:|------:|------:|
|  0 |     0 |     1 |
|  1 |     0 |     2 |
|  2 |     0 |     3 |
|  3 |     0 |     4 |
|  4 |     0 |     5 |

[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="nn">nx</span>

<span class="n">graph</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">Graph</span><span class="p">()</span>
<span class="n">graph</span><span class="o">.</span><span class="n">add_edges_from</span><span class="p">(</span><span class="n">edges</span><span class="p">)</span>
<span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<p>​ <br>
<img loading="lazy" src="output_4_0.png" alt="png"  />

​</p>
<br>
<h2 id="社区发现">社区发现</h2>
<p>现在让我们使用LabelPropagation算法来发现网络中的社区结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">karateclub</span> <span class="kn">import</span> <span class="n">LabelPropagation</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">LabelPropagation</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
<span class="n">cluster_membership</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">get_memberships</span><span class="p">()</span>
<span class="n">cluster_membership</span>
</code></pre></div><p>Run</p>
<pre><code>{23: 8,
 33: 8,
 5: 10,
 7: 1,
 28: 31,
 4: 10,
 3: 1,
 31: 31,
 20: 8,
 19: 1,
 6: 10,
 32: 8,
 29: 8,
 9: 1,
 14: 8,
 2: 1,
 0: 1,
 17: 1,
 25: 31,
 22: 8,
 11: 1,
 13: 1,
 1: 1,
 24: 31,
 15: 8,
 18: 8,
 26: 8,
 27: 8,
 16: 10,
 12: 1,
 30: 8,
 21: 1,
 8: 8,
 10: 10}
</code></pre>
<p>在有34个节点的图中，发现了4个社区，分别是1、8、10、31。</p>
<br>
<h2 id="node-embeddings">Node embeddings</h2>
<p>计算节点的向量。​使用 Diff2vec 拟合数据的节点嵌入(向量)，具有少量维度、每个源节点的扩散和短欧拉游走。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">karateclub</span> <span class="kn">import</span> <span class="n">Diff2Vec</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">Diff2Vec</span><span class="p">(</span><span class="n">diffusion_number</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                 <span class="n">diffusion_cover</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> 
                 <span class="n">dimensions</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>

<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">get_embedding</span><span class="p">()</span>
<span class="n">X</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div><p>Run</p>
<pre><code>(34, 5)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">X</span>
</code></pre></div><p>Run</p>
<pre><code>array([[ 1.3687179 , -0.33502993, -0.3294797 ,  0.40154558,  1.0270709 ],
       [ 0.88167036, -0.3201618 , -0.34293872,  0.41519755,  0.71964073],
       [ 0.8756805 , -0.21934716, -0.33261183,  0.33785722,  0.51631075],
       [ 0.9768452 , -0.39260587, -0.39460638,  0.28851682,  0.8665034 ],
       [ 0.4809215 , -0.28729865, -0.19276802,  0.22588767,  0.07305563],
       [ 0.5580538 , -0.28137547, -0.1947159 ,  0.23712516,  0.49257705],
       [ 0.23477663,  0.04262228,  0.07154325,  0.02909669,  0.33999097],
       [ 1.1882199 , -0.21742308, -0.26985615,  0.44171503,  0.6679048 ],
       [ 1.0287609 , -0.27409104, -0.04119629,  0.30143994,  0.704676  ],
       [ 0.5700088 , -0.26341844,  0.01560158, -0.08039217,  0.41796318],
       [ 0.5753763 , -0.2242508 , -0.1795436 ,  0.0705331 ,  0.46571913],
       [ 0.46763912, -0.17108741, -0.22459361,  0.03058788,  0.05998428],
       [ 0.5500626 , -0.12745889, -0.28661036,  0.16889155,  0.48200938],
       [ 0.6217582 , -0.10251168, -0.0713837 ,  0.13550574,  0.60422456],
       [ 0.9797377 , -0.46282482, -0.09380057,  0.2749968 ,  0.7020155 ],
       [ 0.38830167, -0.30841848, -0.20950563, -0.02130592,  0.0836651 ],
       [ 0.57225037, -0.04150235, -0.1246101 ,  0.06918757,  0.23083903],
       [ 0.6431406 , -0.04898892, -0.05708801,  0.1311793 ,  0.46377632],
       [ 0.541667  , -0.16031542, -0.33119023,  0.10385639,  0.39525154],
       [ 0.65543544, -0.27534947, -0.28757   ,  0.2080029 ,  0.5288213 ],
       [ 0.46381798, -0.07729273, -0.09209982,  0.11292508,  0.36836028],
       [ 0.53826964, -0.09915172, -0.09243581,  0.15036733,  0.5449071 ],
       [ 0.31599265, -0.22078821, -0.02872767,  0.07436654,  0.28573534],
       [ 1.0706906 , -0.27783617, -0.16653039,  0.2631594 ,  0.6408689 ],
       [ 0.67875004, -0.34441757, -0.10262538,  0.2588695 ,  0.38405937],
       [ 0.41786563, -0.10344986, -0.19508548,  0.19657765,  0.22006002],
       [ 0.7855942 , -0.27200857,  0.02204541,  0.09168041,  0.42220354],
       [ 0.7773458 , -0.11727296, -0.24145149,  0.04537854,  0.5737133 ],
       [ 0.75732976, -0.314953  , -0.15383345,  0.02065313,  0.51843405],
       [ 0.7226543 , -0.31919608, -0.18878649,  0.15413427,  0.42012522],
       [ 0.43411565, -0.17342259, -0.28042233,  0.26853496,  0.49947587],
       [ 1.1565564 , -0.36802933, -0.12613232,  0.32381424,  0.75113887],
       [ 1.1192797 , -0.162529  , -0.17195942,  0.39265418,  0.83656436],
       [ 1.2231556 , -0.5336606 , -0.14015286,  0.14054438,  0.5695296 ]],
      dtype=float32)
</code></pre>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext库 |  Python文本分析包更新</title>
      <link>https://textdata.cn/blog/cntext_tutorial/</link>
      <pubDate>Mon, 09 May 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/cntext_tutorial/</guid>
      <description>扩展词典、情感分析、可阅读性，内置9种情感词典，涵盖中英文</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/hidadeng/cntext"><img loading="lazy" src="https://img.shields.io/badge/cntext-%e4%b8%ad%e6%96%87%e6%96%87%e6%9c%ac%e5%88%86%e6%9e%90%e5%ba%93-orange?style=for-the-badge&amp;logo=appveyor" alt=""  />
</a></p>
<p><a href="version1.2.md">旧版cntext入口</a></p>
<p>中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等</p>
<ul>
<li><a href="https://github.com/hidadeng/cntext">github地址</a> <code>https://github.com/hidadeng/cntext</code></li>
<li><a href="https://pypi.org/project/cntext/">pypi地址</a>  <code>https://pypi.org/project/cntext/</code></li>
<li><a href="https://ke.qq.com/course/482241?tuin=163164df">视频课-<strong>Python网络爬虫与文本数据分析</strong></a></li>
</ul>
<p>功能模块含</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>stats</strong>  文本统计指标
<ul>
<li><input checked="" disabled="" type="checkbox"> 词频统计</li>
<li><input checked="" disabled="" type="checkbox"> 可读性</li>
<li><input checked="" disabled="" type="checkbox"> 内置pkl词典</li>
<li><input checked="" disabled="" type="checkbox"> <strong>情感分析</strong></li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>dictionary</strong> 构建词表(典)
<ul>
<li><input checked="" disabled="" type="checkbox"> Sopmi 互信息扩充词典法</li>
<li><input checked="" disabled="" type="checkbox"> W2Vmodels 词向量扩充词典法</li>
<li><input checked="" disabled="" type="checkbox"> Glove Glove词嵌入模型</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>similarity</strong>   文本相似度
<ul>
<li><input checked="" disabled="" type="checkbox"> cos相似度</li>
<li><input checked="" disabled="" type="checkbox"> jaccard相似度</li>
<li><input checked="" disabled="" type="checkbox"> 编辑距离相似度</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>mind.py</strong> 计算文本中的认知方向（态度、偏见）</li>
</ul>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="cntext_examples.zip">click to download</a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install cntext
</code></pre></div><br>
<h2 id="quickstart">QuickStart</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">help</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">Help</span> <span class="nx">on</span> <span class="kn">package</span> <span class="nx">cntext</span><span class="p">:</span>

<span class="nx">NAME</span>
    <span class="nx">cntext</span>

<span class="nx">PACKAGE</span> <span class="nx">CONTENTS</span>
    <span class="nx">mind</span>
    <span class="nx">dictionary</span>
    <span class="nx">similarity</span>
    <span class="nx">stats</span>
</code></pre></div><br>
<h2 id="一stats">一、stats</h2>
<p>目前stats内置的函数有</p>
<ul>
<li><strong>readability</strong>  文本可读性</li>
<li><strong>term_freq</strong> 词频统计函数</li>
<li><strong>dict_pkl_list</strong>  获取cntext内置词典列表(pkl格式)</li>
<li><strong>load_pkl_dict</strong> 导入pkl词典文件</li>
<li><strong>sentiment</strong> 情感分析</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<h3 id="11--readability">1.1  readability</h3>
<p>文本可读性，指标越大，文章复杂度越高，可读性越差。</p>
<p>readability(text, lang=&lsquo;chinese&rsquo;)</p>
<ul>
<li>text: 文本字符串数据</li>
<li>lang: 语言类型，&ldquo;chinese&quot;或&quot;english&rdquo;，默认&quot;chinese&quot;</li>
</ul>
<p><strong>中文可读性</strong> 算法参考自</p>
<blockquote>
<p>徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.</p>
<ul>
<li>readability1 &mdash;每个分句中的平均字数</li>
<li>readability2  &mdash;每个句子中副词和连词所占的比例</li>
<li>readability3  &mdash;参考Fog Index， readability3=(readability1+readability2)×0.5</li>
</ul>
</blockquote>
<p>​</p>
<p>以上三个指标越大，都说明文本的复杂程度越高，可读性越差。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>


<span class="n">ct</span><span class="o">.</span><span class="n">readability</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 28.0,
 &#39;readability2&#39;: 0.15789473684210525,
 &#39;readability3&#39;: 14.078947368421053}
</code></pre></div><br>
<p>句子中的符号变更会影响结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>
<span class="n">ct</span><span class="o">.</span><span class="n">readability</span><span class="p">(</span><span class="n">text2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 27.0,
 &#39;readability2&#39;: 0.16666666666666666,
 &#39;readability3&#39;: 13.583333333333334}
</code></pre></div><p><br><br></p>
<h3 id="12--term_freq">1.2  term_freq</h3>
<p>词频统计函数，返回Counter类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span> 

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<h3 id="13-dict_pkl_list">1.3 dict_pkl_list</h3>
<p>获取cntext内置词典列表(pkl格式)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># 获取cntext内置词典列表(pkl格式)</span>
<span class="n">ct</span><span class="o">.</span><span class="n">dict_pkl_list</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;DUTIR.pkl&#39;,
 &#39;HOWNET.pkl&#39;,
 &#39;sentiws.pkl&#39;,
 &#39;ChineseFinancialFormalUnformalSentiment.pkl&#39;,
 &#39;ANEW.pkl&#39;,
 &#39;LSD2015.pkl&#39;,
 &#39;NRC.pkl&#39;,
 &#39;geninqposneg.pkl&#39;,
 &#39;HuLiu.pkl&#39;,
 &#39;AFINN.pkl&#39;,
 &#39;ADV_CONJ.pkl&#39;,
 &#39;LoughranMcDonald.pkl&#39;,
 &#39;STOPWORDS.pkl&#39;, 
 &#39;concreteness.pkl&#39;]
</code></pre></div><p>词典对应关系, 部分情感词典资料整理自 <a href="https://github.com/quanteda/quanteda.sentiment">quanteda.sentiment</a></p>
<table>
<thead>
<tr>
<th>pkl文件</th>
<th>词典</th>
<th>语言</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>DUTIR.pkl</td>
<td>大连理工大学情感本体库</td>
<td>中文</td>
<td>七大类情绪，<code>哀, 好, 惊, 惧, 乐, 怒, 恶</code></td>
</tr>
<tr>
<td>HOWNET.pkl</td>
<td>知网Hownet词典</td>
<td>中文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>sentiws.pkl</td>
<td>SentimentWortschatz (SentiWS)</td>
<td>英文</td>
<td>正面词、负面词；<br>效价</td>
</tr>
<tr>
<td>ChineseFinancialFormalUnformalSentiment.pkl</td>
<td>金融领域正式、非正式；积极消极</td>
<td>中文</td>
<td>formal-pos、<br>formal-neg；<br>unformal-pos、<br>unformal-neg</td>
</tr>
<tr>
<td>ANEW.pkl</td>
<td>英语单词的情感规范Affective Norms for English Words (ANEW)</td>
<td>英文</td>
<td>词语效价信息</td>
</tr>
<tr>
<td>LSD2015.pkl</td>
<td>Lexicoder Sentiment Dictionary (2015)</td>
<td>英文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>NRC.pkl</td>
<td>NRC Word-Emotion Association Lexicon</td>
<td>英文</td>
<td>细粒度情绪词；</td>
</tr>
<tr>
<td>geninqposneg.pkl</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>HuLiu.pkl</td>
<td>Hu&amp;Liu (2004)正、负情感词典</td>
<td>英文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>AFINN.pkl</td>
<td>尼尔森 (2011) 的“新 ANEW”效价词表</td>
<td>英文</td>
<td>情感效价信息valence</td>
</tr>
<tr>
<td>LoughranMcDonald.pkl</td>
<td>会计金融LM词典</td>
<td>英文</td>
<td>金融领域正、负面情感词</td>
</tr>
<tr>
<td>ADV_CONJ.pkl</td>
<td>副词连词</td>
<td>中文</td>
<td></td>
</tr>
<tr>
<td>STOPWORDS.pkl</td>
<td></td>
<td>中、英</td>
<td>停用词</td>
</tr>
<tr>
<td>concreteness.pkl</td>
<td>Brysbaert, M., Warriner, A. B., &amp; Kuperman, V. (2014). Concreteness ratings for 40 thousand generally known English word lemmas. Behavior Research Methods, 46, 904–911</td>
<td>English</td>
<td>word &amp; concreateness score</td>
</tr>
</tbody>
</table>
<h3 id="注意">注意:</h3>
<ul>
<li>
<p>如果用户情绪分析时使用DUTIR词典发表论文，请在论文中添加诸如“使用了大连理工大学信息检索研究室的情感词汇本体” 字样加以声明。参考文献中加入引文“徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.”</p>
</li>
<li>
<p>如果大家有制作的词典，可以上传至百度网盘，并在issue中留下词典的网盘链接。如词典需要使用声明，可连同文献出处一起issue</p>
</li>
</ul>
<br>
<h3 id="14-load_pkl_dict">1.4 load_pkl_dict</h3>
<p>导入pkl词典文件，返回字典样式数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># 导入pkl词典文件,</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;DUTIR&#39;: {&#39;哀&#39;: [&#39;怀想&#39;, &#39;治丝而棼&#39;, ...],
           &#39;好&#39;: [&#39;进贤黜奸&#39;, &#39;清醇&#39;, &#39;放达&#39;, ...], 
           &#39;惊&#39;: [&#39;惊奇不已&#39;, &#39;魂惊魄惕&#39;, &#39;海外奇谈&#39;,...],
           &#39;惧&#39;: [&#39;忸忸怩怩&#39;, &#39;谈虎色变&#39;, &#39;手忙脚乱&#39;, &#39;刿目怵心&#39;,...],
           &#39;乐&#39;: [&#39;百龄眉寿&#39;, &#39;娱心&#39;, &#39;如意&#39;, &#39;喜糖&#39;,...],
           &#39;怒&#39;: [&#39;饮恨吞声&#39;, &#39;扬眉瞬目&#39;,...],
           &#39;恶&#39;: [&#39;出逃&#39;, &#39;鱼肉百姓&#39;, &#39;移天易日&#39;,]
           }
</code></pre></div><br>
<h3 id="15-sentiment">1.5 sentiment</h3>
<p>sentiment(text, diction, lang=&lsquo;chinese&rsquo;)
使用diy词典进行情感分析，计算各个情绪词出现次数; 未考虑强度副词、否定词对情感的复杂影响，</p>
<ul>
<li>text:  待分析中文文本</li>
<li>diction:  情感词字典；</li>
<li>lang: 语言类型，&ldquo;chinese&quot;或&quot;english&rdquo;，默认&quot;chinese&quot;</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;我今天得奖了，很高兴，我要将快乐分享大家。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>
             <span class="n">diction</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">],</span>
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;哀_num&#39;: 0,
 &#39;好_num&#39;: 0,
 &#39;惊_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;乐_num&#39;: 2,
 &#39;怒_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;stopword_num&#39;: 8,
 &#39;word_num&#39;: 14,
 &#39;sentence_num&#39;: 1}
</code></pre></div><p>如果不适用pkl词典，可以自定义自己的词典，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">diction</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;高兴&#39;</span><span class="p">,</span> <span class="s1">&#39;快乐&#39;</span><span class="p">,</span> <span class="s1">&#39;分享&#39;</span><span class="p">],</span>
           <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;难过&#39;</span><span class="p">,</span> <span class="s1">&#39;悲伤&#39;</span><span class="p">],</span>
           <span class="s1">&#39;adv&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;很&#39;</span><span class="p">,</span> <span class="s1">&#39;特别&#39;</span><span class="p">]}</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;我今天得奖了，很高兴，我要将快乐分享大家。&#39;</span>
<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> 
             <span class="n">diction</span><span class="o">=</span><span class="n">diction</span><span class="p">,</span> 
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;pos_num&#39;: 3,
 &#39;neg_num&#39;: 0,
 &#39;adv_num&#39;: 1,
 &#39;stopword_num&#39;: 8,
 &#39;word_num&#39;: 14,
 &#39;sentence_num&#39;: 1}
</code></pre></div><br>
<h3 id="16-sentiment_by_valence">1.6 sentiment_by_valence</h3>
<p>sentiment函数默认所有情感词权重均为1，只需要统计文本中情感词的个数，即可得到文本情感得分。</p>
<p>sentiment_by_valence(text, diction, lang=&lsquo;english&rsquo;)函数考虑了词语的效价(valence)</p>
<ul>
<li>text 待输入文本</li>
<li>diction 带效价的词典，DataFrame格式。</li>
<li>lang 语言类型&rsquo;chinese' 或 &lsquo;english&rsquo;，默认&rsquo;english'</li>
</ul>
<p>这里我们以文本具体性度量为例， <strong>concreteness.pkl</strong> 整理自 Brysbaert2014的文章。</p>
<blockquote>
<p>Brysbaert, M., Warriner, A. B., &amp; Kuperman, V. (2014). Concreteness ratings for 40 thousand generally known English word lemmas. Behavior Research Methods, 46, 904–911</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># load the concreteness.pkl dictionary file</span>
<span class="n">concreteness_df</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;concreteness.pkl&#39;</span><span class="p">)</span>
<span class="n">concreteness_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">word</th>
<th style="text-align:right">valence</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">roadsweeper</td>
<td style="text-align:right">4.85</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">traindriver</td>
<td style="text-align:right">4.54</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">tush</td>
<td style="text-align:right">4.45</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">hairdress</td>
<td style="text-align:right">3.93</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">pharmaceutics</td>
<td style="text-align:right">3.77</td>
</tr>
</tbody>
</table>
<br>
<p>先看一条文本的具体性度量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">reply</span> <span class="o">=</span> <span class="s2">&#34;I&#39;ll go look for that&#34;</span>

<span class="n">score</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">reply</span><span class="p">,</span> 
                              <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> 
                              <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
<span class="n">score</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1.85
</code></pre></div><br>
<p>很多条文本的具体性度量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">employee_replys</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I&#39;ll go look for that&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that top&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that t-shirt&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go look for that t-shirt in grey&#34;</span><span class="p">,</span>
                   <span class="s2">&#34;I&#39;ll go search for that t-shirt in grey&#34;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">reply</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">employee_replys</span><span class="p">):</span>
    <span class="n">score</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">reply</span><span class="p">,</span> 
                                  <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> 
                                  <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
    
    <span class="n">template</span> <span class="o">=</span> <span class="s2">&#34;Concreteness Score: </span><span class="si">{score:.2f}</span><span class="s2"> | Example-</span><span class="si">{idx}</span><span class="s2">: </span><span class="si">{exmaple}</span><span class="s2">&#34;</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">template</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">score</span><span class="o">=</span><span class="n">score</span><span class="p">,</span> 
                          <span class="n">idx</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> 
                          <span class="n">exmaple</span><span class="o">=</span><span class="n">reply</span><span class="p">))</span>
    
<span class="n">ct</span><span class="o">.</span><span class="n">sentiment_by_valence</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">diction</span><span class="o">=</span><span class="n">concreteness_df</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Concreteness Score: 1.55 | Example-0: I&#39;ll go look for that
Concreteness Score: 1.55 | Example-1: I&#39;ll go search for that
Concreteness Score: 1.89 | Example-2: I&#39;ll go search for that top
Concreteness Score: 2.04 | Example-3: I&#39;ll go search for that t-shirt
Concreteness Score: 2.37 | Example-4: I&#39;ll go look for that t-shirt in grey
Concreteness Score: 2.37 | Example-5: I&#39;ll go search for that t-shirt in grey
</code></pre></div><br>
<p><br><br></p>
<h2 id="二dictionary">二、dictionary</h2>
<p>本模块用于构建词表(典),含</p>
<ul>
<li>SoPmi 共现法扩充词表(典)</li>
<li>W2VModels 词向量word2vec扩充词表(典)</li>
</ul>
<h3 id="21-sopmi">2.1 SoPmi</h3>
<p>SoPmi 共现法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">sopmier</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">SoPmi</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span>
                   <span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_corpus.txt&#39;</span><span class="p">,</span>  <span class="c1">#原始数据，您的语料</span>
                   <span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_seed_words.txt&#39;</span><span class="p">,</span> <span class="c1">#人工标注的初始种子词</span>
                   <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span>
                   <span class="p">)</span>   

<span class="n">sopmier</span><span class="o">.</span><span class="n">sopmi</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...Preprocess   Corpus ...
Step 2/4:...Collect co-occurrency information ...
Step 3/4:...Calculate   mutual information ...
Step 4/4:...Save    candidate words ...
Finish! used 44.49 s
</code></pre></div><br>
<h3 id="22-w2vmodels">2.2 W2VModels</h3>
<p>W2VModels 词向量</p>
<p><strong>特别要注意代码需要设定lang语言参数</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#初始化模型,需要设置lang参数。</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> 
                     <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>  <span class="c1">#语料数据 w2v_corpus.txt</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_corpus.txt&#39;</span><span class="p">)</span>


<span class="c1">#根据种子词，筛选出没类词最相近的前100个词</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/integrity.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/innovation.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/quality.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/respect.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/teamwork.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...Preprocess   corpus ...
Step 2/4:...Train  word2vec model
            used   174 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s

</code></pre></div><br>
<h3 id="需要注意">需要注意</h3>
<p>训练出的w2v模型可以后续中使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">w2v</span><span class="o">.</span><span class="n">model路径</span><span class="p">)</span>
<span class="c1">#找出word的词向量</span>
<span class="c1">#w2v_model.get_vector(word)</span>
<span class="c1">#更多w2_model方法查看</span>
<span class="c1">#help(w2_model)</span>
</code></pre></div><p>例如本代码，运行生成的结果路径<code>output/w2v_candi_words/w2v.model</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;output/w2v_candi_words/w2v.model&#39;</span><span class="p">)</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="s1">&#39;innovation&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;technology&#39;, 0.689210832118988),
 (&#39;infrastructure&#39;, 0.669672966003418),
 (&#39;resources&#39;, 0.6695448160171509),
 (&#39;talent&#39;, 0.6627111434936523),
 (&#39;execution&#39;, 0.6549549102783203),
 (&#39;marketing&#39;, 0.6533523797988892),
 (&#39;merchandising&#39;, 0.6504817008972168),
 (&#39;diversification&#39;, 0.6479553580284119),
 (&#39;expertise&#39;, 0.6446896195411682),
 (&#39;digital&#39;, 0.6326863765716553)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#获取词向量</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;innovation&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-0.45616838, -0.7799563 ,  0.56367606, -0.8570078 ,  0.600359  ,
       -0.6588043 ,  0.31116748, -0.11956959, -0.47599426,  0.21840936,
       -0.02268819,  0.1832016 ,  0.24452794,  0.01084935, -1.4213187 ,
        0.22840202,  0.46387577,  1.198386  , -0.621511  , -0.51598716,
        0.13352732,  0.04140598, -0.23470387,  0.6402956 ,  0.20394802,
        0.10799981,  0.24908689, -1.0117126 , -2.3168423 , -0.0402851 ,
        1.6886286 ,  0.5357047 ,  0.22932841, -0.6094084 ,  0.4515793 ,
       -0.5900931 ,  1.8684244 , -0.21056202,  0.29313338, -0.221067  ,
       -0.9535679 ,  0.07325   , -0.15823542,  1.1477109 ,  0.6716076 ,
       -1.0096023 ,  0.10605699,  1.4148282 ,  0.24576302,  0.5740349 ,
        0.19984631,  0.53964925,  0.41962907,  0.41497853, -1.0322098 ,
        0.01090925,  0.54345983,  0.806317  ,  0.31737605, -0.7965337 ,
        0.9282971 , -0.8775608 , -0.26852605, -0.06743863,  0.42815775,
       -0.11774074, -0.17956367,  0.88813037, -0.46279573, -1.0841943 ,
       -0.06798118,  0.4493006 ,  0.71962464, -0.02876493,  1.0282255 ,
       -1.1993176 , -0.38734904, -0.15875885, -0.81085825, -0.07678922,
       -0.16753489,  0.14065655, -1.8609751 ,  0.03587054,  1.2792674 ,
        1.2732009 , -0.74120265, -0.98000383,  0.4521185 , -0.26387128,
        0.37045383,  0.3680011 ,  0.7197629 , -0.3570571 ,  0.8016917 ,
        0.39243212, -0.5027844 , -1.2106236 ,  0.6412354 , -0.878307  ],
      dtype=float32)
</code></pre></div><p><br><br></p>
<h3 id="23-co_occurrence_matrix">2.3 co_occurrence_matrix</h3>
<p>词共现矩阵</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I go to school every day by bus .&#34;</span><span class="p">,</span>
         <span class="s2">&#34;i go to theatre every night by bus&#34;</span><span class="p">]</span>

<span class="n">ct</span><span class="o">.</span><span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> 
                        <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="/Users/thunderhit/Desktop/Coding/Python/diyPython/cntext/img/co_occurrence1.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">documents2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;编程很好玩&#34;</span><span class="p">,</span>
             <span class="s2">&#34;Python是最好学的编程&#34;</span><span class="p">]</span>

<span class="n">ct</span><span class="o">.</span><span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents2</span><span class="p">,</span> 
                        <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="/Users/thunderhit/Desktop/Coding/Python/diyPython/cntext/img/co_occurrence2.png" alt=""  />
</p>
<p><br><br></p>
<h3 id="24--glove">2.4  Glove</h3>
<p>构建Glove词嵌入模型，使用英文数据<code>data/brown_corpus.txt</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">Glove</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">create_vocab</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="s1">&#39;data/brown_corpus.txt&#39;</span><span class="p">,</span> <span class="n">min_count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">cooccurrence_matrix</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">train_embeddings</span><span class="p">(</span><span class="n">vector_size</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4: ...Create vocabulary for Glove.
Step 2/4: ...Create cooccurrence matrix.
Step 3/4: ...Train glove embeddings. 
             Note, this part takes a long time to run
Step 3/4: ... Finish! Use 175.98 s
</code></pre></div><p>生成的Glove词嵌入文件位于<code>output/Glove</code> 。</p>
<p><br><br></p>
<h2 id="三similarity">三、similarity</h2>
<p>四种相似度计算函数</p>
<ul>
<li>cosine_sim(text1, text2)  cos余弦相似</li>
<li>jaccard_sim(text1, text2)     jaccard相似</li>
<li>minedit_sim(text1, text2)  最小编辑距离相似度；</li>
<li>simple_sim(text1, text2) 更改变动算法</li>
</ul>
<p>算法实现参考自 <code>Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.</code></p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span> 


<span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;编程真好玩编程真好玩&#39;</span>
<span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;游戏真好玩编程真好玩啊&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">cosine_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">jaccard_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">minedit_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">simple_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0.82
0.67
2.00
0.87
</code></pre></div><p><br><br></p>
<h2 id="四text2mind">四、Text2Mind</h2>
<p>词嵌入中蕴含着人类的认知信息，以往的词嵌入大多是比较一个概念中两组反义词与某对象的距离计算认知信息。</p>
<p>- <strong>多个对象在某概念的远近</strong>，职业与性别，某个职业是否存在亲近男性，而排斥女性</p>
<p>- 多个对象在某<strong>概念的分量(fen，一声)的多少</strong>， 人类语言中留存着对不同动物体积的认知记忆，如小鼠大象。动物词在词向量空间中是否能留存着这种大小的记忆</p>
<p>这两种认知分别可以用向量距离、向量语义投影计算得来。</p>
<ul>
<li>tm.sematic_distance(words, c_words1, c_words2)  向量距离</li>
<li>tm.sematic_projection(words, c_words1, c_words2)  向量语义投影</li>
</ul>
<h3 id="41-tmsematic_distancewords-c_words1-c_words2">4.1 tm.sematic_distance(words, c_words1, c_words2)</h3>
<p>分别计算words与c_words1、c_words2语义距离，返回距离差值。</p>
<p>例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">male_concept = [&#39;male&#39;, &#39;man&#39;, &#39;he&#39;, &#39;him&#39;]
female_concept = [&#39;female&#39;, &#39;woman&#39;, &#39;she&#39;, &#39;her&#39;]
software_engineer_concept  = [&#39;engineer&#39;,  &#39;programming&#39;,  &#39;software&#39;]
d1 = distance(male_concept,  software_engineer_concept)
d2 = distance(female_concept,  software_engineer_concept)
</code></pre></div><p>如果d1-d2&lt;0，说明在语义空间中，software_engineer_concept更接近male_concept，更远离female_concept。</p>
<p>换言之，在该语料中，人们对软件工程师这一类工作，对女性存在刻板印象(偏见)。</p>
<p><strong>下载glove_w2v.6B.100d.txt</strong>链接: <a href="https://pan.baidu.com/s/1MMfQ7M0YCzL9Klp4zrlHBw">https://pan.baidu.com/s/1MMfQ7M0YCzL9Klp4zrlHBw</a> 提取码: 72l0</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1">#Note: this is a word2vec format model</span>
<span class="n">tm</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">Text2Mind</span><span class="p">(</span><span class="n">w2v_model_path</span><span class="o">=</span><span class="s1">&#39;glove_w2v.6B.100d.txt&#39;</span><span class="p">)</span>

<span class="n">engineers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;program&#39;</span><span class="p">,</span> <span class="s1">&#39;software&#39;</span><span class="p">,</span> <span class="s1">&#39;computer&#39;</span><span class="p">]</span>
<span class="n">mans</span> <span class="o">=</span>  <span class="p">[</span><span class="s2">&#34;man&#34;</span><span class="p">,</span> <span class="s2">&#34;he&#34;</span><span class="p">,</span> <span class="s2">&#34;him&#34;</span><span class="p">]</span>
<span class="n">womans</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;woman&#34;</span><span class="p">,</span> <span class="s2">&#34;she&#34;</span><span class="p">,</span> <span class="s2">&#34;her&#34;</span><span class="p">]</span>

<span class="c1">#在语义空间中，工程师更接近于男人，而不是女人。</span>
<span class="c1">#in semantic space, engineer is closer to man, other than woman.</span>
<span class="n">tm</span><span class="o">.</span><span class="n">sematic_distance</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">engineers</span><span class="p">,</span> 
                    <span class="n">c_words1</span><span class="o">=</span><span class="n">mans</span><span class="p">,</span> 
                    <span class="n">c_words2</span><span class="o">=</span><span class="n">womans</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">-0.38
</code></pre></div><p>-0.38 意味着工程师更接近于男人，而不是女人。</p>
<br>
<h3 id="42-tmsematic_projectionwords-c_words1-c_words2">4.2 tm.sematic_projection(words, c_words1, c_words2)</h3>
<p><strong>语义投影</strong>，根据两组反义词c_words1, c_words2构建一个概念(认知)向量, words中的每个词向量在概念向量中投影，即可得到认知信息。</p>
<p>分值越大，word越位于c_words2一侧。</p>
<p>下图是语义投影示例图，本文算法和图片均来自 &ldquo;Grand, G., Blank, I.A., Pereira, F. and Fedorenko, E., 2022. Semantic projection recovers rich human knowledge of multiple object features from word embeddings. <em>Nature Human Behaviour</em>, pp.1-13.&rdquo;</p>
<p><img loading="lazy" src="img/Nature_Semantic_projection_recovering_human_knowledge_of.png" alt=""  />
</p>
<p>例如，人类的语言中，存在尺寸、性别、年龄、政治、速度、财富等不同的概念。每个概念可以由两组反义词确定概念的向量方向。</p>
<p>以尺寸为例，动物在人类认知中可能存在体积尺寸大小差异。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">animals</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;mouse&#39;</span><span class="p">,</span> <span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="s1">&#39;horse&#39;</span><span class="p">,</span>  <span class="s1">&#39;pig&#39;</span><span class="p">,</span> <span class="s1">&#39;whale&#39;</span><span class="p">]</span>
<span class="n">smalls</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;small&#34;</span><span class="p">,</span> <span class="s2">&#34;little&#34;</span><span class="p">,</span> <span class="s2">&#34;tiny&#34;</span><span class="p">]</span>
<span class="n">bigs</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;large&#34;</span><span class="p">,</span> <span class="s2">&#34;big&#34;</span><span class="p">,</span> <span class="s2">&#34;huge&#34;</span><span class="p">]</span>

<span class="c1"># In size conception, mouse is smallest, horse is biggest.</span>
<span class="c1"># 在大小概念上，老鼠最小，马是最大的。</span>
<span class="n">tm</span><span class="o">.</span><span class="n">sematic_projection</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">animals</span><span class="p">,</span> 
                      <span class="n">c_words1</span><span class="o">=</span><span class="n">smalls</span><span class="p">,</span> 
                      <span class="n">c_words2</span><span class="o">=</span><span class="n">bigs</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;mouse&#39;, -1.68),
 (&#39;cat&#39;, -0.92),
 (&#39;pig&#39;, -0.46),
 (&#39;whale&#39;, -0.24),
 (&#39;horse&#39;, 0.4)]
</code></pre></div><p>在这几个动物尺寸的感知上，人类觉得老鼠体型是最小，马的体型是最大。</p>
<p><br><br></p>
<h2 id="引用说明">引用说明</h2>
<p>如果研究中使用cntext，请使用以下格式进行引用</p>
<h3 id="apalike">apalike</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Deng X., Nan P. (2022). cntext: a Python tool for text mining (version 1.7.9). DOI: 10.5281/zenodo.7063523 URL: https://github.com/hiDaDeng/cntext
</code></pre></div><h3 id="bibtex">bibtex</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">@misc{YourReferenceHere,
author = {Deng, Xudong and Nan, Peng},
doi = {10.5281/zenodo.7063523},
month = {9},
title = {cntext: a Python tool for text mining},
url = {https://github.com/hiDaDeng/cntext},
year = {2022}
}
</code></pre></div><h3 id="endnote">endnote</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">%0 Generic
%A Deng, Xudong
%A Nan, Peng
%D 2022
%K text mining
%K text analysi
%K social science
%K management science
%K semantic analysis
%R 10.5281/zenodo.7063523
%T cntext: a Python tool for text mining
%U https://github.com/hiDaDeng/cntext
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>sentence-transformer库 | 句子语义向量化</title>
      <link>https://textdata.cn/blog/sentence-transformer-tutorial/</link>
      <pubDate>Mon, 09 May 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/sentence-transformer-tutorial/</guid>
      <description>使用sentence-transformer库BERT技术，将句子语义向量化</description>
      <content:encoded><![CDATA[<blockquote>
<p>内容摘自</p>
<p>刘焕勇博客: <a href="https://liuhuanyong.github.io/">https://liuhuanyong.github.io/</a></p>
<p>原文地址: <a href="https://mp.weixin.qq.com/s/fkgk8l_Vd4YDU_K6G54F4Q">https://mp.weixin.qq.com/s/fkgk8l_Vd4YDU_K6G54F4Q</a></p>
<p>公众号: 老刘说NLP</p>
</blockquote>
<p>word2vec、glove是两种静态的词向量模型，即每个词语只有一个固定的向量表示。但在不同语境中，词语的语义会发生变化，按道理词向量也应该动态调整。相比word2vec、glove生成的静态词向量， BERT是一种动态的技术，可以根据上下文情景，得到语义变化的词向量。</p>
<p>HuggingFace网站提供了简易可用的数据集、丰富的预训练语言模型， 通过sentence-transformer库，我们可以使用HuggingFace内的预训练模型，得到不同情景的文本的语义向量。</p>
<p>HuggingFace网站  <a href="https://huggingface.co/">https://huggingface.co/</a></p>
<p><img loading="lazy" src="img/HuggingFace.png" alt=""  />
</p>
<br>
<h2 id="动态句向量">动态句向量</h2>
<p>sentence-transformer框架提供了一种简便的方法来计算句子和段落的向量表示（也称为句子嵌入）</p>
<p><img loading="lazy" src="img/sentence-transformer.png" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">sentence</span><span class="o">-</span><span class="n">transformers</span>
</code></pre></div><br>
<h2 id="代码">代码</h2>
<p><a href="sentence-transformer-tutorial.zip">click to download the code</a></p>
<p>使用huggingface中的distiluse-base-multilingual-cased与训练模型，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span><span class="p">,</span> <span class="n">util</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">SentenceTransformer</span><span class="p">(</span><span class="s1">&#39;distiluse-base-multilingual-cased&#39;</span><span class="p">)</span>
</code></pre></div><p>第一次运行上方的代码，需要运行一定的时间用于下载。下载完成后，我们使用同种语义的中英文句子，分别计算得到emb1和emb2两个句向量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">emb1 = model.encode(&#39;Natural language processing is a hard task for human&#39;)

emb2 = model.encode(&#39;自然语言处理对于人类来说是个困难的任务&#39;)
emb1
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([ 2.58186590e-02,  4.65703346e-02,  4.25276496e-02, -1.67875513e-02,
        5.56012690e-02, -3.44308838e-02, -6.53978735e-02,  1.77450478e-02,
       -3.47155109e-02,  2.86140274e-02,  2.48657260e-02,  7.94188876e-04,
        5.09755425e-02, -1.76107027e-02, -1.04308855e-02,  7.61642214e-03,
        ...
        4.28482369e-02,  1.76657233e-02, -5.83355911e-02,  1.92921527e-03,
        2.81221420e-02,  5.24400780e-03,  2.10703332e-02,  7.96715263e-03,
       -6.80630878e-02, -2.05304120e-02, -2.43293475e-02, -1.87458862e-02],
      dtype=float32)
</code></pre></div><p>在distiluse-base-multilingual-cased这种模型中， 不同语言的同义句应该具有类似的语义，那么cos相似度应该是很大的。越接近于1越相似；越接近于0，越不相似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cos_sim</span> <span class="o">=</span> <span class="n">util</span><span class="o">.</span><span class="n">pytorch_cos_sim</span><span class="p">(</span><span class="n">emb1</span><span class="p">,</span> <span class="n">emb2</span><span class="p">)</span>
<span class="n">cos_sim</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">tensor([[0.8960]])
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyEcharts库 | 绘制社交关系网络图</title>
      <link>https://textdata.cn/blog/pyecharts_graph_vis/</link>
      <pubDate>Sat, 07 May 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/pyecharts_graph_vis/</guid>
      <description>使用pyecharts绘制社交关系网络图</description>
      <content:encoded><![CDATA[<p>使用pyecharts绘制社交网络关系图，直接上代码。</p>
<h2 id="代码">代码</h2>
<p><a href="pyecharts_graph_vis_code.zip">点击下载代码</a></p>
<br>
<h2 id="base">base</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点1&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点2&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点3&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">30</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点4&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">40</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点5&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">50</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点6&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">40</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点7&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">30</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点8&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">},</span>
<span class="p">]</span>
<span class="n">links</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
        <span class="n">links</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">i</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">),</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">j</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">)})</span>

        
<span class="p">(</span>
    <span class="n">Graph</span><span class="p">()</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">links</span><span class="p">,</span> <span class="n">repulsion</span><span class="o">=</span><span class="mi">8000</span><span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Graph-基本示例&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;graph_base.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="graph_base.html">graph_base</a></p>
<p><img loading="lazy" src="img/base.png" alt=""  />
</p>
<br>
<h2 id="weibo">weibo</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/weibo.json&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">nodes</span><span class="p">,</span> <span class="n">links</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">cont</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">userl</span> <span class="o">=</span> <span class="n">j</span>


<span class="p">(</span>
    <span class="n">Graph</span><span class="p">()</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="p">,</span>
        <span class="n">links</span><span class="p">,</span>
        <span class="n">categories</span><span class="p">,</span>
        <span class="n">repulsion</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">curve</span><span class="o">=</span><span class="mf">0.2</span><span class="p">),</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Graph-微博转发关系图&#34;</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;graph_weibo.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="graph_weibo.html">graph_weibo</a></p>
<p><img loading="lazy" src="img/weibo.png" alt=""  />
</p>
<br>
<h2 id="npm">npm</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">Gallery 使用 pyecharts 1.1.0
</span><span class="s2">参考地址: https://echarts.apache.org/examples/editor.html?c=graph-npm
</span><span class="s2">
</span><span class="s2">目前无法实现的功能:
</span><span class="s2">
</span><span class="s2">1、暂无
</span><span class="s2">&#34;&#34;&#34;</span>




<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/npmdepgraph.min10.json&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>

    
<span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s2">&#34;x&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;x&#34;</span><span class="p">],</span>
        <span class="s2">&#34;y&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">],</span>
        <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;id&#34;</span><span class="p">],</span>
        <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;label&#34;</span><span class="p">],</span>
        <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;size&#34;</span><span class="p">],</span>
        <span class="s2">&#34;itemStyle&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;normal&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;color&#34;</span><span class="p">]}},</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s2">&#34;nodes&#34;</span><span class="p">]</span>
<span class="p">]</span>

<span class="n">edges</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">edge</span><span class="p">[</span><span class="s2">&#34;sourceID&#34;</span><span class="p">],</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">edge</span><span class="p">[</span><span class="s2">&#34;targetID&#34;</span><span class="p">]}</span> <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s2">&#34;edges&#34;</span><span class="p">]</span>
<span class="p">]</span>



<span class="p">(</span>
    <span class="n">Graph</span><span class="p">(</span><span class="n">init_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">InitOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="s2">&#34;1600px&#34;</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="s2">&#34;800px&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="o">=</span><span class="n">nodes</span><span class="p">,</span>
        <span class="n">links</span><span class="o">=</span><span class="n">edges</span><span class="p">,</span>
        <span class="n">layout</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span>
        <span class="n">is_roam</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">is_focusnode</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">curve</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;NPM Dependencies&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;npm_dependencies.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="npm_dependencies.html">npm_dependencies</a></p>
<p><img loading="lazy" src="img/npm.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SimpleTransformers库 | 使用BERT实现文本向量化</title>
      <link>https://textdata.cn/blog/simple_transformer/</link>
      <pubDate>Thu, 05 May 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/simple_transformer/</guid>
      <description>基于BERT预训练模型，对文本进行向量化</description>
      <content:encoded><![CDATA[<p><code>Simple Transformers</code> 库基于 HuggingFace 的 <a href="https://github.com/huggingface/transformers">Transformers</a> 库，可让您快速训练和评估 Transformer 模型， <strong>初始化</strong>、<strong>训练</strong>和<strong>评估</strong>模型只需要 3 行代码。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install simpletransformers
</code></pre></div><p><strong>Simple Transformer</strong> 模型在构建时考虑了特定的自然语言处理 (NLP) 任务。 每个这样的模型都配备了旨在最适合它们打算执行的任务的特性和功能。 使用 Simple Transformers 模型的高级过程遵循相同的模式。</p>
<ol>
<li>初始化一个特定于任务的模型
2.用<code>train_model()</code>训练模型</li>
<li>使用 <code>eval_model()</code> 评估模型</li>
<li>使用 <code>predict()</code> 对（未标记的）数据进行预测</li>
</ol>
<p>但是，不同模型之间存在必要的差异，以确保它们非常适合其预期任务。 关键差异通常是输入/输出数据格式和任何任务特定功能/配置选项的差异。 这些都可以在每个任务的文档部分中找到。</p>
<p>当前实现的特定于任务的“Simple Transformer”模型及其任务如下所示。</p>
<table>
<thead>
<tr>
<th>Task</th>
<th>Model</th>
</tr>
</thead>
<tbody>
<tr>
<td>Binary and multi-class text classification文本二分类、多分类</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td>Conversational AI (chatbot training)对话机器人训练</td>
<td><code>ConvAIModel</code></td>
</tr>
<tr>
<td>Language generation语言生成</td>
<td><code>LanguageGenerationModel</code></td>
</tr>
<tr>
<td>Language model training/fine-tuning语言模型训练、微调</td>
<td><code>LanguageModelingModel</code></td>
</tr>
<tr>
<td>Multi-label text classification多类别文本分类</td>
<td><code>MultiLabelClassificationModel</code></td>
</tr>
<tr>
<td>Multi-modal classification (text and image data combined)多模态分类</td>
<td><code>MultiModalClassificationModel</code></td>
</tr>
<tr>
<td>Named entity recognition命名实体识别</td>
<td><code>NERModel</code></td>
</tr>
<tr>
<td>Question answering问答</td>
<td><code>QuestionAnsweringModel</code></td>
</tr>
<tr>
<td>Regression回归</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td>Sentence-pair classification句对分类</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td><strong>Text Representation Generation文本表征生成</strong></td>
<td><strong>RepresentationModel</strong></td>
</tr>
<tr>
<td>Document Retrieval文档抽取</td>
<td><code>RetrievalModel</code></td>
</tr>
</tbody>
</table>
<ul>
<li><strong>有关如何使用这些模型的更多信息，请参阅 <a href="https://simpletransformers.ai/">docs</a> 中的相关部分。</strong></li>
<li>示例脚本可以在 <a href="https://github.com/ThilinaRajapakse/simpletransformers/tree/master/examples">examples</a> 目录中找到。</li>
<li>有关项目的最新更改，请参阅 <a href="https://github.com/ThilinaRajapakse/simpletransformers/blob/master/CHANGELOG.md">Changelog</a>。</li>
</ul>
<h2 id="生成句子嵌入">生成句子嵌入</h2>
<p>使用huggingface网站https://huggingface.co/ 提供的模型</p>
<ul>
<li>英文模型 bert-base-uncased</li>
<li>中文模型 bert-base-chinese</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">simpletransformers.language_representation</span> <span class="kn">import</span> <span class="n">RepresentationModel</span>
<span class="n">sentences</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Machine Learning and Deep Learning are part of AI&#34;</span><span class="p">,</span> 
             <span class="s2">&#34;Data Science will excel in future&#34;</span><span class="p">]</span> <span class="c1">#it should always be a list</span>


<span class="n">model</span> <span class="o">=</span> <span class="n">RepresentationModel</span><span class="p">(</span>
        <span class="n">model_type</span><span class="o">=</span><span class="s2">&#34;bert&#34;</span><span class="p">,</span>
        <span class="n">model_name</span><span class="o">=</span><span class="s2">&#34;bert-base-uncased&#34;</span><span class="p">,</span> <span class="c1">#英文模型</span>
        <span class="n">use_cuda</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="n">sentence_vectors</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">encode_sentences</span><span class="p">(</span><span class="n">sentences</span><span class="p">,</span> <span class="n">combine_strategy</span><span class="o">=</span><span class="s2">&#34;mean&#34;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">sentence_vectors</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sentence_vectors</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(2, 768)

array([[-0.10800573,  0.19615649, -0.10756102, ..., -0.26362818,
         0.56403756, -0.30985302],
       [ 0.0201617 , -0.19381572,  0.4360792 , ..., -0.2979438 ,
         0.04984972, -0.702381  ]], dtype=float32)
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>geopy库 | 地理编码计算距离</title>
      <link>https://textdata.cn/blog/geopy_distance_calculate/</link>
      <pubDate>Thu, 28 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/geopy_distance_calculate/</guid>
      <description>地理信息数据分析，经纬度距离计算</description>
      <content:encoded><![CDATA[<h1 id="geopy">geopy</h1>
<p>geopy 是几个流行的地理编码网络服务的 Python 客户端。</p>
<p>geopy 使 Python 开发人员可以使用第三方地理编码器和其他数据源轻松定位全球地址、城市、国家和地标的坐标。</p>
<p>geopy 包括用于 <a href="https://nominatim.org/">OpenStreetMap Nominatim</a>、<a href="https://developers.google.com/maps/documentation/geocoding/">Google Geocoding API (V3)</a> 的地理编码器类和许多 其他地理编码服务。 完整列表可在 <a href="https://geopy.readthedocs.io/en/latest/#geocoders">Geocoders 文档部分</a> 上找到。 地理编码器类位于 <a href="https://github.com/geopy/geopy/tree/master/geopy/geocoders">geopy.geocoders</a>。</p>
<p>geopy 针对 CPython（版本 3.5、3.6、3.7、3.8、3.9）和 PyPy3 进行了测试。 geopy 1.x 系列还支持 CPython 2.7、3.4 和 PyPy2。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install geopy
</code></pre></div><h2 id="geocoding">Geocoding</h2>
<p>要将查询地理定位到地址和坐标：</p>
<p>首先需要在https://www.openstreetmap.org/注册账号，注册一个app名。注册好的app名用于填充user_agent</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">geopy.geocoders</span> <span class="kn">import</span> <span class="n">Nominatim</span>

<span class="n">geolocator</span> <span class="o">=</span> <span class="n">Nominatim</span><span class="p">(</span><span class="n">user_agent</span><span class="o">=</span><span class="s2">&#34;specify_your_app_name_here&#34;</span><span class="p">)</span>
<span class="n">location</span> <span class="o">=</span> <span class="n">geolocator</span><span class="o">.</span><span class="n">geocode</span><span class="p">(</span><span class="s2">&#34;175 5th Avenue NYC&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">address</span><span class="p">)</span>
<span class="nb">print</span><span class="p">((</span><span class="n">location</span><span class="o">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">location</span><span class="o">.</span><span class="n">longitude</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Flatiron Building, 175, 5th Avenue, Flatiron, New York, NYC, New York, ...
(40.7410861, -73.9896297241625)
{&#39;place_id&#39;: &#39;9167009604&#39;, &#39;type&#39;: &#39;attraction&#39;, ...}
</code></pre></div><p><br><br></p>
<p>为了找到地址对应的经纬度</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">geopy.geocoders</span> <span class="kn">import</span> <span class="n">Nominatim</span>

<span class="n">geolocator</span> <span class="o">=</span> <span class="n">Nominatim</span><span class="p">(</span><span class="n">user_agent</span><span class="o">=</span><span class="s2">&#34;specify_your_app_name_here&#34;</span><span class="p">)</span>
<span class="n">location</span> <span class="o">=</span> <span class="n">geolocator</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="s2">&#34;52.509669, 13.376294&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">address</span><span class="p">)</span>
<span class="nb">print</span><span class="p">((</span><span class="n">location</span><span class="o">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">location</span><span class="o">.</span><span class="n">longitude</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">raw</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Potsdamer Platz, Mitte, Berlin, 10117, Deutschland, European Union
(52.5094982, 13.3765983)
{&#39;place_id&#39;: &#39;654513&#39;, &#39;osm_type&#39;: &#39;node&#39;, ...}
</code></pre></div><p><br><br></p>
<h2 id="测量距离">测量距离</h2>
<p>Geopy 可以使用 <a href="https://en.wikipedia.org/wiki/Geodesics_on_an_ellipsoid">geodesic distance</a> 或 <a href="https://en.wikipedia.org/wiki/">great-circle distance</a> 计算两点之间的测地线距离 Great-circle_distance），默认的测地线距离可用作函数 geopy.distance.distance。</p>
<p>这是测地线距离的示例用法，采用一对 <code>(lat, lon)</code> 元组：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">geodesic</span>
<span class="n">newport_ri</span> <span class="o">=</span> <span class="p">(</span><span class="mf">41.49008</span><span class="p">,</span> <span class="o">-</span><span class="mf">71.312796</span><span class="p">)</span>
<span class="n">cleveland_oh</span> <span class="o">=</span> <span class="p">(</span><span class="mf">41.499498</span><span class="p">,</span> <span class="o">-</span><span class="mf">81.695391</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">geodesic</span><span class="p">(</span><span class="n">newport_ri</span><span class="p">,</span> <span class="n">cleveland_oh</span><span class="p">)</span><span class="o">.</span><span class="n">miles</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">538.390445368
</code></pre></div><br>
<p>使用great-cricle距离算法，同时采用一对 <code>(lat, lon)</code> 元组：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">great_circle</span>
<span class="n">newport_ri</span> <span class="o">=</span> <span class="p">(</span><span class="mf">41.49008</span><span class="p">,</span> <span class="o">-</span><span class="mf">71.312796</span><span class="p">)</span>
<span class="n">cleveland_oh</span> <span class="o">=</span> <span class="p">(</span><span class="mf">41.499498</span><span class="p">,</span> <span class="o">-</span><span class="mf">81.695391</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">great_circle</span><span class="p">(</span><span class="n">newport_ri</span><span class="p">,</span> <span class="n">cleveland_oh</span><span class="p">)</span><span class="o">.</span><span class="n">miles</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">536.997990696
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TransBigData库 | 出租车GPS数据处理</title>
      <link>https://textdata.cn/blog/trans_big_data_examples_taxi_data/</link>
      <pubDate>Thu, 28 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/trans_big_data_examples_taxi_data/</guid>
      <description>地理信息数据处理包TransBigData</description>
      <content:encoded><![CDATA[<h2 id="taxi-gps数据处理">Taxi GPS数据处理</h2>
<p>B站-同济小旭学长</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1na411i7sd&page=3"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="taxi_code_trans_big_data.zip">download the code</a></p>
<br>
<p>在这个例子中，我们将介绍如何使用 TransBigData 包来高效处理 Taxi GPS 数据。首先，导入 TransBigData 并使用 pandas 读取数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">mapclassify</span><span class="o">==</span><span class="mf">2.4.3</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">transbigdata</span><span class="o">==</span><span class="mf">0.4.7</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">keplergl</span><span class="o">==</span><span class="mf">0.3.2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">transbigdata</span> <span class="k">as</span> <span class="nn">tbd</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="c1"># Read data</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/TaxiData-Sample.csv&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
<span class="n">data</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">,</span> <span class="s1">&#39;Speed&#39;</span><span class="p">]</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df1.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Read the GeoDataFrame of the study area</span>
<span class="n">sz</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;data/sz.json&#39;</span><span class="p">)</span>
<span class="n">sz</span><span class="o">.</span><span class="n">crs</span> <span class="o">=</span> <span class="kc">None</span>
<span class="n">sz</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> 
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">sz</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">);</span>
</code></pre></div><p><img loading="lazy" src="img/output_4_0.png" alt="png"  />
</p>
<br>
<h2 id="数据预处理">数据预处理</h2>
<p>TransBigData 集成了几种常用的数据预处理方法。 使用<code>tbd.clean_outofshape</code>方法，给定研究区域的数据和GeoDataFrame，可以删除研究区域外的数据。 <code>tbd.clean_taxi_status</code> 方法可以过滤掉乘客状态（OpenStatus）瞬时变化的数据。 使用预处理方式时，需要将对应的列名作为参数传入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Data Preprocessing</span>
<span class="c1"># Delete the data outside of the study area</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">clean_outofshape</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">sz</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">],</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>

<span class="c1"># Delete the data with instantaneous changes in passenger status</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">clean_taxi_status</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
</code></pre></div><br>
<h2 id="数据网格化">数据网格化</h2>
<p>数据分布最基本的表达方式是地理网格的形式；</p>
<p>数据网格化后，每个 GPS 数据点映射到相应的网格。 对于数据网格化，首先需要确定网格化参数（可以理解为定义一个网格坐标系）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 数据网格化</span>
<span class="c1"># 定义边界并生成网格参数（经纬度）</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">[</span><span class="mf">113.6</span><span class="p">,</span> <span class="mf">22.4</span><span class="p">,</span> <span class="mf">114.8</span><span class="p">,</span> <span class="mf">22.9</span><span class="p">]</span>
<span class="n">params</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">area_to_params</span><span class="p">(</span><span class="n">bounds</span><span class="p">,</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</code></pre></div><pre><code>{'slon': 113.6, 'slat': 22.4, 'deltalon': 0.004872390756896538, 'deltalat': 0.004496605206422906, 'theta': 0, 'method': 'rect', 'gridsize': 500}
</code></pre>
<p>获得网格化参数后，下一步就是将 GPS 映射到其对应的网格上。</p>
<p>使用 <code>tbd.GPS_to_grids</code>，它将生成 <code>LONCOL</code> 列和 <code>LATCOL</code> 列。 两列一起可以指定一个网格：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Mapping GPS data to grids</span>
<span class="n">data</span><span class="p">[</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;LATCOL&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">GPS_to_grid</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Lng&#39;</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Lat&#39;</span><span class="p">],</span> <span class="n">params</span><span class="p">)</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df3.png" alt="png"  />
</p>
<p>计算每个网格中的数据量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Aggregate data into grids</span>
<span class="n">datatest</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">,</span> <span class="s1">&#39;LATCOL&#39;</span><span class="p">])[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df4.png" alt="png"  />
</p>
<p>将生成网格的geometry并将其转换为 GeoDataFrame</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Generate the geometry for grids</span>
<span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">grid_to_polygon</span><span class="p">([</span><span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;LONCOL&#39;</span><span class="p">],</span> <span class="n">datatest</span><span class="p">[</span><span class="s1">&#39;LATCOL&#39;</span><span class="p">]],</span> <span class="n">params</span><span class="p">)</span>

<span class="c1"># Change it into GeoDataFrame</span>
<span class="c1"># import geopandas as gpd</span>
<span class="n">datatest</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">GeoDataFrame</span><span class="p">(</span><span class="n">datatest</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df5.png" alt="png"  />
</p>
<p>绘制生成的网格：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span> 
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>

<span class="c1"># tbd.plot_map(plt, bounds, zoom=10, style=4)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_16_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="c1"># plt.legend(fontsize=10)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_17_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">datatest</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;OrRd&#39;</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="c1"># plt.legend(fontsize=10)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Counting of Taxi GPS Trajectory Points&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_18_0.png" alt="png"  />

​</p>
<br>
<h2 id="origin-destinationod-提取和汇总出租车行程">Origin-destination(OD) 提取和汇总出租车行程</h2>
<p>使用 <code>tbd.taxigps_to_od</code> 方法并传入对应的列名来提取出租车行程 OD：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Extract taxi OD from GPS data</span>
<span class="n">oddata</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">taxigps_to_od</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">col</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> <span class="s1">&#39;Time&#39;</span><span class="p">,</span> <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
<span class="n">oddata</span>
</code></pre></div><p><img loading="lazy" src="img/df6.png" alt="png"  />
</p>
<p>聚合提取的 OD 并生成 LineString GeoDataFrame</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Gridding and aggragate data</span>
<span class="n">od_gdf</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">odagg_grid</span><span class="p">(</span><span class="n">oddata</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df7.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Plot the grids</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="c1"># data_grid_count.plot(ax=ax1, column=&#39;VehicleNum&#39;, legend=True, cmap=&#39;OrRd&#39;, scheme=&#39;quantiles&#39;)</span>

<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;quantiles&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD Trips&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_23_0.png" alt="png"  />

​</p>
<br>
<h2 id="将-od-聚合成多边形">将 OD 聚合成多边形</h2>
<p><code>TransBigData</code> 还提供了将 OD 聚合成多边形的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Aggragate OD data to polygons </span>
<span class="c1"># without passing gridding parameters, the algorithm will map the data </span>
<span class="c1"># to polygons directly using their coordinates</span>
<span class="n">od_gdf</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">odagg_shape</span><span class="p">(</span><span class="n">oddata</span><span class="p">,</span> <span class="n">sz</span><span class="p">,</span> <span class="n">round_accuracy</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span> <span class="c1"># 确定图形高为6，宽为8；图形清晰度</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD Trips&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">);</span>
</code></pre></div><p><img loading="lazy" src="img/output_25_0.png" alt="png"  />
</p>
<br>
<h2 id="基于-matplotlib-的地图绘制">基于 Matplotlib 的地图绘制</h2>
<p><code>TransBigData</code> 还在 matplotlib 中提供底图加载。 在使用此方法之前，您需要设置您的 mapboxtoken 和底图的存储位置，请参见：<a href="https://transbigdata.readthedocs.io/en/latest/plot_map.html">此链接</a>。<code>tbd.plot_map</code> 添加底图和 tbd.plotscale 以添加比例和指南针：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Create figure</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">sca</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span>

<span class="c1"># Load basemap</span>
<span class="n">tbd</span><span class="o">.</span><span class="n">plot_map</span><span class="p">(</span><span class="n">plt</span><span class="p">,</span> <span class="n">bounds</span><span class="p">,</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

<span class="c1"># Define an ax for colorbar</span>
<span class="n">cax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">axes</span><span class="p">([</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.33</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;OD</span><span class="se">\n</span><span class="s1">Matrix&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">sca</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span>

<span class="c1"># Plot the OD</span>
<span class="n">od_gdf</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span> <span class="n">cax</span><span class="o">=</span><span class="n">cax</span><span class="p">,</span> <span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># Plot the polygons</span>
<span class="n">sz</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">facecolor</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">),</span> <span class="n">linewidths</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># Add compass and scale</span>
<span class="n">tbd</span><span class="o">.</span><span class="n">plotscale</span><span class="p">(</span><span class="n">ax</span><span class="p">,</span> <span class="n">bounds</span><span class="o">=</span><span class="n">bounds</span><span class="p">,</span> <span class="n">textsize</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">compasssize</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">accuracy</span><span class="o">=</span><span class="mi">2000</span><span class="p">,</span> <span class="n">rect</span><span class="o">=</span><span class="p">[</span><span class="mf">0.06</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">bounds</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">bounds</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_27_0.png" alt="png"  />

​</p>
<br>
## 提取出租车轨迹
使用`the.taxigps_traj_point`方法，输入GPS数据和OD数据，可以提取轨迹点
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data_deliver</span><span class="p">,</span> <span class="n">data_idle</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">taxigps_traj_point</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">oddata</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;VehicleNum&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Time&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Lng&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;Lat&#39;</span><span class="p">,</span> 
                                                                  <span class="s1">&#39;OpenStatus&#39;</span><span class="p">])</span>
<span class="n">data_deliver</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df8.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data_idle</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df9.png" alt="png"  />
</p>
<p>生成轨迹图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">traj_deliver</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">points_to_traj</span><span class="p">(</span><span class="n">data_deliver</span><span class="p">)</span>
<span class="n">traj_deliver</span><span class="o">.</span><span class="n">plot</span><span class="p">();</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_33_0.png" alt="png"  />

​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">traj_idle</span> <span class="o">=</span> <span class="n">tbd</span><span class="o">.</span><span class="n">points_to_traj</span><span class="p">(</span><span class="n">data_idle</span><span class="p">[</span><span class="n">data_idle</span><span class="p">[</span><span class="s1">&#39;OpenStatus&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">])</span>
<span class="n">traj_idle</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div><p>​ <br>
<img loading="lazy" src="img/output_34_1.png" alt="png"  />

​</p>
<br>
<h2 id="轨迹可视化trajectories-visualization">轨迹可视化Trajectories visualization</h2>
<p><code>TransBigData</code> 的内置可视化功能利用了可视化包 <code>keplergl</code> ，使用简单代码即可在 Jupyter notebook 上交互式地显示轨迹数据。</p>
<p>要使用此方法，请为 python 安装 <code>keplergl</code> 包：</p>
<blockquote>
<p>pip3 install keplergl</p>
</blockquote>
<p>安装后，需要按照 <a href="https://transbigdata.readthedocs.io/en/latest/visualization.html">link</a> 配置jupyter notebook</p>
<p>Visualization of trajectory data:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">tbd</span><span class="o">.</span><span class="n">visualization_trip</span><span class="p">(</span><span class="n">data_deliver</span><span class="p">)</span>
</code></pre></div><pre><code>Processing trajectory data...
Generate visualization...
User Guide: https://docs.kepler.gl/docs/keplergl-jupyter
</code></pre>
<p><img loading="lazy" src="img/trajec.png" alt=""  />
</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>中文词向量资源汇总 &amp; 使用方法</title>
      <link>https://textdata.cn/blog/embeddings_resource_usage_method/</link>
      <pubDate>Thu, 21 Apr 2022 15:40:10 +0600</pubDate>
      
      <guid>/blog/embeddings_resource_usage_method/</guid>
      <description>数十种中文词向量模型资源下载&amp;amp;使用方法。Dozens of Chinese word vector model resource downloads &amp;amp; usage methods</description>
      <content:encoded><![CDATA[<br>
<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/Embedding/Chinese-Word-Vectors">https://github.com/Embedding/Chinese-Word-Vectors</a></p>
<p>Chinese-Word-Vectors项目提供超过100种中文词向量，其中包括不同的表示方式（稠密SGNS和稀疏PPMI）、不同的上下文特征（词、N元组、字等等）、以及不同的训练语料。获取预训练词向量非常方便，下载后即可用于下游任务。</p>
<br>
<h2 id="参考文献">参考文献</h2>
<p>如果使用了本项目的词向量和CA8数据集请进行如下引用：</p>
<p>Shen Li, Zhe Zhao, Renfen Hu, Wensi Li, Tao Liu, Xiaoyong Du, <a href="http://aclweb.org/anthology/P18-2023"><em>Analogical Reasoning on Chinese Morphological and Semantic Relations</em></a>, ACL 2018.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">@InProceedings{P18-2023,
  author =  &#34;Li, Shen
    and Zhao, Zhe
    and Hu, Renfen
    and Li, Wensi
    and Liu, Tao
    and Du, Xiaoyong&#34;,
  title =   &#34;Analogical Reasoning on Chinese Morphological and Semantic Relations&#34;,
  booktitle =   &#34;Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers)&#34;,
  year =  &#34;2018&#34;,
  publisher =   &#34;Association for Computational Linguistics&#34;,
  pages =   &#34;138--143&#34;,
  location =  &#34;Melbourne, Australia&#34;,
  url =   &#34;http://aclweb.org/anthology/P18-2023&#34;
}
</code></pre></div><br>
<h3 id="不同领域">不同领域</h3>
<p>下列词向量基于不同的表示方式、不同的上下文特征以及不同领域的语料训练而成。</p>
<table align="center">
    <tr align="center">
        <td colspan="5"><b>Word2vec / Skip-Gram with Negative Sampling (SGNS)</b></td>
    </tr>
    <tr align="center">
        <td rowspan="2">语料</td>
        <td colspan="4">上下文特征</td>
    </tr>
    <tr  align="center">
      <td>词</td>
      <td>词 + N元组</td>
      <td>词 + 字</td>
      <td>词 + 字 + N元组</td>
    </tr>
    <tr  align="center">
      <td>Baidu Encyclopedia 百度百科</td>
      <td><a href="https://pan.baidu.com/s/1Rn7LtTH0n7SHyHPfjRHbkg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1XEmP_0FkQwOjipCjI2OPEw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1eeCS7uD3e_qVN8rPwmXhAw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1IiIbQGJ_AooTj5s8aZYcvA">300d</a> / PWD: 5555</td>
    </tr>
    <tr  align="center">
      <td>Wikipedia_zh 中文维基百科</td>
      <td><a href="https://pan.baidu.com/s/1AmXYWVgkxrG4GokevPtNgA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1ZKePwxwsDdzNrfkc6WKdGQ">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1ZBVVD4mUSUuXOxlZ3V71ZA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/19wQrclyynOnco3JBvnI5pA">300d</td>
    </tr>
    <tr  align="center">
      <td>People's Daily News 人民日报</td>
      <td><a href="https://pan.baidu.com/s/19sqMz-JAhhxh3o6ecvQxQw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1upPkA8KJnxTZBfjuNDtaeQ">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1BvKk2QjbtQMch7EISppW2A">300d</a></td>
      <td><a href="https://pan.baidu.com/s/19Vso_k79FZb5OZCWQPAnFQ">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Sogou News 搜狗新闻</td>
      <td><a href="https://pan.baidu.com/s/1tUghuTno5yOvOx4LXA9-wg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/13yVrXeGYkxdGW3P6juiQmA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1pUqyn7mnPcUmzxT64gGpSw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1svFOwFBKnnlsqrF1t99Lnw">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Financial News 金融新闻</td>
      <td><a href="https://pan.baidu.com/s/1EhtsbDa3ekzZPODWNLHcXA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1FcPHv7S4vUgnL7WeWf4_PA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/13CAxY5ffRFuOcHZu8VmArw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1sqvrUtGBAZ7YWEsGz41DRQ">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Zhihu_QA 知乎问答 </td>
      <td><a href="https://pan.baidu.com/s/1VGOs0RH7DXE5vRrtw6boQA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1OQ6fQLCgqT43WTwh5fh_lg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1_xogqF9kJT6tmQHSAYrYeg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1Fo27Lv_0nz8FXg-xbOz14Q">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Weibo 微博</td>
      <td><a href="https://pan.baidu.com/s/1zbuUJEEEpZRNHxZ7Gezzmw">300d</a></td>
      <td><a href="https://pan.baidu.com/s/11PWBcvruXEDvKf2TiIXntg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/10bhJpaXMCUK02nHvRAttqA">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1FHl_bQkYucvVk-j2KG4dxA">300d</a></td>
    </tr>
    <tr  align="center">
      <td>Literature 文学作品</td>
      <td><a href="https://pan.baidu.com/s/1ciq8iXtcrHpu3ir_VhK0zg">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1Oa4CkPd8o2xd6LEAaa4gmg">300d</a> / PWD: z5b4</td>
      <td><a href="https://pan.baidu.com/s/1IG8IxNp2s7vVklz-vyZR9A">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1SEOKrJYS14HpqIaQT462kA">300d</a> / PWD: yenb</td>
    </tr>
    <tr  align="center">
      <td>Complete Library in Four Sections<br />四库全书<sup>*</sup></td>
      <td><a href="https://pan.baidu.com/s/1vPSeUsSiWYXEWAuokLR0qQ">300d</a></td>
      <td><a href="https://pan.baidu.com/s/1sS9E7sclvS_UZcBgHN7xLQ">300d</a></td>
      <td>NAN</td>
      <td>NAN</td>
    </tr>
    <tr  align="center">
      <td>Mixed-large 综合<br>Baidu Netdisk / Google Drive</td>
      <td>
        <a href="https://pan.baidu.com/s/1luy-GlTdqqvJ3j-A4FcIOw">300d</a><br>
        <a href="https://drive.google.com/open?id=1Zh9ZCEu8_eSQ-qkYVQufQDNKPC4mtEKR">300d</a>
      </td>
      <td>
        <a href="https://pan.baidu.com/s/1oJol-GaRMk4-8Ejpzxo6Gw">300d</a><br>
        <a href="https://drive.google.com/open?id=1WUU9LnoAjs--1E_WqcghLJ-Pp8bb38oS">300d</a>
      </td>
      <td>
        <a href="https://pan.baidu.com/s/1DjIGENlhRbsVyHW-caRePg">300d</a><br>
        <a href="https://drive.google.com/open?id=1aVAK0Z2E5DkdIH6-JHbiWSL5dbAcz6c3">300d</a>
      </td>
      <td>
        <a href="https://pan.baidu.com/s/14JP1gD7hcmsWdSpTvA3vKA">300d</a><br>
        <a href="https://drive.google.com/open?id=1kSAl4_AOg3_6ayU7KRM0Nk66uGdSZdnk">300d</a>
      </td>
    </tr>
</table>
<table align="center">
    <tr align="center">
        <td colspan="5"><b>Positive Pointwise Mutual Information (PPMI)</b></td>
    </tr>
    <tr align="center">
        <td rowspan="2">语料</td>
        <td colspan="4">上下文特征</td>
    </tr>
    <tr  align="center">
      <td>词</td>
      <td>词 + N元组</td>
      <td>词 + 字</td>
      <td>词 + 字 + N元组</td>
    </tr>
    <tr  align="center">
      <td>Baidu Encyclopedia 百度百科</td>
      <td><a href="https://pan.baidu.com/s/1_itcjrQawCwcURa7WZLPOA">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1cEZzN1S2senwWSyHOnL7YQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1KcfFdyO0-kE9S9CwzIisfw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1FXYM3CY161_4QMgiH8vasQ">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Wikipedia_zh 中文维基百科</td>
      <td><a href="https://pan.baidu.com/s/1MGXRrc54nITPzQ7sfEUjMA">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1mtxZna8UJ7xBIxhBFntumQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1dDImpAx41V73Byl2julOGA">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1bsBQHXFpxMHGBexYof1_rw">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>People's Daily News 人民日报</td>
      <td><a href="https://pan.baidu.com/s/1NLr1K7aapU2sYBvzbVny5g">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1LJl3Br0ccGDHP0XX2k3pVw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1GQQXGMn1AHh-BlifT0JD2g">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1Xm9Ec3O3rJ6ayrwVwonC7g">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Sogou News 搜狗新闻</td>
      <td><a href="https://pan.baidu.com/s/1ECA51CZLp9_JB_me7YZ9-Q">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1FO39ZYy1mStERf_b53Y_yQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1lLBFBk8nn3spFAvKY9IJ6A">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1f-dLQZlZo_-B5ZKcPIc6rw">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Financial News 金融新闻</td>
      <td><a href="https://pan.baidu.com/s/10wtgdmrTsTrjpSDvI0KzOw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1b6zjvhOIqTdACSSbriisVw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1w24vCfgqcoJvPxsB5VrRvw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1b9BPiDRhiEZ-6ybTcovrqQ">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Zhihu_QA 知乎问答 </td>
      <td><a href="https://pan.baidu.com/s/1VaUP3YJC0IZKTbJ-1_8HZg">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1g39PKwT0kSmpneKOgXR5YQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1d8Bsuak0fyXxQOVUiNr-2w">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1D5fteBX0Vy4czEqpxXjlrQ">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Weibo 微博</td>
      <td><a href="https://pan.baidu.com/s/15O2EbToOzjNSkzJwAOk_Ug">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/11Dqywn0hfMhysto7bZS1Dw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1wY-7mfV6nwDj_tru6W9h4Q">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1DMW-MgLApbQnWwDd-pT_qw">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Literature 文学作品</td>
      <td><a href="https://pan.baidu.com/s/1HTHhlr8zvzhTwed7dO0sDg">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1jAuGJBxKqgapt__urGsBOQ">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/173AJfCoAV0ZA8Z31tKBdTA">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1dFCxke_Su3lLsuwZr7co3A">Sparse</a></td>
    </tr>
    <tr  align="center">
      <td>Complete Library in Four Sections<br />四库全书<sup>*</sup></td>
      <td><a href="https://pan.baidu.com/s/1NJ1Gc99oE0-GV0QxBqy-qw">Sparse</a></td>
      <td><a href="https://pan.baidu.com/s/1YGEgyXIbw0O4NtoM1ohjdA">Sparse</a></td>
      <td>NAN</td>
      <td>NAN</td>
    </tr>
    </tr>
    <tr  align="center">
      <td>Mixed-large 综合</td>
      <td>Sparse</td>
      <td>Sparse</td>
      <td>Sparse</td>
      <td>Sparse</td>
    </tr>
</table>
<p><sup>*</sup>由于古汉语中绝大部份词均为单字词，因此只需字向量。</p>
<br>
<h2 id="语料">语料</h2>
<p>项目花费了大量精力来收集了来自多个领域的语料。所有的文本数据均移除了html和xml标记，仅保留了纯文本。之后采用了<a href="https://github.com/hankcs/HanLP">HanLP(v_1.5.3)</a>对文本进行了分词。此外，我们将繁体中文用<a href="https://github.com/BYVoid/OpenCC">Open Chinese Convert (OpenCC)</a>转换为了简体中文。更详细的语料信息如下所示：</p>
<table align="center">
	<tr align="center">
		<td><b>语料</b></td>
		<td><b>大小</b></td>
		<td><b>词数量</b></td>
		<td><b>词汇量</b></td>
		<td><b>详情</b></td>
	</tr>
	<tr align="center">
		<td>Baidu Encyclopedia<br />百度百科</td>
		<td>4.1G</td>
		<td>745M</td>
		<td>5422K</td>
		<td>中文百科<br />https://baike.baidu.com/</td>
	</tr>
	<tr align="center">
		<td>Wikipedia_zh<br />中文维基百科</td>
		<td>1.3G</td>
		<td>223M</td>
		<td>2129K</td>
		<td>中文维基百科<br />https://dumps.wikimedia.org/</td>
	</tr>
	<tr align="center">
		<td>People's Daily News<br />人民日报</td>
		<td>3.9G</td>
		<td>668M</td>
		<td>1664K</td>
		<td>人民日报新闻数据(1946-2017)<br />http://data.people.com.cn/</td>
	</tr>
	<tr align="center">
		<td>Sogou News<br />搜狗新闻</td>
		<td>3.7G</td>
		<td>649M</td>
		<td>1226K</td>
		<td>Sogou labs的新闻数据<br />http://www.sogou.com/labs/</td>
	</tr>
  <tr align="center">
    <td>Financial News<br />金融新闻</td>
    <td>6.2G</td>
    <td>1055M</td>
    <td>2785K</td>
    <td>从多个网站收集到的金融新闻</td>
  </tr>
	<tr align="center">
		<td>Zhihu_QA<br />知乎问答</td>
		<td>2.1G</td>
		<td>384M</td>
		<td>1117K</td>
		<td>中文问答数据<br />https://www.zhihu.com/</td>
	</tr>
	<tr align="center">
		<td>Weibo<br />微博</td>
		<td>0.73G</td>
		<td>136M</td>
		<td>850K</td>
		<td>NLPIR Lab提供的微博数据<br />http://www.nlpir.org/wordpress/download/weibo.7z</td>
	</tr>
	<tr align="center">
		<td>Literature<br />文学作品</td>
		<td>0.93G</td>
		<td>177M</td>
		<td>702K</td>
		<td>8599篇现代文学作品</td>
	</tr>
	<tr align="center">
		<td>Mixed-large<br />综合</td>
		<td>22.6G</td>
    <td>4037M</td>
    <td>10653K</td>
		<td>上述所有数据的汇总</td>
	</tr>
  <tr align="center">
    <td>Complete Library in Four Sections<br />四库全书</td>
    <td>1.5G</td>
    <td>714M</td>
    <td>21.8K</td>
    <td>目前最大的古代文献汇总</td>
  </tr>
</table>
上述统计结果中，所有词都被计算在内，包括低频词。
<br>
<h2 id="导入模型代码">导入模型(代码)</h2>
<p>例如我下载了多个词模型，下载得到bz2结尾的文件名，例如<code>sgns.financial.bigram.bz2</code>。</p>
<p><img loading="lazy" src="models.png" alt=""  />
</p>
<p>使用方式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models.keyedvectors</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="c1">#以金融sgns.financial.bigram.bz2为例</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;embeddings/sgns.financial.bigram.bz2&#39;</span><span class="p">,</span> 
                                          <span class="n">binary</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> 
                                          <span class="n">unicode_errors</span><span class="o">=</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>


<span class="n">model</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;gensim.models.keyedvectors.KeyedVectors at 0x7fe7fad79d60&gt;
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;投资&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-0.084635,  0.890228, -0.23223 , -0.308985,  0.058241,  0.458777,
       -0.152547, -0.413471,  0.269701, -0.078043, -0.4155  ,  0.074735,
        0.35714 ,  0.103431,  0.601784, -0.390854,  0.814801, -0.122664,
       -1.076744,  0.516941, -0.293319, -0.310251, -0.407794,  0.003898,
       -0.210962,  0.378095, -0.345955, -0.223848,  0.700162,  0.207644,
        0.426249, -0.272832, -0.110305, -0.701062, -0.173407, -0.172121,
       -0.682592,  0.593414,  0.279591, -0.408284, -0.166693,  0.753402,
        0.037375,  0.141865, -0.246024, -0.108663, -0.225255, -0.856601,
        0.381026,  0.401248,  0.012108, -0.126305, -0.374255,  0.728795,
        0.219549, -0.354029, -0.353131,  0.064867,  0.49565 , -0.503267,
       -0.304075,  0.145036,  0.688948,  0.063382, -0.223243,  0.474251,
        0.80543 ,  0.683178,  0.118159,  0.408411, -0.020066,  0.009045,
       -0.135446, -0.069633,  0.206357,  0.482845, -0.075307,  0.06433 ,
       -0.112367,  0.011816,  0.87427 , -0.120287, -0.31036 ,  0.369985,
        0.560386, -0.215248,  0.389631,  0.042943, -0.319149,  0.951551,
       -0.335188,  0.642246, -0.55546 ,  0.322397,  0.659618, -0.213124,
        0.346696, -0.342239,  0.31479 ,  0.078533, -0.345148,  0.815577,
       -0.530134,  0.303419, -0.158916, -0.190564,  0.436046, -0.112251,
       -0.339966,  0.253645,  0.181076,  0.122875, -0.310951, -0.126253,
        1.641405,  0.357906,  0.165796,  0.398656, -0.330591,  0.20328 ,
       -0.077191, -0.421248, -0.078504, -0.734519,  0.146212,  0.535727,
        0.014134,  0.040322, -0.44809 , -0.758205, -0.151237,  0.248258,
       -0.319704,  0.656033, -0.518857,  0.932356, -1.01786 , -0.46354 ,
        0.160921, -0.243597,  0.106666, -0.03404 ,  0.010672,  0.260243,
        0.899813,  0.171735, -0.108209, -0.009843, -0.18113 ,  0.302494,
        0.187285,  0.064669, -0.502041, -0.724377, -0.294312, -0.522256,
        0.334543,  0.740455, -0.357653,  0.540747,  0.256146,  0.513839,
        1.116628, -0.626111,  0.505574,  0.089774, -0.381137, -0.282352,
       -0.457542,  0.198909,  0.313638,  0.560809,  0.25295 ,  0.878158,
       -0.289311, -0.629047,  0.011103,  0.041058, -0.291302, -0.014001,
       -0.027697, -0.445817, -0.070086,  0.159816, -0.120071,  1.280489,
       -0.108866,  0.01586 , -0.505574, -0.679772, -0.343165,  0.595633,
        0.438108, -0.364066, -0.393667,  0.442285,  0.24979 , -0.191607,
        0.425692,  0.535577, -0.480332, -0.737461,  0.588498, -0.380264,
        0.151292,  0.077519, -0.221384,  0.699436,  0.401642,  0.509026,
       -0.411141,  0.206719, -0.097051, -0.451834, -0.825617,  0.602984,
        0.2853  ,  0.46055 ,  0.96472 ,  0.322712, -0.373446,  0.207944,
        0.236688,  0.566523,  0.037644,  1.241091,  0.025682,  0.373211,
        0.097712, -0.195355,  0.264579, -0.072992, -0.121629,  0.041688,
        0.213666,  0.329652, -0.015182,  0.396307,  0.117955,  0.119577,
       -0.334761, -0.135917,  0.409983,  0.512367, -0.292204,  0.302897,
       -0.325733,  0.383173, -0.92419 , -0.377535, -0.059801, -0.606275,
       -0.240482,  0.054021, -0.581386, -0.555691,  0.158354,  0.103765,
        0.107681,  0.248877, -0.597925,  0.193332,  0.844085,  0.00584 ,
        0.041622, -0.111235,  0.617778,  0.234883, -0.09562 ,  0.408324,
       -0.107121,  0.717875,  0.674794,  0.127214, -0.178357,  0.331436,
        0.417898, -0.650833, -0.428309, -0.576132,  0.210533, -0.057879,
       -0.578397,  0.468586,  0.103365, -0.403216, -0.398776,  0.094514,
       -0.130387,  0.628187, -0.463082, -0.951649,  0.561544,  0.118903,
        0.448327, -0.171685, -0.672348,  0.069471,  0.556452, -0.335425],
      dtype=float32)
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">model.similar_by_key(&#39;投资&#39;)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;长期投资&#39;, 0.5135656595230103),
 (&#39;投资规模&#39;, 0.5089880228042603),
 (&#39;智百扬&#39;, 0.49565914273262024),
 (&#39;投资总额&#39;, 0.4955061078071594),
 (&#39;洛辉&#39;, 0.489188551902771),
 (&#39;337409&#39;, 0.48917514085769653),
 (&#39;洛盛&#39;, 0.4819018244743347),
 (&#39;洛腾&#39;, 0.4728960692882538),
 (&#39;394150&#39;, 0.4704836308956146),
 (&#39;投资额&#39;, 0.4685181975364685)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">similar_by_key</span><span class="p">(</span><span class="s1">&#39;风险&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;提示&#39;, 0.6549968123435974),
 (&#39;经营风险&#39;, 0.6316577792167664),
 (&#39;景气衰退&#39;, 0.544153094291687),
 (&#39;风险分析&#39;, 0.5439289212226868),
 (&#39;遇宏观&#39;, 0.5435716509819031),
 (&#39;信用风险&#39;, 0.5345730185508728),
 (&#39;承受能力&#39;, 0.5291797518730164),
 (&#39;防范&#39;, 0.5271924138069153),
 (&#39;系统性&#39;, 0.5178108811378479),
 (&#39;不确定性&#39;, 0.5173759460449219)]
</code></pre></div><p>向量运行效果还行，感兴趣的同学也可以根据自己的数据训练word2vec模型，训练及使用的办法参照文章</p>
<p><a href="https://textdata.cn/blog/douban_w2v/">豆瓣影评 | 探索词向量妙处</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>将年报数据汇总至xlsx文件中</title>
      <link>https://textdata.cn/blog/sh_market/</link>
      <pubDate>Thu, 21 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/sh_market/</guid>
      <description>分散在各处的pdf很难分析，如何将pdf汇总至excel。本文将pdf汇总与excel分析结合。</description>
      <content:encoded><![CDATA[<h2 id="整理到csv中">整理到csv中</h2>
<p>将70G定期报告披露数据集下载</p>
<p>链接: <a href="https://pan.baidu.com/s/1oboFUswiAMdA_Wn3xCh6YQ">https://pan.baidu.com/s/1oboFUswiAMdA_Wn3xCh6YQ</a> 提取码: g7bd</p>
<p><img loading="lazy" src="img/sh_marketing.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">pdfdocx</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">re</span>

<span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;\s&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>

<span class="c1">#文件夹列表</span>
<span class="n">dirs</span> <span class="o">=</span> <span class="p">[</span><span class="n">d</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;reports&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="s1">&#39;DS&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">d</span><span class="p">]</span>
<span class="k">for</span> <span class="n">di</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
    <span class="n">datas</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s1">&#39;reports/</span><span class="si">{d}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">d</span><span class="o">=</span><span class="n">di</span><span class="p">))</span> <span class="k">if</span> <span class="s1">&#39;z&#39;</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">file</span> <span class="o">=</span> <span class="s1">&#39;reports/</span><span class="si">{di}</span><span class="s1">/</span><span class="si">{f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">di</span><span class="o">=</span><span class="n">di</span><span class="p">,</span> <span class="n">f</span><span class="o">=</span><span class="n">file</span><span class="p">)</span>
            <span class="n">code</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">year</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;_(\d</span><span class="si">{4}</span><span class="s1">)_&#39;</span><span class="p">,</span> <span class="n">file</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">clean</span><span class="p">(</span><span class="n">pdfdocx</span><span class="o">.</span><span class="n">read_pdf</span><span class="p">(</span><span class="n">file</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;code&#39;</span><span class="p">:</span> <span class="n">code</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="n">text</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">:</span><span class="n">year</span><span class="p">}</span>
            <span class="n">datas</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">pass</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">datas</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">])</span>
    <span class="c1">#将每家公司的年报导出到csv中</span>
    <span class="n">df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s1">&#39;data.csv&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;a+&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
    
    
<span class="c1">#读取</span>
<span class="n">ndf</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data.csv&#39;</span><span class="p">)</span>
<span class="c1">#去重</span>
<span class="n">ndf</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="c1">#清洗</span>
<span class="n">ndf</span> <span class="o">=</span> <span class="n">ndf</span><span class="p">[</span><span class="n">ndf</span><span class="o">.</span><span class="n">code</span><span class="o">=!=</span><span class="s1">&#39;code&#39;</span><span class="p">]</span>
<span class="c1">#导出到xlsx</span>
<span class="n">ndf</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="s1">&#39;data.xlsx&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="导入数据">导入数据</h2>
<p>excel数据下载链接: <a href="https://pan.baidu.com/s/1r4YRyxb7bTsx-_ayT4GDKQ">https://pan.baidu.com/s/1r4YRyxb7bTsx-_ayT4GDKQ</a> 提取码: ew4v</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>code</th>
      <th>year</th>
      <th>text</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>603859</td>
      <td>2017</td>
      <td>2017年半年度报告1/116公司代码：603859公司简称：能科股份能科节能技术股份有限公...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>603859</td>
      <td>2019</td>
      <td>2019年半年度报告1/141公司代码：603859公司简称：能科股份能科科技股份有限公司2...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>603859</td>
      <td>2018</td>
      <td>2018年半年度报告1/120公司代码：603859公司简称：能科股份能科科技股份有限公司2...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>601500</td>
      <td>2017</td>
      <td>2017年半年度报告1/114公司代码：601500公司简称：通用股份江苏通用科技股份有限公...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>601500</td>
      <td>2019</td>
      <td>2019年半年度报告1/140公司代码：601500公司简称：通用股份江苏通用科技股份有限公...</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h3 id="查看数据量">查看数据量</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></div><pre><code>16984
</code></pre>
<br>
<h3 id="公司数">公司数</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">nunique</span><span class="p">()</span>
</code></pre></div><pre><code>1476
</code></pre>
<br>
<h3 id="含有的年份">含有的年份</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">sorted</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">year</span><span class="o">.</span><span class="n">unique</span><span class="p">())</span>
</code></pre></div><pre><code>[2002,
 2003,
 2004,
 2005,
 2006,
 2007,
 2008,
 2009,
 2010,
 2011,
 2012,
 2013,
 2014,
 2015,
 2016,
 2017,
 2018,
 2019]
</code></pre>
<br>
<h3 id="每家公司年报数">每家公司年报数</h3>
<p>数据集中，平均每家公司的年报数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">avg</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="o">/</span><span class="n">df</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">nunique</span><span class="p">()</span>
<span class="nb">round</span><span class="p">(</span><span class="n">avg</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div><pre><code>11.51
</code></pre>
<br>
<h2 id="说明">说明</h2>
<p>数据是19年获取的，数据不全，下载过程中有部分pdf是破损的文件。</p>
<p>大家可以尝试该数据集训练会计年报词向量，看看有没有有趣的应用。</p>
<p>本数据可作探索实验性质，如果想在会计领域深入挖掘，建议找更全更精准的数据集。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>豆瓣影评 | 探索词向量妙处</title>
      <link>https://textdata.cn/blog/douban_w2v/</link>
      <pubDate>Thu, 21 Apr 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/douban_w2v/</guid>
      <description>使用cntext训练、使用词向量。</description>
      <content:encoded><![CDATA[<p>本文要点</p>
<ul>
<li>读取csv</li>
<li>cntext训练词向量模型</li>
<li>cntext扩展pos、neg词典</li>
<li>导入词向量模型</li>
<li>运用词向量模型</li>
</ul>
<br>
<br>
<h2 id="代码下载">代码下载</h2>
<p>链接: <a href="https://pan.baidu.com/s/1BFUb7myg6svTUZJfnvZfAg">https://pan.baidu.com/s/1BFUb7myg6svTUZJfnvZfAg</a> 提取码: og9t</p>
<p><br><br></p>
<h2 id="一读取数据">一、读取数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;douban.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="df.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;电影  : </span><span class="si">{}</span><span class="s2"> 部&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Movie_Name_CN</span><span class="o">.</span><span class="n">nunique</span><span class="p">()))</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;评论  : </span><span class="si">{}</span><span class="s2"> 条&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">)))</span>
</code></pre></div><pre><code>电影  : 28 部
评论  : 2125056 条
</code></pre>
<p><br><br></p>
<h2 id="二训练模型">二、训练模型</h2>
<p>使用 <a href="https://textdata.cn/blog/cntext_simplification/"><em><strong>cntext</strong></em></a> 库(版本号1.9， 免费公开版)训练词向量word2vec模型,这里我把csv数据整理为txt</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext</span> <span class="kn">import</span> <span class="n">W2VModels</span>
<span class="c1">#cntext版本号1.9</span>
<span class="c1">#pip install cntext==1.9</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#训练word2vec模型</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>  <span class="c1">#语料数据</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;douban.txt&#39;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...预处理    语料 ...
Step 2/4:...训练   word2vec模型
            耗时   2001 s
        
</code></pre></div><p>cntext 可以用于扩展词典</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;pos.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;neg.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 3/4:...准备 每个seed在word2vec模型中的相似候选词...
Step 4/4 完成! 耗时 2302 s
Step 3/4:...准备 每个seed在word2vec模型中的相似候选词...
Step 4/4 完成! 耗时 2303 s
</code></pre></div><p>在代码所在文件夹内可以找到</p>
<ul>
<li>output/w2v_candi_words/w2v.model</li>
<li>新的  pos.txt</li>
<li>新的  neg.txt</li>
</ul>
<p>新的 <em><strong>pos.txt</strong></em> 是对 <em><strong>pos.txt</strong></em> 词典的扩展。</p>
<br>
<br>
<h2 id="三导入w2v模型">三、导入w2v模型</h2>
<p>有的时候数据量特别大，模型训练十分不易。</p>
<p>这时，保存已训练好的模型，不止下次不用再同样的数据再次训练，也可分享给其他人使用。</p>
<p>训练结束后，在代码所在文件夹内可以找到 <code>output/w2v_candi_words/w2v.model</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;output/w2v_candi_words/w2v.model&#39;</span><span class="p">)</span>
<span class="n">w2v_model</span>
</code></pre></div><pre><code>&lt;gensim.models.keyedvectors.KeyedVectors at 0x7face0574880&gt;
</code></pre>
<p><em><strong>w2v_models</strong></em> 数据类型为 <em><strong>KeyedVectors</strong></em> ， 在本文中使用 <em><strong>w2v_models</strong></em> 代指 <em><strong>KeyedVectors</strong></em></p>
<p><br><br></p>
<h2 id="四玩转词向量">四、玩转词向量</h2>
<p>用户级的数据(如在线评论)感觉生成的向量会准一些，<strong>词向量的方向，近义反义在向量中都有体现</strong>。</p>
<p><img loading="lazy" src="man-woman.png" alt=""  />
</p>
<p>例如本文使用的是28部电影的2125056条影评， 一般评论内容包含电影相关信息，如电影题材、是否值的观影等。</p>
<p>而在我们训练出模型w2v_models存在一些常用的方法</p>
<ul>
<li><em><strong>w2v_model.get_vector(key)</strong></em> 获取key的词向量</li>
<li><em><strong>w2v_model.most_similar_to_given(key1, keys_list)</strong></em>  从 keys_list 中获取与 key1 最相似的词</li>
<li><em><strong>w2v_model.n_similarity(ws1, ws2)</strong></em> 两组词 <em><strong>ws1</strong></em>,  <em><strong>ws2</strong></em>  的相似度</li>
<li><em><strong>w2v_model.closer_than(key1, key2)</strong></em> 更接近于 <em><strong>key1</strong></em> 的词向量(相比于 <em><strong>key2</strong></em> )</li>
<li><em><strong>w2v_model.most_similar(positive, negative)</strong></em> 找出与 <em><strong>positive</strong></em> 同方向，与 <em><strong>negative</strong></em> 反向相反的词。</li>
</ul>
<h3 id="41-get_vectorkey">4.1 get_vector(key)</h3>
<p><em><strong>w2v_model.get_vector(key)</strong></em>  获取key的词向量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#获取某词语的向量</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;给力&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>array([ 0.06488553,  0.74188954,  0.25468495,  0.89755714,  1.8139195 ,
       -0.6950082 ,  0.24339403, -1.2188634 ,  0.543618  , -0.9988698 ,
        0.27471313,  0.9325699 , -0.5860608 , -0.5081917 ,  1.6423215 ,
       -0.0490295 , -0.3927043 ,  0.659067  ,  0.03185922, -1.021391  ,
       -1.3214804 , -0.28208104, -0.7819419 , -0.30637202, -1.5944146 ,
       -0.12383854, -0.70463836,  0.45689437,  1.223081  , -1.9453759 ,
       -0.5538997 , -0.9750523 , -0.10031194, -0.9568689 ,  0.30341247,
        1.1102395 ,  0.667315  , -1.1600997 , -0.26674765, -0.55144155,
       -0.3246094 ,  0.82902473, -0.47339582, -0.9009957 ,  1.7722464 ,
        0.28959563, -0.03453476,  0.4786787 , -0.48074463, -0.23090109,
       -0.49390873,  0.71246386,  2.1557336 ,  2.4899387 , -0.51481706,
        0.5579966 , -0.6973235 , -1.1408254 ,  0.72495663, -1.0326954 ,
       -0.5455598 ,  0.98941576, -1.2155218 , -0.9088408 ,  1.9184568 ,
       -0.21800426, -1.2009395 ,  0.29684314,  1.3672423 , -2.269391  ,
        0.6188098 , -0.02714545, -0.44811317,  1.4397241 , -1.0594722 ,
       -0.08088647, -0.13015983, -0.99255013,  0.62044877,  2.5046496 ,
        0.4054545 , -0.38767585, -0.6956541 ,  0.22991426,  0.5928579 ,
       -0.12684819, -0.17408212,  0.25033692, -1.4419957 , -0.27390227,
        1.166638  , -0.00624323, -1.6046506 ,  2.1633575 , -0.395548  ,
       -1.1297956 , -3.1474566 ,  0.38729438, -2.0434535 , -1.5511289 ],
      dtype=float32)
</code></pre>
<br>
<h3 id="42-most_similar_to_givenkey1-keys_list">4.2 most_similar_to_given(key1, keys_list)</h3>
<p>从 keys_list 中获取与 key1 最相似的词。例如在212w影评中，从<code>'爱情', '悬疑', '飞船', '历史', '战争'</code>找出最接近<code>'太空'</code>，最后返回<code>'飞船'</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#从 `keys_list` 中获取与 `key1` 最相似的 `key`。</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">most_similar_to_given</span><span class="p">(</span><span class="n">key1</span><span class="o">=</span><span class="s1">&#39;太空&#39;</span><span class="p">,</span> 
                                <span class="n">keys_list</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;爱情&#39;</span><span class="p">,</span> <span class="s1">&#39;悬疑&#39;</span><span class="p">,</span> <span class="s1">&#39;飞船&#39;</span><span class="p">,</span> <span class="s1">&#39;历史&#39;</span><span class="p">,</span> <span class="s1">&#39;战争&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>'飞船'
</code></pre>
<br> 
<h3 id="43-w2v_modeln_similarityws1-ws2">4.3 w2v_model.n_similarity(ws1, ws2)</h3>
<p>两组词ws1, ws2 的相似度。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.metrics.pairwise</span> <span class="kn">import</span> <span class="n">cosine_similarity</span>

<span class="n">cosine_similarity</span><span class="p">([</span><span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;理想&#39;</span><span class="p">)],</span>  
                  <span class="p">[</span><span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;现实&#39;</span><span class="p">)])[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><pre><code>0.5371934
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#cosine算法</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">n_similarity</span><span class="p">([</span><span class="s1">&#39;理想&#39;</span><span class="p">],</span> 
                       <span class="p">[</span><span class="s1">&#39;现实&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>0.5371934
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#计算两组键之间的余弦相似度。</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">n_similarity</span><span class="p">([</span><span class="s1">&#39;给力&#39;</span><span class="p">,</span> <span class="s1">&#39;精彩&#39;</span><span class="p">,</span> <span class="s1">&#39;赞&#39;</span><span class="p">,</span> <span class="s1">&#39;推荐&#39;</span><span class="p">],</span> 
                       <span class="p">[</span><span class="s1">&#39;无聊&#39;</span><span class="p">,</span> <span class="s1">&#39;尴尬&#39;</span><span class="p">,</span> <span class="s1">&#39;垃圾&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>0.35008422
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v_model</span><span class="o">.</span><span class="n">n_similarity</span><span class="p">([</span><span class="s1">&#39;理想&#39;</span><span class="p">,</span> <span class="s1">&#39;梦想&#39;</span><span class="p">],</span> 
                       <span class="p">[</span><span class="s1">&#39;现实&#39;</span><span class="p">,</span> <span class="s1">&#39;生活&#39;</span><span class="p">])</span>
</code></pre></div><pre><code>0.48020104
</code></pre>
<br>
<h3 id="44-w2v_modelcloser_thankey1-key2">4.4 w2v_model.closer_than(key1, key2)</h3>
<p>更接近于 <em><strong>key1</strong></em> 的词向量(相比于key2)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#获取所有更接近 `key1` 的键，而不是 `key2` 。</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">closer_than</span><span class="p">(</span><span class="n">key1</span><span class="o">=</span><span class="s1">&#39;理想&#39;</span><span class="p">,</span> 
                      <span class="n">key2</span><span class="o">=</span><span class="s1">&#39;现实&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>['梦想', '妥协', '追梦', '愿望', '骨感']
</code></pre>
<br>
<h3 id="45-w2v_modelmost_similarpositive-negative">4.5 w2v_model.most_similar(positive, negative)</h3>
<p>找出与 <em><strong>positive</strong></em> 同方向，与 <em><strong>negative</strong></em> 反向相反的词。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">w2v_model</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="n">positive</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;给力&#39;</span><span class="p">,</span> <span class="s1">&#39;精彩&#39;</span><span class="p">,</span> <span class="s1">&#39;过瘾&#39;</span><span class="p">],</span>
                       <span class="n">negative</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;垃圾&#39;</span><span class="p">],</span>
                       <span class="n">topn</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><pre><code>[('激动人心', 0.6859163045883179),
 ('惊心动魄', 0.6767394542694092),
 ('带感', 0.6723690032958984),
 ('惊险刺激', 0.667783796787262),
 ('刺激', 0.6445038318634033),
 ('燃', 0.6429688930511475),
 ('爽快', 0.6287934184074402),
 ('带劲', 0.6254130005836487),
 ('爽', 0.624543309211731),
 ('酣畅淋漓', 0.6140543818473816)]
</code></pre>
<br>
<h3 id="46-类比king-manwomanqueen">4.6 类比king-man+woman~queen</h3>
<p><img loading="lazy" src="kingqueenformular.png" alt=""  />
</p>
<p>每个词是高维向量空间中的一个点， 两个点可以组成有方向的向量，而向量可以比较方向。</p>
<p>这里是推理过程，受限于数据，公式不一定完全成立， 但是思维可以类比。</p>
<p>这两个词相减，按感觉应该得到的是性别方向，雄性-&gt;雌性。</p>
<p><em><strong>gender_direction_1 = vector(man)-vector(woman)</strong></em></p>
<p><em><strong>gender_direction_2 = vector(king)-vector(queen)</strong></em></p>
<p>那两个性别方向应该近似，假设这里将其  <em><strong>gender_direction_1 = gender_direction_2</strong></em> ，则对于公式中任意一个词，都可以由等式中的其他三个词经过运算得到。例如</p>
<p><em><strong>vector(queen) =  vector(king)-vector(man)+vector(woman)</strong></em></p>
<p>这里构造了一个情绪的公式，计算如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 开心 - 难过 ~=  享受 - d</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;开心&#39;</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;难过&#39;</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;享受&#39;</span><span class="p">)</span>

<span class="c1">#d = a-b+c</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">similar_by_vector</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="p">)</span>
</code></pre></div><pre><code>[('享受', 0.7833479046821594),
 ('开心', 0.6825607419013977),
 ('愉快', 0.6298696994781494),
 ('娱乐', 0.6215130090713501),
 ('感官', 0.6085000038146973),
 ('图个', 0.6052624583244324),
 ('图一乐', 0.6039161682128906),
 ('休闲', 0.60273677110672),
 ('视觉享受', 0.6006160378456116),
 ('轻松愉快', 0.5961319804191589)]
</code></pre>
<p>很遗憾，<em><strong>d</strong></em> 没有运算出煎熬之类的词语，但好在都是形容词，而且是快乐居多的形容词，类别是对的，就是方向是反的。</p>
<br>
<h3 id="词向量总结">词向量总结</h3>
<p>需要注意的是经典的运算 <em><strong>king-man+woman~queen</strong></em> 来自 <em><strong>Glove</strong></em>模型，而不是本文使用的 <em><strong>Word2Vec</strong></em>模型。两者相同点，<em><strong>Glove</strong></em> 与 <em><strong>Word2Vec</strong></em> 均为词嵌入 <em><strong>embeddings</strong></em> 技术。区别在于 <em><strong>Glove</strong></em> 获取的词的全局语义空间，而 <em><strong>Word2Vec</strong></em> 一般是某个词前后n个词(例如前后5个词)范围内的语义。做概念四则运算，以后如可能，建议用 <em><strong>Glove</strong></em>。</p>
<p>此外，即时使用 <em><strong>Glove</strong></em>，尽量使用概念的词组均值向量。首先要训练数据要存在这些人类认知的线索。其次，认知概念往往不是由一个词决定的，可能需要相关的很多词。例如人类社会中的<code>雄雌(没有贬义，包含了男女在内的概念)</code>，</p>
<ul>
<li>雄性概念词有<code>他、男人、男孩、父亲、爷爷、爸爸、姥爷...</code></li>
<li>雌性概念词有<code>她、女人、女孩、母亲、奶奶、妈妈、姥姥...</code></li>
<li>国王概念词有<code>查理n世、乔治、路易...</code></li>
<li>女王概念词有<code>伊丽莎白n世、维多利亚女王、叶卡捷琳娜二世...</code></li>
</ul>
<p>或许改成概念向量四则运算，公式可能更容易成立。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyPlutchik库 | 可视化文本的情绪轮(情绪指纹)</title>
      <link>https://textdata.cn/blog/pyplutchik_emotion_circle/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/pyplutchik_emotion_circle/</guid>
      <description>越来越多的社交网络学者， 为测量情绪， 基于**心理学家 Robert Plutchik** 提出的模型（通常简称为“**Plutchik轮**”，人类的情绪一共有8大类）制作了大量的情绪可视化作品。在某种程度上，Plutchik轮可以看做情绪指纹，例如不同的电影题材在8类情绪的分布是不一样的。</description>
      <content:encoded><![CDATA[<p>越来越多的社交网络学者， 为测量情绪， 基于<strong>心理学家 Robert Plutchik</strong> 提出的模型（通常简称为“<strong>Plutchik轮</strong>”，人类的情绪一共有8大类）制作了大量的情绪可视化作品。在某种程度上，Plutchik轮可以看做情绪指纹，例如不同的电影题材在8类情绪的分布是不一样的。</p>
<p><img loading="lazy" src="img/imdb_full.png" alt=""  />
</p>
<p>今天介绍 <strong>PyPlutchik</strong>，这是一个 Python 库，专门用于在文本或语料库中可视化 Plutchik 的情绪。 PyPlutchik 绘制 Plutchik 的花朵，每个情感花瓣的大小取决于语料库中检测到或注释了多少情感，也代表每个情感花瓣的三个强度程度。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install pyplutchik
</code></pre></div><br>
<h2 id="usage">Usage</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pyplutchik</span> <span class="kn">import</span> <span class="n">plutchik</span>

<span class="n">emotions</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;joy&#39;</span><span class="p">:</span> <span class="mf">0.6</span><span class="p">,</span>
            <span class="s1">&#39;trust&#39;</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
            <span class="s1">&#39;fear&#39;</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span>
            <span class="s1">&#39;surprise&#39;</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span>
            <span class="s1">&#39;sadness&#39;</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span>
            <span class="s1">&#39;disgust&#39;</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span>
            <span class="s1">&#39;anger&#39;</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
            <span class="s1">&#39;anticipation&#39;</span><span class="p">:</span> <span class="mf">0.6</span><span class="p">}</span>
            
<span class="n">plutchik</span><span class="p">(</span><span class="n">emotions</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="功能特性">功能特性</h2>
<p>PyPlutchik 提供了一个即插即用的工具，用于在文本或语料库中定量表示 Plutchik 的情绪。 它尊重 Plutchik 轮中每个花瓣的原始颜色和空间位移。</p>
<p>在 Pyplutchik 中，用户可以只传递一个字典作为唯一参数，其中字典的键必须是 8 种基本情绪。 每个值必须是 ∈ [0, 1]。</p>
<p><img loading="lazy" src="img/example01.png" alt=""  />
</p>
<br>
<p>每类情绪存在三种强度，下表是Pyplutchik的8大类情绪三种强度汇总。</p>
<p>用户还可以给每个情绪传入一个长度是3的列表，依次表示情绪在低、中、高三种强度的程度，数值0 和 1 之间。</p>
<table>
<thead>
<tr>
<th>Lower intensity</th>
<th>Emotion</th>
<th>Higher intensity</th>
</tr>
</thead>
<tbody>
<tr>
<td>Annoyance</td>
<td>Anger</td>
<td>Rage</td>
</tr>
<tr>
<td>Interest</td>
<td>Anticipation</td>
<td>Vigilance</td>
</tr>
<tr>
<td>Serenity</td>
<td>Joy</td>
<td>Ecstasy</td>
</tr>
<tr>
<td>Acceptance</td>
<td>Trust</td>
<td>Admiration</td>
</tr>
<tr>
<td>Apprehension</td>
<td>Fear</td>
<td>Terror</td>
</tr>
<tr>
<td>Distraction</td>
<td>Surprise</td>
<td>Amazement</td>
</tr>
<tr>
<td>Pensiveness</td>
<td>Sadness</td>
<td>Grief</td>
</tr>
<tr>
<td>Boredom</td>
<td>Disgust</td>
<td>Loathing</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="img/example02.png" alt=""  />
</p>
<br>
<p>PyPlutchik 也可表征用户数据中的主要二元、次要二元、二元和相反的情绪。 它会自动从字典的关键字中了解用户想要显示什么样的二元组。</p>
<p><img loading="lazy" src="img/example03.png" alt=""  />
</p>
<br>
<h2 id="绘图技巧">绘图技巧</h2>
<p>可以专注于情绪子集，不会忽视其他情绪，将情绪列表作为参数“<strong>highlight_emotions</strong>”的值传递：</p>
<p><img loading="lazy" src="img/highlight_emotions.png" alt=""  />
</p>
<p>我们可以比较同一亚马逊语料库的不同子组，将我们的可视化并排放置，并仅突出显示愤怒、厌恶和恐惧的花瓣，以轻松发现这些负面情绪在 5 星评论中的表现如何低于 1 星评论 .</p>
<p><img loading="lazy" src="img/amazon.png" alt=""  />
</p>
<br>
<p>或者可以隐藏坐标、刻度和标签，只绘制花瓣，使用参数 <code>show_coordinates = False</code> 和 <code>show_ticklabels = False</code>。下图是imdb不同电影的情绪轮</p>
<p><img loading="lazy" src="img/imdb_full.png" alt=""  />
</p>
<br>
<h2 id="查看文档">查看文档</h2>
<p>有关所有参数的文档和示例库，请参见<a href="Documentation.html">文档</a></p>
<p><a href="PyPlutchik.zip"><strong>文档下载</strong></a></p>
<p>🔥 PyPlutchik 2.0 即将推出！ 新功能包括从文本中提取情感并检查非主题词典。 敬请期待……🔥</p>
<br>
<h2 id="说明">说明</h2>
<p>如果使用PyPlutchik，请在文献中说明，格式如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Semeraro A, Vilella S, Ruffo G (2021) PyPlutchik: Visualising and comparing emotion-annotated corpora PLOS ONE 16(9):e0256503.https://doi.org/10.1371/journal.pone.0256503
</code></pre></div><br>
<h2 id="semeraro的研究">Semeraro的研究</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Semeraro, Alfonso, Salvatore Vilella, Giancarlo Ruffo, and Massimo Stella. &#34;Writing about COVID-19 vaccines: Emotional profiling unravels how mainstream and alternative press framed AstraZeneca, Pfizer and vaccination campaigns.&#34; *arXiv preprint arXiv:2201.07538* (2022).
</code></pre></div><ul>
<li><strong>摘要</strong>: 自 2020 年 11 月宣布 COVID-19 疫苗以来，媒体和社交媒体对 COVID-19 疫苗进行了大量辩论。由于大多数研究都集中在社交媒体中的 COVID-19 虚假信息上，与其他来源相比，主流新闻媒体如何构建 COVID-19 叙述很少受到关注。为了填补这一空白，我们使用认知网络科学和自然语言处理来重建 5745 条关于 COVID-19 疫苗的新闻的随时间变化的语义和情感框架。我们的数据集涵盖了 8 个月内的 17 个网点，其中包括在 Facebook（500 万总股数）和 Twitter（20 万股总股数）上大量转发的意大利新闻文章。我们发现主流消息来源构建“疫苗/疫苗”的总体概念的方式始终具有高度的信任/预期和较少的厌恶。在替代来源构建 COVID-19 疫苗的方式中，这些情绪严重缺失。在疫苗的特定实例中发现了更多差异。另类新闻包括以强烈的悲伤来描述阿斯利康疫苗的标题，而主流标题中没有。与“阿斯利康”相比，主流新闻最初将“辉瑞”与副作用（例如“过敏”、“反应”、“发烧”）相关联更多。随着后一种疫苗的暂停，在 2021 年 3 月 15 日，我们发现了一种语义/情感转变：即使是主流文章标题都将“阿斯利康”框定为在语义上更丰富与副作用的负面关联，而“辉瑞”则经历了积极的效价转变，主要与其更高的效率有关。血栓形成与可怕的概念联想一起进入了疫苗的框架，而死亡这个词经历了情感转变，在替代标题中转向恐惧，在主流标题中失去了希望的内涵，缺乏预期。我们的发现揭示了媒体采用的围绕 COVID-19 疫苗的情感叙述的关键方面，强调了了解替代媒体和主流媒体如何报道疫苗接种新闻的必要性。</li>
<li><strong>Keywords</strong>: natural language processing, text analysis, complex networks, cognitive network science, COVID-19, COVID-19 vaccines
<img loading="lazy" src="img/figure2.png" alt=""  />

<img loading="lazy" src="img/figure3.png" alt=""  />

<img loading="lazy" src="img/figure4.png" alt=""  />
</li>
</ul>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>whatlies库 | 可视化词向量</title>
      <link>https://textdata.cn/blog/whatlies_word2vec/</link>
      <pubDate>Sat, 02 Apr 2022 16:40:10 +0600</pubDate>
      
      <guid>/blog/whatlies_word2vec/</guid>
      <description>词语之间可以比较亲疏远近</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<blockquote>
<p>链接:https://pan.baidu.com/s/1vJohEJ0pc6t4PBK04PiZbg  密码:t7a6</p>
</blockquote>
<br>
<h2 id="whatlies">whatlies</h2>
<p>可以与spacy语言模型结合，可视化词向量。安装zh_core_web_md、en_core_web_md和whatlies。具体文档可以查看https://github.com/RasaHQ/whatlies</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">zh_core_web_md</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">-</span><span class="n">py3</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">en_core_web_md</span><span class="o">-</span><span class="mf">3.0.0</span><span class="o">-</span><span class="n">py3</span><span class="o">-</span><span class="n">none</span><span class="o">-</span><span class="nb">any</span><span class="o">.</span><span class="n">whl</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">whatlies</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>spacy模型中的词向量均为几十上百维度的词向量，通过压缩映射至二维空间后，横坐标man，纵坐标woman，就可以将词语的性别倾向可视化出来。</p>
<p>词向量语言模型会学习到人类的<strong>刻板印象</strong>，</p>
<p><a href="https://textdata.cn/blog/wordembeddingsinsocialscience/">大数据时代下社会科学研究方法的拓展—基于词嵌入技术的文本分析的应用</a></p>
<p><a href="https://textdata.cn/blog/embeddingsandattitude/">词嵌入测量不同群体对某概念的态度(偏见)</a></p>
<p>例如nurse是女性，doctor是男性。</p>
<p>制作两维度画轴，其中以woman作纵轴，man作横轴。 nurse、queen一般更多的是女性从业者，因此更接近y轴。 king国王多为男性，所以更接近x轴。</p>
<p>至于动物，女性喜欢养猫，男性喜欢养狗，所以也能体现出词语的性别倾向。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">whatlies</span> <span class="kn">import</span> <span class="n">EmbeddingSet</span>
<span class="kn">from</span> <span class="nn">whatlies.language</span> <span class="kn">import</span> <span class="n">SpacyLanguage</span>

<span class="n">lang</span> <span class="o">=</span> <span class="n">SpacyLanguage</span><span class="p">(</span><span class="s2">&#34;en_core_web_md&#34;</span><span class="p">)</span>

<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">,</span> <span class="s2">&#34;fish&#34;</span><span class="p">,</span> <span class="s2">&#34;kitten&#34;</span><span class="p">,</span> <span class="s2">&#34;man&#34;</span><span class="p">,</span> <span class="s2">&#34;woman&#34;</span><span class="p">,</span>
         <span class="s2">&#34;king&#34;</span><span class="p">,</span> <span class="s2">&#34;queen&#34;</span><span class="p">,</span> <span class="s2">&#34;doctor&#34;</span><span class="p">,</span> <span class="s2">&#34;nurse&#34;</span><span class="p">]</span>

<span class="n">emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">lang</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">])</span>
<span class="n">emb</span><span class="o">.</span><span class="n">plot_interactive</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span><span class="n">emb</span><span class="p">[</span><span class="s2">&#34;man&#34;</span><span class="p">],</span> <span class="n">y_axis</span><span class="o">=</span><span class="n">emb</span><span class="p">[</span><span class="s2">&#34;woman&#34;</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/gif-zero.gif" width="100%" />
    
    
</figure>

<p>whatlies也可以对中文进行操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">whatlies</span> <span class="kn">import</span> <span class="n">EmbeddingSet</span>
<span class="kn">from</span> <span class="nn">whatlies.language</span> <span class="kn">import</span> <span class="n">SpacyLanguage</span>

<span class="n">zh_lang</span> <span class="o">=</span> <span class="n">SpacyLanguage</span><span class="p">(</span><span class="s2">&#34;zh_core_web_md&#34;</span><span class="p">)</span>

<span class="n">zh_words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;猫&#34;</span><span class="p">,</span> <span class="s2">&#34;狗&#34;</span><span class="p">,</span> <span class="s2">&#34;鱼&#34;</span><span class="p">,</span> <span class="s2">&#34;鲤鱼&#34;</span><span class="p">,</span> <span class="s2">&#34;男人&#34;</span><span class="p">,</span> <span class="s2">&#34;女人&#34;</span><span class="p">,</span>
         <span class="s2">&#34;国王&#34;</span><span class="p">,</span> <span class="s2">&#34;王后&#34;</span><span class="p">,</span> <span class="s2">&#34;医生&#34;</span><span class="p">,</span> <span class="s2">&#34;护士&#34;</span><span class="p">]</span>

<span class="n">zh_emb</span> <span class="o">=</span> <span class="n">EmbeddingSet</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">zh_lang</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">zh_words</span><span class="p">])</span>
<span class="n">zh_emb</span><span class="o">.</span><span class="n">plot_interactive</span><span class="p">(</span><span class="n">x_axis</span><span class="o">=</span><span class="n">zh_emb</span><span class="p">[</span><span class="s2">&#34;男人&#34;</span><span class="p">],</span> <span class="n">y_axis</span><span class="o">=</span><span class="n">zh_emb</span><span class="p">[</span><span class="s2">&#34;女人&#34;</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/chinese.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bloxs包 | 可在notebook中使用的交互可视化包</title>
      <link>https://textdata.cn/blog/bloxs_interactive_visualization/</link>
      <pubDate>Fri, 01 Apr 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/bloxs_interactive_visualization/</guid>
      <description>Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。</description>
      <content:encoded><![CDATA[<p>Bloxs是一个简单的 python 可交互的可视化包，可以帮助您以一种有吸引力的方式（以块形式）显示信息。 非常适合在笔记本中构建仪表板、报告和应用程序。</p>
<p>它适用于：Jupyter Notebook、Google Colab、Deepnote、Kaggle Notebook、<a href="https://github.com/mljar/mercury">Mercury</a>。</p>
<p><img loading="lazy" src="img/bloxs_demo.gif" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install bloxs
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">from bloxs import B
B(1234, &#34;Bloxs in notebook!&#34;)
</code></pre></div><p><img loading="lazy" src="img/test_bloxs.png" alt=""  />
</p>
<br>
<h2 id="案例">案例</h2>
<table>
<thead>
<tr>
<th>Bloxs</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td><img loading="lazy" src="img/number.png" alt=""  />
</td>
<td><code>B(1234, &quot;Bloxs in notebook!&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/percent.png" alt=""  />
</td>
<td><code>B(1999, &quot;Percent change!&quot;, percent_change=10)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/emojis.png" alt=""  />
</td>
<td><code>B(&quot;🎉🎉🎉&quot;, &quot;Works with emojis&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/progress.png" alt=""  />
</td>
<td><code>B(&quot;68%&quot;, &quot;Loading progress&quot;, progress=68)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/progress_color.png" alt=""  />
</td>
<td><code>B(&quot;68%&quot;, &quot;Loading progress&quot;, progress=68, color=&quot;green&quot;)</code> 颜色color参数可以设为&quot;blue&quot;, &ldquo;red&rdquo;, &ldquo;green&rdquo; 或十六进制表示 (例如&quot;#fa33fa&quot;)</td>
</tr>
<tr>
<td><img loading="lazy" src="img/line_chart.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display line chart&quot;, points=[1,4,2,3,5,6])</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/line_chart_color.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display line chart&quot;, points=[1,4,2,3,5,6], color=&quot;red&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/stepped.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display stepped chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;stepped&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/bar_chart.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display bar chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;bar&quot;)</code></td>
</tr>
<tr>
<td><img loading="lazy" src="img/bar_chart_color.png" alt=""  />
</td>
<td><code>B(&quot;123&quot;, &quot;Display bar chart&quot;, points=[1,4,2,3,5,6], chart_type=&quot;bar&quot;, color=&quot;green&quot;)</code></td>
</tr>
</tbody>
</table>
<br>
<p>可以在一行内整合多个图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">B([
    B(1999, &#34;Percent change!&#34;, percent_change=10),
    B(&#34;🎉🎉🎉&#34;, &#34;Works with emojis&#34;),
    B(&#34;68%&#34;, &#34;Loading progress&#34;, progress=68),
    B(1234, &#34;Bloxs in notebook!&#34;)
])
</code></pre></div><p><img loading="lazy" src="img/several_bloxs_2.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">B([
    B(&#34;786&#34;, &#34;Display bar chart&#34;, points=[1,4,2,3,5,6], chart_type=&#34;bar&#34;, color=&#34;green&#34;),
    B(&#34;123&#34;, &#34;Display line chart&#34;, points=[1,4,2,3,5,6], color=&#34;red&#34;),
    B(&#34;123&#34;, &#34;Display stepped chart&#34;, points=[1,4,2,3,5,6], chart_type=&#34;stepped&#34;)
])
</code></pre></div><p><img loading="lazy" src="img/several_bloxs.png" alt=""  />
</p>
<br>
<p>如果想在自己电脑中实验上述代码，可以点击 <a href="https://deepnote.com/project/bloxs-ZNGnsap0R7ea8LeZY0uarQ/%2Fnotebook.ipynb">notebook</a> 下载。</p>
<br>
<h2 id="结合mercury用bloxs">结合Mercury用Bloxs</h2>
<p><a href="https://github.com/mljar/mercury">Mercury</a> 是一个用于将笔记本转换为交互式网络应用程序的框架。 它基于 YAML 配置将小部件添加到笔记本中。 下面展示了一个带有 bloxs 的笔记本，以及作为 Mercury 的 Web 应用程序的同一笔记本。</p>
<p><img loading="lazy" src="img/bloxs_notebook.gif" alt=""  />
</p>
<br>
<h2 id="mercury网页应用">Mercury网页应用</h2>
<p><a href="https://mercury.mljar.com/app/5">Demo</a></p>
<p><img loading="lazy" src="img/bloxs_mercury.gif" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext库 |  Python文本分析包更新</title>
      <link>https://textdata.cn/blog/cntext_simplification/</link>
      <pubDate>Fri, 01 Apr 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/cntext_simplification/</guid>
      <description>扩展词典、情感分析、可阅读性，内置9种情感词典，涵盖中英文</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/hidadeng/cntext"><img loading="lazy" src="https://img.shields.io/badge/cntext-%e4%b8%ad%e6%96%87%e6%96%87%e6%9c%ac%e5%88%86%e6%9e%90%e5%ba%93-orange?style=for-the-badge&amp;logo=appveyor" alt=""  />
</a></p>
<p><a href="version1.2.md">旧版cntext入口</a></p>
<p>中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等</p>
<ul>
<li><a href="https://github.com/hidadeng/cntext">github地址</a> <code>https://github.com/hidadeng/cntext</code></li>
<li><a href="https://pypi.org/project/cntext/">pypi地址</a>  <code>https://pypi.org/project/cntext/</code></li>
<li><a href="https://ke.qq.com/course/482241?tuin=163164df">视频课-<strong>Python网络爬虫与文本数据分析</strong></a></li>
</ul>
<p>功能模块含</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>stats</strong>  文本统计指标
<ul>
<li><input checked="" disabled="" type="checkbox"> 词频统计</li>
<li><input checked="" disabled="" type="checkbox"> 可读性</li>
<li><input checked="" disabled="" type="checkbox"> 内置pkl词典</li>
<li><input checked="" disabled="" type="checkbox"> <strong>情感分析</strong></li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>dictionary</strong> 构建词表(典)
<ul>
<li><input checked="" disabled="" type="checkbox"> Sopmi 互信息扩充词典法</li>
<li><input checked="" disabled="" type="checkbox"> W2Vmodels 词向量扩充词典法</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>similarity</strong>   文本相似度
<ul>
<li><input checked="" disabled="" type="checkbox"> cos相似度</li>
<li><input checked="" disabled="" type="checkbox"> jaccard相似度</li>
<li><input checked="" disabled="" type="checkbox"> 编辑距离相似度</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>mind.py</strong> 计算文本中的认知方向（态度、偏见）</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install cntext
</code></pre></div><br>
<h2 id="quickstart">QuickStart</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="n">help</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="mf">1.8.4</span>

<span class="nx">Help</span> <span class="nx">on</span> <span class="kn">package</span> <span class="nx">cntext</span><span class="p">:</span>

<span class="nx">NAME</span>
    <span class="nx">cntext</span>

<span class="nx">PACKAGE</span> <span class="nx">CONTENTS</span>
    <span class="nx">mind</span>
    <span class="nx">dictionary</span>
    <span class="nx">similarity</span>
    <span class="nx">stats</span>
</code></pre></div><br>
<h2 id="一stats">一、stats</h2>
<p>目前stats内置的函数有</p>
<ul>
<li><strong>readability</strong>  文本可读性</li>
<li><strong>term_freq</strong> 词频统计函数</li>
<li><strong>dict_pkl_list</strong>  获取cntext内置词典列表(pkl格式)</li>
<li><strong>load_pkl_dict</strong> 导入pkl词典文件</li>
<li><strong>sentiment</strong> 情感分析</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<h3 id="11--readability">1.1  readability</h3>
<p>文本可读性，指标越大，文章复杂度越高，可读性越差。</p>
<p>readability(text, lang=&lsquo;chinese&rsquo;)</p>
<ul>
<li>text: 文本字符串数据</li>
<li>lang: 语言类型，&ldquo;chinese&quot;或&quot;english&rdquo;，默认&quot;chinese&quot;</li>
</ul>
<p>**中文可读性 ** 算法参考自</p>
<blockquote>
<p>徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.</p>
<ul>
<li>readability1 &mdash;每个分句中的平均字数</li>
<li>readability2  &mdash;每个句子中副词和连词所占的比例</li>
<li>readability3  &mdash;参考Fog Index， readability3=(readability1+readability2)×0.5</li>
</ul>
</blockquote>
<p>​</p>
<p>以上三个指标越大，都说明文本的复杂程度越高，可读性越差。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>


<span class="n">ct</span><span class="o">.</span><span class="n">readability</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 28.0,
 &#39;readability2&#39;: 0.15789473684210525,
 &#39;readability3&#39;: 14.078947368421053}
</code></pre></div><br>
<p>句子中的符号变更会影响结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>
<span class="n">ct</span><span class="o">.</span><span class="n">readability</span><span class="p">(</span><span class="n">text2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 27.0,
 &#39;readability2&#39;: 0.16666666666666666,
 &#39;readability3&#39;: 13.583333333333334}
</code></pre></div><p><br><br></p>
<h3 id="12--term_freq">1.2  term_freq</h3>
<p>词频统计函数，返回Counter类型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span> 

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<h3 id="13-dict_pkl_list">1.3 dict_pkl_list</h3>
<p>获取cntext内置词典列表(pkl格式)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># 获取cntext内置词典列表(pkl格式)</span>
<span class="n">ct</span><span class="o">.</span><span class="n">dict_pkl_list</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;DUTIR.pkl&#39;,
 &#39;HOWNET.pkl&#39;,
 &#39;sentiws.pkl&#39;,
 &#39;ChineseFinancialFormalUnformalSentiment.pkl&#39;,
 &#39;ANEW.pkl&#39;,
 &#39;LSD2015.pkl&#39;,
 &#39;NRC.pkl&#39;,
 &#39;geninqposneg.pkl&#39;,
 &#39;HuLiu.pkl&#39;,
 &#39;AFINN.pkl&#39;,
 &#39;ADV_CONJ.pkl&#39;,
 &#39;LoughranMcDonald.pkl&#39;,
 &#39;STOPWORDS.pkl&#39;]
</code></pre></div><p>词典对应关系, 部分情感词典资料整理自 <a href="https://github.com/quanteda/quanteda.sentiment">quanteda.sentiment</a></p>
<table>
<thead>
<tr>
<th>pkl文件</th>
<th>词典</th>
<th>语言</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>DUTIR.pkl</td>
<td>大连理工大学情感本体库</td>
<td>中文</td>
<td>七大类情绪，<code>哀, 好, 惊, 惧, 乐, 怒, 恶</code></td>
</tr>
<tr>
<td>HOWNET.pkl</td>
<td>知网Hownet词典</td>
<td>中文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>sentiws.pkl</td>
<td>SentimentWortschatz (SentiWS)</td>
<td>英文</td>
<td>正面词、负面词；<br>效价</td>
</tr>
<tr>
<td>ChineseFinancialFormalUnformalSentiment.pkl</td>
<td>金融领域正式、非正式；积极消极</td>
<td>中文</td>
<td>formal-pos、<br>formal-neg；<br>unformal-pos、<br>unformal-neg</td>
</tr>
<tr>
<td>ANEW.pkl</td>
<td>英语单词的情感规范Affective Norms for English Words (ANEW)</td>
<td>英文</td>
<td>词语效价信息</td>
</tr>
<tr>
<td>LSD2015.pkl</td>
<td>Lexicoder Sentiment Dictionary (2015)</td>
<td>英文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>NRC.pkl</td>
<td>NRC Word-Emotion Association Lexicon</td>
<td>英文</td>
<td>细粒度情绪词；</td>
</tr>
<tr>
<td>geninqposneg.pkl</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>HuLiu.pkl</td>
<td>Hu&amp;Liu (2004)正、负情感词典</td>
<td>英文</td>
<td>正面词、负面词</td>
</tr>
<tr>
<td>AFINN.pkl</td>
<td>尼尔森 (2011) 的“新 ANEW”效价词表</td>
<td>英文</td>
<td>情感效价信息valence</td>
</tr>
<tr>
<td>LoughranMcDonald.pkl</td>
<td>会计金融LM词典</td>
<td>英文</td>
<td>金融领域正、负面情感词</td>
</tr>
<tr>
<td>ADV_CONJ.pkl</td>
<td>副词连词</td>
<td>中文</td>
<td></td>
</tr>
<tr>
<td>STOPWORDS.pkl</td>
<td></td>
<td>中、英</td>
<td>停用词</td>
</tr>
</tbody>
</table>
<h3 id="注意">注意:</h3>
<ul>
<li>
<p>如果用户情绪分析时使用DUTIR词典发表论文，请在论文中添加诸如“使用了大连理工大学信息检索研究室的情感词汇本体” 字样加以声明。参考文献中加入引文“徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.”</p>
</li>
<li>
<p>如果大家有制作的词典，可以上传至百度网盘，并在issue中留下词典的网盘链接。如词典需要使用声明，可连同文献出处一起issue</p>
</li>
</ul>
<br>
<h3 id="14-load_pkl_dict">1.4 load_pkl_dict</h3>
<p>导入pkl词典文件，返回字典样式数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1"># 导入pkl词典文件,</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;DUTIR&#39;: {&#39;哀&#39;: [&#39;怀想&#39;, &#39;治丝而棼&#39;, ...],
           &#39;好&#39;: [&#39;进贤黜奸&#39;, &#39;清醇&#39;, &#39;放达&#39;, ...], 
           &#39;惊&#39;: [&#39;惊奇不已&#39;, &#39;魂惊魄惕&#39;, &#39;海外奇谈&#39;,...],
           &#39;惧&#39;: [&#39;忸忸怩怩&#39;, &#39;谈虎色变&#39;, &#39;手忙脚乱&#39;, &#39;刿目怵心&#39;,...],
           &#39;乐&#39;: [&#39;百龄眉寿&#39;, &#39;娱心&#39;, &#39;如意&#39;, &#39;喜糖&#39;,...],
           &#39;怒&#39;: [&#39;饮恨吞声&#39;, &#39;扬眉瞬目&#39;,...],
           &#39;恶&#39;: [&#39;出逃&#39;, &#39;鱼肉百姓&#39;, &#39;移天易日&#39;,]
           }
</code></pre></div><br>
<h3 id="15-sentiment">1.5 sentiment</h3>
<p>sentiment(text, diction, lang=&lsquo;chinese&rsquo;)
使用diy词典进行情感分析，计算各个情绪词出现次数; 未考虑强度副词、否定词对情感的复杂影响，</p>
<ul>
<li>text:  待分析中文文本</li>
<li>diction:  情感词字典；</li>
<li>lang: 语言类型，&ldquo;chinese&quot;或&quot;english&rdquo;，默认&quot;chinese&quot;</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;我今天得奖了，很高兴，我要将快乐分享大家。&#39;</span>

<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span>
             <span class="n">diction</span><span class="o">=</span><span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;DUTIR.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;DUTIR&#39;</span><span class="p">],</span>
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;哀_num&#39;: 0,
 &#39;好_num&#39;: 0,
 &#39;惊_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;乐_num&#39;: 2,
 &#39;怒_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;stopword_num&#39;: 8,
 &#39;word_num&#39;: 14,
 &#39;sentence_num&#39;: 1}
</code></pre></div><p>如果不适用pkl词典，可以自定义自己的词典，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">diction</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;高兴&#39;</span><span class="p">,</span> <span class="s1">&#39;快乐&#39;</span><span class="p">,</span> <span class="s1">&#39;分享&#39;</span><span class="p">],</span>
           <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;难过&#39;</span><span class="p">,</span> <span class="s1">&#39;悲伤&#39;</span><span class="p">],</span>
           <span class="s1">&#39;adv&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;很&#39;</span><span class="p">,</span> <span class="s1">&#39;特别&#39;</span><span class="p">]}</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;我今天得奖了，很高兴，我要将快乐分享大家。&#39;</span>
<span class="n">ct</span><span class="o">.</span><span class="n">sentiment</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> 
             <span class="n">diction</span><span class="o">=</span><span class="n">diction</span><span class="p">,</span> 
             <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;pos_num&#39;: 3,
 &#39;neg_num&#39;: 0,
 &#39;adv_num&#39;: 1,
 &#39;stopword_num&#39;: 8,
 &#39;word_num&#39;: 14,
 &#39;sentence_num&#39;: 1}
</code></pre></div><p><br><br></p>
<h2 id="二dictionary">二、dictionary</h2>
<p>本模块用于构建词表(典),含</p>
<ul>
<li>SoPmi 共现法扩充词表(典)</li>
<li>W2VModels 词向量word2vec扩充词表(典)</li>
</ul>
<h3 id="21-sopmi-共现法">2.1 SoPmi 共现法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">sopmier</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">SoPmi</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span>
                   <span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_corpus.txt&#39;</span><span class="p">,</span>  <span class="c1">#原始数据，您的语料</span>
                   <span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_seed_words.txt&#39;</span><span class="p">,</span> <span class="c1">#人工标注的初始种子词</span>
                   <span class="p">)</span>   

<span class="n">sopmier</span><span class="o">.</span><span class="n">sopmi</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...Preprocess   Corpus ...
Step 2/4:...Collect co-occurrency information ...
Step 3/4:...Calculate   mutual information ...
Step 4/4:...Save    candidate words ...
Finish! used 44.49 s
</code></pre></div><br>
<h3 id="22-w2vmodels-词向量">2.2 W2VModels 词向量</h3>
<p><strong>特别要注意代码需要设定lang语言参数</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#初始化模型,需要设置lang参数。</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> 
                     <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>  <span class="c1">#语料数据 w2v_corpus.txt</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_corpus.txt&#39;</span><span class="p">)</span>


<span class="c1">#根据种子词，筛选出没类词最相近的前100个词</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/integrity.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/innovation.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/quality.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/respect.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/teamwork.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Step 1/4:...Preprocess   corpus ...
Step 2/4:...Train  word2vec model
            used   174 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s
Step 3/4:...Prepare similar candidates for each seed word in the word2vec model...
Step 4/4 Finish! Used 187 s

</code></pre></div><br>
<h3 id="需要注意">需要注意</h3>
<p>训练出的w2v模型可以后续中使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">w2v</span><span class="o">.</span><span class="n">model路径</span><span class="p">)</span>
<span class="c1">#找出word的词向量</span>
<span class="c1">#w2v_model.get_vector(word)</span>
<span class="c1">#更多w2_model方法查看</span>
<span class="c1">#help(w2_model)</span>
</code></pre></div><p>例如本代码，运行生成的结果路径<code>output/w2v_candi_words/w2v.model</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">w2v_model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;output/w2v_candi_words/w2v.model&#39;</span><span class="p">)</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">most_similar</span><span class="p">(</span><span class="s1">&#39;innovation&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;technology&#39;, 0.689210832118988),
 (&#39;infrastructure&#39;, 0.669672966003418),
 (&#39;resources&#39;, 0.6695448160171509),
 (&#39;talent&#39;, 0.6627111434936523),
 (&#39;execution&#39;, 0.6549549102783203),
 (&#39;marketing&#39;, 0.6533523797988892),
 (&#39;merchandising&#39;, 0.6504817008972168),
 (&#39;diversification&#39;, 0.6479553580284119),
 (&#39;expertise&#39;, 0.6446896195411682),
 (&#39;digital&#39;, 0.6326863765716553)]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#获取词向量</span>
<span class="n">w2v_model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;innovation&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([-0.45616838, -0.7799563 ,  0.56367606, -0.8570078 ,  0.600359  ,
       -0.6588043 ,  0.31116748, -0.11956959, -0.47599426,  0.21840936,
       -0.02268819,  0.1832016 ,  0.24452794,  0.01084935, -1.4213187 ,
        0.22840202,  0.46387577,  1.198386  , -0.621511  , -0.51598716,
        0.13352732,  0.04140598, -0.23470387,  0.6402956 ,  0.20394802,
        0.10799981,  0.24908689, -1.0117126 , -2.3168423 , -0.0402851 ,
        1.6886286 ,  0.5357047 ,  0.22932841, -0.6094084 ,  0.4515793 ,
       -0.5900931 ,  1.8684244 , -0.21056202,  0.29313338, -0.221067  ,
       -0.9535679 ,  0.07325   , -0.15823542,  1.1477109 ,  0.6716076 ,
       -1.0096023 ,  0.10605699,  1.4148282 ,  0.24576302,  0.5740349 ,
        0.19984631,  0.53964925,  0.41962907,  0.41497853, -1.0322098 ,
        0.01090925,  0.54345983,  0.806317  ,  0.31737605, -0.7965337 ,
        0.9282971 , -0.8775608 , -0.26852605, -0.06743863,  0.42815775,
       -0.11774074, -0.17956367,  0.88813037, -0.46279573, -1.0841943 ,
       -0.06798118,  0.4493006 ,  0.71962464, -0.02876493,  1.0282255 ,
       -1.1993176 , -0.38734904, -0.15875885, -0.81085825, -0.07678922,
       -0.16753489,  0.14065655, -1.8609751 ,  0.03587054,  1.2792674 ,
        1.2732009 , -0.74120265, -0.98000383,  0.4521185 , -0.26387128,
        0.37045383,  0.3680011 ,  0.7197629 , -0.3570571 ,  0.8016917 ,
        0.39243212, -0.5027844 , -1.2106236 ,  0.6412354 , -0.878307  ],
      dtype=float32)
</code></pre></div><p><br><br></p>
<h2 id="23-co_occurrence_matrix">2.3 co_occurrence_matrix</h2>
<p>词共现矩阵</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I go to school every day by bus .&#34;</span><span class="p">,</span>
         <span class="s2">&#34;i go to theatre every night by bus&#34;</span><span class="p">]</span>

<span class="n">ct</span><span class="o">.</span><span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> 
                        <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="/Users/thunderhit/Desktop/Coding/Python/diyPython/cntext/img/co_occurrence1.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">documents2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;编程很好玩&#34;</span><span class="p">,</span>
             <span class="s2">&#34;Python是最好学的编程&#34;</span><span class="p">]</span>

<span class="n">ct</span><span class="o">.</span><span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents2</span><span class="p">,</span> 
                        <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
                        <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="/Users/thunderhit/Desktop/Coding/Python/diyPython/cntext/img/co_occurrence2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="三similarity">三、similarity</h2>
<p>四种相似度计算函数</p>
<ul>
<li>cosine_sim(text1, text2)  cos余弦相似</li>
<li>jaccard_sim(text1, text2)     jaccard相似</li>
<li>minedit_sim(text1, text2)  最小编辑距离相似度；</li>
<li>simple_sim(text1, text2) 更改变动算法</li>
</ul>
<p>算法实现参考自 <code>Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.</code></p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span> 


<span class="n">text1</span> <span class="o">=</span> <span class="s1">&#39;编程真好玩编程真好玩&#39;</span>
<span class="n">text2</span> <span class="o">=</span> <span class="s1">&#39;游戏真好玩编程真好玩啊&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">cosine_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">jaccard_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">minedit_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">simple_sim</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">text2</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0.82
0.67
2.00
0.87
</code></pre></div><p><br><br></p>
<h2 id="四text2mind">四、Text2Mind</h2>
<p>词嵌入中蕴含着人类的认知信息，以往的词嵌入大多是比较一个概念中两组反义词与某对象的距离计算认知信息。</p>
<p>- <strong>多个对象在某概念的远近</strong>，职业与性别，某个职业是否存在亲近男性，而排斥女性</p>
<p>- 多个对象在某<strong>概念的分量(fen，一声)的多少</strong>， 人类语言中留存着对不同动物体积的认知记忆，如小鼠大象。动物词在词向量空间中是否能留存着这种大小的记忆</p>
<p>这两种认知分别可以用向量距离、向量语义投影计算得来。</p>
<ul>
<li>tm.sematic_distance(words, c_words1, c_words2)  向量距离</li>
<li>tm.sematic_projection(words, c_words1, c_words2)  向量语义投影</li>
</ul>
<h3 id="41-tmsematic_distancewords-c_words1-c_words2">4.1 tm.sematic_distance(words, c_words1, c_words2)</h3>
<p>分别计算words与c_words1、c_words2语义距离，返回距离差值。</p>
<p>例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">male_concept = [&#39;male&#39;, &#39;man&#39;, &#39;he&#39;, &#39;him&#39;]
female_concept = [&#39;female&#39;, &#39;woman&#39;, &#39;she&#39;, &#39;her&#39;]
software_engineer_concept  = [&#39;engineer&#39;,  &#39;programming&#39;,  &#39;software&#39;]
d1 = distance(male_concept,  software_engineer_concept)
d2 = distance(female_concept,  software_engineer_concept)
</code></pre></div><p>如果d1-d2&lt;0，说明在语义空间中，software_engineer_concept更接近male_concept，更远离female_concept。</p>
<p>换言之，在该语料中，人们对软件工程师这一类工作，对女性存在刻板印象(偏见)。</p>
<p><strong>下载glove_w2v.6B.100d.txt</strong>链接: <a href="https://pan.baidu.com/s/1MMfQ7M0YCzL9Klp4zrlHBw">https://pan.baidu.com/s/1MMfQ7M0YCzL9Klp4zrlHBw</a> 提取码: 72l0</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="c1">#Note: this is a word2vec format model</span>
<span class="n">tm</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">Text2Mind</span><span class="p">(</span><span class="n">w2v_model_path</span><span class="o">=</span><span class="s1">&#39;glove_w2v.6B.100d.txt&#39;</span><span class="p">)</span>

<span class="n">engineer</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;program&#39;</span><span class="p">,</span> <span class="s1">&#39;software&#39;</span><span class="p">,</span> <span class="s1">&#39;computer&#39;</span><span class="p">]</span>
<span class="n">mans</span> <span class="o">=</span>  <span class="p">[</span><span class="s2">&#34;man&#34;</span><span class="p">,</span> <span class="s2">&#34;he&#34;</span><span class="p">,</span> <span class="s2">&#34;him&#34;</span><span class="p">]</span>
<span class="n">womans</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;woman&#34;</span><span class="p">,</span> <span class="s2">&#34;she&#34;</span><span class="p">,</span> <span class="s2">&#34;her&#34;</span><span class="p">]</span>

<span class="c1">#在语义空间中，工程师更接近于男人，而不是女人。</span>
<span class="c1">#in semantic space, engineer is closer to man, other than woman.</span>
<span class="n">tm</span><span class="o">.</span><span class="n">sematic_distance</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">animals</span><span class="p">,</span> 
                    <span class="n">c_words1</span><span class="o">=</span><span class="n">mans</span><span class="p">,</span> 
                    <span class="n">c_words2</span><span class="o">=</span><span class="n">womans</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">-0.38
</code></pre></div><br>
<h3 id="42-tmsematic_projectionwords-c_words1-c_words2">4.2 tm.sematic_projection(words, c_words1, c_words2)</h3>
<p><strong>语义投影</strong>，根据两组反义词c_words1, c_words2构建一个概念(认知)向量, words中的每个词向量在概念向量中投影，即可得到认知信息。</p>
<p>分值越大，word越位于c_words2一侧。</p>
<p>下图是语义投影示例图，本文算法和图片均来自 &ldquo;Grand, G., Blank, I.A., Pereira, F. and Fedorenko, E., 2022. Semantic projection recovers rich human knowledge of multiple object features from word embeddings. <em>Nature Human Behaviour</em>, pp.1-13.&rdquo;</p>
<p><img loading="lazy" src="img/Nature_Semantic_projection_recovering_human_knowledge_of.png" alt=""  />
</p>
<p>例如，人类的语言中，存在尺寸、性别、年龄、政治、速度、财富等不同的概念。每个概念可以由两组反义词确定概念的向量方向。</p>
<p>以尺寸为例，动物在人类认知中可能存在体积尺寸大小差异。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">animals</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;mouse&#39;</span><span class="p">,</span> <span class="s1">&#39;cat&#39;</span><span class="p">,</span> <span class="s1">&#39;horse&#39;</span><span class="p">,</span>  <span class="s1">&#39;pig&#39;</span><span class="p">,</span> <span class="s1">&#39;whale&#39;</span><span class="p">]</span>
<span class="n">smalls</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;small&#34;</span><span class="p">,</span> <span class="s2">&#34;little&#34;</span><span class="p">,</span> <span class="s2">&#34;tiny&#34;</span><span class="p">]</span>
<span class="n">bigs</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;large&#34;</span><span class="p">,</span> <span class="s2">&#34;big&#34;</span><span class="p">,</span> <span class="s2">&#34;huge&#34;</span><span class="p">]</span>

<span class="c1"># In size conception, mouse is smallest, horse is biggest.</span>
<span class="c1"># 在大小概念上，老鼠最小，马是最大的。</span>
<span class="n">tm</span><span class="o">.</span><span class="n">sematic_projection</span><span class="p">(</span><span class="n">words</span><span class="o">=</span><span class="n">animals</span><span class="p">,</span> 
                      <span class="n">c_words1</span><span class="o">=</span><span class="n">smalls</span><span class="p">,</span> 
                      <span class="n">c_words2</span><span class="o">=</span><span class="n">bigs</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;mouse&#39;, -1.68),
 (&#39;cat&#39;, -0.92),
 (&#39;pig&#39;, -0.46),
 (&#39;whale&#39;, -0.24),
 (&#39;horse&#39;, 0.4)]
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>streamlit|任务周期表生成器</title>
      <link>https://textdata.cn/blog/periodic-table-creator/</link>
      <pubDate>Tue, 29 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/periodic-table-creator/</guid>
      <description>这个周期表生成器的想法是创建一个关于 自然语言处理任务周期表的博客。 在 Streamlit 的帮助下并受到此 Bokeh的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！</description>
      <content:encoded><![CDATA[<iframe
    src="//player.bilibili.com/player.html?bvid=BV1mu411i7Jv&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<p>这个<strong>周期表生成器</strong>的想法是创建一个关于 <a href="https://www.innerdoc.com/periodic-table-of-nlp-tasks/">自然语言处理任务周期表</a> 的博客。 在 Streamlit 的帮助下并受到此 Bokeh <a href="https://docs.bokeh.org/en/latest/docs/gallery/periodic.html">图库示例</a> 的启发，它成为了一个动态的创建者，可以根据您的元素周期表进行定制 ！</p>
<p>大邓的作用仅仅是将其汉化，没有做布局上的新创新。</p>
<br>
<h2 id="下载">下载</h2>
<p>点击下载<a href="periodic-table-creator.zip"><strong>periodic-table-creator</strong></a>项目压缩文件夹</p>
<br>
<p>下面是自定义的<strong>任务周期表</strong>示例。 在这种情况下：对于自然语言处理任务！</p>
<p><img loading="lazy" src="img/periodic-table-generator-customize-content.png" alt="alt text"  />
</p>
<br>
<h2 id="安装运行">安装&amp;运行</h2>
<p>打开命令行(终端),</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install streamlit==1.8.1
pip3 install bokeh==2.4.1


#切换至项目文件夹periodic-table-creator
cd periodic-table-creator

#运行streamlit
streamlit run periodic_table_creator.py
</code></pre></div><p>此时在命令行中会出现</p>
<p><img loading="lazy" src="img/terminal.png" alt=""  />
</p>
<p>点击<strong>Local URL</strong>对应的链接，或者将该链接复制粘贴到浏览器，即可访问。</p>
<p><img loading="lazy" src="img/firstrun.png" alt=""  />
</p>
<br>
<h2 id="导入数据">导入数据</h2>
<p>创建自己特有的<strong>任务周期表</strong>需要导入自由的csv数据。可以[点击这里] (periodic-table-creator/periodic_nlp.csv) 下载并查看数据格式，或者运行案例时， 点击按钮&quot;Edit CSV text&quot; 查看示例数据格式。</p>
<ul>
<li>表的字符名(列名): <code>atomicnumber;group;period;symbol;elementname;groupname;color;url;excerpt</code></li>
<li>csv文件的分隔符使用英文格式下的 <code>;</code>或<code>,</code></li>
<li>csv文件使用utf-8编码</li>
</ul>
<p><img loading="lazy" src="img/periodic-table-generator-load-content.png" alt=""  />
</p>
<br>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>doccano | 为机器学习建模做数据标注</title>
      <link>https://textdata.cn/blog/doccano_text_anotation/</link>
      <pubDate>Mon, 28 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/doccano_text_anotation/</guid>
      <description>使用doccano，为机器学习建模做数据标注</description>
      <content:encoded><![CDATA[<h2 id="doccano">doccano</h2>
<p><a href="https://www.bilibili.com/video/BV1uJ4m1M7ht/">有多少人工，就有多少智能</a>。 因此标注数据是十分重要的， doccano是开源的数据标注工具，可以简化数据标注的难度。需要注意，市面上的机器学习课程一般都默认数据已标注，在此基础上讲机器学习。</p>
<p><img loading="lazy" src="img/doccano.gif" alt=""  />
</p>
<p>您还可以将 doccano 与您的脚本集成，因为它将功能公开为API。 doccano API是在局域网内的网址链接，多台设备可打开浏览、标注。</p>
<br>
<h2 id="一标记流程">一、标记流程</h2>
<p>通过以下步骤开始和完成使用 doccano 的标签项目：</p>
<ol>
<li>安装doccano。</li>
<li>运行doccano。</li>
<li>设置标签项目。 选择标签项目的类型， 配置项目设置。</li>
<li>导入数据集。 您还可以导入带标签的数据集。</li>
<li>给项目添加<strong>标注人员</strong></li>
<li>给标志者定义标注工作文档说明</li>
<li>开始标记数据。</li>
<li>导出标记的数据集。</li>
</ol>
<br>
<h2 id="二配置环境">二、配置环境</h2>
<h3 id="21-安装">2.1 安装</h3>
<p>打开命令行（cmd、terminal）执行安装命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install doccano
</code></pre></div><br>
<h3 id="22-运行doccano">2.2 运行doccano</h3>
<p>在命令行（cmd、terminal）内依次执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#在电脑第一次运行的时候初始化doccano
#只需设置一次，之后不用再运行该命令
doccano init

#创建用户名及密码；例如现在有一个主管admin，两个标注员tom和jack
#设置好用户，之后不用再运行该命令
doccano createuser --username admin --password pass
doccano createuser --username tom --password pass
doccano createuser --username jack --password pass

#开启doccano服务
doccano webserver
</code></pre></div><p>完成上述操作后，另打开一个新的命令行，执行下列命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">doccano task
</code></pre></div><br>
<h2 id="三案例">三、案例</h2>
<p>下面我们以外卖评论数据为例，对评论进行判断，标注为正、负面情感。<a href="data.csv">点击下载data.csv</a></p>
<br>
<h3 id="31-创建项目">3.1 创建项目</h3>
<p>先登录用户名和密码，这里的admin是超级用户(权限最大)</p>
<p><img loading="lazy" src="img/signin.png" alt=""  />
</p>
<p>为创建项目，如图点击<strong>Create</strong>按钮。 根据需要选择合适的项目类别,这里选择的<strong>Text  Classification，</strong></p>
<p><strong>填写项目信息</strong>，例如项目名情感标注，简介、标注类型</p>
<p><img loading="lazy" src="img/create_project.png" alt=""  />
</p>
<p>根据需要选择项目的功能需求，例如允许单标签，把数据打乱随机显示， 用户之间共享标注</p>
<p><img loading="lazy" src="img/create_project2.png" alt=""  />
</p>
<br>
<h3 id="32-上传数据">3.2 上传数据</h3>
<p>创建项目后，点击<strong>Dataset</strong>按钮，点击<strong>Import dataset</strong>导入数据。我这里准备的是csv文件，拥有review和label两个字段。</p>
<p><img loading="lazy" src="img/import_dataset1.png" alt=""  />
</p>
<p><img loading="lazy" src="img/import_dataset2.png" alt=""  />
</p>
<p><img loading="lazy" src="img/import_dataset3.png" alt=""  />
</p>
<br>
<h3 id="33-定义标签">3.3 定义标签</h3>
<p>点击左侧菜单中的“<strong>Labels</strong>”按钮来定义我们的标签。 我们应该看到标签编辑器页面。 在标签编辑器页面中，您可以通过指定标签文本、快捷键、背景颜色和文本颜色来创建标签。</p>
<p><img loading="lazy" src="img/define_labels.png" alt=""  />
</p>
<p><img loading="lazy" src="img/define_labels1.png" alt=""  />
</p>
<p>同理，可以定义负面neg标签。现在有了pos和neg两个标签。</p>
<p><img loading="lazy" src="img/define_labels3.png" alt=""  />
</p>
<br>
<h3 id="34-添加成员">3.4 添加成员</h3>
<p>点击左侧目录中的 <code>Members</code> 按钮，</p>
<p><img loading="lazy" src="img/select_members.png" alt=""  />
</p>
<p>然后，选择“<strong>Add</strong>”按钮以显示表单。 使用您要添加到项目中的用户名和角色填写此表单。 然后，选择“<strong>Save</strong>”按钮。</p>
<p><img loading="lazy" src="img/select_user.png" alt=""  />
</p>
<p>如果没有可供选择的成员，记得创建成员。形如<code>doccano createuser --username tom --password pass</code></p>
<br>
<h3 id="35-开始标注">3.5 开始标注</h3>
<p>接下来，我们准备标注文本数据。 只需点击导航栏中的“<strong>Start annotation</strong>”按钮，我们就可以开始对文档进行批注了。</p>
<p><img loading="lazy" src="img/annotation.png" alt=""  />
</p>
<br>
<h3 id="36-导出数据">3.6 导出数据</h3>
<p>在注释步骤之后，我们可以下载标注后的数据。 转到“<strong>Dataset</strong>”页面，然后单击“操作”菜单中的“<strong>Export dataset</strong>”按钮。 选择导出格式后，单击“<strong>Export</strong>”。 您应该看到以下屏幕：</p>
<p><img loading="lazy" src="img/export_dataset.png" alt=""  />
</p>
<p>到出的结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;all.csv&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p><img loading="lazy" src="img/export_dataset2.png" alt=""  />
</p>
<br>
<h3 id="37-导出数据">3.7 导出数据</h3>
<p>对了，当标注过程不同阶段，还看查看标注工作量等可视化信息</p>
<p><img loading="lazy" src="img/vis.png" alt=""  />
</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Rembg库 | 可以去掉图片背景的</title>
      <link>https://textdata.cn/blog/rembg_remove_background_from_image/</link>
      <pubDate>Wed, 23 Mar 2022 10:43:10 +0600</pubDate>
      
      <guid>/blog/rembg_remove_background_from_image/</guid>
      <description>最近一年多，大邓之前一直使用自己diy的浏览器启动页, 最初是被该启动页的关键词搜索功能所惊艳。但用久了人总会喜新厌旧，但是每次打开浏览器，呈现的网址链接效果太繁杂了。而且大多数都是僵尸链接，平常很少点击的，反而常用的链接都设置成了快捷键。</description>
      <content:encoded><![CDATA[<h2 id="rembg">Rembg</h2>
<p>Rembg可以去掉图片中的背景，效果如下</p>
<p><img loading="lazy" src="clean_bg.png" alt=""  />
</p>
<br>
<h2 id="安装">安装</h2>
<p>CPU版</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pip install rembg
</code></pre></div><p>GPU版</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pip install rembg<span class="o">[</span>gpu<span class="o">]</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>安装成功后，可以在命令行中调动Rembg。如果只对<strong>单个图片</strong>进行处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">rembg i path/to/input.png path/to/output.png
</code></pre></div><p>对多个图片文件处理(批处理)，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">rembg p path/to/input path/to/output
</code></pre></div><br>
<h3 id="在python中使用">在Python中使用</h3>
<p>把图片读取为二进制数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">rembg</span> <span class="kn">import</span> <span class="n">remove</span>

<span class="c1">#待处理的图片路径</span>
<span class="n">input_path</span> <span class="o">=</span> <span class="s1">&#39;input.png&#39;</span>
<span class="c1">#处理后存储的图片路径</span>
<span class="n">output_path</span> <span class="o">=</span> <span class="s1">&#39;output.png&#39;</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">input_path</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">o</span><span class="p">:</span>
        <span class="nb">input</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">remove</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Python计算地图中两点距离及方位角</title>
      <link>https://textdata.cn/blog/how_to_calculate_geo_distance_in_python/</link>
      <pubDate>Thu, 17 Mar 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/how_to_calculate_geo_distance_in_python/</guid>
      <description>使用Python的geographiclib包可以用来计算地理信息，诸如两城市距离、方位角等信息</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="img/earth.jpg" alt=""  />
</p>
<br>
<h2 id="下载本文代码使用python计算地图中两点距离及方位角ipynb"><a href="%E4%BD%BF%E7%94%A8Python%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9B%BE%E4%B8%AD%E4%B8%A4%E7%82%B9%E8%B7%9D%E7%A6%BB%E5%8F%8A%E6%96%B9%E4%BD%8D%E8%A7%92.ipynb">下载本文代码</a></h2>
<br>
<h2 id="如何计算地图中两点距离及角度">如何计算地图中两点距离及角度</h2>
<p>例如北京市北纬40.1，东经116.6； 哈尔滨市北纬45.7567, 东经126.6424</p>
<p>感兴趣的童鞋也可去看问题出处</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/3932502/calculate-angle-between-two-latitude-longitude-points/51415608">https://stackoverflow.com/questions/3932502/calculate-angle-between-two-latitude-longitude-points/51415608</a></p>
</blockquote>
<p>在回答中，看到有地理信息系统Python包geographiclib，可以计算两点距离和角度。</p>
<br>
<h2 id="安装geographiclib">安装geographiclib</h2>
<p><a href="https://geographiclib.sourceforge.io/1.52/python/">https://geographiclib.sourceforge.io/1.52/python/</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">geographiclib</span><span class="o">==</span><span class="mf">1.52</span>
</code></pre></div><br>
<h2 id="计算距离">计算距离</h2>
<p>注意，在接下来的计算中，将北纬、东经表示为正数。将南纬、西经表示为负数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">distance</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。
</span><span class="s2">    dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负
</span><span class="s2">    beiwei2: 地点2的纬度数
</span><span class="s2">    dongjing2: 地点2的经度数
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">from</span> <span class="nn">geographiclib.geodesic</span> <span class="kn">import</span> <span class="n">Geodesic</span>
    <span class="n">geod</span> <span class="o">=</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">WGS84</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">geod</span><span class="o">.</span><span class="n">Inverse</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="n">g</span><span class="p">[</span><span class="s1">&#39;s12&#39;</span><span class="p">]</span><span class="o">/</span><span class="mi">1000</span>
    <span class="k">return</span> <span class="n">distance</span>
    

<span class="c1">#北京Beijing与哈尔滨harbin</span>
<span class="n">distance</span><span class="p">(</span><span class="mf">40.1</span><span class="p">,</span> <span class="mf">116.6</span><span class="p">,</span> <span class="mf">45.7567</span><span class="p">,</span> <span class="mf">126.6424</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>1031.617791888516
</code></pre>
<p><img loading="lazy" src="img/%e8%b7%9d%e7%a6%bb.png" alt=""  />
</p>
<br>
<h2 id="方位角azimuth">方位角azimuth</h2>
<p>两个地点在地图中所处的相对位置，称之为方位角azimuth。方位角最大度数360度，</p>
<ul>
<li>0度表示正北</li>
<li>90度表示正西</li>
<li>180度表示正南</li>
<li>270度表示正西</li>
<li>360度表示正北</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">azimuth</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    beiwei1: 地点1的纬度数，如果地点在北半球，北纬为正；反之为负。
</span><span class="s2">    dongjing1: 地点2的经度数， 如果位于东半球，东经数为正；反之为负
</span><span class="s2">    beiwei2: 地点2的纬度数
</span><span class="s2">    dongjing2: 地点2的经度数
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">from</span> <span class="nn">geographiclib.geodesic</span> <span class="kn">import</span> <span class="n">Geodesic</span>
    <span class="n">geod</span> <span class="o">=</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">WGS84</span>
    <span class="n">l</span> <span class="o">=</span> <span class="n">geod</span><span class="o">.</span><span class="n">InverseLine</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">s12</span> <span class="o">=</span> <span class="n">distance</span><span class="p">(</span><span class="n">beiwei1</span><span class="p">,</span> <span class="n">dongjing1</span><span class="p">,</span> <span class="n">beiwei2</span><span class="p">,</span> <span class="n">dongjing2</span><span class="p">)</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">Position</span><span class="p">(</span><span class="n">s12</span><span class="p">,</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">STANDARD</span> <span class="o">|</span> <span class="n">Geodesic</span><span class="o">.</span><span class="n">LONG_UNROLL</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">g</span><span class="p">[</span><span class="s1">&#39;azi2&#39;</span><span class="p">]</span>

<span class="c1">#北京 哈尔滨</span>
<span class="n">azimuth</span><span class="p">(</span><span class="mf">40.1</span><span class="p">,</span> <span class="mf">116.6</span><span class="p">,</span> <span class="mf">45.7567</span><span class="p">,</span> <span class="mf">126.6424</span><span class="p">)</span>
</code></pre></div><pre><code>56.03961942267271
</code></pre>
<p>按照azimuth定义，56度的解读为 哈尔滨位于北京的东北方向。</p>
<p>同理可以计算西安与杭州</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#西安， 杭州</span>
<span class="n">azimuth</span><span class="p">(</span><span class="mf">34.2658</span><span class="p">,</span> <span class="mf">108.9541</span><span class="p">,</span> <span class="mf">30.2741</span><span class="p">,</span> <span class="mf">120.1552</span><span class="p">)</span>
</code></pre></div><pre><code>115.1506923699206
</code></pre>
<p>杭州位于西安的115度，即东南方向</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Python中使用Greppo构建的地理空间仪表板</title>
      <link>https://textdata.cn/blog/geospatial_with_greppo/</link>
      <pubDate>Sat, 12 Mar 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/geospatial_with_greppo/</guid>
      <description>缺乏前端、后端和网络开发经验可能会限制使用 Python 制作网络应用程序。 在Python中使用 Greppo构建的地理空间仪表板</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="vector-demo.zip">
        <img src="img/1.gif" width="100%" />
    </a>
    <figcaption><small><i>点击本图下载本文项目代码</i></small></figcaption>
</figure>
</div>
<h2 id="下载项目数据代码vector-demozip"><a href="vector-demo.zip">下载项目数据代码</a></h2>
<p><strong>地理空间数据分析</strong>已成为数据科学中的一个常见领域。对于地理空间数据科学来说也不例外。支持 GeoPandas、Shapely 和 Rasterio 等项目的社区使 Python 成为地理空间分析的首选。</p>
<br>
<h2 id="greppo快速简单的地理空间仪表板构建方法">Greppo：快速简单的地理空间仪表板构建方法</h2>
<p>Greppo 是一个用于构建地理空间网络应用程序的开源 Python 框架。 它提供了可随时使用的前端和后端组件作为函数，充当前端交互组件和绑定的后端变量之间的 API。 要了解有关心智模型的更多信息，<a href="https://docs.greppo.io/mental-model.html">请参阅此页面</a>。</p>
<p>无需太多前端、后端、Web 开发经验，您就可以在 5 分钟内使用 Python 构建和部署功能齐全的 Web 应用程序。</p>
<ul>
<li>GitHub存储库：https://github.com/greppo-io/greppo</li>
<li>文档：https://docs.greppo.io/</li>
<li>网站：https://greppo.io/</li>
</ul>
<blockquote>
<p>在本教程中，我们将使用 Greppo 在 Python 中构建地理空间仪表板。 我们将通过设置环境、安装、导入数据、为我们的仪表板放入组件并为其提供服务来工作。 您将需要了解 Python、GeoPandas 和地理空间分析的基础知识。
入门…</p>
</blockquote>
<p>首先要做的是安装本文需要的 Python 第三方库。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install greppo geopandas
</code></pre></div><p>下载本教程所需的数据集。 本教程的所有数据和代码都可以在这个 GitHub 存储库中找到：greppo-demo/vector-demo（数据源：https://github.com/openpolis/geojson-italy）</p>
<br>
<h2 id="编写仪表板脚本">编写仪表板脚本</h2>
<p>我们首先为项目设置文件夹结构。 我将使用以下项目文件夹结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">└── vector-demo
    ├── app.py
    ├── cities.geojson
    ├── regions.geojson
    └── roads.geojson
</code></pre></div><p>该应用程序的主控脚本是 app.py。</p>
<br>
<h2 id="step-0启动服务器">Step 0：启动服务器</h2>
<p>启动服务器，请打开**终端（windows对应的是命令行cmd）**并按照这些说明进行操作。</p>
<p>首先，终端中执行<code>cd vector_demo</code>将工作目录切换为 (cd) 项目文件夹 <strong>vector_demo</strong>。</p>
<p>然后，终端执行<code>greppo serve app.py</code>, 启动服务器。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/2.png" width="90%" />
    
    <figcaption><small><i>在命令行中启动服务器</i></small></figcaption>
</figure>
</div>
<p>然后，您将看到 Uvicorn 服务器在指定位置（类似于链接）运行。 复制网址链接，并将其粘贴到浏览器中。 然后它将加载应用程序。 如果您对 app.py 进行了任何更改，您将在浏览器页面上看到对您的应用的更新更改。</p>
<br>
<h2 id="step-1构建应用程序的基本脚手架">Step 1：构建应用程序的基本脚手架。</h2>
<p>即导入 greppo 包，并在地图中添加 base_layer。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Open Street Map&#34;</span><span class="p">,</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://</span><span class="si">{s}</span><span class="s2">.tile.openstreetmap.org/</span><span class="si">{z}</span><span class="s2">/</span><span class="si">{x}</span><span class="s2">/</span><span class="si">{y}</span><span class="s2">.png&#34;</span><span class="p">,</span>
    <span class="n">subdomains</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
    <span class="n">attribution</span><span class="o">=</span><span class="s1">&#39;(C) OpenStreetMap contributors&#39;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span><span class="n">provider</span><span class="o">=</span><span class="s2">&#34;CartoDB Positron&#34;</span><span class="p">)</span>
</code></pre></div><p>您需要先从 greppo 导入应用程序。 此应用程序对象将用作您的应用程序前端的接口，并为前端和后端之间的 2 路通信提供 API。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/3.png" width="90%" />
    
    
</figure>
</div>
<p>要将 base_layer 添加到您的应用程序地图，只需使用带有所需参数的应用程序 API 方法 app.base_layer()。 请<a href="https://docs.greppo.io/">参阅文档</a>以了解什么是必需的和什么是可选的。 base_layer 方法提供了两种方法来指定基本瓦片层。 一种是使用 name 和 url 属性。 另一种方法是使用提供者的名称。</p>
<br>
<h2 id="step-2导入数据集并将其显示为叠加层">Step 2：导入数据集并将其显示为叠加层。</h2>
<p>使用 geopandas，我们可以将矢量数据集作为 GeoDataFrame 导入。 然后可以使用 app.vector_layer() 方法在 Web 应用程序上的地图上对其进行可视化。
在这里，我要导入三个不同的数据集，每个数据集都有多边形（意大利不同地区的边界）、线（意大利的主要高速公路）和点（意大利的主要城市）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
<span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">regions</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Regions of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Polygons showing the boundaries of regions of Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;fillColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#4daf4a&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">roads</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Highways in Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Lines showing the major highways in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#377eb8&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">cities</span><span class="p">,</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Cities of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Points showing the cities in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#e41a1c&#34;</span><span class="p">},</span>
    <span class="n">visible</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div><p>使用方法 app.vector_layer() 作为前端的 API，我们可以显示矢量数据。 您需要传入名称，其他参数是可选的。 虽然，将颜色或填充颜色传递给样式是区分和识别每一层的好习惯。 由于前端基于 Leaflet，所有样式都符合 Leaflet 的规范，可以在文档中找到。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/4.png" width="100%" />
    
    
</figure>
</div>
<p>您可以在此处找到 vector_layer 和样式的所有信息。 注意：您也可以制作 Choropleth 地图。 可以在此处找到其文档。</p>
<br>
<h2 id="step-3显示应用内文本应用标题和应用描述">Step 3：显示应用内文本、应用标题和应用描述</h2>
<p>为了使 Web 应用程序有用，它需要携带一些文本以向其用户提供一些指导和上下文。 这些可以显示在组件旁边的侧边栏上。 使用 app.display() 方法可以在 web-app 上显示降价文本。 使用相同的方法，可以设置应用程序的标题和描述。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;Vector demo&#39;</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;description&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;A Greppo demo app for vector data using GeoJSON data.&#39;</span><span class="p">)</span>

<span class="n">text_1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">## About the web-app
</span><span class="s2">The dashboard shows the boundaries of the regions of Italy as polygons, 
</span><span class="s2">the major arterial higways as lines and the major cities of each region as points.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-1&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">text_1</span><span class="p">)</span>
</code></pre></div><p>app.display() 接受两个参数 name 和 value 。 虽然 value 承载要显示的文本，但 name 必须是唯一的，并带有文本的标识符。 如果 name=&lsquo;title&rsquo; 传递的值是应用程序的标题，如果 name=&lsquo;description&rsquo; 传递的值是应用程序的描述。 如果没有这两者中的任何一个，该应用程序将带有其默认标题和描述。 鼓励设置应用程序的标题和描述。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/5.png" width="100%" />
    
    
</figure>
</div>
<br>
<h2 id="step-4将数据显示为图表">Step 4：将数据显示为图表</h2>
<p>数据应用程序几乎没有将数据显示为图表。 Greppo 还允许您将数据显示为图表。 可以在文档中找到有关图表及其用法的信息。 这里，作为一个例子，展示了一个条形图，app.bar_chart()。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-2&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;The following displays the count of polygons, lines and points as a barchart.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">bar_chart</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;Geometry count&#39;</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;A bar-cart showing the count of each geometry-type in the datasets.&#39;</span><span class="p">,</span>
              <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;polygons&#39;</span><span class="p">,</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="s1">&#39;points&#39;</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">regions</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">roads</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)],</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#984ea3&#39;</span><span class="p">)</span>
</code></pre></div><p>图表所需的参数是名称、x 和 y 值。 可以添加描述和颜色来为应用程序用户提供更好的上下文。 名称和描述与图表一起显示。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/6.png" width="90%" />
    
    
</figure>
</div>
<br>
<h2 id="结论">结论</h2>
<p>让我们全面了解一下我们在这里所做的事情。 我们的目标是使用 Greppo 创建一个地理空间 web 应用程序，以显示一些 GIS 矢量数据，并添加组件以为应用程序的用户提供更好的上下文。 这是该应用程序的完整代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">greppo</span> <span class="kn">import</span> <span class="n">app</span>
<span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;Vector demo&#39;</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;description&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;A Greppo demo app for vector data using GeoJSON data.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Open Street Map&#34;</span><span class="p">,</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://</span><span class="si">{s}</span><span class="s2">.tile.openstreetmap.org/</span><span class="si">{z}</span><span class="s2">/</span><span class="si">{x}</span><span class="s2">/</span><span class="si">{y}</span><span class="s2">.png&#34;</span><span class="p">,</span>
    <span class="n">subdomains</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
    <span class="n">attribution</span><span class="o">=</span><span class="s1">&#39;(C) OpenStreetMap contributors&#39;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">base_layer</span><span class="p">(</span>
    <span class="n">provider</span><span class="o">=</span><span class="s2">&#34;CartoDB Positron&#34;</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">regions</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./regions.geojson&#34;</span><span class="p">)</span>
<span class="n">roads</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./roads.geojson&#34;</span><span class="p">)</span>
<span class="n">cities</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="s2">&#34;./cities.geojson&#34;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">regions</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Regions of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Polygons showing the boundaries of regions of Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;fillColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#4daf4a&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">roads</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Highways in Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Lines showing the major highways in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#377eb8&#34;</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">vector_layer</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">cities</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;Cities of Italy&#34;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;Points showing the cities in Italy.&#34;</span><span class="p">,</span>
    <span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;#e41a1c&#34;</span><span class="p">},</span>
    <span class="n">visible</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">text_1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">## About the web-app
</span><span class="s2">
</span><span class="s2">The dashboard shows the boundaries of the regions of Italy as polygons, the 
</span><span class="s2">major arterial higways as lines and the major cities of each region as points.
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-1&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">text_1</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;text-2&#39;</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="s1">&#39;The following displays the count of polygons, lines and points as a barchart.&#39;</span><span class="p">)</span>

<span class="n">app</span><span class="o">.</span><span class="n">bar_chart</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;Geometry count&#39;</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;A bar-cart showing the count of each geometry-type in the datasets.&#39;</span><span class="p">,</span>
              <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;polygons&#39;</span><span class="p">,</span> <span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="s1">&#39;points&#39;</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">regions</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">roads</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)],</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#984ea3&#39;</span><span class="p">)</span>
</code></pre></div><p>运行效果如下</p>
<div style="text-align: center;">
<figure >
    <a href="vector-demo.zip">
        <img src="img/1.gif" width="100%" />
    </a>
    <figcaption><small><i>点击本图下载本文项目代码</i></small></figcaption>
</figure>
</div>
<h2 id="下载项目数据代码vector-demozip-1"><a href="vector-demo.zip">下载项目数据代码</a></h2>
<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title></title>
      <link>https://textdata.cn/blog/read_csv_fast_with_pandas/</link>
      <pubDate>Sat, 05 Feb 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/read_csv_fast_with_pandas/</guid>
      <description>当遇到特别大的csv文件，例如500M，pandas读取会很慢。本文提供了新的解决办法</description>
      <content:encoded><![CDATA[<h2 id="问题场景">问题场景</h2>
<p>当遇到特别大的csv文件，例如500M，pandas读取会很慢，在之前教程中要使用其他包另类的语法。现在只需更新pandas，加一个参数即可。</p>
<p>在本文中，我们将介绍：</p>
<ul>
<li>Pandas 的默认 CSV读数据， v1.4 中引入的更快、更并行的 CSV解析器。</li>
<li>一种不同的方法可以使事情变得更快。</li>
<li>读取 CSV，默认方式</li>
</ul>
<p>碰巧有一个 850MB 的 CSV 文件，这是使用 Pandas 加载它的默认方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">## 更新pandas</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pandas</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;large.csv&#34;</span><span class="p">)</span>
</code></pre></div><p>下面是<strong>旧的pandas版本</strong>代码读数据所消耗时间</p>
<p>0m13.245s</p>
<br>
<h2 id="使用pyarrow读csv">使用pyarrow读csv</h2>
<p>2022年1月份，刚刚发布的pandas1.4版本增加了arrow库的csv解析器。对了，该功能仍然处于试验阶段，不是默认解析器，但是足够快。下面是新版本用法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;large.csv&#34;</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;pyarrow&#34;</span><span class="p">)</span>
</code></pre></div><p>新版本代码读数据所消耗时间</p>
<p>0m6.507s</p>
<table>
<thead>
<tr>
<th>CSV解析器</th>
<th>CPU运行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认C</td>
<td>13.2s</td>
</tr>
<tr>
<td>PyArrow</td>
<td>6.5s</td>
</tr>
</tbody>
</table>
<p>需要注意，如果你的数据分析项目已经使用了并行加速数据的读取，那么今天的新教程（pyarrow）并不会特别显著改善代码运行速度（十几倍加速），但至少可能提供有意义的加速（一倍左右）。</p>
<br>
<h2 id="重新思考">重新思考</h2>
<p>加载 CSV 基本上是一项繁重的工作：</p>
<ul>
<li>需要分成几行。</li>
<li>需要用逗号分隔每一行。</li>
<li>需要处理字符串引用。</li>
<li>需要猜测（！）列的类型，除非您明确地将它们传递给 Pandas。</li>
<li>需要将字符串转换为整数、日期和其他非字符串类型。</li>
</ul>
<p>所有这些都需要 CPU 时间。</p>
<p>如果您从第三方获取 CSV，并且只处理一次，那么您对此无能为力。但是，如果您多次加载同一个 CSV 文件怎么办？或者，如果您是在数据处理管道的其他部分生成输入文件的人，该怎么办？</p>
<p>您可以读取其他一些处理速度更快的文件格式，而不是读取 CSV。让我们看一个例子，使用 Parquet 数据格式。 Parquet 文件旨在快速读取：您不必像使用 CSV 那样进行大量解析。与 CSV 不同，其中列类型在文件读取时无需编码，在 Parquet 中，列的类型存储在实际文件中。</p>
<p>首先，我们将 CSV 文件转换为 Parquet 文件；我们禁用压缩，因此我们正在与 CSV 进行更多的苹果对苹果的比较。当然，如果您是第一个生成文件的人，则不需要转换步骤，您可以直接将数据写入 Parquet。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;large.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">to_parquet</span><span class="p">(</span><span class="s2">&#34;large.parquet&#34;</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</code></pre></div><p>现在我们的数据存在于large.parquet中，再读取large.parquet看看读取时间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_parquet</span><span class="p">(</span><span class="s2">&#34;large.parquet&#34;</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">&#34;fastparquet&#34;</span><span class="p">)</span>
</code></pre></div><p>2.441s</p>
<table>
<thead>
<tr>
<th>CSV解析器</th>
<th>CPU运行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认C</td>
<td>13.2s</td>
</tr>
<tr>
<td>PyArrow</td>
<td>6.5s</td>
</tr>
<tr>
<td>fastparquet</td>
<td>2.4s</td>
</tr>
</tbody>
</table>
<br>
<p>纯粹由 CPU 衡量，fastparquet 是迄今为止最快的。  这只是一个例子。 但显然阅读 Parquet 格式的效率要高得多。</p>
<br>
<h2 id="最好的文件格式不是-csv">最好的文件格式不是 CSV</h2>
<p>CSV 是一种糟糕的格式。 除了解析效率低下之外，缺少类型数据意味着解析总是比具有实际列类型的结构化文件格式更容易出错和模棱两可。 因此，如果可以，请避免使用 CSV 并使用更好的格式，尽量选择其他高效类型，如 Parquet。</p>
<p>如果你被 CSV 卡住了，考虑在 Pandas 1.4 中使用新的 PyArrow CSV 解析器； 你会得到很好的加速，特别是如果你的程序当前没有利用多个 CPU。</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hitomi|下载图像/视频/音乐/文本等的桌面实用程序</title>
      <link>https://textdata.cn/blog/hitomi_downloader/</link>
      <pubDate>Sat, 15 Jan 2022 13:50:10 +0600</pubDate>
      
      <guid>/blog/hitomi_downloader/</guid>
      <description>从各种网站下载图像/视频/音乐/文本等的桌面实用程序</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<p>用于从各种网站下载图像/视频/音乐/文本等的桌面实用程序。</p>
<p><img loading="lazy" src="img/card_crop.png" alt=""  />
</p>
<br>
<h2 id="下载安装">下载安装</h2>
<p><strong>App版</strong>，仅支持Win</p>
<p><a href="https://github.com/KurtBestor/Hitomi-Downloader/releases/tag/v3.7h">https://github.com/KurtBestor/Hitomi-Downloader/releases/tag/v3.7h</a>
<br>
<strong>Chrome浏览器插件</strong></p>
<p><a href="https://github.com/KurtBestor/Hitomi-Downloader/wiki/Chrome-Extension">https://github.com/KurtBestor/Hitomi-Downloader/wiki/Chrome-Extension</a></p>
<br>
<h2 id="操作演示">操作演示</h2>
<p><img loading="lazy" src="img/how_to_download.gif" alt=""  />
</p>
<br>
<h2 id="功能特色">功能特色</h2>
<ul>
<li>🍰 简洁用户接口</li>
<li>🚀 加速下载</li>
<li>📜 支持用户diy脚本</li>
<li>🧲 支持BitTorrent &amp; Magnet</li>
<li>🎞️ 支持 M3U8 &amp; MPD 格式视频下载</li>
</ul>
<br>
<h2 id="支持的站点sites">支持的站点Sites</h2>
<table>
<thead>
<tr>
<th style="text-align:center">Site</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>AfreecaTV</strong></td>
<td><a href="https://afreecatv.com">https://afreecatv.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ArtStation</strong></td>
<td><a href="https://artstation.com">https://artstation.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>AsianSister</strong></td>
<td><a href="https://asiansister.com">https://asiansister.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>AsmHentai</strong></td>
<td><a href="https://asmhentai.com">https://asmhentai.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Avgle</strong></td>
<td><a href="https://avgle.com">https://avgle.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>baraag.net</strong></td>
<td><a href="https://baraag.net">https://baraag.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>半次元</strong></td>
<td><a href="https://bcy.net">https://bcy.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>BDSMlr</strong></td>
<td><a href="https://bdsmlr.com">https://bdsmlr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>bilibili</strong></td>
<td><a href="https://bilibili.com">https://bilibili.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ComicWalker</strong></td>
<td><a href="https://comic-walker.com">https://comic-walker.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Coub</strong></td>
<td><a href="https://coub.com">https://coub.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Danbooru</strong></td>
<td><a href="https://danbooru.donmai.us">https://danbooru.donmai.us</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Kakao Webtoon</strong></td>
<td><a href="http://webtoon.kakao.com">http://webtoon.kakao.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>DeviantArt</strong></td>
<td><a href="https://deviantart.com">https://deviantart.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>E(x)Hentai Galleries</strong></td>
<td><a href="https://e-hentai.org">https://e-hentai.org</a><br><a href="https://exhentai.org">https://exhentai.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Facebook</strong></td>
<td><a href="https://facebook.com">https://facebook.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>FC2 Video</strong></td>
<td><a href="https://video.fc2.com">https://video.fc2.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Flickr</strong></td>
<td><a href="https://flickr.com">https://flickr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Gelbooru</strong></td>
<td><a href="https://gelbooru.com">https://gelbooru.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hameln</strong></td>
<td><a href="https://syosetu.org">https://syosetu.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>hanime.tv</strong></td>
<td><a href="https://hanime.tv">https://hanime.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hentai Foundry</strong></td>
<td><a href="https://hentai-foundry.com">https://hentai-foundry.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hitomi.la</strong></td>
<td><a href="https://hitomi.la">https://hitomi.la</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Hiyobi.me</strong></td>
<td><a href="https://hiyobi.me">https://hiyobi.me</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Imgur</strong></td>
<td><a href="https://imgur.com">https://imgur.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Instagram</strong></td>
<td><a href="https://instagram.com">https://instagram.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Iwara</strong></td>
<td><a href="https://iwara.tv">https://iwara.tv</a><br><a href="https://ecchi.iwara.tv">https://ecchi.iwara.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Jmana</strong></td>
<td><a href="https://jmana.net">https://jmana.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>カクヨム</strong></td>
<td><a href="https://kakuyomu.jp">https://kakuyomu.jp</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>LHScan</strong></td>
<td><a href="https://loveheaven.net">https://loveheaven.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Likee</strong></td>
<td><a href="https://likee.video">https://likee.video</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Luscious</strong></td>
<td><a href="https://luscious.net">https://luscious.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>MyReadingManga</strong></td>
<td><a href="https://myreadingmanga.info">https://myreadingmanga.info</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Blog</strong></td>
<td><a href="https://blog.naver.com">https://blog.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Post</strong></td>
<td><a href="https://post.naver.com">https://post.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver Webtoon</strong></td>
<td><a href="https://comic.naver.com">https://comic.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Naver TV</strong></td>
<td><a href="https://tv.naver.com">https://tv.naver.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>nhentai</strong></td>
<td><a href="https://nhentai.net">https://nhentai.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>nhentai.com</strong></td>
<td><a href="https://nhentai.com">https://nhentai.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Niconico</strong></td>
<td><a href="http://nicovideo.jp">http://nicovideo.jp</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>ニジエ</strong></td>
<td><a href="https://nijie.info">https://nijie.info</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pawoo</strong></td>
<td><a href="https://pawoo.net">https://pawoo.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pinterest</strong></td>
<td><a href="https://pinterest.com">https://pinterest.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pixiv</strong></td>
<td><a href="https://pixiv.net">https://pixiv.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>pixivコミック</strong></td>
<td><a href="https://comic.pixiv.net">https://comic.pixiv.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Pornhub</strong></td>
<td><a href="https://pornhub.com">https://pornhub.com</a><br><a href="https://pornhubpremium.com">https://pornhubpremium.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Rule34.xxx</strong></td>
<td><a href="https://rule34.xxx">https://rule34.xxx</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Sankaku Complex</strong></td>
<td><a href="https://www.sankakucomplex.com">https://www.sankakucomplex.com</a><br><a href="https://chan.sankakucomplex.com">https://chan.sankakucomplex.com</a><br><a href="https://idol.sankakucomplex.com">https://idol.sankakucomplex.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Soundcloud</strong></td>
<td><a href="https://soundcloud.com">https://soundcloud.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>小説家になろう</strong></td>
<td><a href="https://syosetu.com">https://syosetu.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>TOKYO Motion</strong></td>
<td><a href="https://tokyomotion.net">https://tokyomotion.net</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Tumblr</strong></td>
<td><a href="https://tumblr.com">https://tumblr.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Twitch</strong></td>
<td><a href="https://twitch.tv">https://twitch.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Twitter</strong></td>
<td><a href="https://twitter.com">https://twitter.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Vimeo</strong></td>
<td><a href="https://vimeo.com">https://vimeo.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>V LIVE</strong></td>
<td><a href="https://vlive.tv">https://vlive.tv</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Weibo</strong></td>
<td><a href="https://weibo.com">https://weibo.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>WikiArt</strong></td>
<td><a href="https://www.wikiart.org">https://www.wikiart.org</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>xHamster</strong></td>
<td><a href="https://xhamster.com">https://xhamster.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>XNXX</strong></td>
<td><a href="https://xnxx.com">https://xnxx.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>XVideos</strong></td>
<td><a href="https://xvideos.com">https://xvideos.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Yande.re</strong></td>
<td><a href="https://yande.re">https://yande.re</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>Youku</strong></td>
<td><a href="https://youku.com">https://youku.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>YouTube</strong></td>
<td><a href="https://youtube.com">https://youtube.com</a></td>
</tr>
<tr>
<td style="text-align:center"><strong>and more&hellip;</strong></td>
<td>[Supported sites by youtube-dl](<a href="https://ytdl-org.github.io/youtube-dl/supportedsites.html">https://ytdl-org.github.io/youtube-dl/supportedsites.html</a></td>
</tr>
</tbody>
</table>
<br>
<h2 id="数据挖掘课">数据挖掘课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>pychorus | 3行代码提取音乐高潮部分</title>
      <link>https://textdata.cn/blog/pychorus/</link>
      <pubDate>Thu, 13 Jan 2022 13:50:10 +0600</pubDate>
      
      <guid>/blog/pychorus/</guid>
      <description>提取音乐高潮部分</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/irYCS5gQVNu9vidqMy-WJA">https://mp.weixin.qq.com/s/irYCS5gQVNu9vidqMy-WJA</a></p>
</blockquote>
<p>有些时候，为了设定手机铃声或者发抖音视频，我们会耗费大量时间在剪辑音乐高潮部分上。那么这个音乐高潮的提取能不能自动化呢？当然可以。</p>
<p>先来听听效果，孤芳自赏提取高潮后的部分：</p>
<p>怎么样，是不是迫不及待想往下读了？不要急，让我们从原理开始慢慢讲起。</p>
<br>
<h2 id="原理简介">原理简介</h2>
<p>不知道大家有没有这样的体会，大部分时候，歌曲的高潮部分通常是重复次数最多的部分。因此我们可以根据这一个特征，提出我们的算法：</p>
<ol>
<li>遍历整首歌曲。</li>
<li>将选定长度的部分与其他部分比较并计算相似度，以查看是否重复。</li>
<li>寻找重复次数较大、且间隔长的片段。</li>
</ol>
<br>
<h2 id="代码编写">代码编写</h2>
<p>为了避免造轮子，我们找到了别人已经做过的类似的项目：https://github.com/vivjay30/pychorus</p>
<p>我们只需要分析这个源代码中最核心的部分，即求相似区段的源代码，就能知道它是不是符合我们的项目需求了：</p>
<p><img loading="lazy" src="img/pychorus.png" alt=""  />
</p>
<p>可以看到，这部分代码就是做了我们算法的第二步，进行了片段与片段之间的相似度计算。检测时用到的相似函数是这样的：</p>
<p><img loading="lazy" src="img/formula.png" alt=""  />
</p>
<p>这主要是因为歌曲由12个基本音符的帧的集合而组成，v1和v2是任意两段音乐的音符矢量，如果说两段音乐非常相似，那么右边的式子将接近于0. <strong>如果说 1-右边的式子 得分非常高，则说明两段音乐非常相似</strong>。</p>
<p>下面我们看看怎么使用这个项目求音乐高潮部分，其实非常简单。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install pychorus
</code></pre></div><br>
<h2 id="编写代码">编写代码</h2>
<p>实际上，这个包用起来可是相当简单，如果我们只是想单纯提取歌曲高潮部分：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pychorus</span> <span class="kn">import</span> <span class="n">find_and_output_chorus</span>

<span class="n">chorus_start_sec</span> <span class="o">=</span> <span class="n">find_and_output_chorus</span><span class="p">(</span><span class="s2">&#34;你的音乐文件&#34;</span><span class="p">,</span> <span class="s2">&#34;提取结果的目标路径&#34;</span><span class="p">,</span> <span class="n">要多少秒的高潮部分</span><span class="p">)</span>
</code></pre></div><p>没错，两行代码就解决了。如果你想知道一些详细的细节，比如说输出相似矩阵或者结果可视化，建议阅读github中该项目的操作指令。下面让我们检验一下效果。</p>
<br>
<h2 id="效果检验">效果检验</h2>
<p>以《孤芳自赏》 为例，让我们试试这个提取器的功力。</p>
<p>原曲：</p>
<p>编写代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 提取音乐高潮部分</span>
<span class="kn">from</span> <span class="nn">pychorus</span> <span class="kn">import</span> <span class="n">find_and_output_chorus</span>

<span class="n">input_file</span> <span class="o">=</span> <span class="s2">&#34;孤芳自赏.mp3&#34;</span>
<span class="n">output_file</span> <span class="o">=</span> <span class="s2">&#34;孤芳自赏_high.wav&#34;</span>
<span class="n">clip_length</span><span class="o">=</span><span class="mi">40</span>
<span class="n">chorus_start_sec</span> <span class="o">=</span> <span class="n">find_and_output_chorus</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">,</span> <span class="n">clip_length</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="数据挖掘课">数据挖掘课</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Imageio | 读取和写入图像数据的Python库</title>
      <link>https://textdata.cn/blog/imageio/</link>
      <pubDate>Thu, 13 Jan 2022 12:50:10 +0600</pubDate>
      
      <guid>/blog/imageio/</guid>
      <description>用于读取和写入图像数据的 Python 库</description>
      <content:encoded><![CDATA[<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="90%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<br>
<p>用于读取和写入图像数据的 Python 库；</p>
<p>Imageio 提供了一系列 <a href="https://imageio.readthedocs.io/en/stable/getting_started/standardimages.html">example images</a>，可以通过使用 &lsquo;&lsquo;imageio:chelsea.png&rsquo;&rsquo; 之类的 URI 来使用。 如果您的系统上尚不存在这些图像，则会自动下载这些图像。 因此，下面的大多数示例应该可以正常工作。</p>
<br>
<h2 id="读取图片">读取图片</h2>
<p>最常用的读取图片功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s1">&#39;imageio:chelsea.png&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">im</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div><p>如果图片文件是gif动图(gif是由多个静态图片组成的动图)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="s1">&#39;cat.gif&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">im</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># Each frame is a numpy matrix</span>
</code></pre></div><p>如果gif存储于内存中（二进制数）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="c1">#image_bytes二进制数据</span>
<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="n">image_bytes</span><span class="p">,</span> <span class="s1">&#39;.gif&#39;</span><span class="p">)</span>
</code></pre></div><h2 id="读取网图">读取网图</h2>
<p>Imageio可以从文件名、文件对象、zip压缩文件夹、字节流、图片链接中读取图片</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>
<span class="kn">import</span> <span class="nn">visvis</span> <span class="k">as</span> <span class="nn">vv</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s1">&#39;http://upload.wikimedia.org/wikipedia/commons/d/de/Wikipedia_Logo_1.0.png&#39;</span><span class="p">)</span>
<span class="n">vv</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
</code></pre></div><blockquote>
<p>注意: 有时候代码运行不出结果，可以尝试 <code>imageio.imread(imageio.core.urlopen(url).read(), '.gif')</code>.</p>
</blockquote>
<br>
<h2 id="读取文件夹中的图片">读取文件夹中的图片</h2>
<p>一种常见的情况是您想要读取文件夹中的所有图像，例如 进行科学分析，或者因为这些都是您的训练示例。 假设该文件夹仅包含图像文件，您可以这样读取它</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>
<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="n">images</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;path/to/folder&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">iterdir</span><span class="p">():</span>
    <span class="n">im</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
    <span class="n">images</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">im</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="迭代视频中的图片">迭代视频中的图片</h2>
<p>视频也是由图片组成的，通过每秒钟播放几十帧（视频由很多张图片组成），静态的图展示出视频效果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">imageio</span> <span class="k">as</span> <span class="nn">iio</span>

<span class="n">reader</span> <span class="o">=</span> <span class="n">iio</span><span class="o">.</span><span class="n">get_reader</span><span class="p">(</span><span class="s1">&#39;imageio:cockatoo.mp4&#39;</span><span class="p">)</span>

<span class="c1">#for循环迭代</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">im</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">reader</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Mean of frame </span><span class="si">%i</span><span class="s1"> is </span><span class="si">%1.1f</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">im</span><span class="o">.</span><span class="n">mean</span><span class="p">()))</span>
</code></pre></div><br>
<h2 id="官方文档">官方文档</h2>
<p>更多功能请查看官方文档
<a href="https://github.com/imageio/imageio">https://github.com/imageio/imageio</a></p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>大邓整理的有用Python项目</title>
      <link>https://textdata.cn/blog/python_tools/</link>
      <pubDate>Fri, 07 Jan 2022 12:43:10 +0600</pubDate>
      
      <guid>/blog/python_tools/</guid>
      <description>涵盖网络爬虫、数据库、数据分析、机器学习、可视化、文本分析</description>
      <content:encoded><![CDATA[<h2 id="tool_kits">Tool_Kits</h2>
<p>工具箱大全,主要是Python项目。</p>
<p>涵盖：</p>
<ol>
<li>网络爬虫</li>
<li>数据库</li>
<li>数据分析</li>
<li>机器学习</li>
<li>可视化</li>
<li>文本分析</li>
<li>GUI</li>
<li>自动化办公</li>
<li>其他</li>
</ol>
<br>
<h2 id="网络爬虫">网络爬虫</h2>
<ul>
<li><a href="https://github.com/psf/requests">requests</a>  最好用的网络爬虫访问库</li>
<li><a href="https://github.com/hidadeng/smartscraper">smartscraper</a>  最简单的网络爬虫访问&amp;解析库</li>
<li><a href="https://github.com/hidadeng/weibo_crawler">weibo_crawler</a> 最简单的微博爬虫</li>
<li><a href="https://mp.weixin.qq.com/s/qL1uEk4j_ks3uhjINe-xyA">崔庆才大神发布的测试站点</a></li>
<li><a href="https://github.com/Gerapy/GerapyAutoExtractor">gerapy-auto-extractor</a> 爬虫页面智能解析库</li>
<li><a href="https://github.com/davidteather/TikTok-Api">TikTok-Api</a> 抖音国际站爬虫库</li>
<li><a href="https://github.com/tebelorg/RPA-Python">rpa</a> Python自动化操纵包</li>
<li><a href="https://github.com/celery/celery/">celery</a> 可以用于制作爬虫访问队列</li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a> 最简单的网页解析库</li>
<li><a href="https://github.com/gawel/pyquery">pyquery</a>  最简洁网页解析库</li>
<li><a href="https://github.com/scrapy/scrapy">scrapy</a> 最流行的爬虫框架</li>
<li><a href="https://github.com/binux/pyspider">pyspider</a> 国人开发的爬虫框架</li>
<li><a href="https://github.com/SeleniumHQ/selenium/">selenium</a> 浏览器自动化测试框架，可以用于爬虫反爬</li>
<li><a href="https://github.com/microsoft/playwright">playwright</a> 微软开源的浏览器自动化测试框架</li>
<li><a href="https://github.com/imWildCat/scylla">scylla</a> 智能IP代理池，用于反爬</li>
<li><a href="https://github.com/hidadeng/shreport">shreport</a> 上海证券交易所上市公司定期报告下载</li>
<li><a href="https://github.com/codelucas/newspaper">newspaper</a> 新闻爬虫库，根据提供的url可以抽取出新闻标题、作者、关键词、总结，部分功能支持中文</li>
<li><a href="https://github.com/sml2h3/ddddocr">ddddocr</a>  通用验证码识别OCR pypi版</li>
</ul>
<br>
<h2 id="web">Web</h2>
<ul>
<li><a href="https://github.com/getpelican/pelican">pelican</a> Python静态网站生成库</li>
<li><a href="https://github.com/pallets/flask">flask</a> 可以开发网站、分享rest-api接口;流行度top2的web框架</li>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a>、<a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>对Python小白最友好的的web库</li>
<li><a href="https://github.com/tiangolo/fastapi">fastapi</a>  web框架，高性能，易于学习，快速编写代码；</li>
<li><a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>  不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。</li>
<li><a href="https://github.com/mkdocs/mkdocs">mkdocs</a> 制作文档网站
<br></li>
</ul>
<h2 id="数据库">数据库</h2>
<ul>
<li><a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a></li>
<li><a href="https://docs.python.org/3/library/sqlite3.html">Sqlite3</a>  轻量级sql数据库(python内置库)</li>
<li><a href="https://github.com/mongodb/mongo-python-driver">pymongo</a> 非关系型MongoDB库</li>
<li><a href="https://github.com/redis/redis">redis</a>  Redis数据库</li>
<li><a href="https://github.com/py2neo-org/py2neo">py2neo</a>  对接Neo4J数据库的python库</li>
<li><a href="https://github.com/simonw/datasette">datasette</a> 探索和发布数据的开源多功能工具，主要面向数据记者、博物馆馆长、档案管理员、地方政府、科学家、研究人员以及任何拥有希望与世界分享数据的人。</li>
</ul>
<br>
<h2 id="数据分析">数据分析</h2>
<ul>
<li><a href="https://github.com/pandas-dev/pandas">pandas</a> 必须Python数据分析库，读取文件、预处理数据、分析、存储</li>
<li><a href="https://github.com/garrettj403/SciencePlots">SciencePlots</a>  科学绘图的Python工具包</li>
<li><a href="https://github.com/orchest/orchest">Orchest</a> 创建数据科学工作量的工具。Orchest是一款Web数据科学工具，可在文件系统上运行</li>
<li><a href="https://github.com/statsmodels/statsmodels">statsmodels</a> Python的统计计量统计库</li>
<li><a href="https://github.com/bashtage/linearmodels">linearmodels</a> 添加线性模型，包括statsmodels中缺少的工具变量和面板数据模型。</li>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a> 快速搭建本地数据分析类Web应用</li>
<li><a href="https://github.com/modin-project/modin">modin</a> pandas加速库，接口语法与pandas高度一致</li>
<li><a href="https://github.com/dask/dask">dask</a>  pandas加速库，接口语法与pandas高度一致</li>
<li><a href="https://github.com/has2k1/plydata%5D">plydata</a>  pandas管道语法库</li>
<li><a href="https://github.com/networkx/networkx">networkx</a> 社交网络分析库</li>
</ul>
<br>
<p>​</p>
<h2 id="机器学习">机器学习</h2>
<ul>
<li><a href="https://github.com/VowpalWabbit/vowpal_wabbit">vowpal wabbit</a>  机器学习的前沿库</li>
<li><a href="https://github.com/scikit-learn/scikit-learn">scikit-learn</a> 机器学习必学库，支持有监督、无监督多种算法，含文本分析功能</li>
<li><a href="https://github.com/biolab/orange3">Orange3</a> 点击操作的机器学习分析<strong>软件</strong>， 可文本分析</li>
<li><a href="https://github.com/doccano/doccano">doccano</a> 文本数据标注工具</li>
<li><a href="https://github.com/heartexlabs/label-studio">label-studio</a>  最牛掰的文本数据标注工具</li>
</ul>
<h2 id="可视化">可视化</h2>
<ul>
<li><a href="https://github.com/streamlit/streamlit">streamlit</a> 快速搭建本地数据分析类Web应用</li>
<li><a href="https://github.com/matplotlib/matplotlib">matplotlib</a>  Python中最万能绘图库，很少有ta画不出来的图；但语法较难、静态图</li>
<li><a href="https://github.com/nschloe/matplotx">matplotx</a>  Matplotlib扩展库，可以提供更多样式，简化样式设定</li>
<li><a href="https://github.com/mwaskom/seaborn">seaborn</a> 基于matplotlib开发的简化版可视化库， 一般的图可以用ta绘制； 高度定制仍需要结合matplotlib进行样式定制；静态图</li>
<li><a href="https://github.com/has2k1/plotnine">plotnine</a>  ggplot2语法的Python可视化库， 可与<a href="https://github.com/has2k1/plydata%5D">plydata</a> 库结合使用</li>
<li><a href="https://github.com/pyecharts/pyecharts">pyecharts</a> 国人开发并封装的动态可视化图绘制库; 中文文档</li>
<li><a href="https://github.com/plotly/plotly.py">plotly</a> 动态可视化图绘制库</li>
<li><a href="https://github.com/bokeh/bokeh">bokeh</a> 动态可视化图绘制库</li>
<li><a href="https://github.com/garrettj403/SciencePlots">SciencePlots</a>  科研论文绘图，基于matplotlib</li>
<li><a href="https://github.com/datapane/datapane">datapane</a>  数据分析报告生成</li>
<li><a href="https://github.com/apache/superset">superset</a> 开源商务智能分析可视化库</li>
<li><a href="https://github.com/alfonsosemeraro/pyplutchik">pyplutchik</a> 文本可视化，可将文本情感信息按照plutchik轮样式可视化</li>
</ul>
<br> 
<h2 id="文本分析">文本分析</h2>
<ul>
<li><a href="https://github.com/nltk/nltk">nltk</a> 自然语言分析套件，对中文不友好</li>
<li><a href="https://github.com/shaypal5/skift">skift</a>  使用scikit-learn语法封装了fastText功能的包。</li>
<li><a href="https://github.com/andrewtavis/kwx">kwx</a>  Python 中基于 BERT、LDA 和 TFIDF 的关键字提取</li>
<li><a href="https://github.com/explosion/spaCy">spacy</a> 工业级自然语言模型库，支持中文</li>
<li><a href="https://github.com/fxsjy/jieba">jieba</a>  中文文本分词库</li>
<li><a href="https://github.com/isnowfy/snownlp">snownlp</a> 中文情感分析库</li>
<li><a href="https://github.com/RaRe-Technologies/gensim">gensim</a>  最好用、最全的话题模型</li>
<li><a href="https://github.com/hidadeng/cntext">cntext</a> 中文文本分析库，含词频统计、情感分析、可视化</li>
<li><a href="https://github.com/heartexlabs/label-studio">label-studio</a>  最牛掰的文本数据标注工具</li>
<li><a href="https://github.com/doccano/doccano">doccano</a> 文本数据标注工具</li>
<li><a href="https://github.com/shivam5992/textstat">textstat</a>  文本可读性计算包(算法全，但仅支持英文)</li>
<li><a href="https://github.com/jbesomi/texthero">texthero</a> 文本预处理、展示、可视化库，仅支持英文</li>
<li><a href="https://github.com/textpipe/textpipe">textpipe</a> 文本分析流水线</li>
<li><a href="https://github.com/davidmcclure/textplot">textplot</a> 词语网络图</li>
<li><a href="https://github.com/ryanjgallagher/shifterator">shifterator</a> 通过让您查看单词使用方式的变化，单词移位可以帮助您进行从根本上更可解释的情感，熵和散度分析。量化不同单词对两个文本差异做出的贡献，以及它们如何发挥作用。</li>
<li><a href="https://github.com/vi3k6i5/GuidedLDA">GuidedLDA</a> 半监督LDA主题模型</li>
<li><a href="https://github.com/gregversteeg/corex_topic">corex_topic</a>  层次非监督、半监督话题模型</li>
<li><a href="https://github.com/MaartenGr/BERTopic">BERTopic</a> BERT话题模型</li>
<li><a href="https://github.com/RasaHQ/whatlies">whatlies</a>  词向量可视化</li>
<li><a href="https://github.com/HLasse/TextDescriptives">TextDescriptives</a> 文本描述性统计,不支持中文</li>
<li><a href="https://github.com/hidadeng/pdfdocx">pdfdocx</a> pdf、docx读取库</li>
<li><a href="https://github.com/ocrmypdf/OCRmyPDF">OCRmyPDF</a>    为<strong>扫描的 PDF</strong> 文件添加了 OCR 文本层，允许对其进行搜索</li>
<li><a href="https://github.com/ddangelov/Top2Vec">Top2Vec</a>  主题建模和语义搜索的算法, 自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。 适用于短文本;</li>
<li><a href="https://github.com/jboynyc/textnets">TextNet</a>  textnet将文档集表示为文档和单词的网络,为文本分析与可视化提供了新的可能性。</li>
<li><a href="https://github.com/remram44/taguette">taguette</a> 免费开源的定性研究工具</li>
</ul>
<br>
<h2 id="gui窗体软件开发">GUI窗体软件开发</h2>
<ul>
<li><a href="https://wiki.python.org/moin/TkInter">tkinter</a> Python内置的gui库</li>
<li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a> 最简单的gui开发库</li>
<li><a href="https://doc.qt.io/qt.html#qtforpython">pyqt5、pyside</a> 最牛掰的gui软件开发库</li>
<li><a href="https://github.com/hoffstadt/DearPyGui">DearPyGui</a>  易于使用且功能强大的Python GUI框架，它提供了DearImGui的包装。</li>
<li><a href="https://github.com/pywebio/PyWebIO">PyWebIO</a>  快速构建 Web 应用的 Python 工具</li>
<li><a href="https://github.com/kivy/kivy">kivy</a>  star数高达14k的gui库
<br></li>
</ul>
<h2 id="自动化办公">自动化办公</h2>
<ul>
<li><a href="https://github.com/zhangyunhao116/zmail">zmail</a> 自动化收发邮件管理库</li>
<li><a href="https://github.com/pywinauto/pywinauto">pywinauto</a> Windows电脑自动化Python库</li>
<li><a href="https://github.com/Kozea/WeasyPrint">WeasyPrint</a>  自动化生产pdf报告</li>
<li><a href="https://github.com/jorisschellekens/ptext-release"></a> 对PDF文件读取、更改、添加信息</li>
<li><a href="https://github.com/SeleniumHQ/selenium/">selenium</a> 浏览器自动化框架，可以自动化点击浏览器，完成某些工作</li>
<li><a href="https://github.com/mkdocs/mkdocs/">mkdocx</a></li>
<li><a href="https://github.com/python-openxml/python-docx">python-docx</a>  创建、修改docx文件库</li>
<li><a href="https://github.com/scanny/python-pptx">python-ppt</a>  创建、修改ppt文件库</li>
<li><a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a> xlsx文件库</li>
<li><a href="https://github.com/wang0618/PyWebIO">PyWebIO</a>  不需要编写HTML和JS代码，就可以构建简单的基于浏览器的GUI应用。</li>
</ul>
<br>
<h2 id="其他">其他</h2>
<ul>
<li><a href="https://github.com/hiresearch/hiresearch.github.io">hiresearch</a> 丢弃繁杂收藏夹，定义简洁办公的浏览器首页</li>
<li><a href="https://github.com/hakimel/reveal.js">reveal.js</a> 最流行的幻灯片</li>
<li><a href="https://github.com/slidevjs/slidev">slidev</a> 编程人员使用的幻灯片</li>
<li><a href="https://github.com/mkdocs/mkdocs">mkdocs</a> 制作文档网站</li>
<li><a href="https://github.com/mockoon/cli">mockoon</a>  帮我们快速搭建 API 服务图形化界面工具</li>
<li><a href="https://www.codepng.app/">codepng</a>  把代码转为美观的截图的website</li>
<li><a href="https://github.com/amphibian-dev/toad">toad</a> 金融风险评分卡；覆盖了建模全流程，从 EDA、特征工程、特征筛选 到 模型验证和评分卡转化</li>
<li><a href="https://github.com/salomonelli/best-resume-ever">best-resume-ever</a> Latex项目， 基于 Web 的简历模板，可以生成网页简历，然后用浏览器打印成 PDF 文件。</li>
<li><a href="https://github.com/vivjay30/pychorus">pychorus</a> 将音频文件中的高潮部分剪辑出来的python包</li>
<li><a href="https://github.com/imageio/imageio">imageio</a>  用于读取和写入图像数据的 Python 库；</li>
<li><a href="https://github.com/Textualize/rich">rich</a> 让命令行输出更美观简洁的Python包</li>
<li><a href="https://github.com/Textualize/textual">textual</a> rich作者开发的<strong>文本用户界面</strong>用户</li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>dvt库 |  视觉文化分析的Python工具包</title>
      <link>https://textdata.cn/blog/dvt/</link>
      <pubDate>Mon, 03 Jan 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/dvt/</guid>
      <description>视觉文化分析的Python工具包</description>
      <content:encoded><![CDATA[<h2 id="dvt">dvt</h2>
<p>Distant Viewing Toolkit for the Analysis of Visual Culture</p>
<p><strong>视觉文化分析</strong>的Python工具包</p>
<p><a href="https://github.com/distant-viewing/dvt">https://github.com/distant-viewing/dvt</a></p>
<p>远程电视工具包由几个 Python 包组成，旨在促进<strong>视觉文化</strong>的计算分析。 开始使用该工具包的最简单方法是在 <strong>Google 的协作 (Colab) 环境</strong>中运行该工具包。 这是一项免费使用的服务，允许您以最少的设置在远程服务器上运行 Python 代码。 只需选择以下链接之一即可开始：</p>
<ul>
<li>COLAB 笔记本演 <a href="https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing">https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing</a></li>
</ul>
<p>有关在您自己的机器上设置工具包的更多信息，请参阅 INSTALL.md。 以下页面提供了有关工具包和项目的更多信息：</p>
<ul>
<li>搜索和发现界面示例：DVT 视频可视化</li>
<li>使用聚合元数据的示例分析：“两个网络时代情景喜剧的视觉风格”</li>
<li>项目理论：“远距离观察：分析大型视觉语料库”。</li>
<li>软件白皮书：用于分析视觉文化的 Python 包</li>
</ul>
<br>
<h2 id="示例">示例</h2>
<p>开发者提供的colab代码，我跑通了图片标注(例如识别不同身体部位)、视频转场(不同素材拼凑)</p>

<figure >
    
        <img src="img/pic1.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/pic2.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/video.png" width="800" />
    
    
</figure>

<br>
<h2 id="提示">提示</h2>
<p>本地配置难度极大，建议按照开发者提示，使用google colab环境。可能需要先配置好科学上网，才能使用</p>
<ul>
<li>COLAB 笔记本演 <a href="https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing">https://colab.research.google.com/drive/1KxYziaozONxMZH8uUaf4PxbW6DyNiZ0k?usp=sharing</a></li>
</ul>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Stargazer库 |  创建漂亮可发表的多元回归表</title>
      <link>https://textdata.cn/blog/stargazer/</link>
      <pubDate>Sun, 02 Jan 2022 20:43:10 +0600</pubDate>
      
      <guid>/blog/stargazer/</guid>
      <description>可用于创建漂亮的、可发表的多元回归表</description>
      <content:encoded><![CDATA[<h2 id="代码下载stargazer_examplesipynb"><a href="Stargazer_examples.ipynb">代码下载</a></h2>
<br>
<h2 id="stargazer库介绍">Stargazer库介绍</h2>
<p>R语言有一个stargazer包，可用于创建漂亮的、可发表的多元回归表。如今有Python化的stargazer库也可做类似的事。</p>
<p>下图是使用stargazer生成的没有任何样式的原始示例的示例：</p>

<figure >
    
        <img src="img/latex_example.png" width="800" />
    
    
</figure>

<br>
<h2 id="什么时候会用到这些">什么时候会用到这些？</h2>
<p>人们倾向于使用R版本的stargazer的主要情况是在学术论文中报告回归结果。 它允许您轻松地比较多个回归结果，这有助于比较具有实验影响的模型与没有影响的模型之间的结果。 这允许用户轻松查看系数的差异、统计显着性以及实验引入的新变量的影响。</p>
<p>它目前支持 LaTeX 和 HTML 输出，stargazer开发者最终最表是也支持 Markdown 和 ASCII 文本。</p>
<br>
<h2 id="项目地址">项目地址</h2>
<p><a href="https://github.com/mwburke/stargazer">https://github.com/mwburke/stargazer</a></p>
<br>
该库实现了原始包中的许多自定义功能。大多数示例可以在示例 jupyter notebook 中找到，功能函数完整列表如下：
<h2 id="stargazer库的函数">Stargazer库的函数</h2>
<ul>
<li>show_header：显示或隐藏模型头数据</li>
<li>show_model_numbers：显示或隐藏型号</li>
<li>custom_columns：自定义模型名称和模型分组</li>
<li>significance_levels：更改统计显着性阈值</li>
<li>significant_digits：更改有效数字的数量</li>
<li>show_confidence_intervals：显示置信区间，而不是方差</li>
<li>dependent_variable_name：重命名因变量</li>
<li>rename_covariates: 重命名协变量</li>
<li>covariate_order：重新排序协变量</li>
<li>reset_covariate_order：将协变量顺序重置为原始顺序</li>
<li>show_degrees_of_freedom：显示或隐藏自由度</li>
<li>custom_note_label：表格底部的标签注释部分</li>
<li>add_custom_notes：将自定义注释添加到表格底部的部分</li>
<li>add_line：向表格中添加自定义行</li>
<li>append_notes：显示或隐藏统计显着性阈值</li>
</ul>
<p>这些功能与渲染类型无关，无论用户以 HTML、LaTeX 等格式输出都将应用</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">stargazer</span>
</code></pre></div><br>
<h2 id="ols回归">OLS回归</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">datasets</span>
<span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="k">as</span> <span class="nn">sm</span>
<span class="kn">from</span> <span class="nn">stargazer.stargazer</span> <span class="kn">import</span> <span class="n">Stargazer</span>

<span class="n">diabetes</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">load_diabetes</span><span class="p">()</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">diabetes</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Age&#39;</span><span class="p">,</span> <span class="s1">&#39;Sex&#39;</span><span class="p">,</span> <span class="s1">&#39;BMI&#39;</span><span class="p">,</span> <span class="s1">&#39;ABP&#39;</span><span class="p">,</span> <span class="s1">&#39;S1&#39;</span><span class="p">,</span> <span class="s1">&#39;S2&#39;</span><span class="p">,</span> <span class="s1">&#39;S3&#39;</span><span class="p">,</span> <span class="s1">&#39;S4&#39;</span><span class="p">,</span> <span class="s1">&#39;S5&#39;</span><span class="p">,</span> <span class="s1">&#39;S6&#39;</span><span class="p">]</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">diabetes</span><span class="o">.</span><span class="n">target</span>

<span class="n">est</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">OLS</span><span class="p">(</span><span class="n">endog</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">],</span> <span class="n">exog</span><span class="o">=</span><span class="n">sm</span><span class="o">.</span><span class="n">add_constant</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">]]))</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>
<span class="n">est2</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">OLS</span><span class="p">(</span><span class="n">endog</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">],</span> <span class="n">exog</span><span class="o">=</span><span class="n">sm</span><span class="o">.</span><span class="n">add_constant</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">6</span><span class="p">]]))</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>

<span class="n">stargazer</span> <span class="o">=</span> <span class="n">Stargazer</span><span class="p">([</span><span class="n">est</span><span class="p">,</span> <span class="n">est2</span><span class="p">])</span>
</code></pre></div><pre><code>/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only
  x = pd.concat(x[::order], 1)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#分析结果渲染成html</span>
<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">display</span><span class="p">,</span> <span class="n">HTML</span>
<span class="n">raw_str</span> <span class="o">=</span> <span class="n">stargazer</span><span class="o">.</span><span class="n">render_html</span><span class="p">()</span>
<span class="n">html</span> <span class="o">=</span> <span class="n">HTML</span><span class="p">(</span><span class="n">raw_str</span><span class="p">)</span>
<span class="n">display</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/html_example.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#分析结果渲染成latex</span>
<span class="n">stargazer</span><span class="o">.</span><span class="n">render_latex</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/latex_example.png" width="800" />
    
    
</figure>

<p><br><br></p>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>神经网络textgenrnn库生成文本</title>
      <link>https://textdata.cn/blog/textgenrnn/</link>
      <pubDate>Tue, 28 Dec 2021 06:43:10 +0600</pubDate>
      
      <guid>/blog/textgenrnn/</guid>
      <description> 只需几行代码，即可在任何文本数据集上轻松训练您自己的任意大小和复杂性的文本生成神经网络。 </description>
      <content:encoded><![CDATA[<p>textgenrnn是在Keras/Tensorflow基础上搭建的Python包，特性:</p>
<ul>
<li>有现代的神经网络架构，使用注意力权重和嵌入Embedding来加速训练和提升模型质量</li>
<li>支持字符级别和单词级别的训练</li>
<li>可设置RNN尺寸、RNN层数、是否使用双向RNN</li>
<li>可支持对任意输入文本的训练，包括大文件</li>
<li>可以使用GPU训练，使用CPU生成文本</li>
<li>提供基于GPU的cuDNN，以加速模型训练</li>
<li>使用情景标签训练模型，更快的学习，产出更好的效果。</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">textgenrnn</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">textgenrnn</span> <span class="kn">import</span> <span class="n">textgenrnn</span>

<span class="n">textgen</span> <span class="o">=</span> <span class="n">textgenrnn</span><span class="p">()</span>
<span class="n">textgen</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[Spoiler] Anyone else find this post and their person that was a little more than I really like the Star Wars in the fire or health and posting a personal house of the 2016 Letter for the game in a report of my backyard.
</code></pre></div><br>
<p>使用新文本训练新模型也很简单</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">textgen</span><span class="o">.</span><span class="n">train_from_file</span><span class="p">(</span><span class="s1">&#39;hacker_news_2000.txt&#39;</span><span class="p">,</span> <span class="n">num_epochs</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">textgen</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Project State Project Firefox
</code></pre></div><br>
<p>生成3个论文标题按照疯狂程度的增加顺序（temperature越高，生成算法偏离学习概率分布的程度越大)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">textgen.generate(3, temperature=1.0)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Why we got money “regular alter”

Urburg to Firefox acquires Nelf Multi Shamn

Kubernetes by Google’s Bern
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>共词矩阵 | cntext更新至1.1</title>
      <link>https://textdata.cn/blog/cntext_upgrade/</link>
      <pubDate>Wed, 22 Dec 2021 13:43:10 +0600</pubDate>
      
      <guid>/blog/cntext_upgrade/</guid>
      <description>共现矩阵 </description>
      <content:encoded><![CDATA[<h2 id="cntext更新至11-版本">cntext更新至1.1 版本</h2>
<p>本次更新了共现矩阵的计算函数。</p>
<p>更新方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext --upgrade
</code></pre></div><p>或指定版本安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install cntext==1.1
</code></pre></div><br>
<h2 id="co_occurrence_matrix">co_occurrence_matrix</h2>
<p>词共现矩阵</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">co_occurrence_matrix</span>

<span class="n">documents</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;I go to school every day by bus .&#34;</span><span class="p">,</span>
         <span class="s2">&#34;i go to theatre every night by bus&#34;</span><span class="p">]</span>

<span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/co_occurrence1.png" width="100%" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">documents2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;编程很好玩&#34;</span><span class="p">,</span>
             <span class="s2">&#34;Python是最好学的编程&#34;</span><span class="p">]</span>

<span class="n">co_occurrence_matrix</span><span class="p">(</span><span class="n">documents2</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;chinese&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/co_occurrence2.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Phonemizer音素化 Python文本语音表征包</title>
      <link>https://textdata.cn/blog/phonemizer/</link>
      <pubDate>Mon, 20 Dec 2021 23:43:10 +0600</pubDate>
      
      <guid>/blog/phonemizer/</guid>
      <description> 音素是构成语音的基本声音，音节和单词建立在音节上。在与语音和语言处理相关的各种应用（例如文本到语音系统）中，将文本从其拼写形式转录为语音字母表是一项重要要求。 </description>
      <content:encoded><![CDATA[<h2 id="音素">音素</h2>
<p><strong>音素</strong>是构成语音的基本声音，音节和单词建立在音节上。在与<strong>语音</strong>和<strong>语言</strong>处理相关的各种应用（例如<strong>文本到语音系统</strong>）中，将文本从其拼写形式转录为语音字母表是一项重要要求。</p>
<p>Phonemizer 是一个精确寻址的 Python 包, 它将文本从其拼写表示转录为语音表示。 该包设计用户友好的，并公开了一个高级音素化函数， 支持大约100种不同的语言。phonemizer 使用的默认后端是 eSpeak
（Dunn &amp; Vitolins，2019 年），一种基于语言专业知识和手写转录规则的文本转语音软件。它将文本转录成国际音标，并支持一百多种语言。使用 MBROLA 声音（Tits &amp; Vitolins，2019），eSpeak 后端可用于大约 35 种语言，以 SAMPA 计算机可读语音字母表转录文本。</p>
<br>
<h2 id="安装">安装</h2>
<p>安装phonemizer前需要配置espeak-ng，</p>
<ul>
<li>win <a href="https://github.com/espeak-ng/espeak-ng/releases">https://github.com/espeak-ng/espeak-ng/releases</a>下载对应的msi文件点击安装</li>
<li>mac 首先配置好homebrew，之后命令行brew install espeak</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install phonemizer
</code></pre></div><h2 id="音素化phonemize">音素化phonemize</h2>
<p>from phonemizer import phonemize</p>
<p>phonemize(text, language=&lsquo;en-us&rsquo;, prepend_text=False, preserve_punctuation=False, with_stress=False, njobs=1)</p>
<ul>
<li>text 文本列表</li>
<li>language 语言。&ldquo;en-us&quot;美国英语， &ldquo;zh&quot;中文</li>
<li>prepend_text 输出结果保留输入的文本，默认False</li>
<li>preserve_punctuation 输出结果保留标点符号，默认False</li>
<li>with_stress 标记重读，默认False</li>
<li>njobs 并行运算核数，默认使用cpu的1个核。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer</span> <span class="kn">import</span> <span class="n">phonemize</span>

<span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hello, my name is david&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;nice to meet you!&#39;</span><span class="p">]</span>

<span class="c1"># Do this:</span>
<span class="n">phonemized</span> <span class="o">=</span>  <span class="n">phonemize</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">language</span><span class="o">=</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>
<span class="n">phonemized</span>
</code></pre></div><p>Run</p>
<pre><code>['həloʊ maɪ neɪm ɪz deɪvɪd ', 'naɪs tə miːt juː ']
</code></pre>
<br>
<p>但上面的用法速度较慢， 更高效的写法应该为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="n">language</span><span class="o">=</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>

<span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hello, my name is david&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;nice to meet you!&#39;</span><span class="p">]</span>

<span class="n">phonemized</span> <span class="o">=</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">(</span><span class="n">texts</span><span class="p">)</span> 
<span class="n">phonemized</span>
</code></pre></div><p>Run</p>
<pre><code>142 µs ± 851 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<p>给每个单词构造音素，输出结果为字典样式</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="kn">from</span> <span class="nn">phonemizer.punctuation</span> <span class="kn">import</span> <span class="n">Punctuation</span>
<span class="kn">from</span> <span class="nn">phonemizer.separator</span> <span class="kn">import</span> <span class="n">Separator</span>
<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;It amused him to think that they were probably talking about him at that very moment&#39;</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)]</span>

<span class="c1"># 忽略词语边界，音素之间用空格间隔</span>
<span class="n">separator</span> <span class="o">=</span> <span class="n">Separator</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>

<span class="n">lexicon</span> <span class="o">=</span> <span class="p">{</span><span class="n">word</span><span class="p">:</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">([</span><span class="n">word</span><span class="p">],</span> <span class="n">separator</span><span class="o">=</span><span class="n">separator</span><span class="p">,</span> <span class="n">strip</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
           <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">}</span>

<span class="n">lexicon</span>
</code></pre></div><p>Run</p>
<pre><code>{'it': 'ɪ t',
 'amused': 'ɐ m j uː s d',
 'him': 'h ɪ m',
 'to': 't uː',
 'think': 'θ ɪ ŋ k',
 'that': 'ð æ t',
 'they': 'ð eɪ',
 'were': 'w ɜː',
 'probably': 'p ɹ ɑː b ə b l i',
 'talking': 't ɔː k ɪ ŋ',
 'about': 'ɐ b aʊ t',
 'at': 'æ t',
 'very': 'v ɛ ɹ i',
 'moment': 'm oʊ m ə n t'}
</code></pre>
<br>
<h2 id="中文的音素化">中文的音素化</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text_zhs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;你好我的名字是大卫&#39;</span><span class="p">,</span> 
            <span class="s1">&#39;很高兴认识你&#39;</span><span class="p">]</span>

<span class="n">phonemized_zhs</span> <span class="o">=</span> <span class="n">phonemize</span><span class="p">(</span><span class="n">text_zhs</span><span class="p">,</span> <span class="n">language</span><span class="o">=</span><span class="s1">&#39;zh&#39;</span><span class="p">)</span>
<span class="n">phonemized_zhs</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;ni2 xɑu2 wo2 tə1 miɜŋ tsi̪5 s.i.5 tɑ5 wei5 &#39;,
 &#39;xə2n kɑu5 ɕi5ŋ ʐə5n s.i.1 ni2 &#39;]
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">phonemizer.backend</span> <span class="kn">import</span> <span class="n">EspeakBackend</span>
<span class="kn">from</span> <span class="nn">phonemizer.punctuation</span> <span class="kn">import</span> <span class="n">Punctuation</span>
<span class="kn">from</span> <span class="nn">phonemizer.separator</span> <span class="kn">import</span> <span class="n">Separator</span>
<span class="kn">import</span> <span class="nn">re</span>


<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;想到他们可能在那个时候谈论他，他觉得好笑&#39;</span>
<span class="n">words</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;[</span><span class="se">\u4e00</span><span class="s1">-</span><span class="se">\u9fa5</span><span class="s1">]&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>


<span class="n">backend</span> <span class="o">=</span> <span class="n">EspeakBackend</span><span class="p">(</span><span class="s1">&#39;zh&#39;</span><span class="p">)</span>

<span class="n">separator</span> <span class="o">=</span> <span class="n">Separator</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>

<span class="c1"># 构建每个汉字一个对应的音素表达，输出结果为字典样式</span>
<span class="n">lexicon</span> <span class="o">=</span> <span class="p">{</span><span class="n">word</span><span class="p">:</span> <span class="n">backend</span><span class="o">.</span><span class="n">phonemize</span><span class="p">([</span><span class="n">word</span><span class="p">],</span> <span class="n">separator</span><span class="o">=</span><span class="n">separator</span><span class="p">,</span> <span class="n">strip</span><span class="o">=</span><span class="kc">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
           <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">}</span>

<span class="n">lexicon</span>
</code></pre></div><p>Run</p>
<pre><code>{'想': 'ɕ iɑ2 ŋ ',
 '到': 't ɑu5 ',
 '他': 'th ɑ5 ',
 '们': 'm ə1 n ',
 '可': 'kh o2 ',
 '能': 'n əɜ ŋ ',
 '在': 'ts ai5 ',
 '那': 'n ɑ5 ',
 '个': 'k o1 ',
 '时': 's. i.ɜ ',
 '候': 'x ou5 ',
 '谈': 'th aɜ n ',
 '论': 'l uə5 n ',
 '觉': 'tɕ yɛɜ ',
 '得': 't ə1 ',
 '好': 'x ɑu2 ',
 '笑': 'ɕ j ɑu5 '}
</code></pre>
<br>
<h2 id="心理学相关概念">心理学相关概念</h2>
<p>这个包用起来比较简单，但是想到一个场景，说不定可以多个角度去分析文本。</p>
<p>经常看文本的时候，脑海里不自觉的读出声音，这种现象今天查了下叫做“听觉表象”，听觉表象产生于语言的视觉区和语言的运动区——角回和布洛卡区。通过听觉，听出相应的字的声音，我们就可以领会到这句话的意思。从常人的生长发育的过程，我们都是先牙牙学语，通过声音理解内容的含义，而后经过十数教育学会语言书面文字，掌握文字系统，此时我们的神经回路是“视觉(听觉)~记忆~理解”</p>
<p>对一个东西的“知觉”在心理学上叫做这个东西的“知觉表征”，相当于是把这个东西转码为了一个，用于后续在心理上对这个东西进行加工。这个心理符号的编码与这个东西本身的特征以及最初的感觉通道有关——一个真正的苹果常会被以视觉的方式编码，成为一个视觉知觉表征，可以简单理解成这个苹果的图像；一个词“苹果”常会被以听觉的方式编码，成为一个AVL单元，可以简单地理解成把“苹果”这两个字和“ping’guo”这个读音打包在一起的一个文件。</p>
<p>感觉代码被经过某些处理后储存在记忆当中，当有一天需要用的时候再被从记忆里提取出来。这个时候的提取，本身是一种建构，也就是与将感觉处理后存储起来的一个相反的过程——所以心理学上把我们所提取（建构）的这个代码就称为表象。表象和知觉是机能等价的（Neisser，1972），可以简单理解为表象就是是一种基于过去经验的知觉。这也解释了我们默读词汇的时候，这个AVL单元里“语音”的部分是哪里来的了——这是我们基于对自己声音的了解而建构的一种听觉表象。简单来说这个语音就是根据我们对自己声音的认识，来“想象”的读出来的声音。</p>
<blockquote>
<p>知乎回答-心理学哈士奇</p>
<p>Conrad R (1963). Acoustic confusions and memory span for words. Nature, 197: 1029-1030.</p>
<p>Neisser U (1972). Changing conception of imagery. In P W Sheehan (ED), The Function and Nature of Imagery. London: Achademic Press.
知乎回答-心理学哈士奇</p>
</blockquote>
<br>
<h2 id="引用格式">引用格式</h2>
<p>Bernard, M. and Titeux, H. (2021). Phonemizer: Text to phones transcription for multiple languages in python. Journal of Open Source Software, 6(68):3958.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-tex" data-lang="tex">@article<span class="nb">{</span>Bernard2021,
  doi = <span class="nb">{</span>10.21105/joss.03958<span class="nb">}</span>,
  url = <span class="nb">{</span>https://doi.org/10.21105/joss.03958<span class="nb">}</span>,
  year = <span class="nb">{</span>2021<span class="nb">}</span>,
  publisher = <span class="nb">{</span>The Open Journal<span class="nb">}</span>,
  volume = <span class="nb">{</span>6<span class="nb">}</span>,
  number = <span class="nb">{</span>68<span class="nb">}</span>,
  pages = <span class="nb">{</span>3958<span class="nb">}</span>,
  author = <span class="nb">{</span>Mathieu Bernard and Hadrien Titeux<span class="nb">}</span>,
  title = <span class="nb">{</span>Phonemizer: Text to Phones Transcription for Multiple Languages in Python<span class="nb">}</span>,
  journal = <span class="nb">{</span>Journal of Open Source Software<span class="nb">}</span>
<span class="nb">}</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>OMNIZART: 音乐转录变得容易</title>
      <link>https://textdata.cn/blog/omnizart/</link>
      <pubDate>Mon, 20 Dec 2021 22:43:10 +0600</pubDate>
      
      <guid>/blog/omnizart/</guid>
      <description> Omnizart 是一个 Python 库，是自动音乐转录的简化解决方案</description>
      <content:encoded><![CDATA[
<figure >
    
        <img src="img/OMNIZART.png" width="100%" />
    
    
</figure>

<p>Omnizart 是一个 Python 库，是自动音乐转录的简化解决方案。该库收集了<strong>音乐与文化技术实验室</strong>(<a href="https://sites.google.com/view/mctl/home">https://sites.google.com/view/mctl/home</a>)的研究成果，分析和弦音乐并转录<strong>乐器的音符 、和弦 、drum events、帧级人声旋律、音符级人声旋律</strong>。</p>
<p>Omnizart 提供构建基于深度学习的音乐转录生命周期的主要功能，涵盖从<em>数据集下载</em>、<em>特征预处理</em>、<em>模型训练</em>、<em>转录</em>和<em>声音化</em>。还提供了预先训练的检查点，以便立即使用转录。该论文可以从 <a href="https://doi.org/10.21105/joss.03391">Journal of Open Source Software (JOSS)</a> 中找到。</p>
<br>
<h2 id="演示">演示</h2>
<h3 id="colab">Colab</h3>
<p>使用 <strong>Colab notebook</strong> <a href="https://bit.ly/OmnizartColab">https://bit.ly/OmnizartColab</a>几乎可以立即转录您最喜欢的歌曲！</p>
<br>
<h2 id="声音样本">声音样本</h2>
<p>原声</p>
<p><video id="video" controls="" preload="none" type="video/mp4"> <source id="mp4" src="img/Highway_No_9.mp4" type="video/mp4"> </video></p>
<p>和弦转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_chord_synth.mp3">
</audio>
<p>鼓点转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_drum_synth.mp3">
</audio>
<p>音符级人声转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_vocal_synth.mp3">
</audio>
<p>帧级语音转录</p>
<audio id="audio" controls="" preload="none">
      <source id="mp3" src="img/high_vocal_contour.mp3">
</audio>
<p>Source files can be downloaded <a href="https://drive.google.com/file/d/15VqHearznV9L83cyl61ccACsXXJ4vBHo/view?usp=sharing">here</a>. You can use <em>Audacity</em> to open the files.</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>音频可视化：采样、频率和傅里叶变换</title>
      <link>https://textdata.cn/blog/voice2pic/</link>
      <pubDate>Mon, 20 Dec 2021 10:43:10 +0600</pubDate>
      
      <guid>/blog/voice2pic/</guid>
      <description>主题建模和语义搜索库</description>
      <content:encoded><![CDATA[<blockquote>
<p>author:cj1128</p>
<p>Github: <a href="https://github.com/cj1128">https://github.com/cj1128</a></p>
<p>Blog: <a href="https://cjting.me/">https://cjting.me/</a></p>
<p>src: <a href="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/">https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/</a></p>
</blockquote>
<p>印象中使用的第一个 PC 音乐播放器是「千千静听」，大概是 08 年左右。我还清楚地记得它自带了一首梁静茹的歌「Love is everything」，动听的旋律至今萦绕耳旁。</p>

<figure >
    
        <img src="img/qianqian.jpeg" width="100%" />
    
    
</figure>

<p>千千静听的左上角有一组随着音乐跳动的柱子，我想大家都习以为常了，很多播放器都有这功能。但是其实有没有想过，这是怎么实现的？</p>
<p>要理解这个问题，我们首先要理解声音是什么。</p>
<br>
<h2 id="波">波</h2>
<p>中学物理有介绍过，声音是由物体振动产生的，这个振动经由介质传导到我们的耳朵中引起耳膜振动从而让我们听见声音。</p>
<p>我们可以用波形来描述振动，其中横轴是时间，纵轴是振动的位移，也就是离开原点的距离。</p>
<p>振动的两个关键属性是频率和振幅，频率是指一秒钟振动多少次，对应于音高，频率越高声音越尖锐刺耳。</p>
<p>振幅则表示最大的位移值，对应于音量，振幅越大声音越响。</p>

<figure >
    
        <img src="img/200hz.png" width="100%" />
    
    
</figure>

<p>上图是用 <a href="https://matplotlib.org/">matplotlib</a> 绘制的一个正弦波，可以看出在 0.01s 内振动了 2 次，因此频率是 200，振幅是 1。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="k">def</span> <span class="nf">sin_wave</span><span class="p">(</span><span class="n">hz</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
  <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">hz</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
  <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
  <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s2">&#34;Time&#34;</span><span class="p">)</span>
  <span class="n">plt</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">)</span>
  <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="n">sin_wave</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</code></pre></div><p>这种最简单的波形对应的声音叫做 pure tone，顾名思义，非常的简单而且纯粹。</p>
<p>下面是用 <a href="https://www.scipy.org/">scipy</a> 生成的 200hz 的声音，大家可以听听看。</p>
<audio id="audio" controls="" preload="none">
      <source id="wav" src="img/200hz.wav">
</audio>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">scipy.io.wavfile</span> <span class="k">as</span> <span class="nn">wav</span>

<span class="n">SAMPLE_RATE</span> <span class="o">=</span> <span class="mi">44100</span>
<span class="n">DURATION</span> <span class="o">=</span> <span class="mi">5</span>

<span class="k">def</span> <span class="nf">write_wav</span><span class="p">(</span><span class="n">hz</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">DURATION</span><span class="p">,</span> <span class="n">SAMPLE_RATE</span> <span class="o">*</span> <span class="n">DURATION</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
  <span class="n">tone</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">hz</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
  <span class="n">normalized_tone</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">int16</span><span class="p">((</span><span class="n">tone</span> <span class="o">/</span> <span class="n">tone</span><span class="o">.</span><span class="n">max</span><span class="p">())</span> <span class="o">*</span> <span class="mi">32767</span><span class="p">)</span>
  <span class="n">wav</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">hz</span><span class="si">}</span><span class="s2">hz.wav&#34;</span><span class="p">,</span> <span class="n">SAMPLE_RATE</span><span class="p">,</span> <span class="n">normalized_tone</span><span class="p">)</span>

<span class="n">write_wav</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</code></pre></div><p>这是 800hz 的声音，可以明显感觉到，声音更加尖锐了。</p>
<audio id="audio" controls="" preload="none">
      <source id="wav" src="img/800hz.wav">
</audio>
<p>现实世界中我们听到的声音不会是 pure tone，而是各种 pure tone 叠加的结果。</p>
<p>下图中蓝色是 200hz，黄色是 800hz，而绿色则是它们叠加的结果，已经不再是一个 pure tone 了。</p>

<figure >
    
        <img src="img/200-add-800hz.png" width="100%" />
    
    
</figure>

<p>下面是绿色曲线听起来的效果。</p>
<audio id="audio" controls="" preload="none">
      <source id="wav" src="img/mixed.wav">
</audio>
<p>总结一下：</p>
<ul>
<li>我们可以用一个波形图来表示声音，其中 X 轴是时间，Y 轴是振动的位移</li>
<li>最简单的正弦波对应的声音叫做 pure tone</li>
<li>日常中我们听到的声音都是各种 pure tone 叠加的结果</li>
</ul>
<p>Tip:</p>
<p>如果想了解一点乐理，<a href="https://www.lightnote.co/music-theory/sound-waves">LIGHTNOTE</a> 非常不错。</p>
<p>它的网页做得很棒，通过互动的形式讲述基本的乐理知识，包括音阶、和弦，十二平均律等。</p>
<br>
<h2 id="采样">采样</h2>
<p>因为声音是一个随时间变化的连续函数，任意一段间隔内都有无穷多个值，而无穷多的数据是没办法存储在计算机中的。</p>
<p>想要存储，我们就需要将它离散化变成离散序列，具体的方法就是采样，使用固定的间隔对函数进行求值。</p>
<p>这是原始的声音。</p>

<figure >
    
        <img src="img/origin.png" width="100%" />
    
    
</figure>

<p>这是采样后的结果。</p>

<figure >
    
        <img src="img/sampled.png" width="100%" />
    
    
</figure>

<p>通过采样，我们将一个无尽序列变成了一个有限序列，其中每一个值叫做样本，这样就可以方便地在计算机中存储了。</p>
<p>采样的关键参数有两个，分别是采样频率和采样深度。</p>
<p>采样频率是指每秒钟采样多少次，很明显，采样频率越高，样本越多，数据量越大，同时也更接近原始的声音。</p>
<p>采样深度是指用多少比特去存储采样得到的值，使用的比特越多，还原得到的声音越细腻，和图片的色彩深度是一个道理。</p>
<p>假设我们用 16bit 采样深度和 44100 的采样频率，那么一段一秒钟的声音就变成了一个 44100 大小的 int16 数组。</p>
<p>得到采样值数组以后，接下来如何存储这个数组就是编码的范畴了。我们可以直接存，也可以采用某种算法压缩以后再存。各种各样的办法，对应着各种各样的音频格式，比如 MP3, AAC, WAV 等。</p>
<p>这其中 AAC 和 MP3 格式是有损的，也就是存储以后再读出来，得到的样本和原始的会有一些区别，但这些区别很细微，可以忽略。有损的特点就是在基本不影响最终播放效果的情况下，大幅度减少文件体积。</p>
<p>而 WAV 则是无损的，输入是什么，读出来就是什么，缺点自然是体积要大很多。</p>
<p>我们可以通过 scipy 来读取 WAV 音频。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">scipy.io.wavfile</span> <span class="k">as</span> <span class="nn">wav</span>

<span class="n">rate</span><span class="p">,</span> <span class="n">all_samples</span> <span class="o">=</span> <span class="n">wav</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&#34;xxx.wav&#34;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">rate</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_samples</span><span class="p">),</span> <span class="n">all_samples</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>
<span class="c1"># 44100 10639873 int16</span>
<span class="c1"># 上面分别是：采样率，样本总数，以及样本值的类型</span>
<span class="c1"># int16 说明每一个样本是 16bit 整数</span>

<span class="nb">print</span><span class="p">(</span><span class="n">all_samples</span><span class="p">[:</span><span class="mi">20</span><span class="p">])</span>
<span class="c1"># [-41 -51 -49 -41 -28 -15 -20 -33 -32 -38 -54 -54 -44 -30  -8  10  11   2</span>
<span class="c1"># -14 -36]</span>
<span class="c1"># 可以看到样本就是一组数字</span>
</code></pre></div><p>可以看出，采样频率是 44100，一共有 10639873 个样本，使用 int16 进行存储，计算可知这首歌的时间是 241 秒。</p>
<br>
<h2 id="傅里叶变换">傅里叶变换</h2>
<p>给定一个 200hz 的波形和一个 800hz 的波形，计算它们叠加以后的结果非常简单，没有任何难度。</p>

<figure >
    
        <img src="img/200-add-800hz.png" width="100%" />
    
    
</figure>

<p>但是，如果给到叠加以后的结果呢？</p>

<figure >
    
        <img src="img/mixed2.png" width="100%" />
    
    
</figure>

<p>能看出上面的绿色曲线是 200hz+800hz 叠加得到的吗？完全看不出来，甚至，这样的逆推真的可行吗？还是说和永动机一样在原理上就是不可行的？</p>
<p>答案是可行的，通过傅里叶变换，我们可以将一个复合波形拆解为构成它的简单波形。</p>
<p>想想都觉得不可思议，这是怎么做到的？傅里叶又是怎么想到的？不得不说十八世纪的法国数学家傅里叶是一个天才，让人仰望。</p>
<p>Tip: 3Blue1Brown 有一个视频介绍傅里叶变换的原理，非常棒：<a href="https://www.youtube.com/watch?v=spUNpyF58BY">形象的介绍：什么是傅里叶变换？</a></p>
<p>接下来我们来看看怎样通过傅里叶变换来拆解复合波形。</p>
<p>我们可以认为傅里叶变换是一个函数，它的输入为 N 个实数，代表采样值，输出为 N 个复数，代表不同频率的分量，这里我们忽略复数的实部和虚部，只关心它的模，也就是绝对值。</p>
<p>Tip: 这里关于傅里叶变换的说法并不完整，比如傅里叶变换的输入也可以是复数。但是对我们来说理解到这一层面就够了。如果想要深入研究，可以去学习数字信号处理相关的课程。</p>
<p>我们使用 scipy 来实际进行一下傅里叶变换。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">scipy.fft</span> <span class="kn">import</span> <span class="n">fft</span><span class="p">,</span> <span class="n">fftfreq</span>

<span class="c1"># 这是即将进行变换的采样值: [0, 1, 2, 3, 4, 5, 6, 7]</span>
<span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="c1"># 这是傅里叶变换的结果</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">fft</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">y</span><span class="p">:</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># 变换结果为 8 个复数</span>
<span class="c1"># (28-0j)</span>
<span class="c1"># (-3.9999999999999996+9.65685424949238j)</span>
<span class="c1"># (-4+4j)</span>
<span class="c1"># (-4+1.6568542494923797j)</span>
<span class="c1"># (-4-0j)</span>
<span class="c1"># (-4-1.6568542494923797j)</span>
<span class="c1"># (-4-4j)</span>
<span class="c1"># (-3.9999999999999996-9.65685424949238j)</span>

<span class="c1"># x 是上面每个结果对应的频率</span>
<span class="c1"># 这里 fftfreq 函数的第一个参数为样本数量</span>
<span class="c1"># 第二个参数为 采样率的 倒数，我们假定采样率为 8</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">fftfreq</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">samples</span><span class="p">),</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="c1"># [ 0.  1.  2.  3. -4. -3. -2. -1.]</span>
<span class="c1"># 这里意味着 y[0] 对应的频率是 0，y[1] 对应的频率是 1</span>
<span class="c1"># 负数频率是什么含义？我们可以不管，忽略</span>
</code></pre></div><p>上面的代码我们构造了 8 个数字进行傅里叶变换，并假定这组样本是使用采样率 8 进行采样得到的。</p>
<p>变换的结果是 8 个复数，这 8 个复数对应 8 个频率，我们可以看出，正频率和负频率对应的变换结果是一样的，也就是变换后的结果是对称的。</p>
<p>上面得到的结果意义不大，因为输入没什么意义。现在我们使用傅里叶变换处理一下 200hz+800hz 叠加后的波形，看看是否能还原回 200hz 和 800hz。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">import</span> <span class="n">figure</span>
<span class="kn">from</span> <span class="nn">scipy.fft</span> <span class="kn">import</span> <span class="n">fft</span><span class="p">,</span> <span class="n">fftfreq</span>

<span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>

<span class="n">DURATION</span> <span class="o">=</span> <span class="mf">0.01</span>
<span class="n">SAMPLE_RATE</span> <span class="o">=</span> <span class="mi">44100</span>

<span class="k">def</span> <span class="nf">gen_sine_wave</span><span class="p">(</span><span class="n">freq</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">DURATION</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">DURATION</span> <span class="o">*</span> <span class="n">SAMPLE_RATE</span><span class="p">),</span> <span class="n">endpoint</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
  <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">freq</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">y</span>

<span class="n">hz200</span> <span class="o">=</span> <span class="n">gen_sine_wave</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
<span class="n">hz800</span> <span class="o">=</span> <span class="n">gen_sine_wave</span><span class="p">(</span><span class="mi">800</span><span class="p">)</span>

<span class="c1"># 叠加后的采样数据</span>
<span class="c1"># 这里每个样本不是 int16，而是 float，无关紧要</span>
<span class="n">total</span> <span class="o">=</span> <span class="n">hz200</span> <span class="o">+</span> <span class="n">hz800</span>

<span class="n">y</span> <span class="o">=</span> <span class="n">fft</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">fftfreq</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">total</span><span class="p">),</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">SAMPLE_RATE</span><span class="p">)</span>

<span class="c1"># 此时横轴是频率，纵轴是该频率的分量</span>
<span class="c1"># 使用 np.abs 计算复数的模</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p>图中我们可以看出，首先输出结果是左右对称的，我们忽略掉负频率部分，只关注正频率。</p>
<p>其次，傅里叶变换告诉我们该输入信号由 2 个频率组成，程序运行时鼠标放上去可以看出是 200 和 800。也就是说，通过傅里叶变换，我们将复合波形拆解为了简单波形。</p>
<p>或者说，通过傅里叶变换，我们将一个信号拆解为了一组不同频率的正弦波，将它从时域变换到了频域。信号还是这个信号，只不过换个角度去看它。</p>
<p><img loading="lazy" src="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/transform.png" alt="img"  />
</p>
<p>总结一下：</p>
<ul>
<li>傅里叶变换是一个函数，输入一串数字代表样本值，输出一串复数代表频率分量</li>
<li>每个数字具体代表的频率可以根据样本数量和采样频率计算得知</li>
<li>我们不关心复数的方向，我们只关心复数的模</li>
<li>傅里叶输出的结果是左右对称的，因此只有一半的信息有价值</li>
</ul>
<p>因为输出结果是对称的，只有一半的信息有价值，因此有一个变体叫做 <code>rfft</code>，只返回一半的信息，计算速度可以更快一些。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">scipy.fft</span> <span class="kn">import</span> <span class="n">rfft</span><span class="p">,</span> <span class="n">rfftfreq</span>

<span class="n">SAMPLE_RATE</span> <span class="o">=</span> <span class="mi">8</span>

<span class="n">samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="c1"># 此时 x 和 y 都是 5 个值</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">rfft</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">rfftfreq</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">samples</span><span class="p">),</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">SAMPLE_RATE</span><span class="p">)</span>

<span class="c1"># y[0] 表示频率 0 的分量</span>
<span class="c1"># y[1] 表示频率 1 的分量</span>
<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="c1"># [0. 1. 2. 3. 4.]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">y</span><span class="p">:</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># 和之前 fft/fftfreq 的输出对比，可以发现结果是一样的，只不过去掉了对称的冗余信息</span>
<span class="c1"># (28+0j)</span>
<span class="c1"># (-3.9999999999999996+9.65685424949238j)</span>
<span class="c1"># (-4+4j)</span>
<span class="c1"># (-4+1.6568542494923797j)</span>
<span class="c1"># (-4+0j)</span>
</code></pre></div><br>
<h2 id="音频可视化">音频可视化</h2>
<p>到了这里所有实现音频可视化所需要的知识都备齐了。</p>
<p>首先我们可以猜到，随音乐跳动的每个柱子，对应的是一个频率或一组频率，而柱子的高度则是频率的分量大小，这两个信息傅里叶变换都能给到。</p>
<p>现在剩下的问题则是输入是什么？我们不可能把一首歌曲的所有样本作为输入进行傅里叶变换，如果这样做，我们只能得到一份频率数据。</p>
<p>我们希望得到的频率数据随着音乐在变化，因此这里要选择一个窗口大小（FFT_SIZE），比如 2048。随着音乐的播放，我们每次都从当前播放位置选择 2048 个样本然后进行傅里叶变换。</p>
<p>现在我们的初步音频可视化方案就确定了：</p>
<ul>
<li>解析音频文件得到 allSamples</li>
<li>每次绘图时，从当前 sample 开始选择 FFT_SIZE 个 sample</li>
<li>对这些 sample 进行傅里叶变换</li>
<li>对变换得到的复数求模</li>
<li>把结果变换到 0 ~ 1 然后绘图</li>
</ul>
<p>接下来我们用 Web 来实现一个简单的音频可视化工具。</p>
<p>首先，解析音频文件得到 allSamples 我们可以使用 WebAudio 的 API。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 得到某个音频文件的二进制数据
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">ab</span> <span class="o">=</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;xxx.mp3&#34;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">arrayBuffer</span><span class="p">())</span>

<span class="c1">// 新建 WebAudio context
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">audioCtx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">()</span>

<span class="c1">// 解析 arrayBuffer
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">audioBuffer</span> <span class="o">=</span> <span class="nx">audioCtx</span><span class="p">.</span><span class="nx">decodeAudioData</span><span class="p">(</span><span class="nx">ab</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">audioBuffer</span><span class="p">)</span>
<span class="c1">// AudioBuffer {length: 10639872, duration: 241.2669387755102, sampleRate: 44100, numberOfChannels: 2}
</span><span class="c1">//  duration: 241.2669387755102
</span><span class="c1">//  length: 10639872
</span><span class="c1">//  numberOfChannels: 2
</span><span class="c1">//  sampleRate: 44100
</span><span class="c1">// [[Prototype]]: AudioBuffer
</span><span class="c1"></span>
<span class="c1">// 一般来说音频都有多个声道，用于立体声播放
</span><span class="c1">// 这里我们选第一个声道就可以了
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">allSamples</span> <span class="o">=</span> <span class="nx">audioBuffer</span><span class="p">.</span><span class="nx">getChannelData</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">// allSamples 就是我们要的样本数组，每一个样本值是浮点数
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allSamples</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="c1">// Float32Array(10) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</span></code></pre></div><p>接下来，我们使用 <code>requestAnimationFrame</code> 来进行绘制。</p>
<p>每次绘制的时候，需要先获取当前的播放位置。audioBuffer 中有音频的总时间，通过 <code>audioCtx.currentTime</code> 我们可以得知当前的播放时间，两个相除便是播放位置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 用户点击播放时
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">onPlay</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="c1">// 记录下播放的开始时间
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nx">audioCtx</span><span class="p">.</span><span class="nx">currentTime</span>

  <span class="kr">const</span> <span class="nx">draw</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">draw</span><span class="p">)</span>

    <span class="c1">// 目前播放了多少时间 (seconds)
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">cur</span> <span class="o">=</span> <span class="nx">audioCtx</span><span class="p">.</span><span class="nx">currentTime</span> <span class="o">-</span> <span class="nx">startTime</span>

    <span class="c1">// 播放的进度是多少
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">per</span> <span class="o">=</span> <span class="nx">cur</span> <span class="o">/</span> <span class="nx">audioBuffer</span><span class="p">.</span><span class="nx">duration</span>

    <span class="kr">const</span> <span class="nx">startIndex</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">allSamples</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nx">per</span><span class="p">)</span>

    <span class="c1">// 从 startIndex 开始切割 FFT_SIZE 个 sample 出来
</span><span class="c1"></span>    <span class="c1">// 此时要进行傅里叶变换的 samples 就准备好了
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">samples</span> <span class="o">=</span> <span class="nx">allSamples</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">startIndex</span><span class="p">,</span> <span class="nx">startIndex</span> <span class="o">+</span> <span class="nx">FFT_SIZE</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">draw</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>接下来就是傅里叶变换了，这里我找了一下，JS 相关的库很少，不过验证下来 <a href="https://github.com/indutny/fft.js/">fft.js</a> 是可用的。</p>
<p>Tip: 不得不说科学计算还是 Python 方便，numpy 和 scipy 真的太好用了。</p>
<p>经过 FFT 以后，我们得到了 1025 个复数，对这些复数取模，得到 1025 个实数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">// JS 没有复数，我们自行定义一个
</span><span class="c1"></span><span class="kr">class</span> <span class="nx">Complex</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">real</span><span class="p">,</span> <span class="nx">imag</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">real</span> <span class="o">=</span> <span class="nx">real</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">imag</span> <span class="o">=</span> <span class="nx">imag</span>
  <span class="p">}</span>

  <span class="nx">abs</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">real</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">real</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">imag</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">imag</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">rfft</span> <span class="o">=</span> <span class="p">(</span><span class="nx">samples</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FFTJS</span><span class="p">(</span><span class="nx">samples</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">out</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">createComplexArray</span><span class="p">()</span>

  <span class="kr">const</span> <span class="nx">N</span> <span class="o">=</span> <span class="nx">samples</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>

  <span class="nx">f</span><span class="p">.</span><span class="nx">realTransform</span><span class="p">(</span><span class="nx">out</span><span class="p">,</span> <span class="nx">samples</span><span class="p">)</span>

  <span class="kr">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">value</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Complex</span><span class="p">(</span><span class="nx">out</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">0</span><span class="p">],</span> <span class="nx">out</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">value</span>
<span class="p">}</span>

<span class="c1">// 此时我们得到了一组实数
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">rfft</span><span class="p">(</span><span class="nx">samples</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">c</span> <span class="p">=&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">abs</span><span class="p">())</span>
</code></pre></div><p>Tip:</p>
<p>其实这里还有一个过程，我们不会直接把 samples 进行 FFT 变换，而是会先应用一个 Window Function，这样做的目的如果感兴趣可以自行了解。</p>
<p>对于我们来说，Window Function 就是一个 <code>number[] -&gt; number[]</code> 的函数。</p>
<p>接下来就是将这些数字变换到 0 ~ 1 区间，这一步比较简单，观察一下最大最小值做个线性变换就行了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">v</span> <span class="o">+</span> <span class="mi">20</span><span class="p">)</span> <span class="o">/</span> <span class="mi">80</span><span class="p">)</span>
</code></pre></div><p>有了一组 0 ~ 1 的数字以后，我们就可以使用 Canvas 进行绘图了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">W</span> <span class="o">=</span> <span class="mi">800</span> <span class="c1">// canvas width
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">H</span> <span class="o">=</span> <span class="mi">600</span> <span class="c1">// canvas height
</span><span class="c1"></span>
<span class="kr">const</span> <span class="nx">draw</span> <span class="o">=</span> <span class="p">(</span><span class="nx">spectrum</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">W</span><span class="p">,</span> <span class="nx">H</span><span class="p">)</span>

  <span class="kr">const</span> <span class="nx">barWidth</span> <span class="o">=</span> <span class="nx">W</span> <span class="o">/</span> <span class="nx">spectrum</span><span class="p">.</span><span class="nx">length</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">spectrum</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">v</span> <span class="o">=</span> <span class="nx">spectrum</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">*</span> <span class="nx">barWidth</span>
    <span class="kr">const</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">v</span> <span class="o">*</span> <span class="nx">H</span>
    <span class="kr">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">H</span> <span class="o">-</span> <span class="nx">height</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">barWidth</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>然后我们来看看结果，打开 <a href="http://cjting.me/audio-vis-demo/">audio-vis-demo</a>，选择一个音频文件，取消勾选 “Smooth”，点击播放，然后我们会发现，柱子可以正常地绘制出来，但是它们”跳跃“得非常厉害，不够平稳。</p>
<p>这是因为我们漏了一步，叫做 Time smoothing。</p>
<p>具体的机理我并不理解，所以就不再说明了，对我们的目标来说，这部分当做黑盒处理就可以了。</p>
<p>这里我想说明一下，在我看来，学习任何知识都是分层的，学到自己感兴趣的层级即可，对下一层有一个定性的认识，需要的时候可以再去细究。</p>
<p>我们可以认为 Time smoothing 就是对当前的 result 和上一个 result 进行某种操作，然后输出一组值。</p>
<p>下面是具体的算法，代码非常简单，但是效果非常明显。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">smoothConstantDown</span> <span class="o">=</span> <span class="mf">0.08</span>
<span class="kr">const</span> <span class="nx">smoothConstantUp</span> <span class="o">=</span> <span class="mf">0.8</span>

<span class="k">if</span><span class="p">(</span><span class="nx">lastY</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lastY</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
      <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">smoothConstantDown</span> <span class="o">+</span> <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">smoothConstantDown</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">smoothConstantUp</span> <span class="o">+</span> <span class="nx">lastY</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nx">smoothConstantUp</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">lastY</span> <span class="o">=</span> <span class="nx">y</span>
<span class="p">}</span>
</code></pre></div><p>我们在 Demo 中勾选上 “Smooth” 启用这个算法，然后就会发现图像马上变得不再跳动了，整体结果已经和其他播放器很接近了。</p>
<p>注意，这里我们是为了学习底层的步骤和细节，所以很多操作都自己来做。如果真的需要开发相关功能，使用 WebAudio 的 API 是更合理的选择。</p>
<p>我在 <a href="http://cjting.me/audio-vis-demo/">audio-vis-demo</a> 中也基于 WebAudio 的 API 进行了实现，主要是为了对比和参考。</p>
<p>到这里，我们完整地实现了从一组数字到可视化图形的全过程，深切地感受到了数学的魅力。这里的编码一点也不难，难的，或者是让人赞叹的，是背后的数学，人类智慧皇冠上最灿烂的明珠。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python自动化利器RPA爬数据so easy</title>
      <link>https://textdata.cn/blog/rpa/</link>
      <pubDate>Sun, 19 Dec 2021 12:43:10 +0600</pubDate>
      
      <guid>/blog/rpa/</guid>
      <description>您可以使用它快速实现自动化操作网站、自动化处理桌面应用程序上的重复性耗时任务。</description>
      <content:encoded><![CDATA[<p>RPA for Python 简单而强大的自动化套件！ 您可以使用它快速实现自动化操作网站、自动化处理桌面应用程序上的重复性耗时任务。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">rpa</span>
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<p>首次运行下方代码会，提示安装200M左右的配置文件，建议选择状况较好的网络环境。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpa</span> <span class="k">as</span> <span class="nn">r</span>

<span class="n">r</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="c1">#操控Chrome打开某个链接</span>
<span class="n">r</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="s1">&#39;https://www.google.com&#39;</span><span class="p">)</span>

<span class="c1">#定位搜索框，输入decentralization，回车执行搜索</span>
<span class="n">r</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="s1">&#39;//*[@name=&#34;q&#34;]&#39;</span><span class="p">,</span> <span class="s1">&#39;decentralization[enter]&#39;</span><span class="p">)</span>

<span class="c1">#定位结果页的统计信息。</span>
<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;result-stats&#39;</span><span class="p">))</span>

<span class="c1">#截屏</span>
<span class="n">r</span><span class="o">.</span><span class="n">snap</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="s1">&#39;results.png&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><pre><code>找到约 1,590,000,000 条结果 （用时 0.39 秒）
True
</code></pre>
<p>需要注意的是 <code>//*[@name=&quot;q&quot;]</code> 与 <code>result-stats</code> 都是网页的定位表达式，建议大家稍微学一下html选择器 selector。 咱们爬虫课程中的pyquery部分讲的主要是selector，感兴趣可以付下一下。</p>
<br>
<h2 id="再试一下">再试一下</h2>
<p>这里我给大家操作一下，通过开发者工具Element面板选定并复制的方法构造selector。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpa</span> <span class="k">as</span> <span class="nn">r</span>

<span class="n">r</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">r</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="s1">&#39;https://www.baidu.com&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="s1">&#39;#kw&#39;</span><span class="p">,</span> <span class="s1">&#39;大邓和他的Python[enter]&#39;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;//*[@id=&#34;tsn_inner&#34;]/div[2]&#39;</span><span class="p">))</span>
<span class="n">r</span><span class="o">.</span><span class="n">snap</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="s1">&#39;results.png&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><pre><code>搜索工具百度为您找到相关结果约1,920,000个
True
</code></pre>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>changedetection|自动追踪网站更新</title>
      <link>https://textdata.cn/blog/changedetection/</link>
      <pubDate>Sat, 18 Dec 2021 10:43:10 +0600</pubDate>
      
      <guid>/blog/changedetection/</guid>
      <description>想知道什么时候网站有新的变动(新消息)</description>
      <content:encoded><![CDATA[<p>想知道什么时候网站有新的变动(新消息)&hellip;</p>
<ul>
<li>政府部门更新（更改通常只在他们的网站上）</li>
<li>地方政府有新闻了（变化往往只在他们的网站上）</li>
<li>当您不在他们的邮件列表中时，新软件发布、安全建议。</li>
<li>有变化的节日</li>
<li>房地产上市变化</li>
<li>来自政府网站的 COVID 相关新闻</li>
<li>检测和监控 JSON API 响应的变化</li>
<li>API 监控和警报</li>
</ul>
<p><strong>其实超级简单，一个命令即可！</strong></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install changedetection.io
</code></pre></div><p>假设项目文件夹存放于桌面，在桌面新建一个<strong>monitordetection</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#mac
changedetection.io -d desktop/monitordetection -p 5000

#win
changedetection.io -d Desktop/monitordetection -p 5000
</code></pre></div><p>然后访问 http://127.0.0.1:5000 ，您现在应该可以访问 UI。</p>

<figure >
    
        <img src="img/screen.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Top2Vec|主题建模和语义搜索库</title>
      <link>https://textdata.cn/blog/top2vec_tutorial/</link>
      <pubDate>Mon, 13 Dec 2021 10:43:10 +0600</pubDate>
      
      <guid>/blog/top2vec_tutorial/</guid>
      <description>Python主题建模和语义搜索库</description>
      <content:encoded><![CDATA[<p>Top2Vec 是一种用于主题建模和语义搜索的算法。**我个人从理解代码和使用代码难度来看， 对于Python小白，BERTopic更适合直接用预训练词向量，而Top2Vec更适合对小规模数据训练词向量后做主题建模。**它自动检测文本中存在的主题并生成联合嵌入的主题、文档和词向量。训练 Top2Vec 模型后，您可以：</p>
<ul>
<li>获取检测到的主题数。</li>
<li>获取话题。</li>
<li>获取主题大小。</li>
<li>获取分层主题。</li>
<li>按关键字搜索主题。</li>
<li>按主题搜索文档。</li>
<li>按关键字搜索文档。</li>
<li>找出相似的词。</li>
<li>查找类似的文档。</li>
<li>使用 RESTful-Top2Vec 公开模型</li>
<li>有关其工作原理的更多详细信息，请参阅论文。</li>
</ul>
<p><strong>亮点</strong></p>
<ul>
<li>自动查找主题数。</li>
<li>不需要停用词列表。</li>
<li>不需要词干/词形还原。</li>
<li>适用于短文本。</li>
<li>创建联合嵌入的主题、文档和词向量。</li>
<li>内置搜索功能。</li>
</ul>
<p><strong>它是如何工作的？</strong></p>
<p>该算法做出的假设是，许多语义相似的文档都表明了一个潜在的主题。</p>
<p>第一步是创建文档和词向量的联合嵌入。一旦文档和单词被嵌入到一个向量空间中，算法的目标就是找到密集的文档集群，然后确定哪些单词将这些文档吸引到一起。每个密集区域是一个主题，将文档吸引到密集区域的词就是主题词。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">top2vec</span><span class="o">==</span><span class="mf">1.0.27</span>
</code></pre></div><h2 id="0-代码下载">0. 代码下载</h2>
<p><a href="top2vec_tutorial.zip">click to download code</a></p>
<p><br><br></p>
<h2 id="1-导入数据">1. 导入数据</h2>
<p>使用某灾难数据集，这里是存在标注的标签，但是我们假设不用label的，仅作为评判Top2vec运行效果的标准。<a href="cnews.csv">点击cnews.csv下载</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">display</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">from</span> <span class="nn">top2vec</span> <span class="kn">import</span> <span class="n">Top2Vec</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">jieba</span>

<span class="n">stopwords</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;STOPWORDS.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;STOPWORDS&#39;</span><span class="p">][</span><span class="s1">&#39;chinese&#39;</span><span class="p">]</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;cnews.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<pre><code>时政    120
科技    106
时尚    106
财经    105
家居    103
教育     97
娱乐     96
体育     95
房产     87
游戏     85
Name: label, dtype: int64
</code></pre>
<p><br><br></p>
<h2 id="2-清洗数据">2. 清洗数据</h2>
<p>一般而言，作中文文本分析，需要把中文分词构造成类西方语言(空格间隔词语的文本)风格。在此期间，顺便将停用词剔除。其实在用top2vec时，不剔除停用词影响也不大。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">]</span>
    <span class="k">return</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>


<span class="n">df</span><span class="p">[</span><span class="s1">&#39;cleantext&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">clean_text</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="3-训练模型">3. 训练模型</h2>
<p>Top2vec有一下四个常用参数</p>
<p><strong>Top2vec(documents, min_count, speed, workers)</strong></p>
<ul>
<li>documents: 文档列表</li>
<li>min_count: 词语最少出现次数。低于min_count的词不加入模型中</li>
<li>speed: 训练速度，参数默认&quot;learn&quot;
<ul>
<li>&ldquo;fast-learn&rdquo;  速度最快，训练效果最差</li>
<li>&ldquo;learn&rdquo;       速度，训练效果中等</li>
<li>&ldquo;deep-learn&rdquo;  速度最慢，训练效果最佳</li>
</ul>
</li>
<li>workers: 并行运行数，该值最大取值为电脑CPU的核数。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span> <span class="o">=</span> <span class="n">Top2Vec</span><span class="p">(</span><span class="n">documents</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;cleantext&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">to_list</span><span class="p">(),</span> 
                <span class="n">min_count</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
                <span class="n">speed</span><span class="o">=</span><span class="s2">&#34;deep-learn&#34;</span><span class="p">,</span>  
                <span class="n">workers</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>2021-12-14 20:21:10,318 - top2vec - INFO - Pre-processing documents for training
2021-12-14 20:21:10,871 - top2vec - INFO - Creating joint document/word embedding
2021-12-14 20:25:06,082 - top2vec - INFO - Creating lower dimension embedding of documents
2021-12-14 20:25:14,645 - top2vec - INFO - Finding dense areas of documents
2021-12-14 20:25:14,683 - top2vec - INFO - Finding topics
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 话题个数</span>
<span class="n">model</span><span class="o">.</span><span class="n">get_num_topics</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<pre><code>9
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 各话题数量</span>
<span class="n">topic_sizes</span><span class="p">,</span> <span class="n">topic_nums</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">get_topic_sizes</span><span class="p">()</span>

<span class="p">{</span><span class="s2">&#34;topic_sizes&#34;</span><span class="p">:</span><span class="n">topic_sizes</span><span class="p">,</span> 
 <span class="s2">&#34;topic_ids&#34;</span><span class="p">:</span><span class="n">topic_nums</span><span class="p">}</span>
</code></pre></div><p>Run</p>
<pre><code>{'topic_sizes': array([361, 116, 107,  99,  97,  93,  82,  25,  20]),
 'topic_ids': array([0, 1, 2, 3, 4, 5, 6, 7, 8])}
</code></pre>
<p><br><br></p>
<h2 id="4-get_topics">4. get_topics</h2>
<p>用pyecharts词云图显示<strong>话题信息</strong>， 为了简化代码，将该功能封装为函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">gen_wordcloud</span><span class="p">(</span><span class="n">topic_words</span><span class="p">,</span> <span class="n">word_scores</span><span class="p">,</span> <span class="n">topic_id</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    topic_words: 主题词列表
</span><span class="s2">    word_scores: 主题特征词的权重得分(词语表征主题的能力)
</span><span class="s2">    topic_id: 主题id
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
    <span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">WordCloud</span>
    <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">display</span>
    
    <span class="n">data</span> <span class="o">=</span> <span class="p">[(</span><span class="n">word</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">weight</span><span class="p">))</span> <span class="k">for</span> <span class="n">word</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">topic_words</span><span class="p">,</span> <span class="n">word_scores</span><span class="p">)]</span>

    <span class="n">wc</span> <span class="o">=</span> <span class="n">WordCloud</span><span class="p">()</span>
    <span class="n">wc</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">data_pair</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">word_size_range</span><span class="o">=</span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">88</span><span class="p">])</span>
    <span class="n">wc</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Topic_</span><span class="si">{topic_id}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">topic_id</span><span class="o">=</span><span class="n">topic_id</span><span class="p">),</span> 
                                  <span class="n">title_textstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TextStyleOpts</span><span class="p">(</span><span class="n">font_size</span><span class="o">=</span><span class="mi">23</span><span class="p">)),</span>
        <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>

    <span class="n">display</span><span class="p">(</span><span class="n">wc</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_wordss</span><span class="p">,</span> <span class="n">word_scoress</span><span class="p">,</span> <span class="n">topic_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">get_topics</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>

<span class="k">for</span> <span class="n">topic_words</span><span class="p">,</span> <span class="n">word_scores</span><span class="p">,</span> <span class="n">topic_id</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">topic_wordss</span><span class="p">,</span> <span class="n">word_scoress</span><span class="p">,</span> <span class="n">topic_ids</span><span class="p">):</span>
    <span class="n">gen_wordcloud</span><span class="p">(</span><span class="n">topic_words</span><span class="p">,</span> <span class="n">word_scores</span><span class="p">,</span> <span class="n">topic_id</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/vis1.png" alt=""  />

<img loading="lazy" src="img/vis2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="5-get_documents_topics">5. get_documents_topics</h2>
<p>get_documents_topics(doc_ids, num_topics=1)</p>
<ul>
<li>doc_ids: 待查询文档id列表</li>
<li>num_topics: 返回某文档可能归属话题的个数</li>
</ul>
<p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 查第一条文档的</span>
<span class="n">model</span><span class="o">.</span><span class="n">get_documents_topics</span><span class="p">(</span><span class="n">doc_ids</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">num_topics</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(array([0]),
 array([0.1384481], dtype=float32),
 array([[&#39;政府&#39;, &#39;经济&#39;, &#39;政策&#39;, &#39;建设&#39;, &#39;中方&#39;, &#39;发展&#39;, &#39;促进&#39;, &#39;部门&#39;, &#39;留学&#39;, &#39;学生&#39;, &#39;会议&#39;,
         &#39;我要&#39;, &#39;事务&#39;, &#39;日电&#39;, &#39;房价&#39;, &#39;教育&#39;, &#39;国务院&#39;, &#39;温家宝&#39;, &#39;留学生&#39;, &#39;人数&#39;, &#39;移民&#39;,
         &#39;会见&#39;, &#39;推动&#39;, &#39;申请者&#39;, &#39;申请&#39;, &#39;官员&#39;, &#39;住房&#39;, &#39;房屋&#39;, &#39;加强&#39;, &#39;中国政府&#39;, &#39;购房&#39;,
         &#39;国家&#39;, &#39;支付&#39;, &#39;楼市&#39;, &#39;外交部&#39;, &#39;接收&#39;, &#39;两国&#39;, &#39;原则&#39;, &#39;各地&#39;, &#39;总理&#39;, &#39;战略&#39;,
         &#39;和平&#39;, &#39;框架&#39;, &#39;评论&#39;, &#39;有序&#39;, &#39;装修&#39;, &#39;中国&#39;, &#39;就业&#39;, &#39;友好&#39;, &#39;人力资源&#39;]],
       dtype=&#39;&lt;U9&#39;),
 array([[0.3623712 , 0.36037514, 0.35219163, 0.35109183, 0.3499857 ,
         0.34666985, 0.3426961 , 0.34161803, 0.34010434, 0.3382269 ,
         0.33710504, 0.336056  , 0.33598724, 0.33488944, 0.3303768 ,
         0.32483265, 0.324798  , 0.32201332, 0.3174801 , 0.3153757 ,
         0.3152491 , 0.31338856, 0.31334093, 0.31244045, 0.31202242,
         0.30908576, 0.3086405 , 0.30838227, 0.30605763, 0.3053521 ,
         0.30474398, 0.30268514, 0.30253592, 0.30242488, 0.30227807,
         0.3017046 , 0.30116442, 0.30062813, 0.2996228 , 0.29806197,
         0.2972776 , 0.29709277, 0.29706252, 0.29584888, 0.29578486,
         0.29524648, 0.2944737 , 0.2939484 , 0.29286712, 0.29246706]],
       dtype=float32))
</code></pre></div><p><br><br></p>
<h2 id="6-search_topics">6. search_topics</h2>
<p>根据关键词搜索话题，查某词是否属于某话题，属于该主题的概率
search_topics(keywords, num_topics, keywords_neg=None)</p>
<ul>
<li>keywords: 关键词列表</li>
<li>num_topics: 返回话题个数，按照语义相似度从高到低排序</li>
<li>keywords_neg: 反义词列表</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">gen_wordcloud2</span><span class="p">(</span><span class="n">query_word</span><span class="p">,</span> <span class="n">topic_words</span><span class="p">,</span> <span class="n">word_scores</span><span class="p">,</span> <span class="n">topic_id</span><span class="p">,</span> <span class="n">topic_probability</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    query_word: 待查询词
</span><span class="s2">    topic_words: 主题词列表
</span><span class="s2">    word_scores: 主题特征词的权重得分(词语表征主题的能力)
</span><span class="s2">    topic_id: 主题id
</span><span class="s2">    topic_probability: 主题概率
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
    <span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">WordCloud</span>
    <span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">display</span>
    
    <span class="n">data</span> <span class="o">=</span> <span class="p">[(</span><span class="n">word</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">weight</span><span class="p">))</span> <span class="k">for</span> <span class="n">word</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">topic_words</span><span class="p">,</span> <span class="n">word_scores</span><span class="p">)]</span>

    <span class="n">wc</span> <span class="o">=</span> <span class="n">WordCloud</span><span class="p">()</span>
    <span class="n">wc</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">data_pair</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">word_size_range</span><span class="o">=</span><span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">88</span><span class="p">])</span>
    <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Word</span><span class="si">{query_word}</span><span class="se">\n</span><span class="s2">Topic_</span><span class="si">{topic_id}</span><span class="se">\n</span><span class="s2">Probability:</span><span class="si">{probability:.2f}</span><span class="s2">&#34;&#34;&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">query_word</span><span class="o">=</span><span class="n">query_word</span><span class="p">,</span>
                                                              <span class="n">topic_id</span><span class="o">=</span><span class="n">topic_id</span><span class="p">,</span> 
                                                              <span class="n">probability</span><span class="o">=</span><span class="n">topic_probability</span><span class="p">)</span>
    <span class="n">wc</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">,</span> 
                                  <span class="n">title_textstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TextStyleOpts</span><span class="p">(</span><span class="n">font_size</span><span class="o">=</span><span class="mi">18</span><span class="p">)),</span>
        <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>

    <span class="n">display</span><span class="p">(</span><span class="n">wc</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">query_word</span> <span class="o">=</span> <span class="s2">&#34;电影&#34;</span>
<span class="n">topic_wordss</span><span class="p">,</span> <span class="n">word_scoress</span><span class="p">,</span> <span class="n">topic_scores</span><span class="p">,</span> <span class="n">topic_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">search_topics</span><span class="p">(</span><span class="n">keywords</span><span class="o">=</span><span class="p">[</span><span class="n">query_word</span><span class="p">],</span> <span class="n">num_topics</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="k">for</span> <span class="n">topic_words</span><span class="p">,</span> <span class="n">word_scores</span><span class="p">,</span> <span class="n">topic_score</span><span class="p">,</span> <span class="n">topic_id</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">topic_wordss</span><span class="p">,</span> <span class="n">word_scoress</span><span class="p">,</span> <span class="n">topic_scores</span><span class="p">,</span> <span class="n">topic_ids</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">topic_score</span><span class="o">&gt;</span><span class="mf">0.5</span><span class="p">:</span>
        <span class="n">gen_wordcloud2</span><span class="p">(</span><span class="n">query_word</span><span class="o">=</span><span class="n">query_word</span><span class="p">,</span> 
                       <span class="n">topic_words</span><span class="o">=</span><span class="n">topic_words</span><span class="p">,</span> 
                       <span class="n">word_scores</span><span class="o">=</span><span class="n">word_scores</span><span class="p">,</span> 
                       <span class="n">topic_id</span><span class="o">=</span><span class="n">topic_id</span><span class="p">,</span> <span class="n">topic_probability</span><span class="o">=</span><span class="n">topic_score</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/vis5.png" alt=""  />
</p>
<br>
<h2 id="7-query_topics">7. query_topics</h2>
<p>根据一段文本寻找最符合该文本的话题
query_topics(query, num_topics)</p>
<ul>
<li>query: 查询文本，注意是用空格间隔词语的文本</li>
<li>num_topics: 返回的话题数</li>
</ul>
<p>返回话题特征词列表， 话题特征词权重， 话题概率， 话题id</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">querytext</span> <span class="o">=</span> <span class="s1">&#39;刘晓庆 55 岁 近日 颁奖礼 刘晓庆 一袭 宝蓝色 超低 胸 V 领 长裙 亮相 轻薄 蕾丝 奢华 皮草 艳丽 色彩 翠绿&#39;</span>
<span class="n">topic_words</span><span class="p">,</span> <span class="n">word_scores</span><span class="p">,</span> <span class="n">topic_scores</span><span class="p">,</span> <span class="n">topic_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">query_topics</span><span class="p">(</span><span class="n">query</span><span class="o">=</span><span class="n">querytext</span><span class="p">,</span> 
                                                                       <span class="n">num_topics</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;可能归属的话题有: &#39;</span><span class="p">,</span> <span class="n">topic_ids</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;归属于该话题的概率&#39;</span><span class="p">,</span> <span class="n">topic_scores</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">可能归属的话题有:  [1 4]
归属于该话题的概率 [0.32036728 0.1276904 ]
</code></pre></div><br>
<h2 id="8-search_documents_by_keywords">8. search_documents_by_keywords</h2>
<p>根据关键词，筛选文档</p>
<p>search_documents_by_keywords(keywords,
num_docs,
keywords_neg=None,
return_documents=True)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#文档， 语义相关性， 文档id</span>
<span class="n">docs</span><span class="p">,</span> <span class="n">scores</span><span class="p">,</span> <span class="n">doc_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">search_documents_by_keywords</span><span class="p">(</span><span class="n">keywords</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;搭配&#39;</span><span class="p">],</span> 
                                                         <span class="n">num_docs</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> 
                                                         <span class="n">keywords_neg</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> 
                                                         <span class="n">return_documents</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="k">for</span> <span class="n">doc</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">doc_id</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">scores</span><span class="p">,</span> <span class="n">doc_ids</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Document: </span><span class="si">{</span><span class="n">doc_id</span><span class="si">}</span><span class="s2">, Semantic similarity: </span><span class="si">{</span><span class="n">score</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;----------&#39;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Document: 106, Semantic similarity: 0.4943176805973053
白色 短裙 百变 休闲 感 要点 一定 敞开 衬衫 配合 牛仔裤 休闲 感 短裤 衬衫 短 敞开 显得 好好 穿 裤子 搭配 七分裤 遮住 臀部 长度 关键 尽量 选择 艳丽 颜色 带 出 青春 感 NO.3     白色 短裙 tips :   白色 短裙 + 粉色 上衣 这是 一套 减龄 百分百 搭配 白色 短裙 本来 清纯 粉色 上衣 搭配 更加 具有活力 tips :   白色 短裙 + 抹胸 + 外套 想要 性感 一点 就加 一件 抹胸 抹胸 胸前 构造 曲线 完美 再加 外套 保暖 得体 看似 简单 一款 搭配 其实 暗地里 偷偷地 修饰 身材
----------

Document: 870, Semantic similarity: 0.4483542740345001
组图 看达人 演绎 豹纹 军装 风 导语 懂得 潮流 总是 知道 适合 今冬 流行 亮点 太 军装 豹纹 类似 民族风情 想要 知道 搭配 快 看看 时尚 达 穿 军绿色 宽松 款 大衣 不失 俏皮 味道 高腰 设计 短裙 有效 提升 腰线 衬托出 修长 美腿 豹纹 今年 冬季 抢眼 搭配 元素 加上 驼色 针织衫 灰色 围巾 暖 棕色 手 挎包 整体 色调 统一 迷人 棕色 蓝色 结合能 眼前一亮 简洁 款式 依然 突显 独特 品味 宽松 针织 外套 衬托出 优美 身形 搭配 同样 沉闷 黑色 包包 性感 丝袜 装扮 依然 透露 出 迷人 气息 立领 衬衫 加上 深黄 高腰 裤 摩登 感 十足 随意 披上 外套 更显 慵懒 个性 法式 风情
----------

Document: 450, Semantic similarity: 0.4471719563007355
街 拍 爱 招摇过市 毛茸茸 ( 组图 ) 导语 皮草 每个 冬天 可能 丢弃 每个 需要 温暖 早些 相比 人造皮 草比 真皮 草 风头 更劲 时尚 环保 大牌 秀 场上 超模 一个个 穿着 人造皮 草 “ 招摇过市 ” 之后 街头 潮人 没有 理由 拒绝 外形 酷酷 这件 气场 皮草 单品 配合默契 摇滚 风 配饰 搭配 黑色 皮草 长 背心 更显 利落 酷酷 黑色 皮草 搭配 蓝色 衬衣 不同 感觉 加上 下半身 底裤 时髦 包包 颜色 提亮 整身 装扮 抹胸 式 皮草 特点 高贵典雅 适合 搭配 连衣裙 装饰 增添 时尚 美感 复古 圆点 连衣裙 搭配 宽松 棕色 皮草 衣 名媛 感觉 典雅 淑女 短款 黑色 皮草 搭配 贴身 仔裤 搭配 长靴 潇洒 帅气 茸茸 帽子 增添 不少 甜美 感
----------
</code></pre></div><p><br><br></p>
<h2 id="9-search_documents_by_topic">9. search_documents_by_topic</h2>
<p>根据指定的topic_id， 显示该主题前num_docs个文档，显示的文档是根据概率从高到低降序显示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#查看topic4的前5条文档</span>
<span class="n">topic_id</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">documents</span><span class="p">,</span> <span class="n">document_scores</span><span class="p">,</span> <span class="n">document_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">search_documents_by_topic</span><span class="p">(</span><span class="n">topic_num</span><span class="o">=</span><span class="n">topic_id</span><span class="p">,</span> <span class="n">num_docs</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="k">for</span> <span class="n">doc</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">doc_id</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> <span class="n">document_scores</span><span class="p">,</span> <span class="n">document_ids</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Document: </span><span class="si">{</span><span class="n">doc_id</span><span class="si">}</span><span class="s2">, Semantic similarity: </span><span class="si">{</span><span class="n">score</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-----------&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-----------&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Document: 905, Semantic similarity: 0.4941929578781128
-----------
现场 阿联 第三节 未 亮相   奇才 连续 3 记 重扣 逆转 比分 新浪 体育讯 北京 时间 4 2 奇才 主场 迎战 联盟 垫底 骑士 奇才 新秀 后卫 约翰 - 沃尔因 一场 对阵 热火 比赛 斗殴 禁赛 一场 伤愈 复出 安德雷 - 布 莱切 回到 首发 阵容 奇才 本赛季 首场 客场 胜利 面对 骑士 取得 当时 奇才 115 - 110 击败 对手 上半场 骑士 命中率 达到 53.8% 奇才 仅 44% 骑士 希克 森 ( 16 ) 塞 申斯 ( 12 ) 得分 双 奇才 布 莱切 ( 22 ) 麦基 ( 12 ) 埃文斯 4 投 0 仅 抢下 1 篮板 易建联 上场 7 08 2 投 0 抢下 3 篮板 异地 再战 埃文斯 终于 得分 抢断 吉后 犯规 两罚 命中 吉 随即 突破 上篮 命中 回敬 球 杰 弗斯 三分 不进 吉 抢下 篮板 上篮 再进 一球 布 莱切 中投 命中 霍林斯 篮下 出手 不进 布 莱切 抢下 篮板 此后 克劳福德 连续 突破 先是 助攻 麦基 扣篮 盖掉 戴维斯 投篮 助攻 布 莱切 扣篮 戴维斯 运球 被断 布 莱切 传给 杰 弗斯 一记 暴扣 奇才 连续 3 次 颇具 气势 扣篮 连得 6 反超 骑士 1 骑士 请求 暂停 回到 比赛 吉 上篮 不进 麦基 低位 单打 不进 布 莱切 抢下 篮板 3 得手 骑士 进攻 24 违例 奇才 越战越勇 克劳福德 身体 失去 重心 情况 仍然 将球 投进 一个打 3 骑士 连续 吉 挺身而出 三分 命中 个人 已经 得到 10 此人 本赛季 短暂 效力 奇才 麦基 中投 不进 布 莱切 抢下 前场 篮板 将球 放进 麦基 防守 领到 犯规 希克 森两罚 命中 麦基 强攻 造成 霍林斯 犯规 两罚 一中 戴维斯 三分 不进 克劳福德 跑 投 命中 戴维斯 突分 霍林斯 暴扣 命中 回过头来 克劳福德 助攻 麦基扣 劲 爆 哈兰 高迪 中投 不进 克劳福德 投篮 偏出 布 莱切 3 报价 连续 抢 篮板 进攻 最后 犯规 两罚 一中 现在 已经 得到 32 18 篮板 布 莱切 底线 遭 报价 分球 埃文斯 三分 命中 霍林斯 篮下 重扣 奇才 请求 暂停 布 莱切 继续 得分 吉布森 上篮 命中 克劳福德 中投 不进 抢下 篮板 杰 弗斯 运球 突破 犯规 两罚 命中 易建联 节 没有 登场 第三节 比赛 结束 骑士 82 - 83 奇才 ( 草头 王 )
-----------

Document: 689, Semantic similarity: 0.4917592704296112
-----------
直击 康大 内线 一柱擎天   13 优势 到手 胜利在望 新浪 体育讯 北京 时间 4 5 ( 休斯敦 时间 4 4 ) 消息 NCAA   Final   4 总决赛 休斯敦 Reliant 球馆 举行 比赛 进入 最后 6 分钟 本场 表现 十分 亮眼 康涅狄格 内线 阿莱克斯 - 奥里 瓦基接 队友 直传 空切 篮下 扣篮 得分 打成 2 + 1 目前 已经 拿下 10 9 篮板 3 封盖 巴特勒 仍然 没 解决 进攻 端的 问题 下半场 23 投 仅仅 3 屡次 外线 空挡 出手 均 打铁 告终 仅仅 入账 8 目前 康大 已经 取得 13 优势 胜利在望 ( silencer )
-----------

Document: 425, Semantic similarity: 0.47035443782806396
-----------
今日 数据 趣谈 魔兽 悲情 似 张大帅   基德 焕发 第二 春 新浪 体育讯 北京 时间 4 17 NBA 季后赛 正式 开打 进行 4 场 比赛 以下 今日 比赛 诞生 有趣 数据 今日 首场 季后赛 芝加哥 公牛 第四节 剩 4 分钟 仍以 88 - 98 落后 接下来 打出 16 - 1 攻击 波 主场 一举 逆转 印第安纳 步行者 取胜 继 2004 之后 NBA 季后赛 舞台 再次出现 终场 前 4 分钟 落后 两位数 最终 翻盘 成功 案例 2004 5 9 西部 决赛 明尼苏达 森林狼 萨克拉门托 国王 比赛 森林狼 同样 终场 前 4 分钟 仍以 78 - 88 落后 接下来 打出 16 - 1 ( 惊人 相似 ) 最终 94 - 89 逆转 取胜 今天 公牛 逆转 步行者 比赛 德里克 - 罗斯 砍 39 罚球 21 投 19 2008 洛杉矶 湖人 对阵 犹他 爵士 一场 季后赛 科比 - 布莱恩特 创下 单场 罚球 23 投 21 季后赛 纪录 罗斯 位居 全场 三分球 9 次 出手 竟无一 命中 季后赛 历史 此前 两次 类似 案例 2008 奥兰多 魔术 对阵 多伦多 猛龙 一场 比赛 拉沙德 - 刘易斯 三分球 9 投 0 一次 熟知 1994 总决赛 第七场 约翰 - 斯塔克 斯 三分 线外 11 投 0 纽约 尼克斯 负于 休斯敦 火箭 冠军 擦肩而过 今天 亚特兰大 老鹰 客场 战胜 奥兰多 魔术 比赛 老鹰 五名 球员 得分 低于 13 — — 乔 - 约翰逊 ( 25 16 投 9 ) 贾马尔 - 克劳福德 ( 23 14 投 7 ) 艾尔 - 霍福德 ( 16 14 投 7 ) 约什 - 史密斯 ( 15 12 投 6 ) 科克 - 辛里奇 ( 13 10 投 6 ) 该队 过去 199 场 季后赛 尚属 首次 老鹰队 史上 一次 出现 这种 盛况 1966 4 14 131 - 127 战胜 洛杉矶 湖人 比赛 当时 书写 纪录 五人 里奇 - 古尔林 克里夫 - 哈根 泽尔莫 - 比蒂 比尔 - 布里奇斯 乔 - 考 德维尔 今天 负于 老鹰 比赛 德怀特 - 霍华德 ( 46 ) 贾 米尔 - 尼尔森 ( 27 ) 砍 73 队友 总共 仅 拿下 20 魔术 最终 93 - 103 负于 更为 均衡 对手 NBA 历史 8 支 球队 一场 季后赛 比赛 有过 两名 球员 联手 砍 全队 至少 75% 得分 1 队 取胜 追溯到 1950 4 9 当年 总决赛 第一场 比赛 乔治 - 麦肯 得到 37 吉姆 - 波 拉德 得到 14 率领 明尼阿波利斯 湖人 68 - 66 战胜 锡 拉丘兹 民族 ( 费城 76 前身 ) 7 队则 败北 得到 46 霍华德 抢下 19 篮板 常规 时间 取得 1975 4 19 布法罗 勇敢者 ( 洛杉矶 快船 前身 ) 战胜 华盛顿 子弹 ( 华盛顿 奇才 前身 ) 一场 季后赛 效力 勇敢者 鲍勃 - 麦卡 杜 同样 没有 加时赛 情况 砍 50 21 篮板 威尔特 - 张伯伦 一场 季后赛 常规 时间 砍 46 19 篮板 球队 却输 ( 事实上 张大帅 生涯 3 场 比赛 取得 数据 竟 败北 ) 刚 谢幕 本赛季 常规赛 杰森 - 基德 仅 两场 比赛 得分 达到 20 + 1 20 对阵 湖人 比赛 砍 赛季 最高 21 今天 达拉斯 小牛 主场 战胜 波特兰 开拓者 比赛 砍 24 命中 6 记 三分球 一场 季后赛 比赛 砍 20 + 得分 刷新 常规赛 创下 赛季 新高 NBA 历史 壮举 球员 如今 38 岁 基德 年龄 最大 成为 NBA 历史 一场 季后赛 比赛 单场 命中 6 记 三分球 年龄 最大 球员 此前 纪录 雷吉 - 米勒 2002 创下 当时 36 岁 今天 小牛 战胜 开拓者 比赛 德克 - 诺维茨基 第四节 13 次 罚球 出手 命中 追平 迈克尔 - 乔丹 纪录 1990 - 91 赛季 季后赛 一场 公牛 底特律 活塞 比赛 乔丹 单节 命中 13 次 罚球 率队 105 - 97 取胜 最终 公牛 获得 赛季 总冠军 今天 迈阿密 热火 战胜 费城 76 比赛 克里斯 - 波什 得到 25 12 篮板 勒布朗 - 詹姆斯 得到 21 14 篮板 他俩 队友 参加 首场 季后赛 前 一个 赛季 各为其主 接下来 赛季 并肩作战 季后赛 首场 比赛 砍 得分 20 + 篮板 10 + 组合 波什 詹姆斯 之前 无先例 ( 魑魅 )
-----------

Document: 155, Semantic similarity: 0.45704954862594604
-----------
现场 麦蒂 返场 销魂 跳投 两 连击   小拜 纳姆 单节 11 新浪 体育讯 北京 时间 4 6 华盛顿 奇才 主场 迎战 底特律 活塞 此前 球队 已经 客场 两连胜 若能 战胜 活塞 奇才 本赛季 首次 迎来 三连胜 异地 再战 埃文斯 中投 命中率 先 得分 拜纳姆 中投 不进 克劳福德 一人 带球 运 前场 对手 尚未 落位 情况 直接 出手 投篮 命中 这种 投篮 欠缺 考虑 根本 没有 战术 配合 全 个人 手感 遇到 防守 稍 一点 球队 沃尔 抢断 埃文斯 直接 暴扣 奇才 反超 4 活塞 请求 暂停 沃尔 报价 对手 拜纳姆 得到 机会 三分 出手 命中 布 莱切 上篮 得手 门罗 助攻 威尔 考克斯 扣篮 命中 埃文斯 三分 不进 拜纳姆 突破 上篮 命中 威尔 考克斯 拿布 莱切 没有 办法 运球 进攻 威尔 考克斯 只能 伸直 手臂 不断 滑步 被布 莱切 强投 命中 活塞 拜纳姆 发力 突破 上篮 命中 布 莱切 中投 不进 拜纳姆 卷土重来 造成 沃尔 犯规 两罚 命中 个人 已经 得到 11 门罗 抢断 布 莱切 普林斯 上篮 命中 活塞 反超 3 麦基 传球 失误 奇才 请求 暂停 威尔 考克斯 篮下 强打 奇才 反击 埃文斯 上篮 命中 普林斯 糟糕 状态 继续 中投 偏出 布 莱切 运球 单打 活塞 两名 内线 屡试不爽 造成 门罗 犯规 两罚 命中 汉密尔顿 中投 不进 威尔 考克斯 抢下 前场 篮板 直接 扣篮 命中 布 莱切 继续 发威 转身 摆脱 上篮 命中 拜纳姆 三分 偏出 球 砸 远 活塞 球员 退守 不及 克劳福德 轻松 上篮 命中 沃尔 中投 不进 拜纳姆 反击 遭 侵犯 两罚 命中 个人 单节 已经 得到 11 布 莱切 对手 包夹 中投 偏出 普林斯 跑 投 命中 活塞 反超 一分 克劳福德 中投 打铁 拜纳姆 没能 命中 三分 麦蒂 回到 赛场 塞拉芬 进攻 犯规 普林斯 中投 不进 门罗 补篮 命中 麦蒂断 球 直接 中投 命中 布 莱切 走步 麦蒂 假动作 点飞 克劳福德 投篮 再进 第三节 比赛 结束 活塞 81 - 78 奇才 ( 草头 王 )
-----------

Document: 254, Semantic similarity: 0.45255911350250244
-----------
奇才 vs 步行者 前瞻 走出 客场 阴影   斗狠 东部 老八 新浪 体育讯 北京 时间 4 7 奇才队 客场 挑战 东区 第八 步行者 目前 奇才 客场 战绩 3 胜 35 负 最近 客场 两连胜 奇才队 背靠背 作战 今天 主场 107 - 105 险胜 活塞 球队 一举 拿到 赛季 最长 三连胜 实际上 这是 奇才队 2007 - 08 赛季 以后 球队 第一个 赛季 三连胜 这场 比赛 奇才 惊人 获得 35 次 罚球 沃尔一人 包办 16 次 全场 得到 26 12 次 助攻 6 篮板 4 次 抢断 布 莱切 无疑 三连胜 第一 功臣 连胜 期间 场均 得到 29 15.3 篮板 克劳福德 同样 火爆 异常 一位 前锋 首发 埃文斯 表现 低估 活塞 比赛 埃文斯 13 投 9 中射下 20 沃尔 拿到 职业生涯 首个 三连胜 “ 联盟 留下 标签 一名 菜鸟 证明 一部分 很多 想 站 球场上 一分钟 全力以赴 ” 奇才 三连胜 对手 名副其实 鱼腩 球队 无论如何 三连胜 这支 弱旅 一个 不小 激励 尤其 伤病 满营 情况 目前 球队 6 可能 赛季 结束 前 无法 归队 包括 得分王 尼克 - 杨 约什 - 霍华德 拉沙德 - 刘易斯 布克 恩戴 耶 卡 蒂尔 - 马丁 步行者 35 胜 43 负 暂居 东部 第八 目前 东部 前七 已经 锁定 季后赛 剩下 第八名 悬念 步行者 领先 第九位 山猫 2.5 个胜场 领先 10 位 雄鹿 3.5 个胜场 剩下 4 场 比赛 情况 悬念 并不大 明天 山猫 雄鹿 迎战 强敌 ( 魔术 热火 ) 步行者 机会 扩大 领先 场次 优势 球队 头号 得分手 格兰杰 状态 过去 5 场 比赛 得分 20 以下 最近 三场 三分球 12 投 3 汉斯 布鲁在 过去 6 场 比赛 陷入 挣扎 场均 9.3 5.7 篮板 ( 之前 11 场 比赛 贡献 20.6 7.8 篮板 ) 一场 比赛 步行者 12 输给 黄蜂队 主教练 沃格尔 称之为 “ 惨痛 失败 ” 本赛季 两队 战成 2 - 1 步行者 赢下 最近 两次 交锋 两场 比赛 奇才 命中率 均 低于 40% 总 失误 高达 41 次 预计 两队 首发 奇才 沃尔 克劳福德 埃文斯 布 莱切 麦基 步行者 科 里森 格兰杰 乔治 汉斯 布鲁 希伯特 ( 木瓜 丁 )
-----------
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">documents</span><span class="p">,</span> <span class="n">document_scores</span><span class="p">,</span> <span class="n">document_ids</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">search_documents_by_keywords</span><span class="p">(</span><span class="n">keywords</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;搭配&#34;</span><span class="p">,</span> <span class="s2">&#34;高跟鞋&#34;</span><span class="p">],</span> <span class="n">num_docs</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="k">for</span> <span class="n">doc</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">doc_id</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> <span class="n">document_scores</span><span class="p">,</span> <span class="n">document_ids</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Document: </span><span class="si">{</span><span class="n">doc_id</span><span class="si">}</span><span class="s2">, Semantic similarity: </span><span class="si">{</span><span class="n">score</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-----------&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-----------&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">()</span>
</code></pre></div><pre><code>Document: 727, Semantic similarity: 0.5883481502532959
-----------
组图 冷气 办公室   连衣裙 配小 坎肩 美国 设计师 Diane   Von   Furstenberg 曾经 感觉 女人 穿 连衣裙 女人 找到 一件 适合 dream   dress 重要 无需 费神 搭配 单穿 连身 优雅 飞扬 裙摆 似乎 告诉 女 连衣裙 玩起 High   Fashion 变脸 游戏 DKNY 绿色 连衣裙   新品 未 定价 H &amp; M 黑色 外套   新品 未 定价 Agatha 配件 新品 未 定价 C . Banner 高跟鞋   新品 未 定价 低 V 领 连衣裙 秀出 属于 性感 更好 展现出 颈部 线条 搭配 修身 剪裁 西装 短款 皮手套 极具 欧美 明星 范儿 细 高跟鞋 更好 突出 双腿 长度 整体 显得 轻盈 不少 On &amp; on 米色 连衣裙   新品 未 定价 Asobio 针织 外套   RMB   449 Kookai 金色 腰带 Jc  
-----------

Document: 435, Semantic similarity: 0.5440454483032227
-----------
组图 秋冬 优雅 妖娆   女星 爱 裸 色系 导语 裸色 优雅 代名词 女星 近来 誓 裸色 进行 到底 无论是 徐若 ? 性感 乐基儿 气质 搭配 各色 礼服 赏心悦目 娇俏 款式 更是 大饱眼福 徐若 ? 飘逸 丝带    立刻 彰显 天王 嫂 贵妇 气质 袁咏仪 翻领 西装   气质 非凡 裸色 短款 紧身 西装 皮质 面料 彰显 个性 夹带 一点 蕾丝 装饰 女性 柔美 油然而生 搭配 碎花 蛋糕 裙 气质 非凡
-----------

Document: 870, Semantic similarity: 0.523485541343689
-----------
组图 看达人 演绎 豹纹 军装 风 导语 懂得 潮流 总是 知道 适合 今冬 流行 亮点 太 军装 豹纹 类似 民族风情 想要 知道 搭配 快 看看 时尚 达 穿 军绿色 宽松 款 大衣 不失 俏皮 味道 高腰 设计 短裙 有效 提升 腰线 衬托出 修长 美腿 豹纹 今年 冬季 抢眼 搭配 元素 加上 驼色 针织衫 灰色 围巾 暖 棕色 手 挎包 整体 色调 统一 迷人 棕色 蓝色 结合能 眼前一亮 简洁 款式 依然 突显 
-----------

Document: 522, Semantic similarity: 0.4756317138671875
-----------
女星 争当 蓝色妖姬 &amp; nbsp ; 英国 气质 女演员 瑞切尔 ・ 薇 兹 时尚 点评 英国 气质 女演员 瑞切尔 · 薇 兹 ( Rachel   Weisz )   美貌 非常 头脑 修身 印花 连衣裙 搭配 抢眼 棕红色 短 夹克 非常 好看 搭配 黑色 罗马 feel 高跟鞋 特别 有潮味 时尚 点评 身材 不算 瘦 女星 Lea   Michele 搭配 起来 非常 特色 一味 地瘦 风格 满是 褶皱 裙子 非常 修身 亮眼 颜色 非常
-----------

Document: 707, Semantic similarity: 0.47334203124046326
-----------
组图 黑丝 短裙 上阵   5 旬 女星 胜过 90 红星 导语 气温 越来越低 女星 不畏 严寒 纷纷 穿着 短裙 透视装 出席 活动 一番 比拼 不难 发现 气质 年轻 难得 厉害 一起 看看 刘晓庆 55 岁 近日 颁奖礼 刘晓庆 一袭 宝蓝色 超低 胸 V 领 长裙 亮相 轻薄 蕾丝 奢华 皮草 艳丽 色彩 翠绿 首饰 配上 短小 精炼 波波 头 瞬间 减龄 15 岁 张曼玉 46 岁 一向 气质 型 美女 著称 反倒 少 繁琐 修饰 刻意 打扮 超级 简单 Lanvin   for   H &amp; M 斜肩 礼裙 搭配 一双 皮质 手套 
-----------
</code></pre>
<p><br><br></p>
<h2 id="10-get_topic_hierarchy">10. get_topic_hierarchy</h2>
<p>对话题进行分类，需要</p>
<ol>
<li>先执行model.hierarchical_topic_reduction</li>
<li>再执行model.get_topic_hierarchy。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 将话题分为2类</span>
<span class="n">model</span><span class="o">.</span><span class="n">hierarchical_topic_reduction</span><span class="p">(</span><span class="n">num_topics</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">get_topic_hierarchy</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<pre><code>[[7, 6, 1, 8, 5, 4, 3], [2, 0]]
</code></pre>
<p><br><br></p>
<h2 id="11-similar_words">11. similar_words</h2>
<p>查找相似词， 该方法其实也可以用于扩充词典。</p>
<p>similar_words(keywords, num_words, keywords_neg=None)</p>
<ul>
<li>keywords: 待查询关键词列表</li>
<li>num_words: 返回相似词个数</li>
<li>keywords_neg: 指定反义词列表</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 查找【增进】的最相似的10个词</span>
<span class="n">model</span><span class="o">.</span><span class="n">similar_words</span><span class="p">(</span><span class="n">keywords</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;增进&#34;</span><span class="p">],</span> 
                    <span class="n">num_words</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> 
                    <span class="n">keywords_neg</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>(array(['两国关系', '两国', '温家宝', '王刚', '战略', '友好', '中欧', '政治', '会见', '人民'],
       dtype='&lt;U4'),
 array([0.50498132, 0.49835259, 0.4636392 , 0.45802986, 0.45299921,
        0.44836198, 0.43550295, 0.43471974, 0.43099192, 0.42711113]))
</code></pre>
<br>
<h2 id="12-save">12. save</h2>
<p>训练不易， 记得保存模型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s1">&#39;随便起个名字.pkl&#39;</span><span class="p">)</span>
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>ashares库|A股市场历史行情数据</title>
      <link>https://textdata.cn/blog/ashares/</link>
      <pubDate>Sun, 05 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/ashares/</guid>
      <description>&lt;h1 id=&#34;ashares&#34;&gt;ashares&lt;/h1&gt;
&lt;p&gt;代码非原创，是对项目&lt;a href=&#34;https://github.com/mpquant/Ashare&#34;&gt;Ashare&lt;/a&gt;的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。&lt;/p&gt;
&lt;h2 id=&#34;功能特点&#34;&gt;功能特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年&lt;/li&gt;
&lt;li&gt;双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。&lt;/li&gt;
&lt;li&gt;全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理&lt;/li&gt;
&lt;li&gt;和其他行情库（tushare等）比的优点是什么？ &amp;ndash; 简单 轻量 便携 开源&lt;/li&gt;
&lt;li&gt;Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 &lt;code&gt;get_price()&lt;/code&gt; 看完下面例子就会了&lt;/li&gt;
&lt;li&gt;Ashare可以用在任何需要量化研究，量化分析的场合&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip install akshares
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt;  &lt;span class=&#34;nn&#34;&gt;ashares&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
    
&lt;span class=&#34;c1&#34;&gt;# 证券代码兼容多种格式 通达信，同花顺，聚宽&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# sh000001 (000001.XSHG)    sz399006 (399006.XSHE)   sh600519 ( 600519.XSHG ) &lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh000001&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;#默认获取今天往前5天的日线实时行情&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数日线行情&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;000001.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2021-04-30&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#可以指定结束日期，获取历史行情&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数历史行情&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                        

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;000001.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2018-06-15&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#支持&amp;#39;1d&amp;#39;日, &amp;#39;1w&amp;#39;周,  &amp;#39;1M&amp;#39;月  &lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数历史周线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh600519&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;15m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;#分钟线实时行情，可用&amp;#39;1m&amp;#39;,&amp;#39;5m&amp;#39;,&amp;#39;15m&amp;#39;,&amp;#39;30m&amp;#39;,&amp;#39;60m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;贵州茅台15分钟线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;600519.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;60m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#分钟线实时行情，可用&amp;#39;1m&amp;#39;,&amp;#39;5m&amp;#39;,&amp;#39;15m&amp;#39;,&amp;#39;30m&amp;#39;,&amp;#39;60m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;贵州茅台60分钟线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#上证指数日线行情----------------------------------------------------
              open    close     high      low       volume
2021-06-07  3597.14  3599.54  3600.38  3581.90  303718677.0
2021-06-08  3598.75  3580.11  3621.52  3563.25  304491470.0
2021-06-09  3576.80  3591.40  3598.71  3572.64  298323296.0
2021-06-10  3587.53  3610.86  3624.34  3584.13  318174808.0
2021-06-11  3614.11  3589.75  3614.40  3587.15  360554970.0


#贵州茅台60分钟线----------------------------------------------------
                       open    close     high      low    volume
2021-06-10 14:00:00  2237.00  2224.16  2245.00  2222.00   4541.53
2021-06-10 15:00:00  2222.21  2238.48  2240.34  2222.21   4146.88
2021-06-11 10:30:00  2239.00  2220.00  2244.00  2197.86  12030.00
2021-06-11 11:30:00  2220.01  2210.18  2231.80  2200.18   4868.00
2021-06-11 14:00:00  2210.10  2223.35  2224.48  2206.01   4544.00
2021-06-11 15:00:00  2223.33  2178.81  2226.80  2178.81  12529.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="ashares">ashares</h1>
<p>代码非原创，是对项目<a href="https://github.com/mpquant/Ashare">Ashare</a>的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。</p>
<h2 id="功能特点">功能特点</h2>
<ul>
<li>双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年</li>
<li>双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。</li>
<li>全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理</li>
<li>和其他行情库（tushare等）比的优点是什么？ &ndash; 简单 轻量 便携 开源</li>
<li>Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 <code>get_price()</code> 看完下面例子就会了</li>
<li>Ashare可以用在任何需要量化研究，量化分析的场合</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install akshares
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span>  <span class="nn">ashares</span> <span class="kn">import</span> <span class="n">get_price</span><span class="p">,</span> 
    
<span class="c1"># 证券代码兼容多种格式 通达信，同花顺，聚宽</span>
<span class="c1"># sh000001 (000001.XSHG)    sz399006 (399006.XSHE)   sh600519 ( 600519.XSHG ) </span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;sh000001&#39;</span><span class="p">,</span> <span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1d&#39;</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>      <span class="c1">#默认获取今天往前5天的日线实时行情</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数日线行情</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;000001.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1d&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">end_date</span><span class="o">=</span><span class="s1">&#39;2021-04-30&#39;</span><span class="p">)</span>  <span class="c1">#可以指定结束日期，获取历史行情</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数历史行情</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>                        

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;000001.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1w&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">end_date</span><span class="o">=</span><span class="s1">&#39;2018-06-15&#39;</span><span class="p">)</span>  <span class="c1">#支持&#39;1d&#39;日, &#39;1w&#39;周,  &#39;1M&#39;月  </span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数历史周线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span> 

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;sh600519&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;15m&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>     <span class="c1">#分钟线实时行情，可用&#39;1m&#39;,&#39;5m&#39;,&#39;15m&#39;,&#39;30m&#39;,&#39;60m&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;贵州茅台15分钟线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;600519.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;60m&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>  <span class="c1">#分钟线实时行情，可用&#39;1m&#39;,&#39;5m&#39;,&#39;15m&#39;,&#39;30m&#39;,&#39;60m&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;贵州茅台60分钟线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#上证指数日线行情----------------------------------------------------
              open    close     high      low       volume
2021-06-07  3597.14  3599.54  3600.38  3581.90  303718677.0
2021-06-08  3598.75  3580.11  3621.52  3563.25  304491470.0
2021-06-09  3576.80  3591.40  3598.71  3572.64  298323296.0
2021-06-10  3587.53  3610.86  3624.34  3584.13  318174808.0
2021-06-11  3614.11  3589.75  3614.40  3587.15  360554970.0


#贵州茅台60分钟线----------------------------------------------------
                       open    close     high      low    volume
2021-06-10 14:00:00  2237.00  2224.16  2245.00  2222.00   4541.53
2021-06-10 15:00:00  2222.21  2238.48  2240.34  2222.21   4146.88
2021-06-11 10:30:00  2239.00  2220.00  2244.00  2197.86  12030.00
2021-06-11 11:30:00  2220.01  2210.18  2231.80  2200.18   4868.00
2021-06-11 14:00:00  2210.10  2223.35  2224.48  2206.01   4544.00
2021-06-11 15:00:00  2223.33  2178.81  2226.80  2178.81  12529.00
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyCatFlow库|类别数据时间序列可视化库</title>
      <link>https://textdata.cn/blog/pycatflow/</link>
      <pubDate>Sun, 05 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pycatflow/</guid>
      <description>大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。</description>
      <content:encoded><![CDATA[<p>大家看过了数值数据随时间变化的曲线，但是，却鲜有可视化的工具能很好地对类别特征随着时间变化进行绘制。本文就介绍一种很好的类别特征可视化工具PyCatFlow，非常的简单且实用。</p>
<h2 id="pycatflow">PyCatFlow</h2>
<p>PyCatFlow 是一个 Python 包，用于可视化<strong>类别数据的时间变化</strong>。它的灵感来自 Bernhard Rieder 的可视化工具 <strong>RankFlow</strong>，它允许将排名列表随着时间的推移进行可视化，例如，Google 或 YouTube 上查询的搜索结果的变化。在我看来，尽管它的用户界面极简,RankFlow 是一个非常有用的工具，而且我很难为其准备数据。事实证明，这些困难主要源于“滥用”RankFlow，或者用更积极的术语来说，它源于将 RankFlow 用于其设计目的以外的其他目的。</p>
<h2 id="背景了解rankflow">背景：了解RankFlow</h2>
<p>RankFlow 允许比较排名列表（随着时间的推移）。 在最简单的形式中，它需要以每列代表一个排名列表的方式排列表格数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Time 1,Time 2,Time 3,Time 4
Item 1,Item 1,Item 1,Item 2
Item 2,Item 4,Item 2,Item 1
Item 3,Item 2,Item 4,Item 4
Item 4,Item 3,Item 5,Item 5
</code></pre></div><p>每个排名列表都可以通过权重进行补充，从而为数据添加另一层信息。 例如，如果我们采用 YouTube 搜索结果数据，则可以将观看次数、赞成票数或赞成票反对率用作权重信息。 为简单起见，示例数据仅由排名列表组成，并在以下流程图中显示结果。</p>

<figure >
    
        <img src="img/rankflow.png" width="800" />
    
    
</figure>

<p>为了加快图表的后处理速度，我决定创建一个类似于 RankFlow 的可视化工具，它非常适合不包含显式排名信息但可能包含额外分类数据的时间数据。</p>
<h2 id="pycatflow快速上手">PyCatFlow快速上手</h2>

<figure >
    
        <img src="img/sample_viz.png" width="800" />
    
    
</figure>

<p>如果我们用两种不同颜色，灰色和绿色分别表示男生和女生，然后每一个格子表示一类电影，横轴是男生和女生随着时间推移看的不同的电影，这样我们就可以一目了然男生和女生的喜好的变化，真的是太直观了！
PyCatFlow大大方便了我们对于类别特征随着时间变化的分析。</p>
<p><strong>准备数据</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/sample_data_ChatterBot_Requirements.csv&#34;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">column</th>
<th style="text-align:left">items</th>
<th style="text-align:left">category</th>
<th style="text-align:right">column order</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">fuzzywuzzy</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">requests</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">requests-oauthlib</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">pymongo</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">2015-09-08</td>
<td style="text-align:left">jsondatabase</td>
<td style="text-align:left">A_Requirements</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pycatflow</span> <span class="k">as</span> <span class="nn">pcf</span>

<span class="c1"># Load and parse data from file</span>
<span class="n">fname</span><span class="o">=</span><span class="s2">&#34;data/sample_data_ChatterBot_Requirements.csv&#34;</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="s2">&#34;column&#34;</span><span class="p">,</span> <span class="n">nodes</span><span class="o">=</span><span class="s2">&#34;items&#34;</span><span class="p">,</span> <span class="n">categories</span><span class="o">=</span><span class="s2">&#34;category&#34;</span><span class="p">,</span> <span class="n">column_order</span><span class="o">=</span><span class="s2">&#34;column order&#34;</span><span class="p">)</span>

<span class="s1">&#39;&#39;&#39;
</span><span class="s1">visualize(data, spacing=50, node_size=10, width=None, height=None, minValue=1, maxValue=10, node_scaling=&#34;linear&#34;,
</span><span class="s1">          connection_type=&#34;semi-curved&#34;, color_startEnd=True, color_categories=True, nodes_color=&#34;gray&#34;,
</span><span class="s1">          start_node_color=&#34;green&#34;, end_node_color=&#34;red&#34;, palette=None, show_labels=True,
</span><span class="s1">          label_text=&#34;item&#34;, label_font=&#34;sans-serif&#34;, label_color=&#34;black&#34;, label_size=5,
</span><span class="s1">          label_shortening=&#34;clip&#34;, label_position=&#34;nodes&#34;, line_opacity=0.5, line_stroke_color=&#34;white&#34;,
</span><span class="s1">          line_stroke_width=0.5, line_stroke_thick=0.5, legend=True, sort_by=&#34;frequency&#34;)
</span><span class="s1">&#39;&#39;&#39;</span>

<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="c1">#save visualization to files</span>
<span class="n">viz</span><span class="o">.</span><span class="n">savePng</span><span class="p">(</span><span class="s1">&#39;sample_viz.png&#39;</span><span class="p">)</span>
<span class="n">viz</span><span class="o">.</span><span class="n">saveSvg</span><span class="p">(</span><span class="s1">&#39;sample_viz.svg&#39;</span><span class="p">)</span>

<span class="c1">#show visualization</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Another option is to visualize the graph with curved connections.</span>
<span class="c1"># The implementation of this connection type draws on https://github.com/bernorieder/RankFlow</span>

<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">connection_type</span><span class="o">=</span><span class="s1">&#39;curved&#39;</span><span class="p">)</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The third option are straight connections between nodes</span>
<span class="n">viz</span> <span class="o">=</span> <span class="n">pcf</span><span class="o">.</span><span class="n">visualize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">spacing</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">maxValue</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">minValue</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">connection_type</span><span class="o">=</span><span class="s1">&#39;straight&#39;</span><span class="p">)</span>

<span class="c1"># show visualization</span>
<span class="n">viz</span>
</code></pre></div>
<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>

<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/bumatic/PyCatFlow">https://github.com/bumatic/PyCatFlow</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>backtrader库 | 简单均线买入卖出策略</title>
      <link>https://textdata.cn/blog/backtrader_demo/</link>
      <pubDate>Fri, 03 Dec 2021 20:40:10 +0600</pubDate>
      
      <guid>/blog/backtrader_demo/</guid>
      <description>忙活几年不亏不赚可还行</description>
      <content:encoded><![CDATA[<p>Backtrader是用于量化回测的python框架，作者是德国人Daniel Rodriguez。相比于zipline等量化回测平台，backtrader是一个易懂、易上手的量化投资框架，今天我们试着用Backtrader进行简单的均线买入卖出量化策略回溯，即5日均线上穿20日均线，则表示股票处于强势，买入。反之，处于弱势，卖出。</p>
<br>
<h2 id="下载">下载</h2>
<p><a href="backtrader_code.zip"><strong>点击下载本文代码数据</strong></a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install backtrader
</code></pre></div><br>
<h2 id="快速入门">快速入门</h2>
<br>
<ul>
<li>
<p><strong>买入</strong>：MA5上穿MA20， 即五日价格移动平均线(MA5)和二十日价格移动平均线(MA20)， 最近处于涨势</p>
</li>
<li>
<p><strong>卖出</strong>：MA20下穿MA5， 即五日价格移动平均线(MA5)和二十日价格移动平均线(MA20)， 最近处于涨势</p>
</li>
</ul>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">datetime</span>

<span class="kn">import</span> <span class="nn">backtrader</span> <span class="k">as</span> <span class="nn">bt</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="c1">#初始化</span>
    <span class="n">cerebro</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">Cerebro</span><span class="p">()</span>

    <span class="c1">#设定初始资金</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">setcash</span><span class="p">(</span><span class="mf">100000.0</span><span class="p">)</span>

    <span class="c1">#策略执行前的资金</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;启动资金: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()))</span>

    <span class="c1">#策略执行</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>

    <span class="c1">#策略执行前的资金</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;启动资金: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()))</span>
</code></pre></div><pre><code>启动资金: 100000.0
启动资金: 100000.0
</code></pre>
<p>每次股票交易，证券经纪人会收取一定的佣金，如万三（每一万元交易收三元）即0.003</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">setcommission</span><span class="p">(</span><span class="mf">0.003</span><span class="p">)</span>
</code></pre></div><p>交易会有最小的购买/卖出份额，一般一手100股</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cerebro</span><span class="o">.</span><span class="n">addsizer</span><span class="p">(</span><span class="n">bt</span><span class="o">.</span><span class="n">sizers</span><span class="o">.</span><span class="n">FixedSize</span><span class="p">,</span> <span class="n">stake</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="加载数据">加载数据</h2>
<ul>
<li>
<p><strong>前复权</strong>：保持当前价格不变，将历史价格进行增减，从而使股价连续。 前复权用来看盘非常方便，能一眼看出股价的历史走势，叠加各种技术指标也比较顺畅，是各种行情软件默认的复权方式。 这种方法虽然很常见，但也有两个缺陷需要注意。</p>
<ul>
<li>为了保证当前价格不变，每次股票除权除息，均需要重新调整历史价格，因此其历史价格是时变的。 这会导致在不同时点看到的历史前复权价可能出现差异。</li>
<li>对于有持续分红的公司来说，前复权价可能出现负值。</li>
</ul>
</li>
<li>
<p><strong>后复权</strong> ：保证历史价格不变，在每次股票权益事件发生后，调整当前的股票价格。 后复权价格和真实股票价格可能差别较大，不适合用来看盘。 其优点在于，可以被看作投资者的长期财富增长曲线，反映投资者的真实收益率情况。</p>
</li>
</ul>
<p>在量化投资研究中普遍采用后复权数据，使用 <a href="https://github.com/mpquant/Ashare">https://github.com/mpquant/Ashare</a> 下载的股票数据</p>
<p>Backtrader将数据集称作数据流Data Feeds, 默认数据集是yahoo的股票数据，通过以下代码即可加载:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 创建数据</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">feeds</span><span class="o">.</span><span class="n">YahooFinanceCSVData</span><span class="p">(</span>
    <span class="n">dataname</span><span class="o">=</span><span class="s1">&#39;sz000725.csv&#39;</span><span class="p">,</span>
    <span class="n">datetime</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
    <span class="nb">open</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">high</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">low</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
    <span class="n">close</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
    <span class="n">volume</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">dtformat</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">&#39;</span><span class="p">),</span>
    <span class="n">fromdate</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
    <span class="n">todate</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><br>
<h2 id="添加指标">添加指标</h2>
<p>backtrader中内置了许多计算值表，比如移动平滑线、MACD、RSI等等， 我们这一篇文章仅需要移动平均线MA， 设置方法如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="bp">self</span><span class="o">.</span><span class="n">sma5</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">indicators</span><span class="o">.</span><span class="n">MovingAverageSimple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">period</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">sma20</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">indicators</span><span class="o">.</span><span class="n">MovingAverageSimple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">period</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><p>datas[0]是第一个数据集， period是指多少天的移动平均线，比如5，则返回MA5的相关数据。</p>
<br>
<h2 id="构建策略">构建策略</h2>
<p>使用backtrader构建策略是一件很简单的事情， 继承backtrader的策略类，并重写部分方法，就能实现策略。比如</p>
<ul>
<li>重写属于我们自己的log函数</li>
<li>均线金叉死叉策略</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TestStrategy</span><span class="p">(</span><span class="n">bt</span><span class="o">.</span><span class="n">Strategy</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    继承并构建自己的策略
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">txt</span><span class="p">,</span> <span class="n">dt</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">doprint</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
        <span class="s2">&#34;日志函数，用于统一输出日志格式&#34;</span>
        <span class="k">if</span> <span class="n">doprint</span><span class="p">:</span>
            <span class="n">dt</span> <span class="o">=</span> <span class="n">dt</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1">, </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">isoformat</span><span class="p">(),</span> <span class="n">txt</span><span class="p">))</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 初始化相关数据</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dataclose</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">close</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">buyprice</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">buycomm</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="c1"># 移动平均线初始化</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sma5</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">indicators</span><span class="o">.</span><span class="n">MovingAverageSimple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">period</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sma20</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">indicators</span><span class="o">.</span><span class="n">MovingAverageSimple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">period</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">notify_order</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">order</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        订单状态处理
</span><span class="s2">        Arguments:
</span><span class="s2">            order </span><span class="si">{object}</span><span class="s2"> -- 订单状态
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="n">order</span><span class="o">.</span><span class="n">Submitted</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">Accepted</span><span class="p">]:</span>
            <span class="c1"># 如订单已被处理，则不用做任何事情</span>
            <span class="k">return</span>

        <span class="c1"># 检查订单是否完成</span>
        <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="n">order</span><span class="o">.</span><span class="n">Completed</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">isbuy</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">buyprice</span> <span class="o">=</span> <span class="n">order</span><span class="o">.</span><span class="n">executed</span><span class="o">.</span><span class="n">price</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">buycomm</span> <span class="o">=</span> <span class="n">order</span><span class="o">.</span><span class="n">executed</span><span class="o">.</span><span class="n">comm</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">bar_executed</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

        <span class="c1"># 订单因为缺少资金之类的原因被拒绝执行</span>
        <span class="k">elif</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="n">order</span><span class="o">.</span><span class="n">Canceled</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">Margin</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">Rejected</span><span class="p">]:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;Order Canceled/Margin/Rejected&#39;</span><span class="p">)</span>

        <span class="c1"># 订单状态处理完成，设为空</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">notify_trade</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">trade</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        交易成果
</span><span class="s2">        Arguments:
</span><span class="s2">            trade </span><span class="si">{object}</span><span class="s2"> -- 交易状态
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">trade</span><span class="o">.</span><span class="n">isclosed</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="c1"># 显示交易的毛利率和净利润</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;OPERATION PROFIT, GROSS </span><span class="si">{}</span><span class="s1">, NET </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">trade</span><span class="o">.</span><span class="n">pnl</span><span class="p">,</span> <span class="n">trade</span><span class="o">.</span><span class="n">pnlcomm</span><span class="p">),</span> <span class="n">doprint</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s1">&#39;&#39;&#39; 下一次执行 &#39;&#39;&#39;</span>

        <span class="c1"># 记录收盘价</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;Close, </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">dataclose</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

        <span class="c1"># 是否正在下单，如果是的话不能提交第二次订单</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">order</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="c1"># 是否已经买入</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">:</span>
            <span class="c1"># 还没买，如果 MA5 &gt; MA10 说明涨势，买入</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sma5</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">sma20</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">buy</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 已经买了，如果 MA5 &lt; MA10 ，说明跌势，卖出</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sma5</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">sma20</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sell</span><span class="p">()</span>

    <span class="c1">#def stop(self):</span>
        <span class="c1">#self.log(u&#39;(金叉死叉有用吗) Ending Value {}&#39;.format(self.broker.getvalue()), doprint=True)</span>
</code></pre></div><br>
<h2 id="策略回测">策略回测</h2>
<p>为了验证我们开头提到的策略，咱使用了 京东方sz000725 在2014年7月11日至今2021年12月3日的股票数据，将数据命名为sz000725.csv, 我们先用pandas审查下csv</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/sz000725.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   Unnamed: 0 |        date |   open |   high |   low |   close |      volume |
|---:|-------------:|------------:|-------:|-------:|------:|--------:|------------:|
|  0 |            0 | 2.01407e+07 |   2.17 |   2.2  |  2.16 |    2.19 | 7.49341e+07 |
|  1 |            1 | 2.01407e+07 |   2.18 |   2.2  |  2.17 |    2.2  | 8.10931e+07 |
|  2 |            2 | 2.01407e+07 |   2.19 |   2.21 |  2.18 |    2.2  | 8.19694e+07 |
|  3 |            3 | 2.01407e+07 |   2.2  |   2.21 |  2.19 |    2.21 | 7.96481e+07 |
|  4 |            4 | 2.01407e+07 |   2.2  |   2.21 |  2.19 |    2.21 | 8.75106e+07 |
</code></pre></div><p>在backtrader中，使用GenericCSVData函数来加载csv，需要注明日期始末、open/high/low/close/volume等字段在csv中的列数(第几列，从0开始，0表示第一列)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">backtrader</span> <span class="k">as</span> <span class="nn">bt</span>
<span class="kn">import</span> <span class="nn">datetime</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="c1"># 初始化模型</span>
    <span class="n">cerebro</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">Cerebro</span><span class="p">()</span>
    <span class="n">init_cash</span> <span class="o">=</span> <span class="mf">100000.0</span>
    <span class="n">fromdate</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
    <span class="n">todate</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="c1">#构建策略</span>
    <span class="n">strategy</span> <span class="o">=</span> <span class="n">cerebro</span><span class="o">.</span><span class="n">addstrategy</span><span class="p">(</span><span class="n">TestStrategy</span><span class="p">)</span>

    <span class="c1">#每次买100股</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">addsizer</span><span class="p">(</span><span class="n">bt</span><span class="o">.</span><span class="n">sizers</span><span class="o">.</span><span class="n">FixedSize</span><span class="p">,</span> <span class="n">stake</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

    <span class="c1">#加载数据到模型</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">feeds</span><span class="o">.</span><span class="n">GenericCSVData</span><span class="p">(</span>
        <span class="n">dataname</span><span class="o">=</span><span class="s1">&#39;data/sz000725.csv&#39;</span><span class="p">,</span>
        <span class="n">fromdate</span><span class="o">=</span><span class="n">fromdate</span><span class="p">,</span>
        <span class="n">todate</span><span class="o">=</span><span class="n">todate</span><span class="p">,</span>
        <span class="n">dtformat</span><span class="o">=</span><span class="s1">&#39;%Y%m</span><span class="si">%d</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="n">datetime</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="nb">open</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
        <span class="n">high</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
        <span class="n">low</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
        <span class="n">close</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
        <span class="n">volume</span><span class="o">=</span><span class="mi">6</span>
    <span class="p">)</span>

    <span class="n">cerebro</span><span class="o">.</span><span class="n">adddata</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># 设定初始资金和佣金</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">setcash</span><span class="p">(</span><span class="n">init_cash</span><span class="p">)</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">setcommission</span><span class="p">(</span><span class="mf">0.003</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;会不会玩了个寂寞？&#39;</span><span class="p">)</span>
    <span class="c1">#策略执行前的资金</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;启动资金: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()))</span>

    <span class="c1">#策略执行</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>

    <span class="c1">#策略结束时的资金</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;策略结束时资金: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()))</span>

    <span class="n">duration_year</span> <span class="o">=</span> <span class="p">(</span><span class="n">todate</span><span class="o">-</span><span class="n">fromdate</span><span class="p">)</span><span class="o">.</span><span class="n">days</span><span class="o">/</span><span class="mi">360</span>
    <span class="n">end_value</span> <span class="o">=</span> <span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
    <span class="n">roi</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">end_value</span><span class="o">/</span><span class="n">init_cash</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="n">duration_year</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;策略年华收益率: </span><span class="si">{}</span><span class="s1">%&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">roi</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>

</code></pre></div><pre><code>会不会玩了个寂寞？
启动资金: 100000.0
2014-08-27, OPERATION PROFIT, GROSS -3.000000000000025, NET -4.365000000000025
2014-10-28, OPERATION PROFIT, GROSS 10.999999999999988, NET 9.568999999999988
2014-11-24, OPERATION PROFIT, GROSS -4.0000000000000036, NET -5.584000000000003
2015-01-15, OPERATION PROFIT, GROSS 52.0, NET 50.242
2015-05-08, OPERATION PROFIT, GROSS 113.00000000000003, NET 110.82500000000003
2015-07-02, OPERATION PROFIT, GROSS 25.0, NET 22.075
2015-08-25, OPERATION PROFIT, GROSS -96.0, NET -98.076
2015-11-03, OPERATION PROFIT, GROSS -8.999999999999986, NET -10.760999999999985
2015-11-30, OPERATION PROFIT, GROSS -16.000000000000014, NET -17.812000000000015
2015-12-31, OPERATION PROFIT, GROSS -8.999999999999986, NET -10.820999999999986
2016-03-14, OPERATION PROFIT, GROSS -10.999999999999988, NET -12.514999999999988
2016-04-14, OPERATION PROFIT, GROSS 0.0, NET -1.548
2016-06-16, OPERATION PROFIT, GROSS -6.000000000000005, NET -7.404000000000005
2016-07-28, OPERATION PROFIT, GROSS 0.0, NET -1.404
2016-09-08, OPERATION PROFIT, GROSS 8.000000000000007, NET 6.566000000000007
2016-12-19, OPERATION PROFIT, GROSS 31.999999999999986, NET 30.421999999999986
2017-02-10, OPERATION PROFIT, GROSS 14.000000000000012, NET 12.110000000000012
2017-02-20, OPERATION PROFIT, GROSS -4.999999999999982, NET -6.940999999999982
2017-03-06, OPERATION PROFIT, GROSS -10.999999999999988, NET -12.976999999999988
2017-05-12, OPERATION PROFIT, GROSS 44.99999999999997, NET 42.86699999999997
2017-06-01, OPERATION PROFIT, GROSS -22.00000000000002, NET -24.38200000000002
2017-07-13, OPERATION PROFIT, GROSS -14.000000000000012, NET -16.406000000000013
2017-09-18, OPERATION PROFIT, GROSS -2.9999999999999805, NET -5.31899999999998
2017-11-27, OPERATION PROFIT, GROSS 153.00000000000003, NET 150.12900000000002
2018-01-08, OPERATION PROFIT, GROSS -8.000000000000007, NET -11.360000000000007
2018-02-01, OPERATION PROFIT, GROSS 2.000000000000046, NET -1.6419999999999533
2018-03-23, OPERATION PROFIT, GROSS -25.0, NET -28.303
2018-08-07, OPERATION PROFIT, GROSS -12.00000000000001, NET -14.124000000000011
2018-09-04, OPERATION PROFIT, GROSS -27.0, NET -29.115000000000002
2018-11-26, OPERATION PROFIT, GROSS -14.000000000000012, NET -15.668000000000012
2019-01-29, OPERATION PROFIT, GROSS -4.999999999999982, NET -6.598999999999982
2019-03-15, OPERATION PROFIT, GROSS 70.00000000000001, NET 67.90000000000002
2019-04-12, OPERATION PROFIT, GROSS -15.99999999999997, NET -18.35799999999997
2019-04-29, OPERATION PROFIT, GROSS -14.999999999999991, NET -17.34299999999999
2019-06-06, OPERATION PROFIT, GROSS -5.000000000000027, NET -7.043000000000027
2019-06-19, OPERATION PROFIT, GROSS 4.999999999999982, NET 2.9509999999999823
2019-08-07, OPERATION PROFIT, GROSS 36.999999999999964, NET 34.84299999999996
2019-08-30, OPERATION PROFIT, GROSS -10.999999999999988, NET -13.282999999999987
2019-09-27, OPERATION PROFIT, GROSS -41.99999999999995, NET -44.35799999999995
2020-02-04, OPERATION PROFIT, GROSS 30.00000000000003, NET 27.67200000000003
2020-03-06, OPERATION PROFIT, GROSS 9.999999999999964, NET 7.017999999999965
2020-05-28, OPERATION PROFIT, GROSS -25.0, NET -27.301000000000002
2020-07-21, OPERATION PROFIT, GROSS 54.999999999999986, NET 52.25499999999999
2020-09-14, OPERATION PROFIT, GROSS 52.999999999999936, NET 50.002999999999936
2020-10-19, OPERATION PROFIT, GROSS -5.999999999999961, NET -8.98199999999996
2020-12-10, OPERATION PROFIT, GROSS 2.000000000000046, NET -1.083999999999954
2021-02-02, OPERATION PROFIT, GROSS 66.00000000000001, NET 62.454000000000015
2021-03-03, OPERATION PROFIT, GROSS -13.000000000000078, NET -16.67500000000008
2021-03-11, OPERATION PROFIT, GROSS -33.999999999999986, NET -37.64199999999999
2021-05-12, OPERATION PROFIT, GROSS 31.00000000000005, NET 27.12700000000005
2021-07-06, OPERATION PROFIT, GROSS -33.00000000000001, NET -36.717000000000006
2021-07-26, OPERATION PROFIT, GROSS -34.999999999999964, NET -38.70499999999996
2021-09-17, OPERATION PROFIT, GROSS -21.999999999999975, NET -25.467999999999975
2021-11-22, OPERATION PROFIT, GROSS -7.000000000000028, NET -9.979000000000028
策略结束时资金: 100120.964
策略年华收益率: 0.016108152552885002%
</code></pre>
<br>
<h2 id="策略可视化">策略可视化</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">backtrader_plotting</span> <span class="kn">import</span> <span class="n">Bokeh</span>
<span class="kn">from</span> <span class="nn">backtrader_plotting.schemes</span> <span class="kn">import</span> <span class="n">Tradimo</span>

<span class="n">b</span> <span class="o">=</span> <span class="n">Bokeh</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="n">plot_mode</span><span class="o">=</span><span class="s1">&#39;single&#39;</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="n">Tradimo</span><span class="p">())</span>
<span class="n">cerebro</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/1.png" width="100%" />
    
    
</figure>


<figure >
    
        <img src="img/1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>pyjanitor数据分析清洁包</title>
      <link>https://textdata.cn/blog/pyjanitor_tutorial/</link>
      <pubDate>Thu, 25 Nov 2021 23:10:10 +0600</pubDate>
      
      <guid>/blog/pyjanitor_tutorial/</guid>
      <description>清洗数据，也简洁代码</description>
      <content:encoded><![CDATA[<ul>
<li>
<p><a href="https://pyjanitor-devs.github.io/pyjanitor/">official docs</a></p>
</li>
<li>
<p><a href="https://github.com/pyjanitor-devs/pyjanitor">github</a></p>
</li>
</ul>
<br>
<p>pyjanitor是参照R语言janitor包语法，为Python量身定制的数据清洗包,即可清洗数据，又可让代码简洁干净。</p>
<h2 id="代码下载">代码下载</h2>
<p><a href="pyjanitor_tutorial.ipynb">click to download the code</a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyjanitor</span>
</code></pre></div><br>
<h2 id="为什么用janitor">为什么用janitor？</h2>
<p>数据预处理通常由一系列步骤组成，这些步骤涉及将原始数据转换为可理解/可用的格式。这一系列的步骤需要按照一定的顺序运行才能成功。我们以基础数据文件为起点，对其执行操作，例如删除空行/空行、用其他值替换它们、添加/重命名/删除数据列、过滤行等。更正式地说，这些步骤以及它们的关系和依赖关系通常被称为有向无环图 (DAG)。</p>
<p>pandas API 对 Python 数据科学生态系统非常宝贵，它实现了方法子集的方法链作为 API 的一部分。例如，重置索引 (.reset_index())、删除空值 (.dropna()) 等都是通过适当的 pd.DataFrame 方法调用来完成的。</p>
<p>受 R 统计语言生态系统 dplyr 包的易用性和表达能力的启发，我们将 pyjanitor 开发为语法包，用于为 Pandas 用户表达数据处理 DAG。</p>
<p>为了实现这一点，我们需要调用声明式的操作 替换为允许 逻辑顺序的方法链。让我们看看下面带注释的示例。首先，这里是数据清理路径的文字描述：</p>
<ol>
<li>创建一个dataframe。</li>
<li>删除一列。</li>
<li>删除两个特定列中具有空值的行。</li>
<li>重命名另外两列。</li>
<li>添加一个新列。</li>
</ol>
<p>让我们导入一些库并从本示例的一些示例数据开始：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Libraries</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">janitor</span>

<span class="c1"># Sample Data curated for this example</span>
<span class="n">company_sales</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;SalesMonth&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Jan&#39;</span><span class="p">,</span> <span class="s1">&#39;Feb&#39;</span><span class="p">,</span> <span class="s1">&#39;Mar&#39;</span><span class="p">,</span> <span class="s1">&#39;April&#39;</span><span class="p">],</span>
    <span class="s1">&#39;Company1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">150.0</span><span class="p">,</span> <span class="mf">200.0</span><span class="p">,</span> <span class="mf">300.0</span><span class="p">,</span> <span class="mf">400.0</span><span class="p">],</span>
    <span class="s1">&#39;Company2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">180.0</span><span class="p">,</span> <span class="mf">250.0</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="mf">500.0</span><span class="p">],</span>
    <span class="s1">&#39;Company3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mf">400.0</span><span class="p">,</span> <span class="mf">500.0</span><span class="p">,</span> <span class="mf">600.0</span><span class="p">,</span> <span class="mf">675.0</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div><br>
<h2 id="常见的pandas实现方式">常见的Pandas实现方式</h2>
<p>下面是传统的Pandas方式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># The Pandas Way</span>

<span class="c1"># 1. 创建一个dataframe</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>

<span class="c1"># 2.删除一列。 Say &#39;Company1&#39;</span>
<span class="k">del</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;Company1&#39;</span><span class="p">]</span>

<span class="c1"># 3. 删除两个特定列中具有空值的行。 &#39;Company2&#39; and &#39;Company3&#39;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Company2&#39;</span><span class="p">,</span> <span class="s1">&#39;Company3&#39;</span><span class="p">])</span>

<span class="c1"># 4. 重命名另外两列。 将&#39;Company2&#39; 改为 &#39;Amazon&#39;； 将 &#39;Company3&#39; 改为 &#39;Facebook&#39;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">rename</span><span class="p">({</span><span class="s1">&#39;Company2&#39;</span><span class="p">:</span> <span class="s1">&#39;Amazon&#39;</span><span class="p">,</span>
                <span class="s1">&#39;Company3&#39;</span><span class="p">:</span> <span class="s1">&#39;Facebook&#39;</span><span class="p">},</span>
               <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># 5. 添加一个新列 &#39;Google&#39;</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Google&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">]</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><br>
<h2 id="稍微高级一点pandas实现方式">稍微高级一点Pandas实现方式</h2>
<p>稍微高级一点的用户可能会利用函数式 API：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>
    <span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="s2">&#34;Company1&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;Company2&#34;</span><span class="p">:</span> <span class="s2">&#34;Amazon&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">:</span><span class="s2">&#34;Facebook&#34;</span><span class="p">})</span>
    <span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">Google</span><span class="o">=</span><span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">])</span>
<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><br>
<h2 id="pyjanitor实现方式">PyJanitor实现方式</h2>
<p>借助pyjanitor库，我们可以使用方法名链式代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">company_sales</span><span class="p">)</span>
    <span class="o">.</span><span class="n">remove_columns</span><span class="p">([</span><span class="s1">&#39;Company1&#39;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Company3&#34;</span><span class="p">])</span>
    <span class="o">.</span><span class="n">rename_column</span><span class="p">(</span><span class="s2">&#34;Company2&#34;</span><span class="p">,</span> <span class="s2">&#34;Amazon&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">rename_column</span><span class="p">(</span><span class="s2">&#34;Company3&#34;</span><span class="p">,</span> <span class="s2">&#34;Facebook&#34;</span><span class="p">)</span>
    <span class="o">.</span><span class="n">add_column</span><span class="p">(</span><span class="s2">&#34;Google&#34;</span><span class="p">,</span> <span class="p">[</span><span class="mf">450.0</span><span class="p">,</span> <span class="mf">550.0</span><span class="p">,</span> <span class="mf">800.0</span><span class="p">])</span>

<span class="p">)</span>

<span class="n">df</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">|      | SalesMonth | Amazon | Facebook | Google |
| ---: | :--------- | -----: | -------: | -----: |
|    0 | Jan        |    180 |      400 |    450 |
|    1 | Feb        |    250 |      500 |    550 |
|    3 | April      |    500 |      675 |    800 |
</code></pre></div><p>因此，pyjanitor 的词源与“清洁度”有双重关系。 首先，它是关于使用方便的数据清理例程扩展 Pandas。 其次，它是关于为常见的 Pandas 例程提供更清晰、方法链接、基于动词的 API。</p>
<br>
<h2 id="pyjanitor更多功能">pyjanitor更多功能</h2>
<ul>
<li>清理列名（多索引是可能的！）</li>
<li>删除空行和列</li>
<li>识别重复条目</li>
<li>将列编码为分类</li>
<li>将数据拆分为特征和目标（用于机器学习）</li>
<li>添加、删除和重命名列</li>
<li>将多列合并为一列</li>
<li>日期转换（从 matlab、excel、unix）到 Python 日期时间格式</li>
<li>将具有分隔的分类值的单个列扩展为虚拟编码变量</li>
<li>基于分隔符连接和分离列</li>
<li>用于根据列上的查询过滤数据框的语法糖</li>
<li>金融、生物、化学、工程和 pyspark 的实验子模块</li>
</ul>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>科学绘图matplotlib</title>
      <link>https://textdata.cn/blog/sci_matplotlib/</link>
      <pubDate>Wed, 24 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/sci_matplotlib/</guid>
      <description>字段丰富，适合玩数据分析</description>
      <content:encoded><![CDATA[<p>Python 科学可视化领域是巨大的，由无数工具组成，从最通用和最广泛使用的工具到更专业和机密的工具。其中一些工具是基于社区的，而另一些则是由公司开发的。有些是专门为 Web 制作的，有些仅适用于桌面，有些处理 3D 和大数据，而有些则针对完美的 2D 渲染。</p>
<p>在这个图景中，Matplotlib 有着非常特别的地方。</p>
<ul>
<li>它是一个多功能且功能强大的库，可让您设计非常高质量的图形，适用于<strong>科学出版</strong>。</li>
<li>它还提供了一个简单直观的界面以及一个面向对象的架构，允许您调整图形中的任何内容。</li>
<li>最后，它可以用作常规图形库以设计非科学图形。</li>
</ul>
<br>
<h2 id="本书章节四个部分">本书章节四个部分</h2>
<ul>
<li>
<p>第一部分 Matplotlib 库的基本原理。</p>
<p>这包括回顾构成图形的不同部分、不同的坐标系、可用的比例和投影，我们还将介绍一些与排版和颜色相关的概念。</p>
</li>
<li>
<p>第二部分 图形涉及实践。</p>
<p>在介绍了一些生成更好图形的简单规则之后，我们将继续解释 Matplotlib 默认值和样式系统，然后再深入研究图形布局组织。然后我们将探索可用的不同类型的情节，看看如何用不同的元素装饰一个人物。</p>
</li>
<li>
<p>第三部分 更高级的概念</p>
<p>即 3D 图形、优化和动画。第四部分也是最后一部分是展示集合。</p>
</li>
</ul>
<br>
<h2 id="美图展览">美图展览</h2>
<p>
<figure >
    
        <img src="img/1.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/2.png" width="800" />
    
    
</figure>


<figure >
    
        <img src="img/3.png" width="800" />
    
    
</figure>
</p>
<br>
<h2 id="案例代码">案例代码</h2>

<figure >
    
        <img src="img/matplotlib.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.textpath</span> <span class="kn">import</span> <span class="n">TextPath</span>
<span class="kn">from</span> <span class="nn">matplotlib.patches</span> <span class="kn">import</span> <span class="n">PathPatch</span>
<span class="kn">from</span> <span class="nn">matplotlib.collections</span> <span class="kn">import</span> <span class="n">PolyCollection</span>
<span class="kn">from</span> <span class="nn">matplotlib.font_manager</span> <span class="kn">import</span> <span class="n">FontProperties</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">font_manager</span> <span class="k">as</span> <span class="n">fm</span><span class="p">,</span> <span class="n">rcParams</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>

<span class="c1">#更改字体，支持中文。</span>
<span class="n">prop</span> <span class="o">=</span> <span class="n">FontProperties</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s1">&#39;fonts/Alibaba-PuHuiTi-Bold.otf&#39;</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

<span class="n">red</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">233</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">255</span><span class="p">])</span> <span class="o">/</span> <span class="mi">255</span>
<span class="n">darkred</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">130</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">255</span><span class="p">])</span> <span class="o">/</span> <span class="mi">255</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mf">14.8</span> <span class="o">/</span> <span class="mf">2.54</span><span class="p">,</span> <span class="mi">21</span> <span class="o">/</span> <span class="mf">2.54</span><span class="p">))</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">add_axes</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">aspect</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">xlim</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span> <span class="n">ylim</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mf">14.2</span><span class="p">,</span> <span class="mf">14.2</span><span class="p">])</span>
<span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s2">&#34;off&#34;</span><span class="p">)</span>

<span class="c1"># Text path</span>
<span class="n">path</span> <span class="o">=</span> <span class="n">TextPath</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="s2">&#34;MATPLOTLIB库&#34;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">prop</span><span class="o">=</span><span class="n">prop</span><span class="p">)</span>

<span class="c1"># Text centering</span>
<span class="n">V</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">vertices</span>
<span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span> <span class="o">=</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">min</span><span class="p">(),</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
<span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span> <span class="o">=</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">min</span><span class="p">(),</span> <span class="n">V</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
<span class="n">V</span> <span class="o">-=</span> <span class="p">(</span><span class="n">xmin</span> <span class="o">+</span> <span class="n">xmax</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">ymin</span> <span class="o">+</span> <span class="n">ymax</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>


<span class="c1"># Compute shadow by iterating over text path segments</span>
<span class="n">polys</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">iter_segments</span><span class="p">(</span><span class="n">curves</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">MOVETO</span><span class="p">:</span>
        <span class="n">points</span> <span class="o">=</span> <span class="p">[</span><span class="n">point</span><span class="p">]</span>
    <span class="k">elif</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">LINETO</span><span class="p">:</span>
        <span class="n">points</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">code</span> <span class="o">==</span> <span class="n">path</span><span class="o">.</span><span class="n">CLOSEPOLY</span><span class="p">:</span>
        <span class="n">points</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">points</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">points</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">p0</span><span class="p">,</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
            <span class="n">polys</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p1</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">),</span> <span class="n">p0</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">)])</span>

<span class="c1"># Display shadow</span>
<span class="n">collection</span> <span class="o">=</span> <span class="n">PolyCollection</span><span class="p">(</span>
    <span class="n">polys</span><span class="p">,</span> <span class="n">closed</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="n">darkred</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=-</span><span class="mi">10</span>
<span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">add_collection</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>

<span class="c1"># Display text</span>
<span class="n">patch</span> <span class="o">=</span> <span class="n">PathPatch</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="s2">&#34;white&#34;</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">ax</span><span class="o">.</span><span class="n">add_artist</span><span class="p">(</span><span class="n">patch</span><span class="p">)</span>

<span class="c1"># Transparent gradient to fade out shadow</span>
<span class="n">I</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">200</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span> <span class="o">+</span> <span class="n">red</span>
<span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=-</span><span class="mi">20</span><span class="p">,</span> <span class="n">clip_on</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
<span class="n">I</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">I</span><span class="p">))</span>
<span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">zorder</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">clip_on</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>


<span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span>
    <span class="mf">6.5</span><span class="p">,</span>
    <span class="o">-</span><span class="mf">1.75</span><span class="p">,</span>
    <span class="s2">&#34;一个多功能的科学可视化库&#34;</span><span class="p">,</span>
    <span class="n">color</span><span class="o">=</span><span class="s2">&#34;white&#34;</span><span class="p">,</span>
    <span class="n">ha</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">,</span>
    <span class="n">va</span><span class="o">=</span><span class="s2">&#34;baseline&#34;</span><span class="p">,</span>
    <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="c1">#family=&#34;Pacifico&#34;,</span>
    <span class="n">zorder</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
    <span class="n">fontproperties</span><span class="o">=</span><span class="n">prop</span>
<span class="p">)</span>

<span class="c1"># Save and show result</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s2">&#34;text-shadow.pdf&#34;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s2">&#34;text-shadow.png&#34;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><br>
<h2 id="电子书下载">电子书下载</h2>
<p>您可以阅读 PDF（95Mo，首选站点）这本书，该书是开放访问的，托管在 HAL 上，HAL 是一个面向学术界的法国开放档案馆。最新版本也可以在 GitHub 上找到。本书的来源（包括代码示例）可在 github.com/rougier/scientific-visualization-book 上找到。</p>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hiDaDeng/DaDengAndHisPython/tree/master/matplotlib%E7%BB%98%E5%9B%BE%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87">点击下载</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Rmarkdown中调用Python代码</title>
      <link>https://textdata.cn/blog/call_python_code_in_rmarkdown/</link>
      <pubDate>Tue, 23 Nov 2021 18:40:10 +0600</pubDate>
      
      <guid>/blog/call_python_code_in_rmarkdown/</guid>
      <description>左手R，右手Python！</description>
      <content:encoded><![CDATA[<h1 id="rpy2简介">rpy2简介</h1>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E5%9C%A8Rmarkdown%E4%B8%AD%E8%B0%83%E7%94%A8Python%E4%BB%A3%E7%A0%81.zip">点击下载文本</a></p>
<br>
<p>Python和R是一对数据科学两大语言，在互联互通的路上，我感觉R更加的积极。还记得之前 <strong>Python中调用R的库-rpy2</strong>， 在Python使用R语言语法还是有些不自然。在R中调用Python体验十分棒，一起跟我看看吧。</p>
<p>reticulate包是可以让R语言非常流畅自然联通Python的关键。</p>
<p><strong>Rmarkdown预备知识</strong></p>
<p>Rmarkdown很像jupyter notbeook和markdown的结合。</p>
<ul>
<li>代码块</li>
<li>markdon文本</li>
</ul>
<br>
<h2 id="代码块">代码块</h2>
<p>在Rmarkdown中的代码块的开始都是以三引号、{}和语言名为标志，以三引号结尾。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">library(ggplot2)
ggplot(mpg, aes(x=displ, y=cty))+
  geom_point()
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">ggplot</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">displ</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">cty</span><span class="p">))</span><span class="o">+</span>
  <span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/unnamed-chunk-1-1.png" width="100%" />
    
    
</figure>

<p>后面设置好reticulate包后，就可以在Rmarkdown中使用python代码块，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import pandas as pd
df = pd.read_csv(&#39;test.csv&#39;)
df.head()
</code></pre></div><br>
<h2 id="markdown文本">markdown文本</h2>
<p>文本部分全部支持markdown语法，这里不做赘述。</p>
<h2 id="安装rpy">安装rpy</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">install.packages(&#34;reticulate&#34;)
</code></pre></div><h2 id="环境设置">环境设置</h2>
<p>当我们在R代码块中设置好Python环境，就可以在Rmarkdown中跑Python代码。</p>
<br>
<h2 id="查询python">查询Python</h2>
<p>首先我们需要知道Python安装路径，可以在<strong>命令行</strong>中逐行执行下面代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">python3
import sys
sys.executable
</code></pre></div><p>我的mac电脑的Python安装路径为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/Library/Frameworks/Python.framework/Versions/3.7/bin/python3
</code></pre></div><br>
<h2 id="指定python">指定Python</h2>
<p>执行下方的代码(路径改为自己的Python安装路径)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="err">##</span> <span class="nx">Warning</span><span class="p">:</span> <span class="kn">package</span> <span class="err">&#39;</span><span class="nx">reticulate</span><span class="err">&#39;</span> <span class="nx">was</span> <span class="nx">built</span> <span class="nx">under</span> <span class="nx">R</span> <span class="nx">version</span> <span class="mf">3.6.2</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">use_python</span><span class="p">(</span><span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/bin/python3&#39;</span><span class="p">)</span>
</code></pre></div><p>执行代码后，我们就可以愉快的使用Python代码</p>
<br>
<h1 id="运行python代码">运行Python代码</h1>
<p>在Rmarkdown中写Python代码块</p>
<h2 id="作图">作图</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span> 
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span> 
<span class="c1"># 计算正弦曲线上点的 x 和 y 坐标</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span>  <span class="mi">3</span>  <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span>  <span class="mf">0.1</span><span class="p">)</span> 
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;sine wave form&#34;</span><span class="p">)</span>  
<span class="c1"># 使用 matplotlib 来绘制点</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> 
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/unnamed-chunk-3-1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="读取csv">读取csv</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;test.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;gbk&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">##      birthday   name               text  age  gender  height  weight
## 0  1985/10/08  Alice  我很开心，每天都这么快乐，我很幸福   35  female     175      55
## 1    95.07.07   Mary               我很难过   25  female     165      50
## 2    01-11-10   Mike              唉，真难受   19    male     180      75
## 3      90/2/8  Smith          无所谓开心还是难过   30    male     175      70
## 4      93-1-5  Henry          每天赚一万，真爽！   27    male     185      80
</code></pre></div><p>返回的df是Python对象，我们可以看到表格不好看，这是R中的Python对象。</p>
<br>
<h2 id="在r代码块中调用python变量对象">在R代码块中调用Python变量(对象)</h2>
<p>刚刚讲的都是在Rmakdown中运行Python代码块，并不是在R代码块中运行Python代码或者调用Python变量。</p>
<h3 id="pypython_variable_name">py$python_variable_name</h3>
<p>R代码块中调用Python方法</p>
<p>py$python_variable_name</p>
<ul>
<li>py相当于Python中的对象</li>
<li>$ 相当于Python中的<strong>点</strong></li>
<li>python_variable_name 是Python代码块中的变量名</li>
</ul>
<p>比如在上文中Python的变量df，在R中调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="n">py</span><span class="o">$</span><span class="n">df</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="100%" />
    
    
</figure>

<p>现在调用Python对象df时，R会默认将其转为R对象，所以内容一样，样式似乎变好看了。</p>
<h3 id="r代码块中导入python库">R代码块中导入Python库</h3>
<p>使用os库的listdir函数查询当前项目文件夹内的文件列表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>

<span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [&#39;reticulate学习.md&#39;, &#39;test.csv&#39;, &#39;test.py&#39;, &#39;reticulate学习.html&#39;, &#39;reticulate学习_files&#39;, &#39;reticulate.pdf&#39;, &#39;reticulate学习.Rmd&#39;, &#39;data.py&#39;]
</code></pre></div><p>在R代码块中实现上方的Python功能，如下，很简单</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>

<span class="c1">#导入库</span>
<span class="n">os</span> <span class="o">&lt;-</span> <span class="nf">import</span><span class="p">(</span><span class="s">&#34;os&#34;</span><span class="p">)</span>

<span class="c1">#os库的listdir函数</span>
<span class="n">os</span><span class="o">$</span><span class="nf">listdir</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;reticulate学习.md&#34;    &#34;test.csv&#34;             &#34;test.py&#34;             
## [4] &#34;reticulate学习.html&#34;  &#34;reticulate学习_files&#34; &#34;reticulate.pdf&#34;      
## [7] &#34;reticulate学习.Rmd&#34;   &#34;data.py&#34;
</code></pre></div><p>可以发现</p>
<ul>
<li><code>import(&quot;os)</code>代替了<code>import os</code></li>
<li><code>$</code>代替了<code>.</code></li>
<li><code>&lt;-</code> 代替了 <code>=</code></li>
</ul>
<p>再熟悉一下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
<span class="n">pd</span> <span class="o">&lt;-</span> <span class="nf">import</span><span class="p">(</span><span class="s">&#34;pandas&#34;</span><span class="p">)</span>
<span class="n">df2</span> <span class="o">&lt;-</span> <span class="n">pd</span><span class="o">$</span><span class="nf">read_csv</span><span class="p">(</span><span class="s">&#34;test.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#34;gbk&#34;</span><span class="p">)</span>
<span class="n">df2</span>
</code></pre></div>
<figure >
    
        <img src="img/df2.png" width="100%" />
    
    
</figure>

<p>需要注意的是，在R代码块中执行Python代码时，默认会将Python对象转为R对象。</p>
<h3 id="source_python">source_python()</h3>
<p>使用reticulate包中的source_python(&lsquo;py文件路径&rsquo;)可以导入py文件中的变量，这样就可以在R代码块中使用外部变量。例如我在data.py中准备A和B两个字符串</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">A = &#39;我是张三,&#39;
B = &#39;来自河北&#39;
</code></pre></div><p>在R代码块中运行data.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>

<span class="nf">source_python</span><span class="p">(</span><span class="s">&#34;data.py&#34;</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;我是张三,&#34;
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">print</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;来自河北&#34;
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">paste0</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## [1] &#34;我是张三,来自河北&#34;
</code></pre></div><h2 id="py_run_file">py_run_file()</h2>
<p>在R代码块中运行项目文件夹中的test.py文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="nf">library</span><span class="p">(</span><span class="n">reticulate</span><span class="p">)</span>
<span class="nf">py_run_file</span><span class="p">(</span><span class="s">&#34;test.py&#34;</span><span class="p">)</span>
</code></pre></div><h1 id="数据类型对比">数据类型对比</h1>
<table>
<thead>
<tr>
<th>R</th>
<th>Python</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td>Single-element vector</td>
<td>Scalar</td>
<td><code>1</code>, <code>1L</code>, <code>TRUE</code>, <code>&quot;foo&quot;</code></td>
</tr>
<tr>
<td>Multi-element vector</td>
<td>List</td>
<td><code>c(1.0, 2.0, 3.0)</code>, <code>c(1L, 2L, 3L)</code></td>
</tr>
<tr>
<td>List of multiple types</td>
<td>Tuple</td>
<td><code>list(1L, TRUE, &quot;foo&quot;)</code></td>
</tr>
<tr>
<td>Named list</td>
<td>Dict</td>
<td><code>list(a = 1L, b = 2.0)</code>, <code>dict(x = x_data)</code></td>
</tr>
<tr>
<td>Matrix/Array</td>
<td>NumPy ndarray</td>
<td><code>matrix(c(1,2,3,4), nrow = 2, ncol = 2)</code></td>
</tr>
<tr>
<td>Data Frame</td>
<td>Pandas DataFrame</td>
<td><code>data.frame(x = c(1,2,3), y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</code></td>
</tr>
<tr>
<td>Function</td>
<td>Python function</td>
<td><code>function(x) x + 1</code></td>
</tr>
<tr>
<td>NULL, TRUE, FALSE</td>
<td>None, True, False</td>
<td><code>NULL</code>, <code>TRUE</code>, <code>FALSE</code></td>
</tr>
</tbody>
</table>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>plotnine绘图 | python的ggplot2语法绘图包</title>
      <link>https://textdata.cn/blog/plotnine/</link>
      <pubDate>Tue, 23 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/plotnine/</guid>
      <description>ggplot2语法，三行代码绘图</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/plotnine%E5%8C%85%E5%AD%A6%E4%B9%A0-Python%E7%89%88%E7%9A%84ggplot2.ipynb">点击跳转到下载链接页面</a></p>
<br>
<p>R语言的ggplot2绘图能力超强，python虽有matplotlib，但是语法臃肿，使用复杂，入门极难，seaborn的出现稍微改善了matplotlib代码量问题，但是定制化程度依然需要借助matplotlib，使用难度依然很大。</p>
<p>好消息是python中有一个plotnine包，可以实现绝大多数ggplot2的绘图功能，两者语法十分相似，R和Python的语法转换成本大大降低。</p>
<ul>
<li>plotnine文档
<a href="https://plotnine.readthedocs.io/en/latest/">https://plotnine.readthedocs.io/en/latest/</a></li>
<li>R语言ggplot2文档
<a href="https://ggplot2.tidyverse.org/reference/index.html">https://ggplot2.tidyverse.org/reference/index.html</a></li>
</ul>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">plotnine</span>

</code></pre></div><h2 id="准备数据">准备数据</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine.data</span> <span class="kn">import</span> <span class="n">mpg</span>

<span class="c1">#dataframe</span>
<span class="n">mpg</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">manufacturer</th>
<th style="text-align:left">model</th>
<th style="text-align:right">displ</th>
<th style="text-align:right">year</th>
<th style="text-align:right">cyl</th>
<th style="text-align:left">trans</th>
<th style="text-align:left">drv</th>
<th style="text-align:right">cty</th>
<th style="text-align:right">hwy</th>
<th style="text-align:left">fl</th>
<th style="text-align:left">class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">1.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">4</td>
<td style="text-align:left">auto(l5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">18</td>
<td style="text-align:right">29</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">1.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">4</td>
<td style="text-align:left">manual(m5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">21</td>
<td style="text-align:right">29</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2008</td>
<td style="text-align:right">4</td>
<td style="text-align:left">manual(m6)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">20</td>
<td style="text-align:right">31</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2008</td>
<td style="text-align:right">4</td>
<td style="text-align:left">auto(av)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">21</td>
<td style="text-align:right">30</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">audi</td>
<td style="text-align:left">a4</td>
<td style="text-align:right">2.8</td>
<td style="text-align:right">1999</td>
<td style="text-align:right">6</td>
<td style="text-align:left">auto(l5)</td>
<td style="text-align:left">f</td>
<td style="text-align:right">16</td>
<td style="text-align:right">26</td>
<td style="text-align:left">p</td>
<td style="text-align:left">compact</td>
</tr>
</tbody>
</table>
<h2 id="快速作图qplot">快速作图qplot</h2>
<p>我们先直接看最简单好用的快速作图函数qplot(x, y, data)</p>
<ul>
<li>横坐标displ</li>
<li>纵坐标cty</li>
<li>数据mpg</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">qplot</span>

<span class="n">qplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> 
      <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">,</span>
      <span class="n">data</span><span class="o">=</span><span class="n">mpg</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_6_0.png" width="800" />
    
    
</figure>

<h2 id="ggplot图层">ggplot图层</h2>
<p>qplot是快速作图函数，如果想让图更好看，进行私人订制，那么我们需要进行图层设计</p>
<p>首先设置ggplot图层（相当于买了一个高级画布），</p>
<ul>
<li>数据mpg</li>
<li>横坐标x轴为displ</li>
<li>纵坐标y轴cty</li>
</ul>
<p>在plotnine中，变量所对应的数据均可通过字段名调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">geom_point</span><span class="p">,</span> <span class="n">aes</span>

<span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_8_0.png" width="800" />
    
    
</figure>

<h2 id="图层叠加">图层叠加</h2>
<p>我们可以看到，已经绘制出一个空的ggplot图层，x轴为displ，y轴为cty。</p>
<p>接下来我们给这个图层上加上数据对应的散点，使用geom_point()直接追加在ggplot图层之上即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_10_0.png" width="800" />
    
    
</figure>

<h2 id="color">color</h2>
<p>在上图中，散点是没有区分每辆车的气缸数cyl。</p>
<p>在geom_point()中，我们可以按照气缸数cyl分门别类，按照颜色显示出来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;cyl&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_12_0.png" width="800" />
    
    
</figure>

<p>上图挺好看的，有时候需要绘制的字段是离散型数值，但是上色后可能不够明显，需要声明该字段为离散型。这时候用factor()来告诉plotnine，这个字段是离散型数值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;factor(cyl)&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_14_0.png" width="800" />
    
    
</figure>

<h2 id="size">size</h2>
<p>有时候为了增加可视化显示的维度数，还可以考虑加入点的大小size</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
 <span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="s1">&#39;hwy&#39;</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_16_0.png" width="800" />
    
    
</figure>

<h2 id="梯度色">梯度色</h2>
<p>如果你想自己设置颜色的梯度，可以通过scale_color_gradient设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">scale_color_gradient</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;displ&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;cty&#39;</span><span class="p">),</span> <span class="n">mpg</span><span class="p">)</span>
<span class="o">+</span> <span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;hwy&#39;</span><span class="p">))</span>
<span class="o">+</span> <span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_18_0.png" width="800" />
    
    
</figure>

<h2 id="条形图">条形图</h2>
<p>plotnine中可绘制的图有很多，刚刚已经讲了散点图，接下来我们看看plotnine中的条形图。</p>
<p>首先准备一下数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;variable&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">],</span>
    <span class="s1">&#39;category&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;Female&#39;</span><span class="p">,</span> <span class="s1">&#39;Male&#39;</span><span class="p">,</span> <span class="s1">&#39;1-24&#39;</span><span class="p">,</span> <span class="s1">&#39;25-54&#39;</span><span class="p">,</span> <span class="s1">&#39;55+&#39;</span><span class="p">,</span> <span class="s1">&#39;Lo&#39;</span><span class="p">,</span> <span class="s1">&#39;Lo-Med&#39;</span><span class="p">,</span> <span class="s1">&#39;Med&#39;</span><span class="p">,</span> <span class="s1">&#39;High&#39;</span><span class="p">],</span>
    <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">40</span><span class="p">],</span>
<span class="p">})</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Categorical</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;variable&#39;</span><span class="p">],</span> <span class="n">categories</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;income&#39;</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Categorical</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">],</span> <span class="n">categories</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">])</span>

<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">variable</th>
<th style="text-align:left">category</th>
<th style="text-align:right">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">gender</td>
<td style="text-align:left">Female</td>
<td style="text-align:right">60</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">gender</td>
<td style="text-align:left">Male</td>
<td style="text-align:right">40</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">age</td>
<td style="text-align:left">1-24</td>
<td style="text-align:right">50</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">age</td>
<td style="text-align:left">25-54</td>
<td style="text-align:right">30</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">age</td>
<td style="text-align:left">55+</td>
<td style="text-align:right">20</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Lo</td>
<td style="text-align:right">10</td>
</tr>
<tr>
<td style="text-align:right">6</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Lo-Med</td>
<td style="text-align:right">25</td>
</tr>
<tr>
<td style="text-align:right">7</td>
<td style="text-align:left">income</td>
<td style="text-align:left">Med</td>
<td style="text-align:right">25</td>
</tr>
<tr>
<td style="text-align:right">8</td>
<td style="text-align:left">income</td>
<td style="text-align:left">High</td>
<td style="text-align:right">40</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">aes</span><span class="p">,</span> <span class="n">geom_text</span><span class="p">,</span> <span class="n">position_dodge</span><span class="p">,</span> <span class="n">geom_point</span>

<span class="c1">#调整文本位置</span>
<span class="n">dodge_text</span> <span class="o">=</span> <span class="n">position_dodge</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">0.9</span><span class="p">)</span>                              <span class="c1"># new</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">,</span> 
                <span class="n">y</span><span class="o">=</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> 
                <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;category&#39;</span><span class="p">))</span> <span class="c1">#类别填充颜色</span>
 <span class="o">+</span> <span class="n">geom_col</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="s1">&#39;dodge&#39;</span><span class="p">,</span> 
            <span class="n">show_legend</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>   <span class="c1"># modified</span>
 <span class="o">+</span> <span class="n">geom_text</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="o">=-</span><span class="mf">.5</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;category&#39;</span><span class="p">),</span>                          <span class="c1"># new</span>
             <span class="n">position</span><span class="o">=</span><span class="n">dodge_text</span><span class="p">,</span>
             <span class="n">color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span>  <span class="c1">#文本颜色</span>
             <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>   <span class="c1">#字号</span>
             <span class="n">angle</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="c1">#文本的角度</span>
             <span class="n">va</span><span class="o">=</span><span class="s1">&#39;top&#39;</span><span class="p">)</span>
    
 <span class="o">+</span> <span class="n">lims</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>                                                 <span class="c1"># new</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_22_0.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine.data</span> <span class="kn">import</span> <span class="n">economics_long</span>

<span class="n">economics_long</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">date</th>
<th style="text-align:left">variable</th>
<th style="text-align:right">value</th>
<th style="text-align:right">value01</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">1967-07-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">507.4</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">1967-08-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">510.5</td>
<td style="text-align:right">0.000266001</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">1967-09-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">516.3</td>
<td style="text-align:right">0.00076368</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">1967-10-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">512.9</td>
<td style="text-align:right">0.000471937</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">1967-11-01 00:00:00</td>
<td style="text-align:left">pce</td>
<td style="text-align:right">518.1</td>
<td style="text-align:right">0.000918132</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">aes</span><span class="p">,</span> <span class="n">geom_line</span>

<span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">economics_long</span><span class="p">,</span> <span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;value01&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;variable&#39;</span><span class="p">))</span>
 <span class="o">+</span> <span class="n">geom_line</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_25_0.png" width="800" />
    
    
</figure>

<p>plotnine目前已经支持绝大多数ggplot2，但是文档方面没有ggplot2全，所以学习plotnine时可以参考ggplot2。</p>
<ul>
<li>plotnine文档
<a href="https://plotnine.readthedocs.io/en/latest/">https://plotnine.readthedocs.io/en/latest/</a></li>
<li>R语言ggplot2文档
<a href="https://ggplot2.tidyverse.org/reference/index.html">https://ggplot2.tidyverse.org/reference/index.html</a></li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据分析plydata库</title>
      <link>https://textdata.cn/blog/plydata/</link>
      <pubDate>Mon, 22 Nov 2021 22:40:10 +0600</pubDate>
      
      <guid>/blog/plydata/</guid>
      <description>让数据分析的代码更简洁</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90plydata%E5%BA%93%E5%AD%A6%E4%B9%A0.zip">https://github.com/hidadeng/DaDengAndHisPython/blob/master/数据分析plydata库学习.zip</a></p>
<p>plydata是一个提供数据处理语法的Python库，借鉴了R语言dplyr，tidyr和forcats等包中的管道操作符。</p>
<p>plydata使用 <code>&gt;&gt;运算符</code> 作为管道符号，或者使用<code>ply（data，* verbs）</code>函数代替 <code>&gt;&gt;</code>， 目前仅支持对pandas.DataFrame数据进行操作。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">plydata</span>
</code></pre></div><h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">plydata</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="n">if_else</span><span class="p">,</span> <span class="n">ply</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;zero&#39;</span><span class="p">,</span> <span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">]})</span>

<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
</tr>
</tbody>
</table>
<h2 id="define">define</h2>
<p>define函数名很简单，定义变量或者操作变量。</p>
<p><code>define(data, *args,**kwargs)</code></p>
<ul>
<li>data 待操作的dataframe数据</li>
<li>args、kwargs 操作过程及结果。</li>
</ul>
<p>比如我们想在df中新建一个z列，z列的值完全复制自x列。可以使用代码 define(df, z=&lsquo;x&rsquo;)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">define</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<p><strong>注意:</strong> df中有x列，所以这里的使用的&rsquo;x',而不是x。</p>
<h2 id="管道符">&raquo;管道符</h2>
<p>刚刚的问题可以使用管道符实现与define(df, z=&lsquo;x&rsquo;)相同的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于df[&#39;z&#39;]=df[&#39;x&#39;]</span>
<span class="c1">#等同于define(df, z=&#39;x&#39;)</span>
<span class="n">df</span> <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<p>如果有多个环节，可以用括号包裹住，环节与环节用<code>&gt;&gt;</code>和<code>换行</code>前后衔接。</p>
<p>比如我们有多个操作，每一步操作如下</p>
<ol>
<li><code>m=2x</code></li>
<li><code>n=m*m</code></li>
<li><code>q=m+n</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="s1">&#39;2*x&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="s1">&#39;m*m&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="s1">&#39;m+n&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">m</th>
<th style="text-align:right">n</th>
<th style="text-align:right">q</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">4</td>
<td style="text-align:right">16</td>
<td style="text-align:right">20</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">6</td>
<td style="text-align:right">36</td>
<td style="text-align:right">42</td>
</tr>
</tbody>
</table>
<p>上面所有的plydata相关操作不会修改原始数据df</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
</tr>
</tbody>
</table>
<h2 id="if_else">if_else</h2>
<p>在df中新建z列，z的值满足</p>
<ul>
<li>当x大于1，z为1</li>
<li>当x小于等于1， z为0</li>
</ul>
<p>使用if_else(predicate, true_value, false_value)</p>
<ul>
<li>predicate 逻辑判断条件字符串</li>
<li>true_value 满足逻辑条件返回的值</li>
<li>false_value 不满足逻辑条件返回的值</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于define(df, z=if_else(&#39;x&gt;1&#39;, 1, 0))</span>
<span class="n">df</span> <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:left">zero</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">one</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="query">query</h2>
<p>query(data, expr)</p>
<ul>
<li>data 待查询的dataframe数据</li>
<li>expr  查询条件字符串</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z==1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="ply">ply()</h2>
<p>ply功能等同于管道符&raquo;， 刚刚上面的代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x&gt;1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z==1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>可以用ply</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">ply</span><span class="p">(</span><span class="n">df</span><span class="p">,</span>
    <span class="n">define</span><span class="p">(</span><span class="n">z</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;x &gt; 1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)),</span>
    <span class="n">query</span><span class="p">(</span><span class="s1">&#39;z == 1&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">x</th>
<th style="text-align:left">y</th>
<th style="text-align:right">z</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">two</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">three</td>
<td style="text-align:right">1</td>
</tr>
</tbody>
</table>
<h2 id="plydata与plotnine">plydata与plotnine</h2>
<p>在R语言中，用ggplot2作图经常会用到管道符。而在Python中，plydata提供管道符，可以与作图库plotnine结合使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plotnine</span> <span class="kn">import</span> <span class="n">ggplot</span><span class="p">,</span> <span class="n">geom_line</span><span class="p">,</span> <span class="n">aes</span>
<span class="kn">from</span> <span class="nn">plydata</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">if_else</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="mi">500</span><span class="p">)})</span>
<span class="p">(</span><span class="n">df</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s1">&#39;np.sin(x)&#39;</span><span class="p">)</span> 
 <span class="o">&gt;&gt;</span> <span class="n">define</span><span class="p">(</span><span class="n">sign</span><span class="o">=</span><span class="n">if_else</span><span class="p">(</span><span class="s1">&#39;y&gt;=0&#39;</span><span class="p">,</span> <span class="s1">&#39;&#34;pos&#34;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#34;neg&#34;&#39;</span><span class="p">))</span> 
 <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> 
                <span class="n">y</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> 
                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;sign&#39;</span><span class="p">))</span><span class="o">+</span>
     <span class="n">geom_line</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mf">1.5</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="output_27_0.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>rpy2包 | 在Jupyter中调用R语言的代码</title>
      <link>https://textdata.cn/blog/call_r_language_code_in_jupyter/</link>
      <pubDate>Mon, 22 Nov 2021 17:40:10 +0600</pubDate>
      
      <guid>/blog/call_r_language_code_in_jupyter/</guid>
      <description>文本数据分析利器Python和R语言！</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E5%9C%A8jupyter%E4%B8%AD%E8%B0%83%E7%94%A8R%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81.zip">点击下载</a></p>
<br>
<p>在数据分析中，Python和R各有千秋，虽然Python或R都能在数据分析打通关，从采集、清洗(预处理)、分析、可视化，但是在不同的环节，不同的语言易用程度不同。Python胜在干脏活累活，诸如数据采集、数据清洗、机器学习等；而R语言胜在统计分析、可视化等。所以，如果你正好Python和R都入门了，可以考虑两者结合。那么就会遇到今天的问题-<strong>如何在jupyter中使用R语言代码？</strong></p>
<h2 id="rpy2包">rpy2包</h2>
<p>rpy2包首先是Python包，ta衔接了Python和R，通过rpy2可以运行R语言相关代码、函数、包。</p>
<p>在Jupyter notebook中主要有两种情况</p>
<ol>
<li>单元格中以Python为主，可以插入<strong>R的代码字符串</strong></li>
<li>单个的单元格要么只有<strong>R代码</strong>，要么只有<strong>Python代码</strong></li>
</ol>
<p>遇到这类问题，各位的电脑要确保</p>
<ol>
<li>电脑已经安装了Python和R</li>
<li>已安装rpy2包</li>
</ol>
<p>安装rpy2包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">rpy2</span>

</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="c1">#R代码运行会尽量以DataFrame显示</span>
<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#运行R代码</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="s1">&#39;R代码字符串&#39;</span><span class="p">)</span>
</code></pre></div><h2 id="运行r代码">运行R代码</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">rpy2</span><span class="o">.</span><span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="s1">&#39;R代码字符串&#39;</span><span class="p">)</span>

</code></pre></div><p>rpy2.robjects.r()函数会识别 <strong>R代码字符串</strong>, 并将其执行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>
<span class="kn">import</span> <span class="nn">warnings</span> 
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="c1">#直接声明，data frame强制转为DataFrame</span>
<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#R代码</span>
<span class="n">r_code</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">library(dplyr)
</span><span class="s2">
</span><span class="s2">text &lt;- c(&#34;Because I could not stop for Death -&#34;,
</span><span class="s2">          &#34;He kindly stopped for me -&#34;,
</span><span class="s2">          &#34;The Carriage held but just Ourselves -&#34;,
</span><span class="s2">          &#34;and Immortality&#34;)
</span><span class="s2">          
</span><span class="s2">text_df &lt;- tibble(docid=1:4, text=text)
</span><span class="s2">text_df
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="c1">#运行R代码</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">(</span><span class="n">r_code</span><span class="p">)</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">docid</th>
<th style="text-align:left">text</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:left">Because I could not stop for Death -</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:left">He kindly stopped for me -</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3</td>
<td style="text-align:left">The Carriage held but just Ourselves -</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
<td style="text-align:left">and Immortality</td>
</tr>
</tbody>
</table>
<ol>
<li>准备一个R代码r_code，该代码会生成R语言的tibble数据类型(R语言中的一种data frame)。</li>
<li>robjects.r(r_code) 运行R代码(字符串)</li>
<li>在本例中，使用pandas2ri.activate()强制声明，在Python中将变量text_df以pandas.DataFrame显示</li>
</ol>
<h2 id="调用r数据集">调用R数据集</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">rpy2.robjects.r.data(&#39;R的数据集名&#39;)
</code></pre></div><p>调用R的数据集</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
</code></pre></div><ul>
<li>robjects.r.data(&lsquo;R数据集名&rsquo;) 准备R数据集，此时Python并没有显示该数据集，可以理解为准备数据</li>
<li><code>robjects.r['R数据集名']</code> 导入R的数据集</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">rpy2.robjects</span> <span class="k">as</span> <span class="nn">robjects</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#准备iris</span>
<span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">data</span><span class="p">(</span><span class="s1">&#39;iris&#39;</span><span class="p">)</span>
<span class="c1">#导入iris</span>
<span class="n">iris</span> <span class="o">=</span> <span class="n">robjects</span><span class="o">.</span><span class="n">r</span><span class="p">[</span><span class="s1">&#39;iris&#39;</span><span class="p">]</span>
<span class="n">iris</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">Sepal.Length</th>
<th style="text-align:right">Sepal.Width</th>
<th style="text-align:right">Petal.Length</th>
<th style="text-align:right">Petal.Width</th>
<th style="text-align:left">Species</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">5.1</td>
<td style="text-align:right">3.5</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">4.9</td>
<td style="text-align:right">3</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">4.7</td>
<td style="text-align:right">3.2</td>
<td style="text-align:right">1.3</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">4.6</td>
<td style="text-align:right">3.1</td>
<td style="text-align:right">1.5</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3.6</td>
<td style="text-align:right">1.4</td>
<td style="text-align:right">0.2</td>
<td style="text-align:left">setosa</td>
</tr>
</tbody>
</table>
<h2 id="调用r语言包">调用R语言包</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">rpy2</span><span class="o">.</span><span class="n">robjects</span><span class="o">.</span><span class="n">packages</span><span class="o">.</span><span class="n">importr</span><span class="p">(</span><span class="s1">&#39;R包名&#39;</span><span class="p">)</span>
</code></pre></div><p>R语言中的readr包有read_csv()函数，可以读取csv文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">rpy2.robjects.packages</span> <span class="kn">import</span> <span class="n">importr</span>
<span class="kn">from</span> <span class="nn">rpy2.robjects</span> <span class="kn">import</span> <span class="n">pandas2ri</span>

<span class="n">pandas2ri</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>

<span class="c1">#导入R语言中的readr包</span>
<span class="n">readr</span> <span class="o">=</span> <span class="n">importr</span><span class="p">(</span><span class="s2">&#34;readr&#34;</span><span class="p">)</span>
<span class="c1">#使用readr包中的read_csv()函数</span>
<span class="n">mtcars</span> <span class="o">=</span> <span class="n">readr</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;mtcars.csv&#34;</span><span class="p">)</span>
<span class="n">mtcars</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">car</th>
<th style="text-align:right">mpg</th>
<th style="text-align:right">cyl</th>
<th style="text-align:right">disp</th>
<th style="text-align:right">hp</th>
<th style="text-align:right">drat</th>
<th style="text-align:right">wt</th>
<th style="text-align:right">qsec</th>
<th style="text-align:right">vs</th>
<th style="text-align:right">am</th>
<th style="text-align:right">gear</th>
<th style="text-align:right">carb</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">Mazda RX4</td>
<td style="text-align:right">21</td>
<td style="text-align:right">6</td>
<td style="text-align:right">160</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.9</td>
<td style="text-align:right">2.62</td>
<td style="text-align:right">16.46</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">Mazda RX4 Wag</td>
<td style="text-align:right">21</td>
<td style="text-align:right">6</td>
<td style="text-align:right">160</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.9</td>
<td style="text-align:right">2.875</td>
<td style="text-align:right">17.02</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">Datsun 710</td>
<td style="text-align:right">22.8</td>
<td style="text-align:right">4</td>
<td style="text-align:right">108</td>
<td style="text-align:right">93</td>
<td style="text-align:right">3.85</td>
<td style="text-align:right">2.32</td>
<td style="text-align:right">18.61</td>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:right">4</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">Hornet 4 Drive</td>
<td style="text-align:right">21.4</td>
<td style="text-align:right">6</td>
<td style="text-align:right">258</td>
<td style="text-align:right">110</td>
<td style="text-align:right">3.08</td>
<td style="text-align:right">3.215</td>
<td style="text-align:right">19.44</td>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">Hornet Sportabout</td>
<td style="text-align:right">18.7</td>
<td style="text-align:right">8</td>
<td style="text-align:right">360</td>
<td style="text-align:right">175</td>
<td style="text-align:right">3.15</td>
<td style="text-align:right">3.44</td>
<td style="text-align:right">17.02</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
</tr>
</tbody>
</table>
<h2 id="cell只运行r代码">Cell只运行R代码</h2>
<p>上面的几个章节中，每个cell中代码均为Python和R的混用，如果在Cell中只运行R代码，</p>
<ol>
<li>可以先单独在一个cell中运行 <code>%load_ext rpy2.ipython</code>,</li>
<li>在另外一个cell中使用<code>%%R</code>声明本cell中使用的是R代码。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">%</span><span class="n">load_ext</span> <span class="n">rpy2</span><span class="o">.</span><span class="n">ipython</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="o">%%</span><span class="n">R</span>

<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>

<span class="nf">ggplot</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">Sepal.Length</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="n">Sepal.Width</span><span class="p">,</span> 
                 <span class="n">color</span><span class="o">=</span><span class="n">Species</span><span class="p">))</span><span class="o">+</span>
<span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="output_17_0.png" width="100%" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-r" data-lang="r"><span class="o">%%</span><span class="n">R</span> <span class="o">-</span><span class="n">h</span> <span class="m">550</span> <span class="o">-</span><span class="n">w</span> <span class="m">800</span>  <span class="c1">#设置宽、高</span>

<span class="nf">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>

<span class="nf">ggplot</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span> <span class="nf">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">Sepal.Length</span><span class="p">,</span> 
                 <span class="n">y</span><span class="o">=</span><span class="n">Sepal.Width</span><span class="p">,</span> 
                 <span class="n">color</span><span class="o">=</span><span class="n">Species</span><span class="p">))</span><span class="o">+</span>
<span class="nf">geom_point</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="output_18_0.png" width="100%" />
    
    
</figure>

<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用pandas_bokeh做可视化</title>
      <link>https://textdata.cn/blog/pandas_bokeh_vis/</link>
      <pubDate>Thu, 18 Nov 2021 17:40:10 +0600</pubDate>
      
      <guid>/blog/pandas_bokeh_vis/</guid>
      <description>简洁数据可视化</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96pandas_bokeh.zip">点击下载代码</a></p>
<h2 id="pandas_bokeh">pandas_bokeh</h2>
<p>pandas_bokeh可以使得dataframe直接调用bokeh底层代码。通过使用pandas_bokeh，可以在notebook或者html中显示，语法相比于bokeh更简洁易用。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pandas_bokeh</span>
</code></pre></div><h2 id="快速上手">快速上手</h2>
<p>对fruits.csv做一个条形图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:left">fruits</th>
<th style="text-align:right">2015</th>
<th style="text-align:right">2016</th>
<th style="text-align:right">2017</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:left">苹果</td>
<td style="text-align:right">2</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left">梨</td>
<td style="text-align:right">1</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:left">香蕉</td>
<td style="text-align:right">4</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:left">草莓</td>
<td style="text-align:right">3</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left">樱桃</td>
<td style="text-align:right">2</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td style="text-align:right">5</td>
<td style="text-align:left">橘子</td>
<td style="text-align:right">4</td>
<td style="text-align:right">6</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">pandas_bokeh</span>
<span class="kn">import</span> <span class="nn">warnings</span> 
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s2">&#34;ignore&#34;</span><span class="p">)</span> <span class="c1">#忽略某些不影响程序的提示</span>

<span class="c1">#在notebook中能显示可视化结果</span>
<span class="n">pandas_bokeh</span><span class="o">.</span><span class="n">output_notebook</span><span class="p">()</span>

<span class="c1">#将fruits列设置为行索引</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fruits.xlsx&#39;</span><span class="p">)</span>


<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> 
              <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;fruits&#39;</span><span class="p">,</span> <span class="c1">#将fruits列选做x轴</span>
              <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;2015&#39;</span><span class="p">,</span> <span class="s1">&#39;2016&#39;</span><span class="p">,</span> <span class="s1">&#39;2017&#39;</span><span class="p">],</span> <span class="c1">#将年份选做y轴</span>
              <span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;水果价格(元/斤)&#39;</span><span class="p">,</span>
              <span class="n">title</span><span class="o">=</span><span class="s1">&#39;水果&#39;</span><span class="p">,</span>
              <span class="n">show_figure</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#显示</span>
</code></pre></div>
<figure >
    
        <img src="img/2.gif" width="800" />
    
    
</figure>

<p>上面的例子已经可以看到该库的简洁优美之处，现在我们多学点</p>
<h2 id="pandas_bokeh输出设定">pandas_bokeh输出设定</h2>
<ul>
<li>pandas_bokeh.output_notebook() 在notebook中能显示可视化结果</li>
<li>pandas_bokeh.output_file(filename) 将结果输出到html文件中</li>
</ul>
<h2 id="支持可视化图种类">支持可视化图种类</h2>
<ul>
<li>line</li>
<li>bar</li>
<li>point</li>
<li>scatter</li>
<li>histogram</li>
<li>area</li>
<li>pie</li>
<li>map</li>
</ul>
<p>以bar为例，调用可视化接口时，有以下两种使用方法</p>
<ul>
<li>df.plot_bokeh.line(&hellip;)</li>
<li>df.plot_bokeh(kind=&lsquo;line&rsquo;)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;fake_stocks.xlsx&#39;</span><span class="p">)</span>

<span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s2">&#34;line&#34;</span><span class="p">,</span> 
              <span class="n">x</span><span class="o">=</span><span class="s1">&#39;日期&#39;</span><span class="p">,</span> <span class="c1">#将excel中的日期列当做x轴</span>
              <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Google&#39;</span><span class="p">,</span> <span class="s1">&#39;Apple&#39;</span><span class="p">])</span> <span class="c1">#将&#39;Google&#39;, &#39;Apple&#39;两列作为y轴</span>
</code></pre></div>
<figure >
    
        <img src="img/3.gif" width="800" />
    
    
</figure>

<h2 id="高级参数">高级参数</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">plot_bokeh</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">figsize</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">xlim</span><span class="p">,</span> <span class="n">ylim</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span>
              <span class="n">logx</span><span class="p">,</span> <span class="n">logy</span><span class="p">,</span> <span class="n">xticks</span><span class="p">,</span> <span class="n">yticks</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">colormap</span><span class="p">,</span> <span class="n">hovertool</span><span class="p">,</span> 
              <span class="n">zooming</span><span class="p">,</span> <span class="n">panning</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div><ul>
<li>kind: 支持的图种类&quot;line&quot;, &ldquo;point&rdquo;, &ldquo;scatter&rdquo;, &ldquo;bar&rdquo; ,&ldquo;histogram&quot;等</li>
<li>x: 选中数据某列名作为x轴。如果x不传入参数，会默认使用df的索引作为x轴</li>
<li>y: 将数据中的某列或某些列指定为y轴</li>
<li>figsize: 图的尺寸,如figsize=(600, 350)</li>
<li>title:  图的标题</li>
<li>xlim/ylim: 设置图的x轴和y轴的范围</li>
<li>xlabel/ylabel: 设置x轴和y轴的名字</li>
<li>logx/logy: 布尔型值，对x和y的数据是否进行log变换</li>
<li>xticks/yticks: 显性定义横纵坐标刻度</li>
<li>color: 对图中使用同一的颜色，如果想定义多种颜色，请使用colormap参数</li>
<li>colormap: 可以对图中的不同对象设置颜色， 传入的是颜色字符串列表。</li>
<li>hovertool: 默认True，鼠标放在图上会悬浮显示具体信息。</li>
<li>zooming: 布尔值，默认True支持缩放</li>
<li>panning: 布尔值，默认True支持平移</li>
<li>kwargs**: 更多参数设定请看官方文档</li>
</ul>
<h2 id="文档">文档</h2>
<ul>
<li>pandas_bokeh文档地址https://github.com/PatrikHlobil/Pandas-Bokeh</li>
<li>Bokeh官方文档地址https://docs.bokeh.org/en/latest/</li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Pandas做数据预处理</title>
      <link>https://textdata.cn/blog/pre_process_in_pandas/</link>
      <pubDate>Tue, 16 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pre_process_in_pandas/</guid>
      <description>4000字详细说明</description>
      <content:encoded><![CDATA[<blockquote>
<p>src: <a href="https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA">https://mp.weixin.qq.com/s/7D2d7BIaFAhPrxtDOWGgLA</a></p>
<p>author: 俊欣</p>
<p>公众号: 关于数据分析与可视化</p>
</blockquote>
<p>数据预处理过程当中, 大致会遇到</p>
<ul>
<li>加载数据</li>
<li>处理缺失值如何处理</li>
<li>处理离散型数据该如何处理</li>
<li>数据的标准化</li>
<li>将数据集划分成训练集与测试集</li>
<li>去掉重复值</li>
</ul>
<br>
<h2 id="加载数据">加载数据</h2>
<p>我们导入必要的库并且加载数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data.csv&#34;</span><span class="p">)</span>
</code></pre></div><p>在进行数据分析前，可以查看一下数据的总体情况，从宏观上了解数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span> <span class="c1">#显示前五行数据</span>
<span class="n">data</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span> <span class="c1">#显示末尾五行数据</span>
<span class="n">data</span><span class="o">.</span><span class="n">info</span><span class="p">()</span> <span class="c1">#查看各字段的信息</span>
<span class="n">data</span><span class="o">.</span><span class="n">shape</span> <span class="c1">#查看数据集有几行几列,data.shape[0]是行数,data.shape[1]是列数</span>
<span class="n">data</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span> <span class="c1">#查看数据的大体情况，均值，最值，分位数值...</span>
<span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>   <span class="c1">#得到列名的list</span>
</code></pre></div><br>
<h2 id="处理缺失值">处理缺失值</h2>
<p>缺失值一直都是数据预处理当中比较常见的一个问题，而在处理类似的问题的时候，方式方法也是多种多样的，我们一一来介绍，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;小明&#39;</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">55</span><span class="p">],[</span><span class="s1">&#39;小红&#39;</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">60</span><span class="p">],[</span><span class="s1">&#39;小王&#39;</span><span class="p">,</span><span class="mi">26</span><span class="p">]]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span><span class="s1">&#39;Age&#39;</span><span class="p">,</span><span class="s1">&#39;Weight&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
2   小王   26     NaN
</code></pre></div><p>针对上面的数据集，我们通过pandas中的方法看一下缺失值的情况</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Name    Age  Weight
0  False  False   False
1  False  False   False
2  False  False    True
</code></pre></div><p>另外我们也可以这么来做，检测每一列空值的数量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Name      0
Age       0
Weight    1
dtype: int64
</code></pre></div><p>而在面对缺失值的时候，我们一方面可以将其去除</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">  Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
</code></pre></div><p>当然我们也可以对缺失值进行填充，例如用平均值来填充</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">mean</span><span class="p">())</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    Name  Age  Weight
0   小明   25    55.0
1   小红   28    60.0
2   小王   26    57.5
</code></pre></div><p>除了pandas当中的方法之外，我们也可以使用sklearn库当中的一些函数方法，例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.impute</span> <span class="kn">import</span> <span class="n">SimpleImputer</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">SimpleImputer</span><span class="p">(</span><span class="n">missing_values</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="n">strategy</span><span class="o">=</span><span class="s1">&#39;mean&#39;</span><span class="p">)</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]])</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Weight&#39;</span><span class="p">]])</span>
</code></pre></div><p>最后返回的结果也和上面的fillna()方法返回的结果一致，我们用平均值来代码空值，那么同样道理我们也可以用中位数、众数等统计值来进行替换，这里就不做多说</p>
<br>
<h2 id="处理离散型数据">处理离散型数据</h2>
<p>另外当数据集当中出现离散型数据的时候，我们也要进行相应的处理，毕竟在后面的建模过程当中，机器学习的模型需要的是连续型的数据。
离散型数据也分为两种，一种是有序的离散变量，就比方说是衣服的尺码，有M码的、也有L码的、也还有与之更大的尺码，另外一种则是无序的，例如衣服的颜色，颜色之间没有大小之分，因此在编码的时候也应该另外处理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_cat</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> 
                     <span class="p">[[</span><span class="s1">&#39;green&#39;</span><span class="p">,</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="mf">10.1</span><span class="p">,</span><span class="s1">&#39;class1&#39;</span><span class="p">],</span>
                      <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span><span class="s1">&#39;L&#39;</span><span class="p">,</span><span class="mf">20.1</span><span class="p">,</span><span class="s1">&#39;class2&#39;</span><span class="p">],</span>
                      <span class="p">[</span><span class="s1">&#39;white&#39;</span><span class="p">,</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="mf">30.1</span><span class="p">,</span><span class="s1">&#39;class1&#39;</span><span class="p">]],</span> <span class="p">)</span>
<span class="n">df_cat</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">,</span><span class="s1">&#39;size&#39;</span><span class="p">,</span><span class="s1">&#39;price&#39;</span><span class="p">,</span><span class="s1">&#39;classlabel&#39;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   color size  price classlabel
0  green    M   10.1     class1
1   blue    L   20.1     class2
2  white    M   30.1     class1
</code></pre></div><p>对于有序的离散型变量，我们可以使用map()函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">size_mapping</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;M&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;L&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">}</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">size_mapping</span><span class="p">)</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0    1
1    2
2    1
Name: size, dtype: int64
</code></pre></div><p>另外我们也可以使用sklearn库中的LabelEncoder()方法来处理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span>
<span class="n">class_le</span> <span class="o">=</span> <span class="n">LabelEncoder</span><span class="p">()</span>
<span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">class_le</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
</code></pre></div><p>而对于无序的离散型变量，我们可以采用独热编码，例如对color这一列进行编码过之后会有color_green、color_blue以及color_white三个特征，特征值为0或者1</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s2">&#34;color&#34;</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   color_blue  color_green  color_white
0           0            1            0
1           1            0            0
2           0            0            1

</code></pre></div><p>然后我们将此并入到源数据当中去</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df_cat</span><span class="p">[[</span><span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dummies</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">   size  price  color_blue  color_green  color_white
0     1   10.1           0            1            0
1     2   20.1           1            0            0
2     1   30.1           0            0            1
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">但是考虑到后面搭建模型的时候</span><span class="err">，</span><span class="n">变量与变量之间应该保持独立</span><span class="err">，</span><span class="n">而不应该是存在依赖的关系</span><span class="err">，</span><span class="n">对于color这一列中存在三种颜色</span><span class="err">，</span><span class="n">分别是blue</span><span class="err">、</span><span class="n">green以及white</span><span class="err">，</span><span class="n">当前两类取值都为0的时候</span><span class="err">，</span><span class="n">color只可能是white</span>
<span class="n">所以将get_dummies</span><span class="p">()</span><span class="n">方法中的drop_first默认值为False改为True</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">dummies</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_cat</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s2">&#34;color&#34;</span><span class="p">,</span> <span class="n">drop_first</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">df_cat</span><span class="p">[[</span><span class="s2">&#34;size&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">]]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dummies</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="数据的标准化">数据的标准化</h2>
<p>由于不同的变量，它们往往存在不同的单位以及不同的取值范围，有时候取值范围的差异较大会对机器学习的模型带来很多不必要的麻烦。因此为了最后预测结果的可靠性，我们需要对数据进行标准化，对数据按比例进行缩放，使之落入一个小的特定区间。而标准化算法有</p>
<ul>
<li>z-score 标准化</li>
</ul>
<p>这种方法根据原始数据的均值和标准差进行数据的标准化，经过处理的数据符合正态分布，即均值为0，标准差为1 ，当然sklearn库当中的代码则是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="n">sc</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><ul>
<li>线性归一化</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">MinMaxScaler</span><span class="p">()</span>
<span class="n">min_max_scaler</span> <span class="o">=</span> <span class="n">MinMaxScaler</span><span class="p">()</span>
<span class="n">X_train_minmax</span> <span class="o">=</span> <span class="n">min_max_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">X_train_minmax</span><span class="p">)</span>
</code></pre></div><p>训练集中的数据经过转化，取值范围都集中在[0,1]之间</p>
<ul>
<li>MaxAbsScaler()方法</li>
</ul>
<p>MaxAbsScaler()方法和上述的线性归一化效果相类似，训练集中的数据经过转化，取值范围在[-1,1]之间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">max_abs_scaler</span> <span class="o">=</span> <span class="n">preprocessing</span><span class="o">.</span><span class="n">MaxAbsScaler</span><span class="p">()</span>
<span class="n">X_train_maxabs</span> <span class="o">=</span> <span class="n">max_abs_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">X_test_maxabs</span> <span class="o">=</span> <span class="n">max_abs_scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><ul>
<li>RobustScaler()方法</li>
</ul>
<p>要是当数据集当中存在很多的极值的时候，利用平均值和标准差来进行数据的标准化效果可能并不理想，毕竟极值会影响到平均值和标准差的计算，这个时候我们就需要用到RobustScaler()方法，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">RobustScaler</span>
<span class="n">transformer</span> <span class="o">=</span> <span class="n">RobustScaler</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">transformer</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="将数据集划分成训练集和测试集">将数据集划分成训练集和测试集</h2>
<p>在建模之前，我们需要将数据集分成训练集和测试集，我们在训练集上面建立模型，训练与优化模型，然后再将模型放到测试集上面，评估一下模型的性能以及优化的效果，在sklearn库中也有相对应的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>上面的变量y具体指的是被预测的因变量，而x则是在预测中使用的自变量</p>
<br>
<h2 id="去除重复值">去除重复值</h2>
<p>在pandas当中也有对应的方法来去除掉重复值</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">br</span><span class="o">&gt;</span>

<span class="c1">## 代码下载</span>
<span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">hidadeng</span><span class="o">/</span><span class="n">DaDengAndHisPython</span><span class="o">/</span><span class="n">blob</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="mi">4000</span><span class="n">字归纳总结PandasSklearn数据预处理</span><span class="o">.</span><span class="n">ipynb</span>
</code></pre></div><p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>spacy产业级自然语言处理包</title>
      <link>https://textdata.cn/blog/spacy_industry_application/</link>
      <pubDate>Sun, 14 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/spacy_industry_application/</guid>
      <description>牛掰nlp库</description>
      <content:encoded><![CDATA[<h2 id="spacy">spacy</h2>
<p>产业级自然语言处理python包  <a href="https://spacy.io/">https://spacy.io/</a></p>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/20211115spacy%E4%BA%A7%E4%B8%9A%E7%BA%A7%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%8C%85.ipynb">点击下载</a></p>
<br>
<h2 id="特性">特性</h2>
<ul>
<li>支持64+语言</li>
<li>针对19门语言的64流水线pipeline处理函数</li>
<li>多任务预训练transformers，如BERT</li>
<li>预训练词向量</li>
<li>支持命名实体识别</li>
<li>支持 POS词性标注</li>
<li>支持 句法依存</li>
<li>支持 文本分类</li>
<li>支持 词干化</li>
<li>内置可视化</li>
</ul>
<br>
<h2 id="spacy安装">spacy安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="n">pip</span> <span class="n">install</span> <span class="n">spacy</span><span class="o">==</span><span class="mf">3.2.0</span>

</code></pre></div><br>
<h2 id="模型下载安装">模型下载安装</h2>
<p>sm小型/ md中型/ lg大型</p>
<ul>
<li>
<p><strong>中文模型3.2.0版</strong></p>
<ul>
<li>zh_core_web_sm  <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_sm-3.2.0/zh_core_web_sm-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_sm-3.2.0/zh_core_web_sm-3.2.0-py3-none-any.whl</a></li>
<li>zh_core_web_md <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_md-3.2.0/zh_core_web_md-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_md-3.2.0/zh_core_web_md-3.2.0-py3-none-any.whl</a></li>
<li>zh_core_web_lg   <a href="https://github.com/explosion/spacy-models/releases/download/zh_core_web_lg-3.2.0/zh_core_web_lg-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/zh_core_web_lg-3.2.0/zh_core_web_lg-3.2.0-py3-none-any.whl</a></li>
</ul>
</li>
<li>
<p><strong>英文模型3.2.0版</strong></p>
<ul>
<li>en_core_web_sm <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl</a></li>
<li>en_core_web_md  <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.2.0/en_core_web_md-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.2.0/en_core_web_md-3.2.0-py3-none-any.whl</a></li>
<li>en_core_web_lg  <a href="https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.2.0/en_core_web_lg-3.2.0-py3-none-any.whl">https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.2.0/en_core_web_lg-3.2.0-py3-none-any.whl</a></li>
</ul>
</li>
</ul>
<p><strong>注意</strong>： 模型大小的区别主要体现在词向量维度数的差距，模型越大， 词向量的维度越多。</p>
<p>以版本3.2.0的en_core_web_sm为例，点击对应链接，下载至桌面。</p>
<p>打开命令行， 依次执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd Desktop

pip3 install en_core_web_sm-3.2.0-py3-none-any.whl
</code></pre></div><p>即可安装完成。</p>
<br>
<br>
<h2 id="doc类型">Doc类型</h2>
<ul>
<li><code>doc.lang_</code>  doc的语言</li>
<li><code>doc.text</code>   doc的文本</li>
<li><code>doc.ents</code> 文本中的实体词</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">spacy</span>

<span class="c1">#使用中文zh_core_web_sm模型</span>
<span class="n">zh_nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;zh_core_web_sm&#34;</span><span class="p">)</span>

<span class="n">test1</span> <span class="o">=</span> <span class="s1">&#39;国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。&#39;</span>

<span class="n">doc1</span> <span class="o">=</span> <span class="n">zh_nlp</span><span class="p">(</span><span class="n">test1</span><span class="p">)</span>

<span class="n">doc1</span>
</code></pre></div><pre><code>国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">lang_</span>
</code></pre></div><pre><code>'zh'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">text</span>
</code></pre></div><pre><code>'国家管网微信公众号11月13日消息，11月12日，国家管网集团首期绿色超短期融资券在全国银行间市场成功发行。此次债券发行是国家管网集团成立后首次在公开市场亮相，由工商银行独家承销，发行金额60亿元、期限270天，为本年度单笔最大金额绿色超短期融资券，募集资金将全部用于储气库等绿色低碳天然气储运基础设施建设；发行票面利率2.41%，认购总规模达2.53倍，低于资本市场同期可比产品利率超10个BP，反映了市场对绿色基础设施建设项目的青睐。'
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">doc1</span><span class="o">.</span><span class="n">vector</span>
</code></pre></div><pre><code>array([-1.81135774e-01,  2.31929451e-01,  1.45746097e-01,  6.82696044e-01,
       -8.44623148e-03, -2.21295916e-02,  4.06811416e-01, -4.60287899e-01,
       -5.73987663e-01, -1.33687481e-01, -5.34314513e-01, -6.64901555e-01,
       -3.94947737e-01,  6.35875063e-03, -2.03339502e-01,  5.78875951e-02,
       -3.34325433e-01, -3.77648622e-01,  2.43863747e-01, -5.56892566e-02,
       -7.30801523e-01, -2.41785884e-01, -4.50579911e-01, -3.13598923e-02,
        9.07084942e-02, -8.06667805e-01,  7.28501499e-01, -8.59559357e-01,
       -4.44110222e-02,  9.64611948e-01, -2.57230818e-01,  1.09481342e-01,
       -3.73580456e-01, -8.51007993e-04,  5.30374162e-02, -5.51876485e-01,
       -4.82654065e-01,  2.68822908e-01, -4.20012563e-01,  4.33068752e-01,
       -5.14427841e-01,  5.53584039e-01, -2.00293139e-02,  9.45062563e-02,
        1.04523234e-01,  1.34134221e+00, -5.23905218e-01,  1.31230903e+00,
        3.28943968e-01,  3.39987069e-01,  8.26785386e-01,  5.35273492e-01,
       -4.27510649e-01, -1.02807179e-01, -1.91500232e-01,  2.63696283e-01,
        6.33961499e-01, -5.65908328e-02, -1.94336250e-01, -5.89190602e-01,
        2.22078279e-01,  3.41992415e-02,  5.37312031e-01,  2.77926654e-01,
       -3.00608397e-01, -6.42910838e-01, -1.33188680e-01,  2.82793492e-01,
        6.25911206e-02,  2.08833948e-01,  2.69211121e-02,  1.65822819e-01,
       -4.32190485e-02, -6.67634964e-01,  6.50937319e-01, -2.43003711e-01,
        9.57057327e-02, -3.56370257e-03, -1.13566548e-01, -1.65319979e-01,
        7.40000159e-02,  3.65676880e-01, -2.21356809e-01,  2.03256473e-01,
        2.26293072e-01,  3.11525285e-01,  3.37869138e-01, -3.12896192e-01,
        5.31899095e-01, -1.86223835e-01, -6.03411011e-02,  4.97923464e-01,
        3.10418844e-01, -2.48594299e-01, -3.67455184e-01, -4.46804255e-01],
      dtype=float32)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#doc1中的实体词</span>
<span class="n">doc1</span><span class="o">.</span><span class="n">ents</span>
</code></pre></div><pre><code>(11月13日, 11月12日, 国家管网集团, 全国银行, 国家管网集团, 工商银行, 60亿元, 270天, 2, 2, 53, 超10)
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#doc1中的实体词类别</span>
<span class="p">[</span><span class="n">ent</span><span class="o">.</span><span class="n">label_</span> <span class="k">for</span> <span class="n">ent</span> <span class="ow">in</span> <span class="n">doc1</span><span class="o">.</span><span class="n">ents</span><span class="p">]</span>
</code></pre></div><pre><code>['DATE',
 'DATE',
 'ORG',
 'ORG',
 'ORG',
 'ORG',
 'MONEY',
 'DATE',
 'CARDINAL',
 'CARDINAL',
 'CARDINAL',
 'CARDINAL']
</code></pre>
<h2 id="token类型">Token类型</h2>
<ul>
<li><code>token.text</code>   文本</li>
<li><code>token.pos_</code>  词性</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc1</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">token</span><span class="o">.</span><span class="n">pos_</span><span class="p">)</span>
</code></pre></div><pre><code>国家   NOUN
管网   NOUN
微信   ADJ
公众号   NOUN
11月   NOUN
13日   NOUN
消息   NOUN
，   PUNCT
11月   NOUN
12日   NOUN
，   PUNCT
国家   NOUN
管网   NOUN
集团   NOUN
首期   ADV
绿色   VERB
超短   NOUN
期融   NOUN
资券   VERB
在   ADP
全国   ADJ
银行   NOUN
间   PART
市场   NOUN
成功   ADV
发行   VERB
。   PUNCT
此次   DET
债券   NOUN
发行   VERB
是   VERB
国家   NOUN
管网   NOUN
集团   NOUN
成立   VERB
后   PART
首次   ADV
在   ADP
公开   ADJ
市场   NOUN
亮相   VERB
，   PUNCT
由   ADP
工商   NOUN
银行   NOUN
独家   ADV
承销   VERB
，   PUNCT
发行   NOUN
金额   NOUN
60亿   NUM
元   NUM
、   PUNCT
期限   NOUN
270   NUM
天   NUM
，   PUNCT
为   ADP
本   DET
年度   NOUN
单笔   NOUN
最   ADV
大   ADJ
金额   NOUN
绿色   ADJ
超短   NOUN
期融   NOUN
资券   NOUN
，   PUNCT
募集   NOUN
资金   NOUN
将   ADV
全部   ADV
用于   VERB
储气库   NOUN
等   PART
绿色   ADJ
低碳   VERB
天然气   NOUN
储运   NOUN
基础   NOUN
设施   NOUN
建设   NOUN
；   PUNCT
发行   VERB
票面   ADJ
利率   NOUN
2   NUM
.   PUNCT
41%   NOUN
，   PUNCT
认购   NOUN
总   ADJ
规模   NOUN
达   VERB
2   NUM
.   PUNCT
53   NUM
倍   NUM
，   PUNCT
低于   VERB
资本   NOUN
市场   NOUN
同期   NOUN
可比   ADV
产品   NOUN
利率   NOUN
超10   VERB
个   NUM
BP   NOUN
，   PUNCT
反映   VERB
了   PART
市场   NOUN
对   ADP
绿色   ADJ
基础   NOUN
设施   NOUN
建设   NOUN
项目   NOUN
的   PART
青睐   NOUN
。   PUNCT
</code></pre>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>cntext中文文本分析库 | 值得收藏</title>
      <link>https://textdata.cn/blog/cntext_v_1/</link>
      <pubDate>Mon, 08 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/cntext_v_1/</guid>
      <description>简单好用的中文Python文本分析包</description>
      <content:encoded><![CDATA[<h2 id="cntext">cntext</h2>
<p>中文文本分析库，可对文本进行词频统计、词典扩充、情绪分析、相似度、可读性等</p>
<ul>
<li><a href="https://github.com/hidadeng/cntext">github地址</a> <code>https://github.com/hidadeng/cntext</code></li>
<li><a href="https://pypi.org/project/cntext/">pypi地址</a>  <code>https://pypi.org/project/cntext/</code></li>
<li><a href="https://ke.qq.com/course/482241?tuin=163164df">视频课-<strong>Python网络爬虫与文本数据分析</strong></a></li>
</ul>
<p>功能模块含</p>
<ul>
<li><strong>cntext</strong></li>
<li><strong>stats</strong>  文本统计,可读性等</li>
<li><strong>dictionary</strong> 构建词表(典)</li>
<li><strong>sentiment</strong>  情感分析</li>
<li><strong>similarity</strong>   文本相似度</li>
<li><strong>visualization</strong> 可视化，如词云图</li>
</ul>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/cntext/tree/main/examples">https://github.com/hidadeng/cntext/tree/main/examples</a></p>
<br>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install cntext==0.9
</code></pre></div><br>
<h2 id="一cntext">一、cntext</h2>
<p>查看cntext基本信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span>

<span class="n">help</span><span class="p">(</span><span class="n">cntext</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">Help</span> <span class="nx">on</span> <span class="kn">package</span> <span class="nx">cntext</span><span class="p">:</span>

<span class="nx">NAME</span>
    <span class="nx">cntext</span>

<span class="nx">PACKAGE</span> <span class="nx">CONTENTS</span>
    <span class="nf">description</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">dictionary</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">sentiment</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">similarity</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>
    <span class="nf">visualization</span> <span class="p">(</span><span class="kn">package</span><span class="p">)</span>

<span class="nx">DATA</span>
    <span class="nx">ADV_words</span> <span class="p">=</span> <span class="p">[</span><span class="sc">&#39;都&#39;</span><span class="p">,</span> <span class="sc">&#39;全&#39;</span><span class="p">,</span> <span class="sc">&#39;单&#39;</span><span class="p">,</span> <span class="sc">&#39;共&#39;</span><span class="p">,</span> <span class="sc">&#39;光&#39;</span><span class="p">,</span> <span class="sc">&#39;尽&#39;</span><span class="p">,</span> <span class="sc">&#39;净&#39;</span><span class="p">,</span> <span class="sc">&#39;仅&#39;</span><span class="p">,</span> <span class="sc">&#39;就&#39;</span><span class="p">,</span> <span class="sc">&#39;只&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一共</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">CONJ_words</span> <span class="p">=</span> <span class="p">[</span><span class="sc">&#39;乃&#39;</span><span class="p">,</span> <span class="sc">&#39;乍&#39;</span><span class="p">,</span> <span class="sc">&#39;与&#39;</span><span class="p">,</span> <span class="sc">&#39;无&#39;</span><span class="p">,</span> <span class="sc">&#39;且&#39;</span><span class="p">,</span> <span class="sc">&#39;丕&#39;</span><span class="p">,</span> <span class="sc">&#39;为&#39;</span><span class="p">,</span> <span class="sc">&#39;共&#39;</span><span class="p">,</span> <span class="sc">&#39;其&#39;</span><span class="p">,</span> <span class="sc">&#39;况&#39;</span><span class="p">,</span> <span class="sc">&#39;厥&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">DUTIR_Ais</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">sigh</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一命呜呼</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一场春梦</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一场空</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一头跌在菜刀上</span><span class="err">－</span><span class="nx">切肤之痛</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一念之差</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">..</span>
    <span class="nx">DUTIR_Haos</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">1</span><span class="nx">兒巴经</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">3</span><span class="nx">x</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">8</span><span class="nx">错</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BUCUO</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">Cool毙</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">NB</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Jings</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">848</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">FT</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">_god</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">yun</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个骰子掷七点</span><span class="err">－</span><span class="nx">出乎意料</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一举成名</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">......</span>
    <span class="nx">DUTIR_Jus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一则以喜</span><span class="err">，</span><span class="nx">一则以惧</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一发千钧</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一年被蛇咬</span><span class="err">，</span><span class="nx">三年怕草索</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一座皆惊</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一脸横肉</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一蛇两头</span><span class="o">...</span>
    <span class="nx">DUTIR_Les</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="p">:)</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">CC</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">Happy</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">LOL</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">_so</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">haha</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Nus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="mi">2</span><span class="nx">气斗狠</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">MD</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">TNND</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">gun</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">kao</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一刀两断</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">DUTIR_Wus</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">B4</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BD</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">BS</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">HC</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">HJ</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">JJWW</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_deny</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;不&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不可</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不是</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不能</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不要</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;休&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_extreme</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;万&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万万</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万分</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">万般</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不亦乐乎</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不可开交</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_ish</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一些</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一点</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一点儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不丁点儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不大</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不怎么</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_more</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;多&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">大不了</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">如斯</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">尤甚</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;强&#39;</span><span class="p">,</span> <span class="sc">&#39;愈&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_neg</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">一下子爆发</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一下子爆发的一连串</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一不小心</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个屁</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一仍旧贯</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一偏</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_pos</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一专多能</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一丝不差</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一丝不苟</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一个心眼儿</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">一五一十</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">HOWNET_very</span> <span class="p">=</span> <span class="p">{</span><span class="err">&#39;</span><span class="nx">不为过</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不少</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不胜</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">不过</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">何啻</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">何止</span><span class="err">&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    <span class="nx">STOPWORDS_en</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">about</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">above</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">across</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">after</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">afterwards</span><span class="err">&#39;</span><span class="o">...</span>
    <span class="nx">STOPWORDS_zh</span> <span class="p">=</span> <span class="p">{</span><span class="sc">&#39;、&#39;</span><span class="p">,</span> <span class="sc">&#39;。&#39;</span><span class="p">,</span> <span class="sc">&#39;〈&#39;</span><span class="p">,</span> <span class="sc">&#39;〉&#39;</span><span class="p">,</span> <span class="sc">&#39;《&#39;</span><span class="p">,</span> <span class="sc">&#39;》&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">}</span>
    
    <span class="nx">FORMAL_pos_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="mi">100</span><span class="nx">强</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">3</span><span class="nx">A级</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mi">50</span><span class="nx">强</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">AAA级</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">AAA企业</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">爱戴</span><span class="err">&#39;</span><span class="p">,..]</span>
    <span class="nx">FORMAL_neg_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">安于现状</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗藏</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗淡</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗黑</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">暗流</span><span class="err">&#39;</span><span class="p">,</span> <span class="p">..]</span>
    <span class="nx">UNFORMAL_pos_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">爱心</span><span class="sc">&#39;,&#39;</span><span class="nx">安定</span><span class="sc">&#39;,&#39;</span><span class="nx">安全</span><span class="sc">&#39;,&#39;</span><span class="nx">安然无恙</span><span class="sc">&#39;,&#39;</span><span class="nx">安泰</span><span class="sc">&#39;,&#39;</span><span class="nx">霸主</span><span class="err">&#39;</span><span class="p">,</span><span class="o">...</span><span class="p">]</span>
    <span class="nx">UNFORMAL_neg_words</span> <span class="p">=</span> <span class="p">[</span><span class="err">&#39;</span><span class="nx">哀鸿遍野</span><span class="sc">&#39;,&#39;</span><span class="nx">肮脏</span><span class="sc">&#39;,&#39;</span><span class="nx">罢免</span><span class="sc">&#39;,&#39;</span><span class="nx">白痴</span><span class="sc">&#39;,&#39;</span><span class="nx">败笔</span><span class="sc">&#39;,&#39;</span><span class="nx">败诉</span><span class="sc">&#39;,&#39;</span><span class="nx">半信半疑</span><span class="err">&#39;</span><span class="p">..]</span>



<span class="nx">FILE</span>
    <span class="o">/</span><span class="nx">Library</span><span class="o">/</span><span class="nx">Frameworks</span><span class="o">/</span><span class="nx">Python</span><span class="p">.</span><span class="nx">framework</span><span class="o">/</span><span class="nx">Versions</span><span class="o">/</span><span class="mf">3.7</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">python3</span><span class="mf">.7</span><span class="o">/</span><span class="nx">site</span><span class="o">-</span><span class="nx">packages</span><span class="o">/</span><span class="nx">cntext</span><span class="o">/</span><span class="nx">__init__</span><span class="p">.</span><span class="nx">py</span>
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext</span> <span class="kn">import</span> <span class="n">dict_info</span>

<span class="n">dict_info</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"> 【大连理工大学情感本体库】
     七大情绪分类，依次是哀、恶、好、惊、惧、乐、怒；对应的情绪词表依次：
    DUTIR_Ais = {&#34;泣血捶膺&#34;, &#34;望断白云&#34;, &#34;日暮途穷&#34;, &#34;身微力薄&#34;...}
    DUTIR_Wus = {&#34;饰非遂过&#34;, &#34;恶语&#34;, &#34;毁害&#34;, &#34;恶籍盈指&#34;, &#34;脾气爆躁&#34;, &#34;淫贱&#34;, &#34;凌乱&#34;...}
    DUTIR_Haos =  {&#34;打破砂锅璺到底&#34;, &#34;多彩&#34;, &#34;披沙拣金&#34;, &#34;见机行事&#34;, &#34;精神饱满&#34;...}
    DUTIR_Jings = {&#34;骇人视听&#34;, &#34;拍案惊奇&#34;, &#34;悬念&#34;, &#34;无翼而飞&#34;, &#34;原来&#34;, &#34;冷门&#34;...}
    DUTIR_Jus ={&#34;山摇地动&#34;, &#34;月黑风高&#34;, &#34;流血&#34;, &#34;老鼠偷猫饭－心惊肉跳&#34;, &#34;一发千钧&#34;...}
    DUTIR_Les ={&#34;含哺鼓腹&#34;, &#34;欢呼鼓舞&#34;, &#34;莺歌蝶舞&#34;, &#34;将伯之助&#34;, &#34;逸兴横飞&#34;, &#34;舒畅&#34;...}
    DUTIR_Nus = {&#34;怨气满腹&#34;, &#34;面有愠色&#34;, &#34;愤愤&#34;, &#34;直眉瞪眼&#34;, &#34;负气斗狠&#34;, &#34;挑眼&#34;...}
    
    【知网Hownet词典】
    含正负形容词、否定词、副词等词表，对应的词表依次:
    HOWNET_deny = {&#34;不&#34;, &#34;不是&#34;, &#34;不能&#34;, &#34;不可&#34;...}
    HOWNET_extreme = {&#34;百分之百&#34;, &#34;倍加&#34;, &#34;备至&#34;, &#34;不得了&#34;...}
    HOWNET_ish = {&#34;点点滴滴&#34;, &#34;多多少少&#34;, &#34;怪&#34;, &#34;好生&#34;, &#34;还&#34;, &#34;或多或少&#34;...}
    HOWNET_more = {&#34;大不了&#34;, &#34;多&#34;, &#34;更&#34;, &#34;比较&#34;, &#34;更加&#34;, &#34;更进一步&#34;, &#34;更为&#34;, &#34;还&#34;, &#34;还要&#34;...}
    HOWNET_neg = {&#34;压坏&#34;, &#34;鲁莽的&#34;, &#34;被控犯罪&#34;, &#34;银根紧&#34;, &#34;警惕的&#34;, &#34;残缺&#34;, &#34;致污物&#34;, &#34;柔弱&#34;...}
    HOWNET_pos = {&#34;无误&#34;, &#34;感激不尽&#34;, &#34;受大众欢迎&#34;, &#34;敬礼&#34;,  &#34;文雅&#34;, &#34;一尘不染&#34;, &#34;高精度&#34;, &#34;兴盛&#34;...}
    HOWNET_very = {&#34;不为过&#34;, &#34;超&#34;, &#34;超额&#34;, &#34;超外差&#34;, &#34;超微结构&#34;, &#34;超物质&#34;, &#34;出头&#34;...}
    
    【停用词表】
    中英文停用词表，依次
    STOPWORDS_zh = {&#34;经&#34;, &#34;得&#34;, &#34;则甚&#34;, &#34;跟&#34;, &#34;好&#34;, &#34;具体地说&#34;...}
    STOPWORDS_en = {&#39;a&#39;, &#39;about&#39;, &#39;above&#39;, &#39;across&#39;, &#39;after&#39;...}
    
    【中文副词/连词】
    副词ADV、连词CONJ
    ADV_words = [&#39;都&#39;, &#39;全&#39;, &#39;单&#39;, &#39;共&#39;, &#39;光&#39;...}
    CONJ_words = [&#39;乃&#39;, &#39;乍&#39;, &#39;与&#39;, &#39;无&#39;, &#39;且&#39;...}
    
    【金融情绪词典】
     姚加权,冯绪,王赞钧,纪荣嵘,张维.语调、情绪及市场影响:基于金融情绪词典[J].管理科学学报,2021,24(05):26-46.
     #正式-肯定情绪词典
     FORMAL_pos_words = [&#39;100强&#39;, &#39;3A级&#39;, &#39;50强&#39;, &#39;AAA级&#39;, &#39;AAA企业&#39;, &#39;爱戴&#39;,...]
     #正式-否定情绪词典
     FORMAL_neg_words = [&#39;安于现状&#39;, &#39;暗藏&#39;, &#39;暗淡&#39;, &#39;暗黑&#39;, &#39;暗流&#39;, ...]
     #非正式-肯定情绪词典
     UNFORMAL_pos_words = [&#39;爱心&#39;,&#39;安定&#39;,&#39;安全&#39;,&#39;安然无恙&#39;,&#39;安泰&#39;,&#39;霸主&#39;,...]
     #非正式-否定情绪词典
     UNFORMAL_neg_words = [&#39;哀鸿遍野&#39;,&#39;肮脏&#39;,&#39;罢免&#39;,&#39;白痴&#39;,&#39;败笔&#39;,&#39;败诉&#39;,&#39;半信半疑&#39;...]
</code></pre></div><br>
<p>查看词表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext</span> <span class="kn">import</span> <span class="n">CONJ_words</span><span class="p">,</span> <span class="n">ADV_words</span>

<span class="c1">#获取连词词表</span>
<span class="n">CONJ_words</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;乃&#39;,
 &#39;乍&#39;,
 &#39;与&#39;,
 &#39;无&#39;,
 &#39;且&#39;,
 &#39;丕&#39;,
 &#39;为&#39;,
 &#39;共&#39;,
 &#39;其&#39;,
 &#39;况&#39;,
 &#39;厥&#39;,
 &#39;则&#39;,
 &#39;那&#39;,
 &#39;兼&#39;,
 ...
 ]
</code></pre></div><p><br><br></p>
<h2 id="二stats">二、stats</h2>
<p>目前含</p>
<ul>
<li>term_freq 词频统计函数，返回Counter类型</li>
<li>readability 中文可读性</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.stats</span> <span class="kn">import</span> <span class="n">term_freq</span><span class="p">,</span> <span class="n">readability</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;如何看待一网文作者被黑客大佬盗号改文，因万分惭愧而停更&#39;</span>
<span class="n">term_freq</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Counter({&#39;看待&#39;: 1,
         &#39;网文&#39;: 1,
         &#39;作者&#39;: 1,
         &#39;黑客&#39;: 1,
         &#39;大佬&#39;: 1,
         &#39;盗号&#39;: 1,
         &#39;改文因&#39;: 1,
         &#39;万分&#39;: 1,
         &#39;惭愧&#39;: 1,
         &#39;停&#39;: 1})
</code></pre></div><br>
<p>**中文可读性 ** 算法参考自</p>
<blockquote>
<p>徐巍,姚振晔,陈冬华.中文年报可读性：衡量与检验[J].会计研究,2021(03):28-44.</p>
</blockquote>
<ul>
<li>readability1 &mdash;每个分句中的平均字数</li>
<li>readability2  &mdash;每个句子中副词和连词所占的比例</li>
<li>readability3  &mdash;参考Fog Index， readability3=(readability1+readability2)×0.5</li>
</ul>
<p>以上三个指标越大，都说明文本的复杂程度越高，可读性越差。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">readability</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;readability1&#39;: 27.0,
 &#39;readability2&#39;: 0.17647058823529413,
 &#39;readability3&#39;: 13.588235294117647}
</code></pre></div><p><br><br></p>
<h2 id="三dictionary">三、dictionary</h2>
<p>本模块用于构建词表(典),含</p>
<ul>
<li>SoPmi 共现法扩充词表(典)</li>
<li>W2VModels 词向量word2vec扩充词表(典)</li>
</ul>
<h3 id="31-sopmi-共现法">3.1 SoPmi 共现法</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">SoPmi</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">sopmier</span> <span class="o">=</span> <span class="n">SoPmi</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span>
                <span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_corpus.txt&#39;</span><span class="p">,</span>  <span class="c1">#原始数据，您的语料</span>
                <span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/sopmi_seed_words.txt&#39;</span><span class="p">,</span> <span class="c1">#人工标注的初始种子词</span>
                <span class="p">)</span>   

<span class="n">sopmier</span><span class="o">.</span><span class="n">sopmi</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">step 1/4:...seg corpus ...
Loading model cost 0.678 seconds.
Prefix dict has been built successfully.
step 1/4 finished:...cost 60.78995203971863...
step 2/4:...collect cowords ...
step 2/4 finished:...cost 0.6169600486755371...
step 3/4:...compute sopmi ...
step 1/4 finished:...cost 0.26422882080078125...
step 4/4:...save candiwords ...
finished! cost 61.8965539932251
</code></pre></div><br>
<h3 id="32-w2vmodels-词向量">3.2 W2VModels 词向量</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.dictionary</span> <span class="kn">import</span> <span class="n">W2VModels</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#初始化模型</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">W2VModels</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>  <span class="c1">#语料数据 w2v_corpus.txt</span>
<span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">input_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_corpus.txt&#39;</span><span class="p">)</span>


<span class="c1">#根据种子词，筛选出没类词最相近的前100个词</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/integrity.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/innovation.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/quality.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/respect.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">seedword_txt_file</span><span class="o">=</span><span class="s1">&#39;data/w2v_seeds/teamwork.txt&#39;</span><span class="p">,</span> 
           <span class="n">topn</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">数据预处理开始.......
预处理结束...........
Word2Vec模型训练开始......
已将模型存入 /Users/Desktop/cntext/test/output/w2v_candi_words/w2v.model 

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 572 个相似的候选词
计算每个候选词 与 integrity 的相似度， 选出相似度最高的前 100 个候选词
已完成 【integrity 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/integrity.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 516 个相似的候选词
计算每个候选词 与 innovation 的相似度， 选出相似度最高的前 100 个候选词
已完成 【innovation 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/innovation.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 234 个相似的候选词
计算每个候选词 与 quality 的相似度， 选出相似度最高的前 100 个候选词
已完成 【quality 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/quality.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 243 个相似的候选词
计算每个候选词 与 respect 的相似度， 选出相似度最高的前 100 个候选词
已完成 【respect 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/respect.txt， 耗时 46 秒

准备寻找每个seed在语料中所有的相似候选词
初步搜寻到 319 个相似的候选词
计算每个候选词 与 teamwork 的相似度， 选出相似度最高的前 100 个候选词
已完成 【teamwork 类】 的词语筛选，并保存于 /Users/Desktop/cntext/test/output/w2v_candi_words/teamwork.txt， 耗时 46 秒
</code></pre></div><p><br><br></p>
<h2 id="四-sentiment">四、 sentiment</h2>
<ul>
<li>senti_by_hownet 使用知网Hownet词典对文本进行<strong>情感</strong>分析</li>
<li>senti_by_dutir  使用大连理工大学情感本体库dutir对文本进行<strong>情绪</strong>分析</li>
<li>senti_by_diydict 使用<strong>自定义词典</strong> 对文本进行<strong>情感</strong>分析</li>
</ul>
<h3 id="41-senti_by_hownettext-adj_advfalse">4.1 senti_by_hownet(text, adj_adv=False)</h3>
<p>使用知网Hownet词典进行(中)文本数据的情感分析，统计正、负情感信息出现次数(得分)</p>
<ul>
<li>text:  待分析的中文文本数据</li>
<li>adj_adv:  是否考虑副词（否定词、程度词）对情绪形容词的反转和情感强度修饰作用，默认False。默认False只统计情感形容词出现个数；</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.sentiment</span> <span class="kn">import</span> <span class="n">senti_by_hownet</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>

<span class="n">senti_by_dutir</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;word_num&#39;: 12,
 &#39;sentence_num&#39;: 2,
 &#39;stopword_num&#39;: 4,
 &#39;好_num&#39;: 0,
 &#39;乐_num&#39;: 1,
 &#39;哀_num&#39;: 0,
 &#39;怒_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;惊_num&#39;: 0}
</code></pre></div><br>
<p>考虑副词（否定词、程度词）对情绪形容词的反转和情感强度修饰作用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">senti_by_hownet</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">adj_adv</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;sentence_num&#39;: 1,
 &#39;word_num&#39;: 12,
 &#39;stopword_num&#39;: 3,
 &#39;pos_score&#39;: 13.0,
 &#39;neg_score&#39;: 0.0}
</code></pre></div><p><br><br></p>
<h3 id="42-senti_by_dutirtext">4.2 senti_by_dutir(text)</h3>
<p>使用大连理工大学情感本体库对文本进行情绪分析，统计各情绪词语出现次数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.sentiment</span> <span class="kn">import</span> <span class="n">senti_by_dutir</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>

<span class="n">senti_by_dutir</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;word_num&#39;: 12,
 &#39;sentence_num&#39;: 2,
 &#39;stopword_num&#39;: 4,
 &#39;好_num&#39;: 0,
 &#39;乐_num&#39;: 1,
 &#39;哀_num&#39;: 0,
 &#39;怒_num&#39;: 0,
 &#39;惧_num&#39;: 0,
 &#39;恶_num&#39;: 0,
 &#39;惊_num&#39;: 0}
</code></pre></div><blockquote>
<p>情绪分析使用的大连理工大学情感本体库，如发表论文，请注意用户许可协议</p>
<p>如果用户使用该资源发表论文或取得科研成果，请在论文中添加诸如“使用了大连理工大学信息检索研究室的情感词汇本体” 字样加以声明。</p>
<p>参考文献中加入引文“徐琳宏,林鸿飞,潘宇,等.情感词汇本体的构造[J]. 情报学报, 2008, 27(2): 180-185.”</p>
</blockquote>
<p><br><br></p>
<h3 id="43-senti_by_diytext">4.3 senti_by_diy(text)</h3>
<p>使用diy词典进行情感分析，计算各个情绪词出现次数，未考虑强度副词、否定词对情感的复杂影响，</p>
<ul>
<li>text:  待分析中文文本</li>
<li>sentiwords:  情感词字典；
{&lsquo;category1&rsquo;:  &lsquo;category1 词语列表&rsquo;,
&lsquo;category2&rsquo;: &lsquo;category2词语列表&rsquo;,
&lsquo;category3&rsquo;: &lsquo;category3词语列表&rsquo;,
&hellip;
}</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sentiwords</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;pos&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;开心&#39;</span><span class="p">,</span> <span class="s1">&#39;愉快&#39;</span><span class="p">,</span> <span class="s1">&#39;倍爽&#39;</span><span class="p">],</span>
              <span class="s1">&#39;neg&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;难过&#39;</span><span class="p">,</span> <span class="s1">&#39;悲伤&#39;</span><span class="p">],</span>
              <span class="s1">&#39;adv&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;倍&#39;</span><span class="p">]}</span>

<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;今天股票大涨，心情倍爽，非常开心啊。&#39;</span>
<span class="n">senti_by_diydict</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">sentiwords</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;pos_num&#39;: 1,
 &#39;neg_num&#39;: 0,
 &#39;adv_num&#39;: 1,
 &#39;stopword_num&#39;: 4,
 &#39;sentence_num&#39;: 2,
 &#39;word_num&#39;: 12}
</code></pre></div><p><br><br></p>
<h3 id="44-注意">4.4 注意</h3>
<p><strong>返回结果</strong>:  <strong>num</strong>表示词语出现次数； score是考虑副词、否定词对情感的修饰，结果不是词频，是情感类别的得分。</p>
<p><br><br></p>
<h2 id="五similarity">五、similarity</h2>
<p>使用cosine、jaccard、miniedit等计算两文本的相似度，算法实现参考自</p>
<blockquote>
<p>Cohen, Lauren, Christopher Malloy, and Quoc Nguyen. Lazy prices. No. w25084. National Bureau of Economic Research, 2018.</p>
</blockquote>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">from cntext.similarity import similarity_score

text1 = &#39;编程真好玩编程真好玩&#39;
text2 = &#39;游戏真好玩编程真好玩&#39;

similarity_score(text1, text2)
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;Sim_Cosine&#39;: 0.816496580927726,
 &#39;Sim_Jaccard&#39;: 0.6666666666666666,
 &#39;Sim_MinEdit&#39;: 1,
 &#39;Sim_Simple&#39;: 0.9183673469387755}
</code></pre></div><p><br><br></p>
<h2 id="六visualization">六、visualization</h2>
<p>文本信息可视化，含wordcloud、wordshiftor</p>
<ul>
<li>wordcloud 词云图</li>
<li>wordshiftor 两文本词移图</li>
</ul>
<h3 id="61-wordcloudtext-title-html_path">6.1 wordcloud(text, title, html_path)</h3>
<ul>
<li>text:  中文文本字符串数据</li>
<li>title:  词云图标题</li>
<li>html_path:  词云图html文件存储路径</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">cntext.visualization</span> <span class="kn">import</span> <span class="n">wordcloud</span>

<span class="n">text1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;在信息化时代，各种各样的数据被广泛采集和利用，有些数据看似无关紧要甚至好像是公开的，但同样关乎国家安全。11月1日是《反间谍法》颁布实施七周年。近年来，国家安全机关按照《反间谍法》《数据安全法》有关规定，依法履行数据安全监管职责，在全国范围内开展涉外数据专项执法行动，发现一些境外数据公司长期、大量、实时搜集我境内船舶数据，数据安全领域的“商业间谍”魅影重重。
</span><span class="s2">
</span><span class="s2">2020年6月，国家安全机关在反间谍专项行动中发现，有境外数据公司通过网络在境内私下招募“数据贡献员”。广东省湛江市国家安全局据此开展调查，在麻斜军港附近发现有可疑的无线电设备在持续搜集湛江港口舰船数据，并通过互联网实时传往境外。在临近海港的一个居民楼里，国家安全机关工作人员最终锁定了位置。
</span><span class="s2">
</span><span class="s2">一套简易的无线电设备是AIS陆基基站，用来接收AIS系统发射的船舶数据。AIS系统是船舶身份自动识别系统，国际海事组织要求300总吨以上船舶必须强制安装。船只在航行过程中，通过AIS系统向其他船只和主管部门发送船只航向、航速、目的港等信息，用于航行避让、交通导航、轨迹回溯等功能。国家安全机关查获的设备虽然看上去简陋，功能却十分强大。
</span><span class="s2">
</span><span class="s2">国家安全机关进一步调查发现，这个基站的来历并不简单。2016年，湛江市的无线电爱好者郑某偶然收到一封境外某海事数据公司发来的邀请邮件。
</span><span class="s2">
</span><span class="s2">作为资深的无线电爱好者，能免费领取价值几千元的设备还能获取更多的船舶信息，郑某当然心动。而且，这个基站的架设也非常容易，只要简单组装连上家里的网络，自己的任务就算完成。郑某马上浏览了这家公司申请无线电设备的页面，并按对方要求填写了信息。
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">wordcloud</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text1</span><span class="p">,</span> 
          <span class="n">title</span><span class="o">=</span><span class="s1">&#39;词云图测试&#39;</span><span class="p">,</span> 
          <span class="n">html_path</span><span class="o">=</span><span class="s1">&#39;output/词云图测试.html&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>

<figure >
    
        <img src="img/wordcloud.png" width="800" />
    
    
</figure>

<br>
<h3 id="62-wordshiftortext1-text2-title-top_n-matplotlib_family">6.2 wordshiftor(text1, text2, title, top_n, matplotlib_family)</h3>
<ul>
<li>text1:  文本数据1；字符串</li>
<li>text2:  文本数据2；字符串</li>
<li>title:  词移图标题</li>
<li>top_n:  显示最常用的前n词； 默认值15</li>
<li>matplotlib_family matplotlib中文字体，默认&quot;Arial Unicode MS&quot;；如绘图字体乱码请，请参考下面提示</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">text1</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;在信息化时代，各种各样的数据被广泛采集和利用，有些数据看似无关紧要甚至好像是公开的，但同样关乎国家安全。11月1日是《反间谍法》颁布实施七周年。近年来，国家安全机关按照《反间谍法》《数据安全法》有关规定，依法履行数据安全监管职责，在全国范围内开展涉外数据专项执法行动，发现一些境外数据公司长期、大量、实时搜集我境内船舶数据，数据安全领域的“商业间谍”魅影重重。
</span><span class="s2">
</span><span class="s2">2020年6月，国家安全机关在反间谍专项行动中发现，有境外数据公司通过网络在境内私下招募“数据贡献员”。广东省湛江市国家安全局据此开展调查，在麻斜军港附近发现有可疑的无线电设备在持续搜集湛江港口舰船数据，并通过互联网实时传往境外。在临近海港的一个居民楼里，国家安全机关工作人员最终锁定了位置。
</span><span class="s2">
</span><span class="s2">一套简易的无线电设备是AIS陆基基站，用来接收AIS系统发射的船舶数据。AIS系统是船舶身份自动识别系统，国际海事组织要求300总吨以上船舶必须强制安装。船只在航行过程中，通过AIS系统向其他船只和主管部门发送船只航向、航速、目的港等信息，用于航行避让、交通导航、轨迹回溯等功能。国家安全机关查获的设备虽然看上去简陋，功能却十分强大。
</span><span class="s2">
</span><span class="s2">国家安全机关进一步调查发现，这个基站的来历并不简单。2016年，湛江市的无线电爱好者郑某偶然收到一封境外某海事数据公司发来的邀请邮件。
</span><span class="s2">
</span><span class="s2">作为资深的无线电爱好者，能免费领取价值几千元的设备还能获取更多的船舶信息，郑某当然心动。而且，这个基站的架设也非常容易，只要简单组装连上家里的网络，自己的任务就算完成。郑某马上浏览了这家公司申请无线电设备的页面，并按对方要求填写了信息。
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>


<span class="n">text2</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">通知强调，各地商务主管部门要紧紧围绕保供稳价工作目标，压实“菜篮子”市长负责制，细化工作措施；强化横向协作与纵向联动，加强与有关部门的工作协调，形成工作合力；建立完善省际间和本地区联保联供机制，健全有关工作方案，根据形势及时开展跨区域调运；加强市场运行监测，每日跟踪蔬菜、肉类等重点生活必需品供求和价格变化情况，及时预测，及早预警。
</span><span class="s2">
</span><span class="s2">通知要求，各地支持鼓励大型农产品流通企业与蔬菜、粮油、畜禽养殖等农产品生产基地建立紧密合作关系，签订长期供销协议；耐储蔬菜要提前采购，锁定货源，做好本地菜与客菜之间，北菜与南菜之间、设施菜与露天菜之间的梯次轮换和衔接供应；健全完备本地肉类储备规模及管理制度；北方省份要按时完成本年度冬春蔬菜储备计划，南方省份要根据自身情况建立完善蔬菜储备；及时投放肉类、蔬菜等生活必需品储备，补充市场供应。
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="kn">from</span> <span class="nn">cntext.visualization</span> <span class="kn">import</span> <span class="n">wordshiftor</span>

<span class="n">wordshiftor</span><span class="p">(</span><span class="n">text1</span><span class="o">=</span><span class="n">text1</span><span class="p">,</span> 
            <span class="n">text2</span><span class="o">=</span><span class="n">text2</span><span class="p">,</span> 
            <span class="n">title</span><span class="o">=</span><span class="s1">&#39;两文本对比&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>

<figure >
    
        <img src="img/wordshiftor.png" width="800" />
    
    
</figure>

<h3 id="63-textpictitlepython测试-subtitle使用python生成图片-fontalibaba-puhuiti-boldotf-titlesize18-subsize14">6.3 textpic(title=&lsquo;PYTHON测试&rsquo;, subtitle=&lsquo;使用Python生成图片&rsquo;, font=&lsquo;Alibaba-PuHuiTi-Bold.otf&rsquo;, titlesize=1.8, subsize=14)</h3>
<ul>
<li>title:  主标题</li>
<li>subtitle: 副标题</li>
<li>font:  本地中文字体路径</li>
<li>titlesize: 主标题字体大小</li>
<li>subsize: 副标题字体大小</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">textpic</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;PYTHON测试&#39;</span><span class="p">,</span> 
        <span class="n">subtitle</span><span class="o">=</span><span class="s1">&#39;使用Python生成图片&#39;</span><span class="p">,</span> 
        <span class="n">font</span><span class="o">=</span><span class="s1">&#39;data/Alibaba-PuHuiTi-Bold.otf&#39;</span><span class="p">,</span> 
        <span class="n">titlesize</span><span class="o">=</span><span class="mf">1.8</span><span class="p">,</span> 
        <span class="n">subsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/result.png" width="800" />
    
    
</figure>

<br>
<p><strong>注意</strong></p>
<blockquote>
<p>设置参数matplotlib_family，需要先运行下面代码获取本机字体列表
from matplotlib.font_manager import FontManager
mpl_fonts = set(f.name for f in FontManager().ttflist)
print(mpl_fonts)</p>
</blockquote>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugging Face | 自然语言处理平台</title>
      <link>https://textdata.cn/blog/huggingface_test/</link>
      <pubDate>Sun, 07 Nov 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/huggingface_test/</guid>
      <description>十行以内代码实现任意NLP功能</description>
      <content:encoded><![CDATA[<p>Huggingface（抱抱脸）总部位于纽约，是一家专注于自然语言处理、人工智能和分布式系统的创业公司。他们所提供的聊天机器人技术一直颇受欢迎，但更出名的是他们在NLP开源社区上的贡献。</p>
<p>Huggingface一直致力于自然语言处理NLP技术的平民化(democratize)，希望每个人都能用上最先进(SOTA, state-of-the-art)的NLP技术，而非困窘于训练资源的匮乏。</p>
<p><strong>Hugging Face所有模型的地址</strong></p>
<p><a href="https://huggingface.co/models">https://huggingface.co/models</a></p>
<p>你可以在这里下载所需要的模型，也可以上传你微调之后用于特定task的模型。</p>
<br>
<p><strong>Hugging Face使用文档的地址</strong></p>
<p><a href="https://huggingface.co/transformers/master/index.html">https://huggingface.co/transformers/master/index.html</a></p>
<p><br><br></p>
<h2 id="英汉互译">英汉互译</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">zh2en_model</span> <span class="o">=</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-zh-en&#39;</span><span class="p">)</span>
<span class="n">zh2en_tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-zh-en&#39;</span><span class="p">)</span>
<span class="n">zh2en_translation</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;translation_zh_to_en&#39;</span><span class="p">,</span> 
                       <span class="n">model</span><span class="o">=</span><span class="n">zh2en_model</span><span class="p">,</span> 
                       <span class="n">tokenizer</span><span class="o">=</span><span class="n">zh2en_tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">zh2en_translation</span><span class="p">(</span><span class="s1">&#39;Python是一门非常强大的编程语言!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>[{'translation_text': 'Python is a very powerful programming language!'}]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">en2zh_model</span> <span class="o">=</span> <span class="n">AutoModelForSeq2SeqLM</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-en-zh&#39;</span><span class="p">)</span>
<span class="n">en2zh_tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;Helsinki-NLP/opus-mt-en-zh&#39;</span><span class="p">)</span>

<span class="n">en2zh_translation</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;translation_en_to_zh&#39;</span><span class="p">,</span> 
                       <span class="n">model</span><span class="o">=</span><span class="n">en2zh_model</span><span class="p">,</span> 
                       <span class="n">tokenizer</span><span class="o">=</span><span class="n">en2zh_tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">en2zh_translation</span><span class="p">(</span><span class="s1">&#39;Python is a very powerful programming language!&#39;</span><span class="p">)</span>
</code></pre></div><pre><code>[{'translation_text': 'Python是一个非常强大的编程语言!'}]
</code></pre>
<p><br><br></p>
<h2 id="文本分类">文本分类</h2>
<p>模型 <strong>uer/roberta-base-finetuned-chinanews-chinese</strong>是使用5个中文文本分类数据集训练得到</p>
<ul>
<li>京东full、京东binary和大众点评数据集包含不同情感极性的用户评论数据。</li>
<li>凤凰网 和 China Daily 包含不同主题类的新闻文本数据</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoModelForSequenceClassification</span><span class="p">,</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">AutoModelForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;uer/roberta-base-finetuned-chinanews-chinese&#39;</span><span class="p">)</span>
<span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;uer/roberta-base-finetuned-chinanews-chinese&#39;</span><span class="p">)</span>
<span class="n">text_classification</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;sentiment-analysis&#39;</span><span class="p">,</span> 
                               <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span> 
                               <span class="n">tokenizer</span><span class="o">=</span><span class="n">tokenizer</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_text</span> <span class="o">=</span> <span class="s2">&#34;上证指数大涨2%&#34;</span>

<span class="n">text_classification</span><span class="p">(</span><span class="n">test_text</span><span class="p">,</span> <span class="n">return_all_scores</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>[[{'label': 'mainland China politics', 'score': 0.0002807585697155446},
  {'label': 'Hong Kong - Macau politics', 'score': 0.00015504546172451228},
  {'label': 'International news', 'score': 6.818029214628041e-05},
  {'label': 'financial news', 'score': 0.9991051554679871},
  {'label': 'culture', 'score': 0.00011297615128569305},
  {'label': 'entertainment', 'score': 0.00012184812658233568},
  {'label': 'sports', 'score': 0.0001558474759804085}]]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">test_text</span> <span class="o">=</span> <span class="s2">&#34;Python是一门强大的编程语言&#34;</span>
<span class="n">text_classification</span><span class="p">(</span><span class="n">test_text</span><span class="p">,</span> <span class="n">return_all_scores</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><pre><code>[[{'label': 'mainland China politics', 'score': 0.02050291746854782},
  {'label': 'Hong Kong - Macau politics', 'score': 0.0030984438490122557},
  {'label': 'International news', 'score': 0.005687597207725048},
  {'label': 'financial news', 'score': 0.03360358253121376},
  {'label': 'culture', 'score': 0.913349986076355},
  {'label': 'entertainment', 'score': 0.010810119099915028},
  {'label': 'sports', 'score': 0.012947351671755314}]]
</code></pre>
<p><br><br></p>
<h2 id="代码下载">代码下载</h2>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211108HuggingFace%E5%AD%A6%E4%B9%A0">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211108HuggingFace学习</a></p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>让Python代码更简洁的pipe包</title>
      <link>https://textdata.cn/blog/pipe_make_python_code_more_clean/</link>
      <pubDate>Sat, 30 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/pipe_make_python_code_more_clean/</guid>
      <description>短小精悍pipe</description>
      <content:encoded><![CDATA[<h1 id="pipe">Pipe</h1>
<p><strong>map</strong>和<strong>filter</strong>是处理iterable数据最好用的函数，但却让代码看起来很乱，使代码可读性大大降低。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#对arr筛选偶数，并对偶数乘以2</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">,</span> <span class="n">arr</span><span class="p">)))</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<p>刚刚的iterable的例子，其实可以使用pipe库中的 <code>|</code> 来应用多种方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span>
    <span class="o">|</span><span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
    <span class="o">|</span><span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<h2 id="pipe是什么">pipe是什么？</h2>
<p>pipe是python中的管道操作库，可以使数据分析多个步骤(函数）像管道(流水线)一样上下衔接，共同完成一个数据分析任务。</p>
<p>我喜欢pipe是因为它让iterable代码变得干净整洁，可读性大大增强。后面我会通过几个案例让大家快速掌握pipe库。首先先安装pipe</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pipe</span>
</code></pre></div><br>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/blob/master/20211115%E4%BD%BF%E7%94%A8pipe%E6%92%B0%E5%86%99%E5%B9%B2%E5%87%80%E7%9A%84Python%E4%BB%A3%E7%A0%81.ipynb">点击下载本文代码</a></p>
<h2 id="where">where</h2>
<p>对iterable中的数据进行筛选操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#把偶数筛选出来</span>
<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div><pre><code>[2, 4]
</code></pre>
<h2 id="select">select</h2>
<p>对iterable中的数据进行某种操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1">#对arr中的每个数 乘以2</span>
<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div><pre><code>[2, 4, 6, 8, 10]
</code></pre>
<p>现在你可能会有疑问： 为何在Python已拥有map和filter情况下， 还用pipe库中的 select和 where呢？</p>
<p>因为可以使用管道在一个方法后面加入另一个方法， 加不止1次!!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">where</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> 
     <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#筛选arr中的偶数</span>
     <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">#对偶数乘以2</span>
    <span class="p">)</span>
</code></pre></div><pre><code>[4, 8]
</code></pre>
<h1 id="非折叠iterable">非折叠iterable</h1>
<h2 id="chain">chain</h2>
<p>对于嵌套结构的iterable数据，最难任务之一就是将其展平。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">chain</span>

<span class="n">nested</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,[</span><span class="mi">3</span><span class="p">]],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>

<span class="nb">list</span><span class="p">((</span><span class="n">nested</span> <span class="o">|</span> <span class="n">chain</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 2, [3], 4, 5]
</code></pre>
<p>即时经过上述操作， 依然不是完全展开。 为了处理深度嵌套数据， 可以使用traverse方法。</p>
<h2 id="traverse">traverse</h2>
<p>遍历traverse方法可以用递归的方式展开 嵌套对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span>

<span class="n">nested</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,[</span><span class="mi">3</span><span class="p">]],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>

<span class="nb">list</span><span class="p">((</span><span class="n">nested</span> <span class="o">|</span> <span class="n">traverse</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5]
</code></pre>
<p>现在我们从抽取字典values中的列表，并将其展平</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span><span class="p">,</span> <span class="n">select</span>

<span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;grape&#34;</span><span class="p">,</span> <span class="s2">&#34;price&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">}</span>
<span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">fruits</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;price&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">traverse</span><span class="p">)</span>
</code></pre></div><pre><code>[2, 5, 4, 5]
</code></pre>
<h2 id="groupby">groupby</h2>
<p>有时候，需要对列表中的数据进行分组，这可能用到groupby方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">groupby</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">groupby</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s2">&#34;偶数&#34;</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="s2">&#34;奇数&#34;</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])})</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'偶数': [2, 4, 6, 8]}, {'奇数': [1, 3, 5, 7, 9]}]
</code></pre>
<p>在上面的代码中， 我们使用groupby将数字分为奇数组和偶数组。groupby方法输出的结果如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;偶数&#39;, &lt;itertools._grouper at 0x10bd54550&gt;),
 (&#39;奇数&#39;, &lt;itertools._grouper at 0x10bd4d350&gt;)]
 
</code></pre></div><p>接下来，使用select将元素为元组的列表转化为字典，其中</p>
<ul>
<li>元组中第1位置做字典的关键词</li>
<li>元组中第2位置做字典的值</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[{&#39;偶数&#39;: [2, 4, 6, 8]}, {&#39;奇数&#39;: [1, 3, 5, 7, 9]}]
</code></pre></div><p>Cool！为了range值大于2， 我们在select内增加where条件操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">select</span><span class="p">,</span> <span class="n">groupby</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">groupby</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s2">&#34;偶数&#34;</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="s2">&#34;奇数&#34;</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> 
                                   <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">)</span>
                                  <span class="p">)</span>
                       <span class="p">}</span>
            <span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'偶数': [4, 6, 8]}, {'奇数': [3, 5, 7, 9]}]
</code></pre>
<h2 id="dedup">dedup</h2>
<p>使用Key对list数据进行去重</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">dedup</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">dedup</span><span class="p">)</span>
</code></pre></div><pre><code>[1, 2, 3, 4, 5, 6, 7, 9]
</code></pre>
<p>这看起来没啥新意，毕竟python内置的set函数即可实现刚刚的需求。然而，dedup通过key获得列表中的唯一元素。</p>
<p>例如，<strong>获得小于5的唯一元素， 且另一个元素大于或等于5</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">dedup</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="n">arr</span> <span class="o">|</span> <span class="n">dedup</span><span class="p">(</span><span class="k">lambda</span> <span class="n">key</span><span class="p">:</span> <span class="n">key</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">))</span>
</code></pre></div><pre><code>[1, 5]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pipe</span> <span class="kn">import</span> <span class="n">traverse</span><span class="p">,</span> <span class="n">select</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;grape&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="kc">None</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="nb">list</span><span class="p">(</span>
    <span class="n">data</span>
    <span class="o">|</span> <span class="n">dedup</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="n">fruit</span><span class="p">:</span> <span class="n">fruit</span><span class="p">[</span><span class="s2">&#34;count&#34;</span><span class="p">])</span>
    <span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="k">lambda</span> <span class="n">count</span><span class="p">:</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="nb">int</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div><pre><code>[2, 4]
</code></pre>
<br>
<h1 id="了解课程">了解课程</h1>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>automa插件|无编程基础也可自动化办公</title>
      <link>https://textdata.cn/blog/automa_rpa/</link>
      <pubDate>Wed, 27 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/automa_rpa/</guid>
      <description>automa从自动填写表单、执行重复性任务、截取屏幕截图到抓取网站数据，您想使用此扩展程序做什么取决于您。您甚至可以安排自动化执行的时间。</description>
      <content:encoded><![CDATA[<p>如果大家之前了解selenium库，那么antoma不用过多介绍，您就能知道ta是做浏览器自动化的。automa通过点击连接卡片实现浏览器的自动化运行。</p>
<p>没有做不到，只有想不到。从自动填写表单、执行重复性任务、截取屏幕截图到抓取网站数据，您想使用此扩展程序做什么取决于您。您甚至可以安排自动化执行的时间。下面我们看一下开发者制作的操作视频</p>
<video id="video" controls="" preload="none" poster="封面">
  <source id="mp4" src="Automa.mp4" type="video/mp4">
</videos>
<p>从视频中，大家可以看到，工作流可执行表单填写、屏幕截图、网站数据抓取等各种重复性工作。如果大家感兴趣，可以试着用一下<strong>automa</strong>。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>KeyBERT | 关键词发现</title>
      <link>https://textdata.cn/blog/keybert_tutorial/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/keybert_tutorial/</guid>
      <description>使用 BERT 嵌入 和 简单余弦相似度 来查找文档中与文档本身最相似的短语，自动挖掘文本中的关键词</description>
      <content:encoded><![CDATA[<p>尽管已经有很多方法可用于关键字生成（例如，Rake、YAKE!、TF-IDF 等），但我想创建一个非常基本但功能强大的方法来提取关键字和关键短语。这就是 KeyBERT 的用武之地！它使用 <strong>BERT 嵌入</strong> 和 <strong>简单余弦相似度</strong> 来查找文档中与文档本身最相似的短语。</p>
<p>KeyBERT步骤</p>
<ol>
<li>首先使用 BERT 提取文档嵌入以获得<strong>文档级向量表示</strong>。</li>
<li>随后，为 N-gram 词/短语提取<strong>词向量</strong>。</li>
<li>然后，我们使用余弦相似度来找到与文档最相似的单词/短语。</li>
<li>最后可以将最相似的词识别为最能描述整个文档的词。</li>
</ol>
<h2 id="代码下载">代码下载</h2>
<p><a href="KeyBERT%E5%AD%A6%E4%B9%A0.ipynb">click to download the code</a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">keybert</span><span class="o">==</span><span class="mf">0.5.0</span>
</code></pre></div><br>
<h2 id="初始化模型">初始化模型</h2>
<p>KeyBERT库需要安装配置spacy语言模型</p>
<p>具体参考<strong>公众号：大邓和他的Python</strong> 2021-10-29 的推文 查看spacy配置方法</p>
<p>初始化模型</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">keybert</span> <span class="kn">import</span> <span class="n">KeyBERT</span>
<span class="kn">import</span> <span class="nn">spacy</span>
<span class="kn">import</span> <span class="nn">jieba</span>


<span class="n">zh_model</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;zh_core_web_sm&#34;</span><span class="p">)</span>
<span class="n">bertModel</span> <span class="o">=</span> <span class="n">KeyBERT</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">zh_model</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="准备数据">准备数据</h2>
<p>中文测试数据需要先分词，而后构造成类英文的语言结构(用空格间隔的文本)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 测试数据</span>
<span class="n">doc</span> <span class="o">=</span>  <span class="s2">&#34;&#34;&#34;时值10月25日抗美援朝纪念日，《长津湖》片方发布了“纪念中国人民志愿军抗美援朝出国作战71周年特别短片”，再次向伟大的志愿军致敬！
</span><span class="s2">　　电影《长津湖》全情全景地还原了71年前抗美援朝战场上那场史诗战役，志愿军奋不顾身的英勇精神令观众感叹：“岁月峥嵘英雄不灭，丹心铁骨军魂永存！”影片上映以来票房屡创新高，目前突破53亿元，暂列中国影史票房总榜第三名。
</span><span class="s2">　　值得一提的是，这部影片的很多主创或有军人的血脉，或有当兵的经历，或者家人是军人。提起这些他们也充满自豪，影片总监制黄建新称：“当兵以后会有一种特别能坚持的劲儿。”饰演雷公的胡军透露：“我父亲曾经参加过抗美援朝，还得了一个三等功。”影片历史顾问王树增表示：“我当了五十多年的兵，我的老部队就是上甘岭上下来的，那些老兵都是我的偶像。”
</span><span class="s2">　　“身先士卒卫华夏家国，血战无畏护山河无恙。”片中饰演七连连长伍千里的吴京感叹：“要永远记住这些先烈们，他们给我们带来今天的和平。感谢他们的付出，才让我们有今天的幸福生活。”饰演新兵伍万里的易烊千玺表示：“战争的残酷、碾压式的伤害，其实我们现在的年轻人几乎很难能体会到，希望大家看完电影后能明白，是那些先辈们的牺牲奉献，换来了我们的现在。”
</span><span class="s2">　　影片对战争群像的恢弘呈现，对个体命运的深切关怀，令许多观众无法控制自己的眼泪，观众称：“当看到影片中的惊险战斗场面，看到英雄们壮怀激烈的拼杀，为国捐躯的英勇无畏和无悔付出，我明白了为什么说今天的幸福生活来之不易。”（记者 王金跃）
</span><span class="s2">        &#34;&#34;&#34;</span>


<span class="n">doc</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">doc</span><span class="p">))</span>


<span class="c1"># 关键词提取</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">bertModel</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> 
                                      <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                                      <span class="n">stop_words</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                                      <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">keywords</span>
</code></pre></div><pre><code>[('铁骨', 0.5028),
 ('纪念日', 0.495),
 ('丹心', 0.4894),
 ('战役', 0.4869),
 ('影史', 0.473),
 ('父亲', 0.4576),
 ('票房', 0.4571),
 ('偶像', 0.4497),
 ('精神', 0.4436),
 ('家国', 0.4373)]
</code></pre>
<br>
<h2 id="常用参数">常用参数</h2>
<p><strong>bertModel.extract_keywords(docs, keyphrase_ngram_range, stop_words, top_n)</strong></p>
<ul>
<li><strong>docs</strong> 文档字符串（空格间隔词语的字符串）</li>
<li><strong>keyphrase_ngram_range</strong> 设置ngram，默认(1, 1)</li>
<li><strong>stop_words</strong> 停用词列表</li>
<li><strong>top_n</strong> 显示前n个关键词，默认5</li>
<li><strong>highlight</strong> 可视化标亮关键词，默认False</li>
<li>use_maxsum: 默认False;是否使用Max Sum Similarity作为关键词提取标准，</li>
<li>use_mmr: 默认False;是否使用Maximal Marginal Relevance (MMR) 作为关键词提取标准</li>
<li>diversity 如果use_mmr=True，可以设置该参数。参数取值范围从0到1</li>
</ul>
<br>
<p>对于<strong>keyphrase_ngram_range</strong>参数，</p>
<ul>
<li>(1, 1) 只单个词， 如&quot;抗美援朝&quot;, &ldquo;纪念日&quot;是孤立的两个词</li>
<li>(2, 2) 考虑词组， 如出现有意义的词组 &ldquo;抗美援朝 纪念日&rdquo;</li>
<li>(1, 2) 同时考虑以上两者情况</li>
</ul>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 关键词提取</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">bertModel</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> 
                                      <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                      <span class="n">stop_words</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                                      <span class="n">diversity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span> 
                                      <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">keywords</span>
</code></pre></div><pre><code>[('影片 总监制', 0.5412),
 ('丹心 铁骨', 0.5339),
 ('抗美援朝 纪念日', 0.5295),
 ('长津湖 片方', 0.5252),
 ('志愿军 致敬', 0.5207),
 ('老兵 偶像', 0.5192),
 ('票房 创新', 0.5108),
 ('军人 血脉', 0.5084),
 ('家国 血战', 0.4946),
 ('家人 军人', 0.4885)]
</code></pre>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#可视化</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">bertModel</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> 
                                      <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                      <span class="n">stop_words</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                                      <span class="n">highlight</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
                                      <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="highlight.png" alt=""  />
</p>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 关键词提取</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">bertModel</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> 
                                      <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                      <span class="n">stop_words</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                                      <span class="n">use_mmr</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">diversity</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> 
                                      <span class="n">top_n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

<span class="n">keywords</span>
</code></pre></div><pre><code>[('影片 总监制', 0.5412),
 ('长津湖 片方', 0.5252),
 ('抗美援朝 纪念日', 0.5295),
 ('丹心 铁骨', 0.5339),
 ('志愿军 致敬', 0.5207),
 ('老兵 偶像', 0.5192),
 ('票房 创新', 0.5108),
 ('军人 血脉', 0.5084),
 ('家国 血战', 0.4946),
 ('家人 军人', 0.4885)]
</code></pre>
<br>
<h2 id="英文keybert">英文KeyBERT</h2>
<p>同样需要配置spacy，参考<strong>公众号：大邓和他的Python</strong> 2021-10-29 的推文 查看spacy配置方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">keybert</span> <span class="kn">import</span> <span class="n">KeyBERT</span>
<span class="kn">import</span> <span class="nn">spacy</span>

<span class="n">en_model</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&#34;en_core_web_sm&#34;</span><span class="p">)</span>

<span class="n">doc</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">         Supervised learning is the machine learning task of learning a function that
</span><span class="s2">         maps an input to an output based on example input-output pairs. It infers a
</span><span class="s2">         function from labeled training data consisting of a set of training examples.
</span><span class="s2">         In supervised learning, each example is a pair consisting of an input object
</span><span class="s2">         (typically a vector) and a desired output value (also called the supervisory signal). 
</span><span class="s2">         A supervised learning algorithm analyzes the training data and produces an inferred function, 
</span><span class="s2">         which can be used for mapping new examples. An optimal scenario will allow for the 
</span><span class="s2">         algorithm to correctly determine the class labels for unseen instances. This requires 
</span><span class="s2">         the learning algorithm to generalize from the training data to unseen situations in a 
</span><span class="s2">         &#39;reasonable&#39; way (see inductive bias).
</span><span class="s2">      &#34;&#34;&#34;</span>
<span class="n">kw_model</span> <span class="o">=</span> <span class="n">KeyBERT</span><span class="p">()</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="n">kw_model</span><span class="o">.</span><span class="n">extract_keywords</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">keyphrase_ngram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">keywords</span>
</code></pre></div><p>Run</p>
<pre><code>[('supervised learning', 0.6779),
 ('supervised', 0.6676),
 ('signal supervised', 0.6152),
 ('examples supervised', 0.6112),
 ('labeled training', 0.6013)]
</code></pre>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>BERTopic库 | 使用预训练模型做话题建模</title>
      <link>https://textdata.cn/blog/bertopic_tutorial/</link>
      <pubDate>Tue, 26 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/bertopic_tutorial/</guid>
      <description>使用BERT主题建模技术,可以对经管等领域文本数据进行主题(话题)建模。效果堪比LDA，但比LDA智能</description>
      <content:encoded><![CDATA[<p>BERT是自然语言处理领域最新的词向量技术，而BERTopic 是基于BERT词向量进行主题建模技术，它利用 Transformer 和 c-TF-IDF 来创建密集的集群，允许轻松解释主题，同时在主题描述中保留重要词。</p>
<p>BERTopic亮点</p>
<ul>
<li>支持引导式Guided</li>
<li>支持（半）监督式</li>
<li>支持动态主题。</li>
<li>支持可视化</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">bertopic</span><span class="o">==</span><span class="mf">0.10.0</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">cntext</span><span class="o">==</span><span class="mf">1.6.5</span>
</code></pre></div><p><br><br></p>
<h2 id="准备数据">准备数据</h2>
<p>这里使用的新闻数据集， 共2000条。 新闻类别涵 <code>'娱乐', '教育', '游戏', '财经', '时政', '时尚', '科技', '体育', '家居', '房产'</code>
这里假设大家不知道有10类新闻题材， 构建模型的时候不会用到label字段的数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;cnews.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 新闻题材</span>
<span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">unique</span><span class="p">())</span>

<span class="c1">#记录数</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<pre><code>['娱乐' '教育' '游戏' '财经' '时政' '时尚' '科技' '体育' '家居' '房产']
2000
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 各类题材的新闻记录数</span>
<span class="n">df</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">时政    120
科技    106
时尚    106
财经    105
家居    103
教育     97
娱乐     96
体育     95
房产     87
游戏     85
</code></pre></div><br>
<p>这里定义了一个清洗数据函数clean_text，需要注意BERTopic需要先将中文分词改造成类似英文文本格式（用空格间隔词语）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>

<span class="n">stopwords</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">load_pkl_dict</span><span class="p">(</span><span class="s1">&#39;STOPWORDS.pkl&#39;</span><span class="p">)[</span><span class="s1">&#39;STOPWORDS&#39;</span><span class="p">][</span><span class="s1">&#39;chinese&#39;</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">]</span>
    <span class="k">return</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>


<span class="n">test</span> <span class="o">=</span> <span class="s2">&#34;云南永善县级地震已致人伤间民房受损中新网月日电据云南昭通市防震减灾局官方网站消息截至日时云南昭通永善县级地震已造成人受伤其中重伤人轻伤人已全部送医院救治民房受损户间倒塌户间个乡镇所学校不同程度受损目前被损毁电力交通通讯设施已全部抢通修复当地已调拨帐篷顶紧急转移万人月日时分云南昭通永善县发生里氏级地震震源深度公里当地震感强烈此外成都等四川多地也有明显震感&#34;</span>

<span class="n">clean_text</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&#39;云南 永善县 级 地震 已致 伤间 民房 受损 中新网 日电 云南 昭通市 防震 减灾 局 官方网站 消息 日时 云南 昭通 永善县 级 地震 造成 受伤 重伤 轻伤 送 医院 救治 民房 受损 户间 倒塌 户间 乡镇 学校 不同 程度 受损 目前 损毁 电力 交通 通讯 设施 抢通 修复 调拨 帐篷 顶 紧急 转移 万人 时分 云南 昭通 永善县 发生 里氏 级 地震 震源 深度 公里 震感 强烈 成都 四川 多地 明显 震感&#39;
</code></pre></div><p>对2000条数据进行clean_text，得到的结果存储到content字段中。</p>
<p>我的macbook内存16G, 运行时间10s</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">clean_text</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="训练topic模型">训练Topic模型</h2>
<p>文本分析步骤包括构建特征工程和训练，在本文中，直接使用开源的预训练中文词向量，省去了特征模型的学习时间。</p>
<p>选取的与训练模型均为word2vec格式，这样方便我们使用gensim将其导入。</p>
<table>
<thead>
<tr>
<th>模型名</th>
<th>数据</th>
<th>预训练模型资源地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>sgns.zhihu.words.bz2</td>
<td>知乎</td>
<td>链接: <a href="https://pan.baidu.com/s/1BDxP28KL_23Odj9NWZGe-Q">https://pan.baidu.com/s/1BDxP28KL_23Odj9NWZGe-Q</a> 提取码: n1qq</td>
</tr>
<tr>
<td>sgns.wiki.words.bz2</td>
<td>中文维基百科</td>
<td>链接: <a href="https://pan.baidu.com/s/1B1sxHmPeIPJYiCuP1zrmMw">https://pan.baidu.com/s/1B1sxHmPeIPJYiCuP1zrmMw</a> 提取码: hofj</td>
</tr>
<tr>
<td>sgns.financial.words.bz2</td>
<td>金融</td>
<td>链接: <a href="https://pan.baidu.com/s/1L_hmGjZMY2ExBn9Vfc_eRg">https://pan.baidu.com/s/1L_hmGjZMY2ExBn9Vfc_eRg</a> 提取码: hhn6</td>
</tr>
<tr>
<td>sgns.renmin.words.bz2</td>
<td>人民日报</td>
<td>链接: <a href="https://pan.baidu.com/s/1VQIDrwZH3Y3Lpy4-smPutw">https://pan.baidu.com/s/1VQIDrwZH3Y3Lpy4-smPutw</a> 提取码: 3b53</td>
</tr>
<tr>
<td>sgns.sougou.words.bz2</td>
<td>搜狗新闻</td>
<td>链接: <a href="https://pan.baidu.com/s/15nCaeB41mwK0ZVLrukXpFQ">https://pan.baidu.com/s/15nCaeB41mwK0ZVLrukXpFQ</a> 提取码: 04en</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong>:</p>
<p>除了表格外的资源，还可以使用spacy现有的预训练模型。</p>
</blockquote>
<p>本文案例cnews.csv是新闻类数据，这里最好选择使用同样为新闻题材的文本训练出的模型，这样BERTopic效果会更精准一些。sgns.sougou.words.bz2是使用搜狗新闻数据训练的语言模型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="n">chinese_sougou_news_models</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;sgns.sogou.word.bz2&#39;</span><span class="p">,</span> <span class="n">unicode_errors</span><span class="o">=</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
<span class="n">chinese_sougou_news_models</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&lt;gensim.models.keyedvectors.KeyedVectors at 0x7f93e5b8cc10&gt;
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">bertopic</span> <span class="kn">import</span> <span class="n">BERTopic</span>


<span class="n">topic_model</span> <span class="o">=</span> <span class="n">BERTopic</span><span class="p">(</span><span class="n">language</span><span class="o">=</span><span class="s2">&#34;chinese (simplified)&#34;</span><span class="p">,</span> 
                       <span class="n">embedding_model</span><span class="o">=</span><span class="n">chinese_sougou_news_models</span><span class="p">,</span>
                       <span class="n">calculate_probabilities</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> 
                       <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>


<span class="n">docs</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
<span class="c1">#2000条进行fit_transform需要1min</span>
<span class="n">topics</span><span class="p">,</span> <span class="n">probs</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
</code></pre></div><pre><code>100%|██████████| 2000/2000 [01:31&lt;00:00, 21.91it/s]
2021-10-28 12:11:25,583 - BERTopic - Transformed documents to Embeddings
2021-10-28 12:11:34,582 - BERTopic - Reduced dimensionality with UMAP
2021-10-28 12:11:34,718 - BERTopic - Clustered UMAP embeddings with HDBSCAN


CPU times: user 1min 50s, sys: 7.7 s, total: 1min 57s
Wall time: 1min 43s
</code></pre>
<p><br><br></p>
<h2 id="主题模型方法">主题模型方法</h2>
<ul>
<li>topic_model.get_topic_info 查看各主题信息</li>
<li>topic_model.find_topics(term, top_n=5)  查找term最有可能所属话题</li>
<li>topic_model.get_topic(0) 查看Topic 0的特征词</li>
<li>topic_model.visualize_topics() 话题间距离的可视化</li>
<li>topic_model.visualize_distribution(probs[0]) 查看某条文本的主题分布</li>
<li>topic_model.visualize_hierarchy(top_n_topics=20) 主题层次聚类可视化</li>
<li>topic_model.visualize_barchart(topics=[1]) 显示主题1的词条形图</li>
<li>topic_model.visualize_heatmap(n_clusters=10) 主题相似度热力图</li>
<li>topic_model.visualize_term_rank() 可视化词语</li>
<li>topic_model.save()  保存主题模型</li>
<li>topic_model.reduce_topics()  压缩主题个数(合并相近的主题)</li>
</ul>
<h3 id="get_topic_info">.get_topic_info()</h3>
<p>查看BERTopic基于cnews.csv数据， 跑出的各主题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic_info</span><span class="p">()</span>
</code></pre></div><p><img loading="lazy" src="img/get_topic_info.png" alt=""  />
</p>
<br>
<h3 id="find_topicsterm">.find_topics(term)</h3>
<p>查看与词语【投资】最相关的主题，返回候选的最相思的5个主题id</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#</span>
<span class="n">similar_topics</span><span class="p">,</span> <span class="n">similarity</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">find_topics</span><span class="p">(</span><span class="s2">&#34;投资&#34;</span><span class="p">,</span> <span class="n">top_n</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">similar_topics</span>
</code></pre></div><p>Run</p>
<pre><code>[3, 9, 8, 10, 4]
</code></pre>
<br>
<h3 id="get_topic">.get_topic()</h3>
<p>查看id为3的主题信息（主题词及权重）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;基金&#39;, 0.15109221307919193),
 (&#39;投资&#39;, 0.042856192509064),
 (&#39;公司&#39;, 0.039785278320496976),
 (&#39;市场&#39;, 0.037072163603417835),
 (&#39;股票&#39;, 0.03230913401086524),
 (&#39;型基金&#39;, 0.02721898070238429),
 (&#39;收益&#39;, 0.025435672141638468),
 (&#39;投资者&#39;, 0.024633503649868493),
 (&#39;经理&#39;, 0.02458550023931051),
 (&#39;发行&#39;, 0.022672639068067168)]
</code></pre></div><br>
<h3 id="visualize_topics">.visualize_topics()</h3>
<p>可视化主题间距离</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">visualize_topics1</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_topics</span><span class="p">()</span>
<span class="c1">#可视化结果保存至html中，可以动态显示信息</span>
<span class="n">visualize_topics1</span><span class="o">.</span><span class="n">write_html</span><span class="p">(</span><span class="s1">&#39;visualize_topics.html&#39;</span><span class="p">)</span>
<span class="n">visualize_topics1</span>
</code></pre></div><p><img loading="lazy" src="img/visualize_topics1.png" alt=""  />
</p>
<p><a href="img/visualize_topics1.html">点击查看visualize_topics1.html</a></p>
<br>
<h3 id="visualize_distribution">.visualize_distribution()</h3>
<p>显示第一条新闻的主题概率分布</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">first_new_topic_probs</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_distribution</span><span class="p">(</span><span class="n">probs</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">first_new_topic_probs</span><span class="o">.</span><span class="n">write_html</span><span class="p">(</span><span class="s1">&#39;first_new_topic_probs.html&#39;</span><span class="p">)</span>
<span class="n">first_new_topic_probs</span>
</code></pre></div><p><img loading="lazy" src="img/first_new_topic_probs.png" alt=""  />

<a href="img/first_new_topic_probs.html">点击查看first_new_topic_probs.html</a></p>
<p>为了理解主题的潜在层次结构，我们可以使用 scipy.cluster.hierarchy 创建聚类并可视化它们之间的关系。 这有助于合并相似主题，达到降低主题模型主题数量nr_topics。</p>
<br>
<h3 id="visualize_hierarchytop_n_topics">.visualize_hierarchy(top_n_topics)</h3>
<p>话题层次聚类可视化，模型跑出12个主题，这里就按12进行分层聚类</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_hierarchy</span><span class="p">(</span><span class="n">top_n_topics</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
</code></pre></div><p><img loading="lazy" src="img/visualize_hierarchy.png" alt=""  />
</p>
<br>
<h3 id="visualize_barcharttopics">.visualize_barchart(topics)</h3>
<p>显示topics的词条形图</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_barchart</span><span class="p">(</span><span class="n">topics</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div><p><img loading="lazy" src="img/visualize_barchart.png" alt=""  />
</p>
<br>
<h3 id="visualize_heatmapn_clusters">.visualize_heatmap(n_clusters)</h3>
<p>话题相似热力图。BERTopic可将主题以embeddings形式（向量）表示， 因此我们可以应用余弦相似度来创建相似度矩阵。 每两两主题可进行余弦计算，最终结果将是一个矩阵，显示主题间的相似程度。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_similar_heatmap</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_heatmap</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>
<span class="n">topic_similar_heatmap</span><span class="o">.</span><span class="n">write_html</span><span class="p">(</span><span class="s1">&#39;topic_similar_heatmap.html&#39;</span><span class="p">)</span>
<span class="n">topic_similar_heatmap</span>
</code></pre></div><p><img loading="lazy" src="img/topic_similar_heatmap.png" alt=""  />

<a href="img/topic_similar_heatmap.html">点击查看topic_similar_heatmap.html</a></p>
<p>通过根据每个主题表示的 c-TF-IDF 分数创建条形图来可视化主题的选定词语。 从主题之间和主题内的相对 c-TF-IDF 分数中获得见解。 此外，可以轻松地将主题表示相互比较。</p>
<br>
<h3 id="visualize_term_rank">.visualize_term_rank()</h3>
<p>通过根据每个主题表示的 c-TF-IDF 分数创建条形图来可视化主题的选定词语。</p>
<p>从主题之间和主题内的相对 c-TF-IDF 分数中获得见解。</p>
<p>此外，可以轻松地将主题表示相互比较。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">term_score_decline</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">visualize_term_rank</span><span class="p">()</span>
<span class="n">term_score_decline</span><span class="o">.</span><span class="n">write_html</span><span class="p">(</span><span class="s1">&#39;term_score_decline.html&#39;</span><span class="p">)</span>
<span class="n">term_score_decline</span>
</code></pre></div><p><img loading="lazy" src="img/term_score_decline.png" alt=""  />

<a href="img/term_score_decline.html">点击查看term_score_decline.html</a></p>
<h3 id="update_topics">.update_topics()</h3>
<p>更新主题模型。当您训练了一个模型并查看了代表它们的主题和单词时，您可能对表示不满意。 也许您忘记删除停用词，或者您想尝试不同的 n_gram_range。 我们可以使用函数 update_topics 使用 c-TF-IDF 的新参数更新主题表示。</p>
<p>使用.update_topics()更新，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">update_topics</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="n">topics</span><span class="p">,</span> <span class="n">n_gram_range</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div><p>topic_model得到了更新，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">similar_topics</span><span class="p">,</span> <span class="n">similarity</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">find_topics</span><span class="p">(</span><span class="s2">&#34;手机&#34;</span><span class="p">,</span> <span class="n">top_n</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>

<span class="n">similar_topics</span>
</code></pre></div><p>Run</p>
<pre><code>[2, 7, 4, 1, 5]
</code></pre>
<p>查看话题2的信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">topic_model</span><span class="o">.</span><span class="n">get_topic</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[(&#39;功能&#39;, 0.022132351014298786),
 (&#39;采用&#39;, 0.02136925357979149),
 (&#39;像素&#39;, 0.020797285140907094),
 (&#39;拍摄&#39;, 0.017850841110848677),
 (&#39;机身&#39;, 0.015056931248982912),
 (&#39;英寸&#39;, 0.014624438184138326),
 (&#39;佳能&#39;, 0.012857768505732597),
 (&#39;支持&#39;, 0.012600856600766349),
 (&#39;光学&#39;, 0.012462085658291079),
 (&#39;相机&#39;, 0.011832978982454568)]
</code></pre></div><p>模型保存</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Save model</span>
<span class="c1">#model.save(&#34;my_model&#34;)</span>
<span class="c1"># Load model</span>
<span class="c1">#my_model = BERTopic.load(&#34;my_model&#34;)</span>
</code></pre></div><br>
<h3 id="reduce_topics">.reduce_topics()</h3>
<p>压缩主题数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">new_topics</span><span class="p">,</span> <span class="n">new_probs</span> <span class="o">=</span> <span class="n">topic_model</span><span class="o">.</span><span class="n">reduce_topics</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">topics</span><span class="p">,</span> <span class="n">probs</span><span class="p">,</span> <span class="n">nr_topics</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<pre><code>2021-10-28 12:28:01,976 - BERTopic - Reduced number of topics from 20 to 11
</code></pre>
<br>
<h2 id="代码数据">代码数据</h2>
<p><a href="bertopic_tutorial.zip">click to download</a></p>
<br>
<h2 id="总结">总结</h2>
<p>本文使用中文文本数据展示BERTopic部分功能，如果对英文数据感兴趣，可以前往  <a href="https://github.com/MaartenGr/BERTopic">https://github.com/MaartenGr/BERTopic</a> 深入学习。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Shifterator库 | 词移图分辨两文本用词风格差异</title>
      <link>https://textdata.cn/blog/shifterator_text_vis/</link>
      <pubDate>Tue, 26 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/shifterator_text_vis/</guid>
      <description>图文代码理解两文本用词风格差异</description>
      <content:encoded><![CDATA[<p>以往对比两个文本数据差异，比较简单的技术实现方法是生成两文个词云图，但是词云图无法直观显示词语层面的权重。</p>
<p><strong>Shifterator</strong>包提供了构建词移图的功能，垂直条形图可以量化哪些词会导致<strong>两个文本</strong>之间的成对差异以及它们如何起作用。 通过允许您查看单词使用方式的变化，单词转换可帮助您对情绪、熵和分歧进行分析，这些分析从根本上来说更具可解释性。</p>
<p>Shifterator亮点：</p>
<ul>
<li>提供可解释的工具，用于将文本作为数据处理并映射出两个文本相似性或差异性</li>
<li>实现常见的文本比较度量，包括相对频率、香农熵、Tsallis熵、Kullback-Leibler散度和 Jensen-Shannon 散度。</li>
<li>基于字典的情绪分析方法计算的加权平均值。</li>
<li>在研究初期可用于诊断数据、感知测量误差。</li>
</ul>
<p>计算社会科学家、数字人文主义者和其他文本分析从业者都可以使用 Shifterator 从文本数据构建可靠、稳健和可解释的故事。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">shifterator</span><span class="o">==</span><span class="mf">0.2.2</span>
</code></pre></div><br>
<h2 id="导入数据">导入数据</h2>
<p>准备的外卖csv数据，含label和review两个字段。</p>
<p>其中label是好评差评的标注，</p>
<ul>
<li>0为差评，</li>
<li>1为好评</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">reviews_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;data/WaiMai8k.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">reviews_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" width="800" />
    
    
</figure>

<p>有个疑问，外卖好差评中的用词有什么差异(区别/特点)？</p>
<h2 id="准备两组文本数据">准备两组文本数据</h2>
<p>shifterator需要两组文本数据，格式为长度相同的词频统计字典。</p>
<p>按照label类别，将数据整理为两个文本数据。在准备的过程中，我们需要做一些清洗操作</p>
<ul>
<li>清除非中文字符，如网址、邮箱、标点符号</li>
<li>清除信息量比较低的停用词</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">collections</span>
<span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">re</span> 

<span class="n">texts_neg</span> <span class="o">=</span> <span class="n">reviews_df</span><span class="p">[</span><span class="n">reviews_df</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;review&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
<span class="n">texts_pos</span> <span class="o">=</span> <span class="n">reviews_df</span><span class="p">[</span><span class="n">reviews_df</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;review&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">docs</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;清洗文本中的非中文字符、停用词，返回词频统计结果
</span><span class="s2">    docs : 待处理的文档列表
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">stop_words</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data/stopwords.txt&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&#34;[</span><span class="se">\u4e00</span><span class="s2">-</span><span class="se">\u9fa5</span><span class="s2">]+&#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="n">w</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stop_words</span><span class="p">]</span>
    <span class="n">wordfreq_dict</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wordfreq_dict</span>


<span class="n">clean_texts_neg</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">texts_neg</span><span class="p">)</span>
<span class="n">clean_texts_pos</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">texts_pos</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="无聊的传统绘图">无聊的传统绘图</h2>
<p>使用条形图、词云图绘制，为了缩小代码量，这里只绘制差评数据。需要注意的是matplotlib不显示中文，这里需要先使用下面三行代码获取电脑中自带的中文字体列表mpl_fonts，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib.font_manager</span> <span class="kn">import</span> <span class="n">FontManager</span>
 
<span class="n">mpl_fonts</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">FontManager</span><span class="p">()</span><span class="o">.</span><span class="n">ttflist</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mpl_fonts</span><span class="p">)</span>
</code></pre></div><p>经过运行，我的电脑mpl_fonts里有<strong>Arial Unicode MS</strong> ，后面用matplotlib显示中文的地方，我都使用该字体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#准备DataFrame数据</span>
<span class="n">common_neg</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clean_texts_neg</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span>
                             <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">])</span>

<span class="n">common_pos</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clean_texts_pos</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span>
                             <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;words&#39;</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">])</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">font_scale</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set_style</span><span class="p">(</span><span class="s2">&#34;whitegrid&#34;</span><span class="p">)</span>

<span class="c1">#为了显示中文</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s2">&#34;font&#34;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">)</span>


<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>

<span class="c1">#绘制水平条形图</span>
<span class="n">common_neg</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s1">&#39;words&#39;</span><span class="p">,</span>
                     <span class="n">y</span><span class="o">=</span><span class="s1">&#39;count&#39;</span><span class="p">,</span>
                      <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span>
                      <span class="n">color</span><span class="o">=</span><span class="s2">&#34;red&#34;</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s2">&#34;外卖差评常见词&#34;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/output_9_0.png" width="800" />
    
    
</figure>

<p>绘制词云图，这里使用的pyecharts包。由于该包作者更新强度比较大，为了保证日后本教程仍可正常运行，这里提供当前我使用的pyecharts相关的版本，大家可以运行下面代码保证运行出正确结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">==</span><span class="mf">1.6.2</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">javascripthon</span><span class="o">==</span><span class="mf">0.0.6</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">jupyter</span><span class="o">-</span><span class="n">installer</span><span class="o">==</span><span class="mf">0.0.3</span>
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span><span class="o">-</span><span class="n">snapshot</span><span class="o">==</span><span class="mf">0.2.0</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">WordCloud</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>

<span class="n">wordfreqs</span> <span class="o">=</span> <span class="p">[(</span><span class="n">w</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span><span class="p">,</span><span class="n">f</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">(</span><span class="n">clean_texts_neg</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>


<span class="n">wc</span> <span class="o">=</span> <span class="n">WordCloud</span><span class="p">()</span>
<span class="n">wc</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">data_pair</span><span class="o">=</span><span class="n">wordfreqs</span><span class="p">,</span> <span class="n">word_size_range</span><span class="o">=</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>
<span class="n">wc</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;外卖差评词云图&#34;</span><span class="p">,</span> 
                                             <span class="n">title_textstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TextStyleOpts</span><span class="p">(</span><span class="n">font_size</span><span class="o">=</span><span class="mi">23</span><span class="p">)),</span>
                   <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
<span class="n">wc</span><span class="o">.</span><span class="n">load_javascript</span><span class="p">()</span>
<span class="n">wc</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/%e8%af%8d%e4%ba%91%e5%9b%be.png" width="800" />
    
    
</figure>

<h2 id="使用shifterator绘制词移图">使用Shifterator绘制词移图</h2>
<p>终于要用到 <strong>Shifterator</strong> 包了！ 我们可以使用这个包根据频率和情绪（或其他值）比较负面和正面的外卖评论，这里我只计算了频率作为权重</p>
<h3 id="熵移图entropy-shift">熵移图Entropy shift</h3>
<p>第一幅图是entropy shift graph</p>
<p>具体信息请查看文档  <a href="https://github.com/ryanjgallagher/shifterator">https://github.com/ryanjgallagher/shifterator</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">shifterator</span> <span class="kn">import</span> <span class="n">EntropyShift</span>
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s2">&#34;font&#34;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;Arial Unicode MS&#39;</span><span class="p">)</span>

<span class="n">entropy_shift</span> <span class="o">=</span> <span class="n">EntropyShift</span><span class="p">(</span><span class="n">type2freq_1</span><span class="o">=</span><span class="n">clean_texts_neg</span><span class="p">,</span>
                             <span class="n">type2freq_2</span><span class="o">=</span><span class="n">clean_texts_pos</span><span class="p">,</span>
                             <span class="n">base</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">entropy_shift</span><span class="o">.</span><span class="n">get_shift_graph</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;外卖差评 vs 外卖好评&#39;</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output141.png" width="800" />
    
    
</figure>

<p>看起来最能决定外卖差评的用语是配送时间，其次才是口味。</p>
<p>最能决定外卖好评的似乎是口味，其次才是配送时间。</p>
<p>通过Shifterator我们能够看出不同词在不同文本中的作用程度。需要注意的是，我们只使用了最高的前15词频，所以显示的词有些少</p>
<h2 id="总结">总结</h2>
<p>希望本文能对你的研究有帮助，代码下载地址</p>
<p><a href="https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator%E5%AD%A6%E4%B9%A0">https://github.com/hidadeng/DaDengAndHisPython/tree/master/20211027shifterator学习</a></p>
<p>代码撰写调试不易，希望帮忙转载</p>

<figure >
    
        <img src="img/Python%e4%b8%93%e6%a0%8f%e8%af%be.jpg" width="800" />
    
    
</figure>

<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SHAP机器学习模型解释库</title>
      <link>https://textdata.cn/blog/shap_ml_explanation/</link>
      <pubDate>Thu, 14 Oct 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/shap_ml_explanation/</guid>
      <description>图文代码理解机器学习模型中各特征对结果的贡献</description>
      <content:encoded><![CDATA[<h2 id="代码下载">代码下载</h2>
<p><a href="SHAP.zip">点击此处下载代码</a></p>
<br>
<blockquote>
<p>原文链接 <a href="https://towardsdatascience.com/shap-explain-any-machine-learning-model-in-python-24207127cad7">https://towardsdatascience.com/shap-explain-any-machine-learning-model-in-python-24207127cad7</a></p>
</blockquote>
<h2 id="heading"></h2>
<p>想象一下，你正试图训练一个机器学习模型来预测广告是否被特定的人点击。在收到关于某人的一些信息后，模型预测某人会不会点击广告。</p>

<figure >
    
        <img src="img/%e5%9b%be1.png" />
    
    
</figure>

<p>但是为什么模型会输出这样的预测结果呢？ 每个特征对预测的贡献有多大？ 如果您能看到一个图表，显示每个特征对预测的贡献程度，如下所示，不是很好吗？</p>

<figure >
    
        <img src="img/%e6%9d%83%e9%87%8d.png" />
    
    
</figure>

<p>Shapley值就能起到特征权重测度的作用。</p>
<h2 id="shapley值是什么">Shapley值是什么？</h2>
<p>Shapley值是博弈论中使用的一种方法，它涉及公平地将收益和成本分配给在联盟中工作的行动者。
由于每个行动者对联盟的贡献是不同的，Shapley值保证每个行动者根据贡献的多少获得公平的份额。</p>

<figure >
    
        <img src="img/%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<h2 id="小案例">小案例</h2>
<p>Shapley值被广泛地应用于求解群体中每个工人(特征)的贡献问题。要理解Shapley值的作用，让我们想象一下贵公司刚刚做了A/B测试，他们在测试广告策略的不同组合。</p>
<p>每个策略在特定月份的收入是：</p>
<ul>
<li>无广告：150美元</li>
<li>社交媒体：300美元</li>
<li>谷歌广告：200美元</li>
<li>电子邮件营销：350美元</li>
<li>社交媒体和谷歌广告：320美元</li>
<li>社交媒体和电子邮件营销：400美元</li>
<li>谷歌广告和电子邮件营销：350美元</li>
<li>电子邮件营销，谷歌广告和社交媒体：450美元</li>
</ul>

<figure >
    
        <img src="img/%e7%ad%96%e7%95%a5%e8%90%a5%e6%94%b6.png" />
    
    
</figure>

<p>使用三则广告与不使用广告的收入相差300美元，每则广告对这一差异有多大的贡献?</p>

<figure >
    
        <img src="img/%e7%ad%96%e7%95%a5%e8%90%a5%e6%94%b6%e8%b4%a1%e7%8c%ae%e5%87%a0%e4%bd%95.png" />
    
    
</figure>

<p>我们可以通过计算每一类广告的Shapley值来计算谷歌广告对公司收入的总贡献入手，通过公式可以计算出Google广告的总贡献：</p>

<figure >
    
        <img src="img/%e5%85%ac%e5%bc%8f.png" />
    
    
</figure>

<p>让我们找到Google广告的边际贡献及其权重。</p>
<h2 id="寻找谷歌广告的边际贡献">寻找谷歌广告的边际贡献</h2>
<p>第一，我们将发现谷歌广告对以下群体的边际贡献：</p>
<ul>
<li>无广告</li>
<li>谷歌广告+社交媒体</li>
<li>谷歌广告+电子邮件营销</li>
<li>谷歌广告+电子邮件营销+社交媒体</li>
</ul>

<figure >
    
        <img src="img/%e8%be%b9%e9%99%85%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<p>Google广告 对 无广告 的边际贡献是：</p>

<figure >
    
        <img src="img/MC1.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告&amp;社交媒体组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC2.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告&amp;电子邮件营销组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC3.png" />
    
    
</figure>

<p>谷歌广告 对 谷歌广告、电子邮件营销和社交媒体组合 的边际贡献是：</p>

<figure >
    
        <img src="img/MC4.png" />
    
    
</figure>

<h2 id="发现权重">发现权重</h2>
<p>为了发现权重，我们将把不同广告策略的组合组织成如下多个层次，每个层次对应于每个组合中广告策略的数量。</p>
<p>然后根据每个层次的边数分配权重，我们看到了这一点：</p>
<ul>
<li>第一级包含3条边，因此每个边的权重为1/3</li>
<li>第二级包含6条边，因此每条边的权重将为1/6</li>
<li>第三级包含3条边，因此每条边的权重将为1/3</li>
</ul>

<figure >
    
        <img src="img/%e5%8f%91%e7%8e%b0%e6%9d%83%e9%87%8d.png" />
    
    
</figure>

<h2 id="发现google广告的总贡献">发现Google广告的总贡献</h2>
<p>根据前面的权重和边际贡献，我们已经可以找到Google广告的总贡献!</p>

<figure >
    
        <img src="img/google%e6%80%bb%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>


<figure >
    
        <img src="img/google%e5%85%ac%e5%bc%8f.png" />
    
    
</figure>

<p>酷!所以谷歌广告在使用3种广告策略与不使用广告的总收入差异中贡献了36.67美元。36.67是Google广告的Shapey值。</p>

<figure >
    
        <img src="img/otherRevenue.png" />
    
    
</figure>

<p>重复以上步骤，对于另外两种广告策略，我们可以看出：</p>
<ul>
<li>
<p>电子邮件营销贡献151.67美元</p>
</li>
<li>
<p>社交媒体贡献116.67美元</p>
</li>
<li>
<p>谷歌广告贡献36.67美元</p>

<figure >
    
        <img src="img/%e5%90%84%e7%ad%96%e7%95%a5%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

</li>
</ul>
<p>他们共同出资300美元，用于使用3种不同类型的广告与不使用广告的区别!挺酷的，不是吗?
既然我们理解了Shapley值，那么让我们看看如何使用它来解释机器学习模型。</p>
<h2 id="shap-在python中解释机器学习模型">SHAP-在Python中解释机器学习模型</h2>
<p>SHAP是一个Python库，它使用Shapley值来解释任何机器学习模型的输出。</p>
<p>安装SHAP</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">shap</span>

</code></pre></div><h2 id="训练模型">训练模型</h2>
<p>为了理解SHAP工作原理，我们使用Kaggle平台内的advertising广告数据集。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span> 

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;advertising.csv&#34;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div>
<figure >
    
        <img src="img/df.png" />
    
    
</figure>

<p>我们将建立一个机器学习模型, 该模型根据用户个人特质信息来预测其是否点击广告。</p>
<p>我们使用Patsy将DataFrame转换为一组特征和一组目标值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">patsy</span> <span class="kn">import</span> <span class="n">dmatrices</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>

<span class="n">y</span><span class="p">,</span> <span class="n">X</span> <span class="o">=</span> <span class="n">dmatrices</span><span class="p">(</span>
    <span class="s2">&#34;clicked_on_ad ~ daily_time_spent_on_site + age + area_income + daily_internet_usage  + male -1&#34;</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">X_frame</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">X</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">X</span><span class="o">.</span><span class="n">design_info</span><span class="o">.</span><span class="n">column_names</span><span class="p">)</span>


</code></pre></div><p>把数据分为测试集和训练接</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">7</span><span class="p">)</span>
</code></pre></div><p>接下来使用XGBoost训练模型，并做预测</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">xgboost</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">xgboost</span><span class="o">.</span><span class="n">XGBClassifier</span><span class="p">()</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">y_predicted</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</code></pre></div><p>为了查看模型表现，我们使用F1得分</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">f1_score</span>

<span class="n">f1</span> <span class="o">=</span> <span class="n">f1_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_predicted</span><span class="p">)</span>
<span class="n">f1</span>
</code></pre></div><pre><code>0.9619047619047619
</code></pre>
<p>太好了!</p>
<h2 id="解释该模型">解释该模型</h2>
<p>该模型很好地预测了用户是否点击广告。但它是如何得出这样的预测的? <strong>每个特征对最终预测与平均预测的差异贡献了多少?</strong></p>
<p>注意，这个问题与我们在文章开头论述的问题非常相似。</p>
<p>因此，寻找每个特征的Shapley值可以帮助我们确定它们的贡献。得到特征i的重要性的步骤与之前类似，其中i是特征的索引：</p>
<ul>
<li>获取所有不包含特征i的子集</li>
<li>找出特征i对这些子集中每个子集的边际贡献</li>
<li>聚合所有边际贡献来计算特征i的贡献</li>
</ul>
<p>若要使用SHAP查找Shapley值，只需将训练好的模型插入shap.Explainer</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">shap</span>

<span class="n">explainer</span> <span class="o">=</span> <span class="n">shap</span><span class="o">.</span><span class="n">Explainer</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
<span class="n">shap_values</span> <span class="o">=</span> <span class="n">explainer</span><span class="p">(</span><span class="n">X_frame</span><span class="p">)</span>
</code></pre></div><pre><code>ntree_limit is deprecated, use `iteration_range` or model slicing instead.
</code></pre>
<h2 id="shap瀑布图">SHAP瀑布图</h2>
<p>可视化第一个预测的解释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#第一条记录是未点击</span>
<span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">waterfall</span><span class="p">(</span><span class="n">shap_values</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/output_20_0.png" />
    
    
</figure>

<p>啊哈!现在我们知道每个特征对第一次预测的贡献。对上图的解释：</p>

<figure >
    
        <img src="img/%e7%ac%ac%e4%b8%80%e6%ac%a1%e9%a2%84%e6%b5%8b%e8%b4%a1%e7%8c%ae.png" />
    
    
</figure>

<ul>
<li>蓝色条显示某一特定特征在多大程度上降低了预测的值。</li>
<li>红条显示了一个特定的特征在多大程度上增加了预测值。</li>
<li>负值意味着该人点击广告的概率小于0.5</li>
</ul>
<p>我们应该期望总贡献等于预测与均值预测的差值。我们来验证一下：</p>

<figure >
    
        <img src="img/%e6%80%bb%e8%b4%a1%e7%8c%ae%e7%ad%89%e4%ba%8e%e9%a2%84%e6%b5%8b%e4%b8%8e%e5%9d%87%e5%80%bc%e9%a2%84%e6%b5%8b%e7%9a%84%e5%b7%ae%e5%80%bc.png" />
    
    
</figure>

<p>酷!他们是平等的。</p>
<p>可视化第二个预测的解释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#第二条记录也是未点击</span>
<span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">waterfall</span><span class="p">(</span><span class="n">shap_values</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div>
<figure >
    
        <img src="img/output_22_0.png" />
    
    
</figure>

<h2 id="shap摘要图">SHAP摘要图</h2>
<p>我们可以使用SHAP摘要图，而不是查看每个单独的实例，来可视化这些特性对多个实例的整体影响：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">shap</span><span class="o">.</span><span class="n">summary_plot</span><span class="p">(</span><span class="n">shap_values</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_24_0.png" />
    
    
</figure>

<p>SHAP摘要图告诉我们数据集上最重要的特征及其影响范围。</p>
<p>从上面的情节中，我们可以对模型的预测获得一些有趣的见解：</p>
<ul>
<li>用户的 <strong>daily_internet_usage</strong> 对该用户是否点击广告的影响最大。</li>
<li>随着<strong>daily_time_spent_on_site</strong>的增加，用户点击广告的可能性降低。</li>
<li>随着<strong>area_income</strong>的增加，用户点击广告的可能性降低。</li>
<li>随着<strong>age</strong>的增长，用户更容易点击广告。</li>
<li>如果用户是<strong>male</strong>，则该用户点击广告的可能性较小。</li>
</ul>
<h2 id="shap条形图">SHAP条形图</h2>
<p>我们还可以使用SHAP条形图得到全局特征重要性图。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">shap</span><span class="o">.</span><span class="n">plots</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">shap_values</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/output_26_0.png" />
    
    
</figure>

<p>很酷!</p>
<h2 id="结论">结论</h2>
<p>恭喜你!您刚刚了解了Shapey值以及如何使用它来解释一个机器学习模型。希望本文将提供您使用Python来解释自己的机器学习模型的基本知识。</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Clumper库|dplyr样式的Python包</title>
      <link>https://textdata.cn/blog/clumper_pipeline/</link>
      <pubDate>Tue, 22 Jun 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/clumper_pipeline/</guid>
      <description>让数据分析更优雅</description>
      <content:encoded><![CDATA[<p>Clumper可以用来处理嵌套样式的json数据结构。</p>
<h2 id="代码下载clumper代码zip"><a href="Clumper%E4%BB%A3%E7%A0%81.zip">代码下载</a></h2>
<br>
<h2 id="getting-started">Getting Started</h2>
<h3 id="安装">安装</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">clumper</span>
</code></pre></div><pre><code>Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Collecting clumper
  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/70/62/0731ab9b48c91132aff487217980dcb147ffc0922a278adc05986f6a8d4b/clumper-0.2.13-py2.py3-none-any.whl (21 kB)
Installing collected packages: clumper
Successfully installed clumper-0.2.13
[33mWARNING: You are using pip version 20.0.2; however, version 21.1.2 is available.
You should consider upgrading via the '/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7 -m pip install --upgrade pip' command.[0m
</code></pre>
<p>为了展示Clumper如何工作，我准备了pokemon.json， 由列表组成(该列表由多个字典组成)，下面是pokemon.json部分内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;pokemon.json&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">jsonf</span><span class="p">:</span>
    <span class="n">pokemon</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">jsonf</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
    
<span class="n">pokemon</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div><pre><code>[{'name': 'Bulbasaur',
  'type': ['Grass', 'Poison'],
  'total': 318,
  'hp': 45,
  'attack': 49},
 {'name': 'Ivysaur',
  'type': ['Grass', 'Poison'],
  'total': 405,
  'hp': 60,
  'attack': 62}]
</code></pre>
<p>我们准备的pokemon.json列表中大概有800个字典，数量级刚刚好，不会因为太大导致电脑无法运行数据分析，也不会太小导致手动操作性价比更高。</p>
<br>
<br>
<h2 id="example">Example</h2>
<h3 id="基本操作">基本操作</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">+</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 2, 'b': 4, 'c': 6}, 
{'a': 7, 'b': 2, 'c': 9}, 
{'a': 3, 'b': 6, 'c': 9}]
</code></pre>
<br>
<h3 id="代码解析">代码解析</h3>
<p><strong>Step1</strong></p>
<p>首先使用<strong>mutate</strong>方法，该方法可以在每条记录中生成新变量。</p>

<figure >
    
        <img src="img/first-mutate.png" width="800" />
    
    
</figure>

<p>结算结果仍为Clumper类</p>
<p><strong>Step2</strong></p>
<p>接下来对mutate之后的数据进行排序</p>

<figure >
    
        <img src="img/then-sort.png" width="800" />
    
    
</figure>

<p>得到的结果仍为Clumper类。</p>
<p>从上面的小代码案例中，可以看到整套流程像是一个流水线车间，每一行就是一个生成环节，生产环节之间使用.连接起来。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
    
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">pokemon</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">])</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>  <span class="c1">#保留type长度为1的字典</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="c1">#type值从列表变为字符串</span>
         <span class="n">ratio</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;attack&#39;</span><span class="p">]</span><span class="o">/</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;hp&#39;</span><span class="p">])</span> <span class="c1">#新建ratio</span>
 <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;ratio&#39;</span><span class="p">)</span>   <span class="c1">#字典最后只保留name， type， ratio三个字段</span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;ratio&#39;</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1">#按照ratio降序排列</span>
 <span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">#只保留前5个</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> <span class="c1">#转成列表显示</span>
<span class="p">)</span>
</code></pre></div><p><br><br></p>
<h2 id="common-verbs">Common Verbs</h2>
<h3 id="keep">Keep</h3>
<p>keep函数可以从原始数据中抽取符合指定条件的子集。

<figure >
    
        <img src="img/keep.png" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> 
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>  <span class="c1">#试一试去掉.collect()后的效果</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 3}, 
{'a': 4}]
</code></pre>
<p>可以实现缺失值处理，以不同的方式实现pandas的<code>.dropna()</code>的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
<span class="p">]</span>

<span class="c1">#只保留含有b的字段</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">keep</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4}, 
{'a': 2, 'b': 3}, 
{'a': 3, 'b': 2}]
</code></pre>
<h3 id="mutate">Mutate</h3>
<p>mutate可以在每条记录中，创建新字段、改写旧字段。

<figure >
    
        <img src="img/mutate.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="c1">#新建了c和s字段</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">],</span>
         <span class="n">s</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">])</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2, 'c': 3, 's': 6},
 {'a': 2, 'b': 3, 'c': 5, 's': 10},
 {'a': 1, 'b': 6, 'c': 7, 's': 14}]
</code></pre>
<h3 id="sort">Sort</h3>
<p>sort可以实现排序

<figure >
    
        <img src="img/sort.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">])</span> <span class="c1">#默认升序</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 2, 'b': 1}, 
{'a': 1, 'b': 2}, 
{'a': 3, 'b': 3}]
</code></pre>
<h3 id="select">Select</h3>
<p>select挑选每条记录中的某个(些)字段

<figure >
    
        <img src="img/select.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1}, 
{'a': 2}, 
{'a': 1}]
</code></pre>
<h3 id="drop">Drop</h3>
<p>剔除某个（些）字段。

<figure >
    
        <img src="img/drop.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2}, 
{'a': 2, 'b': 3}, 
{'a': 1, 'b': 6}]
</code></pre>
<h3 id="groupby">GroupBy</h3>
<p>根据某个（些）字段对数据集进行分组，得到不同Group类的集合。一般与<code>.agg()</code>方法联合使用。

<figure >
    
        <img src="img/groupby.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;gender&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">groups</span><span class="o">==</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<h3 id="ungroup">Ungroup</h3>
<p>GroupBy的反操作

<figure >
    
        <img src="img/ungroup.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;gender&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">ungroup</span><span class="p">()</span><span class="o">.</span><span class="n">groups</span> <span class="o">==</span> <span class="nb">tuple</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>True
</code></pre>
<p><br><br></p>
<h1 id="about-groups">About Groups</h1>
<h3 id="agg">Agg</h3>
<p>聚合描述性统计方法</p>
<p>agg如下图，可以理解成三个步骤，即group-&gt;split-&gt;summary

<figure >
    
        <img src="img/split-apply-combine.png" width="800" />
    
    
</figure>
</p>
<p>常用的描述性统计函数有： <code>mean、count、unqiue、n_unique、sum、min和max</code></p>
<p>求学生的平均成绩、最优和最差成绩</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">mean_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">),</span>      
      <span class="n">max_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">),</span>      
      <span class="n">min_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;min&#39;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'mean_grade': 85.75, 'max_grade': 99, 'min_grade': 58}]
</code></pre>
<p>求男生和女生各自的平均成绩、最优和最差成绩</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">grade_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;王五&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;赵六&#39;</span><span class="p">},</span>    
               <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="mi">58</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;李四&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">grade_dicts</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">mean_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">),</span>      
      <span class="n">max_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;max&#39;</span><span class="p">),</span>      
      <span class="n">min_grade</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;grade&#39;</span><span class="p">,</span> <span class="s1">&#39;min&#39;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'gender': '男', 'mean_grade': 78, 'max_grade': 98, 'min_grade': 58}, 
{'gender': '女', 'mean_grade': 93.5, 'max_grade': 99, 'min_grade': 88}]
</code></pre>
<h3 id="collect">Collect</h3>
<p>一般Clumper函数返回的结果显示为Clumper类，是看不到具体内容的。</p>
<p>collect作用主要是展开显示。

<figure >
    
        <img src="img/collect.png" width="800" />
    
    
</figure>
</p>
<h3 id="剔除重复">剔除重复</h3>
<p>剔除重复内容

<figure >
    
        <img src="img/drop_duplicates.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> 
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}]
</code></pre>
<hr>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">### 什么是Group？</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><pre><code>&lt;Clumper groups=('grp',) len=5 @0x103cb0290&gt;
</code></pre>
<p>当前的group以grp作为关键词

<figure >
    
        <img src="img/add_grp.png" width="800" />
    
    
</figure>
</p>
<p>现在经过 <code>.group_by('grp')</code>操作后，说明你对每个grp组感兴趣。具体一点，一个组是<code>{'grp': 'a'}</code>, 另一个组是<code>{'grp': 'b'}.</code></p>
<h3 id="agg-1">Agg</h3>
<h4 id="without-groups">without groups</h4>

<figure >
    
        <img src="img/agg-without-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;sum&#39;</span><span class="p">),</span>
       <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'s': 29, 'm': 5.8}]
</code></pre>
<h4 id="with-groups">with groups</h4>
<p>分别计算组grp=a、组grp=b的sum和mean

<figure >
    
        <img src="img/agg-with-group.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
  <span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;sum&#39;</span><span class="p">),</span>
       <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;mean&#39;</span><span class="p">))</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'grp': 'a', 's': 18, 'm': 6}, 
{'grp': 'b', 's': 11, 'm': 5.5}]
</code></pre>
<h4 id="agg内置的统计函数名">agg内置的统计函数名</h4>
<p>内置的统计函数，可直接通过字符串调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="p">{</span>
  <span class="s2">&#34;mean&#34;</span><span class="p">:</span> <span class="n">mean</span><span class="p">,</span>
  <span class="s2">&#34;count&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">),</span>
  <span class="s2">&#34;unique&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">d</span><span class="p">)),</span>
  <span class="s2">&#34;n_unique&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">d</span><span class="p">)),</span>
  <span class="s2">&#34;sum&#34;</span><span class="p">:</span> <span class="nb">sum</span><span class="p">,</span>
  <span class="s2">&#34;min&#34;</span><span class="p">:</span> <span class="nb">min</span><span class="p">,</span>
  <span class="s2">&#34;max&#34;</span><span class="p">:</span> <span class="nb">max</span><span class="p">,</span>
  <span class="s2">&#34;median&#34;</span><span class="p">:</span> <span class="n">median</span><span class="p">,</span>
  <span class="s2">&#34;var&#34;</span><span class="p">:</span> <span class="n">variance</span><span class="p">,</span>
  <span class="s2">&#34;std&#34;</span><span class="p">:</span> <span class="n">stdev</span><span class="p">,</span>
  <span class="s2">&#34;values&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span>
  <span class="s2">&#34;first&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
  <span class="s2">&#34;last&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
<span class="p">}</span>
</code></pre></div><h3 id="transform">Transform</h3>
<p><code>.transform()</code>与<code>.agg()</code>类似。主要的区别是transform处理过程中，记录数和字段数不会出现压缩。</p>
<h4 id="without-groups-1">without groups</h4>

<figure >
    
        <img src="img/transform-without-groups.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>    
        <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
 <span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;sum&#34;</span><span class="p">),</span>            
            <span class="n">u</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;unique&#34;</span><span class="p">))</span> 
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 2, 'grp': 'b', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 7, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]},
{'a': 9, 'grp': 'b', 's': 29, 'u': [2, 5, 6, 7, 9]}, 
{'a': 5, 'grp': 'a', 's': 29, 'u': [2, 5, 6, 7, 9]}]
</code></pre>
<h4 id="with-groups-1">with groups</h4>

<figure >
    
        <img src="img/transform-with-groups.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&#34;grp&#34;</span><span class="p">:</span> <span class="s2">&#34;a&#34;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s2">&#34;grp&#34;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;sum&#34;</span><span class="p">),</span>
            <span class="n">u</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;unique&#34;</span><span class="p">))</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]},
 {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]},
 {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]}]
</code></pre>
<h3 id="mutate-1">Mutate</h3>
<p>clumper库中的<code>row_number</code>可以给每条记录显示索引位置（第几个）。</p>
<h4 id="without-groups-2">without groups</h4>

<figure >
    
        <img src="img/mutate-without-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="kn">from</span> <span class="nn">clumper.sequence</span> <span class="kn">import</span> <span class="n">row_number</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">row_number</span><span class="p">())</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 'index': 1},
 {'a': 2, 'grp': 'b', 'index': 2},
 {'a': 7, 'grp': 'a', 'index': 3},
 {'a': 4, 'grp': 'b', 'index': 4},
 {'a': 5, 'grp': 'a', 'index': 5}]
</code></pre>
<h4 id="with-groups-2">with groups</h4>

<figure >
    
        <img src="img/mutate-with-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>
<span class="kn">from</span> <span class="nn">clumper.sequence</span> <span class="kn">import</span> <span class="n">row_number</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}</span>
<span class="p">]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
  <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>
  <span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">row_number</span><span class="p">())</span>
  <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 6, 'grp': 'a', 'index': 1},
 {'a': 7, 'grp': 'a', 'index': 2},
 {'a': 5, 'grp': 'a', 'index': 3},
 {'a': 2, 'grp': 'b', 'index': 1},
 {'a': 4, 'grp': 'b', 'index': 2}]
</code></pre>
<h3 id="sort-1">Sort</h3>
<p>排序, 默认升序</p>
<h4 id="without-groups-3">without groups</h4>

<figure >
    
        <img src="img/sort-no-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span> <span class="c1">#根据字段a进行排序  </span>
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span>  
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 2, 'grp': 'b'}, 
{'a': 5, 'grp': 'a'}, 
{'a': 6, 'grp': 'a'}, 
{'a': 7, 'grp': 'a'}, 
{'a': 9, 'grp': 'b'}]
</code></pre>
<h4 id="with-groups-3">with groups</h4>

<figure >
    
        <img src="img/sort-with-group.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>    
              <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;grp&#39;</span><span class="p">:</span> <span class="s1">&#39;a&#39;</span><span class="p">}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>  
 <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="s1">&#39;grp&#39;</span><span class="p">)</span>  
 <span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span>  
 <span class="o">.</span><span class="n">collect</span><span class="p">())</span>
</code></pre></div><pre><code>[{'a': 5, 'grp': 'a'}, 
{'a': 6, 'grp': 'a'}, 
{'a': 7, 'grp': 'a'}, 
{'a': 2, 'grp': 'b'}, 
{'a': 9, 'grp': 'b'}]
</code></pre>
<h3 id="ungroup-1">Ungroup</h3>
<p>最后，如果你已经进行完了分组计算，想再次整合起来，取消分组状态，可以使用<code>.ungroup()</code></p>
<p><br><br></p>
<h2 id="merge-verbs">Merge Verbs</h2>
<hr>
<p>如果想将多个记录整理到一个记录中，有很多种实现方法。</p>
<h3 id="concat">Concat</h3>
<p>如果想垂直方向将多个记录堆叠，可以使用concat

<figure >
    
        <img src="img/concat.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">c1</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}])</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}])</span>
<span class="n">c3</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}])</span>

<span class="n">c1</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#等同于c1.concat(c2).concat(c3).collect()</span>
<span class="n">c1</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="n">c3</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1}, {'a': 2}, {'a': 3}]
</code></pre>
<h3 id="joins">Joins</h3>
<p>Joins类似于数学里的交集、并集的，大致有以下四种，

<figure >
    
        <img src="img/LeftRight.png" width="800" />
    
    
</figure>
</p>
<h4 id="left-join">left join</h4>
<p>左连接，以左为主，表示以table1为主，关联上table2的数据，结果显示table1的所有数据，然后table2显示的是和table1有交集部分的数据。

<figure >
    
        <img src="img/left_join.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">},</span>
<span class="p">])</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
<span class="p">])</span>

<span class="c1">#根据b进行左右两表的合并</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">left</span><span class="o">.</span><span class="n">inner_join</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">mapping</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">})</span>
<span class="n">result</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4, 'c': 9}, {'a': 2, 'b': 6, 'c': 7}]
</code></pre>
<h4 id="inner-join">inner join</h4>
<p>内连接， 交集</p>

<figure >
    
        <img src="img/inner_join.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">8</span><span class="p">},</span>
<span class="p">])</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">Clumper</span><span class="p">([</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
<span class="p">])</span>


<span class="n">result</span> <span class="o">=</span> <span class="n">left</span><span class="o">.</span><span class="n">inner_join</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">mapping</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">})</span>
<span class="n">result</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 4, 'c': 9}, {'a': 2, 'b': 6, 'c': 7}]
</code></pre>
<hr>
<p><br><br></p>
<h2 id="nested-data">Nested Data</h2>
<p>由于嵌套数据序列确实具有各种形状和大小，因此该库提供了各种方法来帮助您将数据重塑为不同的格式。 本文档将演示这些方法的工作原理。</p>
<h3 id="explode">Explode</h3>
<p>炸裂（展开）

<figure >
    
        <img src="img/explode.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">99</span><span class="p">],</span> 
         <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">]}]</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">explode</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;grade&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'gender': '男', 'grade': 80, 'name': '张三'},
 {'gender': '男', 'grade': 99, 'name': '张三'},
 {'gender': '男', 'grade': 80, 'name': '李四'},
 {'gender': '男', 'grade': 99, 'name': '李四'}]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>


<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> 
         <span class="s1">&#39;grade&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">80</span><span class="p">,</span> <span class="mi">99</span><span class="p">],</span> 
         <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">]}]</span>

<span class="c1">#.explode(&#39;name&#39;, &#39;grade&#39;)略微有些区别</span>
<span class="c1">#请查看两者运行结果</span>
<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
 <span class="o">.</span><span class="n">explode</span><span class="p">(</span><span class="n">item</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="s1">&#39;grade&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'gender': '男', 'item': '张三', 'val': 80},
 {'gender': '男', 'item': '张三', 'val': 99},
 {'gender': '男', 'item': '李四', 'val': 80},
 {'gender': '男', 'item': '李四', 'val': 99}]
</code></pre>
<h3 id="unpack">Unpack</h3>
<p>与explode类似

<figure >
    
        <img src="img/unpack.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_dicts</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s1">&#39;rows&#39;</span><span class="p">:</span> <span class="p">[{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}]</span>
<span class="p">}</span>

<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">list_dicts</span><span class="p">)</span>
 <span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;rows&#39;</span><span class="p">)</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div><pre><code>[{'a': 1, 'b': 2, 'c': 3}, 
{'a': 1, 'b': 3}, 
{'a': 1, 'b': 4}]
</code></pre>
<h3 id="flatten-keys">Flatten keys</h3>

<figure >
    
        <img src="img/flatten_keys.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;feature_1&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
  <span class="s1">&#39;feature_2&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
  <span class="s1">&#39;feature_3&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;propery_1&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;property_2&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
<span class="p">}</span>


<span class="p">(</span><span class="n">Clumper</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">listify</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
 <span class="o">.</span><span class="n">flatten_keys</span><span class="p">()</span>
 <span class="o">.</span><span class="n">collect</span><span class="p">()</span> 
<span class="p">)</span>
</code></pre></div><pre><code>[{'propery_1': 1, 'property_2': 2, 'key': 'feature_1'},
 {'propery_1': 3, 'property_2': 4, 'key': 'feature_2'},
 {'propery_1': 5, 'property_2': 6, 'key': 'feature_3'}]
</code></pre>
<p><br><br></p>
<h2 id="summary-methods">Summary Methods</h2>
<p>Clumper支持常用的统计性方法，诸如mean、max、min等</p>
<h3 id="mean">mean</h3>

<figure >
    
        <img src="img/mean.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3.5
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>6.666666666666667
</code></pre>
<h3 id="count">count</h3>
<p>统计记录数

<figure >
    
        <img src="img/count.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="c1">#含有a的一共有多少条记录</span>
<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>4
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3
</code></pre>
<h3 id="unique">unique</h3>
<p>汇总某字段不重样的值的种类，如<code>[a, b, a, a]</code>，经过unique后，返回<code>[a, b]</code>

<figure >
    
        <img src="img/unique.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>[2, 3, 7]
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>[6, 7]
</code></pre>
<h3 id="n_unique">n_unique</h3>
<p>统计某字段对应的值一种有多少种

<figure >
    
        <img src="img/nunique.png" width="800" />
    
    
</figure>
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">n_unique</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>3
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">n_unique</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>2
</code></pre>
<h3 id="min">min</h3>

<figure >
    
        <img src="img/min.png" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>2
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">min</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>6
</code></pre>
<h3 id="max">max</h3>

<figure >
    
        <img src="img/max.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">clumper</span> <span class="kn">import</span> <span class="n">Clumper</span>

<span class="n">list_of_dicts</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>    
                 <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}]</span>

<span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>7
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">Clumper</span><span class="p">(</span><span class="n">list_of_dicts</span><span class="p">)</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</code></pre></div><pre><code>7
</code></pre>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Jaal库~轻松绘制动态社交网络关系图</title>
      <link>https://textdata.cn/blog/jaal_social_network_visualization/</link>
      <pubDate>Sat, 08 May 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/jaal_social_network_visualization/</guid>
      <description>最简单好用的社交网络可视化包</description>
      <content:encoded><![CDATA[<p>Jaal是基于Dash和Visdcc构建的可交互的Python社交网络库。由于底层使用了dash，所以我们可以认为jaal更像是一个仪表盘。基于此，jaal也提供了多种处理网络数据的可选项，例如搜索、过滤、给节点（边）上色等。所有的操作，两三行代码即可搞定。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">jaal</span>
</code></pre></div><br>
<h2 id="一快速上手">一、快速上手</h2>
<p>本文准备了《权利的游戏》的节点nodes.csv和边edges.csv数据， 可以使用jaal的plot()函数绘制《权利的游戏》关系网络图。 必须有的字段，这里加粗了
nodes.csv数据含</p>
<ul>
<li><strong>from</strong>: 节点</li>
<li><strong>to</strong>:  节点</li>
<li>weight: 边权重</li>
<li>strenth:</li>
</ul>
<p>edges.csv数据</p>
<ul>
<li><strong>id</strong> 节点id，姓名</li>
<li>gender 节点的性别</li>
</ul>

<figure >
    
        <img src="img/%e6%9d%83%e5%88%a9%e7%9a%84%e6%b8%b8%e6%88%8f.png" width="800" />
    
    
</figure>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">jaal</span> <span class="kn">import</span> <span class="n">Jaal</span>

<span class="n">edge_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;edges.csv&#39;</span><span class="p">)</span>
<span class="n">node_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;nodes.csv&#39;</span><span class="p">)</span>
<span class="n">Jaal</span><span class="p">(</span><span class="n">edge_df</span><span class="p">,</span> <span class="n">node_df</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div><p>运行代码后，会生成一个本地服务链接，例如 http://127.0.0.1:8050/ ， 点击链接，浏览器就能看到</p>

<figure >
    
        <img src="img/%e7%bd%91%e7%bb%9c%e5%9b%be.png" width="800" />
    
    
</figure>

<br>
<h2 id="二jaal功能">二、Jaal功能</h2>
<ul>
<li><strong>设置面板</strong>  Jaal运行产生的浏览器界面左侧会有一个设置面板，可以对数据进行搜索、筛选、上色。</li>
<li><strong>搜索</strong> 可以高亮搜索到的节点</li>
<li><strong>过滤</strong> 支持pandas的query语法</li>
<li><strong>上色</strong> 基于类别，对节点、边进行上色。能最多支持20个类别，即节点、边数据允许有20种属性</li>
</ul>
<br>
<h2 id="三-案例">三、 案例</h2>
<h4 id="31-搜索">3.1 搜索</h4>
<p>第一个选项是搜索，我们可以在其中搜索图中的特定节点。 它支持在节点标签上逐字符搜索。 以下是我们尝试搜索“ Arya”的示例</p>

<figure >
    
        <img src="img/search.gif" width="800" />
    
    
</figure>

<h4 id="32-过滤">3.2 过滤</h4>
<p>接下来，我们进行过滤。 Jaal支持在节点和边要素上都进行过滤的选项。 为此，我们提供了单独的文本区域。 下面我们可以看到节点和边缘过滤查询的实时效果。</p>

<figure >
    
        <img src="img/filter.gif" width="800" />
    
    
</figure>

<h4 id="33-染色">3.3 染色</h4>
<p>最后，我们可能希望查看任何功能的整体分布，而不是进行过滤。 目前，Jaal通过提供根据任何分类特征为节点或边缘着色的选项来解决此问题。 我们可以在下面看到一个真实的例子。</p>

<figure >
    
        <img src="img/color.gif" width="800" />
    
    
</figure>

<br>
<h2 id="四-代码获取">四、 代码获取</h2>
<ol>
<li><a href="%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE.zip"><strong>直接下载</strong></a></li>
<li><a href="https://github.com/thunderhit/DaDengAndHisPython">github更多代码</a></li>
</ol>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>当cnsenti遇上streamlit</title>
      <link>https://textdata.cn/blog/cnsenti_streamlit/</link>
      <pubDate>Thu, 07 Jun 2018 10:40:10 +0600</pubDate>
      
      <guid>/blog/cnsenti_streamlit/</guid>
      <description>streamlit是web包，cnsenti是文本分析包，两者结合即可制造在线文本分析网站。</description>
      <content:encoded><![CDATA[<h1 id="cnsentidemo">cnsentiDemo</h1>
<p>这是使用streamlit库将中文情感分析[<strong>cnsenti</strong> 部署到网络世界，可<strong>在线提供简单的中文文本的情绪及情感计算</strong>。</p>
<p><strong>streamlit库</strong>(<a href="https://docs.streamlit.io/en/stable/">https://docs.streamlit.io/en/stable/</a>)， 是目前简单易用的数据可视化web框架，比flask和django少了很多的扩展性，但是容易学习上手，适合初学者把玩。</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=bv17V411H7sZ&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<br>
<p><a href="https://cnsenti.herokuapp.com/"><strong>Demo</strong></a>
<img loading="lazy" src="img/%e6%95%88%e6%9e%9c%e5%9b%be.png" alt=""  />
</p>
<p><br><br></p>
<h1 id="网站">网站</h1>
<p>现在技术有限，该网站大致内容分为三部分</p>
<ul>
<li>准备数据</li>
<li>数据分析
<ul>
<li>情感分析</li>
<li>词云图</li>
</ul>
</li>
<li>谢谢支持</li>
</ul>
<p><br><br></p>
<h1 id="本地使用">本地使用</h1>
<p>本网站的<strong>cnsentiDemo项目文件夹</strong>的文件有</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">- main.py
- cnsenti_example.csv
- 大邓和他的Python.png
- requirements.txt
- 其他文件
</code></pre></div><p>将cnsentiDemo项目下载，在<strong>电脑本地离线使用cnsenti的方法</strong></p>
<ol>
<li><a href="cnsentiDemo.zip">下载解压到桌面desktop</a></li>
<li>命令行, 执行 <code>cd desktop/cnsentiDemo</code></li>
<li>命令行，执行 <code>pip3 install -r requirements.txt</code></li>
<li>命令行, 执行 <code>streamlit run main.py</code></li>
<li>根据命令行的提示，复制粘贴网址到桌面。我这里是 <code>**http://localhost:8501**</code></li>
<li>浏览器打开效果就会与视频等同</li>
</ol>
<p>上述过程中，Mac和Win会有一些缺点导致无法使用，需要根据命令行提示解决各自系统的小问题，例如</p>
<ol>
<li>Win需要使用64位的Python</li>
<li>Mac可能需要安装Xcode-install</li>
<li>其他可能的问题</li>
</ol>
<p><br><br></p>
<h1 id="web部署方法">Web部署方法</h1>
<p>如果想将自己的streamlit项目部署成网站，可以使用Heroku和github帮助你完成人生第一个小网站。操作方法：</p>
<ol>
<li>将写好的streamlit项目上传至github自有仓库</li>
<li>Heroku注册账号</li>
<li>点击Heroku网页右上角New， 选择Create new app</li>
<li>绑定github，连接github里的streamlit项目</li>
<li>部署</li>
</ol>
<p>部署方法也可参考  <a href="https://www.youtube.com/watch?v=zK4Ch6e1zq8&amp;list=PLtqF5YXg7GLmCvTswG32NqQypOuYkPRUE&amp;index=5">Youtube视频</a></p>
<br>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>推荐系统与协同过滤、奇异值分解</title>
      <link>https://textdata.cn/blog/svd_in_recommendation_system/</link>
      <pubDate>Thu, 07 Jun 2018 10:40:10 +0600</pubDate>
      
      <guid>/blog/svd_in_recommendation_system/</guid>
      <description>通过网络中留下的痕迹，例如观影记录，挖掘人潜在的偏好向量，进而物以类聚人以群分，开展个性化推荐Through the traces left in the network, such as movie viewing records, the potential preference vectors of people are mined, and then people are grouped together to carry out personalized recommendations</description>
      <content:encoded><![CDATA[<p>昨天我从PyData2018发现一个视频，讲如何在数据缺失的情况下挖掘出用户和产品的特征向量, 用于产品推荐系统。</p>
<blockquote>
<p>Daniel Pyrathon - A practical guide to Singular Value Decomposition in Python PyCon2018</p>
</blockquote>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/d7iIb_XVkZs" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>如果视频无法观看，可以前往<a href="https://v.qq.com/x/page/i0679novb10.html">腾讯视频</a></p>
<br>
<h1 id="一预备知识">一、预备知识</h1>
<h2 id="11-协同过滤">1.1 协同过滤</h2>
<p>日常生活中，像亚马逊、淘宝、京东、今日头条等各大互联网公司会无时不刻的收集我们的网络用户行为数据，并根据积累的历史行为数据对我们推送推荐内容或者推荐商品。这就是我们不曾感受到存在的推荐算法所起到的作用，这之中比较常见的实现方式是<strong>协同过滤</strong>（Collaberative Filtering）。数据设计到用户、产品及产品评价三种信息，数据类似于下图
<img loading="lazy" src="img/01-%e7%94%a8%e6%88%b7%e8%af%84%e5%88%86%e4%bf%a1%e6%81%af.png" alt=""  />
</p>
<br>
<h2 id="12-相似的人更容易做相似的事">1.2 相似的人更容易做相似的事</h2>
<p>协同过滤的核心想法是相似的人往往会做相似的事情。比如，A 和 B 是两个崇尚科技的人（相似信息源于大量的观影数据），而 B 喜欢 看科幻片 ，那么我们猜测 A 也喜欢 科幻片。
<img loading="lazy" src="img/02-%e7%94%a8%e6%88%b7%e8%af%84%e5%88%86%e7%9f%a9%e9%98%b5.png" alt=""  />

<img loading="lazy" src="img/03-%e9%a2%84%e6%b5%8b%e7%94%a8%e6%88%b7%e5%af%b9%e7%94%b5%e5%bd%b1%e7%9a%84%e5%96%9c%e5%a5%bd.png" alt=""  />
</p>
<br>
<h2 id="13-问题提出">1.3 问题提出</h2>
<p>上面我们展示的用户电影可视化图，实际上就是推荐算法中经常用到的<strong>用户-评价矩阵</strong>,</p>
<ul>
<li>那么我们如何对矩阵进行计算，才能获取相似性信息？</li>
<li>有了相似性信息我们又如何去利用相似性信息去做产品推荐？</li>
<li>我们知道两个向量通过余弦相似计算就可以得出两个向量的近似程度，那么这些向量我们又该如何从<strong>用户-评价矩阵</strong>提取呢？</li>
</ul>
<br>
<h2 id="14-奇异值分解svd">1.4 奇异值分解SVD</h2>
<p>这就用到奇异值分解（Singular Value Decompositon），简称SVD。具体怎么提取不是我们本文的重点，Python都帮我们实现了，我们只需要稍微了解下SVD，就直接上手用。</p>
<p>比如我们现在有了<strong>用户-评价矩阵</strong>
<img loading="lazy" src="img/04-%e7%94%a8%e6%88%b7%e8%af%84%e4%bb%b7%e7%9f%a9%e9%98%b5.png" alt=""  />
</p>
<br>
<p>给定一个矩阵，我们都可以分解得到两种矩阵，一种是用户信息矩阵，一种是评价信息（产品）矩阵。这两种矩阵在本例中使用了n_features = 2，即对于用户向量或者产品评价向量长度均为2，实际上也可以为其他数字（比如3，4。。）
<img loading="lazy" src="img/05-%e4%b8%a4%e7%a7%8d%e7%9f%a9%e9%98%b5.png" alt=""  />
</p>
<p>那么User1对于蓝色电影的喜欢程度是可以通过向量计算得出3.52
<img loading="lazy" src="img/06-%e9%a2%84%e6%b5%8b%e8%ae%a1%e7%ae%97.png" alt=""  />
</p>
<br>
<h2 id="15-用户相似性">1.5 用户相似性</h2>
<p>如下图，在二维坐标中我们可以看出不同用户间的相似度。
<img loading="lazy" src="img/07-%e7%94%a8%e6%88%b7%e7%9b%b8%e4%bc%bc%e5%ba%a6.png" alt=""  />
</p>
<p><br><br></p>
<h1 id="二项目实战">二、项目实战</h1>
<p>我们将使用Python的surprise库，对MovieLens数据集构建一个简单的协同过滤推荐系统。</p>
<p>安装方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">scikit</span><span class="o">-</span><span class="n">surprise</span>
</code></pre></div><p>如果你的anaconda自带jupyter notebook。那么你可能需要使用下面的安装方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">conda</span> <span class="n">install</span> <span class="o">-</span><span class="n">c</span> <span class="n">conda</span><span class="o">-</span><span class="n">forge</span> <span class="n">scikit</span><span class="o">-</span><span class="n">surprise</span>
</code></pre></div><p>从安装名我们发现其余scikit的特殊关系，所以熟悉scikit的同学看本文会比较轻松。</p>
<br>
<h2 id="代码下载">代码下载</h2>
<p><a href="svd_in_recommendation_system.zip">点击下载</a></p>
<br>
## 2.1 准备数据
MovieLens数据集含有1000个用户的100000个观影评分记录。其中我们只需要使用该数据集中的u.data文件，该文件以行存储，每一行包括``userID itemID rating timestamp``,且各个字段之间以``\t``间隔。部分数据如下
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[&#39;196\t242\t3\t881250949\n&#39;, 
&#39;186\t302\t3\t891717742\n&#39;, 
&#39;22\t377\t1\t878887116\n&#39;, 
&#39;244\t51\t2\t880606923\n&#39;, 
&#39;166\t346\t1\t886397596\n&#39;]
</code></pre></div><br>
<h2 id="22-切割数据">2.2 切割数据</h2>
<p>在surprise库中我们可以创建读取器Reader的格式。在本例中，我们使用<code>\t</code>将每行数据分隔后分配给</p>
<p><code>user item rating timestamp</code></p>
<p>定义好Reader格式后，我们使用Dataset对象对数据进行读取操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">surprise</span> <span class="kn">import</span> <span class="n">Reader</span><span class="p">,</span> <span class="n">Dataset</span>

<span class="c1">#定义数据格式</span>
<span class="n">reader</span> <span class="o">=</span> <span class="n">Reader</span><span class="p">(</span><span class="n">line_format</span><span class="o">=</span><span class="s1">&#39;user item rating timestamp&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="c1">#使用reader格式从u.data文件中读取数据</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">Dataset</span><span class="o">.</span><span class="n">load_from_file</span><span class="p">(</span><span class="s1">&#39;u.data&#39;</span><span class="p">,</span> <span class="n">reader</span><span class="o">=</span><span class="n">reader</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="23-交叉检验">2.3 交叉检验</h2>
<p>surprise提供了交叉验证（crossvalidation）的接口，crossvalidation是啥？</p>
<p>我们先看图解释下</p>
<p>一份数据平均的分成5份，如果4份做训练集，1份做测试集。那么当我们训练模型的时候有1/5的数据我们的模型是无法学习的，这就浪费了20%。</p>
<p>但是我们又不能拿把所有的数据经过一次训练，再拿其中训练过的数据去做预测。因为这样会导致准确率a非常高，但放到实践中这个模型的预测准确率实际上是低于a的。</p>
<p>所以就有了crossvalidation交叉检验。我们一份数据训练5次，每次完整的数据分成4份训练1份测试。这样就解决了上面遇到的问题。如下图</p>
<p><img loading="lazy" src="img/08-crossvalidation.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1">#n_folds=5是指数据分成5份，做5次训练预测</span>
<span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">n_folds</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="24-最优化optimization">2.4 最优化Optimization</h2>
<p>训练怎么达到最优，那就要有Optimization，也就是要有一个可供参考的标准。</p>
<p>训练的方式与其他机器学习方法类似，要使得一种算法试图优化其<strong>预测值</strong>尽可能接近<strong>真实值</strong>。在协作过滤应用中，我们的算法将尝试预测某个<strong>用户-电影</strong>组合的评级，并将该<strong>预测值</strong>与<strong>真实值</strong>进行比较。 使用经典误差测量如均方根误差（Root mean squared error，RMSE）和平均绝对误差（Mean absolute error，MAE）来测量预测值和真实值之间的差异。</p>
<p>在surprise库中，我们有广泛的算法可供选择，并为每种算法（SVD，NMF，KNN）提供多种参数选择。 就我们的例子而言，我们将使用SVD算法。 优化目标<code>measures</code>采用<code>RMSE', 'MAE</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">surprise</span> <span class="kn">import</span> <span class="n">SVD</span><span class="p">,</span> <span class="n">evaluate</span>

<span class="c1">#相当于scikit的机器学习算法的初始化</span>
<span class="n">svd</span> <span class="o">=</span> <span class="n">SVD</span><span class="p">()</span>

<span class="c1">#相当于scikit中的score，模型评估</span>
<span class="n">evaluate</span><span class="p">(</span><span class="n">svd</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">measures</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;RMSE&#39;</span><span class="p">,</span> <span class="s1">&#39;MAE&#39;</span><span class="p">])</span>
</code></pre></div><p>Run</p>
<pre><code>Evaluating RMSE, MAE of algorithm SVD.

------------
Fold 1
RMSE: 0.9324
MAE:  0.7346
------------
Fold 2
RMSE: 0.9422
MAE:  0.7423
------------
Fold 3
RMSE: 0.9367
MAE:  0.7398
------------
Fold 4
RMSE: 0.9310
MAE:  0.7323
------------
Fold 5
RMSE: 0.9393
MAE:  0.7422
------------
------------
Mean RMSE: 0.9363
Mean MAE : 0.7382
------------
------------





CaseInsensitiveDefaultDict(list,
                           {'mae': [0.734621556055766,
                             0.7422621194493935,
                             0.7398192302116903,
                             0.7323079165231016,
                             0.7422361108902022],
                            'rmse': [0.9324301825022976,
                             0.9421845177536299,
                             0.9366580726086371,
                             0.9310376368987473,
                             0.9392636694333337]})
</code></pre>
<p>从上面运行结果看，optimizer选用RMSE后，5次训练的平均准确率高达93.63%。</p>
<br>
<h2 id="25-预测">2.5 预测</h2>
<p>最后我们还是很想看看训练出模型，其预测能力到底结果怎么样？</p>
<p>这次我们就做交叉验证了，省事点直接全部丢给SVD去训练</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">surprise</span> <span class="kn">import</span> <span class="n">SVD</span>
<span class="kn">from</span> <span class="nn">surprise</span> <span class="kn">import</span> <span class="n">Reader</span><span class="p">,</span> <span class="n">Dataset</span>

<span class="c1">#读取数据</span>
<span class="n">reader</span> <span class="o">=</span> <span class="n">Reader</span><span class="p">(</span><span class="n">line_format</span><span class="o">=</span><span class="s1">&#39;user item rating timestamp&#39;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">Dataset</span><span class="o">.</span><span class="n">load_from_file</span><span class="p">(</span><span class="s1">&#39;u.data&#39;</span><span class="p">,</span> <span class="n">reader</span><span class="o">=</span><span class="n">reader</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">build_full_trainset</span><span class="p">()</span> 

<span class="c1">#初始化svd模型,用data训练模型</span>
<span class="n">svd</span> <span class="o">=</span><span class="n">SVD</span><span class="p">()</span>
<span class="n">svd</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    &lt;surprise.prediction_algorithms.matrix_factorization.SVD at 0x10ab7d7f0&gt;
</code></pre></div><p>上面的代码</p>
<p>data = data.build_full_trainset()</p>
<p>这一行本来我没有写，但是当我注释掉这一行。出现下面的错误，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">DatasetAutoFolds&#39; object has no attribute &#39;global_mean&#39; on python surprise
</code></pre></div><p>最后在stackoverflow中找到解决办法，需要将data转化为surprise能够用的trainset类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">https://stackoverflow.com/questions/49263964/datasetautofolds-object-has-no-attribute-global-mean-on-python-surprise
</code></pre></div><p>下面继续我们的预测，userid为196，itemid为302， 其真实评分为4。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">userid</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="mi">196</span><span class="p">)</span>
<span class="n">itemid</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="mi">302</span><span class="p">)</span>
<span class="n">actual_rating</span> <span class="o">=</span> <span class="mi">4</span>
<span class="nb">print</span><span class="p">(</span><span class="n">svd</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">userid</span><span class="p">,</span> <span class="mi">302</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</code></pre></div><pre><code>user: 196        item: 302        r_ui = 4.00   est = 3.41   {'was_impossible': False}
</code></pre>
<p>预测值为3.41， 真实值为4。还是相对靠谱的。</p>
<br>
<br>
<h1 id="广而告之">广而告之</h1>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
