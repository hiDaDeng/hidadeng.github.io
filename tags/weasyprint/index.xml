<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WeasyPrint on 大邓和他的PYTHON</title>
    <link>/tags/weasyprint/</link>
    <description>Recent content in WeasyPrint on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 27 Mar 2022 10:41:10 +0600</lastBuildDate><atom:link href="/tags/weasyprint/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用WeasyPrint自动生成pdf报告文件</title>
      <link>https://hidadeng.github.io/blog/weasyprint_auto_report/</link>
      <pubDate>Sun, 27 Mar 2022 10:41:10 +0600</pubDate>
      
      <guid>/blog/weasyprint_auto_report/</guid>
      <description>自动化办公，可使用WeasyPrint自动生成pdf报告文件</description>
      <content:encoded><![CDATA[<p>Pandas非常善于处理大规模数据，支持将结果导出到CSV，Excel，HTML，json等文件中。 如果您想将 <code>多种信息（excel、图片等）组合</code> 到一个文档中，那么事情变得更加困难。 例如，如果要在一个Excel工作表上放置两个DataFrame，则需要使用相应的Excel库才能输出。 这当然是OK的，但走起来真不简单。 本文将介绍一种方法，将多种 <code>信息（excel、图片等）组合</code> 成一个 <code>HTML模板</code> ，然后使用<code>Jinja模板和WeasyPrint</code> 再将其转换为独立的PDF文档。</p>
<br>
<h2 id="操作流程">操作流程</h2>
<p>使用Pandas将数据输出到Excel文件中的多个工作表或者用DataFrames创建多个Excel文件非常方便。 但是，如果您想将 <code>多种信息（excel、图片等）组合</code> 输出到一个文件中，那么直接从Pandas进行操作的方法并不多。 幸运的是，万能的python大法有很多选项可以帮助我们。</p>
<p>在本文中，我将采用以下流程来创建多页PDF文档。</p>
<div style="text-align: center;">
<figure >
    
        <img src="img/pdf-conversion-pipeline.png" width="100%" />
    
    
</figure>
</div>
<br>
<h2 id="工具">工具</h2>
<p>我决定使用HTML作为模板语言，因为它可能是生成结构化数据最便捷的方法，支持各种格式数据（如图片、excel表）。我也认为每个人都知道（或可以弄清楚）足够的HTML知识来生成一个简单的报告。</p>
<p>这个工作流程中最困难的部分是弄清楚如何将HTML呈现为PDF。我觉得还没有最佳的解决方案，但我选择了 <code>WeasyPrint</code> ，因为它仍然在积极维护，我发现我可以相对容易地使它工作。作为替代方案，我过去使用过xhtml2pdf，它的效果也很好，遗憾的是该库缺乏文档说明，但它已存在一段时间，并且确实可以从HTML生成PDF。</p>
<br>
<h2 id="数据">数据</h2>
<p>如上所述，我们将使用之前文章中的相同数据集。 为了使这一切成为一个独立的文章，下面是我如何导入数据,做描述性统计，及并生成关于CPU和软件销售的 <code>数据透视表</code> 。</p>
<p>导入模块，并读入销售渠道信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;salesfunnel.xlsx&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Account</th>
      <th>Name</th>
      <th>Rep</th>
      <th>Manager</th>
      <th>Product</th>
      <th>Quantity</th>
      <th>Price</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>1</td>
      <td>30000</td>
      <td>presented</td>
    </tr>
    <tr>
      <th>1</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>Software</td>
      <td>1</td>
      <td>10000</td>
      <td>presented</td>
    </tr>
    <tr>
      <th>2</th>
      <td>714466</td>
      <td>Trantow-Barrows</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>Maintenance</td>
      <td>2</td>
      <td>5000</td>
      <td>pending</td>
    </tr>
    <tr>
      <th>3</th>
      <td>737550</td>
      <td>Fritsch, Russel and Anderson</td>
      <td>Craig Booker</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>1</td>
      <td>35000</td>
      <td>declined</td>
    </tr>
    <tr>
      <th>4</th>
      <td>146832</td>
      <td>Kiehn-Spinka</td>
      <td>Daniel Hilton</td>
      <td>Debra Henley</td>
      <td>CPU</td>
      <td>2</td>
      <td>65000</td>
      <td>won</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<p>对数据做透视表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">sales_report</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Manager&#34;</span><span class="p">,</span> <span class="s2">&#34;Rep&#34;</span><span class="p">,</span> <span class="s2">&#34;Product&#34;</span><span class="p">],</span> 
                              <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;Price&#34;</span><span class="p">,</span> <span class="s2">&#34;Quantity&#34;</span><span class="p">],</span>
                              <span class="n">aggfunc</span><span class="o">=</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">],</span> 
                              <span class="n">fill_value</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">sales_report</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}

.dataframe thead tr:last-of-type th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th colspan="2" halign="left">sum</th>
      <th colspan="2" halign="left">mean</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th>Price</th>
      <th>Quantity</th>
      <th>Price</th>
      <th>Quantity</th>
    </tr>
    <tr>
      <th>Manager</th>
      <th>Rep</th>
      <th>Product</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">Debra Henley</th>
      <th rowspan="3" valign="top">Craig Booker</th>
      <th>CPU</th>
      <td>65000</td>
      <td>2</td>
      <td>32500</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>Maintenance</th>
      <td>5000</td>
      <td>2</td>
      <td>5000</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>Software</th>
      <td>10000</td>
      <td>1</td>
      <td>10000</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">Daniel Hilton</th>
      <th>CPU</th>
      <td>105000</td>
      <td>4</td>
      <td>52500</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>Software</th>
      <td>10000</td>
      <td>1</td>
      <td>10000</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h2 id="模板">模板</h2>
<p>DataFrame拥有to_html()的方法，可以将dataframe数据转化为含有HTML格式的字符串。</p>
<p>但是随着您的报告变得越来越复杂或您选择将Jinja模板用于您的网络应用，jinja的这些功能将为您提供良好的服务。Jinja的另一个不错的功能是它包含多个内置过滤器，这些过滤器允许我们以Pandas中难以做到的方式格式化我们的一些数据。</p>
<p>为了在我们的应用程序中使用Jinja，我们需要做三件事：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1. 创建一个模板
2. 将变量添加到模板上下文中
3. 将模板渲染为HTML
</code></pre></div><br>
<p>这是一个非常简单的模板，我们称之为myreport.html：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{ title }}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Sales Funnel Report - National<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
     {{ national_pivot_table }}
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>上面html代码中拥有 <code>{{title}} 和 {{national_pivot_table }}</code> 这两个关键词。这两个关键词用来接收需要渲染的数据，比如图片对象、dataframe对象等。</p>
<p>要填充这些变量，我们需要创建一个Jinja环境并获取我们的模板对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">jinja2</span> <span class="kn">import</span> <span class="n">Environment</span><span class="p">,</span> <span class="n">FileSystemLoader</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">Environment</span><span class="p">(</span><span class="n">loader</span><span class="o">=</span><span class="n">FileSystemLoader</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">))</span>
<span class="n">template</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s1">&#39;myreport.html&#39;</span><span class="p">)</span>
</code></pre></div><p>在上面的示例中，我假设模板位于当前目录中，但您可以将完整路径放到模板位置。</p>
<p>另一个关键组件是 <code>env</code> 的创建。 这个变量是我们将数据（或对象）填充给模板的方式。 我们创建了一个名为 <code>template_var</code> 的字典，其中包含我们想要传递给模板的所有变量。</p>
<p><code>请注意变量的名称如何与我们的模板匹配。即名称要与myreport.html中的{{}}夹住的关键词一样。</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">template_vars</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;title&#34;</span> <span class="p">:</span> <span class="s2">&#34;Sales Funnel Report - National&#34;</span><span class="p">,</span>
                 <span class="s2">&#34;national_pivot_table&#34;</span><span class="p">:</span> <span class="n">sales_report</span><span class="o">.</span><span class="n">to_html</span><span class="p">()}</span>
</code></pre></div><p>最后一步是将 <code>template_vars</code> 渲染到html模板中，并输出为html字符串，最终我们将使用该html字符串来生成pdf报告。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">html_out</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">template_vars</span><span class="p">)</span>
</code></pre></div><p>为简洁起见，我不会显示完整的HTML，但您应该明白这一点。</p>
<br>
<h2 id="生成pdf">生成pdf</h2>
<p>pdf报告的生成部分相当简单，这里用到weasyprint库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">weasyprint</span> <span class="kn">import</span> <span class="n">HTML</span>
<span class="n">HTML</span><span class="p">(</span><span class="n">string</span><span class="o">=</span><span class="n">html_out</span><span class="p">)</span><span class="o">.</span><span class="n">write_pdf</span><span class="p">(</span><span class="s2">&#34;report.pdf&#34;</span><span class="p">)</span>
</code></pre></div><div style="text-align: center;">
<figure >
    
        <img src="img/ugly_table.png" width="100%" />
    
    
</figure>
</div>
<p>但是打开的pdf样式很简单，白底黑字并不美观。之所以这样是因为我们没有使用自定义样式表css，但是咱们不熟悉css，有一种简单的办法就是用成熟的css，这里我用的<code>typography.css</code> 作为填充表格时的样式表。这个css的优点有：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1. 相对较小且易于理解
2. 可以在PDF引擎中运行而不会抛出错误和警告
3. 能让表格表格看起来很美观
</code></pre></div><p>让我们尝试使用我们更新的样式表重新渲染它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">HTML</span><span class="p">(</span><span class="n">string</span><span class="o">=</span><span class="n">html_out</span><span class="p">)</span><span class="o">.</span><span class="n">write_pdf</span><span class="p">(</span><span class="s1">&#39;beautiful_report.pdf&#39;</span><span class="p">,</span> <span class="n">stylesheets</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;typography.css&#34;</span><span class="p">])</span>
</code></pre></div><div style="text-align: center;">
<figure >
    
        <img src="img/beautiful_table.png" width="100%" />
    
    
</figure>
</div>
<p>添加了一个stylesheets参数就让输出结果瞬间变得高端大气上档次。</p>
<br>
<h2 id="更多">更多</h2>
<p>如果想更加丰富的输出pdf报告，大家回去需要查阅jinja文档，找一些css样式表。</p>
<br>
<h2 id="下载weasyprint_auto_reportzip"><a href="weasyprint_auto_report.zip">下载</a></h2>
<p><a href="weasyprint_auto_report.zip">点击这里</a>下载本文需要的实验数据及代码</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
