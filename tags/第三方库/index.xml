<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>第三方库 on 大邓和他的PYTHON</title>
    <link>/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link>
    <description>Recent content in 第三方库 on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 25 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Faker库 | 生成实验数据</title>
      <link>https://hidadeng.github.io/blog/2022-11-25-faker-generate-test-data/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-25-faker-generate-test-data/</guid>
      <description>生成实验数据</description>
      <content:encoded><![CDATA[


<p>有时候学习新的数据分析方法时，需要构造一些小样本的实验数据，手动构造比较麻烦，这时候可以使用<a href="https://github.com/joke2k/faker">faker库</a>。</p>
<p><br></p>
<div id="安装" class="section level2">
<h2>安装</h2>
<pre><code>pip install Faker</code></pre>
<p><br></p>
</div>
<div id="快速上手" class="section level2">
<h2>快速上手</h2>
<pre class="python"><code>from faker import Faker

#设定语言，默认生成的是英文数据
#fake = Faker()
fake = Faker(locale=&#39;zh_CN&#39;)

#伪造姓名
fake.name()</code></pre>
<pre><code>## &#39;罗辉&#39;</code></pre>
<p><br></p>
<p>生成地址数据</p>
<pre class="python"><code>fake.address()</code></pre>
<pre><code>## &#39;湖北省张家港市大东王街v座 601815&#39;</code></pre>
<p><br></p>
<p>生成公司数据</p>
<pre class="python"><code>fake.company_prefix()</code></pre>
<pre><code>## &#39;银嘉&#39;</code></pre>
<p><br></p>
</div>
<div id="自定义" class="section level2">
<h2>自定义</h2>
<p>例如生成一个工作经历的实验数据，可以自定义公司名集合，从中随机抽取。</p>
<pre class="python"><code>from faker import Faker
fake = Faker()

my_word_list = [
&#39;华为&#39;,&#39;小米&#39;,&#39;三星&#39;,
&#39;海尔&#39;,&#39;宝马&#39;,&#39;保洁&#39;,
&#39;中铁&#39;,&#39;中通&#39;,&#39;京东&#39;,
&#39;阿里&#39;,&#39;百度&#39;,&#39;腾讯&#39;]

work_experiences = fake.sentence(ext_word_list=my_word_list, nb_words=5)
work_experiences</code></pre>
<pre><code>## &#39;京东 华为 中通.&#39;</code></pre>
<p><br></p>
</div>
<div id="设定随机性" class="section level2">
<h2>设定随机性</h2>
<p>由于faker属于随机生成数据的包，如果不限定状态， 每次运行相同的代码，随机生成的数据是不一样的。</p>
<pre class="python"><code>from faker import Faker
fake = Faker(&#39;zh_CN&#39;)

#设定随机状态
Faker.seed(4321)

print(fake.name())</code></pre>
<pre><code>## 王鑫</code></pre>
<p><br></p>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>ManagementScience | 使用网络算法识别创新的颠覆性与否</title>
      <link>https://hidadeng.github.io/blog/2022-09-07-management-science-disrupt-science-and-technology/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-07-management-science-disrupt-science-and-technology/</guid>
      <description>The CD index is a new approach to finding important points in evolving networks. When applied to large-scale data sets like U.S. patent citations, the index is useful for identifying influential innovations and other features of technological change.</description>
      <content:encoded><![CDATA[


<p>颠覆式创新是一个很火的概念，在创新创业、科学学等研究中，每个专利、论文的正文中都会引用关系，而引用关系会构成一个引用网络。</p>
<p>那么创新如何从网络形态进行区分，如何计算网络节点的创新程度，本文列举两篇与此相关的论文，分别是 Management science 和 Science 。</p>
<p><br><br></p>
<div id="文献摘要" class="section level2">
<h2>文献摘要</h2>
<p><strong>Funk, Russell J., and Jason Owen-Smith. “A dynamic network measure of technological change.” <em>Management science</em> 63, no. 3 (2017): 791-817.</strong></p>
<p>该文使用网络分析方法研究技术变革，论文认为 <strong>颠覆性的新发明，通过将发明者的注意力转移到或远离这些发明所依赖的知识，来重塑相互关联的技术网络。即更广的视野或更久远的视角，往往有利于颠覆性创新的产生</strong>。<strong>基于该思路，本文开发了新发明的颠覆性与否的计算指标cdindex</strong>。我们将这些指标应用于大学研究商业化的分析，并发现 <strong>联邦研究资金推动校园产生颠覆性创新，而商业联系会有利于巩固现状的创新</strong>。通过量化新技术，我们提出的指数允许基于专利的创新研究捕捉概念上重要的现象， 这些现象无法通过既定措施检测到。该测量方法提供了支持创新、创业、技术战略、科学政策和社会网络理论研究的理论发展的经验见解。</p>
<blockquote>
<p>Abstract: This article outlines a network approach to the study of technological change. We propose that new inventions reshape networks of interlinked technologies by shifting inventors’ attention to or away from the knowledge on which those inventions build. Using this approach, we develop novel indexes of the extent to which a new invention consolidates or destabilizes existing technology streams. We apply these indexes in analyses of university research commercialization and ﬁnd that, although federal research funding pushes campuses to create inventions that are more destabilizing, deeper commercial ties lead them to produce technologies that consolidate the status quo. By quantifying the eﬀects that new technologies have on their predecessors, the indexes we propose allow patent-based studies of innovation to capture conceptually important phenomena that are not detectable with established measures. The measurement approach presented here oﬀers empirical insights that support theoretical development in studies of innovation, entrepreneurship, technology strategy, science policy, and social network theory.</p>
</blockquote>
<p><br></p>
<p><strong>Wu, Lingfei, Dashun Wang, and James A. Evans. “Large teams develop and small teams disrupt science and technology.” Nature 566, no. 7744 (2019): 378-382.</strong></p>
<p>当今科学和技术最普遍的趋势之一是各个领域的大型团队的增长，因为孤独的研究人员和小型团队的流行程度正在减少 。团队规模的增加归因于科学活动的专业化、通信技术的改进 或需要跨学科解决方案的现代问题的复杂性。团队规模的这种转变引发了一个问题，即大团队所产生的科技特征是否以及如何不同于小团队。分析了 1954-2014 年期间超过 6500 万篇论文、专利和软件产品，证明在此期间，<strong>较小的团队倾向于将拉长到更大的时间尺度，借鉴过去，用新的想法和机会来颠覆科学和技术；而较大的团队倾向于聚焦于当前流行的，完善当前现有的</strong>。不论团队大小，均对于蓬勃发展的科学技术生态至关重要，并表明，为实现这一目标，科学政策应旨在支持团队规模的多样性。</p>
<blockquote>
<p>Abstract: One of the most universal trends in science and technology today is the growth of large teams in all areas, as solitary researchers and small teams diminish in prevalence. Increases in team size have been attributed to the specialization of scientific activities,
improvements in communication technology, or the complexity
of modern problems that require interdisciplinary solutions.This shift in team size raises the question of whether and how the character of the science and technology produced by large teams differs from that of small teams. Here we analyse more than 65 million papers, patents and software products that span the period 1954–2014, and demonstrate that across this period smaller teams have tended to disrupt science and technology with new ideas and opportunities, whereas larger teams have tended to develop existing ones. Work from larger teams builds on morerecent and popular developments, and attention to their work comes
immediately. By contrast, contributions by smaller teams search more deeply into the past, are viewed as disruptive to science and technology and succeed further into the future—if at all. Observed differences between small and large teams are magnified for higherimpact work, with small teams known for disruptive work and large teams for developing work. Differences in topic and research design
account for a small part of the relationship between team size and disruption; most of the effect occurs at the level of the individual, as people move between smaller and larger teams. These results demonstrate that both small and large teams are essential to a flourishing ecology of science and technology, and suggest that, to achieve this, science policies should aim to support a diversity of team sizes.</p>
</blockquote>
<p><br><br></p>
</div>
<div id="算法对比" class="section level2">
<h2>算法对比</h2>
<p>我没阅读两篇论文，仅就颠覆性与否的计算方法和图例，感觉算法实现差不多。</p>
<div class="figure">
<img src="img/cdindex-managent_science_2017.png" alt="" />
<p class="caption">上图为2017年Management Science的插图</p>
</div>
<p><br></p>
<div class="figure">
<img src="img/disruption_nature_2019.png" alt="" />
<p class="caption">上图为2019年Nature的插图</p>
</div>
<p><br><br></p>
</div>
<div id="代码数据" class="section level2">
<h2>代码数据</h2>
<p>下面分别为Management2017和Nature2019的主页，均含数据和代码。</p>
<p><a href="http://russellfunk.org/cdindex/"><img src="img/cdindex-homepage.png" /></a></p>
<p><br></p>
<p><a href="https://lingfeiwu.github.io/smallTeams/"><img src="img/nature2019-disrupt-homepage.png" /></a></p>
<p><br><br></p>
</div>
<div id="算法实现" class="section level2">
<h2>算法实现</h2>
<p>按照时间优先原则，本文就只分享Management2017论文作者Funk, Russell开源了cdindex库 (开发语言C和Python) ，安装</p>
<p><br></p>
<pre><code>pip3 install cdindex</code></pre>
<p>将Management2017 cdindex算法图 标注为如下图， 下图中左右两个网络节点是相同的，只需构造一套节点，两套边数据即可完成实验。</p>
<p><img src="img/cdindex-managent_science_2017_demo.png" /></p>
<p><br></p>
<p>我们就直接上代码</p>
<pre class="python"><code>import cdindex
import datetime

#节点，理解为专利号或者论文doi号；同时节点有先后时间属性
vertices = [{&quot;name&quot;: &quot;x1&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x2&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x3&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x4&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
        
           {&quot;name&quot;: &quot;y&quot;, &quot;time&quot;: datetime.datetime(1991, 1, 1)},
          
           {&quot;name&quot;: &quot;z1&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z2&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z3&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z4&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z5&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z6&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)}]
           
    
#edges_1边关系
#edges_1中的y为颠覆型
edges_1 = [{&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;y&quot;},
           
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x1&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x2&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x3&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x4&quot;}]


#edges_2边关系 
#edges_2中的y为巩固型
edges_2 = [{&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;y&quot;},
           
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x1&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x2&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x3&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x4&quot;},
          
          {&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;x1&quot;},
          {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;x1&quot;},
          {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;x2&quot;},
           
          {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;x3&quot;},
          {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;x3&quot;},
          {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;x4&quot;},
          {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;x4&quot;}]



# 构建两个网络
graph1 = cdindex.Graph() #颠覆型
graph2 = cdindex.Graph() #发展型

# 添加节点
for vertex in vertices:
    graph1.add_vertex(vertex[&quot;name&quot;], cdindex.timestamp_from_datetime(vertex[&quot;time&quot;]))
    graph2.add_vertex(vertex[&quot;name&quot;], cdindex.timestamp_from_datetime(vertex[&quot;time&quot;]))

# 添加引用关系
for edge in edges_1:
    graph1.add_edge(edge[&quot;source&quot;], edge[&quot;target&quot;])
for edge in edges_2:
    graph2.add_edge(edge[&quot;source&quot;], edge[&quot;target&quot;])
    
    
#y研究发布后1825天内，引用y的论文(专利)列入网络。
t_delta = int(datetime.timedelta(days=1825).total_seconds())

#计算cdindex得分
score1 = graph1.cdindex(&quot;y&quot;, t_delta)
score2 = graph2.cdindex(&quot;y&quot;, t_delta)

print(&#39;左侧-网络中的y节点的cdinex得分: {}, 节点y 为颠覆性创新&#39;.format(score1))</code></pre>
<pre><code>## 左侧-网络中的y节点的cdinex得分: 1.0, 节点y 为颠覆性创新</code></pre>
<p><br></p>
<pre class="python"><code>print(&#39;右侧-网络中的y节点的cdinex得分: {}, 节点y 为发展性创新&#39;.format(score2))</code></pre>
<pre><code>## 右侧-网络中的y节点的cdinex得分: -1.0, 节点y 为发展性创新</code></pre>
<p><br><br></p>
</div>
<div id="cdindex" class="section level2">
<h2>cdindex</h2>
<p>对比Python的结果，与论文计算过程，完全一致。cdindex内部实现我不太熟悉，如果想了解cdindex内部实现，可前往 <a href="https://github.com/russellfunk/cdindex" class="uri">https://github.com/russellfunk/cdindex</a> 阅读cdindex库的源码。
<img src="img/cdindex-managent_science_2017.png" /></p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>chinese-converter | 中文繁简互换Python库</title>
      <link>https://hidadeng.github.io/blog/chinese_converter/</link>
      <pubDate>Mon, 11 Jul 2022 09:40:10 +0600</pubDate>
      
      <guid>/blog/chinese_converter/</guid>
      <description>中文繁简互换</description>
      <content:encoded><![CDATA[<p>网上有一些繁体中文资源不能直接利用，通过chinese-convertor库，我们可以进行中文繁简互换。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install chinese-converter
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">chinese_converter</span>

<span class="n">chinese_converter</span><span class="o">.</span><span class="n">to_traditional</span><span class="p">(</span><span class="s2">&#34;中国&#34;</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">中國
</code></pre></div><br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">chinese_converter</span><span class="o">.</span><span class="n">to_simplified</span><span class="p">(</span><span class="s2">&#34;中國&#34;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">中国
</code></pre></div><br>
<br>
<h2 id="长期征稿">长期征稿</h2>
<div style="text-align: center;">
<figure >
    <a href="https://textdata.cn/blog/call_for_paper/">
        <img src="/images/blog/call_for_paper.png" width="100%" />
    </a>
    <figcaption><small><i>点击了解投稿</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="招募小伙伴">招募小伙伴</h2>
<div style="text-align: center;">
<figure >
    <a href="https://textdata.cn/blog/we_need_you/">
        <img src="/images/blog/we_need_you.png" width="100%" />
    </a>
    <figcaption><small><i>点击加入我们</i></small></figcaption>
</figure>
</div>
<br>
<h2 id="了解课程">了解课程</h2>
<div style="text-align: center;">
<figure >
    <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000015158133596">
        <img src="/images/bg/management_data_mining_with_python_course.png" width="100%" />
    </a>
    <figcaption><small><i>点击上方图片购买课程</i></small></figcaption>
</figure>
</div>
<p><a href="https://textdata.cn/blog/management_python_course/">点击进入详情页</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>ashares库|A股市场历史行情数据</title>
      <link>https://hidadeng.github.io/blog/ashares/</link>
      <pubDate>Sun, 05 Dec 2021 16:40:10 +0600</pubDate>
      
      <guid>/blog/ashares/</guid>
      <description>&lt;h1 id=&#34;ashares&#34;&gt;ashares&lt;/h1&gt;
&lt;p&gt;代码非原创，是对项目&lt;a href=&#34;https://github.com/mpquant/Ashare&#34;&gt;Ashare&lt;/a&gt;的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。&lt;/p&gt;
&lt;h2 id=&#34;功能特点&#34;&gt;功能特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年&lt;/li&gt;
&lt;li&gt;双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。&lt;/li&gt;
&lt;li&gt;全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理&lt;/li&gt;
&lt;li&gt;和其他行情库（tushare等）比的优点是什么？ &amp;ndash; 简单 轻量 便携 开源&lt;/li&gt;
&lt;li&gt;Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 &lt;code&gt;get_price()&lt;/code&gt; 看完下面例子就会了&lt;/li&gt;
&lt;li&gt;Ashare可以用在任何需要量化研究，量化分析的场合&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip install akshares
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt;  &lt;span class=&#34;nn&#34;&gt;ashares&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
    
&lt;span class=&#34;c1&#34;&gt;# 证券代码兼容多种格式 通达信，同花顺，聚宽&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# sh000001 (000001.XSHG)    sz399006 (399006.XSHE)   sh600519 ( 600519.XSHG ) &lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh000001&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;#默认获取今天往前5天的日线实时行情&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数日线行情&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;000001.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2021-04-30&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#可以指定结束日期，获取历史行情&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数历史行情&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                        

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;000001.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2018-06-15&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#支持&amp;#39;1d&amp;#39;日, &amp;#39;1w&amp;#39;周,  &amp;#39;1M&amp;#39;月  &lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;上证指数历史周线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sh600519&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;15m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;#分钟线实时行情，可用&amp;#39;1m&amp;#39;,&amp;#39;5m&amp;#39;,&amp;#39;15m&amp;#39;,&amp;#39;30m&amp;#39;,&amp;#39;60m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;贵州茅台15分钟线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;600519.XSHG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;60m&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#分钟线实时行情，可用&amp;#39;1m&amp;#39;,&amp;#39;5m&amp;#39;,&amp;#39;15m&amp;#39;,&amp;#39;30m&amp;#39;,&amp;#39;60m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;贵州茅台60分钟线&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#上证指数日线行情----------------------------------------------------
              open    close     high      low       volume
2021-06-07  3597.14  3599.54  3600.38  3581.90  303718677.0
2021-06-08  3598.75  3580.11  3621.52  3563.25  304491470.0
2021-06-09  3576.80  3591.40  3598.71  3572.64  298323296.0
2021-06-10  3587.53  3610.86  3624.34  3584.13  318174808.0
2021-06-11  3614.11  3589.75  3614.40  3587.15  360554970.0


#贵州茅台60分钟线----------------------------------------------------
                       open    close     high      low    volume
2021-06-10 14:00:00  2237.00  2224.16  2245.00  2222.00   4541.53
2021-06-10 15:00:00  2222.21  2238.48  2240.34  2222.21   4146.88
2021-06-11 10:30:00  2239.00  2220.00  2244.00  2197.86  12030.00
2021-06-11 11:30:00  2220.01  2210.18  2231.80  2200.18   4868.00
2021-06-11 14:00:00  2210.10  2223.35  2224.48  2206.01   4544.00
2021-06-11 15:00:00  2223.33  2178.81  2226.80  2178.81  12529.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;广而告之&#34;&gt;广而告之&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/call_for_paper/&#34;&gt;长期征稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/we_need_you/&#34;&gt;长期招募小伙伴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://textdata.cn/blog/management_python_course/&#34;&gt;付费视频课 | Python实证指标构建与文本分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="ashares">ashares</h1>
<p>代码非原创，是对项目<a href="https://github.com/mpquant/Ashare">Ashare</a>的封装, 中国股市A股股票行情实时数据最简封装API接口, 包含日线,分时分钟线,全部格式成DataFrame格式数据,可用来研究，量化分析，证券股票程序化自动化交易系统 行情系统包括新浪腾讯双数据核心，自动故障切换，为量化研究者在数据获取方面极大地减轻工作量，更加专注于策略和模型的研究与实现。</p>
<h2 id="功能特点">功能特点</h2>
<ul>
<li>双内核封装，新浪财经，腾讯股票的实时行情数据，包括任意历史日线，周线，月线，分钟线，小时线等，已经稳定运行数年</li>
<li>双内核一主一备，自动热备，自动切换，Ashare即使用来做量化实盘行情源也可以满足。</li>
<li>全部数据格式清理成DataFrame格式数据，让您非常方便的使用pandas来分析和处理</li>
<li>和其他行情库（tushare等）比的优点是什么？ &ndash; 简单 轻量 便携 开源</li>
<li>Ashare把复杂的数据获取，拆分，整合逻辑全部封装成一个函数 <code>get_price()</code> 看完下面例子就会了</li>
<li>Ashare可以用在任何需要量化研究，量化分析的场合</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install akshares
</code></pre></div><br>
<h2 id="快速上手">快速上手</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span>  <span class="nn">ashares</span> <span class="kn">import</span> <span class="n">get_price</span><span class="p">,</span> 
    
<span class="c1"># 证券代码兼容多种格式 通达信，同花顺，聚宽</span>
<span class="c1"># sh000001 (000001.XSHG)    sz399006 (399006.XSHE)   sh600519 ( 600519.XSHG ) </span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;sh000001&#39;</span><span class="p">,</span> <span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1d&#39;</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>      <span class="c1">#默认获取今天往前5天的日线实时行情</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数日线行情</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;000001.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1d&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">end_date</span><span class="o">=</span><span class="s1">&#39;2021-04-30&#39;</span><span class="p">)</span>  <span class="c1">#可以指定结束日期，获取历史行情</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数历史行情</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>                        

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;000001.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;1w&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">end_date</span><span class="o">=</span><span class="s1">&#39;2018-06-15&#39;</span><span class="p">)</span>  <span class="c1">#支持&#39;1d&#39;日, &#39;1w&#39;周,  &#39;1M&#39;月  </span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;上证指数历史周线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span> 

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;sh600519&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;15m&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>     <span class="c1">#分钟线实时行情，可用&#39;1m&#39;,&#39;5m&#39;,&#39;15m&#39;,&#39;30m&#39;,&#39;60m&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;贵州茅台15分钟线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

<span class="n">df</span><span class="o">=</span><span class="n">get_price</span><span class="p">(</span><span class="s1">&#39;600519.XSHG&#39;</span><span class="p">,</span><span class="n">frequency</span><span class="o">=</span><span class="s1">&#39;60m&#39;</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>  <span class="c1">#分钟线实时行情，可用&#39;1m&#39;,&#39;5m&#39;,&#39;15m&#39;,&#39;30m&#39;,&#39;60m&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;贵州茅台60分钟线</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span><span class="n">df</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#上证指数日线行情----------------------------------------------------
              open    close     high      low       volume
2021-06-07  3597.14  3599.54  3600.38  3581.90  303718677.0
2021-06-08  3598.75  3580.11  3621.52  3563.25  304491470.0
2021-06-09  3576.80  3591.40  3598.71  3572.64  298323296.0
2021-06-10  3587.53  3610.86  3624.34  3584.13  318174808.0
2021-06-11  3614.11  3589.75  3614.40  3587.15  360554970.0


#贵州茅台60分钟线----------------------------------------------------
                       open    close     high      low    volume
2021-06-10 14:00:00  2237.00  2224.16  2245.00  2222.00   4541.53
2021-06-10 15:00:00  2222.21  2238.48  2240.34  2222.21   4146.88
2021-06-11 10:30:00  2239.00  2220.00  2244.00  2197.86  12030.00
2021-06-11 11:30:00  2220.01  2210.18  2231.80  2200.18   4868.00
2021-06-11 14:00:00  2210.10  2223.35  2224.48  2206.01   4544.00
2021-06-11 15:00:00  2223.33  2178.81  2226.80  2178.81  12529.00
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>backtrader库 | 简单均线买入卖出策略</title>
      <link>https://hidadeng.github.io/blog/backtrader_demo/</link>
      <pubDate>Fri, 03 Dec 2021 20:40:10 +0600</pubDate>
      
      <guid>/blog/backtrader_demo/</guid>
      <description>忙活几年不亏不赚可还行</description>
      <content:encoded><![CDATA[<p>Backtrader是用于量化回测的python框架，作者是德国人Daniel Rodriguez。相比于zipline等量化回测平台，backtrader是一个易懂、易上手的量化投资框架，今天我们试着用Backtrader进行简单的均线买入卖出量化策略回溯，即5日均线上穿20日均线，则表示股票处于强势，买入。反之，处于弱势，卖出。</p>
<br>
<h2 id="下载">下载</h2>
<p><a href="backtrader_code.zip"><strong>点击下载本文代码数据</strong></a></p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install backtrader
</code></pre></div><br>
<h2 id="快速入门">快速入门</h2>
<br>
<ul>
<li>
<p><strong>买入</strong>：MA5上穿MA20， 即五日价格移动平均线(MA5)和二十日价格移动平均线(MA20)， 最近处于涨势</p>
</li>
<li>
<p><strong>卖出</strong>：MA20下穿MA5， 即五日价格移动平均线(MA5)和二十日价格移动平均线(MA20)， 最近处于涨势</p>
</li>
</ul>
<br>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">datetime</span>

<span class="kn">import</span> <span class="nn">backtrader</span> <span class="k">as</span> <span class="nn">bt</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="c1">#初始化</span>
    <span class="n">cerebro</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">Cerebro</span><span class="p">()</span>

    <span class="c1">#设定初始资金</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">setcash</span><span class="p">(</span><span class="mf">100000.0</span><span class="p">)</span>

    <span class="c1">#策略执行前的资金</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;启动资金: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()))</span>

    <span class="c1">#策略执行</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>

    <span class="c1">#策略执行前的资金</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;启动资金: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()))</span>
</code></pre></div><pre><code>启动资金: 100000.0
启动资金: 100000.0
</code></pre>
<p>每次股票交易，证券经纪人会收取一定的佣金，如万三（每一万元交易收三元）即0.003</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">setcommission</span><span class="p">(</span><span class="mf">0.003</span><span class="p">)</span>
</code></pre></div><p>交易会有最小的购买/卖出份额，一般一手100股</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cerebro</span><span class="o">.</span><span class="n">addsizer</span><span class="p">(</span><span class="n">bt</span><span class="o">.</span><span class="n">sizers</span><span class="o">.</span><span class="n">FixedSize</span><span class="p">,</span> <span class="n">stake</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="加载数据">加载数据</h2>
<ul>
<li>
<p><strong>前复权</strong>：保持当前价格不变，将历史价格进行增减，从而使股价连续。 前复权用来看盘非常方便，能一眼看出股价的历史走势，叠加各种技术指标也比较顺畅，是各种行情软件默认的复权方式。 这种方法虽然很常见，但也有两个缺陷需要注意。</p>
<ul>
<li>为了保证当前价格不变，每次股票除权除息，均需要重新调整历史价格，因此其历史价格是时变的。 这会导致在不同时点看到的历史前复权价可能出现差异。</li>
<li>对于有持续分红的公司来说，前复权价可能出现负值。</li>
</ul>
</li>
<li>
<p><strong>后复权</strong> ：保证历史价格不变，在每次股票权益事件发生后，调整当前的股票价格。 后复权价格和真实股票价格可能差别较大，不适合用来看盘。 其优点在于，可以被看作投资者的长期财富增长曲线，反映投资者的真实收益率情况。</p>
</li>
</ul>
<p>在量化投资研究中普遍采用后复权数据，使用 <a href="https://github.com/mpquant/Ashare">https://github.com/mpquant/Ashare</a> 下载的股票数据</p>
<p>Backtrader将数据集称作数据流Data Feeds, 默认数据集是yahoo的股票数据，通过以下代码即可加载:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 创建数据</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">feeds</span><span class="o">.</span><span class="n">YahooFinanceCSVData</span><span class="p">(</span>
    <span class="n">dataname</span><span class="o">=</span><span class="s1">&#39;sz000725.csv&#39;</span><span class="p">,</span>
    <span class="n">datetime</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
    <span class="nb">open</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">high</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">low</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
    <span class="n">close</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
    <span class="n">volume</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">dtformat</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">&#39;</span><span class="p">),</span>
    <span class="n">fromdate</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
    <span class="n">todate</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><br>
<h2 id="添加指标">添加指标</h2>
<p>backtrader中内置了许多计算值表，比如移动平滑线、MACD、RSI等等， 我们这一篇文章仅需要移动平均线MA， 设置方法如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="bp">self</span><span class="o">.</span><span class="n">sma5</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">indicators</span><span class="o">.</span><span class="n">MovingAverageSimple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">period</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">sma20</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">indicators</span><span class="o">.</span><span class="n">MovingAverageSimple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">period</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><p>datas[0]是第一个数据集， period是指多少天的移动平均线，比如5，则返回MA5的相关数据。</p>
<br>
<h2 id="构建策略">构建策略</h2>
<p>使用backtrader构建策略是一件很简单的事情， 继承backtrader的策略类，并重写部分方法，就能实现策略。比如</p>
<ul>
<li>重写属于我们自己的log函数</li>
<li>均线金叉死叉策略</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TestStrategy</span><span class="p">(</span><span class="n">bt</span><span class="o">.</span><span class="n">Strategy</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    继承并构建自己的策略
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">txt</span><span class="p">,</span> <span class="n">dt</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">doprint</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
        <span class="s2">&#34;日志函数，用于统一输出日志格式&#34;</span>
        <span class="k">if</span> <span class="n">doprint</span><span class="p">:</span>
            <span class="n">dt</span> <span class="o">=</span> <span class="n">dt</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1">, </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">isoformat</span><span class="p">(),</span> <span class="n">txt</span><span class="p">))</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 初始化相关数据</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dataclose</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">close</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">buyprice</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">buycomm</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="c1"># 移动平均线初始化</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sma5</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">indicators</span><span class="o">.</span><span class="n">MovingAverageSimple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">period</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sma20</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">indicators</span><span class="o">.</span><span class="n">MovingAverageSimple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">period</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">notify_order</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">order</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        订单状态处理
</span><span class="s2">        Arguments:
</span><span class="s2">            order </span><span class="si">{object}</span><span class="s2"> -- 订单状态
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="n">order</span><span class="o">.</span><span class="n">Submitted</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">Accepted</span><span class="p">]:</span>
            <span class="c1"># 如订单已被处理，则不用做任何事情</span>
            <span class="k">return</span>

        <span class="c1"># 检查订单是否完成</span>
        <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="n">order</span><span class="o">.</span><span class="n">Completed</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">isbuy</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">buyprice</span> <span class="o">=</span> <span class="n">order</span><span class="o">.</span><span class="n">executed</span><span class="o">.</span><span class="n">price</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">buycomm</span> <span class="o">=</span> <span class="n">order</span><span class="o">.</span><span class="n">executed</span><span class="o">.</span><span class="n">comm</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">bar_executed</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

        <span class="c1"># 订单因为缺少资金之类的原因被拒绝执行</span>
        <span class="k">elif</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="n">order</span><span class="o">.</span><span class="n">Canceled</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">Margin</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">Rejected</span><span class="p">]:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;Order Canceled/Margin/Rejected&#39;</span><span class="p">)</span>

        <span class="c1"># 订单状态处理完成，设为空</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">notify_trade</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">trade</span><span class="p">):</span>
        <span class="s2">&#34;&#34;&#34;
</span><span class="s2">        交易成果
</span><span class="s2">        Arguments:
</span><span class="s2">            trade </span><span class="si">{object}</span><span class="s2"> -- 交易状态
</span><span class="s2">        &#34;&#34;&#34;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">trade</span><span class="o">.</span><span class="n">isclosed</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="c1"># 显示交易的毛利率和净利润</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;OPERATION PROFIT, GROSS </span><span class="si">{}</span><span class="s1">, NET </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">trade</span><span class="o">.</span><span class="n">pnl</span><span class="p">,</span> <span class="n">trade</span><span class="o">.</span><span class="n">pnlcomm</span><span class="p">),</span> <span class="n">doprint</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s1">&#39;&#39;&#39; 下一次执行 &#39;&#39;&#39;</span>

        <span class="c1"># 记录收盘价</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s1">&#39;Close, </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">dataclose</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

        <span class="c1"># 是否正在下单，如果是的话不能提交第二次订单</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">order</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="c1"># 是否已经买入</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">:</span>
            <span class="c1"># 还没买，如果 MA5 &gt; MA10 说明涨势，买入</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sma5</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">sma20</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">buy</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 已经买了，如果 MA5 &lt; MA10 ，说明跌势，卖出</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sma5</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">sma20</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sell</span><span class="p">()</span>

    <span class="c1">#def stop(self):</span>
        <span class="c1">#self.log(u&#39;(金叉死叉有用吗) Ending Value {}&#39;.format(self.broker.getvalue()), doprint=True)</span>
</code></pre></div><br>
<h2 id="策略回测">策略回测</h2>
<p>为了验证我们开头提到的策略，咱使用了 京东方sz000725 在2014年7月11日至今2021年12月3日的股票数据，将数据命名为sz000725.csv, 我们先用pandas审查下csv</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/sz000725.csv&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">|    |   Unnamed: 0 |        date |   open |   high |   low |   close |      volume |
|---:|-------------:|------------:|-------:|-------:|------:|--------:|------------:|
|  0 |            0 | 2.01407e+07 |   2.17 |   2.2  |  2.16 |    2.19 | 7.49341e+07 |
|  1 |            1 | 2.01407e+07 |   2.18 |   2.2  |  2.17 |    2.2  | 8.10931e+07 |
|  2 |            2 | 2.01407e+07 |   2.19 |   2.21 |  2.18 |    2.2  | 8.19694e+07 |
|  3 |            3 | 2.01407e+07 |   2.2  |   2.21 |  2.19 |    2.21 | 7.96481e+07 |
|  4 |            4 | 2.01407e+07 |   2.2  |   2.21 |  2.19 |    2.21 | 8.75106e+07 |
</code></pre></div><p>在backtrader中，使用GenericCSVData函数来加载csv，需要注明日期始末、open/high/low/close/volume等字段在csv中的列数(第几列，从0开始，0表示第一列)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">backtrader</span> <span class="k">as</span> <span class="nn">bt</span>
<span class="kn">import</span> <span class="nn">datetime</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="c1"># 初始化模型</span>
    <span class="n">cerebro</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">Cerebro</span><span class="p">()</span>
    <span class="n">init_cash</span> <span class="o">=</span> <span class="mf">100000.0</span>
    <span class="n">fromdate</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
    <span class="n">todate</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="c1">#构建策略</span>
    <span class="n">strategy</span> <span class="o">=</span> <span class="n">cerebro</span><span class="o">.</span><span class="n">addstrategy</span><span class="p">(</span><span class="n">TestStrategy</span><span class="p">)</span>

    <span class="c1">#每次买100股</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">addsizer</span><span class="p">(</span><span class="n">bt</span><span class="o">.</span><span class="n">sizers</span><span class="o">.</span><span class="n">FixedSize</span><span class="p">,</span> <span class="n">stake</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

    <span class="c1">#加载数据到模型</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">bt</span><span class="o">.</span><span class="n">feeds</span><span class="o">.</span><span class="n">GenericCSVData</span><span class="p">(</span>
        <span class="n">dataname</span><span class="o">=</span><span class="s1">&#39;data/sz000725.csv&#39;</span><span class="p">,</span>
        <span class="n">fromdate</span><span class="o">=</span><span class="n">fromdate</span><span class="p">,</span>
        <span class="n">todate</span><span class="o">=</span><span class="n">todate</span><span class="p">,</span>
        <span class="n">dtformat</span><span class="o">=</span><span class="s1">&#39;%Y%m</span><span class="si">%d</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="n">datetime</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="nb">open</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
        <span class="n">high</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
        <span class="n">low</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
        <span class="n">close</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
        <span class="n">volume</span><span class="o">=</span><span class="mi">6</span>
    <span class="p">)</span>

    <span class="n">cerebro</span><span class="o">.</span><span class="n">adddata</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="c1"># 设定初始资金和佣金</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">setcash</span><span class="p">(</span><span class="n">init_cash</span><span class="p">)</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">setcommission</span><span class="p">(</span><span class="mf">0.003</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;会不会玩了个寂寞？&#39;</span><span class="p">)</span>
    <span class="c1">#策略执行前的资金</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;启动资金: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()))</span>

    <span class="c1">#策略执行</span>
    <span class="n">cerebro</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>

    <span class="c1">#策略结束时的资金</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;策略结束时资金: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()))</span>

    <span class="n">duration_year</span> <span class="o">=</span> <span class="p">(</span><span class="n">todate</span><span class="o">-</span><span class="n">fromdate</span><span class="p">)</span><span class="o">.</span><span class="n">days</span><span class="o">/</span><span class="mi">360</span>
    <span class="n">end_value</span> <span class="o">=</span> <span class="n">cerebro</span><span class="o">.</span><span class="n">broker</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
    <span class="n">roi</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">end_value</span><span class="o">/</span><span class="n">init_cash</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="n">duration_year</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;策略年华收益率: </span><span class="si">{}</span><span class="s1">%&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">roi</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>

</code></pre></div><pre><code>会不会玩了个寂寞？
启动资金: 100000.0
2014-08-27, OPERATION PROFIT, GROSS -3.000000000000025, NET -4.365000000000025
2014-10-28, OPERATION PROFIT, GROSS 10.999999999999988, NET 9.568999999999988
2014-11-24, OPERATION PROFIT, GROSS -4.0000000000000036, NET -5.584000000000003
2015-01-15, OPERATION PROFIT, GROSS 52.0, NET 50.242
2015-05-08, OPERATION PROFIT, GROSS 113.00000000000003, NET 110.82500000000003
2015-07-02, OPERATION PROFIT, GROSS 25.0, NET 22.075
2015-08-25, OPERATION PROFIT, GROSS -96.0, NET -98.076
2015-11-03, OPERATION PROFIT, GROSS -8.999999999999986, NET -10.760999999999985
2015-11-30, OPERATION PROFIT, GROSS -16.000000000000014, NET -17.812000000000015
2015-12-31, OPERATION PROFIT, GROSS -8.999999999999986, NET -10.820999999999986
2016-03-14, OPERATION PROFIT, GROSS -10.999999999999988, NET -12.514999999999988
2016-04-14, OPERATION PROFIT, GROSS 0.0, NET -1.548
2016-06-16, OPERATION PROFIT, GROSS -6.000000000000005, NET -7.404000000000005
2016-07-28, OPERATION PROFIT, GROSS 0.0, NET -1.404
2016-09-08, OPERATION PROFIT, GROSS 8.000000000000007, NET 6.566000000000007
2016-12-19, OPERATION PROFIT, GROSS 31.999999999999986, NET 30.421999999999986
2017-02-10, OPERATION PROFIT, GROSS 14.000000000000012, NET 12.110000000000012
2017-02-20, OPERATION PROFIT, GROSS -4.999999999999982, NET -6.940999999999982
2017-03-06, OPERATION PROFIT, GROSS -10.999999999999988, NET -12.976999999999988
2017-05-12, OPERATION PROFIT, GROSS 44.99999999999997, NET 42.86699999999997
2017-06-01, OPERATION PROFIT, GROSS -22.00000000000002, NET -24.38200000000002
2017-07-13, OPERATION PROFIT, GROSS -14.000000000000012, NET -16.406000000000013
2017-09-18, OPERATION PROFIT, GROSS -2.9999999999999805, NET -5.31899999999998
2017-11-27, OPERATION PROFIT, GROSS 153.00000000000003, NET 150.12900000000002
2018-01-08, OPERATION PROFIT, GROSS -8.000000000000007, NET -11.360000000000007
2018-02-01, OPERATION PROFIT, GROSS 2.000000000000046, NET -1.6419999999999533
2018-03-23, OPERATION PROFIT, GROSS -25.0, NET -28.303
2018-08-07, OPERATION PROFIT, GROSS -12.00000000000001, NET -14.124000000000011
2018-09-04, OPERATION PROFIT, GROSS -27.0, NET -29.115000000000002
2018-11-26, OPERATION PROFIT, GROSS -14.000000000000012, NET -15.668000000000012
2019-01-29, OPERATION PROFIT, GROSS -4.999999999999982, NET -6.598999999999982
2019-03-15, OPERATION PROFIT, GROSS 70.00000000000001, NET 67.90000000000002
2019-04-12, OPERATION PROFIT, GROSS -15.99999999999997, NET -18.35799999999997
2019-04-29, OPERATION PROFIT, GROSS -14.999999999999991, NET -17.34299999999999
2019-06-06, OPERATION PROFIT, GROSS -5.000000000000027, NET -7.043000000000027
2019-06-19, OPERATION PROFIT, GROSS 4.999999999999982, NET 2.9509999999999823
2019-08-07, OPERATION PROFIT, GROSS 36.999999999999964, NET 34.84299999999996
2019-08-30, OPERATION PROFIT, GROSS -10.999999999999988, NET -13.282999999999987
2019-09-27, OPERATION PROFIT, GROSS -41.99999999999995, NET -44.35799999999995
2020-02-04, OPERATION PROFIT, GROSS 30.00000000000003, NET 27.67200000000003
2020-03-06, OPERATION PROFIT, GROSS 9.999999999999964, NET 7.017999999999965
2020-05-28, OPERATION PROFIT, GROSS -25.0, NET -27.301000000000002
2020-07-21, OPERATION PROFIT, GROSS 54.999999999999986, NET 52.25499999999999
2020-09-14, OPERATION PROFIT, GROSS 52.999999999999936, NET 50.002999999999936
2020-10-19, OPERATION PROFIT, GROSS -5.999999999999961, NET -8.98199999999996
2020-12-10, OPERATION PROFIT, GROSS 2.000000000000046, NET -1.083999999999954
2021-02-02, OPERATION PROFIT, GROSS 66.00000000000001, NET 62.454000000000015
2021-03-03, OPERATION PROFIT, GROSS -13.000000000000078, NET -16.67500000000008
2021-03-11, OPERATION PROFIT, GROSS -33.999999999999986, NET -37.64199999999999
2021-05-12, OPERATION PROFIT, GROSS 31.00000000000005, NET 27.12700000000005
2021-07-06, OPERATION PROFIT, GROSS -33.00000000000001, NET -36.717000000000006
2021-07-26, OPERATION PROFIT, GROSS -34.999999999999964, NET -38.70499999999996
2021-09-17, OPERATION PROFIT, GROSS -21.999999999999975, NET -25.467999999999975
2021-11-22, OPERATION PROFIT, GROSS -7.000000000000028, NET -9.979000000000028
策略结束时资金: 100120.964
策略年华收益率: 0.016108152552885002%
</code></pre>
<br>
<h2 id="策略可视化">策略可视化</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">backtrader_plotting</span> <span class="kn">import</span> <span class="n">Bokeh</span>
<span class="kn">from</span> <span class="nn">backtrader_plotting.schemes</span> <span class="kn">import</span> <span class="n">Tradimo</span>

<span class="n">b</span> <span class="o">=</span> <span class="n">Bokeh</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="n">plot_mode</span><span class="o">=</span><span class="s1">&#39;single&#39;</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="n">Tradimo</span><span class="p">())</span>
<span class="n">cerebro</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</code></pre></div>
<figure >
    
        <img src="img/1.png" width="100%" />
    
    
</figure>


<figure >
    
        <img src="img/1.png" width="100%" />
    
    
</figure>

<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
