<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>第三方库 on 大邓和他的PYTHON</title>
    <link>/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link>
    <description>Recent content in 第三方库 on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 09 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pynimate库 | 绘制动态可视化图</title>
      <link>https://hidadeng.github.io/blog/2023-02-11-pyanimate-create-vis-video/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-11-pyanimate-create-vis-video/</guid>
      <description>pynimate 创建条形数据动画。</description>
      <content:encoded><![CDATA[<p>数据可视化动画还在用Excel做？</p>
<p>现在一个简单的Python包就能分分钟搞定！</p>
<p>而且生成的动画也足够丝滑，效果是酱紫的：</p>
<p><img loading="lazy" src="img/example3.gif" alt=""  />
</p>
<p>这是一位专攻Python语言的程序员开发的安装包，名叫 <strong>pynimate</strong>。</p>
<p>目前可以直接通过PyPI安装使用。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install pynimate
</code></pre></div><h2 id="使用指南">使用指南</h2>
<p>想要使用Pynimate，直接import一下就行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pynimate</span> <span class="k">as</span> <span class="nn">nim</span>
</code></pre></div><p>输入数据后，Pynimate将使用函数Barplot（）来创建条形数据动画。
而创建这种动画，输入的数据必须是pandas数据结构（如下），其中将时间列设置为索引，换句话说索引代表的是自变量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">time, col1, col2, col3
2012   1     2     1
2013   1     1     2
2014   2     1.5   3
2015   2.5   2     3.5
</code></pre></div><p>具体的代码形式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="n">csv</span><span class="s1">&#39;).set_index(&#39;</span><span class="n">time</span><span class="s1">&#39;)</span>
</code></pre></div><p>比如要处理具体的数据，写成代码应该是这样子的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;time&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;1960-01-01&#34;</span><span class="p">,</span> <span class="s2">&#34;1961-01-01&#34;</span><span class="p">,</span> <span class="s2">&#34;1962-01-01&#34;</span><span class="p">],</span>
        <span class="s2">&#34;Afghanistan&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
        <span class="s2">&#34;Angola&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;Albania&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
        <span class="s2">&#34;USA&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;Argentina&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
    <span class="p">}</span>
<span class="p">)</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s2">&#34;time&#34;</span><span class="p">)</span>
</code></pre></div><p>此外，要制作条形数据动画，Barplot还有三个必需的参数得注意：data、time_format和ip_freq（Interpolation frequency）。</p>
<p>data就是表格的数据，这里也就不再赘述。</p>
<p>time_format是指数据索引的时间日期格式，一般为：”%Y-%m-%d”。</p>
<p>最后是ip_freq，它是制作动画中比较关键的一步，通过线性插值使动画更加流畅丝滑。</p>
<p>一般来说，并不是所有的原始数据都适合做成动画，现在一个典型的视频是24fps，即每秒有24帧。</p>
<p>举个栗子🌰，下面这个表格中的数据只有三个时间点，按理说只能生成3帧视频，最终动画也只有3/24秒。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">time, col1, col2
2012   1     3  
2013   2     2   
2014   3     1
</code></pre></div><p>这时候，ip_freq插值（线性）就开始发挥作用了，如果插值是一个季度，则得出的数据就变成了这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">time     col1  col2
2012-01-01  1.00  3.00
2012-04-01  1.25  2.75
2012-07-01  1.50  2.50
2012-10-01  1.75  2.25
2013-01-01  2.00  2.00
2013-04-01  2.25  1.75
2013-07-01  2.50  1.50
2013-10-01  2.75  1.25
2014-01-01  3.00  1.00
</code></pre></div><p>具体的插值时间间隔为多久，则要视具体的数据而定，一般绘制大数据时，设置为ip_freq = None。</p>
<p>至此，就能生成数据动画了，完整代码如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">pynimate</span> <span class="k">as</span> <span class="nn">nim</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="s2">&#34;time&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;1960-01-01&#34;</span><span class="p">,</span> <span class="s2">&#34;1961-01-01&#34;</span><span class="p">,</span> <span class="s2">&#34;1962-01-01&#34;</span><span class="p">],</span>
        <span class="s2">&#34;Afghanistan&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
        <span class="s2">&#34;Angola&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;Albania&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
        <span class="s2">&#34;USA&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
        <span class="s2">&#34;Argentina&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
    <span class="p">}</span>
<span class="p">)</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s2">&#34;time&#34;</span><span class="p">)</span>

<span class="n">cnv</span> <span class="o">=</span> <span class="n">nim</span><span class="o">.</span><span class="n">Canvas</span><span class="p">()</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">nim</span><span class="o">.</span><span class="n">Barplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;2d&#34;</span><span class="p">)</span>
<span class="n">bar</span><span class="o">.</span><span class="n">set_time</span><span class="p">(</span><span class="n">callback</span><span class="o">=</span><span class="k">lambda</span> <span class="n">i</span><span class="p">,</span> <span class="n">datafier</span><span class="p">:</span> <span class="n">datafier</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">index</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">year</span><span class="p">)</span>
<span class="n">cnv</span><span class="o">.</span><span class="n">add_plot</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
<span class="n">cnv</span><span class="o">.</span><span class="n">animate</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p>这是插值为两天，生成的动画效果。</p>
<p>最后还有一个问题，那就是保存动画，有两个格式可以选择：gif或者mp4。</p>
<p>保存为动图一般使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cnv</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&#34;file&#34;</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="s2">&#34;gif&#34;</span><span class="p">)</span>
</code></pre></div><p>若要保存为mp4的话，ffmpeg是个不错的选择，它是保存为mp4的标准编写器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install ffmpeg-python
conda install ffmpeg
</code></pre></div><p>当然，同样也可以使用Canvas.save()来保存。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cnv</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&#34;file&#34;</span><span class="p">,</span> <span class="mi">24</span> <span class="p">,</span><span class="s2">&#34;mp4&#34;</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>5个你或许不知道的pandas数据导入技巧</title>
      <link>https://hidadeng.github.io/blog/2023-01-08-pandas-5-trips-you-may-or-not-may-know/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-01-08-pandas-5-trips-you-may-or-not-may-know/</guid>
      <description>虽然您可能熟悉使用 pandas 读取和写入数据的许多不同方法，但您可能没有意识到一些可能并不像您想象的那么明显的快捷方式/技巧。 这可以使导入数据变得更加容易和快速。这篇博文仅探讨了其中的五种技术.</description>
      <content:encoded><![CDATA[<p>如果您以前曾在 Python 中使用过 Pandas，您就会知道可以通过多种不同的方式导入表格数据。</p>
<p>Pandas 可能是使用最广泛的用于加载、操作和导出数据的 Python 包之一。</p>
<p>虽然您可能熟悉使用 pandas 读取和写入数据的许多不同方法，但您可能没有意识到一些可能并不像您想象的那么明显的快捷方式/技巧。 这可以使导入数据变得更加容易和快速。这篇博文仅探讨了其中的五种技术.</p>
<br>
<h2 id="1-从url导入csv">1. 从url导入csv</h2>
<p>您可能非常熟悉 pd.read_csv() 方法可以导入csv文件的， 其实ta还可以通过 HTTP 从 URL 读取数据。</p>
<p>网络访问 CSV 文件，而不是在本地存储所有文件， 可以省去手动下载内容的麻烦。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;csv文件的网络连接&#39;</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="2-导入html网页中的表格">2. 导入html网页中的表格</h2>
<p>如果您曾经阅读过 pandas 文档，您可能会遇到 pd.read_html() 方法。 与 pd.read_csv() 非常相似，它也具有从 URL 导出数据的附加功能。 让这更酷的是，您可以提供一个包含许多表格的网站的 URL，它会抓取所有表格。</p>
<p>例如，考虑维基百科文章“英国经济”。 这篇文章可以被抓取如下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://en.wikipedia.org/wiki/Economy_of_the_United_Kingdom&#39;</span>

<span class="n">df_tables</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_html</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="3-json规范化">3. JSON规范化</h2>
<p>有时，当您处理 JSON 数据时， JSON 内往往包含多层嵌套。 对于要转换为表格数据的 JSON 对象，它们需要被展平（嵌套深度为 1）。</p>
<p>pandas 提供了一种使用 pd.json_normalize() 方法来执行此操作的方法。例如，考虑以下 JSON 对象（在 pandas 文档中用作示例）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Cole Volk&#34;</span><span class="p">,</span>
        <span class="s2">&#34;fitness&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;height&#34;</span><span class="p">:</span> <span class="mi">130</span><span class="p">,</span> <span class="s2">&#34;weight&#34;</span><span class="p">:</span> <span class="mi">60</span><span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Mark Reg&#34;</span><span class="p">,</span> <span class="s2">&#34;fitness&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;height&#34;</span><span class="p">:</span> <span class="mi">130</span><span class="p">,</span> <span class="s2">&#34;weight&#34;</span><span class="p">:</span> <span class="mi">60</span><span class="p">}},</span>
    <span class="p">{</span>
        <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Faye Raker&#34;</span><span class="p">,</span>
        <span class="s2">&#34;fitness&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;height&#34;</span><span class="p">:</span> <span class="mi">130</span><span class="p">,</span> <span class="s2">&#34;weight&#34;</span><span class="p">:</span> <span class="mi">60</span><span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="n">data</span>
</code></pre></div><p>Run</p>
<pre><code>[{'id': 1, 'name': 'Cole Volk', 'fitness': {'height': 130, 'weight': 60}},
 {'name': 'Mark Reg', 'fitness': {'height': 130, 'weight': 60}},
 {'id': 2, 'name': 'Faye Raker', 'fitness': {'height': 130, 'weight': 60}}]
</code></pre>
<p>data包含多层嵌套对象的属性（在本例中为“健身”）。 使用 pd.json_normalize() 可以折叠成表格。</p>
<p>注意：可以添加可选参数 max_level 以指定要折叠的最大嵌套级别数。 默认情况下，它将标准化所有级别。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">df</span>
</code></pre></div><p>Run</p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>fitness.height</th>
      <th>fitness.weight</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>Cole Volk</td>
      <td>130</td>
      <td>60</td>
    </tr>
    <tr>
      <th>1</th>
      <td>NaN</td>
      <td>Mark Reg</td>
      <td>130</td>
      <td>60</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2.0</td>
      <td>Faye Raker</td>
      <td>130</td>
      <td>60</td>
    </tr>
  </tbody>
</table>
</div>
<br>
<h2 id="4-从剪贴板导入">4. 从剪贴板导入</h2>
<p>pd.read_clipboard() 方法可用于捕获存储在剪贴板上的任何数据。</p>
<p>默认情况下，此方法接受正则表达式 \s+ 作为分隔值的分隔符。 或者，您可以使用自己的正则表达式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_clipboard</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">s+&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="5-从excel导入">5. 从Excel导入</h2>
<p>假设有人向您发送了一些存储在 excel 电子表格中的数据，可以使用 pd.read_excel() 方法读取数据，就好像它是一个简单的 CSV 文件一样。</p>
<p>要记住的一件事是，电子表格软件允许用户使用单个文件中的工作表来分割多个电子表格。 使用 sheet_name 参数可以实现从 <strong>特定工作表</strong> 访问数据。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;my_spreadsheet.xlsx&#39;</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="s1">&#39;Sheet 1&#39;</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">支持开票 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>可视化 | 绘制《三体》人物关系网络图</title>
      <link>https://hidadeng.github.io/blog/2022-11-29-santi-relationship-visualization-with-pyecharts/</link>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-29-santi-relationship-visualization-with-pyecharts/</guid>
      <description>可视化 | 绘制《三体》人物关系网络图</description>
      <content:encoded><![CDATA[<p>今天逛B站，看到《三体》三部曲全部人物关系数据可视化视频</p>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV1z5411W7ED&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<p>于是动手写了今天的技术文。绘制人物网络关系图，需要有</p>
<ul>
<li>节点数据； 节点名、节点属性</li>
<li>边数据； source、target、weight</li>
<li>可视化工具(Gephi软件或Python的可视化包)</li>
</ul>
<br>
<h2 id="本文代码">本文代码</h2>
<p><a href="%E4%B8%89%E4%BD%93%E5%B0%8F%E8%AF%B4-%E4%BA%BA%E7%89%A9%E5%85%B3%E7%B3%BB%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96.zip">点击下载</a></p>
<p><br><br></p>
<h2 id="节点-人物数据">节点-人物数据</h2>
<p>绘制人物关系网络图，首先需要有网络节点数据</p>
<ul>
<li>name 人物名称</li>
<li>desc 人物简介</li>
<li>stage 人物出现在三体小说的哪个阶段</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">nodes_info_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data/三体人物.xlsx&#39;</span><span class="p">)</span>
<span class="n">nodes_info_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df1.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="边-人物关系数据">边-人物关系数据</h2>
<p>将节点数据依次在三体小说文本中按行进行检索，如果每行同时出现两个人物，两个人物会构建一个边。人物关系网络图可以用gephi软件进行绘制， 绘制需要两个csv文件，即</p>
<ul>
<li>三体_nodes.csv</li>
<li>三体_edges.csv</li>
</ul>
<p>实现代码如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">codecs</span>
<span class="kn">import</span> <span class="nn">csv</span>

<span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">():</span>
    <span class="n">jieba</span><span class="o">.</span><span class="n">add_word</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="n">nodes</span> <span class="o">=</span> <span class="p">{}</span>			<span class="c1"># 姓名字典，保存人物，该字典的键为人物名称，值为该人物在全文中出现的次数</span>
<span class="n">relationships</span> <span class="o">=</span> <span class="p">{}</span>	<span class="c1"># 关系字典，保存人物关系的有向边，该字典的键为有向边的起点，值为一个字典edge，edge的键是有向边的终点，值是有向边的权值，代表两个人物之间联系的紧密程度</span>
<span class="n">lineNodes</span> <span class="o">=</span> <span class="p">[]</span>		<span class="c1"># 每段内人物关系，是一个缓存变量，保存对每一段分词得到当前段中出现的人物名称，lineName[i]是一个列表，列表中存储第i段中出现过的人物</span>


<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/三体.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
		<span class="n">words</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">lcut</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>		<span class="c1"># 分词并返回该词词性</span>
		<span class="n">lineNodes</span><span class="o">.</span><span class="n">append</span><span class="p">([])</span>		<span class="c1"># 为新读入的一段添加人物名称列表</span>
		<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
			<span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">():</span>
				<span class="n">lineNodes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>		<span class="c1"># 为当前段的环境增加一个人物</span>
				<span class="k">if</span> <span class="n">nodes</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
					<span class="n">nodes</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
				<span class="n">nodes</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>					<span class="c1"># 该人物出现次数加 1</span>
                

<span class="c1"># explore relationships   对于 lineNames 中每一行，我们为该行中出现的所有人物两两相连。如果两个人物之间尚未有边建立，则将新建的边权值设为 1，否则将已存在的边的权值加 1。这种方法将产生很多的冗余边，这些冗余边将在最后处理。</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lineNodes</span><span class="p">:</span>					<span class="c1"># 对于每一段</span>
	<span class="k">for</span> <span class="n">node1</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>					
		<span class="k">for</span> <span class="n">node2</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>				<span class="c1"># 每段中的任意两个人</span>
			<span class="k">if</span> <span class="n">node1</span> <span class="o">==</span> <span class="n">node2</span><span class="p">:</span>
				<span class="k">continue</span>
			<span class="k">if</span> <span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">node2</span><span class="p">)</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>		<span class="c1"># 若两人尚未同时出现则新建项</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span><span class="o">=</span> <span class="mi">1</span>
			<span class="k">else</span><span class="p">:</span>
				<span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span> <span class="o">=</span> <span class="n">relationships</span><span class="p">[</span><span class="n">node1</span><span class="p">][</span><span class="n">node2</span><span class="p">]</span><span class="o">+</span> <span class="mi">1</span>		<span class="c1"># 两人共同出现次数加 1</span>


<span class="c1"># output   将已经建好的 names 和 relationships 输出到文本，以方便 gephi 可视化处理。输出边的过程中可以过滤可能是冗余的边，这里假设共同出现次数少于 3 次的是冗余边，则在输出时跳过这样的边。输出的节点集合保存为 busan_node.txt ，边集合保存为 busan_edge.node 。</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;output/三体_nodes.csv&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf1</span><span class="p">:</span>
	<span class="n">writer1</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf1</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">])</span>
	<span class="n">writer1</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">times</span> <span class="ow">in</span> <span class="n">nodes</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
		<span class="n">line</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">:</span> <span class="n">times</span><span class="p">}</span>
		<span class="n">writer1</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>



<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;output/三体_edges.csv&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvf2</span><span class="p">:</span>
	<span class="n">writer2</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictWriter</span><span class="p">(</span><span class="n">csvf2</span><span class="p">,</span> <span class="n">fieldnames</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">])</span>
	<span class="n">writer2</span><span class="o">.</span><span class="n">writeheader</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">edges</span> <span class="ow">in</span> <span class="n">relationships</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
		<span class="k">for</span> <span class="n">target</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="n">edges</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
			<span class="k">if</span> <span class="n">weight</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">:</span>
				<span class="n">line</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;source&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">:</span><span class="n">target</span><span class="p">,</span> <span class="s1">&#39;weight&#39;</span><span class="p">:</span><span class="n">w</span><span class="p">}</span>
				<span class="n">writer2</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</code></pre></div><br>
<p>查看 三体_nodes.csv 文件样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">nodes_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;output/三体_nodes.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">nodes_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df2.png" alt=""  />
</p>
<br>
<p>查看 三体_edges.csv 文件样式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">edges_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;output/三体_edges.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">edges_df</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df3.png" alt=""  />
</p>
<p><br><br></p>
<h2 id="绘制关系图">绘制关系图</h2>
<p>本文不讲解gephi，感兴趣的可以去B站搜gephi使用方法。 实现可视化，除了gephi， 也可以使用pyechart库实现不错的可视化效果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>
<span class="kn">from</span> <span class="nn">pyecharts.globals</span> <span class="kn">import</span> <span class="n">CurrentConfig</span><span class="p">,</span> <span class="n">NotebookType</span>
<span class="n">CurrentConfig</span><span class="o">.</span><span class="n">NOTEBOOK_TYPE</span> <span class="o">=</span> <span class="n">NotebookType</span><span class="o">.</span><span class="n">JUPYTER_NOTEBOOK</span>


<span class="n">nodes_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">edges_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">categories_data</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">nodes_df</span><span class="o">.</span><span class="n">label</span><span class="p">,</span> <span class="n">nodes_df</span><span class="o">.</span><span class="n">weight</span><span class="p">):</span>
    <span class="n">category</span> <span class="o">=</span> <span class="n">nodes_info_df</span><span class="p">[</span><span class="n">nodes_info_df</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">==</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;stage&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="c1">##使用weight作为圆点的值，除以10，防止圆点太大占满整个屏幕.</span>
    <span class="n">node_info</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">node</span><span class="p">),</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="n">weight</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span><span class="p">:</span> <span class="n">category</span><span class="p">,</span> <span class="s2">&#34;value&#34;</span><span class="p">:</span> <span class="n">weight</span><span class="o">/</span><span class="mi">10</span><span class="p">}</span>
    <span class="n">nodes_data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node_info</span><span class="p">)</span>

<span class="k">for</span> <span class="n">ix</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">edges_df</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">edges_df</span><span class="o">.</span><span class="n">source</span><span class="p">,</span> <span class="n">edges_df</span><span class="o">.</span><span class="n">target</span><span class="p">):</span>
    <span class="n">edges_data</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">ix</span><span class="p">,</span> <span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">source</span><span class="p">,</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">target</span><span class="p">})</span>

<span class="k">for</span> <span class="n">category</span> <span class="ow">in</span> <span class="nb">set</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;stage&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()):</span> 
    <span class="n">categories_data</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="n">category</span><span class="p">})</span>


<span class="n">c</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">Graph</span><span class="p">(</span><span class="n">init_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">InitOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="s2">&#34;1000px&#34;</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="s2">&#34;600px&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="o">=</span><span class="n">nodes_data</span><span class="p">,</span>
        <span class="n">links</span><span class="o">=</span><span class="n">edges_data</span><span class="p">,</span>
        <span class="n">categories</span><span class="o">=</span><span class="n">categories_data</span><span class="p">,</span>
        <span class="n">layout</span><span class="o">=</span><span class="s2">&#34;circular&#34;</span><span class="p">,</span>
        <span class="n">is_rotate_label</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">&#34;source&#34;</span><span class="p">,</span> <span class="n">curve</span><span class="o">=</span><span class="mf">0.3</span><span class="p">),</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;三体人物关系图&#34;</span><span class="p">),</span>
        <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">orient</span><span class="o">=</span><span class="s2">&#34;vertical&#34;</span><span class="p">,</span> <span class="n">pos_left</span><span class="o">=</span><span class="s2">&#34;2%&#34;</span><span class="p">,</span> <span class="n">pos_top</span><span class="o">=</span><span class="s2">&#34;20%&#34;</span><span class="p">),</span>
    <span class="p">)</span>
<span class="p">)</span>

<span class="n">c</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s1">&#39;output/三体_graph.html&#39;</span><span class="p">)</span>
<span class="n">c</span><span class="o">.</span><span class="n">render_notebook</span><span class="p">()</span>
</code></pre></div><p>Run</p>


<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Awesome-pyecharts</title>
            <script type="text/javascript" src="https://assets.pyecharts.org/assets/echarts.min.js"></script>

</head>
<body>
    <div id="e97ab300531a4c0ca1574681e578906a" class="chart-container" style="width:1000px; height:600px;"></div>
    <script>
        var chart_e97ab300531a4c0ca1574681e578906a = echarts.init(
            document.getElementById('e97ab300531a4c0ca1574681e578906a'), 'white', {renderer: 'canvas'});
        var option_e97ab300531a4c0ca1574681e578906a = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "color": [
        "#c23531",
        "#2f4554",
        "#61a0a8",
        "#d48265",
        "#749f83",
        "#ca8622",
        "#bda29a",
        "#6e7074",
        "#546570",
        "#c4ccd3",
        "#f05b72",
        "#ef5b9c",
        "#f47920",
        "#905a3d",
        "#fab27b",
        "#2a5caa",
        "#444693",
        "#726930",
        "#b2d235",
        "#6d8346",
        "#ac6767",
        "#1d953f",
        "#6950a1",
        "#918597"
    ],
    "series": [
        {
            "type": "graph",
            "layout": "circular",
            "symbolSize": 10,
            "circular": {
                "rotateLabel": true
            },
            "force": {
                "repulsion": 50,
                "edgeLength": 50,
                "gravity": 0.2
            },
            "label": {
                "show": true,
                "position": "right",
                "margin": 8
            },
            "lineStyle": {
                "show": true,
                "width": 1,
                "opacity": 1,
                "curveness": 0.3,
                "type": "solid",
                "color": "source"
            },
            "roam": true,
            "draggable": false,
            "focusNodeAdjacency": true,
            "data": [
                {
                    "name": "\u6c6a\u6dfc",
                    "symbolSize": 64.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 64.1
                },
                {
                    "name": "\u53f2\u5f3a",
                    "symbolSize": 24.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 24.7
                },
                {
                    "name": "\u5e38\u4f1f\u601d",
                    "symbolSize": 9.4,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 9.4
                },
                {
                    "name": "\u6768\u51ac",
                    "symbolSize": 6.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 6.5
                },
                {
                    "name": "\u4e01\u4eea",
                    "symbolSize": 17.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 17.2
                },
                {
                    "name": "\u7533\u7389\u83f2",
                    "symbolSize": 4.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 4.9
                },
                {
                    "name": "\u8c46\u8c46",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u9b4f\u6210",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.0
                },
                {
                    "name": "\u6f58\u5bd2",
                    "symbolSize": 4.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 4.7
                },
                {
                    "name": "\u674e\u7476",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.2
                },
                {
                    "name": "\u53f6\u6587\u6d01",
                    "symbolSize": 47.2,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 47.2
                },
                {
                    "name": "\u6960\u6960",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u6d0b\u6d0b",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u54aa\u54aa",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u6c99\u745e\u5c71",
                    "symbolSize": 2.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.5
                },
                {
                    "name": "\u53f6\u54f2\u6cf0",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.0
                },
                {
                    "name": "\u767d\u6c90\u9716",
                    "symbolSize": 2.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.9
                },
                {
                    "name": "\u9a6c\u94a2",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u7a0b\u4e3d\u534e",
                    "symbolSize": 0.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.9
                },
                {
                    "name": "\u53f6\u6587\u96ea",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.4
                },
                {
                    "name": "\u96f7\u5fd7\u6210",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 3.5
                },
                {
                    "name": "\u6768\u536b\u5b81",
                    "symbolSize": 7.8,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 7.8
                },
                {
                    "name": "\u5a01\u5c14\u900a",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.4
                },
                {
                    "name": "\u58a8\u5b50",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.1
                },
                {
                    "name": "\u5f90\u51b0\u51b0",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.7
                },
                {
                    "name": "\u4f0a\u6587\u65af",
                    "symbolSize": 8.8,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 8.8
                },
                {
                    "name": "\u62c9\u83f2\u5c14",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u6838\u5f39\u5973\u5b69",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.3
                },
                {
                    "name": "\u9f50\u730e\u5934",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u5927\u51e4",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 1.1
                },
                {
                    "name": "\u9ea6\u514b",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.8
                },
                {
                    "name": "\u65af\u5766\u987f",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 2.3
                },
                {
                    "name": "1379\u53f7\u76d1\u542c\u5458",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.5
                },
                {
                    "name": "\u5143\u9996",
                    "symbolSize": 7.9,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 7.9
                },
                {
                    "name": "\u667a\u5b50",
                    "symbolSize": 46.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 46.4
                },
                {
                    "name": "\u6797\u4e91",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                    "value": 0.1
                },
                {
                    "name": "\u7f57\u8f91",
                    "symbolSize": 129.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 129.4
                },
                {
                    "name": "\u5434\u5cb3",
                    "symbolSize": 6.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 6.1
                },
                {
                    "name": "\u7ae0\u5317\u6d77",
                    "symbolSize": 31.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 31.6
                },
                {
                    "name": "\u96f7\u5fb7\u5c14",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.0
                },
                {
                    "name": "\u743c\u65af",
                    "symbolSize": 0.9,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.9
                },
                {
                    "name": "\u6590\u5179\u7f57\u5c06\u519b",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.7
                },
                {
                    "name": "\u5f20\u63f4\u671d",
                    "symbolSize": 4.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 4.3
                },
                {
                    "name": "\u6768\u664b\u6587",
                    "symbolSize": 3.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.4
                },
                {
                    "name": "\u82d7\u798f\u5168",
                    "symbolSize": 2.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.0
                },
                {
                    "name": "\u53f2\u6653\u660e",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.5
                },
                {
                    "name": "\u4f3d\u5c14\u8bfa\u592b",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u767d\u84c9",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.4
                },
                {
                    "name": "\u574e\u7279",
                    "symbolSize": 7.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 7.6
                },
                {
                    "name": "\u8428\u4f0a",
                    "symbolSize": 5.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 5.3
                },
                {
                    "name": "\u5c71\u6749\u60e0\u5b50",
                    "symbolSize": 6.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 6.4
                },
                {
                    "name": "\u6797\u683c",
                    "symbolSize": 4.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 4.8
                },
                {
                    "name": "\u4f3d\u5c14\u5b81",
                    "symbolSize": 3.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.5
                },
                {
                    "name": "\u827e\u4f26",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.1
                },
                {
                    "name": "\u4e95\u4e0a\u5b8f\u4e00",
                    "symbolSize": 0.6,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.6
                },
                {
                    "name": "\u5e84\u989c",
                    "symbolSize": 12.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 12.5
                },
                {
                    "name": "\u54c8\u91cc\u65af",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u5f20\u7fd4",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.1
                },
                {
                    "name": "\u5f20\u5ef6",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.5
                },
                {
                    "name": "\u6653\u8679",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u51ef\u745f\u7433",
                    "symbolSize": 0.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.1
                },
                {
                    "name": "\u718a\u6587",
                    "symbolSize": 1.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.5
                },
                {
                    "name": "\u90ed\u6b63\u660e",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u4e1c\u65b9\u5ef6\u7eea",
                    "symbolSize": 8.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 8.4
                },
                {
                    "name": "\u80af\u535a\u58eb",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.4
                },
                {
                    "name": "\u7f57\u5bbe\u900a\u5c06\u519b",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.3
                },
                {
                    "name": "\u5217\u6587",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.8
                },
                {
                    "name": "\u4e95\u4e0a\u660e",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 1.1
                },
                {
                    "name": "\u897f\u5b50",
                    "symbolSize": 2.9,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.9
                },
                {
                    "name": "\u8d75\u946b",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.1
                },
                {
                    "name": "\u674e\u7ef4",
                    "symbolSize": 2.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.0
                },
                {
                    "name": "\u84dd\u897f",
                    "symbolSize": 3.0,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 3.0
                },
                {
                    "name": "\u65af\u79d1\u7279",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 2.3
                },
                {
                    "name": "\u6cd5\u624e\u5170",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u72c4\u5965\u4f26\u5a1c",
                    "symbolSize": 5.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 5.2
                },
                {
                    "name": "\u4e91\u5929\u660e",
                    "symbolSize": 31.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 31.6
                },
                {
                    "name": "\u5f20\u533b\u751f",
                    "symbolSize": 1.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.6
                },
                {
                    "name": "\u8001\u674e",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u80e1\u6587",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.3
                },
                {
                    "name": "\u7a0b\u5fc3",
                    "symbolSize": 151.7,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 151.7
                },
                {
                    "name": "\u4f55\u535a\u58eb",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.1
                },
                {
                    "name": "\u4e8e\u7ef4\u6c11",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.4
                },
                {
                    "name": "\u67ef\u66fc\u7433",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.0
                },
                {
                    "name": "\u4e54\u4f9d\u5a1c",
                    "symbolSize": 0.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.3
                },
                {
                    "name": "\u516c\u5143\u4eba",
                    "symbolSize": 1.6,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.6
                },
                {
                    "name": "\u6bd5\u4e91\u5cf0",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u66f9\u5f6c",
                    "symbolSize": 8.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 8.8
                },
                {
                    "name": "\u4f0a\u4e07",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.5
                },
                {
                    "name": "\u5b89\u4e1c\u8bfa\u592b",
                    "symbolSize": 0.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.4
                },
                {
                    "name": "\u97e6\u65af\u7279",
                    "symbolSize": 2.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.8
                },
                {
                    "name": "\u6234\u6587",
                    "symbolSize": 1.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.1
                },
                {
                    "name": "\u6734\u4e49\u541b",
                    "symbolSize": 0.7,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.7
                },
                {
                    "name": "\u827e\u514b",
                    "symbolSize": 2.5,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.5
                },
                {
                    "name": "\u8587\u62c9",
                    "symbolSize": 1.9,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.9
                },
                {
                    "name": "\u5218\u6653\u660e",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u5173\u4e00\u5e06",
                    "symbolSize": 26.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 26.2
                },
                {
                    "name": "\u5f17\u96f7\u65af",
                    "symbolSize": 3.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.8
                },
                {
                    "name": "\u79cb\u539f\u73b2\u5b50",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u891a\u5ca9",
                    "symbolSize": 0.5,
                    "category": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                    "value": 0.5
                },
                {
                    "name": "\u5353\u6587",
                    "symbolSize": 1.0,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.0
                },
                {
                    "name": "\u6df1\u6c34\u738b\u5b50",
                    "symbolSize": 3.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.4
                },
                {
                    "name": "\u9732\u73e0\u516c\u4e3b",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u7a7a\u7075\u753b\u5e08",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u9488\u773c\u753b\u5e08",
                    "symbolSize": 3.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 3.1
                },
                {
                    "name": "\u957f\u5e06",
                    "symbolSize": 2.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.3
                },
                {
                    "name": "\u5df4\u52d2\u83ab",
                    "symbolSize": 0.8,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.8
                },
                {
                    "name": "\u6770\u68ee",
                    "symbolSize": 2.4,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.4
                },
                {
                    "name": "\u5a01\u7eb3\u5c14",
                    "symbolSize": 1.3,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 1.3
                },
                {
                    "name": "\u9ad8way",
                    "symbolSize": 2.1,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 2.1
                },
                {
                    "name": "\u5e03\u83b1\u5c14",
                    "symbolSize": 0.2,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 0.2
                },
                {
                    "name": "\u6b4c\u8005",
                    "symbolSize": 4.9,
                    "category": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f",
                    "value": 4.9
                }
            ],
            "categories": [
                {
                    "name": "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b"
                },
                {
                    "name": "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797"
                },
                {
                    "name": "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f"
                }
            ],
            "edgeLabel": {
                "show": false,
                "position": "top",
                "margin": 8
            },
            "edgeSymbol": [
                null,
                null
            ],
            "edgeSymbolSize": 10,
            "links": [
                {
                    "id": 0,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 1,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 2,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 3,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 4,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 5,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u9b4f\u6210"
                },
                {
                    "id": 6,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 7,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 8,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6c99\u745e\u5c71"
                },
                {
                    "id": 9,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u58a8\u5b50"
                },
                {
                    "id": 10,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 11,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u5f90\u51b0\u51b0"
                },
                {
                    "id": 12,
                    "source": "\u6c6a\u6dfc",
                    "target": "\u65af\u5766\u987f"
                },
                {
                    "id": 13,
                    "source": "\u53f2\u5f3a",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 14,
                    "source": "\u53f2\u5f3a",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 15,
                    "source": "\u53f2\u5f3a",
                    "target": "\u65af\u5766\u987f"
                },
                {
                    "id": 16,
                    "source": "\u53f2\u5f3a",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 17,
                    "source": "\u53f2\u5f3a",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 18,
                    "source": "\u53f2\u5f3a",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 19,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 20,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 21,
                    "source": "\u5e38\u4f1f\u601d",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 22,
                    "source": "\u6768\u51ac",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 23,
                    "source": "\u6768\u51ac",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 24,
                    "source": "\u6768\u51ac",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 25,
                    "source": "\u6768\u51ac",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 26,
                    "source": "\u6768\u51ac",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 27,
                    "source": "\u4e01\u4eea",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 28,
                    "source": "\u4e01\u4eea",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 29,
                    "source": "\u4e01\u4eea",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 30,
                    "source": "\u4e01\u4eea",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 31,
                    "source": "\u4e01\u4eea",
                    "target": "\u897f\u5b50"
                },
                {
                    "id": 32,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 33,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u9b4f\u6210"
                },
                {
                    "id": 34,
                    "source": "\u7533\u7389\u83f2",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 35,
                    "source": "\u9b4f\u6210",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 36,
                    "source": "\u9b4f\u6210",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 37,
                    "source": "\u6f58\u5bd2",
                    "target": "\u7533\u7389\u83f2"
                },
                {
                    "id": 38,
                    "source": "\u6f58\u5bd2",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 39,
                    "source": "\u6f58\u5bd2",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 40,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 41,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 42,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6c99\u745e\u5c71"
                },
                {
                    "id": 43,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u53f6\u54f2\u6cf0"
                },
                {
                    "id": 44,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u767d\u6c90\u9716"
                },
                {
                    "id": 45,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u7a0b\u4e3d\u534e"
                },
                {
                    "id": 46,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u53f6\u6587\u96ea"
                },
                {
                    "id": 47,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 48,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u96f7\u5fd7\u6210"
                },
                {
                    "id": 49,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u6f58\u5bd2"
                },
                {
                    "id": 50,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 51,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 52,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u5927\u51e4"
                },
                {
                    "id": 53,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 54,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 55,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 56,
                    "source": "\u53f6\u6587\u6d01",
                    "target": "\u5e84\u989c"
                },
                {
                    "id": 57,
                    "source": "\u6c99\u745e\u5c71",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 58,
                    "source": "\u6c99\u745e\u5c71",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 59,
                    "source": "\u53f6\u54f2\u6cf0",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 60,
                    "source": "\u53f6\u54f2\u6cf0",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 61,
                    "source": "\u767d\u6c90\u9716",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 62,
                    "source": "\u7a0b\u4e3d\u534e",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 63,
                    "source": "\u53f6\u6587\u96ea",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 64,
                    "source": "\u96f7\u5fd7\u6210",
                    "target": "\u6768\u536b\u5b81"
                },
                {
                    "id": 65,
                    "source": "\u96f7\u5fd7\u6210",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 66,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u96f7\u5fd7\u6210"
                },
                {
                    "id": 67,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 68,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u53f6\u54f2\u6cf0"
                },
                {
                    "id": 69,
                    "source": "\u6768\u536b\u5b81",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 70,
                    "source": "\u58a8\u5b50",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 71,
                    "source": "\u5f90\u51b0\u51b0",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 72,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 73,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u9ea6\u514b"
                },
                {
                    "id": 74,
                    "source": "\u4f0a\u6587\u65af",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 75,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 76,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 77,
                    "source": "\u9f50\u730e\u5934",
                    "target": "\u5927\u51e4"
                },
                {
                    "id": 78,
                    "source": "\u5927\u51e4",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 79,
                    "source": "\u5927\u51e4",
                    "target": "\u9f50\u730e\u5934"
                },
                {
                    "id": 80,
                    "source": "\u9ea6\u514b",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 81,
                    "source": "\u65af\u5766\u987f",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 82,
                    "source": "\u65af\u5766\u987f",
                    "target": "\u6c6a\u6dfc"
                },
                {
                    "id": 83,
                    "source": "\u5143\u9996",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 84,
                    "source": "\u667a\u5b50",
                    "target": "\u5143\u9996"
                },
                {
                    "id": 85,
                    "source": "\u667a\u5b50",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 86,
                    "source": "\u667a\u5b50",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 87,
                    "source": "\u667a\u5b50",
                    "target": "\u4f0a\u6587\u65af"
                },
                {
                    "id": 88,
                    "source": "\u667a\u5b50",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 89,
                    "source": "\u667a\u5b50",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 90,
                    "source": "\u667a\u5b50",
                    "target": "\u6234\u6587"
                },
                {
                    "id": 91,
                    "source": "\u667a\u5b50",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 92,
                    "source": "\u667a\u5b50",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 93,
                    "source": "\u667a\u5b50",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 94,
                    "source": "\u7f57\u8f91",
                    "target": "\u6768\u51ac"
                },
                {
                    "id": 95,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 96,
                    "source": "\u7f57\u8f91",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 97,
                    "source": "\u7f57\u8f91",
                    "target": "\u767d\u84c9"
                },
                {
                    "id": 98,
                    "source": "\u7f57\u8f91",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 99,
                    "source": "\u7f57\u8f91",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 100,
                    "source": "\u7f57\u8f91",
                    "target": "\u4f3d\u5c14\u5b81"
                },
                {
                    "id": 101,
                    "source": "\u7f57\u8f91",
                    "target": "\u5e84\u989c"
                },
                {
                    "id": 102,
                    "source": "\u7f57\u8f91",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 103,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 104,
                    "source": "\u7f57\u8f91",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 105,
                    "source": "\u7f57\u8f91",
                    "target": "\u5f20\u7fd4"
                },
                {
                    "id": 106,
                    "source": "\u7f57\u8f91",
                    "target": "\u5c71\u6749\u60e0\u5b50"
                },
                {
                    "id": 107,
                    "source": "\u7f57\u8f91",
                    "target": "\u718a\u6587"
                },
                {
                    "id": 108,
                    "source": "\u7f57\u8f91",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 109,
                    "source": "\u7f57\u8f91",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 110,
                    "source": "\u7f57\u8f91",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 111,
                    "source": "\u5434\u5cb3",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 112,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u5434\u5cb3"
                },
                {
                    "id": 113,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 114,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u5e38\u4f1f\u601d"
                },
                {
                    "id": 115,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 116,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u4e1c\u65b9\u5ef6\u7eea"
                },
                {
                    "id": 117,
                    "source": "\u7ae0\u5317\u6d77",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 118,
                    "source": "\u6590\u5179\u7f57\u5c06\u519b",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 119,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u6768\u664b\u6587"
                },
                {
                    "id": 120,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u82d7\u798f\u5168"
                },
                {
                    "id": 121,
                    "source": "\u5f20\u63f4\u671d",
                    "target": "\u53f2\u6653\u660e"
                },
                {
                    "id": 122,
                    "source": "\u6768\u664b\u6587",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 123,
                    "source": "\u6768\u664b\u6587",
                    "target": "\u82d7\u798f\u5168"
                },
                {
                    "id": 124,
                    "source": "\u82d7\u798f\u5168",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 125,
                    "source": "\u82d7\u798f\u5168",
                    "target": "\u6768\u664b\u6587"
                },
                {
                    "id": 126,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u5f20\u63f4\u671d"
                },
                {
                    "id": 127,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 128,
                    "source": "\u53f2\u6653\u660e",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 129,
                    "source": "\u767d\u84c9",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 130,
                    "source": "\u574e\u7279",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 131,
                    "source": "\u574e\u7279",
                    "target": "\u53f2\u5f3a"
                },
                {
                    "id": 132,
                    "source": "\u574e\u7279",
                    "target": "\u5f20\u7fd4"
                },
                {
                    "id": 133,
                    "source": "\u8428\u4f0a",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 134,
                    "source": "\u8428\u4f0a",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 135,
                    "source": "\u8428\u4f0a",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 136,
                    "source": "\u5c71\u6749\u60e0\u5b50",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 137,
                    "source": "\u6797\u683c",
                    "target": "\u6590\u5179\u7f57\u5c06\u519b"
                },
                {
                    "id": 138,
                    "source": "\u6797\u683c",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 139,
                    "source": "\u6797\u683c",
                    "target": "\u80af\u535a\u58eb"
                },
                {
                    "id": 140,
                    "source": "\u4f3d\u5c14\u5b81",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 141,
                    "source": "\u5e84\u989c",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 142,
                    "source": "\u5e84\u989c",
                    "target": "\u53f6\u6587\u6d01"
                },
                {
                    "id": 143,
                    "source": "\u5f20\u7fd4",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 144,
                    "source": "\u5f20\u7fd4",
                    "target": "\u574e\u7279"
                },
                {
                    "id": 145,
                    "source": "\u718a\u6587",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 146,
                    "source": "\u4e1c\u65b9\u5ef6\u7eea",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 147,
                    "source": "\u4e1c\u65b9\u5ef6\u7eea",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 148,
                    "source": "\u80af\u535a\u58eb",
                    "target": "\u6797\u683c"
                },
                {
                    "id": 149,
                    "source": "\u5217\u6587",
                    "target": "\u4e95\u4e0a\u660e"
                },
                {
                    "id": 150,
                    "source": "\u4e95\u4e0a\u660e",
                    "target": "\u5217\u6587"
                },
                {
                    "id": 151,
                    "source": "\u897f\u5b50",
                    "target": "\u4e01\u4eea"
                },
                {
                    "id": 152,
                    "source": "\u8d75\u946b",
                    "target": "\u674e\u7ef4"
                },
                {
                    "id": 153,
                    "source": "\u674e\u7ef4",
                    "target": "\u8d75\u946b"
                },
                {
                    "id": 154,
                    "source": "\u84dd\u897f",
                    "target": "\u7ae0\u5317\u6d77"
                },
                {
                    "id": 155,
                    "source": "\u84dd\u897f",
                    "target": "\u4e1c\u65b9\u5ef6\u7eea"
                },
                {
                    "id": 156,
                    "source": "\u84dd\u897f",
                    "target": "\u65af\u79d1\u7279"
                },
                {
                    "id": 157,
                    "source": "\u65af\u79d1\u7279",
                    "target": "\u84dd\u897f"
                },
                {
                    "id": 158,
                    "source": "\u6cd5\u624e\u5170",
                    "target": "\u72c4\u5965\u4f26\u5a1c"
                },
                {
                    "id": 159,
                    "source": "\u72c4\u5965\u4f26\u5a1c",
                    "target": "\u6cd5\u624e\u5170"
                },
                {
                    "id": 160,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u5f20\u533b\u751f"
                },
                {
                    "id": 161,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u8001\u674e"
                },
                {
                    "id": 162,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u80e1\u6587"
                },
                {
                    "id": 163,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 164,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u4f55\u535a\u58eb"
                },
                {
                    "id": 165,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u4e8e\u7ef4\u6c11"
                },
                {
                    "id": 166,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 167,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u6df1\u6c34\u738b\u5b50"
                },
                {
                    "id": 168,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u7a7a\u7075\u753b\u5e08"
                },
                {
                    "id": 169,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 170,
                    "source": "\u4e91\u5929\u660e",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 171,
                    "source": "\u5f20\u533b\u751f",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 172,
                    "source": "\u5f20\u533b\u751f",
                    "target": "\u8001\u674e"
                },
                {
                    "id": 173,
                    "source": "\u8001\u674e",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 174,
                    "source": "\u8001\u674e",
                    "target": "\u5f20\u533b\u751f"
                },
                {
                    "id": 175,
                    "source": "\u80e1\u6587",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 176,
                    "source": "\u80e1\u6587",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 177,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 178,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u80e1\u6587"
                },
                {
                    "id": 179,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4f55\u535a\u58eb"
                },
                {
                    "id": 180,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u4e8e\u7ef4\u6c11"
                },
                {
                    "id": 181,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u67ef\u66fc\u7433"
                },
                {
                    "id": 182,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u8428\u4f0a"
                },
                {
                    "id": 183,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u516c\u5143\u4eba"
                },
                {
                    "id": 184,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 185,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u6bd5\u4e91\u5cf0"
                },
                {
                    "id": 186,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 187,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u5f17\u96f7\u65af"
                },
                {
                    "id": 188,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u66f9\u5f6c"
                },
                {
                    "id": 189,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u6770\u68ee"
                },
                {
                    "id": 190,
                    "source": "\u7a0b\u5fc3",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 191,
                    "source": "\u4f55\u535a\u58eb",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 192,
                    "source": "\u4f55\u535a\u58eb",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 193,
                    "source": "\u4e8e\u7ef4\u6c11",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 194,
                    "source": "\u4e8e\u7ef4\u6c11",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 195,
                    "source": "\u67ef\u66fc\u7433",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 196,
                    "source": "\u516c\u5143\u4eba",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 197,
                    "source": "\u6bd5\u4e91\u5cf0",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 198,
                    "source": "\u6bd5\u4e91\u5cf0",
                    "target": "\u66f9\u5f6c"
                },
                {
                    "id": 199,
                    "source": "\u66f9\u5f6c",
                    "target": "\u6bd5\u4e91\u5cf0"
                },
                {
                    "id": 200,
                    "source": "\u66f9\u5f6c",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 201,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u6234\u6587"
                },
                {
                    "id": 202,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 203,
                    "source": "\u97e6\u65af\u7279",
                    "target": "\u5353\u6587"
                },
                {
                    "id": 204,
                    "source": "\u6234\u6587",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 205,
                    "source": "\u6234\u6587",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 206,
                    "source": "\u827e\u514b",
                    "target": "\u8587\u62c9"
                },
                {
                    "id": 207,
                    "source": "\u8587\u62c9",
                    "target": "\u827e\u514b"
                },
                {
                    "id": 208,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 209,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u5353\u6587"
                },
                {
                    "id": 210,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 211,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 212,
                    "source": "\u5173\u4e00\u5e06",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 213,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u7a0b\u5fc3"
                },
                {
                    "id": 214,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u667a\u5b50"
                },
                {
                    "id": 215,
                    "source": "\u5f17\u96f7\u65af",
                    "target": "\u7f57\u8f91"
                },
                {
                    "id": 216,
                    "source": "\u5353\u6587",
                    "target": "\u5173\u4e00\u5e06"
                },
                {
                    "id": 217,
                    "source": "\u5353\u6587",
                    "target": "\u97e6\u65af\u7279"
                },
                {
                    "id": 218,
                    "source": "\u6df1\u6c34\u738b\u5b50",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 219,
                    "source": "\u6df1\u6c34\u738b\u5b50",
                    "target": "\u9732\u73e0\u516c\u4e3b"
                },
                {
                    "id": 220,
                    "source": "\u9732\u73e0\u516c\u4e3b",
                    "target": "\u6df1\u6c34\u738b\u5b50"
                },
                {
                    "id": 221,
                    "source": "\u9732\u73e0\u516c\u4e3b",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 222,
                    "source": "\u7a7a\u7075\u753b\u5e08",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 223,
                    "source": "\u7a7a\u7075\u753b\u5e08",
                    "target": "\u957f\u5e06"
                },
                {
                    "id": 224,
                    "source": "\u957f\u5e06",
                    "target": "\u9732\u73e0\u516c\u4e3b"
                },
                {
                    "id": 225,
                    "source": "\u957f\u5e06",
                    "target": "\u4e91\u5929\u660e"
                },
                {
                    "id": 226,
                    "source": "\u957f\u5e06",
                    "target": "\u7a7a\u7075\u753b\u5e08"
                },
                {
                    "id": 227,
                    "source": "\u6770\u68ee",
                    "target": "\u7a0b\u5fc3"
                }
            ]
        }
    ],
    "legend": [
        {
            "data": [
                "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b",
                "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797",
                "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f"
            ],
            "selected": {
                "\u4e09\u4f531-\u5730\u7403\u5f80\u4e8b": true,
                "\u4e09\u4f532-\u9ed1\u6697\u68ee\u6797": true,
                "\u4e09\u4f533-\u6b7b\u795e\u6c38\u751f": true
            },
            "show": true,
            "left": "2%",
            "top": "20%",
            "orient": "vertical",
            "padding": 5,
            "itemGap": 10,
            "itemWidth": 25,
            "itemHeight": 14
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "showContent": true,
        "alwaysShowContent": false,
        "showDelay": 0,
        "hideDelay": 100,
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0,
        "padding": 5
    },
    "title": [
        {
            "text": "\u4e09\u4f53\u4eba\u7269\u5173\u7cfb\u56fe",
            "padding": 5,
            "itemGap": 10
        }
    ]
};
        chart_e97ab300531a4c0ca1574681e578906a.setOption(option_e97ab300531a4c0ca1574681e578906a);
    </script>
</body>
</html>

<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Faker库 | 生成实验数据</title>
      <link>https://hidadeng.github.io/blog/2022-11-25-faker-generate-test-data/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-25-faker-generate-test-data/</guid>
      <description>生成实验数据</description>
      <content:encoded><![CDATA[


<p>有时候学习新的数据分析方法时，需要构造一些小样本的实验数据，手动构造比较麻烦，这时候可以使用<a href="https://github.com/joke2k/faker">faker库</a>。</p>
<p><br></p>
<div id="安装" class="section level2">
<h2>安装</h2>
<pre><code>pip install Faker</code></pre>
<p><br></p>
</div>
<div id="快速上手" class="section level2">
<h2>快速上手</h2>
<pre class="python"><code>from faker import Faker

#设定语言，默认生成的是英文数据
#fake = Faker()
fake = Faker(locale=&#39;zh_CN&#39;)

#伪造姓名
fake.name()</code></pre>
<pre><code>## &#39;罗辉&#39;</code></pre>
<p><br></p>
<p>生成地址数据</p>
<pre class="python"><code>fake.address()</code></pre>
<pre><code>## &#39;湖北省张家港市大东王街v座 601815&#39;</code></pre>
<p><br></p>
<p>生成公司数据</p>
<pre class="python"><code>fake.company_prefix()</code></pre>
<pre><code>## &#39;银嘉&#39;</code></pre>
<p><br></p>
</div>
<div id="自定义" class="section level2">
<h2>自定义</h2>
<p>例如生成一个工作经历的实验数据，可以自定义公司名集合，从中随机抽取。</p>
<pre class="python"><code>from faker import Faker
fake = Faker()

my_word_list = [
&#39;华为&#39;,&#39;小米&#39;,&#39;三星&#39;,
&#39;海尔&#39;,&#39;宝马&#39;,&#39;保洁&#39;,
&#39;中铁&#39;,&#39;中通&#39;,&#39;京东&#39;,
&#39;阿里&#39;,&#39;百度&#39;,&#39;腾讯&#39;]

work_experiences = fake.sentence(ext_word_list=my_word_list, nb_words=5)
work_experiences</code></pre>
<pre><code>## &#39;京东 华为 中通.&#39;</code></pre>
<p><br></p>
</div>
<div id="设定随机性" class="section level2">
<h2>设定随机性</h2>
<p>由于faker属于随机生成数据的包，如果不限定状态， 每次运行相同的代码，随机生成的数据是不一样的。</p>
<pre class="python"><code>from faker import Faker
fake = Faker(&#39;zh_CN&#39;)

#设定随机状态
Faker.seed(4321)

print(fake.name())</code></pre>
<pre><code>## 王鑫</code></pre>
<p><br></p>
<p><br></p>
</div>
<div id="广而告之" class="section level2">
<h2>广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>训练&amp;使用Glove语言模型， 可度量刻板印象等</title>
      <link>https://hidadeng.github.io/blog/2022-11-22-glove-embeddings-model/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-22-glove-embeddings-model/</guid>
      <description>训练&amp;amp;使用Glove语言模型， 可度量刻板印象等</description>
      <content:encoded><![CDATA[<p>Glove可以捕捉到词语在语料库中的全局语义信息和类比信息， 据此基于语义向量计算刻板印象、文化变迁等，Glove模型在计算社会科学中拥有很大的应用潜力。</p>
<p><img loading="lazy" src="img/wordpaths.png" alt=""  />
</p>
<p>训练Glove模型有两种实现方式</p>
<ol>
<li>C语言；  <a href="https://nlp.stanford.edu/projects/glove/">https://nlp.stanford.edu/projects/glove/</a></li>
<li>Python语言；mittens、glove-python</li>
</ol>
<p><img loading="lazy" src="img/stanford%e8%ae%ad%e7%bb%83Glove.png" alt=""  />
</p>
<h2 id="方法比较">方法比较</h2>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">优点</th>
<th style="text-align:left">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">C语言</td>
<td style="text-align:left">速度快，现成的代码工具</td>
<td style="text-align:left">源代码仅支持英文, 需要付出较高的学习成本才能改动支持中文。 对文科生小白而言，门槛高</td>
</tr>
<tr>
<td style="text-align:left">Python语言</td>
<td style="text-align:left">mittens、glove-python等包语法简洁, 易上手</td>
<td style="text-align:left">对文科生还是有一定的门槛，代码运行速度慢</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td></td>
</tr>
</tbody>
</table>
<br>
<p>不考虑性能约束条件，更多地考虑易用性，大邓简化了Python代码，将其内置到了cntext库。</p>
<p>对词向量、词嵌入感兴趣的童鞋，可以阅读下列相关资料</p>
<ul>
<li><a href="https://textdata.cn/blog/wordembeddingsinsocialscience/">转载 | 大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用</a></li>
<li><a href="https://textdata.cn/blog/from_sysbol_to_embeddings_in_computational_social_science/">转载 | 从符号到嵌入：计算社会科学的两种文本表示</a></li>
</ul>
<br>
<h2 id="glove代码">GloVe代码</h2>
<p>cntext支持中英文， 只需要7行代码，可完成导入数据、训练模型、保存结果。 这里以三体小说数据为例， 使用 <a href="santi.txt"><strong>data/santi.txt</strong></a> 。</p>
<p><strong>需要注意， santi.txt文件内文本是已经分词处理过的</strong>。这样可以在english这类西方语言模式下使用空格来区分词语的边界。</p>
<blockquote>
<p>如果使用英文数据，下面代码只需要更改数据文件的路径即可。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cntext</span> <span class="k">as</span> <span class="nn">ct</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1">#设置语言和项目文件夹路径</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">Glove</span><span class="p">(</span><span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">lang</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
<span class="c1">#导入语料</span>
<span class="n">model</span><span class="o">.</span><span class="n">create_vocab</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="s1">&#39;data/santi.txt&#39;</span><span class="p">,</span> <span class="n">min_count</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="c1">#构建词语共现矩阵</span>
<span class="n">model</span><span class="o">.</span><span class="n">cooccurrence_matrix</span><span class="p">()</span>
<span class="c1">#设置词嵌入模型的向量维度、迭代数</span>
<span class="n">model</span><span class="o">.</span><span class="n">train_embeddings</span><span class="p">(</span><span class="n">vector_size</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
<span class="c1">#存储模型</span>
<span class="n">model</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">model_name</span><span class="o">=</span><span class="s1">&#39;santi_glove_model&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Building prefix dict from the default dictionary ...
Step 1/4: ...Create vocabulary for Glove.

Dumping model to file cache C:\Users\Deng\AppData\Local\Temp\jieba.cache
Loading model cost 0.628 seconds.

Prefix dict has been built successfully.

Step 2/4: ...Create cooccurrence matrix.
Step 3/4: ...Train glove embeddings. 
             Note, this part takes a long time to run

Iteration 20: error 64925132.71550
Step 3/4: ... Finish! Use 316.91 s

Step 4/4: ... Save the glove embeddings to a txt file
</code></pre></div><br>
<h2 id="导入glove预训练模型">导入GloVe预训练模型</h2>
<p>训练好的GloVe模型是txt文件，可以使用gensim导入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">gensim.models</span> <span class="kn">import</span> <span class="n">KeyedVectors</span>

<span class="c1"># 导入GloVe模型文件</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">KeyedVectors</span><span class="o">.</span><span class="n">load_word2vec_format</span><span class="p">(</span><span class="s1">&#39;output/Glove/santi_glove_model.txt&#39;</span><span class="p">,</span>  <span class="n">no_header</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1">#查看某词的词向量</span>
<span class="n">model</span><span class="o">.</span><span class="n">get_vector</span><span class="p">(</span><span class="s1">&#39;宇宙&#39;</span><span class="p">)</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">array([ 0.6618259 ,  0.60663235,  0.9849417 , -1.028956  ,  1.0711069 ,
       -0.8875306 , -0.52833366, -1.0125595 , -0.9628481 ,  1.0356479 ,
        0.8595257 ,  0.7454354 , -1.0468111 , -0.26285014, -1.0310447 ,
        0.9906805 ,  0.05825566, -0.85581344, -0.9932533 , -1.020438  ,
        1.0495061 , -0.6973389 ,  0.49099424, -0.80775315,  0.64256483,
        1.0157642 ,  1.0135043 , -1.0131834 ,  0.17376372,  0.89585054,
        0.30890268,  0.798895  ,  0.6653925 ,  0.908629  , -1.048273  ,
       -0.35683677,  0.06306187, -1.0267074 , -1.0494691 ,  0.42172813,
        0.24005401,  0.5934993 , -0.0696691 , -1.0360557 , -0.9797269 ,
        1.0205714 , -0.376359  , -1.0501183 ,  1.0415571 , -0.9312968 ],
      dtype=float32)
</code></pre></div><br>
<h2 id="模型的使用">模型的使用</h2>
<p>语料中所有的词语都是维度相同的向量，可以根据向量计算找近义词、反义词。可参考 之前分享的   <a href="https://textdata.cn/blog/douban_w2v/">豆瓣影评 | 探索词向量妙处</a></p>
<br>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>冉雅璇,李志强,刘佳妮,张逸石.大数据时代下社会科学研究方法的拓展——基于词嵌入技术的文本分析的应用[J].南开管理评论:1-27.</li>
<li>William L. Hamilton, Jure Leskovec, and Dan Jurafsky. ACL 2016. Diachronic Word Embeddings Reveal Statistical Laws of Semantic Change.</li>
<li>Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. GloVe: Global Vectors for Word Representation.
<ul>
<li><a href="https://nlp.stanford.edu/projects/glove/">https://nlp.stanford.edu/projects/glove/</a></li>
</ul>
</li>
<li><a href="https://github.com/hiDaDeng/cntext">https://github.com/hiDaDeng/cntext</a></li>
</ul>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>FinBERT | 金融文本BERT模型，可情感分析、识别ESG和FLS类型</title>
      <link>https://hidadeng.github.io/blog/2022-11-17-finbert-finance-bert-model/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-17-finbert-finance-bert-model/</guid>
      <description>金融语言模型</description>
      <content:encoded><![CDATA[<h2 id="finbert介绍">FinBERT介绍</h2>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/uj4hm7Lr2Wo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<br>
<p>FinBERT， 是使用49亿词的英文金融语料库数据，生成的BERT预训练语言模型。语料库上大小为 49亿个词。</p>
<ul>
<li>公司报告 10-K 和 10-Q：25亿个词</li>
<li>电话会议记录：13亿个词</li>
<li>分析师报告：11亿个词</li>
</ul>
<p>FinBERT开发者在多个金融 NLP 任务上对 FinBERT 预训练模型进行了微调，均优于传统机器学习模型、深度学习模型和微调 BERT 模型。 所有经过微调的 FinBERT 模型都公开托管在 Huggingface 🤗。  目前支持包括<strong>情绪分析、ESG 分类、前瞻性陈述 (FLS) 分类</strong>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Huang, Allen H., Hui Wang, and Yi Yang. &#34;FinBERT: A large language model for extracting information from financial text.&#34; Contemporary Accounting Research (2022).

摘要（翻译）: 我们开发了 FinBERT，这是一种适用于金融领域的最先进的大型语言模型。我们表明，FinBERT 结合了金融知识，可以更好地总结金融文本中的上下文信息。使用分析报告中研究人员标记的句子样本，我们证明 FinBERT 大大优于 Loughran 和 McDonald 词典以及其他机器学习算法，包括朴素贝叶斯、支持向量机、随机森林、卷积神经网络和长短期记忆，在情感分类中。我们的结果表明，FinBERT 擅长识别其他算法错误标记为中性的句子的正面或负面情绪，这可能是因为它使用了金融文本中的上下文信息。我们发现，FinBERT 优于其他算法，以及 Google 的原始双向编码器表示形式来自 transformers (BERT) 模型，当训练样本量较小且文本中包含一般文本中不常用的金融词时，这种优势尤为突出。 FinBERT 在识别与环境、社会和治理问题相关的讨论方面也优于其他模型。最后，我们表明，与 FinBERT 相比，其他方法低估了收益电话会议的文本信息量至少 18%。我们的结果对学术研究人员、投资专业人士和金融市场监管机构具有重要意义。
</code></pre></div><br>
<h3 id="finbert功能">FinBERT功能</h3>
<p>具体来说，FinBERT有以下内容：</p>
<ul>
<li><a href="https://huggingface.co/yiyanghkust/finbert-pretrain">FinBERT-Pretrained</a>： 针对大规模金融文本的预训练 FinBERT 模型。</li>
<li><a href="https://huggingface.co/yiyanghkust/finbert-tone">FinBERT-Sentiment</a>： 用于情感分类任务。</li>
<li><a href="https://huggingface.co/yiyanghkust/finbert-esg">FinBERT-ESG</a>： 用于 ESG 分类任务。</li>
<li><a href="https://huggingface.co/yiyanghkust/finbert-fls">FinBERT-FLS</a>： 用于前瞻性陈述（FLS）分类任务。</li>
</ul>
<br>
<h3 id="环境配置">环境配置</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip install transformers==4.18.0
</code></pre></div><p>本次实验使用的transformers版本为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">import transformers
transformers.__version__
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">4.18.0
</code></pre></div><br>
<h3 id="代码下载">代码下载</h3>
<p><a href="FinBERT.ipynb">点击下载</a></p>
<p><br><br></p>
<h2 id="一情感分析">一、情感分析</h2>
<p>金融文本情绪可以调动管理者、信息中介和投资者的观点和意见, 因此分析金融文本情感(情绪)是有价值的。 FinBERT-Sentiment 是一个 FinBERT 模型，它根据标准普尔 500 家公司的分析师报告中的 10,000 个手动注释的句子进行了Fine-tune(微调)。</p>
<blockquote>
<p>Fine-Tune微调 是 深度学习的一种语言处理技术，可以在前人（已有）的语言模型文件基础上加入少量新场景的文本数据进行更新训练，生成出新场景的语言模型。</p>
</blockquote>
<ul>
<li><strong>输入</strong>：金融文本。</li>
<li><strong>输出</strong>：Positive, Neutral or Negative.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">BertTokenizer</span><span class="p">,</span> <span class="n">BertForSequenceClassification</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="c1">#首次运行，因为会下载FinBERT模型，耗时会比较久</span>
<span class="n">senti_finbert</span> <span class="o">=</span> <span class="n">BertForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-tone&#39;</span><span class="p">,</span><span class="n">num_labels</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">senti_tokenizer</span> <span class="o">=</span> <span class="n">BertTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-tone&#39;</span><span class="p">)</span>
<span class="n">senti_nlp</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s2">&#34;text-classification&#34;</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">senti_finbert</span><span class="p">,</span> <span class="n">tokenizer</span><span class="o">=</span><span class="n">senti_tokenizer</span><span class="p">)</span>
</code></pre></div><p><br>使用3条测试文本进行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 待分析的文本数据</span>
<span class="n">senti_results</span> <span class="o">=</span> <span class="n">senti_nlp</span><span class="p">([</span><span class="s1">&#39;growth is strong and we have plenty of liquidity.&#39;</span><span class="p">,</span> 
                           <span class="s1">&#39;there is a shortage of capital, and we need extra financing.&#39;</span><span class="p">,</span>
                           <span class="s1">&#39;formulation patents might protect Vasotec to a limited extent.&#39;</span><span class="p">])</span>
<span class="n">senti_results</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [{&#39;label&#39;: &#39;Positive&#39;, &#39;score&#39;: 1.0},
     {&#39;label&#39;: &#39;Negative&#39;, &#39;score&#39;: 0.9952379465103149},
     {&#39;label&#39;: &#39;Neutral&#39;, &#39;score&#39;: 0.9979718327522278}]
</code></pre></div><p><br><br></p>
<h2 id="二esg分类">二、ESG分类</h2>
<p>ESG 分析可以帮助投资者确定企业的长期可持续性并识别相关风险。 FinBERT-ESG 是一个 FinBERT 模型，根据来自公司 ESG 报告和年度报告的 2,000 个手动注释句子进行微调。</p>
<ul>
<li><strong>输入</strong>：金融文本。</li>
<li><strong>输出</strong>：Environmental, Social, Governance or None.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">BertTokenizer</span><span class="p">,</span> <span class="n">BertForSequenceClassification</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">esg_finbert</span> <span class="o">=</span> <span class="n">BertForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-esg&#39;</span><span class="p">,</span><span class="n">num_labels</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">esg_tokenizer</span> <span class="o">=</span> <span class="n">BertTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-esg&#39;</span><span class="p">)</span>
<span class="n">esg_nlp</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s2">&#34;text-classification&#34;</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">esg_finbert</span><span class="p">,</span> <span class="n">tokenizer</span><span class="o">=</span><span class="n">esg_tokenizer</span><span class="p">)</span>
</code></pre></div><p><br>使用3条测试文本进行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">esg_results</span> <span class="o">=</span> <span class="n">esg_nlp</span><span class="p">([</span><span class="s1">&#39;Managing and working to mitigate the impact our operations have on the environment is a core element of our business.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;Rhonda has been volunteering for several years for a variety of charitable community programs.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;Cabot</span><span class="se">\&#39;</span><span class="s1">s annual statements are audited annually by an independent registered public accounting firm.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;As of December 31, 2012, the 2011 Term Loan had a principal balance of $492.5 million.&#39;</span><span class="p">])</span>

<span class="n">esg_results</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [{&#39;label&#39;: &#39;Environmental&#39;, &#39;score&#39;: 0.9805498719215393},
     {&#39;label&#39;: &#39;Social&#39;, &#39;score&#39;: 0.9906041026115417},
     {&#39;label&#39;: &#39;Governance&#39;, &#39;score&#39;: 0.6738430857658386},
     {&#39;label&#39;: &#39;None&#39;, &#39;score&#39;: 0.9960240125656128}]
</code></pre></div><p><br><br></p>
<h2 id="三fls识别">三、FLS识别</h2>
<p><strong>前瞻性陈述 (FLS)</strong> 告知投资者经理人对公司未来事件或结果的信念和意见。 从公司报告中识别前瞻性陈述可以帮助投资者进行财务分析。 FinBERT-FLS 是一个 FinBERT 模型，它基于罗素 3000 家公司年报的管理讨论和分析部分的 3,500 个手动注释的句子进行了微调。</p>
<ul>
<li><strong>输入</strong>：金融文本。</li>
<li><strong>输出</strong>：Specific-FLS(特定 FLS) , Non-specific FLS(非特定 FLS),  Not-FLS(非 FLS)。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">BertTokenizer</span><span class="p">,</span> <span class="n">BertForSequenceClassification</span><span class="p">,</span> <span class="n">pipeline</span>

<span class="n">fls_finbert</span> <span class="o">=</span> <span class="n">BertForSequenceClassification</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-fls&#39;</span><span class="p">,</span><span class="n">num_labels</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">fls_tokenizer</span> <span class="o">=</span> <span class="n">BertTokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s1">&#39;yiyanghkust/finbert-fls&#39;</span><span class="p">)</span>

<span class="n">fls_nlp</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s2">&#34;text-classification&#34;</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">fls_finbert</span><span class="p">,</span> <span class="n">tokenizer</span><span class="o">=</span><span class="n">fls_tokenizer</span><span class="p">)</span>
</code></pre></div><p><br> 使用3条测试文本进行测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fls_results</span> <span class="o">=</span> <span class="n">fls_nlp</span><span class="p">([</span><span class="s1">&#39;we expect the age of our fleet to enhance availability and reliability due to reduced downtime for repairs.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;on an equivalent unit of production basis, general and administrative expenses declined 24 percent from 1994 to $.67 per boe.&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;we will continue to assess the need for a valuation allowance against deferred tax assets considering all available evidence obtained in future reporting periods.&#39;</span><span class="p">])</span>


<span class="n">fls_results</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">    [{&#39;label&#39;: &#39;Specific FLS&#39;, &#39;score&#39;: 0.7727874517440796},
     {&#39;label&#39;: &#39;Not FLS&#39;, &#39;score&#39;: 0.9905241131782532},
     {&#39;label&#39;: &#39;Non-specific FLS&#39;, &#39;score&#39;: 0.975904107093811}]
</code></pre></div><p><br><br></p>
<h2 id="文档及引用说明">文档及引用说明</h2>
<ul>
<li>
<p>文档github地址 <a href="https://github.com/yya518/FinBERT">https://github.com/yya518/FinBERT</a></p>
</li>
<li>
<p>作者博客: <a href="https://yya518.github.io/research">https://yya518.github.io/research</a></p>
</li>
</ul>
<br>
<p>Huang, Allen H., Hui Wang, and Yi Yang. &ldquo;FinBERT: A large language model for extracting information from financial text.&rdquo; <strong>Contemporary Accounting Research (2022)</strong>.</p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>PNAS | 使用语义距离测量一个人的创新力(发散思维)得分</title>
      <link>https://hidadeng.github.io/blog/2022-11-14-pnas_naming_unrelated_words_predicts_creativity/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-14-pnas_naming_unrelated_words_predicts_creativity/</guid>
      <description>使用语义距离测量一个人的创新力(发散思维)得分</description>
      <content:encoded><![CDATA[<br>
<p>传统测量 <strong>被试者创造力</strong> 存在耗费时间、主观性太强、缺乏客观性，且所得到的分值是不稳定的，无法跨时间、文化、群体进行分值比较。该研究分析了创新力的两大理论，即联系理论和执行理论，即创新力是包含思维的广度和深度两方面。</p>
<ul>
<li><strong>联系理论(广度)</strong> 负责搜寻所有可能方案的集合，增加集合的规模，体现思维的广度。</li>
<li><strong>执行理论(深度)</strong> 负责寻找最佳方案，并将方案落实执行，体现思维的深度。</li>
</ul>
<p>结合Glove词嵌入技术，将每个词理解为一个技术或知识，两词语语义越相似，发散性越低。</p>
<p>文中让被试按照一定规则，随意填写10个名词，使用其中7个有效词语测量被试的创新力(发散性)思维。可以简单的把7个词理解为知识或者技术，7个词语会形成21种词语对(组合)。最后求均值可以测量出被试词语对的语义距离体现创新发散性的强度。<strong>文末含案例代码</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Olson, J.A., Nahas, J., Chmoulevitch, D., Cropper, S.J. and Webb, M.E., 2021. Naming unrelated words predicts creativity. Proceedings of the National Academy of Sciences, 118(25), p.e2022340118.
</code></pre></div><p><br><br></p>
<h2 id="一摘要">一、摘要</h2>
<p><strong>一些理论认为，有 创造力 的人能够产生更多 发散性 的想法。如果这是正确的，简单地让被试写 N 个不相关的单词，然后测量这N个词的语义距离， 作为 #发散思维 的客观衡量标准</strong>。为了验证这一假设，我们要求 8,914 名参与者说出 10 个彼此尽可能不同的单词。</p>
<p>然后计算算法估计单词之间的平均语义距离；<strong>相关词（例如 cat 和 dog）比不相关词（例如 cat 和 thimble）的距离更短。我们预测，产生更大语义距离的人也会在传统的创造力测量中得分更高</strong>。</p>
<p>在研究 1 中，我们发现语义距离与两个广泛使用的创造力测量（替代用途任务和桥接关联差距任务）之间存在中度至强相关性。在研究 2 中，参与者来自 98 个国家，语义距离仅因基本人口变量而略有不同。在一系列已知可预测创造力的问题上，语义距离与表现之间也存在正相关关系。</p>
<p>总体而言， <strong>语义距离</strong> 与已建立的 创造力测量 的相关性至少与这些测量彼此之间的相关性一样强。 因此，在我们所说的发散关联任务中命名不相关的词可以作为发散思维的简短、可靠和客观的衡量标准。</p>
<br>
<h2 id="二创新力理论">二、创新力理论</h2>
<p>想出 3 个尽可能不同的词。根据两种主要的创造力理论 (1, 2)，选择这些词依赖于产生 #远程联想 ，同时抑制 #常见联想 。</p>
<p>#联想理论 (Associative Theory)认为，有创造力的人具有语义记忆结构，可以更容易地链接远程元素 (3-6)。</p>
<p>#执行理论 (Executive Theory) 侧重于自上而下的注意力控制；创造性的解决方案来自于监测和抑制共同的联想 (2, 7)。</p>
<p>基于这些理论，我们假设 <strong>填写n个无关单词的任务</strong> 可以可靠地衡量 #语言创造力 。 <strong>创造力有两个主要的心理成分， 收敛思维和发散思维，它们在产生创意输出时协同工作</strong>。收敛性思维任务衡量评估多种刺激并得出最适当响应的能力，例如问题的最佳解决方案 (3, 8-10)。这些任务往往更容易得分，因为只有一小部分正确答案。<strong>相比之下，发散思维任务通常使用开放式问题来衡量一个人产生各种解决方案的能力</strong> (11-13)。它们通常需要更长的回答(文本)，因此更难客观评分。</p>
<br>
<h2 id="三创新力测量">三、创新力测量</h2>
<h3 id="31--替代用途任务">3.1  替代用途任务</h3>
<p>最常见的发散思维测量是 <strong>替代用途任务</strong> Alternative Uses Task (14, 15)，在该任务中，参与者生成常见物体的用途，例如回形针或鞋子。使用常用的评分方法 (16)，评分者然后根据三个组成部分来判断回答：</p>
<ul>
<li>灵活性，产生的不同用途类别的数量；</li>
<li>独创性，每次使用相对于样本的其余部分的稀有程度，这对创造力特别重要（17、18）；和</li>
<li>流畅度，一共产生了多少次使用。</li>
</ul>
<br>
<h3 id="32-离散联系任务">3.2 离散联系任务</h3>
<p>本研究作者开发了 <strong>离散联系任务</strong> (Divergent Association Task， DAT) 的网站， <strong>填写你想到的10个不相关词语， 创造力越丰富的人，填写的词语语义距离往往会更远</strong>。</p>
<p><a href="https://www.datcreativity.com/">https://www.datcreativity.com/</a></p>
<p><img loading="lazy" src="img/1_pnas_divergent_association_task_mainpage.png" alt=""  />
</p>
<h3 id="被试填写10个单词的规则">被试填写10个单词的规则</h3>
<ol>
<li>只能填写英文单词</li>
<li>只能是名词(如事情、物体、概念)</li>
<li>不能填 专有名词（例如，特定的人或地点）</li>
<li>不能填写 专业词（比如技术词）</li>
<li>自己思考这些词，不要只看周围环境的物体。</li>
</ol>
<h3 id="dat算法实现">DAT算法实现</h3>
<ol>
<li>使用Glove预训练模型</li>
<li>选前7个词(一共10个词)， 存在 21个词对（组合）</li>
<li>对21词对， 分别计算词向量的余弦距离，分别乘以100。最终求均值得到DAT得分。</li>
</ol>
<blockquote>
<p>下图是大邓第二次填写得到的DAT得分，第一次只超过了6%的人，这方法第一次准，再测就知道如何提高DAT得分。</p>
</blockquote>
<p><img loading="lazy" src="img/2_pnas_divergent_association_task_result.png" alt=""  />
</p>
<p>DAT得分范围0-200， 得分为0可能是7个有效词之间语义相同，而得分200可能是有效词之间彼此语义完全不相同。实践中，得分大多处于65~90之间，且很少超过100。</p>
<p><img loading="lazy" src="img/pnas_dat_score_low_median_high.jpg" alt=""  />
</p>
<blockquote>
<p>词嵌入技术可以把每个词转化为等长的向量，而不同词语共处于相同的语义空间中。常见的词嵌入技术有word2vec、Glove、flastText等，因为最近有学者在 <strong>替代用途任务</strong>(Alternative Uses Task）中用过Glove算法，本文采用Glove算法。本研究使用的Glove预训练模型来自Common Crawl Corpus项目，该项目拥有数十亿网页文本数据。</p>
<p>为了提供冗余， 只采用 被试者 填写的前7个词作为有效单词(DAT的被试需要填写10个词)。DAT得分是这些词之间的语义距离的平均值，具体计算方法， 7个词两两相关的组合有 42种组合， 选择其中最有可能的 21 个语义组合。</p>
</blockquote>
<br>
<h2 id="四实验">四、实验</h2>
<p>这种发散思维的操作化是基于创造力的联想和执行控制理论。 更高的分数将显示出更大的能力来利用更远程的关联 (3-5) 或抑制过度相关的关联 (2, 7)。</p>
<p>在研究 1 中，我们通过将 DAT 与其他两种创造力测量方法进行比较来检验这一假设：替代用途任务 (15) 和桥接关联差距任务 (36)。
<img loading="lazy" src="img/pnas_dat_aut_algo_valid_num.jpg" alt=""  />
</p>
<p>在研究 2 中，我们测试了这些分数如何随人口统计而变化，以及它们是否与更大数据集中与发散性思维相关的其他测量值相关 (9, 37)。 这些研究评估了语义距离是否可以作为发散思维的可靠指标。
<img loading="lazy" src="img/pnas_dat_gender_age.jpg" alt=""  />
</p>
<br>
<h2 id="五讨论">五、讨论</h2>
<p>研究结果表面， 让被试简单的填写10个不想管单词的任务可以作为 测量发散思维 的可靠衡量标准。在研究中， 将这项任务的表现与已有的两种创造力量表做了比较，具有很高的相关性。</p>
<p>总体而言支持了语义发散性，尽管这种联系背后的确切机制尚不清楚，但在创新力最主要的两个理论，即联想理论或执行理论 的联系网络中衡量网络的范围或效率。</p>
<p><strong>DAT算法表现稳定，方差不随人口统计特征变化出现显著性变化（研究2），可以在跨年龄、跨性别的情况下应用</strong>。</p>
<br>
<h3 id="51-dat的优点">5.1 DAT的优点</h3>
<ul>
<li>操作简单，快捷，客观，节约了大量的人力时间，又能保证客观性。</li>
<li>得分绝对，可比较，可以用于测量不同群体(种族、文化、性别、年龄)的创造力得分。</li>
<li>对被试友好，一般一两分钟即可完成。</li>
</ul>
<h3 id="52-dat的不足">5.2 DAT的不足</h3>
<ul>
<li>创造力有发散性和执行力，发散性负责搜选所有方案集合的规模，而执行力是从方案集中选出最优方案并将其执行。DAT测量的仅仅是发散性思维。</li>
<li>被试可能通过填写稀奇的词语提高DAT得分。</li>
<li>只有短短几分钟，被试可能很难短时间内了解实验规则。</li>
</ul>
<h3 id="53-未来展望">5.3 未来展望</h3>
<p>DAT得分取决于Glove模型、语料库(数据集), 更新词模型或语料库，被试的DAT得分会发生变化。为简单起见，本研究使用免费的预训练模型， 通过一些努力，未来研究者可以对不同时期，不同国家的语料库来训练Glove模型。随着特定单词关联或多或少的联系， 更新的模型将会自动考虑这些变化，这将允许DAT得分跨越文化跨越时代，进行创新力的比较。</p>
<p><br><br></p>
<h2 id="代码">代码</h2>
<p>代码的文档说明请点击 github仓库地址 <a href="https://github.com/jayolson/divergent-association-task">https://github.com/jayolson/divergent-association-task</a> 查看。这里仅粘贴作者源代码，源代码需要配置好才可运行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">dat</span>

<span class="c1">## 从 https://nlp.stanford.edu/projects/glove/ 下载Glove模型</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">dat</span><span class="o">.</span><span class="n">Model</span><span class="p">(</span><span class="s2">&#34;glove.840B.300d.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;words.txt&#34;</span><span class="p">)</span>

<span class="c1"># 验证词语，如输入的是词组，代码会将其转为连线形式的单词</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="s2">&#34;cul de sac&#34;</span><span class="p">))</span> 
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cul-de-sac
</code></pre></div><br>
<p>计算两个词语之间的语义距离</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;thimble&#34;</span><span class="p">))</span> 
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">0.1983
0.8787
</code></pre></div><br>
<p>计算词对的DAT得分（语义cosine距离*100）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">([</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span> 
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">([</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;thimble&#34;</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span> 
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">19.83
87.87
</code></pre></div><br>
<p>假设有三个人分别都填写10个词，选其前7个词作为有效词。有效词如下，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">low</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;arm&#34;</span><span class="p">,</span> <span class="s2">&#34;eyes&#34;</span><span class="p">,</span> <span class="s2">&#34;feet&#34;</span><span class="p">,</span> <span class="s2">&#34;hand&#34;</span><span class="p">,</span> <span class="s2">&#34;head&#34;</span><span class="p">,</span> <span class="s2">&#34;leg&#34;</span><span class="p">,</span> <span class="s2">&#34;body&#34;</span><span class="p">]</span>
<span class="n">average</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;bag&#34;</span><span class="p">,</span> <span class="s2">&#34;bee&#34;</span><span class="p">,</span> <span class="s2">&#34;burger&#34;</span><span class="p">,</span> <span class="s2">&#34;feast&#34;</span><span class="p">,</span> <span class="s2">&#34;office&#34;</span><span class="p">,</span> <span class="s2">&#34;shoes&#34;</span><span class="p">,</span> <span class="s2">&#34;tree&#34;</span><span class="p">]</span>
<span class="n">high</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;hippo&#34;</span><span class="p">,</span> <span class="s2">&#34;jumper&#34;</span><span class="p">,</span> <span class="s2">&#34;machinery&#34;</span><span class="p">,</span> <span class="s2">&#34;prickle&#34;</span><span class="p">,</span> <span class="s2">&#34;tickets&#34;</span><span class="p">,</span> <span class="s2">&#34;tomato&#34;</span><span class="p">,</span> <span class="s2">&#34;violin&#34;</span><span class="p">]</span>

<span class="c1"># Compute the DAT score (transformed average cosine distance of first 7 valid words)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">(</span><span class="n">low</span><span class="p">))</span> <span class="c1"># 50</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">(</span><span class="n">average</span><span class="p">))</span> <span class="c1"># 78</span>
<span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">dat</span><span class="p">(</span><span class="n">high</span><span class="p">))</span> <span class="c1"># 95</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">50
78
95
</code></pre></div><p>需要注意pnas作者公开的代码只能用在英文，且无法自己训练Glove模型。如果想基于自有数据集（中文、英文），训练自有Glove模型，需要学习</p>
<ul>
<li>如何训练Glove模型</li>
<li>如何导入训练好的Glove模型</li>
<li>如何计算中英文dat得分</li>
</ul>
<p>相关知识点已更新至我的录播课课程 <a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></p>
<p><br><br></p>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>魔搭 | 中文AI模型开源社区</title>
      <link>https://hidadeng.github.io/blog/2022-11-09-chinese-modelscope-open-source/</link>
      <pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-11-09-chinese-modelscope-open-source/</guid>
      <description>ModelScope社区成立于2022 年6月，是一个模型开源社区及创新平台，由阿里巴巴达摩院，联合CCF开源发展委员会，共同作为项目发起方。社区联合国内AI领域合作伙伴与高校机构，致力于通过开放的社区合作，构建深度学习相关的模型开源，并开源相关模型服务创新技术，推动模型应用生态的繁荣发展。</description>
      <content:encoded><![CDATA[<h2 id="关于modelscope">关于ModelScope</h2>
<p>ModelScope社区成立于 2022 年 6 月，是一个模型开源社区及创新平台，由阿里巴巴达摩院，联合CCF开源发展委员会，共同作为项目发起方。</p>
<blockquote>
<p>社区联合国内AI领域合作伙伴与高校机构，致力于通过开放的社区合作，构建深度学习相关的模型开源，并开源相关模型服务创新技术，推动模型应用生态的繁荣发展。</p>
</blockquote>
<p>期待ModelScope会有不一样的表现。</p>
<p>与ModelScope类似的网站有</p>
<ul>
<li>国际 huggingface是较早将AI模型开源的网站，用户群体庞大，社区内有丰富的数据集、模型，文档详实。</li>
<li>国内 百度飞桨是国内AI模型开源较好的网站，用户群体较大，更新活跃，但是文档质量。。。</li>
</ul>
<p>目前ModelScope刚刚上线不久，模型和数据集都不怎么多</p>
<p><img loading="lazy" src="img/model_scope_homepage.png" alt=""  />
</p>
<br>
<h2 id="heading"></h2>
<h1 id="名词解释"><strong>名词解释</strong></h1>
<p>ModelScope平台是以模型为中心的模型开源社区，与模型的使用相关，您需要先了解如下概念。</p>
<table>
<thead>
<tr>
<th><strong>基础概念</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>任务</td>
<td>任务（Task）指某一领域具体的应用，以用于完成特定场景的任务。例如图像分类、文本生成、语音识别等，您可根据任务的输入输出找到适合您的应用场景的任务类型，通过任务的筛选来查找您所需的模型。</td>
</tr>
<tr>
<td>模型</td>
<td>模型（Model）是指一个具体的模型实例，包括模型网络结构和相应参数。ModelScope平台提供丰富的模型信息供用户体验与使用。</td>
</tr>
<tr>
<td>模型库</td>
<td>模型库（Modelhub）是指对模型进行存储、版本管理和相关操作的模型服务，用户上传和共享的模型将存储至ModelScope的模型库中，同时用户也可在Model hub中创建属于自己的模型存储库，并沿用平台提供的模型库管理功能进行模型管理。</td>
</tr>
<tr>
<td>数据集</td>
<td>数据集（Dataset）是方便共享及访问的数据集合，可用于算法训练、测试、验证，通常以表格形式出现。按照模态可划分为文本、图像、音频、视频、多模态等。</td>
</tr>
<tr>
<td>数据集库</td>
<td>数据集库（Datasethub）用于集中管理数据，支持模型进行训练、预测等，使各类型数据具备易访问、易管理、易共享的特点。</td>
</tr>
<tr>
<td>ModelScope Library</td>
<td>ModelScope Library是ModelScope平台自研的一套Python Library框架，通过调用特定的方法，用户可以只写短短的几行代码，就可以完成模型的推理、训练和评估等任务，也可以在此基础上快速进行二次开发，实现自己的创新想法。</td>
</tr>
</tbody>
</table>
<br>
<h2 id="一模型探索">一、模型探索</h2>
<p>首先访问平台网址https://www.modelscope.cn/models， 您将看见平台上已有的所有公开模型，根据任务筛选或者关键词搜索可查找您感兴趣的模型。</p>
<p><img loading="lazy" src="img/1-model_explore.png" alt=""  />
</p>
<br>
<h2 id="二环境准备">二、环境准备</h2>
<h3 id="21-本地开发环境">2.1 本地开发环境</h3>
<p>如果您需要在本地运行模型，需要进行相应的环境安装准备，包括：</p>
<ul>
<li><strong>安装python环境</strong>。支持python3，不支持python2，建议3.7版本及以上。我们推荐您使用Anaconda进行安装。</li>
<li><strong>安装深度学习框架</strong>。ModelScope Library目前支持Tensorflow，Pytorch两大深度学习框架进行模型训练、推理。您可根据模型所需的框架选择适合的框架进行安装。</li>
<li><strong>安装ModelScope Library</strong>。我们提供两种安装方式，您可选择适合的方式进行安装。
<ul>
<li>pip安装。ModelScope提供了根据不同领域的安装包，您可根据对应的模型选择所需的安装包。</li>
<li>使用源码安装。</li>
<li>更完整的安装信息参考：环境安装指南。</li>
</ul>
</li>
</ul>
<h3 id="22-在线notebook">2.2 在线Notebook</h3>
<p>若您觉得本地安装较为复杂， ModelScope平台也提供在线的运行环境，您可直接在Notebook中运行，Notebook中提供官方镜像无需自主进行环境安装，更加方便快捷，推荐大家使用！</p>
<p>注意：该功能需要您登录后使用，新用户注册ModelScope账号并完成阿里云账号绑定后即可获得免费算力资源，详情请参阅免费额度说明 。</p>
<p><img loading="lazy" src="img/model_scode_free_online_notebook.png" alt=""  />
</p>
<p><img loading="lazy" src="img/model_scode_free_online_notebook-2.png" alt=""  />
</p>
<br>
<h2 id="三2分钟跑通模型推理">三、2分钟跑通模型推理</h2>
<p>若您准备好本地环境或者已经打开一个Notebook的预装环境实例，则根据下述代码可对该模型进行推理。 使用modelscope pipeline接口只需要两步，同样以上述中文分词模型（damo/nlp_structbert_word-segmentation_chinese-base）为例简单说明：</p>
<p>首先根据task实例化一个pipeline对象</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">modelscope.pipelines</span> <span class="kn">import</span> <span class="n">pipeline</span>
<span class="n">word_segmentation</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span><span class="s1">&#39;word-segmentation&#39;</span><span class="p">,</span><span class="n">model</span><span class="o">=</span><span class="s1">&#39;damo/nlp_structbert_word-segmentation_chinese-base&#39;</span><span class="p">)</span>
</code></pre></div><p>输入数据，拿到结果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">input_str</span> <span class="o">=</span> <span class="s1">&#39;今天天气不错，适合出去游玩&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">word_segmentation</span><span class="p">(</span><span class="n">input_str</span><span class="p">))</span>
</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{&#39;output&#39;: &#39;今天 天气 不错 ， 适合 出去 游玩&#39;}
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>gdown库 |  从googleDriver下载大体积文件</title>
      <link>https://hidadeng.github.io/blog/2022-10-31-gdown-googledriver/</link>
      <pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-31-gdown-googledriver/</guid>
      <description>如何使用python下载googledriver内的大尺寸文件</description>
      <content:encoded><![CDATA[<p>熟悉IT的同学知道，下载工具有curl和wget。但是这类工具很难成功下载大体积的文件，今天分享的gdown可以帮我们解决这个问题。不过使用该工具的其那题是， 电脑可以科学地上网。</p>
<br>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install gdown
</code></pre></div><br>
<h2 id="使用">使用</h2>
<p>gdown安装后有两种使用方法</p>
<ul>
<li>命令行模式</li>
<li>代码模式</li>
</ul>
<br>
<h3 id="命令行模式">命令行模式</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">$ gdown --help
usage: gdown [-h] [-V] [-O OUTPUT] [-q] [--fuzzy] [--id] [--proxy PROXY]
             [--speed SPEED] [--no-cookies] [--no-check-certificate]
             [--continue] [--folder] [--remaining-ok]
             url_or_id
...

$ # 大文件 (~500MB)
$ gdown https://drive.google.com/uc?id=1l_5RK28JRL19wpT22B-DY9We3TVXnnQQ
$ md5sum fcn8s_from_caffe.npz
256c2a8235c1c65e62e48d3284fbd384
</code></pre></div><br>
<h3 id="代码模式">代码模式</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">gdown</span>

<span class="c1"># 下载 网盘文件</span>
<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://drive.google.com/uc?id=1l_5RK28JRL19wpT22B-DY9We3TVXnnQQ&#34;</span>
<span class="n">output</span> <span class="o">=</span> <span class="s2">&#34;fcn8s_from_caffe.npz&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="c1"># 使用文件ID作为文件名</span>
<span class="nb">id</span> <span class="o">=</span> <span class="s2">&#34;0B9P1L--7Wd2vNm9zMTJWOGxobkU&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="n">output</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="c1"># same as the above, and you can copy-and-paste a URL from Google Drive with fuzzy=True</span>
<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://drive.google.com/file/d/0B9P1L--7Wd2vNm9zMTJWOGxobkU/view?usp=sharing&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="n">output</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">fuzzy</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>


<span class="c1"># 下载 网盘文件夹</span>
<span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://drive.google.com/drive/folders/15uNXeRBIhVvZJIhL4yTw4IsStMhUaaxl&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download_folder</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">use_cookies</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="c1"># 使用文件夹ID作为文件夹名</span>
<span class="nb">id</span> <span class="o">=</span> <span class="s2">&#34;15uNXeRBIhVvZJIhL4yTw4IsStMhUaaxl&#34;</span>
<span class="n">gdown</span><span class="o">.</span><span class="n">download_folder</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span> <span class="n">quiet</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">use_cookies</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Maigret库 | 查询某用户名在各平台网站的使用情况</title>
      <link>https://hidadeng.github.io/blog/2022-10-08-find-sns-account-information-with-maigret/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-10-08-find-sns-account-information-with-maigret/</guid>
      <description>Maigret 能检查各网站(应用) 某 **用户名** 是否注册，并从网页收集所有可用信息,  运行过程不需要 API 密钥。目前支持超过 2500 个站点检索（完整列表），默认针对 500 个热门站点按受欢迎程度降序启动搜索。</description>
      <content:encoded><![CDATA[<p>Maigret 能检查各网站(应用) 某 <strong>用户名</strong> 是否注册，并从网页收集所有可用信息,  运行过程不需要 API 密钥。目前支持超过 2500 个站点检索（完整列表），默认针对 500 个热门站点按受欢迎程度降序启动搜索。</p>
<br>
<h2 id="主要功能">主要功能</h2>
<ul>
<li>个人资料页面解析</li>
<li>个人信息提取</li>
<li>其他个人资料链接等。</li>
<li>通过新用户名和找到的其他 id 进行递归搜索</li>
<li>按标签搜索（网站类别、国家/地区）</li>
</ul>
<br>
<h2 id="安装">安装</h2>
<p>命令行中安装maigret包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install maigret
</code></pre></div><br>
<h2 id="使用">使用</h2>
<p>我自己有个账号名是hidadeng，就用hidadeng试试。</p>
<p>为了解用户名hidadeng使用情况，报告结果存储于html和pdf。 在命令行中执行，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">maigret hidadeng --html --pdf
</code></pre></div><p>命令行运行过程</p>
<p><img loading="lazy" src="img/hidadeng-cmd.png" alt=""  />
</p>
<br>
<h2 id="报告">报告</h2>
<p>maigret查询用户名hidadeng的使用情况、兴趣等结果可以绘制成报告。</p>
<p><a href="report_hidadeng_plain.html">点击查看hidadeng报告</a></p>
<p><img loading="lazy" src="img/hidadeng-report-1.png" alt=""  />
</p>
<p><img loading="lazy" src="img/hidadeng-report-2.png" alt=""  />
</p>
<p>效果挺准的，对hidadeng这个用户兴趣(coding、shopping)拿捏的也挺不错。</p>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>ManagementScience | 使用网络算法识别创新的颠覆性与否</title>
      <link>https://hidadeng.github.io/blog/2022-09-07-management-science-disrupt-science-and-technology/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/2022-09-07-management-science-disrupt-science-and-technology/</guid>
      <description>The CD index is a new approach to finding important points in evolving networks. When applied to large-scale data sets like U.S. patent citations, the index is useful for identifying influential innovations and other features of technological change.</description>
      <content:encoded><![CDATA[


<p>颠覆式创新是一个很火的概念，在创新创业、科学学等研究中，每个专利、论文的正文中都会引用关系，而引用关系会构成一个引用网络。</p>
<p>那么创新如何从网络形态进行区分，如何计算网络节点的创新程度，本文列举两篇与此相关的论文，分别是 Management science 和 Science 。</p>
<p><br><br></p>
<div id="文献摘要" class="section level2">
<h2>文献摘要</h2>
<p><strong>Funk, Russell J., and Jason Owen-Smith. “A dynamic network measure of technological change.” <em>Management science</em> 63, no. 3 (2017): 791-817.</strong></p>
<p>该文使用网络分析方法研究技术变革，论文认为 <strong>颠覆性的新发明，通过将发明者的注意力转移到或远离这些发明所依赖的知识，来重塑相互关联的技术网络。即更广的视野或更久远的视角，往往有利于颠覆性创新的产生</strong>。<strong>基于该思路，本文开发了新发明的颠覆性与否的计算指标cdindex</strong>。我们将这些指标应用于大学研究商业化的分析，并发现 <strong>联邦研究资金推动校园产生颠覆性创新，而商业联系会有利于巩固现状的创新</strong>。通过量化新技术，我们提出的指数允许基于专利的创新研究捕捉概念上重要的现象， 这些现象无法通过既定措施检测到。该测量方法提供了支持创新、创业、技术战略、科学政策和社会网络理论研究的理论发展的经验见解。</p>
<blockquote>
<p>Abstract: This article outlines a network approach to the study of technological change. We propose that new inventions reshape networks of interlinked technologies by shifting inventors’ attention to or away from the knowledge on which those inventions build. Using this approach, we develop novel indexes of the extent to which a new invention consolidates or destabilizes existing technology streams. We apply these indexes in analyses of university research commercialization and ﬁnd that, although federal research funding pushes campuses to create inventions that are more destabilizing, deeper commercial ties lead them to produce technologies that consolidate the status quo. By quantifying the eﬀects that new technologies have on their predecessors, the indexes we propose allow patent-based studies of innovation to capture conceptually important phenomena that are not detectable with established measures. The measurement approach presented here oﬀers empirical insights that support theoretical development in studies of innovation, entrepreneurship, technology strategy, science policy, and social network theory.</p>
</blockquote>
<p><br></p>
<p><strong>Wu, Lingfei, Dashun Wang, and James A. Evans. “Large teams develop and small teams disrupt science and technology.” Nature 566, no. 7744 (2019): 378-382.</strong></p>
<p>当今科学和技术最普遍的趋势之一是各个领域的大型团队的增长，因为孤独的研究人员和小型团队的流行程度正在减少 。团队规模的增加归因于科学活动的专业化、通信技术的改进 或需要跨学科解决方案的现代问题的复杂性。团队规模的这种转变引发了一个问题，即大团队所产生的科技特征是否以及如何不同于小团队。分析了 1954-2014 年期间超过 6500 万篇论文、专利和软件产品，证明在此期间，<strong>较小的团队倾向于将拉长到更大的时间尺度，借鉴过去，用新的想法和机会来颠覆科学和技术；而较大的团队倾向于聚焦于当前流行的，完善当前现有的</strong>。不论团队大小，均对于蓬勃发展的科学技术生态至关重要，并表明，为实现这一目标，科学政策应旨在支持团队规模的多样性。</p>
<blockquote>
<p>Abstract: One of the most universal trends in science and technology today is the growth of large teams in all areas, as solitary researchers and small teams diminish in prevalence. Increases in team size have been attributed to the specialization of scientific activities,
improvements in communication technology, or the complexity
of modern problems that require interdisciplinary solutions.This shift in team size raises the question of whether and how the character of the science and technology produced by large teams differs from that of small teams. Here we analyse more than 65 million papers, patents and software products that span the period 1954–2014, and demonstrate that across this period smaller teams have tended to disrupt science and technology with new ideas and opportunities, whereas larger teams have tended to develop existing ones. Work from larger teams builds on morerecent and popular developments, and attention to their work comes
immediately. By contrast, contributions by smaller teams search more deeply into the past, are viewed as disruptive to science and technology and succeed further into the future—if at all. Observed differences between small and large teams are magnified for higherimpact work, with small teams known for disruptive work and large teams for developing work. Differences in topic and research design
account for a small part of the relationship between team size and disruption; most of the effect occurs at the level of the individual, as people move between smaller and larger teams. These results demonstrate that both small and large teams are essential to a flourishing ecology of science and technology, and suggest that, to achieve this, science policies should aim to support a diversity of team sizes.</p>
</blockquote>
<p><br><br></p>
</div>
<div id="算法对比" class="section level2">
<h2>算法对比</h2>
<p>我没阅读两篇论文，仅就颠覆性与否的计算方法和图例，感觉算法实现差不多。</p>
<div class="figure">
<img src="img/cdindex-managent_science_2017.png" alt="" />
<p class="caption">上图为2017年Management Science的插图</p>
</div>
<p><br></p>
<div class="figure">
<img src="img/disruption_nature_2019.png" alt="" />
<p class="caption">上图为2019年Nature的插图</p>
</div>
<p><br><br></p>
</div>
<div id="代码数据" class="section level2">
<h2>代码数据</h2>
<p>下面分别为Management2017和Nature2019的主页，均含数据和代码。</p>
<p><a href="http://russellfunk.org/cdindex/"><img src="img/cdindex-homepage.png" /></a></p>
<p><br></p>
<p><a href="https://lingfeiwu.github.io/smallTeams/"><img src="img/nature2019-disrupt-homepage.png" /></a></p>
<p><br><br></p>
</div>
<div id="算法实现" class="section level2">
<h2>算法实现</h2>
<p>按照时间优先原则，本文就只分享Management2017论文作者Funk, Russell开源了cdindex库 (开发语言C和Python) ，安装</p>
<p><br></p>
<pre><code>pip3 install cdindex</code></pre>
<p>将Management2017 cdindex算法图 标注为如下图， 下图中左右两个网络节点是相同的，只需构造一套节点，两套边数据即可完成实验。</p>
<p><img src="img/cdindex-managent_science_2017_demo.png" /></p>
<p><br></p>
<p>我们就直接上代码</p>
<pre class="python"><code>import cdindex
import datetime

#节点，理解为专利号或者论文doi号；同时节点有先后时间属性
vertices = [{&quot;name&quot;: &quot;x1&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x2&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x3&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
           {&quot;name&quot;: &quot;x4&quot;, &quot;time&quot;: datetime.datetime(1990, 1, 1)},
        
           {&quot;name&quot;: &quot;y&quot;, &quot;time&quot;: datetime.datetime(1991, 1, 1)},
          
           {&quot;name&quot;: &quot;z1&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z2&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z3&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z4&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z5&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)},
           {&quot;name&quot;: &quot;z6&quot;, &quot;time&quot;: datetime.datetime(1995, 1, 1)}]
           
    
#edges_1边关系
#edges_1中的y为颠覆型
edges_1 = [{&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;y&quot;},
           
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x1&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x2&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x3&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x4&quot;}]


#edges_2边关系 
#edges_2中的y为巩固型
edges_2 = [{&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;y&quot;},
           {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;y&quot;},
           
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x1&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x2&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x3&quot;},
           {&quot;source&quot;: &quot;y&quot;, &quot;target&quot;: &quot;x4&quot;},
          
          {&quot;source&quot;: &quot;z1&quot;, &quot;target&quot;: &quot;x1&quot;},
          {&quot;source&quot;: &quot;z2&quot;, &quot;target&quot;: &quot;x1&quot;},
          {&quot;source&quot;: &quot;z3&quot;, &quot;target&quot;: &quot;x2&quot;},
           
          {&quot;source&quot;: &quot;z4&quot;, &quot;target&quot;: &quot;x3&quot;},
          {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;x3&quot;},
          {&quot;source&quot;: &quot;z5&quot;, &quot;target&quot;: &quot;x4&quot;},
          {&quot;source&quot;: &quot;z6&quot;, &quot;target&quot;: &quot;x4&quot;}]



# 构建两个网络
graph1 = cdindex.Graph() #颠覆型
graph2 = cdindex.Graph() #发展型

# 添加节点
for vertex in vertices:
    graph1.add_vertex(vertex[&quot;name&quot;], cdindex.timestamp_from_datetime(vertex[&quot;time&quot;]))
    graph2.add_vertex(vertex[&quot;name&quot;], cdindex.timestamp_from_datetime(vertex[&quot;time&quot;]))

# 添加引用关系
for edge in edges_1:
    graph1.add_edge(edge[&quot;source&quot;], edge[&quot;target&quot;])
for edge in edges_2:
    graph2.add_edge(edge[&quot;source&quot;], edge[&quot;target&quot;])
    
    
#y研究发布后1825天内，引用y的论文(专利)列入网络。
t_delta = int(datetime.timedelta(days=1825).total_seconds())

#计算cdindex得分
score1 = graph1.cdindex(&quot;y&quot;, t_delta)
score2 = graph2.cdindex(&quot;y&quot;, t_delta)

print(&#39;左侧-网络中的y节点的cdinex得分: {}, 节点y 为颠覆性创新&#39;.format(score1))</code></pre>
<pre><code>## 左侧-网络中的y节点的cdinex得分: 1.0, 节点y 为颠覆性创新</code></pre>
<p><br></p>
<pre class="python"><code>print(&#39;右侧-网络中的y节点的cdinex得分: {}, 节点y 为发展性创新&#39;.format(score2))</code></pre>
<pre><code>## 右侧-网络中的y节点的cdinex得分: -1.0, 节点y 为发展性创新</code></pre>
<p><br><br></p>
</div>
<div id="cdindex" class="section level2">
<h2>cdindex</h2>
<p>对比Python的结果，与论文计算过程，完全一致。cdindex内部实现我不太熟悉，如果想了解cdindex内部实现，可前往 <a href="https://github.com/russellfunk/cdindex" class="uri">https://github.com/russellfunk/cdindex</a> 阅读cdindex库的源码。
<img src="img/cdindex-managent_science_2017.png" /></p>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>PyEcharts库 | 绘制社交关系网络图</title>
      <link>https://hidadeng.github.io/blog/pyecharts_graph_vis/</link>
      <pubDate>Sat, 07 May 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/pyecharts_graph_vis/</guid>
      <description>使用pyecharts绘制社交关系网络图</description>
      <content:encoded><![CDATA[<p>使用pyecharts绘制社交网络关系图，直接上代码。</p>
<h2 id="代码">代码</h2>
<p><a href="pyecharts_graph_vis_code.zip">点击下载代码</a></p>
<br>
<h2 id="base">base</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点1&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点2&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点3&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">30</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点4&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">40</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点5&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">50</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点6&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">40</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点7&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">30</span><span class="p">},</span>
    <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;结点8&#34;</span><span class="p">,</span> <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">},</span>
<span class="p">]</span>
<span class="n">links</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
        <span class="n">links</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">i</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">),</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">j</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">)})</span>

        
<span class="p">(</span>
    <span class="n">Graph</span><span class="p">()</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">links</span><span class="p">,</span> <span class="n">repulsion</span><span class="o">=</span><span class="mi">8000</span><span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Graph-基本示例&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;graph_base.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="graph_base.html">graph_base</a></p>
<p><img loading="lazy" src="img/base.png" alt=""  />
</p>
<br>
<h2 id="weibo">weibo</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/weibo.json&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">nodes</span><span class="p">,</span> <span class="n">links</span><span class="p">,</span> <span class="n">categories</span><span class="p">,</span> <span class="n">cont</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">userl</span> <span class="o">=</span> <span class="n">j</span>


<span class="p">(</span>
    <span class="n">Graph</span><span class="p">()</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="p">,</span>
        <span class="n">links</span><span class="p">,</span>
        <span class="n">categories</span><span class="p">,</span>
        <span class="n">repulsion</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">curve</span><span class="o">=</span><span class="mf">0.2</span><span class="p">),</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">legend_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LegendOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Graph-微博转发关系图&#34;</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;graph_weibo.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="graph_weibo.html">graph_weibo</a></p>
<p><img loading="lazy" src="img/weibo.png" alt=""  />
</p>
<br>
<h2 id="npm">npm</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Graph</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">Gallery 使用 pyecharts 1.1.0
</span><span class="s2">参考地址: https://echarts.apache.org/examples/editor.html?c=graph-npm
</span><span class="s2">
</span><span class="s2">目前无法实现的功能:
</span><span class="s2">
</span><span class="s2">1、暂无
</span><span class="s2">&#34;&#34;&#34;</span>




<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;data/npmdepgraph.min10.json&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>

    
<span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s2">&#34;x&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;x&#34;</span><span class="p">],</span>
        <span class="s2">&#34;y&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">],</span>
        <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;id&#34;</span><span class="p">],</span>
        <span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;label&#34;</span><span class="p">],</span>
        <span class="s2">&#34;symbolSize&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;size&#34;</span><span class="p">],</span>
        <span class="s2">&#34;itemStyle&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;normal&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s2">&#34;color&#34;</span><span class="p">]}},</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s2">&#34;nodes&#34;</span><span class="p">]</span>
<span class="p">]</span>

<span class="n">edges</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s2">&#34;source&#34;</span><span class="p">:</span> <span class="n">edge</span><span class="p">[</span><span class="s2">&#34;sourceID&#34;</span><span class="p">],</span> <span class="s2">&#34;target&#34;</span><span class="p">:</span> <span class="n">edge</span><span class="p">[</span><span class="s2">&#34;targetID&#34;</span><span class="p">]}</span> <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s2">&#34;edges&#34;</span><span class="p">]</span>
<span class="p">]</span>



<span class="p">(</span>
    <span class="n">Graph</span><span class="p">(</span><span class="n">init_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">InitOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="s2">&#34;1600px&#34;</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="s2">&#34;800px&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span>
        <span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="n">nodes</span><span class="o">=</span><span class="n">nodes</span><span class="p">,</span>
        <span class="n">links</span><span class="o">=</span><span class="n">edges</span><span class="p">,</span>
        <span class="n">layout</span><span class="o">=</span><span class="s2">&#34;none&#34;</span><span class="p">,</span>
        <span class="n">is_roam</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">is_focusnode</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">label_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
        <span class="n">linestyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LineStyleOpts</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">curve</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">opacity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;NPM Dependencies&#34;</span><span class="p">))</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;npm_dependencies.html&#34;</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div><p>Run</p>
<p><a href="npm_dependencies.html">npm_dependencies</a></p>
<p><img loading="lazy" src="img/npm.png" alt=""  />
</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>SimpleTransformers库 | 使用BERT实现文本向量化</title>
      <link>https://hidadeng.github.io/blog/simple_transformer/</link>
      <pubDate>Thu, 05 May 2022 10:40:10 +0600</pubDate>
      
      <guid>/blog/simple_transformer/</guid>
      <description>基于BERT预训练模型，对文本进行向量化</description>
      <content:encoded><![CDATA[<p><code>Simple Transformers</code> 库基于 HuggingFace 的 <a href="https://github.com/huggingface/transformers">Transformers</a> 库，可让您快速训练和评估 Transformer 模型， <strong>初始化</strong>、<strong>训练</strong>和<strong>评估</strong>模型只需要 3 行代码。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install simpletransformers
</code></pre></div><p><strong>Simple Transformer</strong> 模型在构建时考虑了特定的自然语言处理 (NLP) 任务。 每个这样的模型都配备了旨在最适合它们打算执行的任务的特性和功能。 使用 Simple Transformers 模型的高级过程遵循相同的模式。</p>
<ol>
<li>初始化一个特定于任务的模型
2.用<code>train_model()</code>训练模型</li>
<li>使用 <code>eval_model()</code> 评估模型</li>
<li>使用 <code>predict()</code> 对（未标记的）数据进行预测</li>
</ol>
<p>但是，不同模型之间存在必要的差异，以确保它们非常适合其预期任务。 关键差异通常是输入/输出数据格式和任何任务特定功能/配置选项的差异。 这些都可以在每个任务的文档部分中找到。</p>
<p>当前实现的特定于任务的“Simple Transformer”模型及其任务如下所示。</p>
<table>
<thead>
<tr>
<th>Task</th>
<th>Model</th>
</tr>
</thead>
<tbody>
<tr>
<td>Binary and multi-class text classification文本二分类、多分类</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td>Conversational AI (chatbot training)对话机器人训练</td>
<td><code>ConvAIModel</code></td>
</tr>
<tr>
<td>Language generation语言生成</td>
<td><code>LanguageGenerationModel</code></td>
</tr>
<tr>
<td>Language model training/fine-tuning语言模型训练、微调</td>
<td><code>LanguageModelingModel</code></td>
</tr>
<tr>
<td>Multi-label text classification多类别文本分类</td>
<td><code>MultiLabelClassificationModel</code></td>
</tr>
<tr>
<td>Multi-modal classification (text and image data combined)多模态分类</td>
<td><code>MultiModalClassificationModel</code></td>
</tr>
<tr>
<td>Named entity recognition命名实体识别</td>
<td><code>NERModel</code></td>
</tr>
<tr>
<td>Question answering问答</td>
<td><code>QuestionAnsweringModel</code></td>
</tr>
<tr>
<td>Regression回归</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td>Sentence-pair classification句对分类</td>
<td><code>ClassificationModel</code></td>
</tr>
<tr>
<td><strong>Text Representation Generation文本表征生成</strong></td>
<td><strong>RepresentationModel</strong></td>
</tr>
<tr>
<td>Document Retrieval文档抽取</td>
<td><code>RetrievalModel</code></td>
</tr>
</tbody>
</table>
<ul>
<li><strong>有关如何使用这些模型的更多信息，请参阅 <a href="https://simpletransformers.ai/">docs</a> 中的相关部分。</strong></li>
<li>示例脚本可以在 <a href="https://github.com/ThilinaRajapakse/simpletransformers/tree/master/examples">examples</a> 目录中找到。</li>
<li>有关项目的最新更改，请参阅 <a href="https://github.com/ThilinaRajapakse/simpletransformers/blob/master/CHANGELOG.md">Changelog</a>。</li>
</ul>
<h2 id="生成句子嵌入">生成句子嵌入</h2>
<p>使用huggingface网站https://huggingface.co/ 提供的模型</p>
<ul>
<li>英文模型 bert-base-uncased</li>
<li>中文模型 bert-base-chinese</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">simpletransformers.language_representation</span> <span class="kn">import</span> <span class="n">RepresentationModel</span>
<span class="n">sentences</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Machine Learning and Deep Learning are part of AI&#34;</span><span class="p">,</span> 
             <span class="s2">&#34;Data Science will excel in future&#34;</span><span class="p">]</span> <span class="c1">#it should always be a list</span>


<span class="n">model</span> <span class="o">=</span> <span class="n">RepresentationModel</span><span class="p">(</span>
        <span class="n">model_type</span><span class="o">=</span><span class="s2">&#34;bert&#34;</span><span class="p">,</span>
        <span class="n">model_name</span><span class="o">=</span><span class="s2">&#34;bert-base-uncased&#34;</span><span class="p">,</span> <span class="c1">#英文模型</span>
        <span class="n">use_cuda</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>

<span class="n">sentence_vectors</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">encode_sentences</span><span class="p">(</span><span class="n">sentences</span><span class="p">,</span> <span class="n">combine_strategy</span><span class="o">=</span><span class="s2">&#34;mean&#34;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">sentence_vectors</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sentence_vectors</span><span class="p">)</span>

</code></pre></div><p>Run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(2, 768)

array([[-0.10800573,  0.19615649, -0.10756102, ..., -0.26362818,
         0.56403756, -0.30985302],
       [ 0.0201617 , -0.19381572,  0.4360792 , ..., -0.2979438 ,
         0.04984972, -0.702381  ]], dtype=float32)
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
