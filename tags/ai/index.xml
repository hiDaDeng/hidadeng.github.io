<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AI on 大邓和他的PYTHON</title>
    <link>/tags/ai/</link>
    <description>Recent content in AI on 大邓和他的PYTHON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 12 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据清洗 | 借助 chatGPT 设计正则表达式</title>
      <link>https://textdata.cn/blog/2023-02-12-regex-expression-generated-by-chatgpt/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-12-regex-expression-generated-by-chatgpt/</guid>
      <description>使用 chatGPT 做正则表达式做数据清洗。</description>
      <content:encoded><![CDATA[<p>正则表达式可以帮我们，对给定输入的数据input_data，设定一定的规律pattern，输出干净结果output_data的工具。</p>
<p>但对于小白而言，很多时候，我们知道 input_data 和 output_data， 但不知道如何设计 表达式pattern，毕竟即使是计算机专业的学生，如果不系统钻研，都不一定会快速上手，更遑论我们文科生小白。<strong>chatGPT 是一种具有极强学习和推理能力的工具， 我们需要先研究数据中的规律，抽象出能实现目的的 input_data 和 output_data， 丢给chatGPT帮我们设计</strong>。</p>
<p>接下来的人机对话中，input_data 和 output 为视频课程《Python实证指标构建与文本分析》正则表达式章节的实验数据。实验下来， 比通过谷歌百度搜效率高多了，准确率也不错。</p>
<br>
<h2 id="问题1-提取个人信息">问题1-提取个人信息</h2>
<h3 id="deng">deng:</h3>
<p>我正在学习Python正则表达式，将给出实验文本数据input_data，以及我想从中抽取出的内容output_data。请帮我设计对应的正则表达式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">input_text</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;大家好，我叫张三,来自河北，今年30岁。&#39;</span><span class="p">,</span>                      
              <span class="s1">&#39;大家好，我叫李四,来自山东，今年25岁。&#39;</span><span class="p">,</span>                     
              <span class="s1">&#39;大家好，我叫王五,来自内蒙古，今年22岁。&#39;</span><span class="p">]</span> 


<span class="n">output</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;河北&#39;</span><span class="p">,</span> <span class="s1">&#39;30&#39;</span><span class="p">),</span> 
          <span class="p">(</span><span class="s1">&#39;李四&#39;</span><span class="p">,</span> <span class="s1">&#39;山东&#39;</span><span class="p">,</span> <span class="s1">&#39;25&#39;</span><span class="p">),</span> 
          <span class="p">(</span><span class="s1">&#39;王五&#39;</span><span class="p">,</span> <span class="s1">&#39;内蒙古&#39;</span><span class="p">,</span> <span class="s1">&#39;22&#39;</span><span class="p">)]</span> 
</code></pre></div><h3 id="chatgpt">chatGPT:</h3>
<p>下面是匹配上述input_data和output_data的正则表达式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="n">input_data</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;大家好，我叫张三,来自河北，今年30岁。&#39;</span><span class="p">,</span> 
              <span class="s1">&#39;大家好，我叫李四,来自山东，今年25岁。&#39;</span><span class="p">,</span>
              <span class="s1">&#39;大家好，我叫王五,来自内蒙古，今年22岁。&#39;</span><span class="p">]</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">text</span> <span class="ow">in</span> <span class="n">input_text</span><span class="p">:</span>
    
    <span class="n">res</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;我叫(.*),来自(.*)，今年(.*)岁&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
    <span class="n">output_data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
    
<span class="nb">print</span><span class="p">(</span><span class="n">output_data</span><span class="p">)</span>
</code></pre></div><p>这段代码将使用正则表达式 <code>r&quot;我叫(.*),来自(.*),今年(\d+)岁&quot;</code> 匹配 <code>input_data</code> 中的内容，并将每一行的匹配结果存储在 <code>output_data</code> 列表中。</p>
<br>
<h2 id="问题2-提取出数据中的年份">问题2-提取出数据中的年份。</h2>
<h3 id="deng-1">deng:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">intput_data = &#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年22。目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;

output_data = [&#39;1991&#39;]
</code></pre></div><h3 id="chatgpt-1">chatGPT：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span> 
<span class="n">intput_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年22。目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span> 
<span class="n">output_data</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\b\d</span><span class="si">{4}</span><span class="s1">\b&#39;</span><span class="p">,</span> <span class="n">intput_data</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">output_data</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="问题3-resplit分割句子">问题3-re.split分割句子</h2>
<h3 id="deng-2">deng:</h3>
<p>用re.split 分割 input_data ，生成output_data， 设计刚刚的正则表达式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">intput_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年22。目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Python是一门面向对象的编程语言&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;诞生于1991年&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域&#39;</span><span class="p">,</span> 
               <span class="s1">&#39;一般情况下Python是Java的20%&#39;</span><span class="p">]</span>

</code></pre></div><h3 id="chatgpt-2">chatGPT：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="n">input_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年22。目前以广泛应用在网站开发、游戏软件开发、数据采集、机器学习等多个领域。一般情况下Python是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[。,]&#39;</span><span class="p">,</span> <span class="n">input_data</span><span class="p">)</span>
<span class="n">output_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="s1">&#39;。&#39;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">output_data</span> <span class="k">if</span> <span class="n">i</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="n">output_data</span><span class="p">)</span>
</code></pre></div><br>
<h2 id="问题4-resub替换数字为num">问题4-re.sub替换数字为NUM</h2>
<h3 id="deng-3">deng:</h3>
<p>使用正则表达式 re.sub 实现从input_data到output_data的转换。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">input_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年。</span><span class="se">\
</span><span class="se"></span><span class="s2">一般情况下Python代码量是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="s1">&#39;Python是一门面向对象的编程语言，诞生于NUM年。一般情况下Python代码量是Java的NUM%，所以说人生苦短，我用Python。&#39;</span>
</code></pre></div><h3 id="chatgpt-3">chatGPT</h3>
<p>您可以使用正则表达式 re.sub 来实现将所有数字替换为 &lsquo;NUM&rsquo; 的转换：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>

<span class="n">input_data</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;Python是一门面向对象的编程语言，诞生于1991年。</span><span class="se">\
</span><span class="se"></span><span class="s2">一般情况下Python代码量是Java的20%，所以说人生苦短，我用Python。&#34;&#34;&#34;</span>

<span class="n">output_data</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\d+&#39;</span><span class="p">,</span> <span class="s1">&#39;NUM&#39;</span><span class="p">,</span> <span class="n">input_data</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">output_data</span><span class="p">)</span>
</code></pre></div><br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用 chatGPT 做词频统计&amp;词云图</title>
      <link>https://textdata.cn/blog/2023-02-11-chatgpt-plus-for-text-mining/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-11-chatgpt-plus-for-text-mining/</guid>
      <description>使用 chatGPT 做词频统计&amp;amp;词云图，过程使用pandas、pyecharts、jieba等库。</description>
      <content:encoded><![CDATA[<h2 id="任务描述">任务描述</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">请用Python撰写一个中文文本分析的代码，进行词频统计、绘制词云图。

分析的数据是csv文件，过程使用pandas、pyecharts、jieba等库。

代码生成后，按照数据导入、数据清洗、数据分析、结果展示四个章节部分对代码进行中文讲解，格式为markdown。
</code></pre></div><br>
<h2 id="需要注意">需要注意</h2>
<ul>
<li>chatGPT需要科学上网才能使用， 推荐 <a href="https://textdata.cn/blog/2023-02-01-v2net-science-network/"><strong>科学上网工具v2net</strong></a>。</li>
<li>如果想升级为chatGPT Plus，需要使用国外的虚拟信用卡，推荐阅读[<strong>使用虚拟信用卡，国内用户升级为chatGPT plus会员</strong>]https://textdata.cn/blog/2023-02-11-credit_card_for_chatgpt-plus)</li>
</ul>
<br>
<h2 id="说明">说明</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">- 以下内容，80%左右内容为chatGPT生成，大邓工作主要是准备实验数据，调试代码，编辑章节。
- 实验环境chatGPT PLUS，今天刚刚花了20美元，使用全局网络模式下，chatGPT响应更稳定快速。
- chatGPT PLUS虽然很强，结果依然有问题，最初生成的词云图是基于wordcloud库，
  该库不支持中文，绘制的图片是乱码的。这里指导ta改为pyecharts制作词云图。
</code></pre></div><p>如需了解升级 <strong>chatGPT plus</strong> 教程(国内信用卡不支持，绑定需要国外的信用卡)， 可以私信大邓 <strong>37233583</strong>9， 备注【<strong>姓名-学校-专业</strong>】</p>
<br>
<h2 id="下载本文codezip"><a href="code.zip">下载本文</a></h2>
<p><a href="code.zip">点击下载本文代码&amp;数据</a></p>
<br>
<h2 id="一数据导入">一、数据导入</h2>
<p>首先需要导入需要的库：pandas、jieba、pyecharts等。如果电脑没有相应的库，可以命令行中执行以下安装命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">pip3 install pyecharts
pip3 install jieba
</code></pre></div><p>读取csv文件，使用pandas库的read_csv函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">jieba</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">from</span> <span class="nn">pyecharts</span> <span class="kn">import</span> <span class="n">options</span> <span class="k">as</span> <span class="n">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">Bar</span><span class="p">,</span> <span class="n">WordCloud</span>


<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div><p>Run</p>
<p><img loading="lazy" src="img/df.png" alt=""  />
</p>
<br>
<h2 id="二数据清洗">二、数据清洗</h2>
<p>清洗数据是文本分析的第一步，这里需要对数据进行去重、去除空值、去除停用词等操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 去重</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>

<span class="c1"># 去除空值</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>

<span class="c1"># 加载停用词表</span>
<span class="n">stopwords</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;stopwords.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">stopwords</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>

<span class="c1"># 分词，并去除停用词</span>
<span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
<span class="k">for</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;desc&#39;</span><span class="p">]:</span>
    <span class="n">seg_list</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">seg_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopwords</span><span class="p">:</span>
            <span class="n">text</span> <span class="o">+=</span> <span class="n">word</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>

<span class="c1">#查看text部分内容</span>
<span class="n">text</span><span class="p">[:</span><span class="mi">200</span><span class="p">]</span>
</code></pre></div><pre><code>Building prefix dict from the default dictionary ...
Dumping model to file cache /var/folders/y0/4gqxky0s2t94x1c1qhlwr6100000gn/T/jieba.cache
Loading model cost 0.460 seconds.
Prefix dict has been built successfully.
</code></pre>
<p>Run</p>
<pre><code>'唐天宝 十四年 长安城 小吏 李善德 突然 接到 一个 任务 贵妃 诞日 之前 岭南 运来 新鲜 荔枝 荔枝 “ 一日 色变 两日 香变 三日 味变 ” 岭南 长安 五千余里 山水 迢 ... ◆ 编辑 推荐   ★ 〇 一年 国际 布克奖 美国 国家图书奖 短 名单 作品   ★ 入选 〇 二一 年度 纽约时报 书评 周刊 十大 好书   ★ 入选 奥巴马 〇 一年 夏季 阅读 书单   ★ .'
</code></pre>
<br>
<h2 id="三数据分析">三、数据分析</h2>
<p>使用jieba库对文本进行分词处理，然后<strong>统计每个词语的出现频率</strong>。这里使用Python的字典数据结构进行计数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 分词</span>
<span class="n">seg_list</span> <span class="o">=</span> <span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

<span class="c1"># 统计词频</span>
<span class="n">word_count</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">seg_list</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>  <span class="c1"># 只统计长度大于等于2的词语</span>
        <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">word_count</span><span class="p">:</span>
            <span class="n">word_count</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">word_count</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">word_count</span>
</code></pre></div><p>Run</p>
<pre><code>{'唐天宝': 4,
 '十四年': 2,
 '长安城': 4,
 '小吏': 2,
 '李善德': 2,
 '突然': 5,
 '接到': 2,
 ......
 '文笔': 1,
 '行云流水': 1,
 '医学': 1,
 '研究生': 1,
 '大为': 1,
 '空怀': 1,
 '壮志': 1,
 '无职无权': 1,
 '时来运转': 1,
 '有名': 2,
 '有利': 1,
 '真切': 1,
 '旅程': 1,
 '困扰': 1,
 '傅真': 1,
 '暌违': 1,
 '七年': 1,
 ...}
</code></pre>
<br>
<h2 id="四结果展现">四、结果展现</h2>
<p>接下来，根据统计结果绘制词云图和柱状图。</p>
<h3 id="41-词云图">4.1 词云图</h3>
<p>绘制词云图，使用pyecharts的WordCloud库：
<img loading="lazy" src="img/wordcloud.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyecharts.options</span> <span class="k">as</span> <span class="nn">opts</span>
<span class="kn">from</span> <span class="nn">pyecharts.charts</span> <span class="kn">import</span> <span class="n">WordCloud</span>


<span class="n">wordfreqs</span> <span class="o">=</span> <span class="p">[(</span><span class="n">w</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span><span class="p">,</span><span class="n">f</span> <span class="ow">in</span> <span class="n">word_count</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>


<span class="p">(</span>
    <span class="n">WordCloud</span><span class="p">()</span>
    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">series_name</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">data_pair</span><span class="o">=</span><span class="n">wordfreqs</span><span class="p">,</span> <span class="n">word_size_range</span><span class="o">=</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>
    <span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span>
        <span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;词频分析&#34;</span><span class="p">,</span> <span class="n">title_textstyle_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TextStyleOpts</span><span class="p">(</span><span class="n">font_size</span><span class="o">=</span><span class="mi">23</span><span class="p">)</span>
        <span class="p">),</span>
        <span class="n">tooltip_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TooltipOpts</span><span class="p">(</span><span class="n">is_show</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;词云图.html&#34;</span><span class="p">)</span>  <span class="c1">#存储位置</span>
<span class="p">)</span>
</code></pre></div><h3 id="42-柱状图">4.2 柱状图</h3>
<p>绘制柱状图</p>
<p><img loading="lazy" src="img/bar.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="c1"># </span>
<span class="n">top_n</span> <span class="o">=</span> <span class="mi">20</span>
<span class="n">word_count_sorted</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">word_count</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">word_top_n</span> <span class="o">=</span> <span class="n">word_count_sorted</span><span class="p">[:</span><span class="n">top_n</span><span class="p">]</span>

<span class="n">bar</span> <span class="o">=</span> <span class="n">Bar</span><span class="p">()</span>
<span class="n">bar</span><span class="o">.</span><span class="n">add_xaxis</span><span class="p">([</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">word_top_n</span><span class="p">])</span>
<span class="n">bar</span><span class="o">.</span><span class="n">add_yaxis</span><span class="p">(</span><span class="s2">&#34;词频&#34;</span><span class="p">,</span> <span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">word_top_n</span><span class="p">])</span>
<span class="n">bar</span><span class="o">.</span><span class="n">set_global_opts</span><span class="p">(</span><span class="n">title_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">TitleOpts</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;词频统计&#34;</span><span class="p">),</span> <span class="n">xaxis_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">AxisOpts</span><span class="p">(</span><span class="n">axislabel_opts</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">LabelOpts</span><span class="p">(</span><span class="n">rotate</span><span class="o">=-</span><span class="mi">15</span><span class="p">)))</span>
<span class="n">bar</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&#34;word_count.html&#34;</span><span class="p">)</span>

</code></pre></div><br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用虚拟信用卡，国内用户升级为chatGPT plus会员</title>
      <link>https://textdata.cn/blog/2023-02-11-credit_card_for_chatgpt-plus/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-11-credit_card_for_chatgpt-plus/</guid>
      <description>可能周围很多朋友已经注册了 chatGPT， 想体验更稳定快速的plus版， 结果升级 chatGPT plus 时发现openAI不支持国内的信用卡。大邓的信用卡是 **中国银行VISA卡**，也不支持。参考了一些网上的教程，可以使用 **虚拟信用卡** 来搞定升级chatGPT plus的任务，耗时10min左右。使用虚拟信用卡，国内用户升级为chatGPT plus会员</description>
      <content:encoded><![CDATA[<h2 id="如何chatgpt-plus升级">如何chatGPT plus升级</h2>
<p>可能周围很多朋友已经注册了 chatGPT， 想体验更稳定快速的plus版， 结果升级 chatGPT plus 时发现openAI不支持国内的信用卡。大邓的信用卡是 <strong>中国银行VISA卡</strong>，也不支持。参考了一些网上的教程，可以使用 <strong>虚拟信用卡</strong> 来搞定升级chatGPT plus的任务，耗时10min左右。确保在**「全局VPN+浏览器无痕模式」下进行注册及升级PLUS的操作**</p>
<blockquote>
<p>Note:</p>
<p>虚拟信用卡是一种创新的支付工具，为消费者提供更安全、更便捷的网上支付体验。与传统信用卡不同，虚拟信用卡能够提供更多的安全性和便利性，同时还具有更广泛的使用范围。</p>
</blockquote>
<p>大邓用的 <strong>诺贝nobepay</strong> 的虚拟信用卡服务商，我已经充值并开通了一张卡，效果不错。</p>
<br>
<h2 id="诺贝nobepay">诺贝nobepay</h2>
<p>诺贝nobepay的特点如下：</p>
<ul>
<li>支持自定义姓名和地址信息，也可以<strong>一键生成虚拟地址</strong>；</li>
<li>无限开卡，随用随开，不用的卡可以删除，剩余余额将自动返还到账户，可以在下次使用；</li>
<li>费用透明，仅收取开卡费和充值手续费，没有其他隐藏费用；</li>
<li>多功能使用，可以用于日常购物消费，支持绑定美国PayPal，支持阿里云国际绑定，支持Google Play等；</li>
<li>支持人民币充值，只能使用绑定的微信充值，充值速度很快；</li>
<li>支持派安盈、万里汇、空中云汇、银行电汇、ach美元充值；</li>
</ul>
<br>
<h2 id="注册地址">注册地址</h2>
<p><strong>注册地址：<a href="https://nobepay.com/app/login?type=azmzep&amp;code=514DF0">https://nobepay.com</a>，邀请码： 514DF0</strong></p>
<br>
<p><img loading="lazy" src="img/nobe.png" alt=""  />
</p>
<p>注册后，充值前需要进行实名验证，根据提示，使用手机内的浏览器，扫码人脸验证即可。</p>
<br>
<p><strong>注册地址：<a href="https://nobepay.com/app/login?type=azmzep&amp;code=514DF0">https://nobepay.com</a>，邀请码： 514DF0</strong></p>
<br>
<h2 id="充值操作">充值操作</h2>
<p>需要注意，诺贝nobepay 有在线充值、客服充值、USDT充值等几种方式，</p>
<p><img loading="lazy" src="img/money_in.png" alt=""  />
</p>
<p>大邓选的 <strong>在线充值</strong>，最低充值门槛 <strong>500</strong> 元，高于990元，需要找客服代充。</p>
<p><img loading="lazy" src="img/account_cash.png" alt=""  />
</p>
<br>
<h2 id="注意">注意</h2>
<p><strong>nobepay 对于薅羊毛和拒付等不当行为非常重视，一旦发现，立即封号</strong>，不会通知您并退还任何资金。因此，请您在使用诺贝nobepay时遵守相关规则，以确保您的账户安全。</p>
<br>
<h2 id="开卡">开卡</h2>
<p>充值完成后，您就可以开始使用诺贝nobepay的虚拟信用卡了。该平台支持多种虚拟信用卡类型，如果您不确定哪种卡适合您，可以咨询在线客服。</p>
<p>注意，开卡是需要收费的，费用根据所选卡片不同而异，一般在1-5美元之间。充值的最低限额为10美元，部分卡片的最低限额要求为30美元，并需要支付3%的服务费。因此，费用的组成为：开卡费（1-5美元）+充值（最低10美元）+服务费（充值费用的3%）。</p>
<p>开卡时，点击<strong>随机地址</strong> 可以选择生成随机地址，构造出虚拟的姓名和地址(<strong>不要直接写我截图的个人信息，因为我已经用了，你们再用会有冲突</strong>)。</p>
<p><img loading="lazy" src="img/creadit_card.png" alt=""  />
</p>
<br>
<p>点击<strong>开卡</strong>，大概1min左右就在<strong>卡片列表</strong>中看到激活的卡片。</p>
<h2 id="总结">总结</h2>
<p>请注意，</p>
<ul>
<li>
<p>注册诺贝nobepay需要邀请码，并且需要先进行实名认证才能使用该服务。</p>
</li>
<li>
<p>在线充值仅支持微信支付，微信号和实名认证需要保持一致，最低充值金额为500元。</p>
</li>
<li>
<p>诺贝nobepay适合没有实体信用卡但需要进行海淘的用户，或者担心实体信用卡信息泄露的用户。</p>
</li>
<li>
<p>在删除卡片之前，请先解绑该卡片与所有服务商的关联，以避免出现拒付情况。</p>
</li>
</ul>
<p>诺贝nobepay存在一些不足，例如，开通的虚拟卡仅有1年的有效期，并且存在开卡费和服务费。因此，请您在使用诺贝nobepay之前仔细考虑您的需求和消费情况。</p>
<p><strong>注册地址：<a href="https://nobepay.com/app/login?type=azmzep&amp;code=514DF0">https://nobepay.com</a>，邀请码： 514DF0</strong></p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在巨型语言模型时代竞争：OpenAI vs 谷歌</title>
      <link>https://textdata.cn/blog/2023-02-09-openai-vs-google/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-09-openai-vs-google/</guid>
      <description>在未来，巨型语言模型将继续发挥重要作用，并不断推动人工智能的发展。随着技术的不断提高，它们将越来越智能，更加逼近人类语言的表达能力，从而改变人类的生活和工作方式。</description>
      <content:encoded><![CDATA[<h2 id="目录">目录</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">1. 巨型语言模型的诞生
   - OpenAI 和谷歌的研究历史
   - 巨型语言模型的定义与特征
2. OpenAI 与谷歌的研究方向对比
   - OpenAI：强调人工智能的社会责任
   - 谷歌：注重语言模型的应用前景
3. OpenAI 与谷歌的研究成果对比
   - OpenAI 的 GPT 系列模型
   - 谷歌的 Transformer 系列模型
4. 语言模型的应用前景
   - OpenAI 和谷歌的观点对比
   - 语言模型的未来发展趋势
5. 结语
   - 巨型语言模型的影响与未来展望
</code></pre></div><p><br><br></p>
<h2 id="一巨型语言模型的诞生">一、巨型语言模型的诞生</h2>
<h3 id="11-openai-和谷歌的研究历史">1.1 OpenAI 和谷歌的研究历史</h3>
<p>OpenAI 成立于 2015 年，是一家致力于开展人工智能研究并将其应用于改善人类生活的非盈利机构。自成立以来，OpenAI 一直致力于大语言模型的研究与开发。</p>
<p>谷歌的语言模型研究始于 2012 年，当时谷歌的研究团队开始探索使用神经网络进行语言处理的方法。在随后的几年中，谷歌不断完善和提升其语言模型的性能，并成功应用于许多实际场景中。</p>
<p>OpenAI 和谷歌都是语言模型研究的先驱者，它们在巨型语言模型的研究与应用方面都取得了显著的成绩。</p>
<br>
<h3 id="12-巨型语言模型的定义与特征">1.2 巨型语言模型的定义与特征</h3>
<p>巨型语言模型 (GPT) 是一种基于深度学习的语言处理模型，通过训练大量的文本数据，使得模型具备了对人类语言进行理解和生成的能力。</p>
<p>巨型语言模型具有以下特征：</p>
<ul>
<li>能够掌握大量语言知识，如词汇、语法、语义等</li>
<li>具有语言生成能力，能够根据上下文生成合理的语言输出</li>
<li>具有语言理解能力，能够根据输入文本进行语义理解</li>
</ul>
<p>巨型语言模型在各种语言任务上的表现都很优秀，如文本生成、问答、机器翻译等。它们已经成为语言技术领域的一个重要研究方向。</p>
<p><br><br></p>
<h2 id="二-openai-与谷歌的研究方向对比">二、 OpenAI 与谷歌的研究方向对比</h2>
<h3 id="21-openai强调人工智能的社会责任">2.1 OpenAI：强调人工智能的社会责任</h3>
<p>OpenAI 是一家由 Elon Musk, Sam Altman, Greg Brockman, Ilya Sutskever, Wojciech Zaremba, John Schulman 等人创立的人工智能研究机构，总部位于美国加州。OpenAI 强调人工智能的社会责任，致力于研究人工智能领域的前沿技术，同时也关注人工智能的社会影响和道德责任。</p>
<p>OpenAI 关注的领域包括：</p>
<ul>
<li>巨型语言模型</li>
<li>强化学习</li>
<li>机器人</li>
<li>生物信息学</li>
<li>生成对抗网络等</li>
</ul>
<p>OpenAI 发布了多项重要研究成果，如 GPT 系列语言模型、OpenAI Five 强化学习系统等。OpenAI 的研究工作一直得到了全球学术界和业界的高度关注。</p>
<p>OpenAI 的使命是创造安全、有益的人工智能，帮助人类实现更美好的未来。</p>
<br>
<h3 id="22-谷歌注重语言模型的应用前景">2.2 谷歌：注重语言模型的应用前景</h3>
<p>谷歌是全球科技巨头，总部位于美国加州。谷歌在人工智能领域有着丰富的研究经验，并在语言模型方面有着卓越的表现。谷歌强调语言模型的应用前景，致力于将语言模型技术应用到实际生活中，提高人们的工作效率和生活质量。</p>
<p>谷歌在语言模型方面的主要研究内容包括：</p>
<ul>
<li>语音识别</li>
<li>语音合成</li>
<li>智能问答系统</li>
<li>机器翻译等</li>
</ul>
<p>谷歌发布的 BERT 语言模型引领了语言模型的发展，并在多项 NLP 任务中取得了显著的成绩。谷歌还推出了 Google Assistant、Google Translate 等应用，为人们的生活和工作带来了便利。</p>
<p>谷歌致力于通过人工智能技术，帮助人们更好地了解世界，提高工作效率，改善生活质量。</p>
<p><br><br></p>
<h2 id="三openai-与谷歌的研究成果对比">三、OpenAI 与谷歌的研究成果对比</h2>
<h3 id="31-openai-的-gpt-系列模型">3.1 OpenAI 的 GPT 系列模型</h3>
<p>&ldquo;OpenAI 的 GPT 系列模型&rdquo; 包括了 OpenAI 在巨型语言模型领域的研究成果。GPT 指的是 Generative Pretrained Transformer，是一系列基于 Transformer 架构的语言生成模型。</p>
<p>第一代 GPT 模型于 2018 年发布，并在 NLP 研究领域引起了很大的关注。GPT 模型采用了预训练 + 微调的策略，在大量文本数据上预先训练出语言表示，再在特定任务上微调模型以提高其准确性。</p>
<p>后续，OpenAI 不断推出了更高版本的 GPT 模型，如 GPT-2 和 GPT-3，并不断提升了模型的语言生成能力和多样性。GPT-3 是目前世界上最大的语言生成模型，具有卓越的语言理解能力和生成能力，能够完成各种 NLP 任务，如文本生成、翻译等。</p>
<p>总的来说，OpenAI 的 GPT 系列模型为巨型语言模型的研究和应用提供了重要的贡献，也为人工智能的发展提供了新的思路。</p>
<br>
<h3 id="32-谷歌的-transformer-系列模型">3.2 谷歌的 Transformer 系列模型</h3>
<p>谷歌的 Transformer 系列模型是谷歌研究院在语言模型领域的代表性成果。Transformer 模型首次在 2017 年提出，其独特的结构使得其能够解决语言模型中的长依赖问题，从而提高了模型的效果。</p>
<p>随着 Transformer 模型的不断改进，谷歌在这一领域取得了显著的成绩，例如其在 2018 年推出的 BERT 模型，它在 NLP 领域产生了深远的影响，并被广泛应用在文本分类、问答等任务中。此外，谷歌还推出了其他多种 Transformer 模型，如 GPT-3、T5 等，进一步提高了语言模型的效果。</p>
<p>总的来说，谷歌的 Transformer 系列模型是语言模型领域的先驱，其研究成果为 NLP 领域的发展奠定了基础，同时也为谷歌在语言模型领域的竞争力增强奠定了基础。</p>
<p><br><br></p>
<h2 id="四语言模型的应用前景">四、语言模型的应用前景</h2>
<h3 id="41-openai-和谷歌的观点对比">4.1 OpenAI 和谷歌的观点对比</h3>
<p>OpenAI 和谷歌对巨型语言模型的看法有所不同。OpenAI 更注重人工智能技术的社会责任，强调技术应该在促进人类福祉的同时进行研究和开发。因此，OpenAI 一直以来都在努力提高人工智能技术的透明度和可靠性，并对技术的滥用和危害进行监测。</p>
<p>相比之下，谷歌更注重语言模型的应用前景。谷歌认为，巨型语言模型有巨大的商业潜力，可以应用于自然语言处理、机器翻译、搜索引擎优化等领域。因此，谷歌一直以来都在努力提高语言模型的准确性和效率，以便在商业应用中获得更高的竞争力。</p>
<p>总的来说，OpenAI 和谷歌的差异体现在对巨型语言模型的重点不同。OpenAI 更关注人工智能技术的社会责任，而谷歌更关注语言模型的商业应用。</p>
<br>
<h3 id="42-语言模型的未来发展趋势">4.2 语言模型的未来发展趋势</h3>
<p>随着人工智能的快速发展，巨型语言模型的未来发展趋势预计将具有以下几个方面：</p>
<p>多语种支持：巨型语言模型将不再仅仅局限于英语，而是能够支持更多的语言。</p>
<p>更高效的计算：巨型语言模型需要大量的计算资源，但是随着硬件和软件的发展，这些模型将变得更加高效。</p>
<p>更多的应用场景：巨型语言模型的应用将不仅限于聊天机器人，将会扩展到更多领域，如文本生成、翻译、摘要等。</p>
<p>更加逼真的人工智能：巨型语言模型将不断提高，使得人工智能更加逼真，从而带来更加流畅的人机交互体验。</p>
<p>更多的开放数据：随着政府和公司的重视，将有更多的开放数据可供研究者使用，从而提高语言模型的准确性和复杂性。</p>
<p>这些趋势将为巨型语言模型的未来发展带来更多的机会和挑战，并为人工智能的整体发展提供更多的推动力。</p>
<p><br><br></p>
<h2 id="五巨型语言模型的影响与未来展望">五、巨型语言模型的影响与未来展望</h2>
<p>巨型语言模型已经成为人工智能领域最受关注的研究方向之一。它们在语言生成、翻译、问答等方面有着广泛的应用。巨型语言模型对当前社会和未来产生了深远的影响，也激发了新的研究和应用前景。</p>
<p>首先，巨型语言模型的出现改变了人工智能的发展趋势。它们的出色表现使得许多以往难以实现的应用变得可行。此外，巨型语言模型的大规模数据训练和高效推理机制，使得它们在实际应用中有着广泛的前景。</p>
<p>其次，巨型语言模型的出现也引发了关于人工智能的伦理和道德问题的讨论。例如，巨型语言模型可能会模仿人类的语言和行为，对社会和个人造成影响；巨型语言模型的数据来源也存在隐私和安全问题。因此，关于巨型语言模型的研究和应用应该遵循相关的伦理和道德准则。</p>
<p>最后，巨型语言模型的未来发展仍将是人工智能领域的热巨型语言模型已经对人工智能领域产生了巨大的影响，它们已经被用于各种应用场景，如文本生成、机器翻译、对话系统、问答系统等。</p>
<p>然而，随着技术的不断发展，巨型语言模型仍有很多的潜力未能实现。它们的应用范围可以扩展到更多的领域，如医学、法律等。同时，巨型语言模型也需要继续提高它们的准确性和可靠性，避免生成不适当的内容。</p>
<p>在未来，巨型语言模型将继续发挥重要作用，并不断推动人工智能的发展。随着技术的不断提高，它们将越来越智能，更加逼近人类语言的表达能力，从而改变人类的生活和工作方式。</p>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用 chatGPT 撰写 Python 文本分析代码</title>
      <link>https://textdata.cn/blog/2023-02-01-chatgpt-usage-first-time/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/2023-02-01-chatgpt-usage-first-time/</guid>
      <description>最近 chatGPT 特别火，据说支持 Python 代码的撰写、修改等功能。今天正好可以正常浏览 chatGPT 网页，把注册的账号试了试，确实令我很震惊。感觉chatGPT按照我的问题描述，5min 轻轻松松完成公众号一篇技术文的分享文案。以下内容为我与chatGPT对话过程的录屏及截图。</description>
      <content:encoded><![CDATA[<p>最近 chatGPT 特别火，据说支持 Python 代码的撰写、修改等功能。今天正好可以正常浏览 chatGPT 网页，把注册的账号试了试，确实令我很震惊。感觉chatGPT按照我的问题描述，5min 轻轻松松完成公众号一篇技术文的分享文案。以下内容为我与chatGPT对话过程的录屏及截图。</p>
<p><br><br></p>
<h2 id="录屏">录屏</h2>
<iframe
    src="//player.bilibili.com/player.html?bvid=BV19A411r7SB&page=1"
    scrolling="no"
    height="500px"
    width="800px"
    frameborder="no"
    framespacing="0"
    allowfullscreen="true"
>
</iframe>

<p><br><br></p>
<h2 id="截图">截图</h2>
<p><img loading="lazy" src="img/1.png" alt=""  />
</p>
<br>
<p><img loading="lazy" src="img/2.png" alt=""  />
</p>
<br>
<p><img loading="lazy" src="img/3.png" alt=""  />
</p>
<br>
<p><img loading="lazy" src="img/4.png" alt=""  />
</p>
<br>
<p><img loading="lazy" src="img/5.png" alt=""  />
</p>
<br>
<br>
<h2 id="关于注册">关于注册</h2>
<p>chatGPT在外网，需要使用 [VPN科学上网工具]才能正常使用。我的解决办法</p>
<ol>
<li>淘宝搜chaGPT代注册，我花了18元10min搞定</li>
<li>我使用的VPN工具叫做<a href="http://main.v2ray.cx/aff.php?aff=2758">v2net</a>,其他位置的都被openai封锁了，使用日韩服务器可以正常访问，费用一个月1.9美元。</li>
</ol>
<br>
<br>
<h2 id="广而告之">广而告之</h2>
<ul>
<li><a href="https://textdata.cn/blog/call_for_paper/">长期征稿</a></li>
<li><a href="https://textdata.cn/blog/we_need_you/">长期招募小伙伴</a></li>
<li><a href="https://textdata.cn/blog/management_python_course/">付费视频课 | Python实证指标构建与文本分析</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
